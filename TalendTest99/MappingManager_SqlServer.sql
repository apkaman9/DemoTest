IF NOT EXISTS (SELECT *
	       FROM   SYSOBJECTS
	       WHERE  ID = OBJECT_ID(N'QA_STATUS_CODE')
		      AND TYPE = 'U')
  BEGIN
      EXECUTE ('CREATE TABLE QA_STATUS_CODE   (      QA_STATUS_DESC           TEXT NULL,      QA_STATUS_ID             INT NOT NULL,      QA_TEST_DISPOSITION_DESC VARCHAR(20) NULL   ) ALTER TABLE QA_STATUS_CODE ADD CONSTRAINT XPKQA_STATUS_CODE PRIMARY KEY CLUSTERED (QA_STATUS_ID ASC)')
  END
GO

IF NOT EXISTS (SELECT *
	       FROM   SYSOBJECTS
	       WHERE  ID = OBJECT_ID(N'MAPPING_SPECIFICATION')
		      AND TYPE = 'U')
  BEGIN
      EXECUTE ('CREATE TABLE MAPPING_SPECIFICATION   (      PROJ_ID                     INT NOT NULL,      MAP_ID                      BIGINT NOT NULL,      MAP_SEQ_ID                  INT NOT NULL,      EXTENDED_BUS_RULE           VARCHAR(MAX) NULL,      SRC_SYSTEM_ID               INT NULL,      SRC_SYSTEM_NAME             VARCHAR(MAX) NULL,      SRC_SYSTEM_ENVIRONMENT_NAME VARCHAR(MAX) NULL,      SRC_TABLE_NAME              VARCHAR(MAX) NULL,      SRC_COLUMN_NAME             VARCHAR(MAX) NULL,      SRC_COL_DATATYPE            VARCHAR(50) NULL,      SRC_COL_LENGTH              VARCHAR(50) NULL,      SRC_COL_PRECISION           VARCHAR(50) NULL,      SRC_COL_SCALE               VARCHAR(50) NULL,      SRC_COL_DB_DEFAULT_VALUE    VARCHAR(50) NULL,      SRC_COL_DEF_COMMENTS        VARCHAR(MAX) NULL,      SRC_COL_IDENTITY_FLAG       CHAR(1) NULL,      SRC_COL_NULLABLE_FLAG       CHAR(1) NULL,      SRC_PERCENT_NULL_VALUE      VARCHAR(50) NULL,      SRC_NATURAL_KEY_FLAG        CHAR(1) NULL,      SRC_MIN_VALUE               VARCHAR(50) NULL,      SRC_MAX_VALUE               VARCHAR(50) NULL,      TGT_SYSTEM_ID               INT NULL,      TGT_SYSTEM_NAME             VARCHAR(MAX) NULL,      TGT_SYSTEM_ENVIRONMENT_NAME VARCHAR(MAX) NULL,      TGT_TABLE_NAME              VARCHAR(MAX) NULL,      TGT_COLUMN_NAME             VARCHAR(MAX) NULL,      TGT_COL_DATATYPE            VARCHAR(50) NULL,      TGT_COL_LENGTH              VARCHAR(50) NULL,      TGT_COL_PRECISION           VARCHAR(50) NULL,      TGT_COL_SCALE               VARCHAR(50) NULL,      TGT_COL_ETL_DEFAULT_VALUE   VARCHAR(50) NULL,      TGT_COL_DEF_COMMENTS        VARCHAR(MAX) NULL,      TGT_NATURAL_KEY_FLAG        CHAR(1) NULL,      TGT_PRIMARY_KEY_FLAG        CHAR(1) NULL,      TRNSF_LOOKUP_CONDITION      VARCHAR(MAX) NULL,      BUSINESS_RULE               VARCHAR(MAX) NULL,      COL_MAP_COMPLETE_FLAG       CHAR(1) NULL,      LAST_MODIFIED_BY            VARCHAR(50) NULL,      LAST_MODIFIED_DATE_TIME     DATETIME NULL,      CREATED_BY                  VARCHAR(50) NOT NULL,      CREATED_DATETIME            DATETIME NOT NULL,      USER_DEFINATION1            VARCHAR(MAX) NULL,      USER_DEFINATION2            VARCHAR(MAX) NULL,      USER_DEFINATION3            VARCHAR(MAX) NULL,      USER_DEFINATION4            VARCHAR(MAX) NULL,      USER_DEFINATION5            VARCHAR(MAX) NULL,      TGT_COL_NULLABLE_FLAG       CHAR(1)   ) ALTER TABLE MAPPING_SPECIFICATION ADD CONSTRAINT XPKMAPPING_SPECIFICATION PRIMARY KEY CLUSTERED ( PROJ_ID ASC, MAP_ID ASC, MAP_SEQ_ID ASC)')

  END
GO

IF NOT EXISTS (SELECT *
	       FROM   SYSOBJECTS
	       WHERE  ID = OBJECT_ID(N'MAPPING_STATUS')
		      AND TYPE = 'U')
  BEGIN
      EXECUTE ('CREATE TABLE MAPPING_STATUS   (      MAP_ID             BIGINT NOT NULL,      PROJ_ID            INT NOT NULL,      USER_ID            VARCHAR(MAX) NULL,      RESPONSIABLES      VARCHAR(MAX) NULL,      STATUS             VARCHAR(MAX) NULL,      LOGIN_USER         VARCHAR(MAX) NULL,      ASSIGNMENT_CHANGES VARCHAR(MAX) NULL   )')
  END
GO

IF NOT EXISTS (SELECT *
	       FROM   SYSOBJECTS
	       WHERE  ID = OBJECT_ID(N'MAPPING_DOCUMENTS')
		      AND TYPE = 'U')
  BEGIN
      EXECUTE ('CREATE TABLE MAPPING_DOCUMENTS   (      MAP_DOC_NAME              VARCHAR(50) NULL,      MAP_DOC_TYPE              VARCHAR(20) NULL,      MAP_DOC_INTEDED_USE_DESCR VARCHAR(MAX) NULL,      MAP_DOC_OWNER             VARCHAR(50) NULL,      MAP_ID                    BIGINT NOT NULL,      MAP_DOC_ID                INT NOT NULL,      CREATED_DATE_TIME         DATETIME NOT NULL,      LAST_MODIFIED_BY          VARCHAR(20) NULL,      LAST_MODIFIED_DATE_TIME   DATETIME NULL,      CREATED_BY                VARCHAR(20) NOT NULL,      MAP_DOC_OBJECT            VARCHAR(MAX) NOT NULL,      APPROVAL_REQD_FLAG        CHAR(1) NULL,      APPROVED_BY               VARCHAR(20) NULL,      APROVAL_DATETIME          DATETIME NULL,      DOCUMENT_STATUS           VARCHAR(20) NULL   ) ALTER TABLE MAPPING_DOCUMENTS ADD CONSTRAINT XPKMAPPING_DOCUMENTS PRIMARY KEY CLUSTERED ( MAP_ID ASC, MAP_DOC_ID ASC)')
  END
GO

IF NOT EXISTS (SELECT *
	       FROM   SYSOBJECTS
	       WHERE  ID = OBJECT_ID(N'MAPPING_DETAILS')
		      AND TYPE = 'U')
  BEGIN
      EXECUTE ('CREATE TABLE MAPPING_DETAILS   (      MAP_ID                       BIGINT NOT NULL,      MAP_NAME                     VARCHAR(50) NULL,      MAP_SPEC_VERSION             DECIMAL(18, 2) NULL,      MAP_DESCRIPTION              VARCHAR(MAX) NULL,      PROJECT_ID                   INT NULL,      SOURCE_EXTRACT_QUERY         VARCHAR(MAX) NULL,      SOURCE_EXTRACT_DESCRIPTION   VARCHAR(MAX) NULL,      TARGET_UPDATE_STRATEGY       VARCHAR(3) NULL,      TRRGET_UPGATE_STRATEGY_NOTES VARCHAR(MAX) NULL,      TEST_DISPOSITION             CHAR(1) NULL,      TESTING_NOTES                VARCHAR(MAX) NULL,      CREATED_BY                   VARCHAR(50) NULL,      CREATED_DATE_TIME            DATETIME NULL,      LAST_MODIFIED_BY             VARCHAR(50) NULL,      LAST_MODIFIED_DATE_TIME      DATETIME NULL,      STATUS                       VARCHAR(50) NULL,      VERSIONLABEL                 VARCHAR(20) NULL,      CHANGED_DESCRIPTION          VARCHAR(MAX) NULL,   ) ALTER TABLE MAPPING_DETAILS ADD CONSTRAINT XPKMAPPING_DETAILS PRIMARY KEY CLUSTERED ( MAP_ID ASC)')
  END
GO

IF NOT EXISTS (SELECT *
	       FROM   SYSOBJECTS
	       WHERE  ID = OBJECT_ID(N'TRANSFORMATIONS')
		      AND TYPE = 'U')
  BEGIN
      EXECUTE ('CREATE TABLE TRANSFORMATIONS   (      TRANSF_NAME             VARCHAR(50) NOT NULL,      PSUEDO_CODE             VARCHAR(MAX) NULL,      TRANSF_USE_DESCR        VARCHAR(MAX) NULL,      CREATED_DATETIME        DATETIME NOT NULL,      LAST_MODIFIED_BY        VARCHAR(20) NULL,      LAST_MODIFIED_DATE_TIME DATETIME NULL,      CREATED_BY              VARCHAR(20) NOT NULL   ) ALTER TABLE TRANSFORMATIONS ADD CONSTRAINT XPKTRANSFORMATIONS PRIMARY KEY CLUSTERED ( TRANSF_NAME ASC )')
  END
GO

IF NOT EXISTS (SELECT *
	       FROM   SYSOBJECTS
	       WHERE  ID = OBJECT_ID(N'TRANSFORMATIONS_HISTORY')
		      AND TYPE = 'U')
  BEGIN
      EXECUTE ('CREATE TABLE TRANSFORMATIONS_HISTORY   (      TRANSF_NAME             VARCHAR(50) NULL      ,      PSUEDO_CODE             VARCHAR(MAX) NULL,      TRANSF_USE_DESCR        VARCHAR(MAX)      NULL,      CREATED_DATETIME        DATETIME NULL,      LAST_MODIFIED_BY        VARCHAR(20) NULL      ,      LAST_MODIFIED_DATE_TIME DATETIME NULL,      CREATED_BY              VARCHAR(20) NULL   )')
  END
GO

IF NOT EXISTS (SELECT *
	       FROM   SYSOBJECTS
	       WHERE  ID = OBJECT_ID(N'SYSTEM_DOCUMENTS')
		      AND TYPE = 'U')
  BEGIN
      EXECUTE ('CREATE TABLE SYSTEM_DOCUMENTS   (      SYS_DOC_NAME              VARCHAR(50) NULL,      SYS_DOC_TYPE              VARCHAR(20) NULL,      SYS_DOC_INTEDED_USE_DESCR VARCHAR(MAX) NULL,      PROJ_DOC_OWNER            VARCHAR(50) NULL,      SYSTEM_DOC_ID             INT NOT NULL,      SYSTEM_ID                 INT NOT NULL,      CREATED_DATE_TIME         DATETIME NOT NULL,      LAST_MODIFIED_BY          VARCHAR(20) NULL,      LAST_MODIFIED_DATE_TIME   DATETIME NULL,      CREATED_BY                VARCHAR(20) NOT NULL,      PROJECT_DOC_OBJECT        VARCHAR(MAX) NOT NULL,      APPROVAL_REQD_FLAG        CHAR(1) NULL,      APPROVED_BY               VARCHAR(20) NULL,      APROVAL_DATETIME          DATETIME NULL,      DOCUMENT_STATUS           VARCHAR(20) NULL   ) ALTER TABLE SYSTEM_DOCUMENTS ADD CONSTRAINT XPKSYSTEM_DOCUMENTS PRIMARY KEY CLUSTERED ( SYSTEM_DOC_ID ASC, SYSTEM_ID ASC)')
  END
GO

-- CHANGED COLUMN NAME WIDTH OF TABLE_NAME TO VARCHAR(75)
IF NOT EXISTS (SELECT *
	       FROM   SYSOBJECTS
	       WHERE  ID = OBJECT_ID(N'SYSTEM_TABLE_COLUMNS_METADATA')
		      AND TYPE = 'U')
  BEGIN
      EXECUTE ('CREATE TABLE SYSTEM_TABLE_COLUMNS_METADATA   (      TABLE_NAME              VARCHAR(75) NOT NULL,      COLUMN_NAME             VARCHAR(50) NOT NULL,      COL_DATATYPE            VARCHAR(20) NULL,      COL_LENGTH              VARCHAR(20) NULL,      COL_PRECISION           VARCHAR(20) NULL,      COL_DB_DEFAULT_VALUE    VARCHAR(50) NULL,      COL_ETL_DEFAULT_VALUE   VARCHAR(50) NULL,      COL_IDENTITY_FLAG       VARCHAR(1) NULL,      SYSTEM_ID               INT NOT NULL,      SYSTEM_ENV_NAME         VARCHAR(50) NOT NULL,      COL_DEF_COMMENTS        VARCHAR(MAX) NULL,      CREATED_DATETIME        DATETIME NOT NULL,      LAST_MODIFIED_BY        VARCHAR(20) NULL,      LAST_MODIFIED_DATE_TIME DATETIME NULL,      CREATED_BY              VARCHAR(20) NOT NULL,      COL_NULLABLE_FLAG       VARCHAR(1) NULL,      MIN_VALUE               VARCHAR(20) NULL,      MAX_VALUE               VARCHAR(20) NULL,      PERCENT_NULL_VALUE      VARCHAR(20) NULL,      COL_SCALE               VARCHAR(20) NULL,      PRIMARY_KEY_FLAG        VARCHAR(1) NULL,      NATURAL_KEY_FLAG        VARCHAR(1) NULL   ) ALTER TABLE SYSTEM_TABLE_COLUMNS_METADATA ADD CONSTRAINT XPKSYSTEM_TABLE_COLUMNS_METADATA PRIMARY KEY CLUSTERED ( SYSTEM_ID ASC, SYSTEM_ENV_NAME ASC, TABLE_NAME ASC, COLUMN_NAME ASC)')
  END
GO

IF NOT EXISTS (SELECT *
	       FROM   SYSOBJECTS
	       WHERE  ID = OBJECT_ID(N'SYSTEM_TABLE_METADATA')
		      AND TYPE = 'U')
  BEGIN
      EXECUTE (
'CREATE TABLE SYSTEM_TABLE_METADATA   (      SYSTEM_ID               INT NOT NULL,      TABLE_NAME              VARCHAR(75) NOT NULL,      SYSTEM_ENV_NAME         VARCHAR(50) NOT NULL,      TABLE_DEF_COMMENTS      VARCHAR(MAX) NULL,      CREATED_DATETIME        DATETIME NOT NULL,      LAST_MODIFIED_BY        VARCHAR(20) NULL,      LAST_MODIFIED_DATE_TIME DATETIME NULL,      CREATED_BY              VARCHAR(20) NOT NULL,      NUMBER_ROWS             BIGINT NULL,      TYPE                    VARCHAR(20) NULL   ) ALTER TABLE SYSTEM_TABLE_METADATA ADD CONSTRAINT XPKSYSTEM_TABLE_METADATA PRIMARY KEY CLUSTERED ( SYSTEM_ID ASC, SYSTEM_ENV_NAME ASC, TABLE_NAME ASC)'
)
END
GO

IF NOT EXISTS (SELECT * FROM   SYSOBJECTS WHERE  ID = OBJECT_ID(N'SYS_CON_ENVIRONMENTS') AND TYPE = 'U')
  BEGIN
    IF EXISTS (SELECT * FROM   SYSOBJECTS WHERE  ID = OBJECT_ID(N'SYSTEM_CONNECTIVITY_ENVIRONMENTS') AND TYPE = 'U')
        BEGIN
            EXECUTE SP_RENAME 'SYSTEM_CONNECTIVITY_ENVIRONMENTS' , 'SYS_CON_ENVIRONMENTS'
        END
  END
GO

IF NOT EXISTS (SELECT * FROM sys.key_constraints WHERE name='XPKSYS_CON_ENVIRONMENTS')
BEGIN
    IF EXISTS (SELECT * FROM sys.key_constraints WHERE name='XPKSYSTEM_CONNECTIVITY_ENVIRONMENTS')
    BEGIN
            EXECUTE SP_RENAME N'XPKSYSTEM_CONNECTIVITY_ENVIRONMENTS', N'XPKSYS_CON_ENVIRONMENTS'
    END
END
GO

IF NOT EXISTS (SELECT *
	       FROM   SYSOBJECTS
	       WHERE  ID = OBJECT_ID(N'SYS_CON_ENVIRONMENTS')
		      AND TYPE = 'U')
  BEGIN
      EXECUTE ('CREATE TABLE SYS_CON_ENVIRONMENTS   (
        SYSTEM_ENVIRONMENT_TYPE              VARCHAR(50) NULL,
        SYSTEM_ENVIRONMENT_NAME              VARCHAR(50) NOT NULL,
        SYSTEM_ID                            INT NOT NULL,
        SYSTEM_NAME                          VARCHAR(50) NULL,
        SERVER_PLATFORM                      VARCHAR(50) NULL,
        SERVER_OS_VERSION                    VARCHAR(50) NULL,
        SPECIAL_APPROVAL_CONTVY_INSTRUCTIONS VARCHAR(MAX) NULL,
        CREATED_DATETIME                     DATETIME NOT NULL,
        LAST_MODIFIED_BY                     VARCHAR(20) NULL,
        LAST_MODIFIED_DATE_TIME              DATETIME NULL,
        CREATED_BY                           VARCHAR(20) NOT NULL,
        IP_ADDRESS                           VARCHAR(50) NULL,
        PORT                                 VARCHAR(10) NULL,
        DBMS_NAME                            VARCHAR(50) NULL,
        DBMS_INSTANCE_SCHEMA                 VARCHAR(50) NULL,
        ENV_INTENDED_USE_DESCR               VARCHAR(MAX) NULL,
        ENVIRONMENT_NOTES                    VARCHAR(MAX) NULL,
        USER_NAME                            VARCHAR(50) NULL,
        PASSWORD                             VARCHAR(50) NULL,
        DATABASE_TYPE                        VARCHAR(50) NULL,
        DATABASE_URL                         VARCHAR(255) NULL,
        DATABASE_DRIVER                      VARCHAR(50) NULL,
        LAST_LOADING_TIME                    DATETIME NULL,
        USER_ID                              VARCHAR(50) NULL   )')
        ALTER TABLE SYS_CON_ENVIRONMENTS ADD CONSTRAINT XPKSYS_CON_ENVIRONMENTS PRIMARY KEY CLUSTERED ( SYSTEM_ID ASC, SYSTEM_ENVIRONMENT_NAME ASC)
  END
GO

IF NOT EXISTS (SELECT *
	       FROM   SYSOBJECTS
	       WHERE  ID = OBJECT_ID(N'SYSTEM_DEFINITION_DETAILS')
		      AND TYPE = 'U')
  BEGIN
      EXECUTE (
      'CREATE TABLE SYSTEM_DEFINITION_DETAILS   (      SYSTEM_NAME                   VARCHAR(20) NOT NULL,      SYSTEM_MOVE_TYPE_SRC_TGT      VARCHAR(20) NULL,      SYSTEM_BUSINESS_PURPOSE_SHORT VARCHAR(MAX) NULL,      SYSTEM_DESCRIPTION_LONG       VARCHAR(MAX) NULL,      SERVER_PLATFORM               VARCHAR(20) NULL,      SERVER_OS_VERSION             VARCHAR(20) NULL,      DBMS_PLATFORM                 VARCHAR(20) NULL,      DBMS_VERSION                  VARCHAR(20) NULL,      FILE_MANAGMENT_SYSTEM_TYPE    VARCHAR(20) NULL,      FILE_LOCATION                 VARCHAR(255) NULL,      ESB_PLATFORM_TYPE             VARCHAR(20) NULL,      ESB_Q_MGR_NAME                VARCHAR(20) NULL,      RELEASE                       VARCHAR(20) NULL,      TOTAL_NUM_TABLES              INT NULL,      TOTAL_DB_SIZE_GIGABYTES       VARCHAR(20) NULL,      DEFINITION_OF_END_OF_DAY      VARCHAR(MAX) NULL,      DAILY_BATCH_EXTRACT_WINDOW    VARCHAR(MAX) NULL,      AVG_NUM_NAMED_USERS           VARCHAR(20) NULL,      AVG_NUM_CONCURRENT_USERS      VARCHAR(20) NULL,      SPECIAL_INSRUCTIONS_COMMENTS  VARCHAR(MAX) NULL,      SYSTEM_OWNER_FULL_NAME        VARCHAR(255) NULL,      SYSTEM_OWNER_TEL              VARCHAR(20) NULL,      SYSTEM_OWNER_EMAIL            VARCHAR(255) NULL,      CREATED_BY                    VARCHAR(20) NOT NULL,      CREATED_DATETIME              DATETIME NOT NULL,      LAST_MODIFIED_BY              VARCHAR(20) NULL,      LAST_MODIFIED_DATE_TIME       DATETIME NULL,      SYSTEM_ID                     INT NOT NULL   ) ALTER TABLE SYSTEM_DEFINITION_DETAILS ADD CONSTRAINT XPKSYSTEM_DEFINITION_DETAILS PRIMARY KEY CLUSTERED ( SYSTEM_ID ASC)')
  END
GO

IF NOT EXISTS (SELECT *
	       FROM   SYSOBJECTS
	       WHERE  ID = OBJECT_ID(N'PROJECT_DOCUMENTS')
		      AND TYPE = 'U')
  BEGIN
      EXECUTE ('CREATE TABLE PROJECT_DOCUMENTS   (      PROJ_DOC_NAME              VARCHAR(50) NULL,      PROJ_DOC_TYPE              VARCHAR(20) NULL,      PROJ_DOC_INTEDED_USE_DESCR VARCHAR(MAX) NULL,      PROJECT_DOC_REFERENCE      VARCHAR(50) NULL,      PROJ_DOC_REF_NUMBER        VARCHAR(20) NULL,      PROJ_DOC_OWNER             VARCHAR(50) NULL,      PROJ_DOC_ID                INT NOT NULL,      PROJ_ID                    INT NOT NULL,      CREATED_DATE_TIME          DATETIME NOT NULL,      LAST_MODIFIED_BY           VARCHAR(20) NULL,      LAST_MODIFIED_DATE_TIME    DATETIME NULL,      CREATED_BY                 VARCHAR(20) NOT NULL,      PROJECT_DOC_OBJECT         VARCHAR(MAX) NOT NULL,      APPROVAL_REQD_FLAG         VARCHAR(1) NULL,      APPROVED_BY                VARCHAR(50) NULL,      APROVAL_DATETIME           DATETIME NULL,      DOCUMENT_STATUS            VARCHAR(20) NULL   ) ALTER TABLE PROJECT_DOCUMENTS ADD CONSTRAINT XPKPROJECT_DOCUMENTS PRIMARY KEY CLUSTERED ( PROJ_DOC_ID ASC, PROJ_ID ASC)')
  END
GO

IF NOT EXISTS (SELECT *
	       FROM   SYSOBJECTS
	       WHERE  ID = OBJECT_ID(N'PROJECT_DOCUMENT_TEMPLATES')
		      AND TYPE = 'U')
  BEGIN
      EXECUTE (
      'CREATE TABLE PROJECT_DOCUMENT_TEMPLATES   (      PROJ_DOC_ID                      INT NOT NULL,      PROJ_DOC_NAME                    VARCHAR(20) NOT NULL,      PROJ_DOC_INTEDED_USE_DESCR       TEXT NULL,      PROJ_DOC_TYPE                    VARCHAR(20) NULL,      REQD_FLAG                        VARCHAR(1) NULL,      PROJ_DOC_REF_NUMBER              VARCHAR(20) NULL,      PROJ_DOC_OWNER                   VARCHAR(50) NULL,      PROJECT_DOC_REFERENCE            VARCHAR(MAX) NULL,      ACTIVE_FLAG                      VARCHAR(1) NULL,      PROJECT_DOC_OBJECT               VARBINARY(MAX) NOT NULL,      PROJECT_DOC_NETWK_DRIVE_LOCATION VARCHAR(MAX) NULL,      CREATED_DATETIME                 DATETIME NOT NULL,      LAST_MODIFIED_BY                 VARCHAR(20) NULL,      LAST_MODIFIED_DATE_TIME          DATETIME NULL,      CREATED_BY                       VARCHAR(20) NOT NULL   ) ALTER TABLE PROJECT_DOCUMENT_TEMPLATES ADD CONSTRAINT XPKPROJECT_DOCUMENT_TEMPLATES PRIMARY KEY CLUSTERED ( PROJ_DOC_ID ASC)')
  END
GO

IF NOT EXISTS (SELECT *
	       FROM   SYSOBJECTS
	       WHERE  ID = OBJECT_ID(N'PROJECT_RESOURCES')
		      AND TYPE = 'U')
  BEGIN
      EXECUTE ('CREATE TABLE PROJECT_RESOURCES   (      ASSIGNED_ROLE             VARCHAR(20) NOT NULL,      ASSIGNED_RESPONSIBILITIES VARCHAR(MAX) NULL,      PROJ_ID                   INT NOT NULL,      USER_ID                   VARCHAR(20) NOT NULL,      ROLE_ID                   INT NOT NULL,      CREATED_BY                VARCHAR(20) NOT NULL,      CREATED_DATETIME          DATETIME NOT NULL,      LAST_MODIFIED_DATE_TIME   DATETIME NULL,      LAST_MODIFIED_BY          VARCHAR(20) NULL   ) ALTER TABLE PROJECT_RESOURCES ADD CONSTRAINT XPKPROJECT_RESOURCES PRIMARY KEY CLUSTERED ( PROJ_ID ASC, USER_ID ASC, ROLE_ID ASC)')
  END
GO

IF NOT EXISTS (SELECT *
	       FROM   SYSOBJECTS
	       WHERE  ID = OBJECT_ID(N'PROJECT')
		      AND TYPE = 'U')
  BEGIN
      EXECUTE ('CREATE TABLE PROJECT   (      PROJ_ID                      INT NOT NULL,      PROJ_NAME                    VARCHAR(200) NOT NULL,      PROJ_DESCR                   VARCHAR(MAX) NULL,      PROJ_COST_CENTER             VARCHAR(20) NULL,      PROJ_IT_SPONSOR_FULL_NAME    VARCHAR(50) NULL,      PROJ_BUS_SPONSOR_FULL_NAME   VARCHAR(50) NULL,      PROJ_MGR_APP_OWNER_FULL_NAME VARCHAR(50) NULL,      CREATED_DATETIME             DATETIME NOT NULL,      LAST_MODIFIED_BY             VARCHAR(20) NULL,      LAST_MODIFIED_DATE_TIME      DATETIME NULL,      CREATED_BY                   VARCHAR(20) NOT NULL   ) ALTER TABLE PROJECT ADD CONSTRAINT XPKPROJECT PRIMARY KEY CLUSTERED (PROJ_ID ASC )')
  END
GO

IF NOT EXISTS (SELECT *
	       FROM   SYSOBJECTS
	       WHERE  ID = OBJECT_ID(N'PROJECT_SYSTEMS')
		      AND TYPE = 'U')
  BEGIN
      EXECUTE ('CREATE TABLE PROJECT_SYSTEMS   (      PROJECT_ID  VARCHAR(50) NULL,      TABLE_NAME  VARCHAR(75) NULL,      TYPE        VARCHAR(50) NULL,      SYSTEM_NAME VARCHAR(50) NULL,      ENV_NAME    VARCHAR(50) NULL,      SYSTEM_ID   VARCHAR(50) NULL   )')
  END
GO

IF NOT EXISTS (SELECT *
	       FROM   SYSOBJECTS
	       WHERE  ID = OBJECT_ID(N'USER_ASSIGNED_ROLES')
		      AND TYPE = 'U')
  BEGIN
      EXECUTE ('CREATE TABLE USER_ASSIGNED_ROLES   (      USER_ID VARCHAR(20) NOT NULL,      ROLE_ID INT NOT NULL   ) ALTER TABLE USER_ASSIGNED_ROLES ADD CONSTRAINT XPKUSER_ASSIGNED_ROLES PRIMARY KEY CLUSTERED (USER_ID ASC, ROLE_ID ASC)')
  END
GO

IF NOT EXISTS (SELECT *
	       FROM   SYSOBJECTS
	       WHERE  ID = OBJECT_ID(N'SECURITY_ROLES')
		      AND TYPE = 'U')
  BEGIN
      EXECUTE ('CREATE TABLE SECURITY_ROLES   (      ROLE_NAME               VARCHAR(20) NOT NULL,      ROLE_DESCR              VARCHAR(MAX) NULL,      ROLE_ID                 INT NOT NULL,      CREATED_BY              VARCHAR(20) NOT NULL,      CREATED_DATETIME        DATETIME NOT NULL,      LAST_MODIFIED_DATE_TIME DATETIME NULL,      LAST_MODIFIED_BY        VARCHAR(20) NULL   ) ALTER TABLE SECURITY_ROLES ADD CONSTRAINT XPKSECURITY_ROLES PRIMARY KEY CLUSTERED ( ROLE_ID ASC)')
  END
GO

IF NOT EXISTS (SELECT *
	       FROM   SYSOBJECTS
	       WHERE  ID = OBJECT_ID(N'USERS')
		      AND TYPE = 'U')
  BEGIN
      EXECUTE (
  'CREATE TABLE USERS   (      USER_ID                  VARCHAR(20) NOT NULL,      USER_FULL_NAME           VARCHAR(50) NOT NULL,      USER_EMAIL_ADDR          VARCHAR(50) NULL,      USER_TEL                 VARCHAR(20) NULL,      USER_MOBILE              VARCHAR(20) NULL,      USER_ALTERNATE_TEL       VARCHAR(20) NULL,      DEFAULT_ROLE             VARCHAR(20) NOT NULL,      USER_PASSWORD            VARCHAR(50) NOT NULL,      USER_COMPANY_TITLE       VARCHAR(50) NULL,      USER_COMPANY             VARCHAR(255) NULL,      USER_REPORTS_TO_MGR_NAME VARCHAR(50) NULL,      CREATED_BY               VARCHAR(20) NOT NULL,      CREATED_DATETIME         DATETIME NOT NULL,      LAST_MODIFIED_DATE_TIME  DATETIME NULL,      LAST_MODIFIED_BY         VARCHAR(20) NULL,      USER_READ_ONLY           VARCHAR(1)   ) ALTER TABLE USERS ADD CONSTRAINT XPKUSERS PRIMARY KEY CLUSTERED (USER_ID ASC)'
      )
  END
GO

IF NOT EXISTS (SELECT *
	       FROM   SYSOBJECTS
	       WHERE  ID = OBJECT_ID(N'SPECIFICATION_LOCK')
		      AND TYPE = 'U')
  BEGIN
      EXECUTE ('CREATE TABLE SPECIFICATION_LOCK   (      ISSPECIFICATION_LOCK CHAR(1) NULL,      PROJ_ID              INT NOT NULL,      MAP_ID               BIGINT NOT NULL,      SESSION_ID           VARCHAR(MAX) NULL,      USER_ID              VARCHAR(20) NULL   ) ALTER TABLE SPECIFICATION_LOCK ADD CONSTRAINT XPKSPECIFICATIONLOCK PRIMARY KEY CLUSTERED (MAP_ID ASC)')
  END
GO

IF NOT EXISTS (SELECT *
	       FROM   SYSOBJECTS
	       WHERE  ID = OBJECT_ID(N'SEQUENCE_KEY')
		      AND TYPE = 'U')
  BEGIN
      EXECUTE ('CREATE TABLE SEQUENCE_KEY   (      SEQUENCE_ID BIGINT NOT NULL,   )')
  END
GO

IF NOT EXISTS (SELECT *
	       FROM   SYSOBJECTS
	       WHERE  ID = OBJECT_ID(N'USER_PREFERENCES')
		      AND TYPE = 'U')
  BEGIN
      EXECUTE ('CREATE TABLE USER_PREFERENCES   (      USER_ID            VARCHAR(max) NOT NULL,      COLUMN_PREFERENCES VARCHAR(MAX) NOT NULL   ) ON [PRIMARY]')
  END
GO


IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS WHERE CONSTRAINT_NAME='R_17' AND TABLE_NAME='MAPPING_SPECIFICATION')
 EXECUTE ('ALTER TABLE MAPPING_SPECIFICATION ADD CONSTRAINT R_17 FOREIGN KEY (MAP_ID) REFERENCES MAPPING_DETAILS(MAP_ID) ON DELETE CASCADE')
 GO
IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS WHERE CONSTRAINT_NAME='R_16' AND TABLE_NAME='MAPPING_DOCUMENTS')
EXECUTE ('ALTER TABLE MAPPING_DOCUMENTS ADD CONSTRAINT R_16 FOREIGN KEY (MAP_ID) REFERENCES MAPPING_DETAILS(MAP_ID) ON DELETE CASCADE')
 GO
IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS WHERE CONSTRAINT_NAME='R_15' AND TABLE_NAME='SYSTEM_DOCUMENTS')
EXECUTE ('ALTER TABLE SYSTEM_DOCUMENTS ADD CONSTRAINT R_15 FOREIGN KEY (SYSTEM_ID) REFERENCES SYSTEM_DEFINITION_DETAILS ( SYSTEM_ID)')
GO
-- IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS WHERE CONSTRAINT_NAME='R_14' AND TABLE_NAME='SYSTEM_TABLE_COLUMNS_METADATA')
-- EXECUTE('ALTER TABLE SYSTEM_TABLE_COLUMNS_METADATA ADD CONSTRAINT R_14 FOREIGN KEY ( SYSTEM_ID, SYSTEM_ENV_NAME, TABLE_NAME) REFERENCES SYSTEM_TABLE_METADATA ( SYSTEM_ID, SYSTEM_ENV_NAME, TABLE_NAME) ON DELETE CASCADE ')
-- GO
-- IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS WHERE CONSTRAINT_NAME='R_13' AND TABLE_NAME='SYSTEM_TABLE_METADATA')
-- EXECUTE('ALTER TABLE SYSTEM_TABLE_METADATA ADD CONSTRAINT R_13 FOREIGN KEY (SYSTEM_ID, SYSTEM_ENV_NAME) REFERENCES SYS_CON_ENVIRONMENTS ( SYSTEM_ID, SYSTEM_ENVIRONMENT_NAME) ON DELETE CASCADE ')
-- GO

IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS WHERE CONSTRAINT_NAME='R_13')
BEGIN
EXECUTE('ALTER TABLE SYSTEM_TABLE_METADATA DROP CONSTRAINT R_13');
END
GO

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS WHERE CONSTRAINT_NAME='R_11' AND TABLE_NAME='SYS_CON_ENVIRONMENTS')
EXECUTE('ALTER TABLE SYS_CON_ENVIRONMENTS ADD CONSTRAINT R_11 FOREIGN KEY ( SYSTEM_ID) REFERENCES SYSTEM_DEFINITION_DETAILS ( SYSTEM_ID) ')
GO
IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS WHERE CONSTRAINT_NAME='R_10' AND TABLE_NAME='PROJECT_DOCUMENTS')
EXECUTE('ALTER TABLE PROJECT_DOCUMENTS ADD CONSTRAINT R_10 FOREIGN KEY (PROJ_ID) REFERENCES PROJECT (PROJ_ID) ')
GO
IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS WHERE CONSTRAINT_NAME='R_9' AND TABLE_NAME='PROJECT_RESOURCES')
EXECUTE('ALTER TABLE PROJECT_RESOURCES ADD CONSTRAINT R_9 FOREIGN KEY (USER_ID, ROLE_ID) REFERENCES USER_ASSIGNED_ROLES (USER_ID, ROLE_ID)')
GO
IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS WHERE CONSTRAINT_NAME='R_7' AND TABLE_NAME='PROJECT_RESOURCES')
EXECUTE('ALTER TABLE PROJECT_RESOURCES ADD CONSTRAINT R_7 FOREIGN KEY (PROJ_ID) REFERENCES PROJECT (PROJ_ID) ON DELETE CASCADE')
GO
IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS WHERE CONSTRAINT_NAME='R_6' AND TABLE_NAME='USER_ASSIGNED_ROLES')
EXECUTE('ALTER TABLE USER_ASSIGNED_ROLES ADD CONSTRAINT R_6 FOREIGN KEY (USER_ID) REFERENCES USERS (USER_ID) ON DELETE CASCADE')
GO
IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS WHERE CONSTRAINT_NAME='UK_SR_ROLE_ID' AND TABLE_NAME='SECURITY_ROLES')
EXECUTE('ALTER TABLE SECURITY_ROLES ADD CONSTRAINT UK_SR_ROLE_ID UNIQUE  (ROLE_ID)')
GO
IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS WHERE CONSTRAINT_NAME='R_5' AND TABLE_NAME='USER_ASSIGNED_ROLES')
EXECUTE('ALTER TABLE USER_ASSIGNED_ROLES ADD CONSTRAINT R_5 FOREIGN KEY (ROLE_ID) REFERENCES SECURITY_ROLES (ROLE_ID)')
GO

IF COL_LENGTH('SYS_CON_ENVIRONMENTS', 'DB_DOMAIN') IS NULL
BEGIN
   ALTER TABLE [SYS_CON_ENVIRONMENTS] ADD [DB_DOMAIN] varchar(255) NULL
END
ELSE
BEGIN
   ALTER TABLE [SYS_CON_ENVIRONMENTS] ALTER COLUMN [DB_DOMAIN] varchar(255)
END
GO

IF NOT EXISTS (SELECT *
	       FROM   SECURITY_ROLES
	       WHERE  ROLE_NAME = 'ADMINISTRATOR')
  INSERT INTO SECURITY_ROLES
	      (ROLE_NAME,
	       ROLE_DESCR,
	       ROLE_ID,
	       CREATED_BY,
	       CREATED_DATETIME,
	       LAST_MODIFIED_DATE_TIME,
	       LAST_MODIFIED_BY)
  VALUES      ('Administrator',
'Administers the mapping manager module and gains administration access to all modules'
	     ,
51,
'System',
Getdate(),
Getdate(),
'System');

IF NOT EXISTS (SELECT *
	       FROM   SECURITY_ROLES
	       WHERE  ROLE_NAME = 'PUBLIC')
  INSERT INTO SECURITY_ROLES
	      (ROLE_NAME,
	       ROLE_DESCR,
	       ROLE_ID,
	       CREATED_BY,
	       CREATED_DATETIME,
	       LAST_MODIFIED_DATE_TIME,
	       LAST_MODIFIED_BY)
  VALUES      ('public',
  'Gains the read only access to any part/module of mapping manager application'
	       ,
  52,
  'System',
  Getdate(),
  Getdate(),
  'System')


IF NOT EXISTS (SELECT *
	       FROM   SECURITY_ROLES
	       WHERE  ROLE_NAME = 'PROJECT ADMIN')
  INSERT INTO SECURITY_ROLES
	      (ROLE_NAME,
	       ROLE_DESCR,
	       ROLE_ID,
	       CREATED_BY,
	       CREATED_DATETIME,
	       LAST_MODIFIED_DATE_TIME,
	       LAST_MODIFIED_BY)
  VALUES      ('Project Admin',
'Administers Project Manager module to create new projects, assign users to projects and create and manage project documents'
	     ,
53,
'System',
Getdate(),
Getdate(),
'System')

IF NOT EXISTS (SELECT *
	       FROM   SECURITY_ROLES
	       WHERE  ROLE_NAME = 'SYSTEM ADMIN')
  INSERT INTO SECURITY_ROLES
	      (ROLE_NAME,
	       ROLE_DESCR,
	       ROLE_ID,
	       CREATED_BY,
	       CREATED_DATETIME,
	       LAST_MODIFIED_DATE_TIME,
	       LAST_MODIFIED_BY)
    VALUES      ('System Admin',
'Administers System Manager module to define new systems/environments and import and manage metadata for source and target systems'
	     ,
54,
'System',
Getdate(),
Getdate(),
'System')

IF NOT EXISTS (SELECT *
	       FROM   SECURITY_ROLES
	       WHERE  ROLE_NAME = 'MAPPING ADMIN')
  INSERT INTO SECURITY_ROLES
	      (ROLE_NAME,
	       ROLE_DESCR,
	       ROLE_ID,
	       CREATED_BY,
	       CREATED_DATETIME,
	       LAST_MODIFIED_DATE_TIME,
	       LAST_MODIFIED_BY)
   VALUES      ('Mapping Admin',
'Administers Mapping Manager module to define, edit or delete any mapping in any project irrespective to project assignment'
	     ,
55,
'System',
Getdate(),
Getdate(),
'System')

IF NOT EXISTS (SELECT *
	       FROM   SECURITY_ROLES
	       WHERE  ROLE_NAME = 'POWER USER')
  INSERT INTO SECURITY_ROLES
	      (ROLE_NAME,
	       ROLE_DESCR,
	       ROLE_ID,
	       CREATED_BY,
	       CREATED_DATETIME,
	       LAST_MODIFIED_DATE_TIME,
	       LAST_MODIFIED_BY)
   VALUES      ('Power User',
'Gains all roles defined for Project Admin, System Admin, Transformation Admin and Mapping Admin'
	     ,
56,
'System',
Getdate(),
Getdate(),
'System')

IF NOT EXISTS (SELECT *
	       FROM   SECURITY_ROLES
	       WHERE  ROLE_NAME = 'TRANSFORMATION ADMIN')
  INSERT INTO SECURITY_ROLES
	      (ROLE_NAME,
	       ROLE_DESCR,
	       ROLE_ID,
	       CREATED_BY,
	       CREATED_DATETIME,
	       LAST_MODIFIED_DATE_TIME,
	       LAST_MODIFIED_BY)
VALUES      ('Transformation Admin',
	       'Administers all reusable transformations',
	       57,
	       'System',
	       Getdate(),
	       Getdate(),
	       'System')

IF NOT EXISTS (SELECT *
	       FROM   SECURITY_ROLES
	       WHERE  ROLE_NAME = 'ETL DEVELOPER')
  INSERT INTO SECURITY_ROLES
	      (ROLE_NAME,
	       ROLE_DESCR,
	       ROLE_ID,
	       CREATED_BY,
	       CREATED_DATETIME,
	       LAST_MODIFIED_DATE_TIME,
	       LAST_MODIFIED_BY)
  VALUES      ('ETL Developer',
'Create, edit or delete any mapping defined in a project to which he is assigned (Role is currently identical to Mapping Designer role). This role is a place holder for further categorization of roles and responsibilities in future versions).'
	     ,
58,
'System',
Getdate(),
Getdate(),
'System')

IF NOT EXISTS (SELECT *
	       FROM   SECURITY_ROLES
	       WHERE  ROLE_NAME = 'MAPPING DESIGNER')
  INSERT INTO SECURITY_ROLES
	      (ROLE_NAME,
	       ROLE_DESCR,
	       ROLE_ID,
	       CREATED_BY,
	       CREATED_DATETIME,
	       LAST_MODIFIED_DATE_TIME,
	       LAST_MODIFIED_BY)
  VALUES      ('Mapping Designer',
'Create, edit or delete any mapping defined in a project to which he is assigned (Role is currently identical to ETL Developer)'
	     ,
59,
'System',
Getdate(),
Getdate(),
'System')

IF NOT EXISTS (SELECT *
	       FROM   SECURITY_ROLES
	       WHERE  ROLE_NAME = 'TESTER')
  INSERT INTO SECURITY_ROLES
	      (ROLE_NAME,
	       ROLE_DESCR,
	       ROLE_ID,
	       CREATED_BY,
	       CREATED_DATETIME,
	       LAST_MODIFIED_DATE_TIME,
	       LAST_MODIFIED_BY)
    VALUES      ('Tester',
'Administers the testing notes tab of any mapping including archived mappings in a project to which he is assigned'
	     ,
60,
'System',
Getdate(),
Getdate(),
'System')

IF NOT EXISTS (SELECT *
	       FROM   USERS
	       WHERE  USER_ID = 'ADMINISTRATOR')
  INSERT INTO USERS
	      (USER_ID,
	       USER_FULL_NAME,
	       USER_EMAIL_ADDR,
	       USER_TEL,
	       USER_MOBILE,
	       USER_ALTERNATE_TEL,
	       DEFAULT_ROLE,
	       USER_PASSWORD,
	       USER_COMPANY_TITLE,
	       USER_COMPANY,
	       USER_REPORTS_TO_MGR_NAME,
	       CREATED_BY,
	       CREATED_DATETIME,
	       LAST_MODIFIED_DATE_TIME,
	       LAST_MODIFIED_BY,
	       USER_READ_ONLY)
 VALUES      ('Administrator',
	       'Administrator - Default System User',
	       'abc@abc.com',
	       9999999999,
	       9999999999,
	       9999999999,
	       'Admin',
	       'B2hvbDhGKmqGWb+NooC1Dg==',
	       'Administrator',
	       'Analytix Data Services',
	       NULL,
	       'System',
	       Getdate(),
	       Getdate(),
	       'System',
	       'N')

IF NOT EXISTS (SELECT *
	       FROM   USERS
	       WHERE  USER_ID = 'PUBLIC')
  INSERT INTO USERS
	      (USER_ID,
	       USER_FULL_NAME,
	       USER_EMAIL_ADDR,
	       USER_TEL,
	       USER_MOBILE,
	       USER_ALTERNATE_TEL,
	       DEFAULT_ROLE,
	       USER_PASSWORD,
	       USER_COMPANY_TITLE,
	       USER_COMPANY,
	       USER_REPORTS_TO_MGR_NAME,
	       CREATED_BY,
	       CREATED_DATETIME,
	       LAST_MODIFIED_DATE_TIME,
	       LAST_MODIFIED_BY,
	       USER_READ_ONLY)
  VALUES      ('public',
	       'public - Default System User',
	       'abc@abc.com',
	       9999999999,
	       9999999999,
	       9999999999,
	       'public',
	       'AyQ2KLpY37k=',
	       'Guest User',
	       'Analytix Data Services',
	       NULL,
	       'System',
	       Getdate(),
	       Getdate(),
	       'System',
	       'Y')

IF NOT EXISTS (SELECT *
	       FROM   USER_ASSIGNED_ROLES
	       WHERE  USER_ID = 'ADMINISTRATOR')
  INSERT INTO USER_ASSIGNED_ROLES
	      (USER_ID,
	       ROLE_ID)
  VALUES      ('Administrator',
	       51)

IF NOT EXISTS (SELECT *
	       FROM   USER_ASSIGNED_ROLES
	       WHERE  USER_ID = 'PUBLIC')
  INSERT INTO USER_ASSIGNED_ROLES
	      (USER_ID,
	       ROLE_ID)
  VALUES      ('public',
	       52)

IF NOT EXISTS (SELECT *
	       FROM   SEQUENCE_KEY
	       WHERE  SEQUENCE_ID = 100)
  INSERT INTO SEQUENCE_KEY
	      (SEQUENCE_ID)
  VALUES      (100)

IF COL_LENGTH('SYSTEM_TABLE_METADATA', 'LOGICAL_TABLE_NAME') IS NULL
BEGIN
   ALTER TABLE SYSTEM_TABLE_METADATA ADD LOGICAL_TABLE_NAME VARCHAR(50) NULL;
END
GO

IF COL_LENGTH('SYSTEM_TABLE_METADATA', 'VALID') IS NULL
BEGIN
   ALTER TABLE SYSTEM_TABLE_METADATA ADD VALID BIT NULL;
END

IF COL_LENGTH('SYSTEM_TABLE_COLUMNS_METADATA', 'FOREIGN_KEY_FLAG') IS NULL
BEGIN
   ALTER TABLE SYSTEM_TABLE_COLUMNS_METADATA ADD FOREIGN_KEY_FLAG VARCHAR(1) NULL;
END

IF COL_LENGTH('SYSTEM_TABLE_COLUMNS_METADATA', 'FK_TABLE_NAME') IS NULL
BEGIN
   ALTER TABLE SYSTEM_TABLE_COLUMNS_METADATA ADD FK_TABLE_NAME VARCHAR(50) NULL;
END
GO

IF COL_LENGTH('SYSTEM_TABLE_COLUMNS_METADATA', 'FK_COLUMN_NAME') IS NULL
BEGIN
   ALTER TABLE SYSTEM_TABLE_COLUMNS_METADATA ADD FK_COLUMN_NAME VARCHAR(50) NULL;
END
GO

IF COL_LENGTH('SYSTEM_TABLE_COLUMNS_METADATA', 'COL_DATA_DOMAIN') IS NULL
BEGIN
   ALTER TABLE SYSTEM_TABLE_COLUMNS_METADATA ADD COL_DATA_DOMAIN VARCHAR(50) NULL;
END
GO

IF COL_LENGTH('SYSTEM_TABLE_COLUMNS_METADATA', 'LOGICAL_COLUMN_NAME') IS NULL
BEGIN
   ALTER TABLE SYSTEM_TABLE_COLUMNS_METADATA ADD LOGICAL_COLUMN_NAME VARCHAR(255) NULL;
END
GO

IF COL_LENGTH('SYSTEM_TABLE_COLUMNS_METADATA', 'SDI_FLAG') IS NULL
BEGIN
   ALTER TABLE SYSTEM_TABLE_COLUMNS_METADATA ADD SDI_FLAG VARCHAR(1) NULL;
END

IF COL_LENGTH('SYSTEM_TABLE_COLUMNS_METADATA', 'SDI_DESCRIPTION') IS NULL
BEGIN
   ALTER TABLE SYSTEM_TABLE_COLUMNS_METADATA ADD SDI_DESCRIPTION VARCHAR(MAX) NULL;
END
GO

IF COL_LENGTH('SYSTEM_TABLE_COLUMNS_METADATA', 'VALID') IS NULL
BEGIN
   ALTER TABLE SYSTEM_TABLE_COLUMNS_METADATA ADD VALID BIT NULL;
END
GO

IF NOT EXISTS(SELECT * FROM SYS.VIEWS WHERE NAME = 'MAPPINGTESTSTATUS')
BEGIN
   EXEC ('CREATE VIEW [MAPPINGTESTSTATUS]
	AS
	  SELECT CASE
		   WHEN TEST_DISPOSITION = ''U'' THEN ''UNASSIGNED''
		   ELSE CASE
			  WHEN TEST_DISPOSITION = ''P'' THEN ''PASSED''
			  ELSE CASE
				 WHEN TEST_DISPOSITION = ''F'' THEN ''FAILED''
				 ELSE CASE
					WHEN TEST_DISPOSITION = ''N'' THEN
					''NEEDS ANALYSIS''
					ELSE ''''
				      END
			       END
			END
		 END                AS TESTSTATUS,
		 MAP_ID,
		 MAP_NAME,
		 MAP_SPEC_VERSION,
		 TESTING_NOTES,
		 PROJECT_ID,
		 PROJECT.PROJ_NAME  AS PROJECTNAME,
		 PROJECT.PROJ_DESCR AS PROJECTDESCRIPTION,
		 STATUS             AS MAPPINGSTATUS
	  FROM   MAPPING_DETAILS
		 LEFT JOIN PROJECT
		   ON PROJECT.PROJ_ID = MAPPING_DETAILS.PROJECT_ID');
END
ELSE
BEGIN
   EXEC ('ALTER VIEW [MAPPINGTESTSTATUS]
	AS
	  SELECT CASE
		   WHEN TEST_DISPOSITION = ''U'' THEN ''UNASSIGNED''
		   ELSE CASE
			  WHEN TEST_DISPOSITION = ''P'' THEN ''PASSED''
			  ELSE CASE
				 WHEN TEST_DISPOSITION = ''F'' THEN ''FAILED''
				 ELSE CASE
					WHEN TEST_DISPOSITION = ''N'' THEN
					''NEEDS ANALYSIS''
					ELSE ''''
				      END
			       END
			END
		 END                AS TESTSTATUS,
		 MAP_ID,
		 MAP_NAME,
		 MAP_SPEC_VERSION,
		 TESTING_NOTES,
		 PROJECT_ID,
		 PROJECT.PROJ_NAME  AS PROJECTNAME,
		 PROJECT.PROJ_DESCR AS PROJECTDESCRIPTION,
		 STATUS             AS MAPPINGSTATUS
	  FROM   MAPPING_DETAILS
		 LEFT JOIN PROJECT
		   ON PROJECT.PROJ_ID = MAPPING_DETAILS.PROJECT_ID');
END
GO

IF NOT EXISTS(SELECT * FROM SYS.VIEWS WHERE NAME = 'TOTALMAPPINGSBYPROJECT')
BEGIN
   EXEC ('CREATE VIEW [TOTALMAPPINGSBYPROJECT]
	AS
	  SELECT PROJECT.PROJ_ID PROJECTID,
		 COUNT(MAP_ID)   TOTALMAPPINGS,
		 PROJ_NAME       PROJECTNAME,
		 STATUS          AS MAPPINGSTATUS
	  FROM   MAPPING_DETAILS
		 LEFT JOIN PROJECT
		   ON PROJECT.PROJ_ID = MAPPING_DETAILS.PROJECT_ID
	  GROUP  BY PROJECT.PROJ_ID,
		    PROJ_NAME,
		    STATUS');
END
GO

IF NOT EXISTS(SELECT * FROM SYS.VIEWS WHERE NAME = 'TESTERMAPPINGS')
BEGIN
   EXEC ('CREATE VIEW [TESTERMAPPINGS]
	AS
	  SELECT *
	  FROM   MAPPING_STATUS
	  WHERE  RESPONSIABLES = ''MAPPING TESTER''');
END
GO

IF NOT EXISTS(SELECT * FROM SYS.VIEWS WHERE NAME = 'MAPPINGSASSIGNEDBYPROJECT')
BEGIN
   EXEC ('CREATE VIEW [MAPPINGSASSIGNEDBYPROJECT]
	AS
	  SELECT COUNT(MAPPING_DETAILS.MAP_ID) AS MAPPINGSASSIGNED,
		 MAPPING_DETAILS.PROJECT_ID,
		 PROJECT_RESOURCES.USER_ID,
		 MAPPING_DETAILS.STATUS            AS MAPPINGSTATUS
	  FROM   MAPPING_DETAILS
		 LEFT OUTER JOIN PROJECT_RESOURCES
		   ON PROJECT_RESOURCES.PROJ_ID = MAPPING_DETAILS.PROJECT_ID
	  GROUP  BY MAPPING_DETAILS.PROJECT_ID,
		    PROJECT_RESOURCES.USER_ID,
		    MAPPING_DETAILS.STATUS');
END
GO

IF NOT EXISTS(SELECT * FROM SYS.VIEWS WHERE NAME = 'VALID_SYSTEM_TABLE_METADATA')
BEGIN
   EXEC ('CREATE VIEW [VALID_SYSTEM_TABLE_METADATA]
	AS
	  SELECT *
	  FROM   SYSTEM_TABLE_METADATA
	  WHERE  VALID = 1
		  OR VALID IS NULL');
END
GO

IF EXISTS(SELECT * FROM SYS.VIEWS WHERE NAME = 'VALID_SYSTEM_TABLE_COLUMNS_METADATA')
BEGIN
   DROP VIEW VALID_SYSTEM_TABLE_COLUMNS_METADATA
END
GO

IF EXISTS(SELECT * FROM SYS.VIEWS WHERE NAME = 'VALID_SYS_TBL_COL_METADATA')
BEGIN
   DROP VIEW VALID_SYS_TBL_COL_METADATA
END
GO

IF NOT EXISTS(SELECT * FROM SYS.VIEWS WHERE NAME = 'VALID_SYS_TBL_COL_METADATA')
BEGIN
   EXEC ('CREATE VIEW [VALID_SYS_TBL_COL_METADATA]
	AS
	  SELECT *
	  FROM   SYSTEM_TABLE_COLUMNS_METADATA
	  WHERE  VALID = 1
		  OR VALID IS NULL');
END
GO

IF NOT EXISTS(SELECT * FROM SYS.VIEWS WHERE NAME = 'TOTALMAPPINGSASSIGNED')
BEGIN
   EXEC ('CREATE VIEW [TOTALMAPPINGSASSIGNED]
	AS
	  SELECT SUM(MAPPINGSASSIGNED) MAPPINGSASSIGNED,
		 USER_ID,
		 MAPPINGSTATUS
	  FROM   MAPPINGSASSIGNEDBYPROJECT
	  GROUP  BY USER_ID,
		    MAPPINGSTATUS');
END
GO

IF NOT EXISTS(SELECT * FROM SYS.VIEWS WHERE NAME = 'SYSTEMDATADICTIONARYSUMMARY')
BEGIN
   EXEC ('CREATE VIEW [SYSTEMDATADICTIONARYSUMMARY]
	AS
	  SELECT SYSTEM_TABLE_COLUMNS_METADATA.SYSTEM_ID,
		 SYSTEM_TABLE_METADATA.SYSTEM_ENV_NAME,
		 COUNT(DISTINCT SYSTEM_TABLE_COLUMNS_METADATA.TABLE_NAME) TABLECOUNT,
		 COUNT(SYSTEM_TABLE_COLUMNS_METADATA.COLUMN_NAME)         COLUMNCOUNT
	  FROM   SYSTEM_TABLE_COLUMNS_METADATA
		 LEFT JOIN SYSTEM_TABLE_METADATA
		   ON SYSTEM_TABLE_COLUMNS_METADATA.SYSTEM_ID =
			   SYSTEM_TABLE_METADATA.SYSTEM_ID
		      AND SYSTEM_TABLE_COLUMNS_METADATA.TABLE_NAME =
			  SYSTEM_TABLE_METADATA.TABLE_NAME
		      AND SYSTEM_TABLE_COLUMNS_METADATA.SYSTEM_ENV_NAME =
			  SYSTEM_TABLE_METADATA.SYSTEM_ENV_NAME
	  GROUP  BY SYSTEM_TABLE_COLUMNS_METADATA.SYSTEM_ID,
		    SYSTEM_TABLE_METADATA.SYSTEM_ENV_NAME');
END
GO

UPDATE MAPPING_STATUS
SET    STATUS = 'Complete'
WHERE  STATUS = 'COMPLETE'

UPDATE MAPPING_STATUS
SET    STATUS = 'In Progress'
WHERE  STATUS IN ('IN PROGRESS,INPROGRESS');

DELETE FROM MAPPING_STATUS
WHERE  STATUS = 'UNASSIGNED'

IF NOT EXISTS(SELECT * FROM SYS.VIEWS WHERE NAME = 'MAPPINGASSIGNEDBYUSER')
BEGIN
   EXEC ('CREATE VIEW MAPPINGASSIGNEDBYUSER
	AS
	  SELECT COUNT(MAPPING_STATUS.MAP_ID) AS MAPPINGSASSIGNED,
		 USER_ID,
		 MAPPING_DETAILS.STATUS       AS MAPPINGSTATUS
	  FROM   MAPPING_STATUS
		 LEFT JOIN MAPPING_DETAILS
		   ON MAPPING_DETAILS.MAP_ID = MAPPING_STATUS.MAP_ID
	  GROUP  BY USER_ID,
		    MAPPING_DETAILS.STATUS');
END
GO

IF NOT EXISTS(SELECT * FROM SYS.VIEWS WHERE NAME = 'MAPPINGSASSIGNEDBYUSER')
BEGIN
   EXEC ('CREATE VIEW MAPPINGSASSIGNEDBYUSER
	AS
	  SELECT COUNT(MAPPING_STATUS.MAP_ID) AS MAPPINGSASSIGNED,
		 USER_ID,
		 MAPPING_DETAILS.STATUS       AS MAPPINGSTATUS
	  FROM   MAPPING_STATUS
		 LEFT JOIN MAPPING_DETAILS
		   ON MAPPING_DETAILS.MAP_ID = MAPPING_STATUS.MAP_ID
	  GROUP  BY USER_ID,
		    MAPPING_DETAILS.STATUS');
END
GO

IF NOT EXISTS (SELECT *
	       FROM   SYSOBJECTS
	       WHERE  ID = OBJECT_ID(N'APP_DEFAULTS')
		      AND TYPE = 'U')
  BEGIN
      EXECUTE ('CREATE TABLE [APP_DEFAULTS]   (      [APPDEFAULTID] [INT] IDENTITY(1,1) NOT NULL,      [APPDEFAULTNAME]  [VARCHAR](50) NULL,      [APPDEFAULTVALUE] [VARCHAR](5000) NULL   )')
  END
GO

IF EXISTS(SELECT * FROM SYS.VIEWS WHERE NAME = 'VALID_SYSTEM_TABLE_COLUMNS_METADATA_SIMPLE')
BEGIN
   DROP VIEW VALID_SYSTEM_TABLE_COLUMNS_METADATA_SIMPLE
END
GO

   IF EXISTS(SELECT * FROM SYS.VIEWS WHERE NAME = 'APPENDED_MAP_SPEC_RCRDS_V')
   BEGIN
   EXEC ('DROP VIEW APPENDED_MAP_SPEC_RCRDS_V')
   END
   GO

   IF NOT EXISTS(SELECT * FROM SYS.VIEWS WHERE NAME = 'APPENDED_MAP_SPEC_RCRDS_V')
   BEGIN
   EXEC ('CREATE VIEW [APPENDED_MAP_SPEC_RCRDS_V]
   WITH
   VIEW_METADATA
   AS
   WITH SRC AS
     (SELECT LEFT( MS.SRC_COLUMN_NAME, CHARINDEX(           CHAR(10), MS.SRC_COLUMN_NAME            +CHAR(10))-1) SRC_COLUMN_NAME ,
       STUFF( MS.SRC_COLUMN_NAME, 1, CHARINDEX(             CHAR(10), MS.SRC_COLUMN_NAME            +CHAR(10)), '''') SRC_COLUMN_NAME1,
       LEFT( MS.SRC_TABLE_NAME, CHARINDEX(                  CHAR(10), MS.SRC_TABLE_NAME             +CHAR(10))-1) SRC_TABLE_NAME,
       STUFF( MS.SRC_TABLE_NAME, 1, CHARINDEX(              CHAR(10), MS.SRC_TABLE_NAME             +CHAR(10)), '''') SRC_TABLE_NAME1,
       LEFT( MS.SRC_SYSTEM_ENVIRONMENT_NAME, CHARINDEX(     CHAR(10), MS.SRC_SYSTEM_ENVIRONMENT_NAME+CHAR(10))-1) SRC_SYSTEM_ENVIRONMENT_NAME ,
       STUFF( MS.SRC_SYSTEM_ENVIRONMENT_NAME, 1, CHARINDEX( CHAR(10), MS.SRC_SYSTEM_ENVIRONMENT_NAME+CHAR(10)), '''') SRC_SYSTEM_ENVIRONMENT_NAME1,
       LEFT( MS.SRC_SYSTEM_NAME, CHARINDEX(                 CHAR(10), MS.SRC_SYSTEM_NAME            +CHAR(10))-1) SRC_SYSTEM_NAME,
       STUFF( MS.SRC_SYSTEM_NAME, 1, CHARINDEX(             CHAR(10), MS.SRC_SYSTEM_NAME            +CHAR(10)), '''') SRC_SYSTEM_NAME1,
       CAST(LEFT( MS.SRC_COL_DATATYPE, CHARINDEX(      CHAR(10), MS.SRC_COL_DATATYPE                     +CHAR(10))-1) AS VARCHAR(max)) SRC_COL_DATATYPE,
       CAST(STUFF( MS.SRC_COL_DATATYPE, 1, CHARINDEX(  CHAR(10), MS.SRC_COL_DATATYPE                     +CHAR(10)), '''') AS VARCHAR(max)) SRC_COL_DATATYPE1,
       CAST(LEFT( MS.SRC_COL_LENGTH, CHARINDEX(        CHAR(10), MS.SRC_COL_LENGTH                       +CHAR(10))-1) AS VARCHAR(max)) SRC_COL_LENGTH,
       CAST(STUFF( MS.SRC_COL_LENGTH, 1, CHARINDEX(    CHAR(10), MS.SRC_COL_LENGTH                       +CHAR(10)), '''') AS VARCHAR(max)) SRC_COL_LENGTH1,
       CAST(LEFT( MS.SRC_COL_PRECISION, CHARINDEX(     CHAR(10), MS.SRC_COL_PRECISION                    +CHAR(10))-1) AS VARCHAR(max)) SRC_COL_PRECISION,
       CAST(STUFF( MS.SRC_COL_PRECISION, 1, CHARINDEX( CHAR(10), MS.SRC_COL_PRECISION                    +CHAR(10)), '''') AS VARCHAR(max)) SRC_COL_PRECISION1,
       CAST(LEFT( MS.SRC_COL_SCALE, CHARINDEX(         CHAR(10), MS.SRC_COL_SCALE                        +CHAR(10))-1) AS VARCHAR(max)) SRC_COL_SCALE,
       CAST(STUFF( MS.SRC_COL_SCALE, 1, CHARINDEX(     CHAR(10), MS.SRC_COL_SCALE                        +CHAR(10)), '''') AS VARCHAR(max)) SRC_COL_SCALE1,
       MAP_SEQ_ID,
       MAP_ID,
       PROJ_ID
     FROM MAPPING_SPECIFICATION MS
     UNION ALL
     SELECT LEFT( SRC_COLUMN_NAME1, CHARINDEX(            CHAR(10), SRC_COLUMN_NAME1            +CHAR(10))-1),
       STUFF( SRC_COLUMN_NAME1, 1, CHARINDEX(             CHAR(10), SRC_COLUMN_NAME1            +CHAR(10)), ''''),
       LEFT( SRC_TABLE_NAME1, CHARINDEX(                  CHAR(10), SRC_TABLE_NAME1             +CHAR(10))-1),
       STUFF( SRC_TABLE_NAME1, 1, CHARINDEX(              CHAR(10), SRC_TABLE_NAME1             +CHAR(10)), ''''),
       LEFT( SRC_SYSTEM_ENVIRONMENT_NAME1, CHARINDEX(     CHAR(10), SRC_SYSTEM_ENVIRONMENT_NAME1+CHAR(10))-1),
       STUFF( SRC_SYSTEM_ENVIRONMENT_NAME1, 1, CHARINDEX( CHAR(10), SRC_SYSTEM_ENVIRONMENT_NAME1+CHAR(10)), ''''),
       LEFT( SRC_SYSTEM_NAME1, CHARINDEX(                 CHAR(10), SRC_SYSTEM_NAME1            +CHAR(10))-1),
       STUFF( SRC_SYSTEM_NAME1, 1, CHARINDEX(             CHAR(10), SRC_SYSTEM_NAME1            +CHAR(10)), ''''),
       CAST(LEFT( SRC_COL_DATATYPE1, CHARINDEX(      CHAR(10), SRC_COL_DATATYPE1                     +CHAR(10))-1)AS VARCHAR(max)),
       CAST(STUFF( SRC_COL_DATATYPE1, 1, CHARINDEX(  CHAR(10), SRC_COL_DATATYPE1                     +CHAR(10)), '''')AS VARCHAR(max)),
       CAST(LEFT( SRC_COL_LENGTH1, CHARINDEX(        CHAR(10), SRC_COL_LENGTH1                       +CHAR(10))-1) AS VARCHAR(max)),
       CAST(STUFF( SRC_COL_LENGTH1, 1, CHARINDEX(    CHAR(10), SRC_COL_LENGTH1                       +CHAR(10)), '''') AS VARCHAR(max)),
       CAST(LEFT( SRC_COL_PRECISION1, CHARINDEX(     CHAR(10), SRC_COL_PRECISION1                    +CHAR(10))-1) AS VARCHAR(max)),
       CAST(STUFF( SRC_COL_PRECISION1, 1, CHARINDEX( CHAR(10), SRC_COL_PRECISION1                    +CHAR(10)), '''') AS VARCHAR(max)),
       CAST(LEFT( SRC_COL_SCALE1, CHARINDEX(         CHAR(10), SRC_COL_SCALE1                        +CHAR(10))-1) AS VARCHAR(max)),
       CAST(STUFF( SRC_COL_SCALE1, 1, CHARINDEX(     CHAR(10), SRC_COL_SCALE1                        +CHAR(10)), '''') AS VARCHAR(max)),
       MAP_SEQ_ID,
       MAP_ID ,
       PROJ_ID
     FROM SRC
     WHERE SRC_COLUMN_NAME1          > ''''
     OR SRC_TABLE_NAME1              > ''''
     OR SRC_SYSTEM_ENVIRONMENT_NAME1 > ''''
     OR SRC_SYSTEM_NAME1             > ''''
     ),
     TGT AS
     (SELECT LEFT( MS.TGT_COLUMN_NAME, CHARINDEX(           CHAR(10), MS.TGT_COLUMN_NAME            +CHAR(10))-1) TGT_COLUMN_NAME,
       STUFF( MS.TGT_COLUMN_NAME, 1, CHARINDEX(             CHAR(10), MS.TGT_COLUMN_NAME            +CHAR(10)), '''')TGT_COLUMN_NAME1,
       LEFT( MS.TGT_TABLE_NAME, CHARINDEX(                  CHAR(10), MS.TGT_TABLE_NAME             +CHAR(10))-1) TGT_TABLE_NAME,
       STUFF( MS.TGT_TABLE_NAME, 1, CHARINDEX(              CHAR(10), MS.TGT_TABLE_NAME             +CHAR(10)), '''') TGT_TABLE_NAME1,
       LEFT( MS.TGT_SYSTEM_ENVIRONMENT_NAME, CHARINDEX(     CHAR(10), MS.TGT_SYSTEM_ENVIRONMENT_NAME+CHAR(10))-1) TGT_SYSTEM_ENVIRONMENT_NAME ,
       STUFF( MS.TGT_SYSTEM_ENVIRONMENT_NAME, 1, CHARINDEX( CHAR(10), MS.TGT_SYSTEM_ENVIRONMENT_NAME+CHAR(10)), '''')TGT_SYSTEM_ENVIRONMENT_NAME1,
       LEFT( MS.TGT_SYSTEM_NAME, CHARINDEX(                 CHAR(10), MS.TGT_SYSTEM_NAME            +CHAR(10))-1)TGT_SYSTEM_NAME,
       STUFF( MS.TGT_SYSTEM_NAME, 1, CHARINDEX(             CHAR(10), MS.TGT_SYSTEM_NAME            +CHAR(10)), '''')TGT_SYSTEM_NAME1,
       CAST(LEFT( MS.TGT_COL_DATATYPE, CHARINDEX(      CHAR(10), MS.TGT_COL_DATATYPE                     +CHAR(10))-1)AS VARCHAR(max)) TGT_COL_DATATYPE,
       CAST(STUFF( MS.TGT_COL_DATATYPE, 1, CHARINDEX(  CHAR(10), MS.TGT_COL_DATATYPE                     +CHAR(10)), '''')AS VARCHAR(max)) TGT_COL_DATATYPE1,
       CAST(LEFT( MS.TGT_COL_LENGTH, CHARINDEX(        CHAR(10), MS.TGT_COL_LENGTH                       +CHAR(10))-1) AS VARCHAR(max)) TGT_COL_LENGTH,
       CAST(STUFF( MS.TGT_COL_LENGTH, 1, CHARINDEX(    CHAR(10), MS.TGT_COL_LENGTH                       +CHAR(10)), '''') AS VARCHAR(max)) TGT_COL_LENGTH1,
       CAST(LEFT( MS.TGT_COL_PRECISION, CHARINDEX(     CHAR(10), MS.TGT_COL_PRECISION                    +CHAR(10))-1) AS VARCHAR(max)) TGT_COL_PRECISION,
       CAST(STUFF( MS.TGT_COL_PRECISION, 1, CHARINDEX( CHAR(10), MS.TGT_COL_PRECISION                    +CHAR(10)), '''') AS VARCHAR(max)) TGT_COL_PRECISION1,
       CAST(LEFT( MS.TGT_COL_SCALE, CHARINDEX(         CHAR(10), MS.TGT_COL_SCALE                        +CHAR(10))-1) AS VARCHAR(max)) TGT_COL_SCALE,
       CAST(STUFF( MS.TGT_COL_SCALE, 1, CHARINDEX(     CHAR(10), MS.TGT_COL_SCALE                        +CHAR(10)), '''') AS VARCHAR(max)) TGT_COL_SCALE1,
       MAP_SEQ_ID,
       BUSINESS_RULE,
       MAP_ID,
       PROJ_ID
     FROM MAPPING_SPECIFICATION MS
     UNION ALL
     SELECT LEFT( TGT_COLUMN_NAME1, CHARINDEX(            CHAR(10), TGT_COLUMN_NAME1            +CHAR(10))-1),
       STUFF( TGT_COLUMN_NAME1, 1, CHARINDEX(             CHAR(10), TGT_COLUMN_NAME1            +CHAR(10)), ''''),
       LEFT( TGT_TABLE_NAME1, CHARINDEX(                  CHAR(10), TGT_TABLE_NAME1             +CHAR(10))-1),
       STUFF( TGT_TABLE_NAME1, 1, CHARINDEX(              CHAR(10), TGT_TABLE_NAME1             +CHAR(10)), ''''),
       LEFT( TGT_SYSTEM_ENVIRONMENT_NAME1, CHARINDEX(     CHAR(10), TGT_SYSTEM_ENVIRONMENT_NAME1+CHAR(10))-1),
       STUFF( TGT_SYSTEM_ENVIRONMENT_NAME1, 1, CHARINDEX( CHAR(10), TGT_SYSTEM_ENVIRONMENT_NAME1+CHAR(10)), ''''),
       LEFT( TGT_SYSTEM_NAME1, CHARINDEX(                 CHAR(10), TGT_SYSTEM_NAME1            +CHAR(10))-1),
       STUFF( TGT_SYSTEM_NAME1, 1, CHARINDEX(             CHAR(10), TGT_SYSTEM_NAME1            +CHAR(10)), ''''),
       CAST(LEFT( TGT_COL_DATATYPE1, CHARINDEX(      CHAR(10), TGT_COL_DATATYPE1                     +CHAR(10))-1)AS VARCHAR(max)),
       CAST(STUFF( TGT_COL_DATATYPE1, 1, CHARINDEX(  CHAR(10), TGT_COL_DATATYPE1                     +CHAR(10)), '''')AS VARCHAR(max)),
       CAST(LEFT( TGT_COL_LENGTH1, CHARINDEX(        CHAR(10), TGT_COL_LENGTH1                       +CHAR(10))-1) AS VARCHAR(max)),
       CAST(STUFF( TGT_COL_LENGTH1, 1, CHARINDEX(    CHAR(10), TGT_COL_LENGTH1                       +CHAR(10)), '''') AS VARCHAR(max)),
       CAST(LEFT( TGT_COL_PRECISION1, CHARINDEX(     CHAR(10), TGT_COL_PRECISION1                    +CHAR(10))-1) AS VARCHAR(max)),
       CAST(STUFF( TGT_COL_PRECISION1, 1, CHARINDEX( CHAR(10), TGT_COL_PRECISION1                    +CHAR(10)), '''') AS VARCHAR(max)),
       CAST(LEFT( TGT_COL_SCALE1, CHARINDEX(         CHAR(10), TGT_COL_SCALE1                        +CHAR(10))-1) AS VARCHAR(max)),
       CAST(STUFF( TGT_COL_SCALE1, 1, CHARINDEX(     CHAR(10), TGT_COL_SCALE1                        +CHAR(10)), '''') AS VARCHAR(max)),
       MAP_SEQ_ID ,
       BUSINESS_RULE,
       MAP_ID ,
       PROJ_ID
     FROM TGT
     WHERE TGT_COLUMN_NAME1          > ''''
     OR TGT_TABLE_NAME1              > ''''
     OR TGT_SYSTEM_ENVIRONMENT_NAME1 > ''''
     OR TGT_SYSTEM_NAME1             > ''''
     )
     SELECT TGT_COLUMN_NAME,
       TGT_SYSTEM_ENVIRONMENT_NAME,
       TGT_TABLE_NAME,
       TGT_SYSTEM_NAME,
       TGT_COL_DATATYPE,
       TGT_COL_LENGTH,
       TGT_COL_PRECISION,
       TGT_COL_SCALE,
       BUSINESS_RULE,
       SRC_COLUMN_NAME,
       SRC_TABLE_NAME,
       SRC_SYSTEM_ENVIRONMENT_NAME,
       SRC_SYSTEM_NAME,
       SRC_COL_DATATYPE,
       SRC_COL_LENGTH,
       SRC_COL_PRECISION,
       SRC_COL_SCALE,
       TGT.MAP_SEQ_ID,
       TGT.MAP_ID,
       TGT.PROJ_ID
     FROM TGT
     JOIN SRC
     ON TGT.MAP_SEQ_ID = SRC.MAP_SEQ_ID
     ');
   END
GO

--CHECK IF FUNCTION ALREADY EXISTS OR NOT IN SELECTED DATABASE, IF EXISTS DROP AND RECREATE THE FUNCTION
IF (OBJECTPROPERTY(OBJECT_ID('FN_SPLITTREENODEIDS'),'ISTABLEFUNCTION') = 1)
BEGIN
	DROP FUNCTION FN_SPLITTREENODEIDS
END
GO

CREATE FUNCTION [FN_SPLITTREENODEIDS](
 @TREENODEIDARRAY VARCHAR (MAX),
 @DELIMITER VARCHAR (10)
 )
RETURNS @VALUETABLE TABLE ([TREENODEID] INT)
BEGIN
 DECLARE @NEXTSTRING NVARCHAR(4000)
 DECLARE @POS INT
 DECLARE @NEXTPOS INT
 DECLARE @COMMACHECK NVARCHAR(1)

 --INITIALIZE
 SET @NEXTSTRING = ''
 SET @COMMACHECK = RIGHT(@TREENODEIDARRAY,1)

 --CHECK FOR TRAILING COMMA, IF EXISTS, INSERT
 --IF (@COMMACHECK <> @DELIMITER )
 SET @TREENODEIDARRAY = @TREENODEIDARRAY + @DELIMITER

 --GET POSITION OF FIRST COMMA
 SET @POS = CHARINDEX(@DELIMITER,@TREENODEIDARRAY)
 SET @NEXTPOS = 1

 --LOOP WHILE THERE IS STILL A COMMA IN THE STRING OF LEVELS
 WHILE (@POS <>  0)
 BEGIN
  SET @NEXTSTRING = SUBSTRING(@TREENODEIDARRAY,1,@POS - 1)

  INSERT INTO @VALUETABLE ( [TREENODEID]) VALUES (CONVERT(INT, @NEXTSTRING))

  SET @TREENODEIDARRAY = SUBSTRING(@TREENODEIDARRAY,@POS +1,LEN(@TREENODEIDARRAY))

  SET @NEXTPOS = @POS
  SET @POS  = CHARINDEX(@DELIMITER,@TREENODEIDARRAY)
 END

 RETURN
END
GO

IF COL_LENGTH('SYSTEM_TABLE_COLUMNS_METADATA', 'INSERT_ORDER') IS NULL
BEGIN
   ALTER TABLE SYSTEM_TABLE_COLUMNS_METADATA ADD INSERT_ORDER INT NULL;
END
GO

IF COL_LENGTH('USERS', 'USER_LANGUAGE') IS NULL
BEGIN
   ALTER TABLE [USERS] ADD [USER_LANGUAGE] VARCHAR(100);
END
GO

IF COL_LENGTH('SYSTEM_TABLE_METADATA', 'ACTUAL_TABLE_NAME') IS NULL
BEGIN
   ALTER TABLE [SYSTEM_TABLE_METADATA] ADD [ACTUAL_TABLE_NAME] VARCHAR(100) NULL
END
GO

IF NOT EXISTS (SELECT *
                       FROM   SYSOBJECTS
                       WHERE  ID = OBJECT_ID(N'PROJECTSUBJECTS')
                                      AND TYPE = 'U')
  BEGIN
      EXECUTE ('CREATE TABLE PROJECTSUBJECTS   (      PROJECT_ID             INT NOT NULL,      SUBJECT_ID            INT NOT NULL,      PARENT_SUBJECT_ID            INT NOT NULL)')
  END
GO

IF NOT EXISTS (SELECT *
                       FROM   SYSOBJECTS
                       WHERE  ID = OBJECT_ID(N'SUBJECTMAPPINGS')
                                      AND TYPE = 'U')
  BEGIN
      EXECUTE ('CREATE TABLE SUBJECTMAPPINGS   (      SUBJECT_ID             INT NOT NULL,      MAPPING_ID            INT NOT NULL)')
  END
GO

IF NOT EXISTS (SELECT *
                       FROM   SYSOBJECTS
                       WHERE  ID = OBJECT_ID(N'SUBJECT_DETAILS')
                                      AND TYPE = 'U')
  BEGIN
      EXECUTE ('CREATE TABLE SUBJECT_DETAILS   (      SUBJECT_ID             INT NOT NULL,      SUBJECT_NAME            VARCHAR(150) NOT NULL,      SUBJECT_DESCRIPTION            VARCHAR(250) NULL,              CHANGED_DESCRIPTION            VARCHAR(250) NULL)')
  END
GO

IF COL_LENGTH('MAPPING_SPECIFICATION', 'MAP_SPECROWCOMMENTS') IS NULL
BEGIN
   EXECUTE SYS.SP_RENAME @OBJNAME = N'[MAPPING_SPECIFICATION].[USER_DEFINATION5]', @NEWNAME = N'MAP_SPECROWCOMMENTS', @OBJTYPE = 'COLUMN'
END
GO

IF COL_LENGTH('MAPPING_SPECIFICATION', 'USER_DEFINATION6') IS NULL
BEGIN
   ALTER TABLE [MAPPING_SPECIFICATION] ADD [USER_DEFINATION6] VARCHAR(MAX) NULL
END
GO

IF COL_LENGTH('MAPPING_SPECIFICATION', 'USER_DEFINATION7') IS NULL
BEGIN
   ALTER TABLE [MAPPING_SPECIFICATION] ADD [USER_DEFINATION7] VARCHAR(MAX) NULL
END
GO


IF COL_LENGTH('MAPPING_SPECIFICATION', 'USER_DEFINATION8') IS NULL
BEGIN
   ALTER TABLE [MAPPING_SPECIFICATION] ADD [USER_DEFINATION8] VARCHAR(MAX) NULL
END
GO


IF COL_LENGTH('MAPPING_SPECIFICATION', 'USER_DEFINATION9') IS NULL
BEGIN
   ALTER TABLE [MAPPING_SPECIFICATION] ADD [USER_DEFINATION9] VARCHAR(MAX) NULL
END
GO


IF COL_LENGTH('MAPPING_SPECIFICATION', 'USER_DEFINATION10') IS NULL
BEGIN
   ALTER TABLE [MAPPING_SPECIFICATION] ADD [USER_DEFINATION10] VARCHAR(MAX) NULL
END
GO


IF COL_LENGTH('MAPPING_SPECIFICATION', 'USER_DEFINATION5') IS NULL
BEGIN
   ALTER TABLE [MAPPING_SPECIFICATION] ADD [USER_DEFINATION5] VARCHAR(MAX) NULL
END
GO

-- COLUMN LENGTH EXTENSION

ALTER TABLE [SYSTEM_TABLE_METADATA]
ALTER COLUMN [LOGICAL_TABLE_NAME] VARCHAR(255)
GO

ALTER TABLE [SYSTEM_TABLE_COLUMNS_METADATA]
ALTER COLUMN [LOGICAL_COLUMN_NAME] VARCHAR(255)
GO

ALTER TABLE [SYSTEM_TABLE_COLUMNS_METADATA]
ALTER COLUMN [COLUMN_NAME] VARCHAR(255)  NOT NULL
GO

ALTER TABLE [SYSTEM_TABLE_COLUMNS_METADATA]
ALTER COLUMN [COL_SCALE] VARCHAR(50)
GO
ALTER TABLE [SYSTEM_TABLE_COLUMNS_METADATA]
ALTER COLUMN [FK_COLUMN_NAME] VARCHAR(255)
GO
ALTER TABLE [SYSTEM_TABLE_COLUMNS_METADATA]
ALTER COLUMN [SDI_DESCRIPTION] VARCHAR(MAX)
GO

-- ALTER TABLE [SYSTEM_TABLE_COLUMNS_METADATA]
-- DROP CONSTRAINT [R_14]
-- GO
ALTER TABLE [SYSTEM_TABLE_METADATA]
ALTER COLUMN [TABLE_NAME] VARCHAR(255)  NOT NULL
GO
ALTER TABLE [SYSTEM_TABLE_COLUMNS_METADATA]
ALTER COLUMN [TABLE_NAME] VARCHAR(255)  NOT NULL
GO
-- ALTER TABLE [SYSTEM_TABLE_COLUMNS_METADATA]
--  ADD CONSTRAINT [R_14] FOREIGN KEY ([SYSTEM_ID], [SYSTEM_ENV_NAME], [TABLE_NAME])
-- 	REFERENCES [SYSTEM_TABLE_METADATA] ([SYSTEM_ID], [SYSTEM_ENV_NAME], [TABLE_NAME])  ON DELETE CASCADE
-- GO

IF COL_LENGTH('MAPPING_SPECIFICATION', 'SRC_SDI_FLAG') IS NULL
BEGIN
   ALTER TABLE [MAPPING_SPECIFICATION] ADD [SRC_SDI_FLAG] varchar(1) NULL
END
GO

IF COL_LENGTH('MAPPING_SPECIFICATION', 'SRC_SDI_DESCRIPTION') IS NULL
BEGIN
   ALTER TABLE [MAPPING_SPECIFICATION] ADD [SRC_SDI_DESCRIPTION] varchar(MAX) NULL
END
GO

IF COL_LENGTH('MAPPING_SPECIFICATION', 'TGT_SDI_FLAG') IS NULL
BEGIN
   ALTER TABLE [MAPPING_SPECIFICATION] ADD [TGT_SDI_FLAG] varchar(1) NULL
END
GO

IF COL_LENGTH('MAPPING_SPECIFICATION', 'TGT_SDI_DESCRIPTION') IS NULL
BEGIN
   ALTER TABLE [MAPPING_SPECIFICATION] ADD [TGT_SDI_DESCRIPTION] varchar(MAX) NULL
END
GO

IF COL_LENGTH('MAPPING_DETAILS', 'PLAN_DEVELOP_LOE') IS NULL
BEGIN
   ALTER TABLE [MAPPING_DETAILS] ADD [PLAN_DEVELOP_LOE] varchar(50) NULL
END
GO

IF COL_LENGTH('MAPPING_DETAILS', 'PLAN_NOTES') IS NULL
BEGIN
ALTER TABLE [MAPPING_DETAILS] ADD [PLAN_NOTES] varchar(MAX) NULL
END
GO

IF COL_LENGTH('MAPPING_DETAILS', 'ACTUAL_DEVELOP_LOE') IS NULL
BEGIN
ALTER TABLE [MAPPING_DETAILS] ADD [ACTUAL_DEVELOP_LOE] varchar(50) NULL
END
GO

IF COL_LENGTH('MAPPING_DETAILS', 'ACTUAL_NOTES') IS NULL
BEGIN
ALTER TABLE [MAPPING_DETAILS] ADD [ACTUAL_NOTES] varchar(MAX) NULL
END
GO

IF COL_LENGTH('MAPPING_DETAILS', 'PLAN_MAPPING_EFFORT') IS NULL
BEGIN
   ALTER TABLE [MAPPING_DETAILS] ADD [PLAN_MAPPING_EFFORT] float NULL

   --DELETE FROM USER_PREFERENCES
    EXECUTE('DELETE FROM USER_PREFERENCES WHERE USER_ID LIKE ''%MAPPING_GRID_FORMAT_%''');

   ALTER TABLE [APP_DEFAULTS]
	ALTER COLUMN [APPDEFAULTNAME] varchar(150)

	if (object_id('tempdb..#index_title') is not null)
	drop table #index_title
	create table #index_title("Index" int, index_title varchar(100))
	insert into #index_title("Index", index_title)
	SELECT 1, 'slNo' UNION ALL
	SELECT 2, 'TgtSystemID' UNION ALL
	SELECT 3, 'TgtSysName' UNION ALL
	SELECT 4, 'TgtEnvName' UNION ALL
	SELECT 5, 'TgtTabName' UNION ALL
	SELECT 6, 'TgtColName' UNION ALL
	SELECT 7, 'TgtColDataType' UNION ALL
	SELECT 8, 'TgtColLen' UNION ALL
	SELECT 9, 'TgtColPrecision' UNION ALL
	SELECT 10, 'TgtColScale' UNION ALL
	SELECT 11, 'TgtColNullableFlag' UNION ALL
	SELECT 12, 'TgtColETLDefaultValue' UNION ALL
	SELECT 13, 'TgtColDefComments' UNION ALL
	SELECT 14, 'TgtNaturalKeyFlag' UNION ALL
	SELECT 15, 'TgtPrimaryKeyFlag' UNION ALL
	SELECT 16, 'TgtSdiFlag' UNION ALL
	SELECT 17, 'TgtSdiDescription' UNION ALL
	SELECT 18, 'BusinessRule' UNION ALL
	SELECT 19, 'ExtendedBusRuleTransformation' UNION ALL
	SELECT 20, 'TransLookupCondition' UNION ALL
	SELECT 21, 'SrcSystemID' UNION ALL
	SELECT 22, 'SrcSysName' UNION ALL
	SELECT 23, 'SrcEnvName' UNION ALL
	SELECT 24, 'SrcTabName' UNION ALL
	SELECT 25, 'SrcColName' UNION ALL
	SELECT 26, 'SrcColDataType' UNION ALL
	SELECT 27, 'SrcColLen' UNION ALL
	SELECT 28, 'SrcColPrecision' UNION ALL
	SELECT 29, 'SrcColScale' UNION ALL
	SELECT 30, 'SrcColDBDefaultValue' UNION ALL
	SELECT 31, 'SrcColDefComments' UNION ALL
	SELECT 32, 'SrcColIdentityFlag' UNION ALL
	SELECT 33, 'SrcColNullableFlag' UNION ALL
	SELECT 34, 'SrcPercentNullValue' UNION ALL
	SELECT 35, 'SrcNaturalKeyFlag' UNION ALL
	SELECT 36, 'SrcSdiFlag' UNION ALL
	SELECT 37, 'SrcSdiDescription' UNION ALL
	SELECT 38, 'SrcMinValue' UNION ALL
	SELECT 39, 'SrcMaxValue' UNION ALL
	SELECT 40, 'Status' UNION ALL
	SELECT 41, 'LastModifiedBy' UNION ALL
	SELECT 42, 'LastmodifiedDateTime' UNION ALL
	SELECT 43, 'CreatedBy' UNION ALL
	SELECT 44, 'CreatedDate' UNION ALL
	SELECT 45, 'MapSeqId' UNION ALL
	SELECT 46, 'UserDefination1' UNION ALL
	SELECT 47, 'UserDefination2' UNION ALL
	SELECT 48, 'UserDefination3' UNION ALL
	SELECT 49, 'UserDefination4' UNION ALL
	SELECT 50, 'UserDefination5' UNION ALL
	SELECT 51, 'UserDefination6' UNION ALL
	SELECT 52, 'UserDefination7' UNION ALL
	SELECT 53, 'UserDefination8' UNION ALL
	SELECT 54, 'UserDefination9' UNION ALL
	SELECT 55, 'UserDefination10' UNION ALL
	SELECT 56, 'MappingSpecRowComments'
	if (object_id('tempdb..#tab') is not null)
	drop table #tab
	create table #tab (MAP_ID int, old_MAP_SEQ_ID int, new_MAP_SEQ_ID int);
        EXECUTE('with cte as (select PROJ_ID
					  , MAP_ID
					  , MAP_SEQ_ID
					  , ROW_NUMBER() OVER (order by PROJ_ID) as ROW_NM
				   from MAPPING_SPECIFICATION)
	UPDATE ms
	   SET ms.MAP_SEQ_ID = cte.ROW_NM + (select max(map_seq_id)+1 from MAPPING_SPECIFICATION)
	OUTPUT cte.MAP_ID
	     , deleted.MAP_SEQ_ID
		, inserted.MAP_SEQ_ID
	  into #tab(
	       MAP_ID
		, old_MAP_SEQ_ID
		, new_MAP_SEQ_ID)
	  FROM MAPPING_SPECIFICATION ms
	  JOIN cte
	    on ms.PROJ_ID = cte.PROJ_ID
	   and ms.MAP_ID = cte.MAP_ID
	   and ms.MAP_SEQ_ID = cte.MAP_SEQ_ID


	update ad
	   set ad.APPDEFAULTNAME = replace(ad.appdefaultname,''_''+cast(t.MAP_ID as varchar)+''_''+cast(t.old_map_seq_id as varchar)+''_'',''_''+cast(t.MAP_ID as varchar)+''_''+cast(t.new_map_seq_id as varchar)+''_'')
	  from APP_DEFAULTS ad
	  join #tab t
	    on ''_''+cast(t.MAP_ID as varchar)+''_''+cast(t.old_map_seq_id as varchar)+''_'' = substring(APPDEFAULTNAME,20,case when (charindex(''_ROW'',APPDEFAULTNAME) > 0) then charindex(''_ROW'',APPDEFAULTNAME)	when (charindex(''_COL'',APPDEFAULTNAME) > 0) then charindex(''_COL'',APPDEFAULTNAME) else 1 end- case when len(APPDEFAULTNAME) > 20 then 20-1 else 1 end )
	 where substring(ad.APPDEFAULTNAME,1,20) = ''MAPPING_GRID_FORMAT_''

	update ad
	   set ad.APPDEFAULTNAME = stuff(APPDEFAULTNAME,len(appdefaultname)-charindex(''_'', reverse(appdefaultname))+2, len(APPDEFAULTNAME),it.index_title)
	  from APP_DEFAULTS ad
	  join #index_title it
	    on substring(APPDEFAULTNAME,len(appdefaultname)-charindex(''_'', reverse(appdefaultname))+2,len(APPDEFAULTNAME)) = cast(it.[index] as varchar(30))');

END
ELSE
BEGIN
   ALTER TABLE [MAPPING_DETAILS] ALTER COLUMN [PLAN_MAPPING_EFFORT] float NULL
END
GO

IF COL_LENGTH('MAPPING_DETAILS', 'PLAN_MAPPING_EFFORT_UNITS') IS NULL
BEGIN
   ALTER TABLE [MAPPING_DETAILS] ADD [PLAN_MAPPING_EFFORT_UNITS] varchar(50) NULL
END
GO

IF COL_LENGTH('MAPPING_DETAILS', 'PLAN_ETL_EFFORT') IS NULL
BEGIN
   ALTER TABLE [MAPPING_DETAILS] ADD [PLAN_ETL_EFFORT] float NULL
END
GO

IF COL_LENGTH('MAPPING_DETAILS', 'PLAN_ETL_EFFORT_UNITS') IS NULL
BEGIN
   ALTER TABLE [MAPPING_DETAILS] ADD [PLAN_ETL_EFFORT_UNITS] varchar(50) NULL
END
GO

IF COL_LENGTH('MAPPING_DETAILS', 'ACTUAL_MAPPING_EFFORT') IS NULL
BEGIN
   ALTER TABLE [MAPPING_DETAILS] ADD [ACTUAL_MAPPING_EFFORT] float NULL
END
GO

IF COL_LENGTH('MAPPING_DETAILS', 'ACTUAL_MAPPING_EFFORT_UNITS') IS NULL
BEGIN
   ALTER TABLE [MAPPING_DETAILS] ADD [ACTUAL_MAPPING_EFFORT_UNITS] varchar(50) NULL
END
GO

IF COL_LENGTH('MAPPING_DETAILS', 'ACTUAL_ETL_EFFORT') IS NULL
BEGIN
   ALTER TABLE [MAPPING_DETAILS] ADD [ACTUAL_ETL_EFFORT] float NULL
END
GO

IF COL_LENGTH('MAPPING_DETAILS', 'ACTUAL_ETL_EFFORT_UNITS') IS NULL
BEGIN
   ALTER TABLE [MAPPING_DETAILS] ADD [ACTUAL_ETL_EFFORT_UNITS] varchar(50) NULL
END
GO
-- IF (SELECT COUNT(*) FROM TRANSFORMATIONS) < 25
-- BEGIN
-- 	INSERT INTO TRANSFORMATIONS (TRANSF_NAME, PSUEDO_CODE, TRANSF_USE_DESCR, CREATED_DATETIME, LAST_MODIFIED_BY, LAST_MODIFIED_DATE_TIME, CREATED_BY)
--
-- 	SELECT  '1-DataGov(HighDate:12/31/9999)', 'To_date(mm/dd/yyyy,12/31/9999)', 'DataGovernance rule - use on all projects', CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
-- 	UNION ALL
--
-- 	SELECT  '2-DataGov(LowDate01/01/0001)', 'To_date(mm/dd/yyyy, 01/01/0001)', 'DataGovernance rule - use on all projects',CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
-- 	UNION ALL
--
-- 	SELECT  '3-DataGov(AverageChurn)', 'Count(active customers)/(Count of Cancelled Customers for current month)', 'DataGovernance rule - use on all projects where financial reports are viewed and Churn KPIs are used.',CURRENT_TIMESTAMP, ' Administrator',CURRENT_TIMESTAMP, 'Administrator'
-- 	UNION ALL
--
-- 	SELECT  'ABORT', 'ABORT', 'ETL Built-In Transformation: Record handling and processing rule for all projects',CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
-- 	UNION ALL
--
-- 	SELECT  'ABS', 'ABS', 'ETL Built-In Transformation: Record handling and processing rule for all projects',CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
-- 	UNION ALL
--
-- 	SELECT  'ADD_TO_DATE', 'ADD_TO_DATE', 'ETL Built-In Transformation: Record handling and processing rule for all projects',CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
-- 	UNION ALL
--
-- 	SELECT  'AES_DECRYPT', 'AES_DECRYPT', 'ETL Built-In Transformation: Record handling and processing rule for all projects',CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
-- 	UNION ALL
--
-- 	SELECT  'ASCII', 'ASCII', 'ETL Built-In Transformation: Record handling and processing rule for all projects',CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
-- 	UNION ALL
--
-- 	SELECT  'AVG', 'AVG', 'ETL Built in transformation (Aggregation)',CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
-- 	UNION ALL
--
-- 	SELECT  'CEIL', 'CEIL', 'ETL Built-In Transformation: Record handling and processing rule for all projects',CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
-- 	UNION ALL
--
-- 	SELECT  'CHOOSE', 'CHOOSE', 'ETL Built-In Transformation: Record handling and processing rule for all projects',CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
-- 	UNION ALL
--
-- 	SELECT  'CHR', 'CHR', 'ETL Built-In Transformation: Record handling and processing rule for all projects',CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
-- 	UNION ALL
--
-- 	SELECT  'CHRCODE', 'CHRCODE', 'ETL Built-In Transformation: Record handling and processing rule for all projects',CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
-- 	UNION ALL
--
-- 	SELECT  'COMPRESS', 'COMPRESS', 'ETL Built-In Transformation: Record handling and processing rule for all projects',CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
-- 	UNION ALL
--
-- 	SELECT  'CONCAT', 'CONCAT', 'ETL Built-In Transformation: Record handling and processing rule for all projects',CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
-- 	UNION ALL
--
-- 	SELECT  'CONVERT_BASE', 'CONVERT_BASE', 'ETL Built-In Transformation: Record handling and processing rule for all projects',CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
-- 	UNION ALL
--
-- 	SELECT  'COS', 'COS', 'ETL Built-In Transformation: Record handling and processing rule for all projects',CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
-- 	UNION ALL
--
-- 	SELECT  'COSH', 'COSH', 'ETL Built-In Transformation: Record handling and processing rule for all projects',CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
-- 	UNION ALL
--
-- 	SELECT  'COUNT', 'COUNT', 'ETL Built in transformation (Aggregation)',CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
-- 	UNION ALL
--
-- 	SELECT  'CRC32', 'CRC32', 'ETL Built-In Transformation: Record handling and processing rule for all projects',CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
-- 	UNION ALL
--
-- 	SELECT  'CUME', 'CUME', 'ETL Built-In Transformation: Record handling and processing rule for all projects',CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
-- 	UNION ALL
--
-- 	SELECT  'DATE_COMPARE', 'DATE_COMPARE', 'ETL Built-In Transformation: Record handling and processing rule for all projects',CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
-- 	UNION ALL
--
-- 	SELECT  'DATE_DIFF', 'DATE_DIFF', 'ETL Built-In Transformation: Record handling and processing rule for all projects',CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
-- 	UNION ALL
--
-- 	SELECT  'DEC_BASE64', 'DEC_BASE64', 'ETL Built-In Transformation: Record handling and processing rule for all projects',CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
-- 	UNION ALL
--
-- 	SELECT  'DECODE', 'DECODE', 'ETL Built-In Transformation: Record handling and processing rule for all projects',CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
-- 	UNION ALL
--
-- 	SELECT  'DECOMPRESS', 'DECOMPRESS', 'ETL Built-In Transformation: Record handling and processing rule for all projects',CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
-- 	UNION ALL
--
-- 	SELECT  'ENC_BASE64', 'ENC_BASE64', 'ETL Built-In Transformation: Record handling and processing rule for all projects',CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
-- 	UNION ALL
--
-- 	SELECT  'ERROR', 'ERROR', 'ETL Built-In Transformation: Record handling and processing rule for all projects',CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
-- 	UNION ALL
--
-- 	SELECT  'EXP', 'EXP', 'ETL Built-In Transformation: Record handling and processing rule for all projects',CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
-- 	UNION ALL
--
-- 	SELECT  'FIRST', 'FIRST', 'ETL Built in transformation (Aggregation)',CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
-- 	UNION ALL
--
-- 	SELECT  'FLOOR', 'FLOOR', 'ETL Built-In Transformation: Record handling and processing rule for all projects',CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
-- 	UNION ALL
--
-- 	SELECT  'FV', 'FV', 'ETL Built-In Transformation: Record handling and processing rule for all projects',CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
-- 	UNION ALL
--
-- 	SELECT  'GET_DATE_PART', 'GET_DATE_PART', 'ETL Built-In Transformation: Record handling and processing rule for all projects',CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
-- 	UNION ALL
--
-- 	SELECT  'GREATEST', 'GREATEST', 'ETL Built-In Transformation: Record handling and processing rule for all projects',CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
-- 	UNION ALL
--
-- 	SELECT  'IIF', 'IIF', 'ETL Built-In Transformation: Record handling and processing rule for all projects',CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
-- 	UNION ALL
--
-- 	SELECT  'IN', 'IN', 'ETL Built-In Transformation: Record handling and processing rule for all projects',CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
-- 	UNION ALL
--
-- 	SELECT  'INDEXOF', 'INDEXOF', 'ETL Built-In Transformation: Record handling and processing rule for all projects',CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
-- 	UNION ALL
--
-- 	SELECT  'INITCAP', 'INITCAP', 'ETL Built-In Transformation: Record handling and processing rule for all projects',CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
-- 	UNION ALL
--
-- 	SELECT  'INSTR', 'INSTR', 'ETL Built-In Transformation: Record handling and processing rule for all projects',CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
-- 	UNION ALL
--
-- 	SELECT  'IS_DATE', 'IS_DATE', 'ETL Built-In Transformation: Record handling and processing rule for all projects',CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
-- 	UNION ALL
--
-- 	SELECT  'IS_NUMBER', 'IS_NUMBER', 'ETL Built-In Transformation: Record handling and processing rule for all projects',CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
-- 	UNION ALL
--
-- 	SELECT  'IS_SPACES', 'IS_SPACES', 'ETL Built-In Transformation: Record handling and processing rule for all projects',CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
-- 	UNION ALL
--
-- 	SELECT  'ISNULL', 'ISNULL', 'ETL Built-In Transformation: Record handling and processing rule for all projects',CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
-- 	UNION ALL
--
-- 	SELECT  'LAST', 'LAST', 'ETL Built in transformation (Aggregation)',CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
-- 	UNION ALL
--
-- 	SELECT  'LAST_DAY', 'LAST_DAY', 'ETL Built-In Transformation: Record handling and processing rule for all projects',CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
-- 	UNION ALL
--
-- 	SELECT  'LEAST', 'LEAST', 'ETL Built-In Transformation: Record handling and processing rule for all projects',CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
-- 	UNION ALL
--
-- 	SELECT  'LENGTH', 'LENGTH', 'ETL Built-In Transformation: Record handling and processing rule for all projects',CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
-- 	UNION ALL
--
-- 	SELECT  'LN', 'LN', 'ETL Built-In Transformation: Record handling and processing rule for all projects',CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
-- 	UNION ALL
--
-- 	SELECT  'LOG', 'LOG', 'ETL Built-In Transformation: Record handling and processing rule for all projects',CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
-- 	UNION ALL
--
-- 	SELECT  'LOOKUP', 'LOOKUP', 'ETL Built-In Transformation: Record handling and processing rule for all projects',CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
-- 	UNION ALL
--
-- 	SELECT  'LOWER', 'LOWER', 'ETL Built-In Transformation: Record handling and processing rule for all projects',CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
-- 	UNION ALL
--
-- 	SELECT  'LPAD', 'LPAD', 'ETL Built-In Transformation: Record handling and processing rule for all projects',CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
-- 	UNION ALL
--
-- 	SELECT  'LTRIM', 'LTRIM', 'ETL Built-In Transformation: Record handling and processing rule for all projects',CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
-- 	UNION ALL
--
-- 	SELECT  'MAKE_DATE_TIME', 'MAKE_DATE_TIME', 'ETL Built-In Transformation: Record handling and processing rule for all projects',CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
-- 	UNION ALL
--
-- 	SELECT  'MAX', 'MAX', 'ETL Built in transformation (Aggregation)',CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
-- 	UNION ALL
--
-- 	SELECT  'MD5', 'MD5', 'ETL Built-In Transformation: Record handling and processing rule for all projects',CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
-- 	UNION ALL
--
-- 	SELECT  'MEDIAN', 'MEDIAN', 'ETL Built in transformation (Aggregation)',CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
-- 	UNION ALL
--
-- 	SELECT  'METAPHONE', 'METAPHONE', 'ETL Built-In Transformation: Record handling and processing rule for all projects',CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
-- 	UNION ALL
--
-- 	SELECT  'MIN', 'MIN', 'ETL Built in transformation (Aggregation)',CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
-- 	UNION ALL
--
-- 	SELECT  'MOD', 'MOD', 'ETL Built-In Transformation: Record handling and processing rule for all projects',CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
-- 	UNION ALL
--
-- 	SELECT  'MOVINGAVG', 'MOVINGAVG', 'ETL Built-In Transformation: Record handling and processing rule for all projects',CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
-- 	UNION ALL
--
-- 	SELECT  'MOVINGSUM', 'MOVINGSUM', 'ETL Built-In Transformation: Record handling and processing rule for all projects',CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
-- 	UNION ALL
--
-- 	SELECT  'NPER', 'NPER', 'ETL Built-In Transformation: Record handling and processing rule for all projects',CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
-- 	UNION ALL
--
-- 	SELECT  'PERCENTILE', 'PERCENTILE', 'ETL Built in transformation (Aggregation)',CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
-- 	UNION ALL
--
-- 	SELECT  'PMT', 'PMT', 'ETL Built-In Transformation: Record handling and processing rule for all projects',CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
-- 	UNION ALL
--
-- 	SELECT  'POWER', 'POWER', 'ETL Built-In Transformation: Record handling and processing rule for all projects',CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
-- 	UNION ALL
--
-- 	SELECT  'PV', 'PV', 'ETL Built-In Transformation: Record handling and processing rule for all projects',CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
-- 	UNION ALL
--
-- 	SELECT  'RAND', 'RAND', 'ETL Built-In Transformation: Record handling and processing rule for all projects',CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
-- 	UNION ALL
--
-- 	SELECT  'RATE', 'RATE', 'ETL Built-In Transformation: Record handling and processing rule for all projects',CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
-- 	UNION ALL
--
-- 	SELECT  'REG_EXTRACT', 'REG_EXTRACT', 'ETL Built-In Transformation: Record handling and processing rule for all projects',CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
-- 	UNION ALL
--
-- 	SELECT  'REG_MATCH', 'REG_MATCH', 'ETL Built-In Transformation: Record handling and processing rule for all projects',CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
-- 	UNION ALL
--
-- 	SELECT  'REG_REPLACE', 'REG_REPLACE', 'ETL Built-In Transformation: Record handling and processing rule for all projects',CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
-- 	UNION ALL
--
-- 	SELECT  'REPLACECHR', 'REPLACECHR', 'ETL Built-In Transformation: Record handling and processing rule for all projects',CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
-- 	UNION ALL
--
-- 	SELECT  'REPLACESTR', 'REPLACESTR', 'ETL Built-In Transformation: Record handling and processing rule for all projects',CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
-- 	UNION ALL
--
-- 	SELECT  'REVERSE', 'REVERSE', 'ETL Built-In Transformation: Record handling and processing rule for all projects',CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
-- 	UNION ALL
--
-- 	SELECT  'ROUND', 'ROUND', 'ETL Built-In Transformation: Record handling and processing rule for all projects',CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
-- 	UNION ALL
--
-- 	SELECT  'RPAD', 'RPAD', 'ETL Built-In Transformation: Record handling and processing rule for all projects',CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
-- 	UNION ALL
--
-- 	SELECT  'RTRIM', 'RTRIM', 'ETL Built-In Transformation: Record handling and processing rule for all projects',CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
-- 	UNION ALL
--
-- 	SELECT  'SET_DATE_PART', 'SET_DATE_PART', 'ETL Built-In Transformation: Record handling and processing rule for all projects',CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
-- 	UNION ALL
--
-- 	SELECT  'SETCOUNTVARIABLE', 'SETCOUNTVARIABLE', 'ETL Built-In Transformation: Record handling and processing rule for all projects',CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
-- 	UNION ALL
--
-- 	SELECT  'SETMAXVARIABLE', 'SETMAXVARIABLE', 'ETL Built-In Transformation: Record handling and processing rule for all projects',CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
-- 	UNION ALL
--
-- 	SELECT  'SETMINVARIABLE', 'SETMINVARIABLE', 'ETL Built-In Transformation: Record handling and processing rule for all projects',CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
-- 	UNION ALL
--
-- 	SELECT  'SETVARIABLE', 'SETVARIABLE', 'ETL Built-In Transformation: Record handling and processing rule for all projects',CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
-- 	UNION ALL
--
-- 	SELECT  'SIGN', 'SIGN', 'ETL Built-In Transformation: Record handling and processing rule for all projects',CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
-- 	UNION ALL
--
-- 	SELECT  'SIN', 'SIN', 'ETL Built-In Transformation: Record handling and processing rule for all projects',CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
-- 	UNION ALL
--
-- 	SELECT  'SINH', 'SINH', 'ETL Built-In Transformation: Record handling and processing rule for all projects',CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
-- 	UNION ALL
--
-- 	SELECT  'SOUNDEX', 'SOUNDEX', 'ETL Built-In Transformation: Record handling and processing rule for all projects',CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
-- 	UNION ALL
--
-- 	SELECT  'SQRT', 'SQRT', 'ETL Built-In Transformation: Record handling and processing rule for all projects',CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
-- 	UNION ALL
--
-- 	SELECT  'STDDEV', 'STDDEV', 'ETL Built in transformation (Aggregation)',CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
-- 	UNION ALL
--
-- 	SELECT  'SUBSTR', 'SUBSTR', 'Record handling and processing rule for all projects',CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
-- 	UNION ALL
--
-- 	SELECT  'SUM', 'SUM', 'ETL Built in transformation (Aggregation)',CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
-- 	UNION ALL
--
-- 	SELECT  'SYSTIMESTAMP', 'SYSTIMESTAMP', 'ETL Built-In Transformation: Record handling and processing rule for all projects',CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
-- 	UNION ALL
--
-- 	SELECT  'TAN', 'TAN', 'ETL Built-In Transformation: Record handling and processing rule for all projects',CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
-- 	UNION ALL
--
-- 	SELECT  'TANH', 'TANH', 'ETL Built-In Transformation: Record handling and processing rule for all projects',CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
-- 	UNION ALL
--
-- 	SELECT  'TO_BIGINT', 'TO_BIGINT', 'ETL Built-In Transformation: Record handling and processing rule for all projects',CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
-- 	UNION ALL
--
-- 	SELECT  'TO_CHAR', 'TO_CHAR', 'ETL Built-In Transformation: Record handling and processing rule for all projects',CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
-- 	UNION ALL
--
-- 	SELECT  'TO_DATE', 'TO_DATE', 'ETL Built-In Transformation: Record handling and processing rule for all projects',CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
-- 	UNION ALL
--
-- 	SELECT  'TO_DECIMAL', 'TO_DECIMAL', 'ETL Built-In Transformation: Record handling and processing rule for all projects',CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
-- 	UNION ALL
--
-- 	SELECT  'TO_FLOAT', 'TO_FLOAT', 'ETL Built-In Transformation: Record handling and processing rule for all projects',CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
-- 	UNION ALL
--
-- 	SELECT  'TO_INTEGER', 'TO_INTEGER', 'ETL Built-In Transformation: Record handling and processing rule for all projects',CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
-- 	UNION ALL
--
-- 	SELECT  'TRUNC', 'TRUNC', 'ETL Built-In Transformation: Record handling and processing rule for all projects',CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
-- 	UNION ALL
--
-- 	SELECT  'UPPER', 'UPPER', 'ETL Built-In Transformation: Record handling and processing rule for all projects',CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
-- 	UNION ALL
--
-- 	SELECT  'VARIANCE', 'VARIANCE', 'ETL Built in transformation (Aggregation)',CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
-- END
-- GO

IF COL_LENGTH('MAPPING_SPECIFICATION', 'LOOKUP_COLUMN') IS NULL
BEGIN
   ALTER TABLE [MAPPING_SPECIFICATION] ADD [LOOKUP_COLUMN] varchar(MAX)
  EXECUTE('DELETE FROM USER_PREFERENCES WHERE USER_ID LIKE ''%HEADER_ORDER_PREFERENCE%''');
  EXECUTE('DELETE FROM USER_PREFERENCES WHERE USER_ID LIKE ''%HEADER_VISIBILITY_PREFERENCE%''');
--    DELETE FROM USER_PREFERENCES
END
GO

IF NOT EXISTS (SELECT *
	       FROM   SYSOBJECTS
	       WHERE  ID = OBJECT_ID(N'CSM_CATEGORY')
		      AND TYPE = 'U')
  BEGIN
      EXECUTE ('CREATE TABLE [CSM_CATEGORY](
		[CATEGORY_ID] [bigint] NOT NULL,
		[CATEGORY_NAME] [varchar](255) NULL,
		[DESCRIPTION] [varchar](max) NULL,
		[DATE_CREATED] [datetime] NULL,
		[CREATED_BY] [varchar](50) NULL,
		[DATE_MODIFIED] [datetime] NULL,
		[MODIFIED_BY] [varchar](50) NULL,
		[PARENT_CATEGORY_ID] [int] NULL,
		PRIMARY KEY CLUSTERED ([CATEGORY_ID] ASC))')
  END
GO

IF NOT EXISTS (SELECT *
	       FROM   SYSOBJECTS
	       WHERE  ID = OBJECT_ID(N'CSM_CODESET')
		      AND TYPE = 'U')
  BEGIN
      EXECUTE ('CREATE TABLE [CSM_CODESET](
			[CODESET_ID] [bigint] NOT NULL,
			[CODESET_NAME] [varchar](30) NOT NULL,
			[CODESET_DESC] [varchar](max) NULL,
			[CATEGORY_ID] [bigint] NOT NULL,
			[CREATED_BY] [varchar](20) NOT NULL,
			[CREATED_DATE_TIME] [datetime] NOT NULL,
			[LAST_MODIFIED_BY] [varchar](20) NULL,
			[LAST_MODIFIED_DATE_TIME] [datetime] NULL,
			CONSTRAINT [PK_CODESET] PRIMARY KEY CLUSTERED ([CODESET_ID] ASC))')
  END
GO

IF NOT EXISTS (SELECT * FROM SYSOBJECTS WHERE  name = 'FK_CATEGORY_CATEGORY_ID' AND type='F')
  BEGIN
	ALTER TABLE [CSM_CODESET]  WITH CHECK ADD  CONSTRAINT [FK_CATEGORY_CATEGORY_ID] FOREIGN KEY([CATEGORY_ID])
	REFERENCES [CSM_CATEGORY] ([CATEGORY_ID])
        ALTER TABLE [CSM_CODESET] CHECK CONSTRAINT [FK_CATEGORY_CATEGORY_ID]
  END
GO
IF COL_LENGTH('MAPPING_SPECIFICATION', 'TGT_LOGICAL_COLUMN_NAME') IS NULL
BEGIN
   ALTER TABLE [MAPPING_SPECIFICATION] ADD [TGT_LOGICAL_COLUMN_NAME] varchar(255) NULL
   --DELETE FROM USER_PREFERENCES
    EXECUTE('DELETE FROM USER_PREFERENCES WHERE USER_ID LIKE ''%HEADER_ORDER_PREFERENCE%''');
    EXECUTE('DELETE FROM USER_PREFERENCES WHERE USER_ID LIKE ''%HEADER_VISIBILITY_PREFERENCE%''');
    EXECUTE('DELETE FROM USER_PREFERENCES WHERE USER_ID IN (SELECT USER_ID FROM USERS)');
END
ELSE
BEGIN
   ALTER TABLE [MAPPING_SPECIFICATION] ALTER COLUMN [TGT_LOGICAL_COLUMN_NAME] varchar(255)
END
GO

IF COL_LENGTH('MAPPING_SPECIFICATION', 'SRC_LOGICAL_COLUMN_NAME') IS NULL
BEGIN
    ALTER TABLE [MAPPING_SPECIFICATION] ADD [SRC_LOGICAL_COLUMN_NAME] varchar(255) NULL
    EXECUTE('DELETE FROM USER_PREFERENCES WHERE USER_ID LIKE ''%HEADER_ORDER_PREFERENCE%''');
    EXECUTE('DELETE FROM USER_PREFERENCES WHERE USER_ID LIKE ''%HEADER_VISIBILITY_PREFERENCE%''');
    EXECUTE('DELETE FROM USER_PREFERENCES WHERE USER_ID IN (SELECT USER_ID FROM USERS)');
--    DELETE FROM USER_PREFERENCES
END
GO

IF COL_LENGTH('MAPPING_SPECIFICATION', 'SRC_COL_DEF_COMMENTS') IS NOT NULL
   BEGIN
      EXECUTE sys.sp_rename @objname = N'[MAPPING_SPECIFICATION].[SRC_COL_DEF_COMMENTS]', @newname = N'TemporaryColumnName1', @objtype = 'COLUMN'
      EXECUTE sys.sp_rename @objname = N'[MAPPING_SPECIFICATION].[TemporaryColumnName1]', @newname = N'SRC_COL_DEF', @objtype = 'COLUMN'
   END
GO

IF COL_LENGTH('MAPPING_SPECIFICATION', 'TGT_COL_DEF_COMMENTS') IS NOT NULL
   BEGIN
      EXECUTE sys.sp_rename @objname = N'[mapping_specification].[TGT_COL_DEF_COMMENTS]', @newname = N'TemporaryColumnName2', @objtype = 'COLUMN'
      EXECUTE sys.sp_rename @objname = N'[mapping_specification].[TemporaryColumnName2]', @newname = N'TGT_COL_DEF', @objtype = 'COLUMN'
   END
GO

IF COL_LENGTH('MAPPING_SPECIFICATION', 'TGT_COLUMN_COMMENTS') IS NULL
BEGIN
    ALTER TABLE [MAPPING_SPECIFICATION] ADD [TGT_COLUMN_COMMENTS] varchar(MAX) NULL
    EXECUTE('DELETE FROM USER_PREFERENCES WHERE USER_ID LIKE ''%HEADER_ORDER_PREFERENCE%''');
    EXECUTE('DELETE FROM USER_PREFERENCES WHERE USER_ID LIKE ''%HEADER_VISIBILITY_PREFERENCE%''');
    EXECUTE('DELETE FROM USER_PREFERENCES WHERE USER_ID IN (SELECT USER_ID FROM USERS)');
--    DELETE FROM USER_PREFERENCES
END
GO

IF COL_LENGTH('MAPPING_SPECIFICATION', 'SRC_COLUMN_COMMENTS') IS NULL
BEGIN
    ALTER TABLE [MAPPING_SPECIFICATION] ADD [SRC_COLUMN_COMMENTS] varchar(MAX) NULL
    EXECUTE('DELETE FROM USER_PREFERENCES WHERE USER_ID LIKE ''%HEADER_ORDER_PREFERENCE%''');
    EXECUTE('DELETE FROM USER_PREFERENCES WHERE USER_ID LIKE ''%HEADER_VISIBILITY_PREFERENCE%''');
    EXECUTE('DELETE FROM USER_PREFERENCES WHERE USER_ID IN (SELECT USER_ID FROM USERS)');
--    DELETE FROM USER_PREFERENCES
END
GO

IF COL_LENGTH('SYSTEM_TABLE_COLUMNS_METADATA', 'COL_DEF_COMMENTS') IS NOT NULL
   BEGIN
      EXECUTE sys.sp_rename @objname = N'[SYSTEM_TABLE_COLUMNS_METADATA].[COL_DEF_COMMENTS]', @newname = N'COL_DEF', @objtype = 'COLUMN'
   END
GO

IF COL_LENGTH('SYSTEM_TABLE_COLUMNS_METADATA', 'COLUMN_COMMENTS') IS NULL
BEGIN
   ALTER TABLE [SYSTEM_TABLE_COLUMNS_METADATA] ADD [COLUMN_COMMENTS] varchar(MAX) NULL
END
GO

IF COL_LENGTH('SYSTEM_TABLE_COLUMNS_METADATA', 'USER_DEFINATION1') IS NULL
BEGIN
   ALTER TABLE [SYSTEM_TABLE_COLUMNS_METADATA] ADD [USER_DEFINATION1] varchar(MAX) NULL
END
GO

IF COL_LENGTH('SYSTEM_TABLE_COLUMNS_METADATA', 'USER_DEFINATION2') IS NULL
BEGIN
   ALTER TABLE [SYSTEM_TABLE_COLUMNS_METADATA] ADD [USER_DEFINATION2] varchar(MAX) NULL
END
GO

IF COL_LENGTH('SYSTEM_TABLE_COLUMNS_METADATA', 'USER_DEFINATION3') IS NULL
BEGIN
   ALTER TABLE [SYSTEM_TABLE_COLUMNS_METADATA] ADD [USER_DEFINATION3] varchar(MAX) NULL
END
GO

IF COL_LENGTH('SYSTEM_TABLE_COLUMNS_METADATA', 'USER_DEFINATION4') IS NULL
BEGIN
   ALTER TABLE [SYSTEM_TABLE_COLUMNS_METADATA] ADD [USER_DEFINATION4] varchar(MAX) NULL
END
GO

IF COL_LENGTH('SYSTEM_TABLE_COLUMNS_METADATA', 'USER_DEFINATION5') IS NULL
BEGIN
   ALTER TABLE [SYSTEM_TABLE_COLUMNS_METADATA] ADD [USER_DEFINATION5] varchar(MAX) NULL
END
GO

IF COL_LENGTH('MAPPING_SPECIFICATION', 'ROW_ORDER') IS NULL
BEGIN
   ALTER TABLE [MAPPING_SPECIFICATION] ADD [ROW_ORDER] float NULL DEFAULT 0

   EXECUTE(';WITH CTE AS (SELECT MAP_ID, MAP_SEQ_ID, ROW_NUMBER() OVER (PARTITION BY MAP_ID ORDER BY MAP_SEQ_ID) AS ROW_ORDER FROM MAPPING_SPECIFICATION)
             UPDATE MS
            	SET MS.ROW_ORDER = CTE.ROW_ORDER
            	FROM MAPPING_SPECIFICATION MS
            	JOIN CTE
            	ON MS.MAP_ID = CTE.MAP_ID
            	AND MS.MAP_SEQ_ID = CTE.MAP_SEQ_ID')
    EXECUTE('DELETE FROM USER_PREFERENCES WHERE USER_ID LIKE ''%HEADER_ORDER_PREFERENCE%''');
    EXECUTE('DELETE FROM USER_PREFERENCES WHERE USER_ID LIKE ''%HEADER_VISIBILITY_PREFERENCE%''');
    EXECUTE('DELETE FROM USER_PREFERENCES WHERE USER_ID IN (SELECT USER_ID FROM USERS)');
--    DELETE FROM USER_PREFERENCES
END
GO

IF NOT EXISTS (SELECT *
	       FROM   SYSOBJECTS
	       WHERE  ID = OBJECT_ID(N'CSM_MAPPING_DETAILS')
		      AND TYPE = 'U')
    BEGIN
        EXECUTE ('CREATE TABLE [CSM_MAPPING_DETAILS](
                [CSM_MAP_ID] [INT] NOT NULL,
                [CSM_MAP_NAME] [VARCHAR](50) NOT NULL,
                [CSM_MAP_DESC] [VARCHAR](50) NOT NULL,
                [CSM_MAP_VERSION] DECIMAL (18, 2) NULL,
                [CSM_MAP_VERSION_LABLE] VARCHAR(20),
                [CSM_MAP_CHANGED_DESC] VARCHAR(MAX),
                [CSM_MAP_STATUS] VARCHAR(20),
                [CSM_MAP_PUBLISH_FLAG] CHAR(1),
                [DATE_CREATED] [DATETIME] NOT NULL,
                [CREATED_BY] [VARCHAR](50) NOT NULL,
                [DATE_LAST_MODIFIED] [DATETIME] NOT NULL,
                [MODIFIED_BY] [VARCHAR](50) NOT NULL,
                PRIMARY KEY CLUSTERED ([CSM_MAP_ID] ASC))')
    END
GO

IF COL_LENGTH('CSM_MAPPING_DETAILS', 'CSM_MAP_PUBLISH_FLAG') IS NULL
    BEGIN
        ALTER TABLE [CSM_MAPPING_DETAILS] ADD [CSM_MAP_PUBLISH_FLAG] CHAR(1)
    END
GO

IF COL_LENGTH('CSM_MAPPING_DETAILS', 'CSM_MAP_DESC') IS NULL
BEGIN
    ALTER TABLE [CSM_MAPPING_DETAILS] ADD [CSM_MAP_DESC] VARCHAR (255)
END
GO

IF COL_LENGTH('CSM_MAPPING_DETAILS', 'CSM_MAP_VERSION') IS NULL
BEGIN
    ALTER TABLE [CSM_MAPPING_DETAILS] ADD [CSM_MAP_VERSION] DECIMAL (18, 2) NULL
END
GO

IF COL_LENGTH('CSM_MAPPING_DETAILS', 'CSM_MAP_VERSION_LABLE') IS NULL
    BEGIN
        ALTER TABLE [CSM_MAPPING_DETAILS] ADD [CSM_MAP_VERSION_LABLE] VARCHAR(20)
    END
GO

IF COL_LENGTH('CSM_MAPPING_DETAILS', 'CSM_MAP_CHANGED_DESC') IS NULL
    BEGIN
        ALTER TABLE [CSM_MAPPING_DETAILS] ADD [CSM_MAP_CHANGED_DESC] VARCHAR(MAX)
    END
GO

IF COL_LENGTH('CSM_MAPPING_DETAILS', 'CSM_MAP_STATUS') IS NULL
    BEGIN
        ALTER TABLE [CSM_MAPPING_DETAILS] ADD [CSM_MAP_STATUS] VARCHAR(20)
    END
GO

IF NOT EXISTS
     (select [CSM_MAP_STATUS] from [CSM_MAPPING_DETAILS] where [CSM_MAP_STATUS] = 'Active')
    BEGIN
       UPDATE [CSM_MAPPING_DETAILS] SET [CSM_MAP_VERSION] = '1.00', [CSM_MAP_STATUS] = 'Active' WHERE [CSM_MAP_ID] IN (SELECT [CSM_MAP_ID] FROM [CSM_MAPPING_DETAILS])
    END
GO

IF NOT EXISTS (SELECT *
	       FROM   SYSOBJECTS
	       WHERE  ID = OBJECT_ID(N'CSM_MAPPING_SPEC')
		      AND TYPE = 'U')
    BEGIN
        EXECUTE ('CREATE TABLE [CSM_MAPPING_SPEC](
                [CSM_MAP_ID] [INT] NULL,
                [CSM_MAP_SOURCE_CODE_ID] [INT] NULL,
                [CSM_MAP_TARGET_CODE_ID] [INT] NULL,
                [CSM_MAP_SEQUENCE_ID] [INT] NULL,
                [CSM_MAP_PUBLISH_FLAG] [CHAR](1) NULL,
                [CSM_MAP_DELETE_FLAG] [CHAR](1) NULL,
                [CSM_MAP_CREATEDBY] VARCHAR(50),
                [CSM_MAP_CREATED_DATE] DATETIME NULL,
                [CSM_MAP_MODIFIEDBY] VARCHAR(50),
                [CSM_MAP_MODIFIED_DATE] DATETIME NULL)')
    END
GO

IF COL_LENGTH('CSM_MAPPING_SPEC', 'CSM_MAP_PUBLISH_FLAG') IS NULL
    BEGIN
        EXECUTE SYS.SP_RENAME @OBJNAME = N'[CSM_MAPPING_SPEC].[CSM_MAP_ACTIVE_FLAG]', @NEWNAME = N'CSM_MAP_PUBLISH_FLAG', @OBJTYPE = 'COLUMN'
    END
GO

IF COL_LENGTH('CSM_MAPPING_SPEC', 'CSM_MAP_CREATEDBY') IS NULL
    BEGIN
	ALTER TABLE [CSM_MAPPING_SPEC] ADD [CSM_MAP_CREATEDBY] VARCHAR(50)
    END
GO

IF COL_LENGTH('CSM_MAPPING_SPEC', 'CSM_MAP_CREATED_DATE') IS NULL
    BEGIN
        ALTER TABLE [CSM_MAPPING_SPEC] ADD [CSM_MAP_CREATED_DATE] DATETIME NULL
    END
GO

IF COL_LENGTH('CSM_MAPPING_SPEC', 'CSM_MAP_MODIFIEDBY') IS NULL
    BEGIN
        ALTER TABLE [CSM_MAPPING_SPEC] ADD [CSM_MAP_MODIFIEDBY] VARCHAR(50)
    END
GO

IF COL_LENGTH('CSM_MAPPING_SPEC', 'CSM_MAP_MODIFIED_DATE') IS NULL
    BEGIN
        ALTER TABLE [CSM_MAPPING_SPEC] ADD [CSM_MAP_MODIFIED_DATE] DATETIME NULL
    END
GO

IF COL_LENGTH('SYS_CON_ENVIRONMENTS', 'SPECIAL_APP_CON_INSTS') IS NULL
BEGIN
   EXECUTE SYS.SP_RENAME @OBJNAME = N'[SYS_CON_ENVIRONMENTS].[SPECIAL_APPROVAL_CONTVY_INSTRUCTIONS]', @NEWNAME = N'SPECIAL_APP_CON_INSTS', @OBJTYPE = 'COLUMN'
END
GO

IF NOT EXISTS (SELECT *
	       FROM   SYSOBJECTS
	       WHERE  ID = OBJECT_ID(N'CSM_CODE_VALUE')
		      AND TYPE = 'U')
    BEGIN
        EXECUTE ('CREATE TABLE [CSM_CODE_VALUE](
                [CODE_ID] [BIGINT] NOT NULL,
                [CODE_NAME] [VARCHAR](30) NOT NULL,
                [CODE_STND_VALUE] [VARCHAR](30) NOT NULL,
                [CODE_DESC] [VARCHAR](MAX) NULL,
                [CREATED_BY] [VARCHAR](20) NOT NULL,
                [CREATED_DATE_TIME] [DATETIME] NOT NULL,
                [LAST_MODIFIED_BY] [VARCHAR](20) NOT NULL,
                [LAST_MODIFIED_DATE_TIME] [DATETIME] NOT NULL,
                [CODESET_ID] [BIGINT] NULL,
                [SYSTEM_ID] INT NULL,
                [SYSTEM_NAME] VARCHAR (50),
                [SYSTEM_ENV_NAME] [VARCHAR](255) NULL,
                [ACTIVE_FLAG] [CHAR](1) NULL,
                [DELETE_FLAG] [CHAR](1) NULL,
                CONSTRAINT [PK_CODE_VALUE] PRIMARY KEY CLUSTERED ([CODE_ID] ASC))')
    END
GO

IF NOT EXISTS (SELECT * FROM SYSOBJECTS WHERE  NAME = 'FK_CODESET_CODESET_ID' AND TYPE='F')
    BEGIN TRY
        ALTER TABLE [CSM_CODE_VALUE]  WITH CHECK ADD  CONSTRAINT [FK_CODESET_CODESET_ID] FOREIGN KEY([CODESET_ID])REFERENCES [CSM_CODESET] ([CODESET_ID]) ON DELETE NO ACTION
        ALTER TABLE [CSM_CODE_VALUE] CHECK CONSTRAINT [FK_CODESET_CODESET_ID]
    END TRY
    BEGIN CATCH
    END CATCH
 GO

IF COL_LENGTH('CSM_CODE_VALUE', 'CODE_NAME') IS NULL
    BEGIN
        ALTER TABLE [CSM_CODE_VALUE] ADD [CODE_NAME] VARCHAR (255)
    END
ELSE
    BEGIN
        ALTER TABLE [CSM_CODE_VALUE] ALTER COLUMN [CODE_NAME] VARCHAR (255)
    END
GO

IF COL_LENGTH('CSM_CODE_VALUE', 'SYSTEM_ID') IS NULL
    BEGIN
        ALTER TABLE [CSM_CODE_VALUE] ADD [SYSTEM_ID] INT NULL
    END
GO

IF COL_LENGTH('CSM_CODE_VALUE', 'SYSTEM_ID') IS NOT NULL
    BEGIN
        UPDATE CSM_CODE_VALUE SET SYSTEM_ID = SDD.SYSTEM_ID
        FROM CSM_CODE_VALUE CSV
        JOIN SYS_CON_ENVIRONMENTS SCE ON SCE.SYSTEM_ENVIRONMENT_NAME = CSV.SYSTEM_ENV_NAME
        JOIN SYSTEM_DEFINITION_DETAILS SDD ON SCE.SYSTEM_ID = SDD.SYSTEM_ID
    END
GO

IF COL_LENGTH('CSM_CODE_VALUE', 'SYSTEM_NAME') IS NULL
    BEGIN
        ALTER TABLE [CSM_CODE_VALUE] ADD [SYSTEM_NAME] VARCHAR (50)
    END
GO

IF COL_LENGTH('CSM_CODE_VALUE', 'SYSTEM_NAME') IS NOT NULL
    BEGIN
        UPDATE CSM_CODE_VALUE SET SYSTEM_NAME = SDD.SYSTEM_NAME
        FROM CSM_CODE_VALUE CSV
        JOIN SYSTEM_DEFINITION_DETAILS SDD ON CSV.SYSTEM_ID = SDD.SYSTEM_ID
    END
GO

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'CSM_CODESET' AND COLUMN_NAME = 'CODESET_NAME' AND CHARACTER_MAXIMUM_LENGTH != '50')
    BEGIN
        ALTER TABLE [CSM_CODESET] ALTER COLUMN [CODESET_NAME] varchar(50)
    END
GO

IF COL_LENGTH('PROJECT_DOCUMENT_TEMPLATES', 'PROJ_DOC_NW_LOC') IS NULL
BEGIN
   EXECUTE SYS.SP_RENAME @OBJNAME = N'[PROJECT_DOCUMENT_TEMPLATES].[PROJECT_DOC_NETWK_DRIVE_LOCATION]', @NEWNAME = N'PROJ_DOC_NW_LOC', @OBJTYPE = 'COLUMN'
END
GO

IF EXISTS (SELECT * FROM sys.key_constraints WHERE name='XPKSYSTEM_TABLE_COLUMNS_METADATA')
  BEGIN
      EXECUTE SP_RENAME 'XPKSYSTEM_TABLE_COLUMNS_METADATA', 'XPKSYS_TAB_COL_METADATA'
  END
GO

IF EXISTS (SELECT * FROM sys.key_constraints WHERE name='XPKPROJECT_DOCUMENT_TEMPLATES')
  BEGIN
      EXECUTE SP_RENAME 'XPKPROJECT_DOCUMENT_TEMPLATES', 'XPKPROJ_DOC_TEMPLATES'
  END
GO

--CHECK IF FUNCTION ALREADY EXISTS OR NOT IN SELECTED DATABASE, IF EXISTS DROP AND RECREATE THE FUNCTION
IF (OBJECTPROPERTY(OBJECT_ID('FN_SPLITTREENODEIDS'),'ISTABLEFUNCTION') = 1)
BEGIN
	DROP FUNCTION FN_SPLITTREENODEIDS
END
GO

CREATE FUNCTION [FN_SPLITTREENODEIDS](
 @TREENODEIDARRAY VARCHAR (MAX),
 @DELIMITER VARCHAR (10)
 )
RETURNS @VALUETABLE TABLE ([TREENODEID] INT)
BEGIN
 DECLARE @NEXTSTRING NVARCHAR(4000)
 DECLARE @POS INT
 DECLARE @NEXTPOS INT
 DECLARE @COMMACHECK NVARCHAR(1)

 --INITIALIZE
 SET @NEXTSTRING = ''
 SET @COMMACHECK = RIGHT(@TREENODEIDARRAY,1)

 --CHECK FOR TRAILING COMMA, IF EXISTS, INSERT
 --IF (@COMMACHECK <> @DELIMITER )
 SET @TREENODEIDARRAY = @TREENODEIDARRAY + @DELIMITER

 --GET POSITION OF FIRST COMMA
 SET @POS = CHARINDEX(@DELIMITER,@TREENODEIDARRAY)
 SET @NEXTPOS = 1

 --LOOP WHILE THERE IS STILL A COMMA IN THE STRING OF LEVELS
 WHILE (@POS <>  0)
 BEGIN
  SET @NEXTSTRING = SUBSTRING(@TREENODEIDARRAY,1,@POS - 1)

  INSERT INTO @VALUETABLE ( [TREENODEID]) VALUES (CONVERT(INT, @NEXTSTRING))

  SET @TREENODEIDARRAY = SUBSTRING(@TREENODEIDARRAY,@POS +1,LEN(@TREENODEIDARRAY))

  SET @NEXTPOS = @POS
  SET @POS  = CHARINDEX(@DELIMITER,@TREENODEIDARRAY)
 END
 RETURN
END
GO

IF NOT EXISTS(SELECT * FROM SYS.VIEWS WHERE NAME = 'PROJ_MAP_INTG_STATUS_SUMMARY_V')
BEGIN
EXEC ('CREATE VIEW [PROJ_MAP_INTG_STATUS_SUMMARY_V] AS
select project.proj_id as ProjectId, proj_name as ProjectName,
TotalMappings,
sum(case when (responsiables = ''Mapping Approver'' and mapping_status.status = ''Complete'') then 1 else 0 end) as MAppCompleteCount,
sum(case when (responsiables = ''Mapping Approver'' and mapping_status.status = ''In Progress'') then 1 else 0 end) as MAppInProgressCount,
sum(case when (responsiables = ''Mapping Approver'' and mapping_status.status = ''Not Started'') then 1 else 0 end) as MAppNotStartedCount,
sum(case when (responsiables = ''Mapping Approver'' and mapping_status.status = ''On Hold'') then 1 else 0 end) as MAppOnHoldCount,
sum(case when (responsiables = ''Mapping Designer'' and mapping_status.status = ''Complete'') then 1 else 0 end) as MDsgCompleteCount,
sum(case when (responsiables = ''Mapping Designer'' and mapping_status.status = ''In Progress'') then 1 else 0 end) as MDsgInProgressCount,
sum(case when (responsiables = ''Mapping Designer'' and mapping_status.status = ''Not Started'') then 1 else 0 end) as MDsgNotStartedCount,
sum(case when (responsiables = ''Mapping Designer'' and mapping_status.status = ''On Hold'') then 1 else 0 end) as MDsgOnHoldCount,
sum(case when (responsiables = ''Mapping ETL Developer'' and mapping_status.status = ''Complete'') then 1 else 0 end) as METLDevCompleteCount,
sum(case when (responsiables = ''Mapping ETL Developer'' and mapping_status.status = ''In Progress'') then 1 else 0 end) as METLDevInProgressCount,
sum(case when (responsiables = ''Mapping ETL Developer'' and mapping_status.status = ''Not Started'') then 1 else 0 end) as METLDevNotStartedCount,
sum(case when (responsiables = ''Mapping ETL Developer'' and mapping_status.status = ''On Hold'') then 1 else 0 end) as METLDevOnHoldCount,
sum(case when (responsiables = ''Mapping Tester'' and mapping_status.status = ''Complete'') then 1 else 0 end) as MTstrCompleteCount,
sum(case when (responsiables = ''Mapping Tester'' and mapping_status.status = ''In Progress'') then 1 else 0 end) as MTstrInProgressCount,
sum(case when (responsiables = ''Mapping Tester'' and mapping_status.status = ''Not Started'') then 1 else 0 end) as MTstrNotStartedCount,
sum(case when (responsiables = ''Mapping Tester'' and mapping_status.status = ''On Hold'') then 1 else 0 end) as MTstrOnHoldCount
from mapping_status
left join project on project.proj_id = mapping_status.proj_id
left join mapping_details on mapping_details.map_id = mapping_status.map_id
left join totalmappingsbyproject on totalmappingsbyproject.projectid = project.proj_id
where mapping_details.status = ''Active''
and mapping_status.status != ''''
and mapping_status.status != ''unassigned''
and totalmappingsbyproject.mappingstatus = ''Active''
group by project.proj_id, proj_name, totalmappings');
END
ELSE
BEGIN
EXEC ('ALTER VIEW [PROJ_MAP_INTG_STATUS_SUMMARY_V] AS
select project.proj_id as ProjectId, proj_name as ProjectName,
TotalMappings,
sum(case when (responsiables = ''Mapping Approver'' and mapping_status.status = ''Complete'') then 1 else 0 end) as MAppCompleteCount,
sum(case when (responsiables = ''Mapping Approver'' and mapping_status.status = ''In Progress'') then 1 else 0 end) as MAppInProgressCount,
sum(case when (responsiables = ''Mapping Approver'' and mapping_status.status = ''Not Started'') then 1 else 0 end) as MAppNotStartedCount,
sum(case when (responsiables = ''Mapping Approver'' and mapping_status.status = ''On Hold'') then 1 else 0 end) as MAppOnHoldCount,
sum(case when (responsiables = ''Mapping Designer'' and mapping_status.status = ''Complete'') then 1 else 0 end) as MDsgCompleteCount,
sum(case when (responsiables = ''Mapping Designer'' and mapping_status.status = ''In Progress'') then 1 else 0 end) as MDsgInProgressCount,
sum(case when (responsiables = ''Mapping Designer'' and mapping_status.status = ''Not Started'') then 1 else 0 end) as MDsgNotStartedCount,
sum(case when (responsiables = ''Mapping Designer'' and mapping_status.status = ''On Hold'') then 1 else 0 end) as MDsgOnHoldCount,
sum(case when (responsiables = ''Mapping ETL Developer'' and mapping_status.status = ''Complete'') then 1 else 0 end) as METLDevCompleteCount,
sum(case when (responsiables = ''Mapping ETL Developer'' and mapping_status.status = ''In Progress'') then 1 else 0 end) as METLDevInProgressCount,
sum(case when (responsiables = ''Mapping ETL Developer'' and mapping_status.status = ''Not Started'') then 1 else 0 end) as METLDevNotStartedCount,
sum(case when (responsiables = ''Mapping ETL Developer'' and mapping_status.status = ''On Hold'') then 1 else 0 end) as METLDevOnHoldCount,
sum(case when (responsiables = ''Mapping Tester'' and mapping_status.status = ''Complete'') then 1 else 0 end) as MTstrCompleteCount,
sum(case when (responsiables = ''Mapping Tester'' and mapping_status.status = ''In Progress'') then 1 else 0 end) as MTstrInProgressCount,
sum(case when (responsiables = ''Mapping Tester'' and mapping_status.status = ''Not Started'') then 1 else 0 end) as MTstrNotStartedCount,
sum(case when (responsiables = ''Mapping Tester'' and mapping_status.status = ''On Hold'') then 1 else 0 end) as MTstrOnHoldCount
from mapping_status
left join project on project.proj_id = mapping_status.proj_id
left join mapping_details on mapping_details.map_id = mapping_status.map_id
left join totalmappingsbyproject on totalmappingsbyproject.projectid = project.proj_id
where mapping_details.status = ''Active''
and mapping_status.status != ''''
and mapping_status.status != ''unassigned''
and totalmappingsbyproject.mappingstatus = ''Active''
group by project.proj_id, proj_name, totalmappings');
END
GO

IF NOT EXISTS(SELECT * FROM SYS.VIEWS WHERE NAME = 'TESTING_STATUS_DETAILS_V')
BEGIN
EXEC ('CREATE VIEW [TESTING_STATUS_DETAILS_V] AS
select mappingteststatus.TESTSTATUS,mappingteststatus.MAP_ID,mappingteststatus.MAP_NAME,mappingteststatus.MAP_SPEC_VERSION,
mappingteststatus.TESTING_NOTES, mappingteststatus.PROJECT_ID,mappingteststatus.PROJECTNAME,mappingteststatus.PROJECTDESCRIPTION,mappingteststatus.MAPPINGSTATUS,
isnull(testermappings.STATUS, '''') as testerstatus,
isnull(testermappings.USER_ID, '''') assignedtouserid,
isnull(users.user_full_name, '''') as assginedtousername
from mappingteststatus
left join testermappings on mappingteststatus.map_id = testermappings.MAP_ID
left join users on testermappings.USER_ID = users.user_id');
END
ELSE
BEGIN
EXEC ('ALTER VIEW [TESTING_STATUS_DETAILS_V] AS
select mappingteststatus.TESTSTATUS,mappingteststatus.MAP_ID,mappingteststatus.MAP_NAME,mappingteststatus.MAP_SPEC_VERSION,
mappingteststatus.TESTING_NOTES, mappingteststatus.PROJECT_ID,mappingteststatus.PROJECTNAME,mappingteststatus.PROJECTDESCRIPTION,mappingteststatus.MAPPINGSTATUS,
isnull(testermappings.STATUS, '''') as testerstatus,
isnull(testermappings.USER_ID, '''') assignedtouserid,
isnull(users.user_full_name, '''') as assginedtousername
from mappingteststatus
left join testermappings on mappingteststatus.map_id = testermappings.MAP_ID
left join users on testermappings.USER_ID = users.user_id');
END
GO

IF NOT EXISTS(SELECT * FROM SYS.VIEWS WHERE NAME = 'MAP_ASSIGNMENT_SUMMARY_V')
BEGIN
EXEC ('CREATE VIEW [MAP_ASSIGNMENT_SUMMARY_V] AS
select mapping_status.user_id, map_id, user_full_name, responsiables, status from
mapping_status left join users on users.user_id = mapping_status.user_id
where mapping_status.user_id != ''''');
END
ELSE
BEGIN
EXEC ('ALTER VIEW [MAP_ASSIGNMENT_SUMMARY_V] AS
select mapping_status.user_id, map_id, user_full_name, responsiables, status from
mapping_status left join users on users.user_id = mapping_status.user_id
where mapping_status.user_id != ''''');
END
GO

IF NOT EXISTS (SELECT *
	       FROM   SYSOBJECTS
	       WHERE  ID = OBJECT_ID(N'MAPPING_CHANGE_LOG')
		      AND TYPE = 'U')
    BEGIN
        EXECUTE('CREATE TABLE [MAPPING_CHANGE_LOG] (
           [CHANGE_LOG_ID] int NOT NULL,
           [MAP_ID] int NULL,
           [CHANGE_LOG_DESCRIPTION] varchar(MAX) NULL,
           [CREATED_BY] varchar(255) NULL,
           [CREATED_DATE_TIME] datetime NULL,
           [LAST_MODIFIED_BY] varchar(255) NULL,
           [LAST_MODIFIED_DATE_TIME] datetime NULL,
           PRIMARY KEY CLUSTERED ([CHANGE_LOG_ID] ))')
    END
GO

IF COL_LENGTH('SYSTEM_TABLE_METADATA', 'TABLE_REF_ID') IS NULL
    BEGIN
        ALTER TABLE [SYSTEM_TABLE_METADATA] ADD [TABLE_REF_ID] varchar(255) NULL
    END
GO

IF COL_LENGTH('SYSTEM_TABLE_COLUMNS_METADATA', 'COLUMN_REF_ID') IS NULL
    BEGIN
        ALTER TABLE [SYSTEM_TABLE_COLUMNS_METADATA] ADD [COLUMN_REF_ID] varchar(255) NULL
    END
GO

IF COL_LENGTH('MAPPING_SPECIFICATION', 'CSM_MAPPING_REFERENCE') IS NULL
    BEGIN
        ALTER TABLE [MAPPING_SPECIFICATION] ADD [CSM_MAPPING_REFERENCE] varchar(255)
        EXECUTE('DELETE FROM USER_PREFERENCES WHERE USER_ID LIKE ''%HEADER_ORDER_PREFERENCE%''');
        EXECUTE('DELETE FROM USER_PREFERENCES WHERE USER_ID LIKE ''%HEADER_VISIBILITY_PREFERENCE%''');
        EXECUTE('DELETE FROM USER_PREFERENCES WHERE USER_ID IN (SELECT USER_ID FROM USERS)');
    END
GO

--DELETE FROM [USER_PREFERENCES]
--GO

IF COL_LENGTH('MAPPING_STATUS', 'EMAIL_CCLIST') IS NULL
    BEGIN
        ALTER TABLE [MAPPING_STATUS] ADD [EMAIL_CCLIST] varchar(MAX)
    END
GO

IF COL_LENGTH('MAPPING_STATUS', 'EMAIL_EXTRA_CONTENT') IS NULL
    BEGIN
        ALTER TABLE [MAPPING_STATUS] ADD [EMAIL_EXTRA_CONTENT] varchar(MAX)
    END
GO

IF NOT EXISTS (SELECT *
                   FROM   SYSOBJECTS
                   WHERE  ID = OBJECT_ID(N'CSM_MAP_CODESETS')
                          AND TYPE = 'U')
    BEGIN
        EXECUTE ('
                CREATE TABLE CSM_MAP_CODESETS (
                CSM_MAP_CODESETS_ID BIGINT NOT NULL IDENTITY (1,1),
                CSM_MAP_ID INT NULL,
                CSM_MAP_CODESET_ID INT NULL,
                CSM_MAP_CODESET_TYPE VARCHAR(10) ) ')
        ALTER TABLE CSM_MAP_CODESETS ADD CONSTRAINT PK_CSM_MAP_CODESETS_ID PRIMARY KEY CLUSTERED (CSM_MAP_CODESETS_ID ASC)
        ALTER TABLE CSM_MAP_CODESETS ADD CONSTRAINT [FK_CSM_MAP_DETLS_CSM_MAP_ID] FOREIGN KEY ([CSM_MAP_ID]) REFERENCES [CSM_MAPPING_DETAILS] ( [CSM_MAP_ID] ) ON DELETE CASCADE
        INSERT INTO CSM_MAP_CODESETS
                ( CSM_MAP_ID, CSM_MAP_CODESET_ID, CSM_MAP_CODESET_TYPE)
                        SELECT DISTINCT CS.CSM_MAP_ID, CC.CODESET_ID, 'SOURCE'
                        FROM CSM_CODE_VALUE CV, CSM_MAPPING_SPEC CS, CSM_CODESET CC
                        WHERE CSM_MAP_SOURCE_CODE_ID = CV.CODE_ID AND CC.CODESET_ID = CV.CODESET_ID
        INSERT INTO CSM_MAP_CODESETS
                ( CSM_MAP_ID, CSM_MAP_CODESET_ID, CSM_MAP_CODESET_TYPE)
                        SELECT DISTINCT CS.CSM_MAP_ID, CC.CODESET_ID, 'TARGET'
                        FROM CSM_CODE_VALUE CV, CSM_MAPPING_SPEC CS, CSM_CODESET CC
                        WHERE CSM_MAP_TARGET_CODE_ID = CV.CODE_ID AND CC.CODESET_ID = CV.CODESET_ID
    END
GO

IF NOT EXISTS (SELECT *
               FROM   SYSOBJECTS
               WHERE  ID = OBJECT_ID(N'CSM_MAP_SYSTEM_ENVIRONMENTS')
                      AND TYPE = 'U')
    BEGIN
        EXECUTE ('
                CREATE TABLE CSM_MAP_SYSTEM_ENVIRONMENTS (
                CSM_MAP_SYSTEM_ENVIRONMENTS_ID BIGINT NOT NULL IDENTITY (1,1),
                CSM_MAP_ID INT NOT NULL,
                CSM_MAP_SYSTEM_ID INT NULL,
                CSM_MAP_SYSTEM_NAME VARCHAR(50),
                CSM_MAP_SYS_ENV_NAME VARCHAR(50),
                CSM_MAP_SYS_ENV_TYPE VARCHAR(10) ) ')
        ALTER TABLE CSM_MAP_SYSTEM_ENVIRONMENTS ADD CONSTRAINT PK_CSM_MAP_SYS_ENVS PRIMARY KEY CLUSTERED (CSM_MAP_SYSTEM_ENVIRONMENTS_ID ASC)
        ALTER TABLE CSM_MAP_SYSTEM_ENVIRONMENTS ADD CONSTRAINT [FK_CSM_MAPPING_DETLS_CSM_MAP_ID] FOREIGN KEY ([CSM_MAP_ID]) REFERENCES [CSM_MAPPING_DETAILS] ( [CSM_MAP_ID] ) ON DELETE CASCADE
        INSERT INTO CSM_MAP_SYSTEM_ENVIRONMENTS
                ( CSM_MAP_ID, CSM_MAP_SYSTEM_ID, CSM_MAP_SYSTEM_NAME, CSM_MAP_SYS_ENV_NAME, CSM_MAP_SYS_ENV_TYPE)
                        SELECT DISTINCT CS.CSM_MAP_ID,
                                SD.SYSTEM_ID,
                                SD.SYSTEM_NAME,
                                SE.SYSTEM_ENVIRONMENT_NAME,
                                'SOURCE'
                        FROM CSM_CODE_VALUE CV, CSM_MAPPING_SPEC CS, SYS_CON_ENVIRONMENTS SE, SYSTEM_DEFINITION_DETAILS SD
                        WHERE CSM_MAP_SOURCE_CODE_ID = CODE_ID AND CV.SYSTEM_ENV_NAME = SE.SYSTEM_ENVIRONMENT_NAME
                        AND CV.SYSTEM_ID = SD.SYSTEM_ID
        INSERT INTO CSM_MAP_SYSTEM_ENVIRONMENTS
                (CSM_MAP_ID, CSM_MAP_SYSTEM_ID, CSM_MAP_SYSTEM_NAME, CSM_MAP_SYS_ENV_NAME, CSM_MAP_SYS_ENV_TYPE)
                        SELECT DISTINCT CS.CSM_MAP_ID,
                                SD.SYSTEM_ID,
                                SD.SYSTEM_NAME,
                                SE.SYSTEM_ENVIRONMENT_NAME,
                                'TARGET'
                        FROM CSM_CODE_VALUE CV, CSM_MAPPING_SPEC CS, SYS_CON_ENVIRONMENTS SE, SYSTEM_DEFINITION_DETAILS SD
                        WHERE CSM_MAP_TARGET_CODE_ID = CODE_ID  AND CV.SYSTEM_ENV_NAME = SE.SYSTEM_ENVIRONMENT_NAME
                        AND CV.SYSTEM_ID = SD.SYSTEM_ID
    END
GO

IF COL_LENGTH('SYSTEM_TABLE_COLUMNS_METADATA', 'TYPE') IS NULL
    BEGIN
        ALTER TABLE [SYSTEM_TABLE_COLUMNS_METADATA] ADD [TYPE] varchar(MAX) NULL
    END
GO

IF COL_LENGTH('SYSTEM_TABLE_COLUMNS_METADATA', 'XPATH') IS NULL
    BEGIN
        ALTER TABLE [SYSTEM_TABLE_COLUMNS_METADATA] ADD [XPATH] varchar(MAX) NULL
    END
GO

IF COL_LENGTH('MAPPING_SPECIFICATION', 'SRC_XPATH') IS NULL
    BEGIN
        ALTER TABLE MAPPING_SPECIFICATION ADD SRC_XPATH varchar(255) NULL
    END
GO
IF COL_LENGTH('MAPPING_SPECIFICATION', 'TGT_XPATH') IS NULL
    BEGIN
        ALTER TABLE MAPPING_SPECIFICATION ADD TGT_XPATH varchar(255) NULL
    END
GO
IF COL_LENGTH('MAPPING_DETAILS', 'JOB_XREF') IS NULL
    BEGIN
        ALTER TABLE MAPPING_DETAILS ADD	JOB_XREF varchar(255) NULL
    END
GO
IF EXISTS (SELECT * FROM SYSOBJECTS WHERE ID = OBJECT_ID(N'ADS_MM_VERSION') AND TYPE = 'U')
  BEGIN
        IF EXISTS(SELECT * FROM ADS_MM_VERSION WHERE [KEY]='AMM_VERSION_INSTALLED' AND VALUE = '4.5')
        BEGIN
            UPDATE ADS_MM_VERSION SET VALUE = '4.6' WHERE [KEY] = 'AMM_VERSION_INSTALLED'
        END
  END
GO

IF NOT EXISTS (SELECT *
	       FROM   SYSOBJECTS
	       WHERE  ID = OBJECT_ID(N'ADS_MM_VERSION')
		      AND TYPE = 'U')
  BEGIN
      EXECUTE ('CREATE TABLE [ADS_MM_VERSION] ( [KEY] varchar(50) NULL, [VALUE] varchar(50) NULL )')
      EXECUTE ('INSERT INTO ADS_MM_VERSION VALUES(''AMM_VERSION_INSTALLED'', ''4.5'')');
  END
GO

IF EXISTS (SELECT * FROM ADS_MM_VERSION WHERE VALUE <= '4.5')
BEGIN
   IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS WHERE CONSTRAINT_NAME='FK_CSM_MAP_DETLS_CSM_MAP_ID')
   BEGIN
   EXECUTE('ALTER TABLE CSM_MAP_CODESETS DROP CONSTRAINT FK_CSM_MAP_DETLS_CSM_MAP_ID');
   END
   IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS WHERE CONSTRAINT_NAME='FK_CSM_MAPPING_DETLS_CSM_MAP_ID')
   BEGIN
   EXECUTE('ALTER TABLE CSM_MAP_SYSTEM_ENVIRONMENTS DROP CONSTRAINT FK_CSM_MAPPING_DETLS_CSM_MAP_ID');
   END
   IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS WHERE CONSTRAINT_NAME='FK_CSM_MAPPING_DETAILS_CSM_MAP_ID')
   BEGIN
     EXECUTE('ALTER TABLE CSM_MAPPING_SPEC DROP CONSTRAINT FK_CSM_MAPPING_DETAILS_CSM_MAP_ID');
   END
   IF EXISTS (SELECT * FROM sys.foreign_keys WHERE name='FK_SPEC_CSM_MAP_ID')
   BEGIN
   ALTER TABLE CSM_MAPPING_SPEC DROP CONSTRAINT FK_SPEC_CSM_MAP_ID
   END
   IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS WHERE CONSTRAINT_NAME='PK_MAP_SEQ_ID')
   BEGIN
     EXECUTE [sp_rename] @objname  = N'PK_MAP_SEQ_ID', @newname  = N'TEMP_PK_MAP_SEQ_ID', @objtype  = 'OBJECT'
   END
EXECUTE [sp_rename]
        @objname  = N'CSM_MAPPING_SPEC',
        @newname  = N'TEMP_CSM_MAPPING_SPEC',
        @objtype  = 'OBJECT'
EXECUTE('
CREATE TABLE CSM_MAPPING_SPEC (
        [CSM_MAP_ID] bigint NOT NULL,
        [CSM_MAP_SOURCE_CODE_ID] bigint NULL,
        [CSM_MAP_TARGET_CODE_ID] bigint NULL,
        [CSM_MAP_SEQUENCE_ID] bigint IDENTITY(1, 1),
        [CSM_MAP_PUBLISH_FLAG] char(1) NULL DEFAULT ''Y'',
        [CSM_MAP_DELETE_FLAG] char(1)  NULL DEFAULT ''N'',
        [CSM_MAP_CREATEDBY] varchar(50) NULL,
        [CSM_MAP_CREATED_DATE] datetime NULL,
        [CSM_MAP_MODIFIEDBY] varchar(50) NULL,
        [CSM_MAP_MODIFIED_DATE] datetime NULL,
        CONSTRAINT [PK_MAP_SEQ_ID] PRIMARY KEY ([CSM_MAP_SEQUENCE_ID] ASC))');
END
GO

IF EXISTS (SELECT * FROM ADS_MM_VERSION WHERE VALUE <= '4.5')
BEGIN
SET IDENTITY_INSERT CSM_MAPPING_SPEC ON
EXECUTE('INSERT INTO CSM_MAPPING_SPEC (
        [CSM_MAP_ID],
        [CSM_MAP_SOURCE_CODE_ID],
        [CSM_MAP_TARGET_CODE_ID],
        [CSM_MAP_SEQUENCE_ID],
        [CSM_MAP_PUBLISH_FLAG],
        [CSM_MAP_DELETE_FLAG],
        [CSM_MAP_CREATEDBY],
        [CSM_MAP_CREATED_DATE],
        [CSM_MAP_MODIFIEDBY],
        [CSM_MAP_MODIFIED_DATE])
SELECT
        [CSM_MAP_ID],
        [CSM_MAP_SOURCE_CODE_ID],
        [CSM_MAP_TARGET_CODE_ID],
        ISNULL([CSM_MAP_SEQUENCE_ID], 0),
        [CSM_MAP_PUBLISH_FLAG],
        [CSM_MAP_DELETE_FLAG],
        [CSM_MAP_CREATEDBY],
        [CSM_MAP_CREATED_DATE],
        [CSM_MAP_MODIFIEDBY],
        [CSM_MAP_MODIFIED_DATE]
FROM TEMP_CSM_MAPPING_SPEC');
SET IDENTITY_INSERT CSM_MAPPING_SPEC OFF
EXECUTE('DROP TABLE TEMP_CSM_MAPPING_SPEC');
END
GO
IF EXISTS (SELECT * FROM ADS_MM_VERSION WHERE VALUE <= '4.5')
BEGIN
   IF EXISTS (SELECT * FROM SYSOBJECTS WHERE  ID = OBJECT_ID(N'RM_MIGRATIONOBJECT') AND TYPE = 'U')
   BEGIN
   EXECUTE('ALTER TABLE [RM_MIGRATIONOBJECT] DROP CONSTRAINT [fk_migobj_csm_map_id]');
   END
EXECUTE [sp_rename]
        @objname  = N'PK_CSM_MAP_CODESETS_ID',
        @newname  = N'TEMP_PK_CSM_MAP_CS_ID',
        @objtype  = 'OBJECT'
EXECUTE [sp_rename]
        @objname  = N'CSM_MAP_CODESETS',
        @newname  = N'TEMP_CSM_MAP_CODESETS',
        @objtype  = 'OBJECT'
EXECUTE('CREATE TABLE CSM_MAP_CODESETS (
CSM_MAP_CODESETS_ID BIGINT NOT NULL IDENTITY (1,1),
CSM_MAP_ID BIGINT NULL,
CSM_MAP_CODESET_ID BIGINT NULL,
CSM_MAP_CODESET_TYPE VARCHAR(10),
CONSTRAINT PK_CSM_MAP_CODESETS_ID PRIMARY KEY CLUSTERED (CSM_MAP_CODESETS_ID ASC))');
END
GO

IF EXISTS (SELECT * FROM ADS_MM_VERSION WHERE VALUE <= '4.5')
BEGIN
SET IDENTITY_INSERT CSM_MAP_CODESETS ON
EXECUTE('INSERT INTO CSM_MAP_CODESETS (
        CSM_MAP_CODESETS_ID,
        CSM_MAP_ID,
        CSM_MAP_CODESET_ID,
        CSM_MAP_CODESET_TYPE)
SELECT
        CSM_MAP_CODESETS_ID,
        CSM_MAP_ID,
        CSM_MAP_CODESET_ID,
        CSM_MAP_CODESET_TYPE
FROM TEMP_CSM_MAP_CODESETS');
SET IDENTITY_INSERT CSM_MAP_CODESETS OFF
EXECUTE('DROP TABLE TEMP_CSM_MAP_CODESETS');
END
GO
IF EXISTS (SELECT * FROM ADS_MM_VERSION WHERE VALUE <= '4.5')
BEGIN
EXECUTE [sp_rename]
        @objname  = N'PK_CSM_MAP_SYS_ENVS',
        @newname  = N'TEMP_PK_CSM_MAP_SYS_ENVS',
        @objtype  = 'OBJECT'
EXECUTE [sp_rename]
        @objname  = N'CSM_MAP_SYSTEM_ENVIRONMENTS',
        @newname  = N'TEMP_CSM_MAP_SYS_ENV',
        @objtype  = 'OBJECT'
EXECUTE('CREATE TABLE CSM_MAP_SYSTEM_ENVIRONMENTS (
CSM_MAP_SYSTEM_ENVIRONMENTS_ID BIGINT NOT NULL IDENTITY (1,1),
CSM_MAP_ID BIGINT NOT NULL,
CSM_MAP_SYSTEM_ID INT NULL,
CSM_MAP_SYSTEM_NAME VARCHAR(50),
CSM_MAP_SYS_ENV_NAME VARCHAR(50),
CSM_MAP_SYS_ENV_TYPE VARCHAR(10) ,
CONSTRAINT PK_CSM_MAP_SYS_ENVS PRIMARY KEY CLUSTERED (CSM_MAP_SYSTEM_ENVIRONMENTS_ID ASC))');
END
GO

IF EXISTS (SELECT * FROM ADS_MM_VERSION WHERE VALUE <= '4.5')
BEGIN
SET IDENTITY_INSERT CSM_MAP_SYSTEM_ENVIRONMENTS ON
EXECUTE('INSERT INTO CSM_MAP_SYSTEM_ENVIRONMENTS (
        CSM_MAP_SYSTEM_ENVIRONMENTS_ID,
        CSM_MAP_ID,
        CSM_MAP_SYSTEM_ID,
        CSM_MAP_SYSTEM_NAME,
        CSM_MAP_SYS_ENV_NAME,
        CSM_MAP_SYS_ENV_TYPE)
SELECT
        CSM_MAP_SYSTEM_ENVIRONMENTS_ID,
        CSM_MAP_ID,
        CSM_MAP_SYSTEM_ID,
        CSM_MAP_SYSTEM_NAME,
        CSM_MAP_SYS_ENV_NAME,
        CSM_MAP_SYS_ENV_TYPE
FROM TEMP_CSM_MAP_SYS_ENV');
SET IDENTITY_INSERT CSM_MAP_SYSTEM_ENVIRONMENTS OFF
EXECUTE('DROP TABLE TEMP_CSM_MAP_SYS_ENV');
END
GO
IF EXISTS (SELECT * FROM ADS_MM_VERSION WHERE VALUE <= '4.5')
BEGIN
   IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS WHERE CONSTRAINT_NAME='PK_DETLS_MAP_ID')
   BEGIN
     EXECUTE [sp_rename] @objname  = N'PK_DETLS_MAP_ID', @newname  = N'TEMP_PK_DETLS_MAP_ID', @objtype  = 'OBJECT'
   END
EXECUTE [sp_rename]
        @objname  = N'CSM_MAPPING_DETAILS',
        @newname  = N'TEMP_CSM_MAPPING_DETLS',
        @objtype  = 'OBJECT'
EXECUTE('CREATE TABLE CSM_MAPPING_DETAILS (
        [CSM_MAP_ID] bigint IDENTITY(1, 1),
        [CSM_MAP_NAME] varchar(50) NOT NULL,
        [CSM_MAP_DESC] varchar(255) NULL,
        [CSM_MAP_VERSION] decimal(18, 2) NULL DEFAULT ''1.00'',
        [CSM_MAP_VERSION_LABLE] varchar(20) NULL,
        [CSM_MAP_CHANGED_DESC] varchar(max) NULL,
        [CSM_MAP_STATUS] varchar(20) NULL DEFAULT ''Active'',
        [CSM_MAP_PUBLISH_FLAG] char(1) NULL DEFAULT ''Y'',
        [DATE_CREATED] datetime NULL,
        [CREATED_BY] varchar(50) NULL,
        [DATE_LAST_MODIFIED] datetime NULL,
        [MODIFIED_BY] varchar(50) NULL,
        CONSTRAINT [PK_DETLS_MAP_ID] PRIMARY KEY ([CSM_MAP_ID] ASC))');
END
GO

IF EXISTS (SELECT * FROM ADS_MM_VERSION WHERE VALUE <= '4.5')
BEGIN
SET IDENTITY_INSERT CSM_MAPPING_DETAILS ON
EXECUTE('INSERT INTO CSM_MAPPING_DETAILS (
        [CSM_MAP_ID],
        [CSM_MAP_NAME],
        [CSM_MAP_DESC],
        [CSM_MAP_VERSION],
        [CSM_MAP_VERSION_LABLE],
        [CSM_MAP_CHANGED_DESC],
        [CSM_MAP_STATUS],
        [CSM_MAP_PUBLISH_FLAG],
        [DATE_CREATED],
        [CREATED_BY],
        [DATE_LAST_MODIFIED],
        [MODIFIED_BY])
SELECT
        [CSM_MAP_ID],
        [CSM_MAP_NAME],
        [CSM_MAP_DESC],
        [CSM_MAP_VERSION],
        [CSM_MAP_VERSION_LABLE],
        [CSM_MAP_CHANGED_DESC],
        [CSM_MAP_STATUS],
        [CSM_MAP_PUBLISH_FLAG],
        [DATE_CREATED],
        [CREATED_BY],
        [DATE_LAST_MODIFIED],
        [MODIFIED_BY]
FROM TEMP_CSM_MAPPING_DETLS');
SET IDENTITY_INSERT CSM_MAPPING_DETAILS OFF
--EXECUTE('DROP TABLE TEMP_CSM_MAPPING_DETLS');
END
GO
IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'CSM_MAP_SYSTEM_ENVIRONMENTS' AND COLUMN_NAME = 'CSM_MAP_ID' AND DATA_TYPE = 'INT')
BEGIN
ALTER TABLE CSM_MAP_SYSTEM_ENVIRONMENTS ALTER COLUMN CSM_MAP_ID bigint NOT NULL
END
GO
IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'CSM_MAP_CODESETS' AND COLUMN_NAME = 'CSM_MAP_ID' AND DATA_TYPE = 'INT')
BEGIN
ALTER TABLE CSM_MAP_CODESETS ALTER COLUMN CSM_MAP_ID bigint NOT NULL
END
GO

GO
IF EXISTS (SELECT * FROM ADS_MM_VERSION WHERE VALUE <= '4.5')
BEGIN
   IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS WHERE CONSTRAINT_NAME='FK_CODESET_CODESET_ID')
   BEGIN
   EXECUTE('ALTER TABLE CSM_CODE_VALUE DROP CONSTRAINT FK_CODESET_CODESET_ID');
   END
   IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS WHERE CONSTRAINT_NAME='FK_CATEGORY_ID')
   BEGIN
   EXECUTE('ALTER TABLE CSM_CODESET DROP CONSTRAINT FK_CATEGORY_ID');
   END
EXECUTE [sp_rename]
        @objname  = N'PK_CODE_VALUE',
        @newname  = N'TEMP_PK_CODE_VALUE',
        @objtype  = 'OBJECT'
EXECUTE [sp_rename]
        @objname  = N'CSM_CODE_VALUE',
        @newname  = N'TEMP_CSM_CODE_VALUE',
        @objtype  = 'OBJECT'
EXECUTE('CREATE TABLE CSM_CODE_VALUE (
        [CODE_ID] bigint IDENTITY(1, 1),
        [CODE_NAME] varchar(255) NOT NULL,
        [CODE_STND_VALUE] varchar(30) NOT NULL,
        [CODE_DESC] varchar(max),
        [CREATED_BY] varchar(20) NULL,
        [CREATED_DATE_TIME] datetime NULL,
        [LAST_MODIFIED_BY] varchar(20),
        [LAST_MODIFIED_DATE_TIME] datetime NULL,
        [CODESET_ID] bigint NOT NULL,
        [SYSTEM_ID] int NULL DEFAULT 0,
        [SYSTEM_NAME] varchar(50) NULL,
        [SYSTEM_ENV_NAME] varchar(255) NULL,
        [ACTIVE_FLAG] char(1) NULL DEFAULT ''Y'',
        [DELETE_FLAG] char(1) NULL DEFAULT ''N'',
        CONSTRAINT [PK_CODE_VALUE] PRIMARY KEY ([CODE_ID] ASC))');
END
GO

IF EXISTS (SELECT * FROM ADS_MM_VERSION WHERE VALUE <= '4.5')
BEGIN
SET IDENTITY_INSERT CSM_CODE_VALUE ON
EXECUTE('INSERT INTO CSM_CODE_VALUE (
        [CODE_ID],
        [CODE_NAME],
        [CODE_STND_VALUE],
        [CODE_DESC],
        [CREATED_BY],
        [CREATED_DATE_TIME],
        [LAST_MODIFIED_BY],
        [LAST_MODIFIED_DATE_TIME],
        [CODESET_ID],
        [SYSTEM_ID],
        [SYSTEM_NAME],
        [SYSTEM_ENV_NAME],
        [ACTIVE_FLAG],
        [DELETE_FLAG])
SELECT
        [CODE_ID],
        [CODE_NAME],
        [CODE_STND_VALUE],
        [CODE_DESC],
        [CREATED_BY],
        [CREATED_DATE_TIME],
        [LAST_MODIFIED_BY],
        [LAST_MODIFIED_DATE_TIME],
        [CODESET_ID],
        [SYSTEM_ID],
        [SYSTEM_NAME],
        [SYSTEM_ENV_NAME],
        [ACTIVE_FLAG],
        [DELETE_FLAG]
FROM TEMP_CSM_CODE_VALUE');
SET IDENTITY_INSERT CSM_CODE_VALUE OFF
EXECUTE('DROP TABLE TEMP_CSM_CODE_VALUE');
END
GO

IF EXISTS (SELECT * FROM ADS_MM_VERSION WHERE VALUE <= '4.5')
BEGIN
   IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS WHERE CONSTRAINT_NAME='fk_migobj_codeset_id')
   BEGIN
   EXECUTE('ALTER TABLE [RM_MIGRATIONOBJECT] DROP CONSTRAINT [fk_migobj_codeset_id]');
   END
EXECUTE [sp_rename]
        @objname  = N'PK_CODESET',
        @newname  = N'TEMP_PK_CODESET',
        @objtype  = 'OBJECT'
EXECUTE [sp_rename]
        @objname  = N'CSM_CODESET',
        @newname  = N'TEMP_CSM_CODESET',
        @objtype  = 'OBJECT'
EXECUTE('CREATE TABLE CSM_CODESET (
        [CODESET_ID] bigint IDENTITY(1, 1),
        [CODESET_NAME] varchar(50) NOT NULL,
        [CODESET_DESC] varchar(max) NULL,
        [CATEGORY_ID] bigint NOT NULL,
        [CREATED_BY] varchar(20) NOT NULL,
        [CREATED_DATE_TIME] datetime NOT NULL,
        [LAST_MODIFIED_BY] varchar(20) NULL,
        [LAST_MODIFIED_DATE_TIME] datetime NULL,
        CONSTRAINT [PK_CODESET] PRIMARY KEY ([CODESET_ID] ASC))');
END
GO

IF EXISTS (SELECT * FROM ADS_MM_VERSION WHERE VALUE <= '4.5')
BEGIN
SET IDENTITY_INSERT CSM_CODESET ON
EXECUTE('INSERT INTO CSM_CODESET (
        [CODESET_ID],
        [CODESET_NAME],
        [CODESET_DESC],
        [CATEGORY_ID],
        [CREATED_BY],
        [CREATED_DATE_TIME],
        [LAST_MODIFIED_BY],
        [LAST_MODIFIED_DATE_TIME])
SELECT
        [CODESET_ID],
        [CODESET_NAME],
        [CODESET_DESC],
        [CATEGORY_ID],
        [CREATED_BY],
        [CREATED_DATE_TIME],
        [LAST_MODIFIED_BY],
        [LAST_MODIFIED_DATE_TIME]
FROM TEMP_CSM_CODESET');
SET IDENTITY_INSERT CSM_CODESET OFF
--EXECUTE('DROP TABLE TEMP_CSM_CODESET');
END
GO

-- IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS WHERE CONSTRAINT_NAME='FK_CODE_VALUE_CDSTID' AND TABLE_NAME='CSM_CODE_VALUE')
-- EXECUTE('ALTER TABLE CSM_CODE_VALUE ADD CONSTRAINT [FK_CODE_VALUE_CDSTID] FOREIGN KEY ([CODESET_ID]) REFERENCES CSM_CODESET ([CODESET_ID])  ON DELETE NO ACTION')
-- GO

IF EXISTS (SELECT * FROM ADS_MM_VERSION WHERE VALUE <= '4.5')
BEGIN
   IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS WHERE CONSTRAINT_NAME='PK_CSM_CATEGORY_ID')
   BEGIN
   EXECUTE [sp_rename] @objname  = N'PK_CSM_CATEGORY_ID', @newname  = N'TEMP_PK_CSM_CAT_ID', @objtype  = 'OBJECT'
   END
EXECUTE [sp_rename]
        @objname  = N'CSM_CATEGORY',
        @newname  = N'TEMP_CSM_CATEGORY',
        @objtype  = 'OBJECT'
EXECUTE ('CREATE TABLE CSM_CATEGORY (
        [CATEGORY_ID] bigint IDENTITY(1, 1),
        [CATEGORY_NAME] varchar(255) NOT NULL,
        [DESCRIPTION] varchar(max) NULL,
        [DATE_CREATED] datetime NOT NULL,
        [CREATED_BY] varchar(50) NOT NULL,
        [DATE_MODIFIED] datetime NULL,
        [MODIFIED_BY] varchar(50) NULL,
        [PARENT_CATEGORY_ID] bigint NOT NULL DEFAULT 0,
        CONSTRAINT [PK_CSM_CATEGORY_ID] PRIMARY KEY ([CATEGORY_ID] ASC))');
END
GO

IF EXISTS (SELECT * FROM ADS_MM_VERSION WHERE VALUE <= '4.5')
BEGIN
SET IDENTITY_INSERT CSM_CATEGORY ON
EXECUTE('INSERT INTO CSM_CATEGORY (
        [CATEGORY_ID],
        [CATEGORY_NAME],
        [DESCRIPTION],
        [DATE_CREATED],
        [CREATED_BY],
        [DATE_MODIFIED],
        [MODIFIED_BY],
        [PARENT_CATEGORY_ID])
SELECT
        [CATEGORY_ID],
        [CATEGORY_NAME],
        [DESCRIPTION],
        [DATE_CREATED],
        [CREATED_BY],
        [DATE_MODIFIED],
        [MODIFIED_BY],
        [PARENT_CATEGORY_ID]
FROM TEMP_CSM_CATEGORY');
SET IDENTITY_INSERT CSM_CATEGORY OFF
--EXECUTE('DROP TABLE TEMP_CSM_CATEGORY ');
EXECUTE('ALTER TABLE CSM_CODESET ADD CONSTRAINT [FK_CATEGORY_ID] FOREIGN KEY ([CATEGORY_ID]) REFERENCES CSM_CATEGORY ([CATEGORY_ID]) ');
EXECUTE('ALTER TABLE CSM_MAPPING_SPEC ADD CONSTRAINT [FK_SPEC_CSM_MAP_ID] FOREIGN KEY ([CSM_MAP_ID]) REFERENCES CSM_MAPPING_DETAILS ( [CSM_MAP_ID] ) ON DELETE CASCADE');
EXECUTE('ALTER TABLE CSM_MAP_CODESETS ADD CONSTRAINT [FK_DETLS_CDSETS_MAP_ID] FOREIGN KEY ([CSM_MAP_ID]) REFERENCES CSM_MAPPING_DETAILS ([CSM_MAP_ID])  ON DELETE CASCADE');
EXECUTE('ALTER TABLE CSM_MAP_CODESETS ADD CONSTRAINT [FK_CDSET_CDSET_ID] FOREIGN KEY ([CSM_MAP_CODESET_ID]) REFERENCES CSM_CODESET ([CODESET_ID])  ON DELETE CASCADE');
EXECUTE('ALTER TABLE CSM_MAP_SYSTEM_ENVIRONMENTS ADD CONSTRAINT [FK_DETLS_ENVS_MAP_ID] FOREIGN KEY ([CSM_MAP_ID]) REFERENCES CSM_MAPPING_DETAILS ([CSM_MAP_ID])  ON DELETE CASCADE');
END
GO

IF COL_LENGTH('SYS_CON_ENVIRONMENTS', 'DATA_FILE_NAME') IS NULL
    BEGIN
        ALTER TABLE SYS_CON_ENVIRONMENTS ADD DATA_FILE_NAME varchar(255) NULL
    END
GO
IF COL_LENGTH('SYS_CON_ENVIRONMENTS', 'DATA_FILE') IS NULL
    BEGIN
        ALTER TABLE SYS_CON_ENVIRONMENTS ADD DATA_FILE image NULL
    END
GO
IF COL_LENGTH('SYSTEM_TABLE_METADATA', 'USER_DEFINED1') IS NULL
    BEGIN
        ALTER TABLE SYSTEM_TABLE_METADATA ADD USER_DEFINED1 varchar(MAX) NULL
    END
GO
IF COL_LENGTH('SYSTEM_TABLE_METADATA', 'USER_DEFINED2') IS NULL
    BEGIN
        ALTER TABLE SYSTEM_TABLE_METADATA ADD USER_DEFINED2 varchar(MAX) NULL
    END
GO
IF COL_LENGTH('SYSTEM_TABLE_METADATA', 'USER_DEFINED3') IS NULL
    BEGIN
        ALTER TABLE SYSTEM_TABLE_METADATA ADD USER_DEFINED3 varchar(MAX) NULL
    END
GO
IF COL_LENGTH('SYSTEM_TABLE_METADATA', 'USER_DEFINED4') IS NULL
    BEGIN
        ALTER TABLE SYSTEM_TABLE_METADATA ADD USER_DEFINED4 varchar(MAX) NULL
    END
GO
IF COL_LENGTH('SYSTEM_TABLE_METADATA', 'USER_DEFINED5') IS NULL
    BEGIN
        ALTER TABLE SYSTEM_TABLE_METADATA ADD USER_DEFINED5 varchar(MAX) NULL
    END
GO
IF COL_LENGTH('SYSTEM_TABLE_METADATA', 'USED_IN_GAP_ANALYSIS') IS NULL
    BEGIN
        ALTER TABLE SYSTEM_TABLE_METADATA ADD USED_IN_GAP_ANALYSIS char(1) NOT NULL DEFAULT 'Y'
    END
GO

IF COL_LENGTH('SYSTEM_TABLE_COLUMNS_METADATA', 'USED_IN_GAP_ANALYSIS') IS NULL
    BEGIN
        ALTER TABLE SYSTEM_TABLE_COLUMNS_METADATA ADD USED_IN_GAP_ANALYSIS CHAR(1) NOT NULL DEFAULT 'Y'
    END
GO

IF (SELECT OBJECT_DEFINITION(DEFAULT_OBJECT_ID) AS DEFINITION FROM  SYS.COLUMNS WHERE  NAME = 'USED_IN_GAP_ANALYSIS' AND OBJECT_ID = OBJECT_ID('SYSTEM_TABLE_COLUMNS_METADATA')) IS NULL
    BEGIN
        UPDATE SYSTEM_TABLE_COLUMNS_METADATA SET USED_IN_GAP_ANALYSIS = 'Y' WHERE USED_IN_GAP_ANALYSIS IS NULL
        ALTER TABLE SYSTEM_TABLE_COLUMNS_METADATA ADD CONSTRAINT USED_IN_GAP_ANALYSIS_TEMP DEFAULT 'Y' FOR USED_IN_GAP_ANALYSIS;
END
GO

IF COL_LENGTH('USER_PREFERENCES', 'USER_ID') IS NULL
BEGIN
    ALTER TABLE USER_PREFERENCES ADD USER_ID VARCHAR(max) NOT NULL
END
ELSE
    BEGIN
        ALTER TABLE USER_PREFERENCES ALTER COLUMN USER_ID VARCHAR(max) NOT NULL
    END
GO

IF NOT EXISTS (SELECT * FROM USER_PREFERENCES
	       WHERE  USER_ID = 'DO_NOT_DELETE_OR_UPDATE_AMM_VERSION' AND COLUMN_PREFERENCES = '4.3')
    BEGIN
        INSERT INTO USER_PREFERENCES VALUES ('DO_NOT_DELETE_OR_UPDATE_AMM_VERSION','4.3')
        INSERT INTO USER_PREFERENCES (USER_ID, COLUMN_PREFERENCES) SELECT APPDEFAULTNAME, APPDEFAULTVALUE FROM APP_DEFAULTS
        DELETE FROM APP_DEFAULTS
    END
GO

IF NOT EXISTS (SELECT *
	       FROM   USER_PREFERENCES
	       WHERE  USER_ID LIKE 'SETTINGS_TABLE_USER_DEFINED1%')

	INSERT INTO USER_PREFERENCES(USER_ID, COLUMN_PREFERENCES)
	 VALUES('SETTINGS_TABLE_USER_DEFINED1_Administrator','true')
GO
IF NOT EXISTS (SELECT *
	       FROM   USER_PREFERENCES
	       WHERE  USER_ID LIKE 'SETTINGS_TABLE_USER_DEFINED2%')

	INSERT INTO USER_PREFERENCES(USER_ID, COLUMN_PREFERENCES)
	 VALUES('SETTINGS_TABLE_USER_DEFINED2_Administrator','true')
GO
IF NOT EXISTS (SELECT *
	       FROM   USER_PREFERENCES
	       WHERE  USER_ID LIKE 'SETTINGS_TABLE_USER_DEFINED3%')

	INSERT INTO USER_PREFERENCES(USER_ID, COLUMN_PREFERENCES)
	 VALUES('SETTINGS_TABLE_USER_DEFINED3_Administrator','true')
GO
IF NOT EXISTS (SELECT *
	       FROM   USER_PREFERENCES
	       WHERE  USER_ID LIKE 'SETTINGS_TABLE_USER_DEFINED4%')

	INSERT INTO USER_PREFERENCES(USER_ID, COLUMN_PREFERENCES)
	 VALUES('SETTINGS_TABLE_USER_DEFINED4_Administrator','true')
GO
IF NOT EXISTS (SELECT *
	       FROM   USER_PREFERENCES
	       WHERE  USER_ID LIKE 'SETTINGS_TABLE_USER_DEFINED5%')

	INSERT INTO USER_PREFERENCES(USER_ID, COLUMN_PREFERENCES)
	 VALUES('SETTINGS_TABLE_USER_DEFINED5_Administrator','true')
GO
IF NOT EXISTS (SELECT *
	       FROM   USER_PREFERENCES
	       WHERE  USER_ID LIKE 'SETTINGS_TABLE_USER_DEFINED6%')

	INSERT INTO USER_PREFERENCES(USER_ID, COLUMN_PREFERENCES)
	 VALUES('SETTINGS_TABLE_USER_DEFINED6_Administrator','true')
GO
IF NOT EXISTS (SELECT *
	       FROM   USER_PREFERENCES
	       WHERE  USER_ID LIKE 'SETTINGS_TABLE_USER_DEFINED7%')

	INSERT INTO USER_PREFERENCES(USER_ID, COLUMN_PREFERENCES)
	 VALUES('SETTINGS_TABLE_USER_DEFINED7_Administrator','true')
GO
IF NOT EXISTS (SELECT *
	       FROM   USER_PREFERENCES
	       WHERE  USER_ID LIKE 'SETTINGS_TABLE_USER_DEFINED8%')

	INSERT INTO USER_PREFERENCES(USER_ID, COLUMN_PREFERENCES)
	 VALUES('SETTINGS_TABLE_USER_DEFINED8_Administrator','true')
GO
IF NOT EXISTS (SELECT *
	       FROM   USER_PREFERENCES
	       WHERE  USER_ID LIKE 'SETTINGS_TABLE_USER_DEFINED9%')

	INSERT INTO USER_PREFERENCES(USER_ID, COLUMN_PREFERENCES)
	 VALUES('SETTINGS_TABLE_USER_DEFINED9_Administrator','true')
GO
IF NOT EXISTS (SELECT *
	       FROM   USER_PREFERENCES
	       WHERE  USER_ID LIKE 'SETTINGS_TABLE_USER_DEFINED10%')

	INSERT INTO USER_PREFERENCES(USER_ID, COLUMN_PREFERENCES)
	 VALUES('SETTINGS_TABLE_USER_DEFINED10_Administrator','true')
GO
IF NOT EXISTS (SELECT *
	       FROM   USER_PREFERENCES
	       WHERE  USER_ID LIKE 'SETTINGS_COLUMN_USER_DEFINED1%')

	INSERT INTO USER_PREFERENCES(USER_ID, COLUMN_PREFERENCES)
	 VALUES('SETTINGS_COLUMN_USER_DEFINED1_Administrator','true')
GO
IF NOT EXISTS (SELECT *
	       FROM   USER_PREFERENCES
	       WHERE  USER_ID LIKE 'SETTINGS_COLUMN_USER_DEFINED2%')

	INSERT INTO USER_PREFERENCES(USER_ID, COLUMN_PREFERENCES)
	 VALUES('SETTINGS_COLUMN_USER_DEFINED2_Administrator','true')
GO
IF NOT EXISTS (SELECT *
	       FROM   USER_PREFERENCES
	       WHERE  USER_ID LIKE 'SETTINGS_COLUMN_USER_DEFINED3%')

	INSERT INTO USER_PREFERENCES(USER_ID, COLUMN_PREFERENCES)
	 VALUES('SETTINGS_COLUMN_USER_DEFINED3_Administrator','true')
GO
IF NOT EXISTS (SELECT *
	       FROM   USER_PREFERENCES
	       WHERE  USER_ID LIKE 'SETTINGS_COLUMN_USER_DEFINED4%')

	INSERT INTO USER_PREFERENCES(USER_ID, COLUMN_PREFERENCES)
	 VALUES('SETTINGS_COLUMN_USER_DEFINED4_Administrator','true')
GO
IF NOT EXISTS (SELECT *
	       FROM   USER_PREFERENCES
	       WHERE  USER_ID LIKE 'SETTINGS_COLUMN_USER_DEFINED5%')

	INSERT INTO USER_PREFERENCES(USER_ID, COLUMN_PREFERENCES)
	 VALUES('SETTINGS_COLUMN_USER_DEFINED5_Administrator','true')
GO
IF NOT EXISTS (SELECT *
	       FROM   USER_PREFERENCES
	       WHERE  USER_ID LIKE 'SETTINGS_COLUMN_USER_DEFINED6%')

	INSERT INTO USER_PREFERENCES(USER_ID, COLUMN_PREFERENCES)
	 VALUES('SETTINGS_COLUMN_USER_DEFINED6_Administrator','true')
GO
IF NOT EXISTS (SELECT *
	       FROM   USER_PREFERENCES
	       WHERE  USER_ID LIKE 'SETTINGS_COLUMN_USER_DEFINED7%')

	INSERT INTO USER_PREFERENCES(USER_ID, COLUMN_PREFERENCES)
	 VALUES('SETTINGS_COLUMN_USER_DEFINED7_Administrator','true')
GO
IF NOT EXISTS (SELECT *
	       FROM   USER_PREFERENCES
	       WHERE  USER_ID LIKE 'SETTINGS_COLUMN_USER_DEFINED8%')

	INSERT INTO USER_PREFERENCES(USER_ID, COLUMN_PREFERENCES)
	 VALUES('SETTINGS_COLUMN_USER_DEFINED8_Administrator','true')
GO
IF NOT EXISTS (SELECT *
	       FROM   USER_PREFERENCES
	       WHERE  USER_ID LIKE 'SETTINGS_COLUMN_USER_DEFINED9%')

	INSERT INTO USER_PREFERENCES(USER_ID, COLUMN_PREFERENCES)
	 VALUES('SETTINGS_COLUMN_USER_DEFINED9_Administrator','true')
GO
IF NOT EXISTS (SELECT *
	       FROM   USER_PREFERENCES
	       WHERE  USER_ID LIKE 'SETTINGS_COLUMN_USER_DEFINED10%')

	INSERT INTO USER_PREFERENCES(USER_ID, COLUMN_PREFERENCES)
	 VALUES('SETTINGS_COLUMN_USER_DEFINED10_Administrator','true')
GO
GO

IF NOT EXISTS (SELECT *
	       FROM   SYSOBJECTS
	       WHERE  ID = OBJECT_ID(N'PLUGINS')
		      AND TYPE = 'U')
  BEGIN
	EXECUTE('CREATE TABLE PLUGINS(	PLUGIN_ID int IDENTITY(1,1) NOT NULL,	PLUGIN_ICON image NOT NULL,	PLUGIN_TEXT varchar(255) NOT NULL,	PLUGIN_URL varchar(max) NOT NULL,	PLUGIN_DESCRIPTION varchar(max) NULL,	PLUGIN_ACCESS varchar(10) NOT NULL,        PLUGIN_ORDER float NOT NULL,        CREATED_BY nvarchar(20)  NOT NULL,        CREATED_DATE_TIME datetime NOT NULL,        LAST_MODIFIED_BY nvarchar(20)  NULL,        LAST_MODIFIED_DATE_TIME datetime NULL)')
  END
GO

IF COL_LENGTH('MAPPING_SPECIFICATION', 'SRC_COL_DATATYPE') IS NULL
BEGIN
    ALTER TABLE MAPPING_SPECIFICATION ADD SRC_COL_DATATYPE VARCHAR(max) NOT NULL
END
GO

IF COL_LENGTH('MAPPING_SPECIFICATION', 'TGT_COL_DATATYPE') IS NULL
BEGIN
    ALTER TABLE MAPPING_SPECIFICATION ADD TGT_COL_DATATYPE VARCHAR(max) NOT NULL
END
GO

IF COL_LENGTH('MAPPING_SPECIFICATION', 'TGT_LOGICAL_COLUMN_NAME') IS NULL
BEGIN
    ALTER TABLE MAPPING_SPECIFICATION ADD TGT_LOGICAL_COLUMN_NAME VARCHAR(max) NULL
END
GO

IF COL_LENGTH('MAPPING_SPECIFICATION', 'SRC_LOGICAL_COLUMN_NAME') IS NULL
BEGIN
    ALTER TABLE MAPPING_SPECIFICATION ADD SRC_LOGICAL_COLUMN_NAME VARCHAR(max) NULL
END
GO

IF COL_LENGTH('SYSTEM_TABLE_METADATA', 'TABLE_COMMENTS') IS NULL
BEGIN
    ALTER TABLE SYSTEM_TABLE_METADATA ADD TABLE_COMMENTS VARCHAR(max) NULL
END
GO


IF COL_LENGTH('SYSTEM_TABLE_METADATA', 'TABLE_DEF_COMMENTS') IS NOT NULL
    BEGIN
        EXEC sp_rename 'SYSTEM_TABLE_METADATA.TABLE_DEF_COMMENTS', 'TABLE_DEF', 'COLUMN';
    END
GO

IF NOT EXISTS (SELECT *
	       FROM   USER_PREFERENCES
	       WHERE  USER_ID LIKE 'SETTINGS_VERSION_LABEL%')

	INSERT INTO USER_PREFERENCES (USER_ID,COLUMN_PREFERENCES)
	 VALUES('SETTINGS_VERSION_LABEL_MAPPING_MANAGER_Administrator','true')
GO

IF COL_LENGTH('MAPPING_SPECIFICATION', 'LOOKUP_COLUMN') = -1
    BEGIN
      IF COL_LENGTH('MAPPING_SPECIFICATION', 'LOOKUP_ON') IS NULL
      BEGIN
        EXEC sp_rename 'MAPPING_SPECIFICATION.LOOKUP_COLUMN', 'LOOKUP_ON', 'COLUMN';
      END
    END
GO

IF NOT EXISTS(SELECT * FROM SYS.VIEWS WHERE NAME = 'MAPPINGTESTSTATUS')
BEGIN
   EXEC ('CREATE VIEW [MAPPINGTESTSTATUS]
	AS
	  SELECT CASE
		   WHEN TEST_DISPOSITION = ''U'' THEN ''UNASSIGNED''
		   ELSE CASE
			  WHEN TEST_DISPOSITION = ''P'' THEN ''PASSED''
			  ELSE CASE
				 WHEN TEST_DISPOSITION = ''F'' THEN ''FAILED''
				 ELSE CASE
					WHEN TEST_DISPOSITION = ''N'' THEN
					''NEEDS ANALYSIS''
					ELSE ''''
				      END
			       END
			END
		 END                AS TESTSTATUS,
		 MAP_ID,
		 MAP_NAME,
		 MAP_SPEC_VERSION,
                 VERSIONLABEL,
		 TESTING_NOTES,
		 PROJECT_ID,
		 PROJECT.PROJ_NAME  AS PROJECTNAME,
		 PROJECT.PROJ_DESCR AS PROJECTDESCRIPTION,
		 STATUS             AS MAPPINGSTATUS
	  FROM   MAPPING_DETAILS
		 LEFT JOIN PROJECT
		   ON PROJECT.PROJ_ID = MAPPING_DETAILS.PROJECT_ID');
END
ELSE
BEGIN
   EXEC ('ALTER VIEW [MAPPINGTESTSTATUS]
	AS
	  SELECT CASE
		   WHEN TEST_DISPOSITION = ''U'' THEN ''UNASSIGNED''
		   ELSE CASE
			  WHEN TEST_DISPOSITION = ''P'' THEN ''PASSED''
			  ELSE CASE
				 WHEN TEST_DISPOSITION = ''F'' THEN ''FAILED''
				 ELSE CASE
					WHEN TEST_DISPOSITION = ''N'' THEN
					''NEEDS ANALYSIS''
					ELSE ''''
				      END
			       END
			END
		 END                AS TESTSTATUS,
		 MAP_ID,
		 MAP_NAME,
		 MAP_SPEC_VERSION,
                 VERSIONLABEL,
		 TESTING_NOTES,
		 PROJECT_ID,
		 PROJECT.PROJ_NAME  AS PROJECTNAME,
		 PROJECT.PROJ_DESCR AS PROJECTDESCRIPTION,
		 STATUS             AS MAPPINGSTATUS
	  FROM   MAPPING_DETAILS
		 LEFT JOIN PROJECT
		   ON PROJECT.PROJ_ID = MAPPING_DETAILS.PROJECT_ID');
END
GO
IF NOT EXISTS(SELECT * FROM SYS.VIEWS WHERE NAME = 'TESTING_STATUS_DETAILS_V')
BEGIN
EXEC ('CREATE VIEW [TESTING_STATUS_DETAILS_V] AS
select mappingteststatus.TESTSTATUS,mappingteststatus.MAP_ID,mappingteststatus.MAP_NAME,mappingteststatus.MAP_SPEC_VERSION,
mappingteststatus.VERSIONLABEL,mappingteststatus.TESTING_NOTES, mappingteststatus.PROJECT_ID,
mappingteststatus.PROJECTNAME,mappingteststatus.PROJECTDESCRIPTION,mappingteststatus.MAPPINGSTATUS,
isnull(testermappings.STATUS, '''') as testerstatus,
isnull(testermappings.USER_ID, '''') assignedtouserid,
isnull(users.user_full_name, '''') as assginedtousername
from mappingteststatus
left join testermappings on mappingteststatus.map_id = testermappings.MAP_ID
left join users on testermappings.USER_ID = users.user_id');
END
ELSE
BEGIN
EXEC ('ALTER VIEW [TESTING_STATUS_DETAILS_V] AS
select mappingteststatus.TESTSTATUS,mappingteststatus.MAP_ID,mappingteststatus.MAP_NAME,mappingteststatus.MAP_SPEC_VERSION,
mappingteststatus.VERSIONLABEL,mappingteststatus.TESTING_NOTES, mappingteststatus.PROJECT_ID,
mappingteststatus.PROJECTNAME,mappingteststatus.PROJECTDESCRIPTION,mappingteststatus.MAPPINGSTATUS,
isnull(testermappings.STATUS, '''') as testerstatus,
isnull(testermappings.USER_ID, '''') assignedtouserid,
isnull(users.user_full_name, '''') as assginedtousername
from mappingteststatus
left join testermappings on mappingteststatus.map_id = testermappings.MAP_ID
left join users on testermappings.USER_ID = users.user_id');
END
GO
IF NOT EXISTS(SELECT * FROM SYS.VIEWS WHERE NAME = 'IMPACT_ANALYSIS_DETAILS_V')
BEGIN
EXEC ('CREATE VIEW [IMPACT_ANALYSIS_DETAILS_V] AS
select MAPPING_SPECIFICATION.map_id, src_col_length, src_col_precision, tgt_col_length, tgt_col_precision,project.proj_id,
proj_name, proj_descr, mapping_Details.map_name, mapping_Details.status, mapping_Details.map_spec_version,mapping_Details.versionlabel,MAPPING_SPECIFICATION.MAP_seq_ID,
MAPPING_SPECIFICATION.SRC_table_NAME, MAPPING_SPECIFICATION.TGT_table_NAME,
MAPPING_SPECIFICATION.SRC_COLUMN_NAME, MAPPING_SPECIFICATION.TGT_COLUMN_NAME
from mapping_specification
left join mapping_details on MAPPING_SPECIFICATION.MAP_ID = MAPPING_DETAILS.MAP_ID
left join project on project.proj_id = mapping_Details.project_id
where (ISNUMERIC(src_col_length)=1 and ISNUMERIC(tgt_col_length)=1 and (convert(float,src_col_length)>convert(float,tgt_col_length)))
and len(tgt_col_length) > 0
and len(src_col_length) > 0');
END
GO

IF COL_LENGTH('MAPPING_SPECIFICATION', 'LOOKUP_COLUMN') IS NULL
    BEGIN
        ALTER TABLE MAPPING_SPECIFICATION ADD LOOKUP_COLUMN VARCHAR(max) NULL
    END
GO

IF COL_LENGTH('TRANSFORMATIONS', 'TRANSFORMATION_SCOPE') IS NULL
    BEGIN
        ALTER TABLE TRANSFORMATIONS ADD TRANSFORMATION_SCOPE VARCHAR(max) NOT NULL DEFAULT ('-1')
    END
GO

IF NOT EXISTS (SELECT *
	       FROM   SYSOBJECTS
	       WHERE  ID = OBJECT_ID(N'LANGUAGE_PREFERENCES')
		      AND TYPE = 'U')
  BEGIN
      EXECUTE ('CREATE TABLE [LANGUAGE_PREFERENCES]  (
        [LANG_PREF_ID]          int IDENTITY(1,1) NOT NULL,
	[KEY_ID]         	varchar(max) NULL,
	[KEY_DESCRIPTION]	varchar(max) NULL,
	[ENGLISH]        	varchar(max) NULL,
	[CHINESE]        	nvarchar(max) NULL,
	[FRENCH]         	nvarchar(max) NULL,
	[GERMAN]         	nvarchar(max) NULL,
	[HEBREW]         	nvarchar(max) NULL,
	[PORTUGESE]      	nvarchar(max) NULL,
	[RUSSIAN]        	nvarchar(max) NULL,
	[SPANISH]        	nvarchar(max) NULL,
	[PARENT_ID]      	int NOT NULL
	)')
  END
GO

IF COL_LENGTH('LANGUAGE_PREFERENCES', 'LANG_PREF_ID') IS NOT NULL
BEGIN
IF NOT EXISTS (SELECT * FROM sys.key_constraints WHERE name='PK_LANGUAGE_PREFERENCES')
BEGIN
EXECUTE [sp_rename]
        @objname  = N'LANGUAGE_PREFERENCES',
        @newname  = N'TEMP_LANGUAGE_PREFERENCES',
        @objtype  = 'OBJECT'
EXECUTE('CREATE TABLE [LANGUAGE_PREFERENCES]  (
  [LANG_PREF_ID]    int NOT NULL,
	[KEY_ID]         	varchar(max) NULL,
	[KEY_DESCRIPTION]	varchar(max) NULL,
	[ENGLISH]        	varchar(max) NULL,
	[CHINESE]        	nvarchar(max) NULL,
	[FRENCH]         	nvarchar(max) NULL,
	[GERMAN]         	nvarchar(max) NULL,
	[HEBREW]         	nvarchar(max) NULL,
	[PORTUGESE]      	nvarchar(max) NULL,
	[RUSSIAN]        	nvarchar(max) NULL,
	[SPANISH]        	nvarchar(max) NULL,
	[PARENT_ID]      	int NOT NULL,
	CONSTRAINT [PK_LANGUAGE_PREFERENCES] PRIMARY KEY([LANG_PREF_ID])
	)');
EXECUTE('INSERT INTO LANGUAGE_PREFERENCES (
  [LANG_PREF_ID],
	[KEY_ID],
	[KEY_DESCRIPTION],
	[ENGLISH],
	[CHINESE],
	[FRENCH],
	[GERMAN],
	[HEBREW],
	[PORTUGESE],
	[RUSSIAN],
	[SPANISH],
	[PARENT_ID])
SELECT
  [LANG_PREF_ID],
	[KEY_ID]L,
	[KEY_DESCRIPTION],
	[ENGLISH],
	[CHINESE],
	[FRENCH],
	[GERMAN],
	[HEBREW],
	[PORTUGESE],
	[RUSSIAN],
	[SPANISH],
	[PARENT_ID] FROM TEMP_LANGUAGE_PREFERENCES');
EXECUTE('DROP TABLE TEMP_LANGUAGE_PREFERENCES');
END
END
GO
IF COL_LENGTH('SYS_CON_ENVIRONMENTS', 'PWD_ENCRYPT_FLAG') IS NULL
    BEGIN
        ALTER TABLE SYS_CON_ENVIRONMENTS ADD PWD_ENCRYPT_FLAG char(1) NOT NULL DEFAULT (('N'))
    END
GO
IF NOT EXISTS (SELECT *
	       FROM   SYSOBJECTS
	       WHERE  ID = OBJECT_ID(N'MMROLE_PERMISSIONS')
		      AND TYPE = 'U')
  BEGIN
      EXECUTE ('CREATE TABLE MMROLE_PERMISSIONS  (
	[ID]           	int IDENTITY(1,1) NOT NULL,
	[MMROLE_ID]    	int NOT NULL,
	[PERMISSION_ID]	int NOT NULL,
	[ENABLED]      	tinyint NOT NULL,
	CONSTRAINT [PK_MMROLE_PERMISSIONS] PRIMARY KEY([ID]))')
  END
GO

IF NOT EXISTS (SELECT *
	       FROM   SYSOBJECTS
	       WHERE  ID = OBJECT_ID(N'RM_MIGRATIONOBJECTTYPE')
		      AND TYPE = 'U')
  BEGIN
      EXECUTE ('CREATE TABLE RM_MIGRATIONOBJECTTYPE (
  MIGRATIONOBJECTTYPEID INTEGER  NOT NULL IDENTITY(1,1),
  MIGRATIONOBJECTTYPENAME VARCHAR(15) NULL,
  MIGRATIONOBJECTTYPEDESC VARCHAR(150) NULL,
  CONSTRAINT PK_RM_MIG_OBJ_TYPE_ID PRIMARY KEY(MIGRATIONOBJECTTYPEID)
)')
END
GO


IF NOT EXISTS (SELECT *
	       FROM   SYSOBJECTS
	       WHERE  ID = OBJECT_ID(N'RM_ENVIRONMENT')
		      AND TYPE = 'U')
  BEGIN
      EXECUTE ('CREATE TABLE RM_ENVIRONMENT (
  ENVIRONMENTID INTEGER  NOT NULL IDENTITY(1,1),
  ENVIRONMENTNAME VARCHAR(10) NULL,
  ENVIRONMENTDESC VARCHAR(50) NULL,
  CONSTRAINT PK_RM_ENV_ID PRIMARY KEY(ENVIRONMENTID)
)')
END
GO

IF NOT EXISTS (SELECT *
	       FROM   SYSOBJECTS
	       WHERE  ID = OBJECT_ID(N'RM_HISTORYTYPE')
		      AND TYPE = 'U')
  BEGIN
      EXECUTE ('CREATE TABLE RM_HISTORYTYPE (
  HISTORYTYPEID INTEGER  NOT NULL IDENTITY(1,1),
  HISTORYTYPENAME VARCHAR(25) NULL,
  HISTORYTYPEDESC VARCHAR(50) NULL,
  CONSTRAINT PK_RM_HIST_TYPE_ID PRIMARY KEY(HISTORYTYPEID)
)')
END
GO

IF NOT EXISTS (SELECT *
	       FROM   SYSOBJECTS
	       WHERE  ID = OBJECT_ID(N'RM_RESOURCE')
		      AND TYPE = 'U')
  BEGIN
      EXECUTE ('CREATE TABLE RM_RESOURCE (
  RESOURCEID INTEGER  NOT NULL IDENTITY(1,1),
  RESOURCENAME VARCHAR(100) NULL,
  RESOURCEDESC VARCHAR(150) NULL,
  RESOURCECELLPHONE VARCHAR(15) NULL,
  RESOURCEHOMEPHONE VARCHAR(15) NULL,
  RESOURCEEMAIL VARCHAR(50) NULL,
  CONSTRAINT PK_RM_RESOURCE_ID PRIMARY KEY(RESOURCEID)
)')
END
GO


IF NOT EXISTS (SELECT *
	       FROM   SYSOBJECTS
	       WHERE  ID = OBJECT_ID(N'RM_HISTORY')
		      AND TYPE = 'U')
  BEGIN
      EXECUTE ('CREATE TABLE RM_HISTORY (
  HISTORYID INTEGER  NOT NULL IDENTITY(1,1),
  HISTORYTYPEID INTEGER  NOT NULL,
  HISTORYDESC VARCHAR(5000) NULL,
  OBJECTID INTEGER  NOT NULL,
  OBJECTTYPEID INTEGER NOT NULL,
  HISTORYDATESTAMP DATETIME NOT NULL,
  USER_ID VARCHAR(20) NOT NULL,
  CONSTRAINT PK_RM_HIST_ID PRIMARY KEY(HISTORYID),
  CONSTRAINT FK_RM_HIST_TYPE_ID FOREIGN KEY(HISTORYTYPEID)
    REFERENCES RM_HISTORYTYPE(HISTORYTYPEID)
      ON DELETE NO ACTION
      ON UPDATE NO ACTION,
  CONSTRAINT FK_RM_USER_ID FOREIGN KEY(USER_ID)
    REFERENCES USERS(USER_ID)
      ON DELETE CASCADE
      ON UPDATE NO ACTION
)')
END
GO

IF NOT EXISTS (SELECT *
	       FROM   SYSOBJECTS
	       WHERE  ID = OBJECT_ID(N'RM_MIGRATIONDOCUMENT')
		      AND TYPE = 'U')
  BEGIN
      EXECUTE ('CREATE TABLE RM_MIGRATIONDOCUMENT (
  MIGRATIONDOCUMENTID INTEGER NOT NULL IDENTITY(1,1),
  MIGRATIONDOCUMENTNAME VARCHAR(50) NULL,
  MIGRATIONDOCUMENTDESC VARCHAR(MAX) NULL,
  MIGRATIONDOCUMENTCONTENT IMAGE NULL,
  MIGRATIONDOCUMENTFILENAME VARCHAR(MAX),
  CONSTRAINT PK_RM_MIG_DOC_ID PRIMARY KEY(MIGRATIONDOCUMENTID)
)')
END
GO


IF NOT EXISTS (SELECT *
	       FROM   SYSOBJECTS
	       WHERE  ID = OBJECT_ID(N'RM_MIGRATIONSTATUS')
		      AND TYPE = 'U')
  BEGIN
      EXECUTE ('CREATE TABLE RM_MIGRATIONSTATUS
(
   MIGRATIONSTATUSID INTEGER  NOT NULL IDENTITY(1,1),
   MIGRATIONSTATUSNAME VARCHAR(50) NOT NULL,
   MIGRATIONSTATUSDESC varchar(100),
   MIGRATIONSTATUSCOLOR varchar(7),
   MIGRATIONSTATUSFONTCOLOR varchar(7),
   MIGRATIONSTATUSBORDERCOLOR varchar(7) NULL,
   MIGRATIONSTATUSBORDERTYPE varchar(7) NULL,
   ROSTATUSFONTCOLOR varchar(7) NULL,
   ROSTATUSBACKGROUNDCOLOR varchar(7) NULL,
   ROSTATUSBORDERCOLOR varchar(7) NULL,
   ROSTATUSBORDERTYPE varchar(7) NULL,
   CONSTRAINT PK_RM_MIG_STAT PRIMARY KEY(MIGRATIONSTATUSID)
)')
END
GO

IF NOT EXISTS (SELECT *
	       FROM   SYSOBJECTS
	       WHERE  ID = OBJECT_ID(N'RM_PROJECT')
		      AND TYPE = 'U')
  BEGIN
      EXECUTE ('CREATE TABLE RM_PROJECT (
  PROJECTID INTEGER  NOT NULL IDENTITY(1,1),
  RESOURCEID INTEGER  NOT NULL,
  PROJECTNAME VARCHAR(100) NULL,
  PROJECTDESC VARCHAR(150) NULL,
  CONSTRAINT PK_RM_PROJ_ID PRIMARY KEY(PROJECTID),
  CONSTRAINT FK_RM_RES_ID FOREIGN KEY(RESOURCEID)
    REFERENCES RM_RESOURCE(RESOURCEID)
      ON DELETE NO ACTION
      ON UPDATE NO ACTION
)')
END
GO

IF NOT EXISTS (SELECT *
	       FROM   SYSOBJECTS
	       WHERE  ID = OBJECT_ID(N'RM_RELEASE')
		      AND TYPE = 'U')
  BEGIN
      EXECUTE ('CREATE TABLE RM_RELEASE (
  RELEASEID INTEGER  NOT NULL IDENTITY(1,1),
  PROJECTID INTEGER  NOT NULL,
  RELEASENAME VARCHAR(100) NULL,
  RELEASELIVEDATE DATETIME NULL,
  RELEASEMIGRATIONDATE DATETIME NULL,
  RELEASEDESC VARCHAR(150) NULL,
  RELEASESTATUSID INTEGER DEFAULT 1 NOT NULL,
  CONSTRAINT PK_RM_REL_ID PRIMARY KEY(RELEASEID),
  CONSTRAINT FK_RM_PROJ_ID FOREIGN KEY(PROJECTID)
    REFERENCES RM_PROJECT(PROJECTID)
      ON DELETE CASCADE
      ON UPDATE NO ACTION,
  CONSTRAINT FK_RM_REL_STAT_ID FOREIGN KEY(RELEASESTATUSID)
    REFERENCES RM_MIGRATIONSTATUS(MIGRATIONSTATUSID)
      ON DELETE NO ACTION
      ON UPDATE NO ACTION
)')
END
GO

IF NOT EXISTS (SELECT *
	       FROM   SYSOBJECTS
	       WHERE  ID = OBJECT_ID(N'RM_MIGRATIONOBJECT')
		      AND TYPE = 'U')
  BEGIN
      EXECUTE ('CREATE TABLE RM_MIGRATIONOBJECT (
  MIGRATIONOBJECTID INTEGER  NOT NULL IDENTITY(1,1),
  RELEASEID INTEGER  NOT NULL,
  MIGRATIONSTATUSID INTEGER DEFAULT 1 NOT NULL,
  MIGRATIONFROMENV INTEGER  NOT NULL,
  MIGRATIONTOENV INTEGER  NOT NULL,
  MIGRATIONOBJECTTYPEID INTEGER  NOT NULL,
  MIGRATIONOBJECTNAME VARCHAR(25) NULL,
  MIGRATIONOBJECTLIVEDATE DATETIME NULL,
  MIGRATIONOBJECTMIGRATIONDATE DATETIME NULL,
  MIGRATIONOBJECTLIVETIME VARCHAR(15) NULL,
  MIGRATIONOBJECTMIGRATIONTIME VARCHAR(15) NULL,
  MIGRATIONOBJECTFILE IMAGE NULL,
  MIGRATIONOBJECTFROMDSN VARCHAR(50),
  MIGRATIONOBJECTFROMIP VARCHAR(20),
  MIGRATIONOBJECTTODSN VARCHAR(50),
  MIGRATIONOBJECTTOIP VARCHAR(20),
  MIGRATIONOBJECTDESC VARCHAR(MAX),
  MIGRATIONOBJECTFILENAME VARCHAR(MAX)
  CONSTRAINT PK_RM_MIG_OBJ_ID PRIMARY KEY(MIGRATIONOBJECTID),
  CONSTRAINT FK_RM_MIG_OBJ_TYPE_ID FOREIGN KEY(MIGRATIONOBJECTTYPEID)
    REFERENCES RM_MIGRATIONOBJECTTYPE(MIGRATIONOBJECTTYPEID)
      ON DELETE NO ACTION
      ON UPDATE NO ACTION,
  CONSTRAINT FK_RM_MIG_TO_ENV FOREIGN KEY(MIGRATIONTOENV)
    REFERENCES RM_ENVIRONMENT(ENVIRONMENTID)
      ON DELETE NO ACTION
      ON UPDATE NO ACTION,
  CONSTRAINT FK_RM_MIG_FROM_ENV FOREIGN KEY(MIGRATIONFROMENV)
    REFERENCES RM_ENVIRONMENT(ENVIRONMENTID)
      ON DELETE NO ACTION
      ON UPDATE NO ACTION,
  CONSTRAINT FK_RM_REL_ID FOREIGN KEY(RELEASEID)
    REFERENCES RM_RELEASE(RELEASEID)
      ON DELETE CASCADE
      ON UPDATE NO ACTION,
  CONSTRAINT FK_RM_MIG_STAT_ID FOREIGN KEY(MIGRATIONSTATUSID)
    REFERENCES RM_MIGRATIONSTATUS(MIGRATIONSTATUSID)
      ON DELETE NO ACTION
      ON UPDATE NO ACTION
)')
END
GO

IF NOT EXISTS (SELECT *
	       FROM   SYSOBJECTS
	       WHERE  ID = OBJECT_ID(N'RM_CMMOBJECTTYPE')
		      AND TYPE = 'U')
  BEGIN
      EXECUTE ('CREATE TABLE RM_CMMOBJECTTYPE (
  CMMOBJECTTYPEID INTEGER  NOT NULL IDENTITY(1,1),
  CMMOBJECTTYPENAME VARCHAR(25) NULL,
  CMMOBJECTTYPEDESC VARCHAR(150) NULL,
  CONSTRAINT PK_RM_CMM_OBJ_ID PRIMARY KEY(CMMOBJECTTYPEID)
)')
END
GO

IF NOT EXISTS (SELECT *
	       FROM   SYSOBJECTS
	       WHERE  ID = OBJECT_ID(N'RM_SYSTEMSETTINGS')
		      AND TYPE = 'U')
  BEGIN
      EXECUTE ('CREATE TABLE RM_SYSTEMSETTINGS
(
   SETTINGNAME varchar(100) NOT NULL,
   SETTINGVALUE varchar(2500),
   SETTINGTYPE varchar(1) NOT NULL,
   CONSTRAINT PK_RM_SYS_SET_NAME PRIMARY KEY ("SETTINGNAME")
)')
 END
GO
IF (SELECT COUNT(*) FROM RM_ENVIRONMENT) < 1
BEGIN
	INSERT INTO RM_ENVIRONMENT (ENVIRONMENTNAME, ENVIRONMENTDESC)
	SELECT 'DEV', ''
		UNION ALL
	SELECT 'TEST', ''
		UNION ALL
	SELECT 'PROD', ''
END
GO
IF (SELECT COUNT(*) FROM RM_MIGRATIONOBJECTTYPE) < 1
BEGIN
	INSERT INTO RM_MIGRATIONOBJECTTYPE (MIGRATIONOBJECTTYPENAME, MIGRATIONOBJECTTYPEDESC)
    SELECT 'DDL Script', ''
		UNION ALL
	SELECT 'DML Script', ''
		UNION ALL
	SELECT 'SQL Script', ''
END
GO
IF (SELECT COUNT(*) FROM RM_MIGRATIONSTATUS) < 1
BEGIN
   INSERT INTO RM_MIGRATIONSTATUS (MIGRATIONSTATUSNAME, MIGRATIONSTATUSDESC, MIGRATIONSTATUSCOLOR, MIGRATIONSTATUSFONTCOLOR, MIGRATIONSTATUSBORDERCOLOR, MIGRATIONSTATUSBORDERTYPE, ROSTATUSFONTCOLOR,  ROSTATUSBACKGROUNDCOLOR, ROSTATUSBORDERCOLOR, ROSTATUSBORDERTYPE)
	SELECT 'PENDING APPROVAL', '','#FFFFFF','#0F0F0F','#8F8F8F','solid','#0F0F0F','#FFFFFF','#8F8F8F','solid'
		UNION ALL
	SELECT 'PENDING CONFIRMATION', '','#FFFFFF','#0F0F0F','#8F8F8F','solid','#0F0F0F','#FFFFFF','#8F8F8F','solid'
		UNION ALL
	SELECT 'VALIDATED', '','#FFFFFF','#0F0F0F','#8F8F8F','solid','#0F0F0F','#FFFFFF','#8F8F8F','solid'
		UNION ALL
	SELECT 'CONFIRMED', '','#FFFFFF','#0F0F0F','#8F8F8F','solid','#0F0F0F','#FFFFFF','#8F8F8F','solid'
END
GO
IF (SELECT COUNT(*) FROM RM_HISTORYTYPE) < 1
BEGIN
   INSERT INTO RM_HISTORYTYPE (HISTORYTYPENAME, HISTORYTYPEDESC)
	SELECT 'ADD', 'Add Record'
		UNION ALL
	SELECT 'EDIT', 'Edit Record'
		UNION ALL
	SELECT 'VIEW', 'View Record Details'
		UNION ALL
	SELECT 'DELETE', 'Delete Record'
		UNION ALL
	SELECT 'LIST', 'List Records'
                UNION ALL
        SELECT 'STATUSCHANGE', 'Changed Status'
END
GO
IF (SELECT COUNT(*) FROM RM_CMMOBJECTTYPE) < 1
BEGIN
   INSERT INTO RM_CMMOBJECTTYPE (CMMOBJECTTYPENAME, CMMOBJECTTYPEDESC)
	SELECT 'FORM', ''
		UNION ALL
	SELECT 'PROJECT', ''
		UNION ALL
	SELECT 'RELEASE', ''
		UNION ALL
	SELECT 'MIGRATIONOBJECT', ''
		UNION ALL
	SELECT 'USER', ''
		UNION ALL
	SELECT 'SYSTEMTABLE', ''
		UNION ALL
	SELECT 'ENVIRONMENT', ''
		UNION ALL
	SELECT 'MIGRATIONOBJECTTYPE', ''
		UNION ALL
	SELECT 'USERTYPE', ''
		UNION ALL
	SELECT 'HISTORYTYPE', ''
		UNION ALL
	SELECT 'MIGRATIONSTATUS', ''
END
GO
IF (SELECT COUNT(*) FROM RM_RESOURCE) < 1
BEGIN
   INSERT INTO RM_RESOURCE (RESOURCENAME)
	SELECT 'Admin'
END
GO
IF (SELECT COUNT(*) FROM RM_SYSTEMSETTINGS) < 1
BEGIN
   INSERT INTO RM_SYSTEMSETTINGS (SETTINGNAME, SETTINGVALUE, SETTINGTYPE)
	SELECT 'ADMIN_EMAIL_ID', 'cmmadmin@yourhost.com', 'S'
		UNION ALL
	SELECT 'ADMIN_EMAIL_USER_NAME', 'cmmadmin', 'S'
		UNION ALL
	SELECT 'ADMIN_EMAIL_PASSWORD', 'cmmadmin', 'S'
		UNION ALL
	SELECT 'EMAIL_MIGRATION_OBJECT_SUBJECT', 'CMM Migration Object', 'S'
		UNION ALL
	SELECT 'EMAIL_RESET_PASSWORD_SUBJECT', 'CMM Admin - Your password is reset', 'S'
		UNION ALL
	SELECT 'EMAIL_RESET_PASSWORD_MESSAGE', 'User Name: <%USERNAME%> \n Password: <%USERPASSWORD%> \n This is an automated message - Please dont reply to this mail', 'S'
		UNION ALL
	SELECT 'EMAIL_USER_CREATE_SUBJECT', 'CMM Admin - Your User Name Created', 'S'
		UNION ALL
	SELECT 'EMAIL_USER_CREATE_MESSAGE', 'User Name: <%USERNAME%> \n Password: <%USERPASSWORD%> \n This is an automated message - Please dont reply to this mail', 'S'
		UNION ALL
	SELECT 'EMAIL_USE_SSL', 'False', 'B'
		UNION ALL
	SELECT 'EMAIL_USE_TSL', 'False', 'B'
		UNION ALL
	SELECT 'EMAIL_HOST_NAME', 'smtp.yourhost.com', 'S'
		UNION ALL
	SELECT 'EMAIL_SMTP_PORT', '25', 'I'
END
GO
IF COL_LENGTH('MAPPING_DETAILS', 'UPDATE_SRC_METADATA') IS NULL
BEGIN
   ALTER TABLE [MAPPING_DETAILS] ADD [UPDATE_SRC_METADATA] CHAR(1) DEFAULT 'N' NOT NULL
END
GO
IF COL_LENGTH('MAPPING_DETAILS', 'UPDATE_TGT_METADATA') IS NULL
BEGIN
   ALTER TABLE [MAPPING_DETAILS] ADD [UPDATE_TGT_METADATA] CHAR(1) DEFAULT 'N' NOT NULL
END
GO
IF COL_LENGTH('MAPPING_DETAILS', 'USER_DEFINED1') IS NULL
    BEGIN
        ALTER TABLE MAPPING_DETAILS ADD USER_DEFINED1 varchar(max) NULL
    END
GO
IF COL_LENGTH('MAPPING_DETAILS', 'USER_DEFINED2') IS NULL
    BEGIN
        ALTER TABLE MAPPING_DETAILS ADD USER_DEFINED2 varchar(max) NULL
    END
GO
IF COL_LENGTH('MAPPING_DETAILS', 'USER_DEFINED3') IS NULL
    BEGIN
        ALTER TABLE MAPPING_DETAILS ADD USER_DEFINED3 varchar(max) NULL
    END
GO
IF COL_LENGTH('MAPPING_DETAILS', 'USER_DEFINED4') IS NULL
    BEGIN
        ALTER TABLE MAPPING_DETAILS ADD USER_DEFINED4 varchar(max) NULL
    END
GO
IF COL_LENGTH('MAPPING_DETAILS', 'USER_DEFINED5') IS NULL
    BEGIN
        ALTER TABLE MAPPING_DETAILS ADD USER_DEFINED5 varchar(max) NULL
    END
GO
IF COL_LENGTH('MAPPING_SPECIFICATION', 'TGT_LOGICAL_COLUMN_NAME') IS NOT NULL
    BEGIN
        ALTER TABLE MAPPING_SPECIFICATION ALTER COLUMN TGT_LOGICAL_COLUMN_NAME varchar(max) NULL
    END
GO
IF COL_LENGTH('MAPPING_SPECIFICATION', 'SRC_LOGICAL_COLUMN_NAME') IS NOT NULL
    BEGIN
        ALTER TABLE MAPPING_SPECIFICATION ALTER COLUMN SRC_LOGICAL_COLUMN_NAME varchar(max) NULL
    END
GO
IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS WHERE CONSTRAINT_NAME='R_5' AND TABLE_NAME='USER_ASSIGNED_ROLES')BEGIN
ALTER TABLE USER_ASSIGNED_ROLES DROP CONSTRAINT [R_5]
END
GO
IF EXISTS (SELECT * FROM sys.key_constraints WHERE name='XPKSECURITY_ROLES')
BEGIN
EXECUTE [sp_rename]
	@objname  = N'XPKSECURITY_ROLES',
	@newname  = N'TEMP_XPKSECURITY_ROLES',
	@objtype  = 'OBJECT'

EXECUTE [sp_rename]
	@objname  = N'SECURITY_ROLES',
	@newname  = N'TEMP_SECURITY_ROLES',
	@objtype  = 'OBJECT'
END
GO

IF NOT EXISTS (SELECT *
	       FROM   SYSOBJECTS
	       WHERE  ID = OBJECT_ID(N'SECURITY_ROLES')
		      AND TYPE = 'U')
  BEGIN
    CREATE TABLE SECURITY_ROLES(ROLE_NAME VARCHAR(20) NOT NULL,      ROLE_DESCR              VARCHAR(MAX) NULL,      ROLE_ID INT IDENTITY(1,1) NOT NULL,      CREATED_BY              VARCHAR(20) NOT NULL,      CREATED_DATETIME        DATETIME NOT NULL,      LAST_MODIFIED_DATE_TIME DATETIME NULL,      LAST_MODIFIED_BY        VARCHAR(20) NULL   );
  END
GO
IF NOT EXISTS (SELECT *
	       FROM   SYSOBJECTS
	       WHERE  ID = OBJECT_ID(N'PK_SECURITY_ROLES_ROLE_ID')
		      AND XTYPE = 'PK')
  BEGIN
    ALTER TABLE SECURITY_ROLES ADD CONSTRAINT PK_SECURITY_ROLES_ROLE_ID PRIMARY KEY CLUSTERED ( ROLE_ID ASC);
  END
GO
IF((SELECT COUNT(*) FROM sys.identity_columns where name = 'ROLE_ID') > 0)
    BEGIN
        SET IDENTITY_INSERT SECURITY_ROLES ON
    END
GO
IF EXISTS(SELECT *
	       FROM   SYSOBJECTS
	       WHERE  ID = OBJECT_ID(N'TEMP_SECURITY_ROLES')
		      AND TYPE = 'U')
EXEC('INSERT INTO SECURITY_ROLES(ROLE_ID, ROLE_NAME,ROLE_DESCR, CREATED_BY, CREATED_DATETIME, LAST_MODIFIED_BY, LAST_MODIFIED_DATE_TIME)
SELECT ROLE_ID, ROLE_NAME,ROLE_DESCR, CREATED_BY, CREATED_DATETIME, LAST_MODIFIED_BY, LAST_MODIFIED_DATE_TIME FROM TEMP_SECURITY_ROLES WITH (HOLDLOCK TABLOCKX)');
GO
IF((SELECT COUNT(*) FROM sys.identity_columns where name = 'ROLE_ID') > 0)
    BEGIN
        SET IDENTITY_INSERT SECURITY_ROLES OFF
    END
GO
IF EXISTS(SELECT *
	       FROM   SYSOBJECTS
	       WHERE  ID = OBJECT_ID(N'TEMP_SECURITY_ROLES')
		      AND TYPE = 'U')
EXEC('DROP TABLE TEMP_SECURITY_ROLES');
GO
IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS WHERE CONSTRAINT_NAME='R_5' AND TABLE_NAME='USER_ASSIGNED_ROLES')
EXECUTE('ALTER TABLE USER_ASSIGNED_ROLES ADD CONSTRAINT R_5 FOREIGN KEY (ROLE_ID) REFERENCES SECURITY_ROLES (ROLE_ID)')
GO
--CHECK IF FUNCTION ALREADY EXISTS OR NOT IN SELECTED DATABASE, IF EXISTS DROP AND RECREATE THE TABLE VALUED FUNCTION
IF EXISTS (SELECT * FROM SYS.OBJECTS WHERE OBJECT_ID = OBJECT_ID(N'[SPLIT]') AND TYPE IN (N'FN', N'IF', N'TF', N'FS', N'FT'))
BEGIN
    DROP FUNCTION [SPLIT]
END
GO

CREATE FUNCTION SPLIT
   (  @Delimiter varchar(5),
      @List      varchar(max)
   )
   RETURNS @TableOfValues table
      (  RowID   smallint IDENTITY(1,1),
         [Value] varchar(max)
      )
AS
   BEGIN
      DECLARE @LenString int
      WHILE len( @List ) > 0
         BEGIN
            SELECT @LenString =
               (CASE charindex( @Delimiter, @List )
                   WHEN 0 THEN len( @List )
                   ELSE ( charindex( @Delimiter, @List ) -1 )
                END
               )

            INSERT INTO @TableOfValues
               SELECT substring( @List, 1, @LenString )

            SELECT @List =
               (CASE ( len( @List ) - @LenString )
                   WHEN 0 THEN ''
                   ELSE right( @List, len( @List ) - @LenString - 1 )
                END
               )
         END
      RETURN
   END
   GO
-- SQLSERVER DDL  - TO DROP APP_DEFAULTS AND CREATE NEW APP_PREFERENCE TABLE

IF EXISTS (SELECT *
	       FROM   SYSOBJECTS
	       WHERE  ID = OBJECT_ID(N'APP_DEFAULTS')
		      AND TYPE = 'U')
  BEGIN
      EXECUTE ('DROP TABLE APP_DEFAULTS')
  END
GO

IF NOT EXISTS (SELECT *
	       FROM   SYSOBJECTS
	       WHERE  ID = OBJECT_ID(N'APP_PREFERENCES')
		      AND TYPE = 'U')
  BEGIN
      EXECUTE ('
CREATE TABLE APP_PREFERENCES(
	PREFERENCE_NAME varchar(500) NOT NULL,
	PREFERENCE_VALUE varchar(max) NULL,
 CONSTRAINT [PK_PREFERENCE_NAME] PRIMARY KEY
(PREFERENCE_NAME))')
  END
GO
IF (SELECT COUNT(*) FROM APP_PREFERENCES) < 1
BEGIN
INSERT INTO APP_PREFERENCES(PREFERENCE_NAME,PREFERENCE_VALUE)
 SELECT 'FROM_EMAIL','MM-Admin@analytixds.com'
 UNION ALL
 SELECT 'FROM_EMAIL_PWD','Zvys2PHjZFI='
 UNION ALL
 SELECT 'ADMIN_EMAIL_USER_NAME','MM-Admin@analytixds.com'
 UNION ALL
 SELECT 'HOST','mail.analytixds.com'
 UNION ALL
 SELECT 'EMAIL_MIGRATION_OBJECT_SUBJECT','CMM Migration Object'
 UNION ALL
 SELECT 'EMAIL_RESET_PASSWORD_MESSAGE','User Name: <%USERNAME%>\n Password: <%USERPASSWORD%>\n This is an automated message - Please dont reply to this mail'
 UNION ALL
 SELECT 'EMAIL_RESET_PASSWORD_SUBJECT','CMM Admin - Your password is reset'
 UNION ALL
 SELECT 'HOST_PORT','587'
 UNION ALL
 SELECT 'EMAIL_USE_SSL','false'
 UNION ALL
 SELECT 'EMAIL_USE_TSL','false'
 UNION ALL
 SELECT 'USER_CREATION_MESSAGE','Hello <B>@userFullName@</B>,<BR><BR>User <B>@userid@</B> has been successfully&nbsp;added to mapping manager.This user has been granted with role(s) <B>@roles@.</B><BR><BR>The default role for this user is <B>@defaultrole@.</B><BR><BR><I>Note: This is an auto generated email notification and this mailbox is not monitored.<BR>Please do not reply to this email.</I><BR><BR>Regards,<BR><B>Mapping Manager System Administrator</B>'
 UNION ALL
 SELECT 'USER_CREATION_SUBJECT','Mapping Manager User Successfully Added - DO NOT REPLY'
 UNION ALL
 SELECT 'ASSIGNMENT_SUBJECT','Mapping Manager Assignment Status - DO NOT REPLY'
 UNION ALL
 SELECT 'ASSIGNMENT_MESSAGE','Hello <B>@userFullName@</B>,<BR><BR>This is a system generated notice to inform you of a Mapping Status Change or Assignment.<BR><BR><B><U>Mapping Details:</U></B><BR><B>Project Name:</B> @projectName@<BR><B>Mapping Name:</B> @mapName@<BR><B>Mapping Status:</B> @status@<BR><B>Your Designated Role:</B> @role@<BR><BR><B><U>Assignment Changes:</U></B></B><BR>@assignmentChanges@<BR><B><U>@CUSTOMNOTES@</U></B><BR>@customNotes@<BR><BR><BR><I><B>Note:</B> This mailbox is not monitored. Please do not reply to this email.</I>'
 UNION ALL
 SELECT 'FORGOT_PASSWORD_SUBJECT','Mapping Manager Password Help - DO NOT REPLY'
 UNION ALL
 SELECT 'CCLIST_MESSAGE','<TR><TD>@sno@</TD><TD>@userFullName@</TD><TD>@status@</TD><TD>@role@</TD></TR>'
 UNION ALL
 SELECT 'CC_MESSAGE',  '<FONT size=2 face=Helvetica>Hello, <BR><BR>This is a system generated notice to inform you of a Mapping Status Change or Assignment.<BR><BR><B><U>Mapping Details:</U></B><BR><B>Project Name:</B>@projectName@<BR><B>Mapping Name:</B> @mapName@<BR><BR><B><U>Assignment Status Details:</U></B><BR><BR>
			<TABLE style=""BORDER-BOTTOM: #600 1px solid; BORDER-LEFT: #600 1px solid; BORDER-SPACING: 2px; BORDER-COLLAPSE: collapse; FONT-FAMILY: Helveta; FONT-SIZE: 12px; BORDER-TOP: #600 0px solid; BORDER-RIGHT: #600 0px solid"" border=1 cellPadding=5>
			<TBODY>
			<TR style=""TEXT-ALIGN: center"" vAlign=middle>
			<TD><B>#</B></TD>
			<TD><B>User Name</B></TD>
			<TD><B>Mapping Status</B></TD>
			<TD><B>Designated Role</B></TD></TR></TBODY></TABLE></FONT>'                        
                        
    END
GO
IF COL_LENGTH('TRANSFORMATIONS_HISTORY', 'OLD_TRANSF_NAME') IS NULL
    BEGIN
        ALTER TABLE TRANSFORMATIONS_HISTORY ADD OLD_TRANSF_NAME varchar(50) NULL
    END
GO
IF COL_LENGTH('TRANSFORMATIONS_HISTORY', 'OLD_TRANSF_NAME') IS NOT NULL
    BEGIN
        UPDATE TRANSFORMATIONS_HISTORY SET OLD_TRANSF_NAME = null WHERE CREATED_DATETIME = LAST_MODIFIED_DATE_TIME
        UPDATE TRANSFORMATIONS_HISTORY SET OLD_TRANSF_NAME = TRANSF_NAME WHERE CREATED_DATETIME != LAST_MODIFIED_DATE_TIME
    END
GO

IF COL_LENGTH('USERS', 'USER_LANGUAGE') IS NULL
    BEGIN
        ALTER TABLE USERS ADD USER_LANGUAGE VARCHAR(100) NOT NULL DEFAULT 'English_en_US'
    END
GO
IF (SELECT OBJECT_DEFINITION(DEFAULT_OBJECT_ID) AS DEFINITION FROM  SYS.COLUMNS WHERE NAME = 'USER_LANGUAGE' AND OBJECT_ID = OBJECT_ID('USERS')) IS NULL
    BEGIN
        UPDATE USERS SET USER_LANGUAGE = 'English_en_US' WHERE USER_LANGUAGE IS NULL
END
GO
IF COL_LENGTH('SUBJECT_DETAILS', 'SUBJECT_DESCRIPTION') IS NOT NULL
    BEGIN
        ALTER TABLE SUBJECT_DETAILS ALTER COLUMN SUBJECT_DESCRIPTION VARCHAR(MAX)
    END
GO
IF NOT EXISTS (SELECT *
	       FROM   SYSOBJECTS
	       WHERE  ID = OBJECT_ID(N'ADS_MODULES')
		      AND TYPE = 'U')
  BEGIN
      EXECUTE ('
CREATE TABLE ADS_MODULES(
    MODULE_ID      INT NOT NULL,
    MODULE_NAME    VARCHAR(255) NOT NULL,
    MODULE_KEY     VARCHAR(255) NOT NULL UNIQUE,
    MODULE_ORDER   INT NOT NULL,
    MODULE_FORWARD VARCHAR(50) NOT NULL UNIQUE,
    CONSTRAINT PK_ADS_MODULE_MODULE_ID PRIMARY KEY(MODULE_ID)   )')
  END
GO
IF COL_LENGTH('USERS', 'LANDED_MODULE') IS NULL
BEGIN
   ALTER TABLE [USERS] ADD [LANDED_MODULE] VARCHAR(MAX) DEFAULT 'Mapping Manager'
END
IF (SELECT COUNT(*) FROM ADS_MODULES) < 1
BEGIN
    INSERT INTO ADS_MODULES(MODULE_ID, MODULE_NAME, MODULE_KEY, MODULE_ORDER, MODULE_FORWARD)
    SELECT 1, 'Mapping Manager', 'com.ads.mm.permission.mm', 1 , 'mappingmanager'
    UNION ALL
    SELECT 2, 'System Manager', 'com.ads.mm.permission.sm', 2 , 'systemmanager'
    UNION ALL
    SELECT 3, 'Resource Manager', 'com.ads.mm.permission.rsm', 3 , 'resourcemanager'
    UNION ALL
    SELECT 4, 'Codeset Manager', 'com.ads.mm.permission.cm', 4 , 'codesetmanager'
    UNION ALL
    SELECT 5, 'Release Manager', 'com.ads.mm.permission.rm', 5 , 'releasemanager'
END
GO
IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'CSM_MAPPING_DETAILS' AND COLUMN_NAME = 'CSM_MAP_NAME' AND CHARACTER_MAXIMUM_LENGTH != '-1')
--IF COL_LENGTH('CSM_MAPPING_DETAILS', 'CSM_MAP_NAME') IS NOT NULL
    BEGIN
        ALTER TABLE CSM_MAPPING_DETAILS ALTER COLUMN CSM_MAP_NAME VARCHAR(MAX)
    END
GO
IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'CSM_MAPPING_DETAILS' AND COLUMN_NAME = 'CSM_MAP_DESC' AND CHARACTER_MAXIMUM_LENGTH != '-1')
--IF COL_LENGTH('CSM_MAPPING_DETAILS', 'CSM_MAP_DESC') IS NOT NULL
    BEGIN
        ALTER TABLE CSM_MAPPING_DETAILS ALTER COLUMN CSM_MAP_DESC VARCHAR(MAX)
    END
GO
IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'CSM_CODESET' AND COLUMN_NAME = 'CODESET_NAME' AND CHARACTER_MAXIMUM_LENGTH != '100')
--IF COL_LENGTH('CSM_CODESET', 'CODESET_NAME') IS NOT NULL
    BEGIN
        ALTER TABLE CSM_CODESET ALTER COLUMN CODESET_NAME VARCHAR(100)
    END
GO
IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'CSM_CODE_VALUE' AND COLUMN_NAME = 'SYSTEM_ENV_NAME' AND CHARACTER_MAXIMUM_LENGTH != '50')
--IF COL_LENGTH('CSM_CODE_VALUE', 'SYSTEM_ENV_NAME') IS NOT NULL
    BEGIN
        ALTER TABLE CSM_CODE_VALUE ALTER COLUMN SYSTEM_ENV_NAME VARCHAR(50)
    END
GO

IF NOT EXISTS (SELECT * FROM sys.objects WHERE type = 'P' AND name = 'CSM_AUTO_MAPPING')
      exec('CREATE PROCEDURE [CSM_AUTO_MAPPING](
             @SRC_CODESET_ID   BIGINT,
             @SRC_SYSTEM_ID    BIGINT,
             @SRC_SYS_NAME     VARCHAR(50),
             @SRC_SYS_ENV_NAME VARCHAR(255),
             @TGT_CODESET_ID   BIGINT,
             @TGT_SYSTEM_ID    BIGINT,
             @TGT_SYS_NAME     VARCHAR(50),
             @TGT_SYS_ENV_NAME VARCHAR(255),
             @FOR_CSM_MAP_ID BIGINT)
         AS
         BEGIN
         UPDATE CSM_MAPPING_SPEC
         SET CSM_MAPPING_SPEC.CSM_MAP_TARGET_CODE_ID = T.TGT_CODE_ID
         FROM (
         SELECT * FROM (SELECT DISTINCT CODE_ID AS SRC_CODE_ID, CODE_STND_VALUE AS SRC_CODE_VALUE
         FROM CSM_CODE_VALUE SRC_CSMCV, CSM_CODESET SRC_CSMC,CSM_MAPPING_SPEC
         WHERE SRC_CSMCV.CODESET_ID = SRC_CSMC.CODESET_ID
         AND SRC_CSMCV.CODESET_ID = @SRC_CODESET_ID
         AND SRC_CSMCV.SYSTEM_ID = @SRC_SYSTEM_ID
         AND COALESCE(upper(SRC_CSMCV.SYSTEM_NAME), NULL, '''') = COALESCE(upper(@SRC_SYS_NAME), NULL, '''')
         AND COALESCE(upper(SRC_CSMCV.SYSTEM_ENV_NAME), NULL, '''') = COALESCE(upper(@SRC_SYS_ENV_NAME), NULL, '''')) AS CTE,
         (SELECT DISTINCT CODE_ID AS TGT_CODE_ID,  CODE_STND_VALUE AS TGT_CODE_VALUE
         FROM CSM_CODE_VALUE TGT_CSMCV, CSM_CODESET TGT_CSMC
         WHERE TGT_CSMCV.CODESET_ID = TGT_CSMC.CODESET_ID
         AND TGT_CSMCV.CODESET_ID = @TGT_CODESET_ID
         AND TGT_CSMCV.SYSTEM_ID = @TGT_SYSTEM_ID
         AND COALESCE(upper(TGT_CSMCV.SYSTEM_NAME), NULL, '''') = COALESCE(upper(@TGT_SYS_NAME), NULL, '''')
         AND COALESCE(upper(TGT_CSMCV.SYSTEM_ENV_NAME), NULL, '''') = COALESCE(upper(@TGT_SYS_ENV_NAME), NULL, '''')
         AND TGT_CSMCV.ACTIVE_FLAG = ''Y'' AND TGT_CSMCV.DELETE_FLAG = ''N'') AS CTEONE
         WHERE upper(CTEONE.TGT_CODE_VALUE) = upper(CTE.SRC_CODE_VALUE)) AS T
         WHERE CSM_MAPPING_SPEC.CSM_MAP_ID = @FOR_CSM_MAP_ID
         AND CSM_MAPPING_SPEC.CSM_MAP_SOURCE_CODE_ID = T.SRC_CODE_ID
         AND (CSM_MAPPING_SPEC.CSM_MAP_TARGET_CODE_ID IS NULL OR CSM_MAPPING_SPEC.CSM_MAP_TARGET_CODE_ID = 0)
         END')
GO
IF COL_LENGTH('SYSTEM_TABLE_METADATA', 'USER_DEFINED6') IS NULL
    BEGIN
        ALTER TABLE SYSTEM_TABLE_METADATA ADD USER_DEFINED6 varchar(MAX) NULL
    END
GO
IF COL_LENGTH('SYSTEM_TABLE_METADATA', 'USER_DEFINED7') IS NULL
    BEGIN
        ALTER TABLE SYSTEM_TABLE_METADATA ADD USER_DEFINED7 varchar(MAX) NULL
    END
GO
IF COL_LENGTH('SYSTEM_TABLE_METADATA', 'USER_DEFINED8') IS NULL
    BEGIN
        ALTER TABLE SYSTEM_TABLE_METADATA ADD USER_DEFINED8 varchar(MAX) NULL
    END
GO
IF COL_LENGTH('SYSTEM_TABLE_METADATA', 'USER_DEFINED9') IS NULL
    BEGIN
        ALTER TABLE SYSTEM_TABLE_METADATA ADD USER_DEFINED9 varchar(MAX) NULL
    END
GO
IF COL_LENGTH('SYSTEM_TABLE_METADATA', 'USER_DEFINED10') IS NULL
    BEGIN
        ALTER TABLE SYSTEM_TABLE_METADATA ADD USER_DEFINED10 varchar(MAX) NULL
    END
GO
IF COL_LENGTH('SYSTEM_TABLE_COLUMNS_METADATA', 'USER_DEFINATION6') IS NULL
    BEGIN
        ALTER TABLE SYSTEM_TABLE_COLUMNS_METADATA ADD USER_DEFINATION6 varchar(MAX) NULL
    END
GO
IF COL_LENGTH('SYSTEM_TABLE_COLUMNS_METADATA', 'USER_DEFINATION7') IS NULL
    BEGIN
        ALTER TABLE  SYSTEM_TABLE_COLUMNS_METADATA ADD USER_DEFINATION7 varchar(MAX) NULL
    END
GO
IF COL_LENGTH('SYSTEM_TABLE_COLUMNS_METADATA', 'USER_DEFINATION8') IS NULL
    BEGIN
        ALTER TABLE  SYSTEM_TABLE_COLUMNS_METADATA ADD USER_DEFINATION8 varchar(MAX) NULL
    END
GO
IF COL_LENGTH('SYSTEM_TABLE_COLUMNS_METADATA', 'USER_DEFINATION9') IS NULL
    BEGIN
        ALTER TABLE SYSTEM_TABLE_COLUMNS_METADATA ADD USER_DEFINATION9 varchar(MAX) NULL
    END
GO
IF COL_LENGTH('SYSTEM_TABLE_COLUMNS_METADATA', 'USER_DEFINATION10') IS NULL
    BEGIN
        ALTER TABLE SYSTEM_TABLE_COLUMNS_METADATA ADD USER_DEFINATION10 varchar(MAX) NULL
    END
GO
IF COL_LENGTH('SYSTEM_TABLE_METADATA', 'FILE_TYPE') IS NULL
BEGIN
   ALTER TABLE [SYSTEM_TABLE_METADATA] ADD [FILE_TYPE] VARCHAR(255) NULL
END
GO
IF COL_LENGTH('SYSTEM_TABLE_COLUMNS_METADATA', 'FILE_STARTING_POSITION') IS NULL
BEGIN
   ALTER TABLE [SYSTEM_TABLE_COLUMNS_METADATA] ADD [FILE_STARTING_POSITION] varchar(255) NULL
END
GO


IF (SELECT COUNT(*) FROM RM_MIGRATIONOBJECTTYPE where UPPER(MIGRATIONOBJECTTYPENAME)=UPPER('Data Item')) =0
BEGIN

   	INSERT INTO RM_MIGRATIONOBJECTTYPE (MIGRATIONOBJECTTYPENAME, MIGRATIONOBJECTTYPEDESC)
    (
        SELECT 'Data Item', '' );
END
GO

IF (SELECT COUNT(*) FROM RM_MIGRATIONOBJECTTYPE where UPPER(MIGRATIONOBJECTTYPENAME)=UPPER('Code Set')) =0
BEGIN

   	INSERT INTO RM_MIGRATIONOBJECTTYPE (MIGRATIONOBJECTTYPENAME, MIGRATIONOBJECTTYPEDESC)
    (
        SELECT 'Code Set', '' );
END
GO


IF (SELECT COUNT(*) FROM RM_MIGRATIONOBJECTTYPE where UPPER(MIGRATIONOBJECTTYPENAME)=UPPER('Code Map')) =0
BEGIN

   	INSERT INTO RM_MIGRATIONOBJECTTYPE (MIGRATIONOBJECTTYPENAME, MIGRATIONOBJECTTYPEDESC)
    (
        SELECT 'Code Map', '');
END
GO

IF (SELECT COUNT(*) FROM RM_HISTORYTYPE) = 6
BEGIN
   INSERT INTO RM_HISTORYTYPE (HISTORYTYPENAME, HISTORYTYPEDESC)
	SELECT 'MOVE', 'Move Record'
	       UNION ALL
	SELECT 'Replace', 'Replace Record'
	       UNION ALL
	SELECT 'ADD DATA ITEM MAPPING', 'ADD Record From MappingManagerMap'
	       UNION ALL
	SELECT 'ADD FROM CODESET', 'ADD Record From CodeSet'
	        UNION ALL
	SELECT 'ADD FROM CODEMAP', 'ADD Record From CodeMap'

END
GO
IF COL_LENGTH('RM_MIGRATIONOBJECT', 'MAP_ID') IS NULL
BEGIN
   ALTER TABLE [RM_MIGRATIONOBJECT] ADD [MAP_ID] bigint NULL
   ALTER TABLE [RM_MIGRATIONOBJECT]
   ADD  CONSTRAINT [fk_migobj_map_id]
   FOREIGN KEY ([MAP_ID])
   REFERENCES [MAPPING_DETAILS] ( [MAP_ID] )
END
GO
IF COL_LENGTH('RM_MIGRATIONOBJECT', 'CSM_MAP_ID') IS NULL
BEGIN
   ALTER TABLE [RM_MIGRATIONOBJECT] ADD [CSM_MAP_ID] BIGINT NULL
END
GO
IF COL_LENGTH('RM_MIGRATIONOBJECT', 'CODESET_ID') IS NULL
BEGIN
   ALTER TABLE [RM_MIGRATIONOBJECT] ADD [CODESET_ID] BIGINT NULL
END
GO
IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS WHERE CONSTRAINT_NAME='fk_migobj_csm_map_id' AND TABLE_NAME='RM_MIGRATIONOBJECT')
    BEGIN
        ALTER TABLE [RM_MIGRATIONOBJECT] ADD CONSTRAINT [fk_migobj_csm_map_id] FOREIGN KEY ([CSM_MAP_ID]) REFERENCES [CSM_MAPPING_DETAILS] ( [CSM_MAP_ID] )
    END
GO
IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS WHERE CONSTRAINT_NAME='fk_migobj_codeset_id' AND TABLE_NAME='RM_MIGRATIONOBJECT')
    BEGIN
        ALTER TABLE [RM_MIGRATIONOBJECT] ADD  CONSTRAINT [fk_migobj_codeset_id]   FOREIGN KEY ([CODESET_ID])   REFERENCES [CSM_CODESET] ( [CODESET_ID] )
    END
GO
IF COL_LENGTH('MAPPING_DETAILS', 'ISPUBLISHED') IS NULL
BEGIN
   EXEC('ALTER TABLE [MAPPING_DETAILS] ADD [ISPUBLISHED] char(1) DEFAULT ''N'' NULL')
   EXEC('UPDATE MAPPING_DETAILS SET ISPUBLISHED = ''N''')
END
GO
IF COL_LENGTH('MAPPING_DETAILS', 'PUBLISH_NOTES') IS NULL
BEGIN
   ALTER TABLE [MAPPING_DETAILS] ADD [PUBLISH_NOTES] varchar(MAX) NULL
END
GO
IF COL_LENGTH('MAPPING_DETAILS', 'EFFECTIVE_DATE') IS NULL
BEGIN
   ALTER TABLE [MAPPING_DETAILS] ADD [EFFECTIVE_DATE] datetime NULL
END
GO
IF COL_LENGTH('SYS_CON_ENVIRONMENTS', 'FILE_MANAGEMENT_SYSTEM_TYPE') IS NULL
BEGIN
   ALTER TABLE [SYS_CON_ENVIRONMENTS] ADD [FILE_MANAGEMENT_SYSTEM_TYPE] varchar(50) NULL
END
GO
IF COL_LENGTH('SYS_CON_ENVIRONMENTS', 'FILE_LOCATION') IS NULL
BEGIN
   ALTER TABLE [SYS_CON_ENVIRONMENTS] ADD [FILE_LOCATION] varchar(50) NULL
END
GO
IF COL_LENGTH('SYS_CON_ENVIRONMENTS', 'PROD_SYSTEM_ID') IS NULL
BEGIN
   ALTER TABLE [SYS_CON_ENVIRONMENTS] ADD [PROD_SYSTEM_ID] int NULL
END
GO
IF COL_LENGTH('SYS_CON_ENVIRONMENTS', 'PROD_SYSTEM_NAME') IS NULL
BEGIN
   ALTER TABLE [SYS_CON_ENVIRONMENTS] ADD [PROD_SYSTEM_NAME] varchar(50) NULL
END
GO
IF COL_LENGTH('SYS_CON_ENVIRONMENTS', 'PROD_ENVIRONMENT_NAME') IS NULL
BEGIN
   ALTER TABLE [SYS_CON_ENVIRONMENTS] ADD [PROD_ENVIRONMENT_NAME] varchar(50) NULL
END
GO
IF NOT EXISTS (SELECT *
	       FROM   SYSOBJECTS
	       WHERE  ID = OBJECT_ID(N'MM_HISTORY')
		      AND TYPE = 'U')
  BEGIN
      EXECUTE ('CREATE TABLE [MM_HISTORY] ( [MM_HIST_ID] bigint NOT NULL IDENTITY(1,1), [MAP_ID] bigint NOT NULL, [ACTION] nvarchar(50) NULL, [USER_NAME] varchar(50) NULL, [PUBLISH_NOTES] varchar(MAX) NULL, [EFFECTIVE_DATE] datetime NULL, [EXPIRE_DATE] datetime NULL, [ACTION_DATE] datetime NULL, [MAP_NAME] varchar(MAX) NULL, [PROJECT_ID] int NOT NULL, CONSTRAINT PK_MM_HIST_ID PRIMARY KEY(MM_HIST_ID), CONSTRAINT FK_MM_HIST_MAPID FOREIGN KEY(MAP_ID) REFERENCES MAPPING_DETAILS(MAP_ID) ON DELETE CASCADE, CONSTRAINT FK_MM_HIST_PROJID FOREIGN KEY(PROJECT_ID) REFERENCES PROJECT(PROJ_ID) )')
  END
GO
IF EXISTS(SELECT * FROM SYS.VIEWS WHERE NAME = 'MAP_ASSIGNMENT_SUMMARY_V')
BEGIN
EXEC ('ALTER VIEW [MAP_ASSIGNMENT_SUMMARY_V] AS
select mapping_status.user_id, map_id, user_full_name, responsiables, status from
mapping_status left join users on users.user_id = mapping_status.user_id
where mapping_status.user_id != ''''  AND user_full_name != ''''');
END

IF EXISTS (SELECT * FROM ADS_MM_VERSION WHERE VALUE <= '9.4')
    BEGIN
        IF NOT EXISTS (SELECT * FROM   USERS WHERE  USER_PASSWORD = 'PM+qX3+b1No=' AND [USER_ID] = 'public')
        BEGIN
            UPDATE USERS SET USER_PASSWORD = 'PM+qX3+b1No=' WHERE [USER_ID] = 'public';
        END
    END
GO
--CHECK IF FUNCTION ALREADY EXISTS OR NOT IN SELECTED DATABASE, IF EXISTS DROP AND RECREATE THE FUNCTION
IF (OBJECTPROPERTY(OBJECT_ID('FN_NOTELIGIBLEMAPS'),'ISTABLEFUNCTION') = 1)
BEGIN
	DROP FUNCTION FN_NOTELIGIBLEMAPS
END
GO

-- FUNCTION FOR FIND PUBLISH COUNT IN EDIT MODE AND VIEW MODE
CREATE FUNCTION [FN_NOTELIGIBLEMAPS]
(

)
RETURNS @TEMPTABLE TABLE (
  map_id int
)
AS
BEGIN
  ;
  WITH tgt (map_id, tgt_env, tgt_env1, tgt_sys, tgt_sys1)
  AS (SELECT
    ms.map_id,
    LEFT(ms.TGT_SYSTEM_ENVIRONMENT_NAME, CHARINDEX(CHAR(10), ms.TGT_SYSTEM_ENVIRONMENT_NAME + CHAR(10)) - 1),
    STUFF(ms.TGT_SYSTEM_ENVIRONMENT_NAME, 1, CHARINDEX(CHAR(10), ms.TGT_SYSTEM_ENVIRONMENT_NAME + CHAR(10)), ''),
    LEFT(ms.TGT_SYSTEM_NAME, CHARINDEX(CHAR(10), ms.TGT_SYSTEM_NAME + CHAR(10)) - 1),
    STUFF(ms.TGT_SYSTEM_NAME, 1, CHARINDEX(CHAR(10), ms.TGT_SYSTEM_NAME + CHAR(10)), '')
  FROM MAPPING_SPECIFICATION ms join MAPPING_DETAILS md on (ms.MAP_ID = md.MAP_ID AND md.STATUS = 'Active')
  WHERE (COALESCE(ms.TGT_SYSTEM_ENVIRONMENT_NAME, NULL, '') <> ''
  OR COALESCE(ms.TGT_SYSTEM_NAME, NULL, '') <> ''
  )
  UNION ALL
  SELECT
    map_id,
    LEFT(tgt_env1, CHARINDEX(CHAR(10), tgt_env1 + CHAR(10)) - 1),
    STUFF(tgt_env1, 1, CHARINDEX(CHAR(10), tgt_env1 + CHAR(10)), ''),
    LEFT(tgt_sys1, CHARINDEX(CHAR(10), tgt_sys1 + CHAR(10)) - 1),
    STUFF(tgt_sys1, 1, CHARINDEX(CHAR(10), tgt_sys1 + CHAR(10)), '')
  FROM tgt ms
  WHERE tgt_env1 > ''
  OR tgt_sys1 > '')
  ,
  src (MAP_ID, src_env, src_env1, src_sys, src_sys1)
  AS (SELECT
    ms.map_id,
    LEFT(ms.SRC_SYSTEM_ENVIRONMENT_NAME, CHARINDEX(CHAR(10), ms.SRC_SYSTEM_ENVIRONMENT_NAME + CHAR(10)) - 1),
    STUFF(ms.SRC_SYSTEM_ENVIRONMENT_NAME, 1, CHARINDEX(CHAR(10), ms.SRC_SYSTEM_ENVIRONMENT_NAME + CHAR(10)), ''),
    LEFT(ms.SRC_SYSTEM_NAME, CHARINDEX(CHAR(10), ms.SRC_SYSTEM_NAME + CHAR(10)) - 1),
    STUFF(ms.SRC_SYSTEM_NAME, 1, CHARINDEX(CHAR(10), ms.SRC_SYSTEM_NAME + CHAR(10)), '')
  FROM MAPPING_SPECIFICATION ms join MAPPING_DETAILS md on (ms.MAP_ID = md.MAP_ID AND md.STATUS = 'Active')
  WHERE (COALESCE(ms.SRC_SYSTEM_ENVIRONMENT_NAME, NULL, '') <> ''
  OR COALESCE(ms.SRC_SYSTEM_NAME, NULL, '') <> ''
  )
  UNION ALL
  SELECT
    map_id,
    LEFT(src_env1, CHARINDEX(CHAR(10), src_env1 + CHAR(10)) - 1),
    STUFF(src_env1, 1, CHARINDEX(CHAR(10), src_env1 + CHAR(10)), ''),
    LEFT(src_sys1, CHARINDEX(CHAR(10), src_sys1 + CHAR(10)) - 1),
    STUFF(src_sys1, 1, CHARINDEX(CHAR(10), src_sys1 + CHAR(10)), '')
  FROM src ms
  WHERE src_env1 > ''
  OR src_sys1 > '')

  INSERT @TEMPTABLE (map_id)
    (SELECT DISTINCT
      MAP_ID
    FROM SYS_CON_ENVIRONMENTS SE
    JOIN SYSTEM_DEFINITION_DETAILS SDEF
      ON (SE.SYSTEM_ID = SDEF.SYSTEM_ID)
    JOIN (SELECT DISTINCT
      MAP_ID,
      tgt_env SYS_ENV_NAME,
      tgt_sys SYS_NAME
    FROM tgt
    UNION
    SELECT DISTINCT
      MAP_ID,
      src_env SYS_ENV_NAME,
      src_sys SYS_NAME
    FROM src)
    CTE
      ON ((UPPER(CTE.SYS_NAME) = UPPER(SDEF.SYSTEM_NAME)
      AND UPPER(CTE.SYS_ENV_NAME) = UPPER(SE.SYSTEM_ENVIRONMENT_NAME)
      AND COALESCE(PROD_ENVIRONMENT_NAME, NULL, '') = '')
      OR UPPER(CTE.SYS_NAME) NOT IN (SELECT
      UPPER(SYSTEM_NAME)
    FROM SYSTEM_DEFINITION_DETAILS)
    OR (UPPER(CTE.SYS_ENV_NAME) NOT IN (SELECT
      UPPER(SYSTEM_ENVIRONMENT_NAME)
    FROM SYS_CON_ENVIRONMENTS)
    )))


  RETURN
END
GO

IF COL_LENGTH('RM_MIGRATIONOBJECT', 'MIGRATIONOBJECTNAME') IS NULL
BEGIN
    ALTER TABLE RM_MIGRATIONOBJECT ADD MIGRATIONOBJECTNAME VARCHAR(50) NULL;
END
GO
IF NOT EXISTS (SELECT * FROM SYSOBJECTS WHERE  ID = OBJECT_ID(N'RDM_CATEGORY') AND TYPE = 'U')
BEGIN
      EXECUTE ('CREATE TABLE RDM_CATEGORY
                  (
                      RDM_CATEGORY_ID bigint IDENTITY(1, 1) NOT NULL,
                      RDM_CATEGORY_NAME varchar(4000) NOT NULL,
                      DESCRIPTION varchar(4000) NULL,
                      RDM_PARENT_CAT_ID bigint DEFAULT 0 NOT NULL,
                      CREATED_BY varchar(100) NOT NULL,
                      CREATED_DATE datetime NOT NULL,
                      MODIFIED_BY varchar(100) NULL,
                      MODIFIED_DATE datetime NULL,
                      CONSTRAINT PK_RDM_CAT_ID PRIMARY KEY(RDM_CATEGORY_ID),
					  CONSTRAINT UK_RDM_CATEGORY_PAR_CATID UNIQUE (RDM_CATEGORY_NAME, RDM_PARENT_CAT_ID)
                    )
              ')
      END
GO

IF NOT EXISTS (SELECT * FROM   SYSOBJECTS WHERE  ID = OBJECT_ID(N'RDM_REFERENCE_TABLE') AND TYPE = 'U')
BEGIN
      EXECUTE ('CREATE TABLE RDM_REFERENCE_TABLE
                  (
                    RDM_REF_TABLE_ID bigint IDENTITY(1, 1) NOT NULL,
                    RDM_REF_TAB_PARENT_ID bigint DEFAULT 0 NOT NULL,
                    RDM_REF_TABLE_NAME varchar(4000) NOT NULL,
                    RDM_REF_TABLE_CAT_ID bigint NOT NULL,
                    RDM_REF_TABLE_DESC varchar(4000) NULL,
                    RDM_REF_TAB_VALIDATED char(1) DEFAULT ''N'' NOT NULL,
                    RDM_REF_TAB_PUBLISHED char(1) DEFAULT ''N'' NOT NULL,
                    RDM_REF_TAB_OWNER varchar(100) NOT NULL,
                    RDM_REF_TAB_LOCKED char(1) DEFAULT ''N'' NOT NULL,
                    RDM_REF_TAB_LOCKED_BY varchar(100) NULL,
                    RDM_REF_TAB_VERSION decimal(38, 2) DEFAULT 1 NOT NULL,
                    RDM_REF_TAB_VER_DESC varchar(4000) NULL,
                    RDM_REF_TAB_VER_LABEL varchar(100) NULL,
		    STATUS varchar(100) NULL,
                    CREATED_BY varchar(100) NOT NULL,
                    CREATED_DATE datetime NOT NULL,
                    MODIFIED_BY varchar(100) NULL,
                    MODIFIED_DATE datetime NULL,
                    CONSTRAINT PK_RDM_REF_TBL_ID_NAME PRIMARY KEY(RDM_REF_TABLE_ID,RDM_REF_TABLE_NAME),
                    CONSTRAINT FK_RDM_TBL_CAT_ID FOREIGN KEY(RDM_REF_TABLE_CAT_ID) REFERENCES RDM_CATEGORY (RDM_CATEGORY_ID) ON DELETE CASCADE,
                    CONSTRAINT UK_RDM_REF_TBL UNIQUE (RDM_REF_TABLE_ID)
                    )
              ')
      END
GO

IF NOT EXISTS (SELECT * FROM SYSOBJECTS WHERE  ID = OBJECT_ID(N'RDM_REF_TAB_COLUMNS') AND TYPE = 'U')
BEGIN
      EXECUTE ('CREATE TABLE RDM_REF_TAB_COLUMNS
                  (
                    RDM_REF_TAB_COL_ID bigint IDENTITY(1, 1) NOT NULL,
                    RDM_REF_TAB_ID bigint NOT NULL,
                    RDM_REF_TAB_COL_NAME varchar(4000) NOT NULL,
                    RDM_REF_TAB_COL_ORDER bigint NOT NULL,
                    RDM_REF_TAB_COL_SCROLL_LOCK char(1) DEFAULT ''N'' NOT NULL,
                    RDM_REF_TAB_COL_NULLABLE char(1) DEFAULT ''N'' NOT NULL,
                    CREATED_BY varchar(100) NOT NULL,
                    CREATED_DATE datetime NOT NULL,
                    MODIFIED_BY varchar(100) NULL,
                    MODIFIED_DATE datetime NULL,
                    CONSTRAINT PK_RDM_REF_COL_ID PRIMARY KEY(RDM_REF_TAB_COL_ID,RDM_REF_TAB_COL_NAME),
                    CONSTRAINT FK_RDM_REF_COL_TAB_ID FOREIGN KEY(RDM_REF_TAB_ID) REFERENCES RDM_REFERENCE_TABLE (RDM_REF_TABLE_ID) ON DELETE CASCADE,
                    CONSTRAINT UK_RDM_REF_COL_ID UNIQUE (RDM_REF_TAB_COL_ID)
                   )
              ')
      END
GO

IF NOT EXISTS (SELECT * FROM SYSOBJECTS WHERE  ID = OBJECT_ID(N'RDM_REF_TAB_COL_VALUES') AND TYPE = 'U')
BEGIN
      EXECUTE ('CREATE TABLE RDM_REF_TAB_COL_VALUES
                  (
                    RDM_REF_TAB_COL_VALUE_ID bigint IDENTITY(1, 1) NOT NULL,
                    RDM_REF_TAB_COL_ID bigint NOT NULL,
                    RDM_REF_TAB_COL_VALUE varchar(4000) NULL,
                    RDM_TAB_COL_VAL_ROW_ORDER bigint NOT NULL,
                    CREATED_BY varchar(100) NOT NULL,
                    CREATED_DATE datetime NOT NULL,
                    MODIFIED_BY varchar(100) NULL,
                    MODIFIED_DATE datetime NULL,
                    CONSTRAINT PK_RDM_REF_TAB_COL_VAL_ID PRIMARY KEY(RDM_REF_TAB_COL_VALUE_ID),
                    CONSTRAINT FK_RDM_TAB_VALUE_COL_ID FOREIGN KEY(RDM_REF_TAB_COL_ID) REFERENCES RDM_REF_TAB_COLUMNS (RDM_REF_TAB_COL_ID) ON DELETE CASCADE
                  )
              ')
      END
GO

 IF NOT EXISTS (SELECT * FROM SYSOBJECTS WHERE  ID = OBJECT_ID(N'RDM_VALIDATION_RULES') AND TYPE = 'U')
BEGIN
      EXECUTE ('CREATE TABLE RDM_VALIDATION_RULES
                  (
                    RDM_VAL_RULE_ID bigint IDENTITY(1, 1) NOT NULL,
                    RDM_VAL_RULE_NAME varchar(4000) NOT NULL,
                    RDM_VAL_RULE_DESC varchar(4000) NULL,
                    RDM_VALIDATION_RULE varchar(MAX) Not NULL,
                    CREATED_BY varchar(100) NOT NULL,
                    CREATED_DATE datetime NOT NULL,
                    MODIFIED_BY varchar(100) NULL,
                    MODIFIED_DATE datetime NULL,
                    CONSTRAINT PK_RDM_VAL_RULE_ID PRIMARY KEY(RDM_VAL_RULE_ID,RDM_VAL_RULE_NAME),
                    CONSTRAINT UK_RDM_VAL_RULE_ID UNIQUE (RDM_VAL_RULE_ID)
                  )
              ')
      END
GO

IF NOT EXISTS (SELECT * FROM SYSOBJECTS WHERE  ID = OBJECT_ID(N'RDM_REF_TAB_COL_VAL_ERRORS') AND TYPE = 'U')
BEGIN
      EXECUTE ('CREATE TABLE RDM_REF_TAB_COL_VAL_ERRORS
                  (
                    RDM_REF_TAB_COL_VAL_ERR_ID bigint IDENTITY(1, 1) NOT NULL,
                    RDM_REF_TAB_ID bigint NOT NULL,
                    RDM_TAB_COL_VAL_ROW_ORDER bigint NOT NULL,
                    RDM_REF_COL_VAL_HAS_ERROR char(1) DEFAULT ''N'' NOT NULL,
                    RDM_REF_COL_VAL_ERR_MSG varchar(4000) NULL,
                    RDM_REF_VALIDATION_RUN_BY varchar(100) NOT NULL,
                    RDM_REF_VALIDATION_RUN_DATE datetime NOT NULL,
                    CONSTRAINT PK_RDM_REF_VAL_ERR_ID PRIMARY KEY(RDM_REF_TAB_COL_VAL_ERR_ID),
                    CONSTRAINT FK_RDM_REF_TAB_ID FOREIGN KEY(RDM_REF_TAB_ID) REFERENCES RDM_REFERENCE_TABLE (RDM_REF_TABLE_ID) ON DELETE CASCADE,
                    )
              ')
      END
GO

 IF NOT EXISTS (SELECT * FROM SYSOBJECTS WHERE  ID = OBJECT_ID(N'RDM_PUBLISH_ENVIRONMENTS') AND TYPE = 'U')
BEGIN
      EXECUTE ('CREATE TABLE RDM_PUBLISH_ENVIRONMENTS
				(
				RDM_ENV_ID BIGINT IDENTITY(1, 1) NOT NULL,
				ENVIRONMENT_NAME VARCHAR(50) NOT NULL,
				[ENVIRONMENT_SCHEMA] VARCHAR(50) NOT NULL,
				CREATED_BY VARCHAR(100) NOT NULL,
				CREATED_DATE DATETIME NOT NULL,
				MODIFIED_BY VARCHAR(100) NULL,
				MODIFIED_DATE DATETIME NULL,
				CONSTRAINT PK_RDM_PUB_ENVRTS_RDM_ENV_ID PRIMARY KEY(RDM_ENV_ID)
				)'
      		  )
      END
GO

 IF NOT EXISTS (SELECT * FROM SYSOBJECTS WHERE  ID = OBJECT_ID(N'RDM_REF_TAB_PUBLISH_HISTORY') AND TYPE = 'U')
BEGIN
      EXECUTE ('CREATE TABLE RDM_REF_TAB_PUBLISH_HISTORY
                    (
                        RDM_REF_TAB_PUB_HIST_ID bigint IDENTITY(1, 1) NOT NULL,
                        RDM_REF_TAB_ID bigint NOT NULL,
                        RDM_REF_TAB_VERSION decimal(38, 2) NOT NULL,
                        RDM_REF_TAB_PUBLISH_DATE datetime NOT NULL,
                        RDM_REF_TAB_PUBLISH_BY varchar(100) NOT NULL,
                        RDM_REF_TAB_EFFECT_DT datetime NULL,
                        RDM_REF_TAB_EXPIRY_DT datetime NULL,
                        CREATED_BY varchar(100) NOT NULL,
                        CREATED_DATE datetime NOT NULL,
                        MODIFIED_BY varchar(100) NULL,
                        MODIFIED_DATE datetime NULL,
						RDM_REF_TAB_NEW_VER_PUB char(1) DEFAULT ''N'' NOT NULL,
						RDM_REF_TABLE_NAME varchar(4000),
						RDM_REF_TABLE_CAT_ID bigint,
						RDM_ENVIRONMENT_ID bigint NOT NULL,
                        CONSTRAINT PK_RDM_REF_PUB_HIST_ID PRIMARY KEY(RDM_REF_TAB_PUB_HIST_ID),
                        CONSTRAINT FK_RDM_REF_TAB_PUB_ID FOREIGN KEY(RDM_REF_TAB_ID) REFERENCES RDM_REFERENCE_TABLE (RDM_REF_TABLE_ID) ON DELETE CASCADE,
						CONSTRAINT FK_TAB_PUB_RDM_ENV_ID FOREIGN KEY(RDM_ENVIRONMENT_ID) REFERENCES RDM_PUBLISH_ENVIRONMENTS (RDM_ENV_ID) ON DELETE CASCADE
                      )
              ')
      END
GO

 IF NOT EXISTS (SELECT * FROM SYSOBJECTS WHERE  ID = OBJECT_ID(N'RDM_CHANGE_HISTORY') AND TYPE = 'U')
BEGIN
      EXECUTE ('CREATE TABLE RDM_CHANGE_HISTORY
                  (
                      NEW_NAME varchar(4000) NOT NULL,
                      CHANGE_USE_DESCRIPTION varchar(4000) NOT NULL,
                      OLD_NAME	varchar(100) NULL	,
                      CREATED_BY	varchar(100) NOT NULL,
                      CREATED_DATE	datetime NOT NULL,
                      MODIFIED_BY	varchar(100) NULL,
                      MODIFIED_DATE	datetime NULL
                      )
              ')
      END
GO

IF NOT EXISTS (SELECT * FROM SYSOBJECTS WHERE  ID = OBJECT_ID(N'RDM_TABLE_VALIDATIONS') AND TYPE = 'U')
BEGIN
      EXECUTE ('CREATE TABLE RDM_TABLE_VALIDATIONS
                  (
                    RDM_TAB_VAL_ID bigint IDENTITY(1, 1) NOT NULL,
                    RDM_VAL_RULE_ID bigint NOT NULL,
                    RDM_REF_TAB_ID bigint NULL,
                    RDM_REF_CAT_ID bigint NOT NULL,
                    CREATED_BY varchar(100) NOT NULL,
                    CREATED_DATE datetime NOT NULL,
                    MODIFIED_BY varchar(100) NULL,
                    MODIFIED_DATE datetime NULL,
                    CONSTRAINT PK_RDM_TAB_VALDTN_ID PRIMARY KEY(RDM_TAB_VAL_ID),
                    CONSTRAINT FK_RDM_VALDTN_RULE_ID FOREIGN KEY(RDM_VAL_RULE_ID) REFERENCES RDM_VALIDATION_RULES (RDM_VAL_RULE_ID) ON DELETE CASCADE,
                    CONSTRAINT FK_RDM_VALDTN_TAB_ID FOREIGN KEY(RDM_REF_TAB_ID) REFERENCES RDM_REFERENCE_TABLE (RDM_REF_TABLE_ID) ON DELETE CASCADE,
                    CONSTRAINT FK_RDM_VALDTN_CAT_ID FOREIGN KEY(RDM_REF_CAT_ID) REFERENCES RDM_CATEGORY (RDM_CATEGORY_ID)
                  )
              ')
      END
GO

 IF NOT EXISTS (SELECT * FROM SYSOBJECTS WHERE  ID = OBJECT_ID(N'RDM_REF_TABLE_USERS') AND TYPE = 'U')
BEGIN
      EXECUTE ('CREATE TABLE RDM_REF_TABLE_USERS
                  (
                    RDM_REF_TAB_USR_ID bigint IDENTITY(1, 1) NOT NULL,
                    RDM_REF_TAB_ID bigint NOT NULL,
                    RDM_REF_CAT_ID bigint NOT NULL,
                    USER_ID varchar(20) NOT NULL,
                    CREATED_BY varchar(100) NOT NULL,
                    CREATED_DATE datetime NOT NULL,
                    MODIFIED_BY varchar(100) NULL,
                    MODIFIED_DATE datetime NULL,
	    			RDM_REF_ROOT_CAT_ID BIGINT NOT NULL,
                    CONSTRAINT PK_RDM_REF_TAB_USER_ID PRIMARY KEY(RDM_REF_TAB_USR_ID),
                    CONSTRAINT FK_RDM_USER_TAB_ID FOREIGN KEY(RDM_REF_TAB_ID) REFERENCES RDM_REFERENCE_TABLE (RDM_REF_TABLE_ID) ON DELETE CASCADE,
                    CONSTRAINT FK_RDM_USER_CAT_ID FOREIGN KEY(RDM_REF_CAT_ID) REFERENCES RDM_CATEGORY (RDM_CATEGORY_ID),
                    CONSTRAINT FK_RDM_TBL_USER_ID FOREIGN KEY(USER_ID) REFERENCES USERS (USER_ID)
                   )
              ')
      END
GO

IF COL_LENGTH('SUBJECT_DETAILS', 'CREATED_BY') IS NULL
BEGIN
   ALTER TABLE SUBJECT_DETAILS ADD CREATED_BY VARCHAR(50) NULL;
END
GO

IF COL_LENGTH('SUBJECT_DETAILS', 'CREATED_DATE_TIME') IS NULL
BEGIN
   ALTER TABLE SUBJECT_DETAILS ADD CREATED_DATE_TIME DATETIME NULL;
END
GO

IF COL_LENGTH('SUBJECT_DETAILS', 'LAST_MODIFIED_BY') IS NULL
BEGIN
   ALTER TABLE SUBJECT_DETAILS ADD LAST_MODIFIED_BY VARCHAR(50) NULL;
END
GO

IF COL_LENGTH('SUBJECT_DETAILS', 'LAST_MODIFIED_DATE_TIME') IS NULL
BEGIN
   ALTER TABLE SUBJECT_DETAILS ADD LAST_MODIFIED_DATE_TIME DATETIME NULL;
END
GO

IF COL_LENGTH('MAPPING_CHANGE_LOG', 'MAP_SPEC_VERSION') IS NULL
BEGIN
   ALTER TABLE MAPPING_CHANGE_LOG ADD MAP_SPEC_VERSION decimal(18,2) NULL;
END
GO
IF COL_LENGTH('USERS', 'ENABLED') IS NULL
BEGIN
   EXEC('ALTER TABLE [USERS] ADD [ENABLED] int DEFAULT 1 NULL')
   EXEC('UPDATE USERS SET ENABLED = 1')
END
GO

IF NOT EXISTS (SELECT * FROM   SYSOBJECTS WHERE  ID = OBJECT_ID(N'STATE_DETAILS') AND TYPE = 'U')
  BEGIN
	EXECUTE('CREATE TABLE STATE_DETAILS (
			STATE_ID int IDENTITY(1, 1) NOT NULL,
			STATENAME varchar(255) NOT NULL,
			CREATED_BY varchar(50) NULL,
			CREATED_DATE_TIME datetime NULL,
			LAST_MODIFIED_BY varchar(50) NULL,
			LAST_MODIFIED_DATE_TIME datetime NULL,
			 CONSTRAINT PK_STATE_DETAILS_STATE_ID PRIMARY KEY(STATE_ID))')
  END
GO

IF NOT EXISTS (SELECT * FROM SYSOBJECTS WHERE  ID = OBJECT_ID(N'SUBSTATE_DETAILS') AND TYPE = 'U')
  BEGIN
	EXECUTE('CREATE TABLE SUBSTATE_DETAILS(
			SUBSTATE_ID int IDENTITY(1,1) NOT NULL,
			SUBSTATENAME varchar(255) NOT NULL,
			CREATED_BY varchar(50) NULL,
			CREATED_DATE_TIME datetime NULL,
			LAST_MODIFIED_BY varchar(50) NULL,
			LAST_MODIFIED_DATE_TIME datetime NULL,
			CONSTRAINT PK_SUBSTATE_DETAILS_SUBSTATE_ID PRIMARY KEY(SUBSTATE_ID))')
  END
GO

IF COL_LENGTH('MAPPING_DETAILS', 'STATE_ID') IS NULL
    BEGIN
        ALTER TABLE MAPPING_DETAILS ADD STATE_ID INT NULL
    END
GO

IF COL_LENGTH('MAPPING_DETAILS', 'SUBSTATE_ID') IS NULL
    BEGIN
        ALTER TABLE MAPPING_DETAILS ADD SUBSTATE_ID INT NULL
    END
GO

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS WHERE CONSTRAINT_NAME='FK_MAPPING_DTLS_STATE_ID' AND TABLE_NAME='MAPPING_DETAILS')
EXECUTE('ALTER TABLE MAPPING_DETAILS ADD CONSTRAINT FK_MAPPING_DTLS_STATE_ID FOREIGN KEY (STATE_ID) REFERENCES STATE_DETAILS (STATE_ID)')
GO

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS WHERE CONSTRAINT_NAME='FK_MAP_DTLS_SUBSTATE_ID' AND TABLE_NAME='MAPPING_DETAILS')
EXECUTE('ALTER TABLE MAPPING_DETAILS ADD CONSTRAINT FK_MAP_DTLS_SUBSTATE_ID FOREIGN KEY (SUBSTATE_ID) REFERENCES SUBSTATE_DETAILS (SUBSTATE_ID)')
GO

IF NOT EXISTS (SELECT * FROM   SYSOBJECTS WHERE  ID = OBJECT_ID(N'RDM_COLUMN_CODESETS') AND TYPE = 'U')
  BEGIN
	EXECUTE('CREATE TABLE RDM_COLUMN_CODESETS
			(
				RDM_COL_CS_ID BIGINT IDENTITY(1,1) NOT NULL,
				RDM_CODESET_ID BIGINT NOT NULL,
				RDM_REF_TAB_COL_ID BIGINT NOT NULL,
				CONSTRAINT PK_RDM_COL_CODESETS_CS_ID PRIMARY KEY (RDM_COL_CS_ID) ,
				CONSTRAINT FK_RDM_COLUMN_CS FOREIGN KEY (RDM_CODESET_ID) REFERENCES CSM_CODESET (CODESET_ID) ON DELETE CASCADE,
				CONSTRAINT FK_RDM_COLUMN_ID FOREIGN KEY (RDM_REF_TAB_COL_ID) REFERENCES RDM_REF_TAB_COLUMNS (RDM_REF_TAB_COL_ID) ON DELETE CASCADE
			)')
  END
GO
IF NOT EXISTS (SELECT * FROM SYSOBJECTS WHERE  ID = OBJECT_ID(N'CSM_MAP_CATEGORY') AND TYPE = 'U')
  BEGIN
	EXECUTE('CREATE TABLE CSM_MAP_CATEGORY
			(
			CSM_MAP_CAT_ID BIGINT IDENTITY(1,1) NOT NULL,
			CSM_MAP_CAT_NAME VARCHAR(4000) NOT NULL,
			CSM_MAP_CAT_DESC VARCHAR(4000) NULL,
			CSM_MAP_PARENT_CAT_ID BIGINT NOT NULL,
			CREATED_BY VARCHAR(100) NOT NULL,
			CREATED_DATE DATETIME NOT NULL,
			MODIFIED_BY VARCHAR(100) NULL,
			MODIFIED_DATE DATETIME NULL,
			CONSTRAINT PK_CSM_MAP_CAT_ID PRIMARY KEY(CSM_MAP_CAT_ID),
			CONSTRAINT UK_CSM_MAP_PAR_CID UNIQUE(CSM_MAP_PARENT_CAT_ID,CSM_MAP_CAT_NAME)
			)')
  END
GO

IF COL_LENGTH('CSM_MAPPING_DETAILS', 'CSM_MAP_CAT_ID') IS NULL
    BEGIN
        ALTER TABLE CSM_MAPPING_DETAILS ADD CSM_MAP_CAT_ID BIGINT NULL
        ALTER TABLE CSM_MAPPING_DETAILS ALTER COLUMN [CSM_MAP_NAME] varchar(4000)
    END
GO

-- IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS WHERE CONSTRAINT_NAME='FK_CSM_MAPDTLS_CAT_ID' AND TABLE_NAME='CSM_MAPPING_DETAILS')
-- EXECUTE('ALTER TABLE CSM_MAPPING_DETAILS  ADD  CONSTRAINT FK_CSM_MAPDTLS_CAT_ID FOREIGN KEY(CSM_MAP_CAT_ID) REFERENCES CSM_MAP_CATEGORY (CSM_MAP_CAT_ID) ON DELETE CASCADE')
--
-- IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS WHERE CONSTRAINT_NAME='UK_CSM_MAP_NAME_CAT_ID' AND TABLE_NAME='CSM_MAPPING_DETAILS')
-- EXECUTE('ALTER TABLE CSM_MAPPING_DETAILS  ADD  CONSTRAINT UK_CSM_MAP_NAME_CAT_ID UNIQUE (CSM_MAP_CAT_ID,CSM_MAP_NAME,CSM_MAP_VERSION)')
-- GO
--
-- IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS WHERE CONSTRAINT_NAME='UK_CSM_CAT_NAME_ID' AND TABLE_NAME='CSM_CATEGORY')
-- EXECUTE('ALTER TABLE CSM_CATEGORY  ADD  CONSTRAINT UK_CSM_CAT_NAME_ID UNIQUE (CATEGORY_ID,CATEGORY_NAME)')
-- GO
IF COLUMNPROPERTY(OBJECT_ID('MAPPING_DETAILS'),'MAP_NAME','PRECISION') = -1
  BEGIN
        ALTER TABLE [MAPPING_DETAILS] ALTER COLUMN [MAP_NAME] varchar(4000)
    END
GO


IF COL_LENGTH('MAPPING_DETAILS', 'SUBJECT_ID') IS NULL
    BEGIN
        ALTER TABLE MAPPING_DETAILS ADD SUBJECT_ID int DEFAULT(-1) NOT NULL
    END
GO


IF COL_LENGTH('SUBJECT_DETAILS', 'PARENT_SUBJECT_ID') IS NULL
    BEGIN
       ALTER TABLE SUBJECT_DETAILS ADD PARENT_SUBJECT_ID int  DEFAULT(-1)  NOT NULL
    END
GO

IF COL_LENGTH('SUBJECT_DETAILS', 'PROJECT_ID') IS NULL
    BEGIN
       ALTER TABLE SUBJECT_DETAILS ADD PROJECT_ID int  DEFAULT(-1)  NOT NULL
    END
GO

IF EXISTS (SELECT *
	       FROM   SYSOBJECTS
	       WHERE  ID = OBJECT_ID(N'subjectmappings')
		      AND TYPE = 'U')
  BEGIN
	   update mapping_details SET SUBJECT_ID = sm.subject_id from subjectmappings sm where map_id = sm.mapping_id;
     drop table subjectmappings;
  END
GO

IF EXISTS (SELECT *
	       FROM   SYSOBJECTS
	       WHERE  ID = OBJECT_ID(N'projectsubjects')
		      AND TYPE = 'U')
  BEGIN
	   update subject_details SET PARENT_SUBJECT_ID = ps.PARENT_SUBJECT_ID,PROJECT_ID = ps.PROJECT_ID  from projectsubjects ps where subject_details.SUBJECT_ID = ps.SUBJECT_ID
       drop table projectsubjects;
  END
GO



IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS WHERE CONSTRAINT_NAME='UK_SUB_DET_NAME_ID' AND TABLE_NAME='SUBJECT_DETAILS')
   EXECUTE('ALTER TABLE SUBJECT_DETAILS ADD  CONSTRAINT UK_SUB_DET_NAME_ID UNIQUE (SUBJECT_NAME , PARENT_SUBJECT_ID , PROJECT_ID )')
GO

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS WHERE CONSTRAINT_NAME='UK_MAP_DET_NAME_PSID' AND TABLE_NAME='MAPPING_DETAILS')
   EXECUTE('ALTER TABLE MAPPING_DETAILS ADD  CONSTRAINT UK_MAP_DET_NAME_PSID UNIQUE (PROJECT_ID , SUBJECT_ID , MAP_NAME ,MAP_SPEC_VERSION)')
GO

IF (SELECT COUNT(*) FROM ADS_MODULES) < 6
BEGIN
    INSERT INTO ADS_MODULES(MODULE_ID, MODULE_NAME, MODULE_KEY, MODULE_ORDER, MODULE_FORWARD)
    SELECT 6, 'Reference Data Manager', 'com.ads.mm.permission.rdm', 6, 'referencedatamanager'
END
GO

IF NOT EXISTS(SELECT * FROM SYS.VIEWS WHERE NAME = 'VIEW_REF_TAB_COL_VALUES')
BEGIN
   EXEC ('CREATE  VIEW VIEW_REF_TAB_COL_VALUES (RDM_REF_TABLE_NAME, RDM_REF_TAB_COL_NAME, RDM_REF_TAB_COL_VALUE, CREATED_BY, CREATED_DATE, MODIFIED_DATE, MODIFIED_BY)
	AS
	  SELECT A.RDM_REF_TABLE_NAME,
	    B.RDM_REF_TAB_COL_NAME,
	    C.RDM_REF_TAB_COL_VALUE,
	    C.CREATED_BY,
	    C.CREATED_DATE,
	    C.MODIFIED_DATE,
	    C.MODIFIED_BY
	  FROM rdm_reference_table A JOIN RDM_REF_TAB_COLUMNS B
          ON A.RDM_REF_TABLE_ID = B.RDM_REF_TAB_ID
          JOIN RDM_REF_TAB_COL_VALUES C
          ON B.RDM_REF_TAB_COL_ID = C.RDM_REF_TAB_COL_ID;');
END
GO

IF NOT EXISTS(SELECT * FROM SYS.VIEWS WHERE NAME = 'VIEW_REF_TAB_COLUMN')
BEGIN
   EXEC ('CREATE  VIEW VIEW_REF_TAB_COLUMN (RDM_REF_TABLE_NAME, RDM_REF_TAB_COL_NAME, CREATED_BY, CREATED_DATE, MODIFIED_DATE, MODIFIED_BY)
	AS
	  SELECT A.RDM_REF_TABLE_NAME,
	    B.RDM_REF_TAB_COL_NAME,
	    B.CREATED_BY,
	    B.CREATED_DATE,
	    B.MODIFIED_DATE,
	    B.MODIFIED_BY
	  FROM rdm_reference_table A,
	    RDM_REF_TAB_COLUMNS B
	  WHERE A.RDM_REF_TABLE_ID = B.RDM_REF_TAB_ID;');
END
GO

IF NOT EXISTS(SELECT * FROM SYS.VIEWS WHERE NAME = 'VIEW_REF_TABLE')
BEGIN
   EXEC ('CREATE  VIEW VIEW_REF_TABLE (RDM_REF_TABLE_ID, RDM_REF_TABLE_NAME, RDM_REF_TABLE_DESC, RDM_REF_TAB_OWNER, RDM_REF_TAB_VER_DESC, RDM_REF_TAB_VER_LABEL, CREATED_BY, CREATED_DATE, MODIFIED_BY, MODIFIED_DATE)
	AS
	  SELECT RDM_REF_TABLE_ID,
	    RDM_REF_TABLE_NAME,
	    RDM_REF_TABLE_DESC,
	    RDM_REF_TAB_OWNER,
	    RDM_REF_TAB_VER_DESC,
	    RDM_REF_TAB_VER_LABEL,
	    CREATED_BY,
	    CREATED_DATE,
	    MODIFIED_BY,
	    MODIFIED_DATE
	  FROM rdm_reference_table;');
END
GO

IF NOT EXISTS (SELECT * FROM SYSOBJECTS WHERE  ID = OBJECT_ID(N'CSM_PUBLISH_ENVIRONMENTS') AND TYPE = 'U')
  BEGIN
	EXECUTE('CREATE TABLE CSM_PUBLISH_ENVIRONMENTS
	  (
	    CSM_ENV_ID       INT IDENTITY(1,1) NOT NULL,
	    ENVIRONMENT_NAME VARCHAR(50) NOT NULL,
	    CREATED_BY       VARCHAR(100) NOT NULL,
	    CREATED_DATE DATETIME NOT NULL,
	    MODIFIED_BY VARCHAR(100),
	    MODIFIED_DATE DATETIME ,
	    CONSTRAINT PK_CSM_PUB_ENVRTS_CSM_ENV_ID PRIMARY KEY (CSM_ENV_ID)
	  )')
  END
GO

IF NOT EXISTS (SELECT * FROM SYSOBJECTS WHERE  ID = OBJECT_ID(N'CSM_CODESET_PUBLISH_HISTORY') AND TYPE = 'U')
  BEGIN
	EXECUTE('CREATE TABLE CSM_CODESET_PUBLISH_HISTORY
	  (
	    CSM_CODESET_PUB_HIST_ID INT IDENTITY(1,1) NOT NULL ,
	    CSM_CODESET_ID  BIGINT NOT NULL ,
	    CSM_CODESET_VERSION     DECIMAL(16,2) NOT NULL ,
	    CSM_CODESET_PUBLISH_DATE DATETIME  NOT NULL ,
	    CSM_CODESET_PUBLISH_BY VARCHAR(100 ) NOT NULL ,
	    CSM_CODESET_EFFECT_DT DATETIME ,
	    CSM_CODESET_EXPIRY_DT DATETIME ,
	    CREATED_BY VARCHAR(100 ) NOT NULL ,
	    CREATED_DATE DATETIME  NOT NULL ,
	    MODIFIED_BY VARCHAR(100 ),
	    MODIFIED_DATE DATETIME ,
	    CSM_ENVIRONMENT_ID INT NOT NULL ,
	    CSM_CODESET_NEW_VER_PUB CHAR(1 ) DEFAULT ''N'' NOT NULL ,
	    CSM_CODESET_NAME      VARCHAR(4000 ),
	    CSM_CODESET_CAT_ID    INT,
	    CONSTRAINT PK_CODESET_PUB_HIST_ID PRIMARY KEY (CSM_CODESET_PUB_HIST_ID),
	    CONSTRAINT FK_CSM_PUB_CODESET_ID FOREIGN KEY (CSM_CODESET_ID) REFERENCES CSM_CODESET (CODESET_ID) ON  DELETE CASCADE ,
	    CONSTRAINT FK_CSM_CODESET_ENV_ID FOREIGN KEY (CSM_ENVIRONMENT_ID) REFERENCES CSM_PUBLISH_ENVIRONMENTS (CSM_ENV_ID) ON DELETE CASCADE
	  )')
  END
GO

IF NOT EXISTS (SELECT * FROM SYSOBJECTS WHERE  ID = OBJECT_ID(N'CSM_MAP_PUBLISH_HISTORY') AND TYPE = 'U')
  BEGIN
	EXECUTE('CREATE TABLE CSM_MAP_PUBLISH_HISTORY
	  (
	    CSM_MAP_PUB_HIST_ID INT IDENTITY(1,1) NOT NULL ,
	    CSM_MAP_ID          BIGINT NOT NULL ,
	    CSM_MAP_VERSION     DECIMAL(16,2) NOT NULL ,
	    CSM_MAP_PUBLISH_DATE DATETIME  NOT NULL ,
	    CSM_MAP_PUBLISH_BY VARCHAR(100 ) NOT NULL ,
	    CSM_MAP_EFFECT_DT DATETIME ,
	    CSM_MAP_EXPIRY_DT DATETIME ,
	    CREATED_BY VARCHAR(100 ) NOT NULL ,
	    CREATED_DATE DATETIME  NOT NULL ,
	    MODIFIED_BY VARCHAR(100 ),
	    MODIFIED_DATE DATETIME ,
	    CSM_ENVIRONMENT_ID      INT NOT NULL ,
	    CSM_MAP_NEW_VER_PUB CHAR(1 ) DEFAULT ''N'' NOT NULL ,
	    CSM_MAP_NAME      VARCHAR(4000 ),
	    CSM_MAP_CAT_ID    BIGINT,
	    CONSTRAINT PK_CSM_MAP_HIST_ID PRIMARY KEY (CSM_MAP_PUB_HIST_ID),
	    CONSTRAINT FK_CSM_PUB_MAP_ID FOREIGN KEY (CSM_MAP_ID) REFERENCES CSM_MAPPING_DETAILS (CSM_MAP_ID) ON  DELETE CASCADE ,
	    CONSTRAINT FK_CSM_MAP_ENV_ID FOREIGN KEY (CSM_ENVIRONMENT_ID) REFERENCES CSM_PUBLISH_ENVIRONMENTS (CSM_ENV_ID) ON DELETE CASCADE
	  )')
  END
GO

IF COL_LENGTH('CSM_CODESET', 'CODESET_STATUS') IS NULL
    BEGIN
        EXECUTE('ALTER TABLE CSM_CODESET ADD CODESET_STATUS VARCHAR(20) DEFAULT ''Active''');
        EXECUTE('UPDATE CSM_CODESET SET CODESET_STATUS = ''Active''');
    END
GO

IF COL_LENGTH('CSM_CODESET', 'CODESET_VERSION') IS NULL
    BEGIN
        EXECUTE('ALTER TABLE CSM_CODESET ADD CODESET_VERSION DECIMAL(16,2) DEFAULT 1.00');
        EXECUTE('UPDATE CSM_CODESET SET CODESET_VERSION = 1.00');
    END
GO

IF COL_LENGTH('CSM_CODESET', 'CODESET_VERSION_LABEL') IS NULL
    BEGIN
        EXECUTE('ALTER TABLE CSM_CODESET ADD CODESET_VERSION_LABEL VARCHAR(50)');
    END
GO

IF COL_LENGTH('CSM_CODESET', 'CODESET_CHANGED_DESC') IS NULL
    BEGIN
        EXECUTE('ALTER TABLE CSM_CODESET ADD CODESET_CHANGED_DESC VARCHAR(4000)');
    END
GO

IF COL_LENGTH('CSM_CODESET', 'CODESET_PUBLISH_FLAG') IS NULL
    BEGIN
        EXECUTE('ALTER TABLE CSM_CODESET ADD CODESET_PUBLISH_FLAG VARCHAR(1) DEFAULT ''N''');
        EXECUTE('UPDATE CSM_CODESET SET CODESET_PUBLISH_FLAG = ''N''');
    END
GO


--CHECK IF FUNCTION ALREADY EXISTS OR NOT IN SELECTED DATABASE, IF EXISTS DROP AND RECREATE THE FUNCTION
IF (OBJECTPROPERTY(OBJECT_ID('FN_MAPCOUNT'),'ISTABLEFUNCTION') = 1)
BEGIN
	DROP FUNCTION FN_MAPCOUNT
END
GO

CREATE FUNCTION [FN_MAPCOUNT]
(
    @SUBIDS VARCHAR(MAX),
    @countValue int
)
RETURNS @TEMPTABLE Table(cntValue int)
as
begin
    DECLARE @tempValue int
    DECLARE @CodeNameString nvarchar(max)
    select @tempValue = count(*) from SUBJECT_DETAILS where parent_subject_id in (select * from FN_SPLITTREENODEIDS(@SUBIDS,','))
    SELECT @countValue = COUNT(*) FROM  MAPPING_DETAILS B1 WHERE  B1.STATUS = 'Active' AND SUBJECT_ID in (select * from FN_SPLITTREENODEIDS(@SUBIDS,','))
    IF @tempValue <> 0
    BEGIN
       select  @CodeNameString = COALESCE(@CodeNameString + ',', '')  + Cast(subject_id as varchar) from SUBJECT_DETAILS where parent_subject_id in (select * from FN_SPLITTREENODEIDS(@SUBIDS, ','))
       set @countValue = @countValue + (select * from FN_MAPCOUNT(@CodeNameString,@countValue))
    END
    ELSE
     BEGIN
        set @countValue  = @countValue
     END
     INSERT @TEMPTABLE (cntValue) VALUES (@countValue)
    RETURN
end
GO

--CHECK IF FUNCTION ALREADY EXISTS OR NOT IN SELECTED DATABASE, IF EXISTS DROP AND RECREATE THE FUNCTION
IF (OBJECTPROPERTY(OBJECT_ID('FN_PUBLISHMAPCOUNT'),'ISTABLEFUNCTION') = 1)
BEGIN
	DROP FUNCTION FN_PUBLISHMAPCOUNT
END
GO

CREATE FUNCTION [FN_PUBLISHMAPCOUNT]
(
    @SUBIDS VARCHAR(MAX),
    @countValue int,
    @effectiveDate datetime
)
RETURNS @TEMPTABLE Table(cntValue int)
as
begin
    DECLARE @tempValue int
    DECLARE @CodeNameString nvarchar(max)
    select @tempValue = count(*) from SUBJECT_DETAILS where parent_subject_id in (select * from FN_SPLITTREENODEIDS(@SUBIDS,','))
    IF @effectiveDate <> ''
    BEGIN
       SELECT @countValue = COUNT(*) FROM  MAPPING_DETAILS B1 WHERE  B1.ISPUBLISHED = 'Y'
       AND B1.EFFECTIVE_DATE = @effectiveDate AND SUBJECT_ID in (select * from FN_SPLITTREENODEIDS(@SUBIDS,','))
    END
    ELSE
    BEGIN
        SELECT @countValue = COUNT(*) FROM  MAPPING_DETAILS B1 WHERE  B1.ISPUBLISHED = 'Y' AND B1.EFFECTIVE_DATE <= GETDATE() AND SUBJECT_ID in (select * from FN_SPLITTREENODEIDS(@SUBIDS,','))
    END
    IF @tempValue <> 0
    BEGIN
       select  @CodeNameString = COALESCE(@CodeNameString + ',', '')  + Cast(subject_id as varchar) from SUBJECT_DETAILS where parent_subject_id in (select * from FN_SPLITTREENODEIDS(@SUBIDS, ','))
       set @countValue = @countValue + (select * from FN_PUBLISHMAPCOUNT(@CodeNameString,@countValue,@effectiveDate))
    END
    ELSE
     BEGIN
        set @countValue  = @countValue
     END
     INSERT @TEMPTABLE (cntValue) VALUES (@countValue)
    RETURN
end
GO


--CHECK IF FUNCTION ALREADY EXISTS OR NOT IN SELECTED DATABASE, IF EXISTS DROP AND RECREATE THE FUNCTION
IF (OBJECTPROPERTY(OBJECT_ID('FN_NOTELIGIBLEMAPS'),'ISTABLEFUNCTION') = 1)
BEGIN
	DROP FUNCTION FN_NOTELIGIBLEMAPS
END
GO

-- FUNCTION FOR FIND PUBLISH COUNT IN EDIT MODE AND VIEW MODE
CREATE FUNCTION [FN_NOTELIGIBLEMAPS]
(

)
RETURNS @TEMPTABLE TABLE (
  map_id int
)
AS
BEGIN
  ;
  WITH tgt (map_id, tgt_env, tgt_env1, tgt_sys, tgt_sys1)
  AS (SELECT
    ms.map_id,
    LEFT(ms.TGT_SYSTEM_ENVIRONMENT_NAME, CHARINDEX(CHAR(10), ms.TGT_SYSTEM_ENVIRONMENT_NAME + CHAR(10)) - 1),
    STUFF(ms.TGT_SYSTEM_ENVIRONMENT_NAME, 1, CHARINDEX(CHAR(10), ms.TGT_SYSTEM_ENVIRONMENT_NAME + CHAR(10)), ''),
    LEFT(ms.TGT_SYSTEM_NAME, CHARINDEX(CHAR(10), ms.TGT_SYSTEM_NAME + CHAR(10)) - 1),
    STUFF(ms.TGT_SYSTEM_NAME, 1, CHARINDEX(CHAR(10), ms.TGT_SYSTEM_NAME + CHAR(10)), '')
  FROM MAPPING_SPECIFICATION ms join MAPPING_DETAILS md on (ms.MAP_ID = md.MAP_ID AND md.STATUS = 'Active' AND  MD.ISPUBLISHED = 'N')
  WHERE (COALESCE(ms.TGT_SYSTEM_ENVIRONMENT_NAME, NULL, '') <> ''
  OR COALESCE(ms.TGT_SYSTEM_NAME, NULL, '') <> ''
  )
  UNION ALL
  SELECT
    map_id,
    LEFT(tgt_env1, CHARINDEX(CHAR(10), tgt_env1 + CHAR(10)) - 1),
    STUFF(tgt_env1, 1, CHARINDEX(CHAR(10), tgt_env1 + CHAR(10)), ''),
    LEFT(tgt_sys1, CHARINDEX(CHAR(10), tgt_sys1 + CHAR(10)) - 1),
    STUFF(tgt_sys1, 1, CHARINDEX(CHAR(10), tgt_sys1 + CHAR(10)), '')
  FROM tgt ms
  WHERE tgt_env1 > ''
  OR tgt_sys1 > '')
  ,
  src (MAP_ID, src_env, src_env1, src_sys, src_sys1)
  AS (SELECT
    ms.map_id,
    LEFT(ms.SRC_SYSTEM_ENVIRONMENT_NAME, CHARINDEX(CHAR(10), ms.SRC_SYSTEM_ENVIRONMENT_NAME + CHAR(10)) - 1),
    STUFF(ms.SRC_SYSTEM_ENVIRONMENT_NAME, 1, CHARINDEX(CHAR(10), ms.SRC_SYSTEM_ENVIRONMENT_NAME + CHAR(10)), ''),
    LEFT(ms.SRC_SYSTEM_NAME, CHARINDEX(CHAR(10), ms.SRC_SYSTEM_NAME + CHAR(10)) - 1),
    STUFF(ms.SRC_SYSTEM_NAME, 1, CHARINDEX(CHAR(10), ms.SRC_SYSTEM_NAME + CHAR(10)), '')
  FROM MAPPING_SPECIFICATION ms join MAPPING_DETAILS md on (ms.MAP_ID = md.MAP_ID AND md.STATUS = 'Active')
  WHERE (COALESCE(ms.SRC_SYSTEM_ENVIRONMENT_NAME, NULL, '') <> ''
  OR COALESCE(ms.SRC_SYSTEM_NAME, NULL, '') <> ''
  )
  UNION ALL
  SELECT
    map_id,
    LEFT(src_env1, CHARINDEX(CHAR(10), src_env1 + CHAR(10)) - 1),
    STUFF(src_env1, 1, CHARINDEX(CHAR(10), src_env1 + CHAR(10)), ''),
    LEFT(src_sys1, CHARINDEX(CHAR(10), src_sys1 + CHAR(10)) - 1),
    STUFF(src_sys1, 1, CHARINDEX(CHAR(10), src_sys1 + CHAR(10)), '')
  FROM src ms
  WHERE src_env1 > ''
  OR src_sys1 > '')

  INSERT @TEMPTABLE (map_id)
    ( SELECT DISTINCT
      MAP_ID FROM (
          SELECT DISTINCT
        MAP_ID,
        tgt_env SYS_ENV_NAME,
        tgt_sys SYS_NAME
        FROM tgt
        UNION
        SELECT DISTINCT
          MAP_ID,
          src_env SYS_ENV_NAME,
          src_sys SYS_NAME
        FROM src
      )CTE
    WHERE (UPPER((CTE.SYS_NAME)+'.'+(CTE.SYS_ENV_NAME)) NOT IN
    (SELECT UPPER(SDD.SYSTEM_NAME +'.'+SE.SYSTEM_ENVIRONMENT_NAME)
    FROM SYSTEM_DEFINITION_DETAILS SDD ,
      SYS_CON_ENVIRONMENTS se
    WHERE sdd.system_id           = se.system_id
    AND COALESCE(SE.PROD_ENVIRONMENT_NAME, NULL, '') <> ''
    ))

    )
  RETURN
END
GO


--CHECK IF FUNCTION ALREADY EXISTS OR NOT IN SELECTED DATABASE, IF EXISTS DROP AND RECREATE THE FUNCTION
IF (OBJECTPROPERTY(OBJECT_ID('FN_ELIGIBLEMAPCOUNT'),'ISTABLEFUNCTION') = 1)
BEGIN
	DROP FUNCTION FN_ELIGIBLEMAPCOUNT
END
GO

CREATE FUNCTION [FN_ELIGIBLEMAPCOUNT]
(
    @SUBIDS VARCHAR(MAX),
    @countValue int
)
RETURNS @TEMPTABLE Table(cntValue int)
as
begin
    DECLARE @tempValue int
    DECLARE @CodeNameString nvarchar(max)
    select @tempValue = count(*) from SUBJECT_DETAILS where parent_subject_id in (select * from FN_SPLITTREENODEIDS(@SUBIDS,','))
    SELECT @countValue = COUNT(*) FROM  MAPPING_DETAILS B1 WHERE ((B1.ISPUBLISHED = 'N') AND (B1.STATUS = 'Active') AND (B1.MAP_ID not in (select map_id from FN_NOTELIGIBLEMAPS()))
    AND (SUBJECT_ID in (select * from FN_SPLITTREENODEIDS(@SUBIDS,','))) AND B1.MAP_ID in (select distinct map_id from mapping_specification ms
    WHERE ((COALESCE(ms.TGT_SYSTEM_ENVIRONMENT_NAME,NULL,'') <> '' AND COALESCE(ms.TGT_SYSTEM_NAME,NULL,'') <> '' )
    OR (COALESCE(ms.SRC_SYSTEM_ENVIRONMENT_NAME,NULL,'')    <> '' AND COALESCE(ms.SRC_SYSTEM_NAME,NULL,'')  <> '') )))
    IF @tempValue <> 0
    BEGIN
       select  @CodeNameString = COALESCE(@CodeNameString + ',', '')  + Cast(subject_id as varchar) from SUBJECT_DETAILS where parent_subject_id in (select * from FN_SPLITTREENODEIDS(@SUBIDS, ','))
       set @countValue = @countValue + (select * from FN_ELIGIBLEMAPCOUNT(@CodeNameString,@countValue))
    END
    ELSE
     BEGIN
        set @countValue  = @countValue
     END
     INSERT @TEMPTABLE (cntValue) VALUES (@countValue)
    RETURN
end
GO

IF NOT EXISTS(SELECT * FROM SYS.VIEWS WHERE NAME = 'V_CSM_CODE_DETAILS')
BEGIN
   EXEC ('  CREATE  VIEW V_CSM_CODE_DETAILS (CODE_ID, CODE_STND_VALUE, CODE_NAME, SYSTEM_NAME, CODESET_NAME, CATEGORY_NAME)
	AS
	  SELECT C.CODE_ID,
	    C.CODE_STND_VALUE,
	    C.CODE_NAME,
	    ISNULL(C.SYSTEM_NAME,SYSTEM_ENV_NAME) AS SYSTEM_NAME,
	    B.CODESET_NAME,
	    A.CATEGORY_NAME
	  FROM CSM_CATEGORY A JOIN CSM_CODESET B
          ON A.CATEGORY_ID = B.CATEGORY_ID
	  JOIN CSM_CODE_VALUE C
	  ON B.CODESET_ID    = C.CODESET_ID;');
END
GO

IF NOT EXISTS (SELECT * FROM SYSOBJECTS WHERE  ID = OBJECT_ID(N'RDM_REF_TAB_USERDEFINED') AND TYPE = 'U')
BEGIN
      EXECUTE ('CREATE TABLE RDM_REF_TAB_USERDEFINED
		  (
		    RDM_REF_TABLE_UD_ID  INT IDENTITY(1,1) NOT NULL,
		    RDM_REF_TABLE_ID     BIGINT NOT NULL ,
		    USER_DEFINED_FIELD1  VARCHAR(4000),
		    USER_DEFINED_FIELD2  VARCHAR(4000),
		    USER_DEFINED_FIELD3  VARCHAR(4000),
		    USER_DEFINED_FIELD4  VARCHAR(4000),
		    USER_DEFINED_FIELD5  VARCHAR(4000),
		    USER_DEFINED_FIELD6  VARCHAR(4000),
		    USER_DEFINED_FIELD7  VARCHAR(4000),
		    USER_DEFINED_FIELD8  VARCHAR(4000),
		    USER_DEFINED_FIELD9  VARCHAR(4000),
		    USER_DEFINED_FIELD10 VARCHAR(4000),
		    CONSTRAINT PK_RDM_TABLE_UD_ID PRIMARY KEY (RDM_REF_TABLE_UD_ID) ,
		    CONSTRAINT FK_RDM_REF_TAB_USERDEFINED FOREIGN KEY (RDM_REF_TABLE_ID) REFERENCES RDM_REFERENCE_TABLE (RDM_REF_TABLE_ID) ON  DELETE CASCADE
		  )')
      END
GO

IF EXISTS(SELECT * FROM SYS.VIEWS WHERE NAME = 'VIEW_REF_TABLE')
BEGIN
   EXEC ('ALTER VIEW VIEW_REF_TABLE (RDM_CATEGORY_NAME, RDM_REF_TABLE_ID, RDM_REF_TABLE_NAME, RDM_REF_TABLE_DESC, RDM_REF_TAB_OWNER,RDM_REF_TAB_VER_DESC, RDM_REF_TAB_VER_LABEL, CREATED_BY, CREATED_DATE, MODIFIED_BY, MODIFIED_DATE, USER_DEFINED_FIELD1, USER_DEFINED_FIELD2, USER_DEFINED_FIELD3, USER_DEFINED_FIELD4, USER_DEFINED_FIELD5, USER_DEFINED_FIELD6, USER_DEFINED_FIELD7, USER_DEFINED_FIELD8, USER_DEFINED_FIELD9, USER_DEFINED_FIELD10)
AS
  SELECT RDM_CATEGORY_NAME,
    rdm_reference_table.RDM_REF_TABLE_ID,
    RDM_REF_TABLE_NAME+''(''+cast (RDM_REF_TAB_VERSION as varchar)+'')'',
    RDM_REF_TABLE_DESC,
    RDM_REF_TAB_OWNER,
    RDM_REF_TAB_VER_DESC,
    RDM_REF_TAB_VER_LABEL,
    rdm_reference_table.CREATED_BY,
    rdm_reference_table.CREATED_DATE,
    rdm_reference_table.MODIFIED_BY,
    rdm_reference_table.MODIFIED_DATE,
    USER_DEFINED_FIELD1,
    USER_DEFINED_FIELD2,
    USER_DEFINED_FIELD3,
    USER_DEFINED_FIELD4,
    USER_DEFINED_FIELD5,
    USER_DEFINED_FIELD6,
    USER_DEFINED_FIELD7,
    USER_DEFINED_FIELD8,
    USER_DEFINED_FIELD9,
    USER_DEFINED_FIELD10
  FROM rdm_reference_table JOIN rdm_category
  ON rdm_reference_table.rdm_ref_table_cat_id = rdm_category.rdm_category_id
  JOIN RDM_REF_TAB_USERDEFINED
  ON rdm_reference_table.rdm_ref_table_id = rdm_ref_tab_userdefined.rdm_ref_table_id;');
END
GO

IF EXISTS(SELECT * FROM SYS.VIEWS WHERE NAME = 'VIEW_REF_TAB_COL_VALUES')
BEGIN
   EXEC ('ALTER VIEW VIEW_REF_TAB_COL_VALUES (RDM_CATEGORY_NAME, RDM_REF_TABLE_NAME, RDM_REF_TAB_COL_NAME, RDM_REF_TAB_COL_VALUE, CREATED_BY, CREATED_DATE, MODIFIED_DATE, MODIFIED_BY)
AS
  SELECT D.rdm_category_name,
    A.RDM_REF_TABLE_NAME+''(''+cast (A.RDM_REF_TAB_VERSION as varchar)+'')'',
    B.RDM_REF_TAB_COL_NAME,
    C.RDM_REF_TAB_COL_VALUE,
    C.CREATED_BY,
    C.CREATED_DATE,
    C.MODIFIED_DATE,
    C.MODIFIED_BY
  FROM rdm_reference_table A JOIN RDM_REF_TAB_COLUMNS B
  ON A.RDM_REF_TABLE_ID = B.RDM_REF_TAB_ID
  JOIN RDM_REF_TAB_COL_VALUES C
  ON B.RDM_REF_TAB_COL_ID = C.RDM_REF_TAB_COL_ID
  JOIN rdm_category D 
  ON d.rdm_category_id    = a.rdm_ref_table_cat_id
');
END
GO

IF EXISTS(SELECT * FROM SYS.VIEWS WHERE NAME = 'VIEW_REF_TAB_COLUMN')
BEGIN
   EXEC ('ALTER VIEW VIEW_REF_TAB_COLUMN (RDM_CATEGORY_NAME, RDM_REF_TABLE_NAME, RDM_REF_TAB_COL_NAME, CREATED_BY, CREATED_DATE, MODIFIED_DATE, MODIFIED_BY)
AS
  SELECT c.rdm_category_name,
    A.RDM_REF_TABLE_NAME+''(''+cast (A.RDM_REF_TAB_VERSION as varchar)+'')'',
    B.RDM_REF_TAB_COL_NAME,
    B.CREATED_BY,
    B.CREATED_DATE,
    B.MODIFIED_DATE,
    B.MODIFIED_BY
  FROM rdm_reference_table A JOIN RDM_REF_TAB_COLUMNS B
  ON A.RDM_REF_TABLE_ID = B.RDM_REF_TAB_ID
  JOIN rdm_category C
  ON C.rdm_category_id    = A.rdm_ref_table_cat_id
');
END
GO


 IF NOT EXISTS (SELECT *
	       FROM   SYSOBJECTS
	       WHERE  ID = OBJECT_ID(N'RM_PROMOTE_SYS_CON_ENVS')
		      AND TYPE = 'U')
  BEGIN
      EXECUTE (' CREATE TABLE RM_PROMOTE_SYS_CON_ENVS (   SYSTEM_ID INT NOT NULL , RM_ENVIRONMENT_ID INT NOT NULL , PROMOTE_SYSTEM_ID INT , PROMOTE_SYS_ENV_NAME VARCHAR(50) , SYSTEM_ENVIRONMENT_NAME VARCHAR(50) NOT NULL,   CONSTRAINT RM_ENV_R_PK PRIMARY KEY(SYSTEM_ID , SYSTEM_ENVIRONMENT_NAME,RM_ENVIRONMENT_ID),   CONSTRAINT RM_ENV_R_FK1 FOREIGN KEY (RM_ENVIRONMENT_ID) REFERENCES  RM_ENVIRONMENT (ENVIRONMENTID) ON DELETE CASCADE      ,   CONSTRAINT RM_SYSCON_FK1 FOREIGN KEY (SYSTEM_ID , SYSTEM_ENVIRONMENT_NAME ) REFERENCES  SYS_CON_ENVIRONMENTS (SYSTEM_ID , SYSTEM_ENVIRONMENT_NAME) ON DELETE CASCADE  ) ')

  END
GO


IF (SELECT COUNT(*) FROM RM_HISTORYTYPE) = 11
BEGIN
 INSERT INTO RM_HISTORYTYPE (HISTORYTYPENAME, HISTORYTYPEDESC)
( SELECT 'Promote', 'Promote Record'
       UNION ALL
 SELECT 'Publish', 'Publish Record' );
 END
 GO


IF COL_LENGTH('RM_ENVIRONMENT', 'ENVIRONMENTCOLOR') IS NULL
BEGIN
   ALTER TABLE [RM_ENVIRONMENT] ADD [ENVIRONMENTCOLOR] VARCHAR(7)  NULL
END
GO

IF COL_LENGTH('RM_HISTORY', 'FROM_ENV') IS NULL
BEGIN
   ALTER TABLE [RM_HISTORY] ADD [FROM_ENV] int  NULL
END
GO


IF COL_LENGTH('RM_HISTORY', 'TO_ENV') IS NULL
BEGIN
   ALTER TABLE [RM_HISTORY] ADD [TO_ENV] int  NULL
END
GO




IF COL_LENGTH('RM_HISTORY', 'FROM_MAPID') IS NULL
BEGIN
   ALTER TABLE [RM_HISTORY] ADD [FROM_MAPID] int  NULL
END
GO


IF COL_LENGTH('RM_HISTORY', 'TO_MAPID') IS NULL
BEGIN
   ALTER TABLE [RM_HISTORY] ADD [TO_MAPID] int  NULL
END
GO
IF NOT EXISTS (SELECT * FROM SYSOBJECTS WHERE  ID = OBJECT_ID(N'RDM_REF_FOLDER_USERS') AND TYPE = 'U')
  BEGIN
	EXECUTE('CREATE TABLE RDM_REF_FOLDER_USERS
	  (
	    RDM_REF_CAT_USR_ID BIGINT IDENTITY(1,1) NOT NULL,
	    RDM_REF_CAT_ID     BIGINT NOT NULL,
	    USER_ID            VARCHAR(20) NOT NULL,
	    CREATED_BY         VARCHAR(100) NOT NULL,
	    CREATED_DATE DATETIME NOT NULL,
	    MODIFIED_BY VARCHAR(100),
	    MODIFIED_DATE DATETIME,
	    CONSTRAINT PK_RDM_REF_FOLDER_USERS PRIMARY KEY (RDM_REF_CAT_USR_ID),
	    CONSTRAINT FK_RDM_USR_CAT_ID FOREIGN KEY (RDM_REF_CAT_ID) REFERENCES RDM_CATEGORY (RDM_CATEGORY_ID) ON  DELETE CASCADE
	  )')
  END
GO

IF COL_LENGTH('CSM_MAPPING_DETAILS', 'CSM_MAP_LOCK_STATUS') IS NULL
    BEGIN
        EXECUTE('ALTER TABLE CSM_MAPPING_DETAILS ADD CSM_MAP_LOCK_STATUS CHAR(1) DEFAULT ''N''');
        EXECUTE('UPDATE CSM_MAPPING_DETAILS SET CSM_MAP_LOCK_STATUS=''N''');
    END
GO

IF COL_LENGTH('CSM_MAPPING_DETAILS', 'CSM_MAP_LOCKED_BY') IS NULL
    BEGIN
        EXECUTE('ALTER TABLE CSM_MAPPING_DETAILS ADD CSM_MAP_LOCKED_BY VARCHAR(20) NULL');
    END
GO

IF COL_LENGTH('CSM_CODESET', 'CODESET_LOCK_STATUS') IS NULL
    BEGIN
        EXECUTE('ALTER TABLE CSM_CODESET ADD CODESET_LOCK_STATUS CHAR(1) DEFAULT ''N''');
        EXECUTE('UPDATE CSM_CODESET SET CODESET_LOCK_STATUS=''N''');
    END
GO

IF COL_LENGTH('CSM_CODESET', 'CODESET_LOCKED_BY') IS NULL
    BEGIN
        EXECUTE('ALTER TABLE CSM_CODESET ADD CODESET_LOCKED_BY VARCHAR(20) NULL');
    END
GO

IF NOT EXISTS (SELECT * FROM SYSOBJECTS WHERE  ID = OBJECT_ID(N'CSM_MAP_CAT_USERS') AND TYPE = 'U')
  BEGIN
	EXECUTE('CREATE TABLE CSM_MAP_CAT_USERS
	  (
	    CSM_MAP_CAT_USR_ID BIGINT IDENTITY(1,1) NOT NULL,
	    CSM_MAP_CAT_ID     BIGINT NOT NULL,
	    USER_ID            VARCHAR(20) NOT NULL,
	    CREATED_BY         VARCHAR(100) NOT NULL,
	    CREATED_DATE DATETIME NOT NULL,
	    MODIFIED_BY VARCHAR(100),
	    MODIFIED_DATE DATETIME,
	    CONSTRAINT PK_CSM_MAP_CAT_USER_ID PRIMARY KEY (CSM_MAP_CAT_USR_ID),
	    CONSTRAINT FK_CSM_MAP_USR_CAT_ID FOREIGN KEY (CSM_MAP_CAT_ID) REFERENCES CSM_MAP_CATEGORY (CSM_MAP_CAT_ID) ON  DELETE CASCADE,
	    CONSTRAINT FK_CSM_MAP_USER_ID FOREIGN KEY (USER_ID) REFERENCES USERS (USER_ID) ON  DELETE CASCADE
	  )')
  END
GO

IF NOT EXISTS (SELECT * FROM SYSOBJECTS WHERE  ID = OBJECT_ID(N'CSM_CODESET_CAT_USERS') AND TYPE = 'U')
  BEGIN
	EXECUTE('CREATE TABLE CSM_CODESET_CAT_USERS
	  (
	    CSM_CDST_CAT_USR_ID BIGINT IDENTITY(1,1) NOT NULL,
	    CATEGORY_ID     BIGINT NOT NULL,
	    USER_ID            VARCHAR(20) NOT NULL,
	    CREATED_BY         VARCHAR(100) NOT NULL,
	    CREATED_DATE DATETIME NOT NULL,
	    MODIFIED_BY VARCHAR(100),
	    MODIFIED_DATE DATETIME,
	    CONSTRAINT PK_CSM_CDST_CAT_USR_ID PRIMARY KEY (CSM_CDST_CAT_USR_ID),
	    CONSTRAINT FK_CSM_CDST_USR_CAT_ID FOREIGN KEY (CATEGORY_ID) REFERENCES CSM_CATEGORY (CATEGORY_ID) ON DELETE CASCADE,
	    CONSTRAINT FK_CSM_CDST_USR_ID FOREIGN KEY (USER_ID) REFERENCES USERS (USER_ID) ON DELETE CASCADE
	  )')
  END
GO

IF EXISTS (SELECT * FROM ADS_MM_VERSION WHERE VALUE <= '5.3')
BEGIN
    IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = 'TEMP_CSM_CODESET')
    BEGIN
        EXECUTE('ALTER TABLE TEMP_CSM_CODESET DROP CONSTRAINT FK_CATEGORY_CATEGORY_ID');
        EXECUTE('ALTER TABLE [RDM_COLUMN_CODESETS] DROP CONSTRAINT FK_RDM_COLUMN_CS');
        EXECUTE('ALTER TABLE [CSM_CODESET_PUBLISH_HISTORY] DROP CONSTRAINT FK_CSM_PUB_CODESET_ID');
        EXECUTE('ALTER TABLE [CSM_CODESET_CAT_USERS] DROP CONSTRAINT FK_CSM_CDST_USR_CAT_ID');
        EXECUTE('ALTER TABLE [CSM_MAP_PUBLISH_HISTORY] DROP CONSTRAINT FK_CSM_PUB_MAP_ID');
        EXECUTE('DROP TABLE TEMP_CSM_CODESET');
        EXECUTE('DROP TABLE TEMP_CSM_CATEGORY');
        EXECUTE('DROP TABLE TEMP_CSM_MAPPING_DETLS');
        --EXECUTE('ALTER TABLE [CSM_CODESET]   ADD  CONSTRAINT [FK_CATEGORY_CATEGORY_ID] FOREIGN KEY([CATEGORY_ID]) REFERENCES [CSM_CATEGORY] ([CATEGORY_ID])');
        --EXECUTE('ALTER TABLE [CSM_CODESET] CHECK CONSTRAINT [FK_CATEGORY_CATEGORY_ID]');
        EXECUTE('ALTER TABLE RDM_COLUMN_CODESETS ADD CONSTRAINT FK_RDM_COLUMN_CS FOREIGN KEY (RDM_CODESET_ID) REFERENCES CSM_CODESET (CODESET_ID) ON DELETE CASCADE');
        EXECUTE('ALTER TABLE CSM_CODESET_CAT_USERS ADD CONSTRAINT FK_CSM_CDST_USR_CAT_ID FOREIGN KEY (CATEGORY_ID) REFERENCES CSM_CATEGORY (CATEGORY_ID) ON DELETE CASCADE');
        EXECUTE('ALTER TABLE CSM_CODESET_PUBLISH_HISTORY ADD CONSTRAINT FK_CSM_PUB_CODESET_ID FOREIGN KEY (CSM_CODESET_ID) REFERENCES CSM_CODESET (CODESET_ID) ON  DELETE CASCADE');
        EXECUTE('ALTER TABLE CSM_MAP_PUBLISH_HISTORY ADD CONSTRAINT FK_CSM_PUB_MAP_ID FOREIGN KEY (CSM_MAP_ID) REFERENCES CSM_MAPPING_DETAILS (CSM_MAP_ID) ON  DELETE CASCADE');
    END
END
GO

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS WHERE CONSTRAINT_NAME='FK_CSM_MAPDTLS_CAT_ID' AND TABLE_NAME='CSM_MAPPING_DETAILS')
EXECUTE('ALTER TABLE CSM_MAPPING_DETAILS  ADD  CONSTRAINT FK_CSM_MAPDTLS_CAT_ID FOREIGN KEY(CSM_MAP_CAT_ID) REFERENCES CSM_MAP_CATEGORY (CSM_MAP_CAT_ID) ON DELETE CASCADE')

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS WHERE CONSTRAINT_NAME='UK_CSM_MAP_NAME_CAT_ID' AND TABLE_NAME='CSM_MAPPING_DETAILS')
EXECUTE('ALTER TABLE CSM_MAPPING_DETAILS  ADD  CONSTRAINT UK_CSM_MAP_NAME_CAT_ID UNIQUE (CSM_MAP_CAT_ID,CSM_MAP_NAME,CSM_MAP_VERSION)')
GO

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS WHERE CONSTRAINT_NAME='UK_CSM_CAT_NAME_ID' AND TABLE_NAME='CSM_CATEGORY')
EXECUTE('ALTER TABLE CSM_CATEGORY  ADD  CONSTRAINT UK_CSM_CAT_NAME_ID UNIQUE (CATEGORY_ID,CATEGORY_NAME)')
GO

IF EXISTS (SELECT * FROM LANGUAGE_PREFERENCES WHERE  KEY_ID = 'com.ads.mm.tm.tableflexfieds')
    BEGIN
        UPDATE LANGUAGE_PREFERENCES SET KEY_DESCRIPTION = 'User Defined Fields' , ENGLISH = 'User Defined Fields' WHERE  KEY_ID = 'com.ads.mm.tm.tableflexfieds';
    END
GO
IF NOT EXISTS(SELECT * FROM SYS.VIEWS WHERE NAME = 'MAPPINGTESTSTATUS')
BEGIN
   EXEC ('CREATE VIEW [MAPPINGTESTSTATUS]
	AS
	  SELECT CASE
		   WHEN TEST_DISPOSITION = ''U'' THEN ''UNASSIGNED''
		   ELSE CASE
			  WHEN TEST_DISPOSITION = ''P'' THEN ''PASSED''
			  ELSE CASE
				 WHEN TEST_DISPOSITION = ''F'' THEN ''FAILED''
				 ELSE CASE
					WHEN TEST_DISPOSITION = ''A'' THEN
					''NEEDS ANALYSIS''
					ELSE ''''
				      END
			       END
			END
		 END                AS TESTSTATUS,
		 MAP_ID,
		 MAP_NAME,
		 MAP_SPEC_VERSION,
                 VERSIONLABEL,
		 TESTING_NOTES,
		 PROJECT_ID,
		 PROJECT.PROJ_NAME  AS PROJECTNAME,
		 PROJECT.PROJ_DESCR AS PROJECTDESCRIPTION,
		 STATUS             AS MAPPINGSTATUS
	  FROM   MAPPING_DETAILS
		 LEFT JOIN PROJECT
		   ON PROJECT.PROJ_ID = MAPPING_DETAILS.PROJECT_ID');
END
GO
IF COL_LENGTH('MAPPING_SPECIFICATION', 'BASE_SRC_SYS_ENVIRONMENT_NAME') IS NULL
    BEGIN
        EXECUTE('ALTER TABLE MAPPING_SPECIFICATION ADD BASE_SRC_SYS_ENVIRONMENT_NAME VARCHAR(MAX) NULL');
    END
GO

IF COL_LENGTH('MAPPING_SPECIFICATION', 'BASE_SRC_SYSTEM_NAME') IS NULL
    BEGIN
        EXECUTE('ALTER TABLE MAPPING_SPECIFICATION ADD BASE_SRC_SYSTEM_NAME VARCHAR(MAX) NULL');
    END
GO

IF COL_LENGTH('MAPPING_SPECIFICATION', 'BASE_TGT_SYS_ENVIRONMENT_NAME') IS NULL
    BEGIN
        EXECUTE('ALTER TABLE MAPPING_SPECIFICATION ADD BASE_TGT_SYS_ENVIRONMENT_NAME VARCHAR(MAX) NULL');
    END
GO

IF COL_LENGTH('MAPPING_SPECIFICATION', 'BASE_TGT_SYSTEM_NAME') IS NULL
    BEGIN
        EXECUTE('ALTER TABLE MAPPING_SPECIFICATION ADD BASE_TGT_SYSTEM_NAME VARCHAR(MAX) NULL ');
    END
GO

IF COL_LENGTH('MAPPING_DETAILS', 'RM_ENVIRONMENT_ID') IS NULL
    BEGIN
       ALTER TABLE MAPPING_DETAILS ADD RM_ENVIRONMENT_ID INT NULL
       ALTER TABLE [MAPPING_DETAILS]
       ADD CONSTRAINT [FK_RM_ENV_ENVIRONMENT_ID]
       FOREIGN KEY ([RM_ENVIRONMENT_ID])
       REFERENCES [RM_ENVIRONMENT] ( [ENVIRONMENTID] )
    END
GO

  IF COL_LENGTH('RM_ENVIRONMENT', 'ENVIRONMENTTYPE') IS NULL
    BEGIN
        EXECUTE('ALTER TABLE RM_ENVIRONMENT ADD ENVIRONMENTTYPE VARCHAR(20) NULL ');
    END;
GO



IF (SELECT COUNT(*) FROM RM_ENVIRONMENT  WHERE ENVIRONMENTNAME='DEV') = 1
  BEGIN
     UPDATE RM_ENVIRONMENT SET ENVIRONMENTTYPE='DEV' WHERE ENVIRONMENTNAME='DEV'
END;
GO

IF (SELECT COUNT(*) FROM RM_ENVIRONMENT  WHERE ENVIRONMENTNAME='DEV') = 0
  BEGIN
     INSERT INTO RM_ENVIRONMENT (ENVIRONMENTNAME,ENVIRONMENTTYPE)VALUES('DEV','DEV');
END;
GO


IF (SELECT COUNT(*) FROM RM_ENVIRONMENT  WHERE ENVIRONMENTNAME='PROD') = 1
  BEGIN
     UPDATE RM_ENVIRONMENT SET ENVIRONMENTTYPE='PROD' WHERE ENVIRONMENTNAME='PROD'

END;
GO

IF (SELECT COUNT(*) FROM RM_ENVIRONMENT  WHERE ENVIRONMENTNAME='PROD') = 0
  BEGIN
     INSERT INTO RM_ENVIRONMENT (ENVIRONMENTNAME,ENVIRONMENTTYPE)VALUES('PROD','PROD');
END;
GO
-- DELETE FROM SPECIFICATION_LOCK;
-- GO
IF NOT EXISTS (SELECT *
	       FROM   SYSOBJECTS
	       WHERE  ID = OBJECT_ID(N'TEMP_STRUT')
		      AND TYPE = 'U')
    BEGIN
        EXECUTE ('CREATE TABLE TEMP_STRUT (
    RDM_REF_TAB_COL_NAME VARCHAR(4000),
	RDM_REF_TAB_COL_VALUE VARCHAR(4000),
	RDM_TAB_COL_VAL_ROW_ORDER BIGINT )')
    END
GO


IF NOT EXISTS (SELECT * FROM sys.objects WHERE type = 'P' AND name = 'RDM_CREATE_VAL_TABLES')
      exec('CREATE PROCEDURE RDM_CREATE_VAL_TABLES
@TAB_ID bigint
AS
BEGIN
DECLARE @TEMP_TAB_NAME VARCHAR(4000), @IMAX BIGINT, @TEMP_COL_NAME VARCHAR(4000),@i int, @TEMPSQL varchar(4000),
@TEMPCNT BIGINT, @tempcolcnt bigint, @TEMP_COL_VAL VARCHAR(4000);

IF EXISTS (SELECT * FROM   SYSOBJECTS WHERE  ID = OBJECT_ID(N''TEMP_STRUT'') AND TYPE = ''U'')
EXECUTE(''TRUNCATE TABLE TEMP_STRUT'');
EXECUTE(''INSERT INTO TEMP_STRUT
		SELECT RDM_REF_TAB_COL_NAME, RDM_REF_TAB_COL_VALUE, RDM_TAB_COL_VAL_ROW_ORDER
        FROM RDM_REFERENCE_TABLE A, RDM_REF_TAB_COLUMNS C, RDM_REF_TAB_COL_VALUES D
        WHERE A.RDM_REF_TABLE_ID = C.RDM_REF_TAB_ID AND C.RDM_REF_TAB_COL_ID = D.RDM_REF_TAB_COL_ID
        AND A.RDM_REF_TABLE_ID = '' + @TAB_ID + ''
        ORDER BY RDM_REF_TAB_COL_ORDER, RDM_REF_TAB_COL_NAME, RDM_TAB_COL_VAL_ROW_ORDER'');

SELECT @TEMP_TAB_NAME = (SELECT RDM_REF_TABLE_NAME FROM RDM_REFERENCE_TABLE WHERE RDM_REF_TABLE_ID = @TAB_ID);

IF OBJECT_ID ( @TEMP_TAB_NAME, ''U'' ) IS NOT NULL
EXECUTE(''DROP TABLE '' + @TEMP_TAB_NAME);

SELECT @IMAX = (SELECT DISTINCT COUNT(RDM_REF_TAB_COL_NAME)
FROM RDM_REFERENCE_TABLE A, RDM_REF_TAB_COLUMNS B
WHERE A.RDM_REF_TABLE_ID = B.RDM_REF_TAB_ID
AND A.RDM_REF_TABLE_ID = @TAB_ID);

SET @i = 1
SELECT @TEMPSQL = ''CREATE TABLE ''+ @TEMP_TAB_NAME + ''( ROW_NUM VARCHAR(4000), ''

WHILE (@i <= @IMAX)
BEGIN

select @TEMP_COL_NAME = (SELECT DISTINCT RDM_REF_TAB_COL_NAME
FROM RDM_REFERENCE_TABLE A, RDM_REF_TAB_COLUMNS B
WHERE A.RDM_REF_TABLE_ID = B.RDM_REF_TAB_ID
AND A.RDM_REF_TABLE_ID = @TAB_ID AND B.RDM_REF_TAB_COL_ORDER = @i);

SELECT @TEMPSQL = @TEMPSQL + ''[''+ @TEMP_COL_NAME + ''] VARCHAR(4000) '';

IF (@i < @imax)
SELECT @TEMPSQL = @TEMPSQL + '' , ''

SET @i = @i + 1

END

SELECT @TEMPSQL = @TEMPSQL + '' )'';

EXECUTE (@TEMPSQL)

SELECT @TEMPCNT = (SELECT MAX(RDM_TAB_COL_VAL_ROW_ORDER) FROM TEMP_STRUT)
SET @i = 1

WHILE (@i <= @TEMPCNT)
BEGIN
SELECT @TEMPSQL = ''INSERT INTO '' + @TEMP_TAB_NAME + '' VALUES ( '' + QUOTENAME(@i, CHAR(39)) + '', ''
SELECT @TEMP_COL_VAL = (SELECT SUBSTRING((SELECT '','' + QUOTENAME(RDM_REF_TAB_COL_VALUE, CHAR(39)) FROM TEMP_STRUT WHERE RDM_TAB_COL_VAL_ROW_ORDER = @i FOR XML PATH('''')),2,200000))

SELECT @TEMPSQL = @TEMPSQL + @TEMP_COL_VAL + '' )''

EXECUTE (@TEMPSQL)

SET @i = @i + 1
END

END')
GO



IF (OBJECTPROPERTY(OBJECT_ID('RM_MAP_COUNT'),'ISTABLEFUNCTION') = 1)
BEGIN
	DROP FUNCTION RM_MAP_COUNT
END
GO

CREATE FUNCTION [RM_MAP_COUNT]
(
    @SUBIDS VARCHAR(MAX),
    @countValue int
)
RETURNS @TEMPTABLE Table(cntValue int)
as
begin
    DECLARE @tempValue int
    DECLARE @CodeNameString nvarchar(max)
    select @tempValue = count(*) from SUBJECT_DETAILS where parent_subject_id in (select * from FN_SPLITTREENODEIDS(@SUBIDS,','))
    SELECT @countValue = COUNT(*) FROM  MAPPING_DETAILS B1 WHERE ((B1.ISPUBLISHED = 'N') AND (B1.STATUS = 'Active')
    AND (SUBJECT_ID in (select * from FN_SPLITTREENODEIDS(@SUBIDS,','))) AND B1.MAP_ID in (select distinct map_id from mapping_specification ms
    WHERE ((COALESCE(ms.TGT_SYSTEM_ENVIRONMENT_NAME,NULL,'') <> '' AND COALESCE(ms.TGT_SYSTEM_NAME,NULL,'') <> '' )
    OR (COALESCE(ms.SRC_SYSTEM_ENVIRONMENT_NAME,NULL,'')    <> '' AND COALESCE(ms.SRC_SYSTEM_NAME,NULL,'')  <> '') )) AND B1.MAP_ID NOT IN
        (SELECT MAP_ID FROM SPECIFICATION_LOCK WHERE ISSPECIFICATION_LOCK = 'Y'
        )
      AND B1.MAP_ID NOT IN
        (SELECT COALESCE(MAP_ID,NULL,0) FROM RM_MIGRATIONOBJECT
        ))
    IF @tempValue <> 0
    BEGIN
       select  @CodeNameString = COALESCE(@CodeNameString + ',', '')  + Cast(subject_id as varchar) from SUBJECT_DETAILS where parent_subject_id in (select * from FN_SPLITTREENODEIDS(@SUBIDS, ','))
       set @countValue = @countValue + (select * from RM_MAP_COUNT(@CodeNameString,@countValue))
    END
    ELSE
     BEGIN
        set @countValue  = @countValue
     END
     INSERT @TEMPTABLE (cntValue) VALUES (@countValue)
    RETURN
end
GO
IF COL_LENGTH('SYS_CON_ENVIRONMENTS', 'TABLE_DISPLAY_FLAG') IS NULL
BEGIN
   EXEC('ALTER TABLE [SYS_CON_ENVIRONMENTS] ADD [TABLE_DISPLAY_FLAG] char(1) DEFAULT ''N'' NULL')
   EXEC('UPDATE SYS_CON_ENVIRONMENTS SET TABLE_DISPLAY_FLAG = ''Y''')
END
GO
IF COL_LENGTH('SYS_CON_ENVIRONMENTS', 'VIEW_DISPLAY_FLAG') IS NULL
BEGIN
   EXEC('ALTER TABLE [SYS_CON_ENVIRONMENTS] ADD [VIEW_DISPLAY_FLAG] char(1) DEFAULT ''N'' NULL')
   EXEC('UPDATE SYS_CON_ENVIRONMENTS SET VIEW_DISPLAY_FLAG = ''Y''')
END
GO
IF COL_LENGTH('SYS_CON_ENVIRONMENTS', 'SYNONYM_DISPLAY_FLAG') IS NULL
BEGIN
   EXEC('ALTER TABLE [SYS_CON_ENVIRONMENTS] ADD [SYNONYM_DISPLAY_FLAG] char(1) DEFAULT ''N'' NULL')
   EXEC('UPDATE SYS_CON_ENVIRONMENTS SET SYNONYM_DISPLAY_FLAG = ''Y''')
END
GO
IF NOT EXISTS (SELECT *
	       FROM   SYSOBJECTS
	       WHERE  ID = OBJECT_ID(N'CAT_TEMPLATES')
		      AND TYPE = 'U')
  BEGIN
      EXECUTE ('CREATE TABLE CAT_TEMPLATES
        (
          CAT_ID                 INT IDENTITY(1,1) NOT NULL,
          CAT_NAME               VARCHAR(100) NOT NULL,
          CAT_SCRIPTING_LANGUAGE VARCHAR(25) NOT NULL,
          CAT_DESC               VARCHAR(500) NULL,
          CAT_IMAGE image NULL,
          CAT_STOCK_IMAGE VARCHAR(50) NULL,
          CAT_ENABLED CHAR DEFAULT 0 NOT NULL,
          CAT_TAB_ID VARCHAR(MAX) NULL,
          CAT_SYSTEM_BASED CHAR DEFAULT 0 NOT NULL,
          CAT_SCRIPT              VARCHAR(MAX) NULL,
          CAT_ACTION              VARCHAR(500) NULL,
          CREATED_BY              VARCHAR(50) NOT NULL,
          CREATED_DATE_TIME       DATETIME NOT NULL,
          LAST_MODIFIED_BY        VARCHAR(50) NOT NULL,
          LAST_MODIFIED_DATE_TIME DATETIME NOT NULL,
          CAT_TEMPLATE_ORDER FLOAT DEFAULT 1.0 NOT NULL,
          CAT_OUTPUT_CONTENT_TYPE   VARCHAR(50) NOT NULL,
          CAT_OUTPUT_FILE_EXTENSION VARCHAR(50) NOT NULL,
          CAT_ENABLE_FILE_UPLOAD_DIALOG CHAR DEFAULT 0 NOT NULL,
          CAT_ENABLE_MAPPING_DIALOG CHAR DEFAULT 0 NOT NULL,
          CAT_ENABLE_METADATA_DIALOG CHAR DEFAULT 0 NOT NULL,
          CAT_MAPPING_LEVEL CHAR DEFAULT 0 NOT NULL,
          CAT_METADATA_LEVEL CHAR DEFAULT 0 NOT NULL,
          CAT_ENCRYPTED CHAR DEFAULT 0 NOT NULL,
          CAT_IMPORTED CHAR DEFAULT 0 NOT NULL,
          CONSTRAINT PK_CAT_TEMPLATES PRIMARY KEY CLUSTERED ( CAT_ID ASC )
        )')
  END
GO
IF NOT EXISTS(SELECT * FROM CAT_TEMPLATES WHERE CAT_ID = 1)
	INSERT INTO CAT_TEMPLATES(CAT_NAME,CAT_DESC,CAT_IMAGE,CAT_STOCK_IMAGE,CAT_ENABLED,CAT_TAB_ID,CAT_SYSTEM_BASED,CAT_SCRIPT,CAT_ACTION,CREATED_BY,CREATED_DATE_TIME,LAST_MODIFIED_BY,LAST_MODIFIED_DATE_TIME,CAT_TEMPLATE_ORDER,CAT_SCRIPTING_LANGUAGE,CAT_OUTPUT_CONTENT_TYPE,CAT_OUTPUT_FILE_EXTENSION,CAT_ENABLE_MAPPING_DIALOG)
	SELECT 'Microsoft SSIS DTSX', 'SSIS Default XML',NULL, 'ssis/defaultxml.png', '1', 'com.ads.mm.stb.ssis', '1', NULL, 'MappingManager.ads?action=exportToSSISDTSX&ssisExportOption=SSISDefaultXML', 'AnalytiX Data Services', CURRENT_TIMESTAMP, 'AnalytiX Data Services', CURRENT_TIMESTAMP, '1', 'Java', 'XML', '.xml', 1
	UNION ALL
	SELECT 'Microsoft SSIS DTSX', 'SSIS Include SQL Expression', NULL, 'ssis/sqlextractxml.png', '1', 'com.ads.mm.stb.ssis', '1', NULL, 'MappingManager.ads?action=exportToSSISDTSX&ssisExportOption=SSISSQLXML', 'AnalytiX Data Services', CURRENT_TIMESTAMP, 'AnalytiX Data Services', CURRENT_TIMESTAMP, '3', 'Java', 'XML', '.xml', 1
	UNION ALL
	SELECT 'Datastage 7.5 Parallel Job', 'Datastage 7.5 Parallel Job', NULL, 'ds/datastage4.png', '1', 'com.ads.mm.stb.datastage', '1', NULL, 'MappingManager.ads?action=exportToDSTG&dstgVersionOption=DSTGVersion7.5&exportType=PARALLELJOB', 'AnalytiX Data Services', CURRENT_TIMESTAMP, 'AnalytiX Data Services', CURRENT_TIMESTAMP, '1', 'Java', 'XML', '.xml', 1
	UNION ALL
	SELECT 'Datastage 7.5 Server Job', 'Datastage 7.5 Server Job', NULL, 'ds/datastage3.png', '1', 'com.ads.mm.stb.datastage', '1', NULL, 'MappingManager.ads?action=exportToDSTG&dstgVersionOption=DSTGVersion7.5&exportType=SERVERJOB', 'AnalytiX Data Services', CURRENT_TIMESTAMP, 'AnalytiX Data Services', CURRENT_TIMESTAMP, '3', 'Java', 'XML', '.xml', 1
	UNION ALL
	SELECT 'Datastage 8.0 Parallel Job', 'Datastage 8.0 Parallel Job', NULL, 'ds/datastage6.png', '1', 'com.ads.mm.stb.datastage', '1', NULL, 'MappingManager.ads?action=exportToDSTG&dstgVersionOption=DSTGVersion8.x&exportType=PARALLELJOB&dstgExportOption=DSTGDefaultXML', 'AnalytiX Data Services', CURRENT_TIMESTAMP, 'AnalytiX Data Services', CURRENT_TIMESTAMP, '4', 'Java', 'XML', '.xml', 1
	UNION ALL
	SELECT 'Datastage 8.0 Server Job', 'Datastage 8.0 Server Job', NULL, 'ds/datastage5.png', '1', 'com.ads.mm.stb.datastage', '1', NULL, 'MappingManager.ads?action=exportToDSTG&dstgVersionOption=DSTGVersion8.x&exportType=SERVERJOB&dstgExportOption=DSTGDefaultXML', 'AnalytiX Data Services', CURRENT_TIMESTAMP, 'AnalytiX Data Services', CURRENT_TIMESTAMP, '5', 'Java', 'XML', '.xml', 1
	UNION ALL
	SELECT 'Datastage 8.0 Parallel Job Include Sql Expression Datastage 8.0', 'Parallel Job Include Sql Expression', NULL, 'ds/datastage2.png', '1', 'com.ads.mm.stb.datastage', '1', NULL, 'MappingManager.ads?action=exportToDSTG&dstgVersionOption=DSTGVersion8.x&exportType=PARALLELJOB&dstgExportOption=DSTGSQLXML', 'AnalytiX Data Services', CURRENT_TIMESTAMP, 'AnalytiX Data Services', CURRENT_TIMESTAMP, '6', 'Java', 'XML', '.xml', 1
	UNION ALL
	SELECT 'Datastage 8.0 Server Job Include Sql Expression	Datastage 8.0', 'Server Job Include Sql Expression', NULL, 'ds/datastage1.png', '1', 'com.ads.mm.stb.datastage', '1', NULL, 'MappingManager.ads?action=exportToDSTG&dstgVersionOption=DSTGVersion8.x&exportType=SERVERJOB&dstgExportOption=DSTGSQLXML', 'AnalytiX Data Services', CURRENT_TIMESTAMP, 'AnalytiX Data Services', CURRENT_TIMESTAMP, '2', 'Java', 'XML', '.xml', 1
	UNION ALL
	SELECT 'Standard Informatica', 'Standard Informatica', NULL, 'inf/normal.png', '1', 'com.ads.mm.stb.informatica', '1', NULL, 'MappingManager.ads?action=exportXml', 'AnalytiX Data Services', CURRENT_TIMESTAMP, 'AnalytiX Data Services', CURRENT_TIMESTAMP, '1', 'Java', 'XML', '.xml', 1
	UNION ALL
	SELECT 'Mapping Manager XML', 'Mapping Manager XML', NULL, 'mm/defaultxml.png', '1', 'com.ads.mm.stb.mappingmanager', '1', NULL, 'MappingManager.ads?action=exportAll&exportType=MappingManagerXML', 'AnalytiX Data Services', CURRENT_TIMESTAMP, 'AnalytiX Data Services', CURRENT_TIMESTAMP, '1', 'Java', 'XML', '.xml', 1
        UNION ALL
        SELECT 'Standard ODI', 'Standard ODI', NULL, 'odi/odi.png', '1', 'com.ads.mm.stb.odi', '1', NULL, 'MappingManager.ads?action=exportODIXML', 'AnalytiX Data Services', CURRENT_TIMESTAMP, 'AnalytiX Data Services', CURRENT_TIMESTAMP, '1', 'Java', 'XML', '.xml', 1
	UNION ALL
	SELECT 'DV2_STAGE_LOAD', 'This script takes a SOURCE TO STAGE mapping and generates the appropriate staging table load code.  The source and the staging table must be in SQLServer, and must be in the same instance of SQLServer.  The generated code executes hash key and hash difference computations, adds load dates, and record sources before loading the staging data.', NULL, 'rapidgends/RapidGenDS.png', '1', 'com.ads.mm.stb.rapidgends', '1', NULL, 'NULL', 'RapidGenDS', CURRENT_TIMESTAMP, 'RapidGenDS', CURRENT_TIMESTAMP, '1', 'JRuby', 'SQL', '.sql', 1
	UNION ALL
	SELECT 'DV2_HUB_LINK_LOAD', 'This script takes a STAGING table input (source in the MAPPING design), and generates a HUB or a LINK target view, so that the view can be used /called in conjunction with inserts to the target directly.    The source and target are required to be in the same instance of SQLServer.', NULL, 'rapidgends/RapidGenDS.png', '1', 'com.ads.mm.stb.rapidgends', '1', NULL, 'NULL', 'RapidGenDS', CURRENT_TIMESTAMP, 'RapidGenDS', CURRENT_TIMESTAMP, '2', 'JRuby', 'SQL', '.sql', 1
	UNION ALL
	SELECT 'DV2_SATELLITE_LOAD', 'This script takes a STAGING table input (source in the mapping design), and generates a SATELLITE load target view, so that the view can be used/called in conjunction with inserts to the target Satellite table directly.  The source and target are required to be in the same instance of SQLServer.', NULL, 'rapidgends/RapidGenDS.png', '1', 'com.ads.mm.stb.rapidgends', '1', NULL, 'NULL', 'RapidGenDS', CURRENT_TIMESTAMP, 'RapidGenDS', CURRENT_TIMESTAMP, '3', 'JRuby', 'SQL', '.sql', 1
        UNION ALL
        SELECT 'DV2_SATELLITE_END_DATE', 'This script takes a single target Satellite (the Satellite is both the source and the target at the same time), and generates 1) a select statement for a view, to pull the keys that need end-dating, and 2) also generates an UPDATE stored procedure, to execute the end-dating process.', NULL, 'rapidgends/RapidGenDS.png', '1', 'com.ads.mm.stb.rapidgends', '1', NULL, 'NULL', 'RapidGenDS', CURRENT_TIMESTAMP, 'RapidGenDS', CURRENT_TIMESTAMP, '4', 'JRuby', 'SQL', '.sql', 1
        UNION ALL
        SELECT 'Sample Data Profile By ColumnName', 'Sample SQL Server Data profiling CAT script that shows how to do a basic profile against the tables in your selected mapping.', NULL, 'cat/DataProfiling.png', '1', 'com.ads.mm.stb.dataprofiling', '1', NULL, 'NULL', ' AnalytiX Data Services', CURRENT_TIMESTAMP, ' AnalytiX Data Services', CURRENT_TIMESTAMP, '1', 'Javascript', 'SQL', '.sql', 1
GO
IF (SELECT COUNT(*) FROM ADS_MODULES) < 7
BEGIN
    INSERT INTO ADS_MODULES(MODULE_ID, MODULE_NAME, MODULE_KEY, MODULE_ORDER, MODULE_FORWARD)
    SELECT 7, 'Code Automation Templates', 'com.ads.mm.permission.cat', 7, 'codeautomationtemplate'
END
GO
IF (SELECT COUNT(*) FROM APP_PREFERENCES) < 18
BEGIN
INSERT INTO APP_PREFERENCES(PREFERENCE_NAME,PREFERENCE_VALUE)
    SELECT 'ADD_COMMENTS_ON_COPY_MAP','true'
    UNION ALL
    SELECT 'ADD_COMMENTS_ON_MERGE_MAP','true'
    UNION ALL
    SELECT 'ADD_COMMENTS_ON_NEW_MAP_CREATION','true'
    UNION ALL
    SELECT 'ADD_COMMENTS_ON_NEW_VERSION_CREATION','true'
    UNION ALL
    SELECT 'ADD_COMMENTS_ON_UPLOAD_XML_MAP_CREATION','true'
    UNION ALL
    SELECT 'ADD_COMMENTS_ON_BASE_LINE','true'
    UNION ALL
    SELECT 'SEND_EMAIL_ON_COPY_MAP','true'
    UNION ALL
    SELECT 'SEND_EMAIL_ON_COPY_MAP_MESSAGE','Hi,<br><br>This is a system generated email notification. <br><br><b>A MAPPING HAS BEEN CREATED/UPDATED USING THE COPY/PASTE FUNCTIONALITY.</b><br> <br><TABLE style=''border-bottom: #600 1px solid; border-left: #600 1px solid; border-spacing: 1px; font-family: Tahoma; font-size: 10pt; border-top: #600 1px solid; border-right: #600 1px solid'' border=1 cellPadding=5><TR><TD>DETAILS</TD><TD>ORIGIN</TD><TD>DESTINATION</TD></TR> <TR><TD><B>Project Name:</B></TD><TD>@sourceProjectName@</TD><TD>@targetProjectName@</TD></TR> <TR><TD><B>Subject Name:</B></TD><TD>@sourceSubjectName@</TD><TD>@targetSubjectName@</TD></TR> <TR><TD><B>Mapping Name:</B></TD><TD>@sourceMappingName@</TD><TD>@targetMappingName@</TD></TR> <TR><TD><B>Mapping Id:</B></TD><TD>@sourceMappingId@</TD><TD>@targetMappingId@</TD></TR> <TR><TD><B>Mapping Version:</B></TD><TD>@sourceMappingVersion@</TD><TD>@targetMappingVersion@</TD></TR> <TR><TD><B>Created By:</B></TD><TD>@sourceMappingCreatedBy@</TD><TD>@targetMappingCreatedBy@</TD></TR> <TR><TD><B>Created Date:</B></TD><TD>@sourceMappingCreatedDate@</TD><TD>@targetMappingCreatedDate@</TD></TR> <TR><TD><B>Modifed By:</B></TD><TD>@sourceMappingModifiedBy@</TD><TD>@targetMappingModifiedBy@</TD></TR> <TR><TD><B>Modified Date:</B></TD><TD>@sourceMappingModifiedDate@</TD><TD>@targetMappingModifiedDate@</TD></TR></TABLE><BR><br><b>Comments:<b><br>@comments@ <BR><BR>Note: This mailbox is not monitored. DO NOT REPLY TO THIS EMAIL.'
    UNION ALL
    SELECT 'SEND_EMAIL_ON_COPY_MAP_SUBJECT','Copied Mapping Details – DO NOT REPLY'
    UNION ALL
    SELECT 'SEND_EMAIL_ON_MERGE_MAP','true'
    UNION ALL
    SELECT 'SEND_EMAIL_ON_MERGE_MAP_MESSAGE','Hi,<br><br>This is a system generated email notification. <br><br><b>A MAPPING HAS BEEN MERGED WITH UPDATES FROM ANOTHER MAPPING.</b><br> <br><TABLE style=''border-bottom: #600 1px solid; border-left: #600 1px solid; border-spacing: 1px; font-family: Tahoma; font-size: 10pt; border-top: #600 1px solid; border-right: #600 1px solid'' border=1 cellPadding=5><TR><TD>DETAILS</TD><TD>ORIGIN</TD><TD>DESTINATION</TD></TR> <TR><TD><B>Project Name:</B></TD><TD>@sourceProjectName@</TD><TD>@targetProjectName@</TD></TR> <TR><TD><B>Subject Name:</B></TD><TD>@sourceSubjectName@</TD><TD>@targetSubjectName@</TD></TR> <TR><TD><B>Mapping Name:</B></TD><TD>@sourceMappingName@</TD><TD>@targetMappingName@</TD></TR> <TR><TD><B>Mapping Id:</B></TD><TD>@sourceMappingId@</TD><TD>@targetMappingId@</TD></TR> <TR><TD><B>Mapping Version:</B></TD><TD>@sourceMappingVersion@</TD><TD>@targetMappingVersion@</TD></TR> <TR><TD><B>Created By:</B></TD><TD>@sourceMappingCreatedBy@</TD><TD>@targetMappingCreatedBy@</TD></TR> <TR><TD><B>Created Date:</B></TD><TD>@sourceMappingCreatedDate@</TD><TD>@targetMappingCreatedDate@</TD></TR> <TR><TD><B>Modifed By:</B></TD><TD>@sourceMappingModifiedBy@</TD><TD>@targetMappingModifiedBy@</TD></TR> <TR><TD><B>Modified Date:</B></TD><TD>@sourceMappingModifiedDate@</TD><TD>@targetMappingModifiedDate@</TD></TR></TABLE><BR> <br><b>Comments:<b><br>@comments@ <BR><BR>Note: This mailbox is not monitored. DO NOT REPLY TO THIS EMAIL.'
    UNION ALL
    SELECT 'SEND_EMAIL_ON_MERGE_MAP_SUBJECT','Merged Mapping Details – DO NOT REPLY'
    UNION ALL
    SELECT 'SEND_EMAIL_ON_NEW_MAP_CREATION','true'
    UNION ALL
    SELECT 'SEND_EMAIL_ON_NEW_MAP_CREATION_MESSAGE','Hi,<br><br>This is a system generated email notification. <br><br><b>A NEW MAPPING HAS BEEN CREATED.</b><br><br><B>Project Name :</B>@targetProjectName@ <br><B>Subject Name:</B> @targetSubjectName@ <br><B>Mapping Name:</B>@targetMappingName@ <br><B>Mapping Id:</B> @targetMappingId@ <br><B>Mapping Version:</B>@targetMappingVersion@ <br><B>Created By:</B> @targetMappingCreatedBy@ <br><B>Created Date:</B>@targetMappingCreatedDate@ <br><B>Modified By:</B>@targetMappingModifiedBy@<br><B>Modified Date:</B> @targetMappingModifiedDate@<br><br><b>Comments:<b><br>@comments@<BR><BR>Note: This mailbox is not monitored. DO NOT REPLY TO THIS EMAIL.'
    UNION ALL
    SELECT 'SEND_EMAIL_ON_NEW_MAP_CREATION_SUBJECT','New Mapping Details – DO NOT REPLY'
    UNION ALL
    SELECT 'SEND_EMAIL_ON_NEW_VERSION_CREATION','true'
    UNION ALL
    SELECT 'SEND_EMAIL_ON_NEW_VERSION_CREATION_MESSAGE','Hi,<br><br>This is a system generated email notification. <br><br><b>A MAPPING HAS BEEN VERSIONED.</b><br><br><B>Project Name :</B>@targetProjectName@ <br><B>Subject Name:</B> @targetSubjectName@ <br><B>Mapping Name:</B>@targetMappingName@ <br><B>Mapping Id:</B> @targetMappingId@ <br><B>Mapping Version:</B>@targetMappingVersion@ <br><B>Created By:</B> @targetMappingCreatedBy@ <br><B>Created Date:</B>@targetMappingCreatedDate@ <br><B>Modified By:</B>@targetMappingModifiedBy@<br><B>Modified Date:</B> @targetMappingModifiedDate@<br><br><b>Comments:<b><br>@comments@<BR><BR>Note: This mailbox is not monitored. DO NOT REPLY TO THIS EMAIL.'
    UNION ALL
    SELECT 'SEND_EMAIL_ON_NEW_VERSION_CREATION_SUBJECT',  'New Version Details – DO NOT REPLY'
    UNION ALL
    SELECT 'SEND_EMAIL_ON_UPLOAD_XML_MAP_CREATION',  'true'
    UNION ALL
    SELECT 'SEND_EMAIL_ON_UPLOAD_XML_MAP_CREATION_MESSAGE',  'Hi,<br><br>This is a system generated email notification. <br><br><b>A MAPPING HAS BEEN CREATED USING THE XML UPLOAD FUNCTIONALITY.</b><br><br><B>Project Name :</B>@targetProjectName@ <br><B>Subject Name:</B> @targetSubjectName@ <br><B>Mapping Name:</B>@targetMappingName@ <br><B>Mapping Id:</B> @targetMappingId@ <br><B>Mapping Version:</B>@targetMappingVersion@ <br><B>Created By:</B> @targetMappingCreatedBy@ <br><B>Created Date:</B>@targetMappingCreatedDate@ <br><B>Modified By:</B>@targetMappingModifiedBy@<br><B>Modified Date:</B> @targetMappingModifiedDate@<br><br><b>Comments:<b><br>@comments@<BR><BR>Note: This mailbox is not monitored. DO NOT REPLY TO THIS EMAIL.'
    UNION ALL
    SELECT 'SEND_EMAIL_ON_UPLOAD_XML_MAP_CREATION_SUBJECT',  'XML Mapping Details – DO NOT REPLY '
    UNION ALL
    SELECT 'SEND_EMAIL_ON_BASE_LINE','true'
    UNION ALL
    SELECT 'SEND_EMAIL_ON_BASE_LINE_SUBJECT','Project Baseline Details – DO NOT REPLY'
    UNION ALL
    SELECT 'SEND_EMAIL_ON_BASE_LINE_MESSAGE','Hi,<br><br>This is a system generated email notification. <br><br><b>A NEW PROJECT BASELINE HAS BEEN INITIATED.</b><br><br><B>Project Name :</B>@targetProjectName@ <br><B>Baseline Version:</B> @targetBaselineVersion@ <br><B>Project Created By:</B> @projectCreatedBy@ <br><B>Project Created On:</B>@projectCreatedDate@ <br><B>Project Baselined By:</B>@projectBaselinedBy@<br><B>Project Baselined On:</B> @projectBaselinedOn@<br><B>Baseline Label :</B>@baselineLabel@ <br><B>Baseline Description:</B>@baselineDesc@<br><br><b>Comments:<b><br>@comments@<BR><BR>Note: This mailbox is not monitored. DO NOT REPLY TO THIS EMAIL.'
END
GO
IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'SECURITY_ROLES' AND COLUMN_NAME = 'ROLE_NAME' AND CHARACTER_MAXIMUM_LENGTH = '20')
    BEGIN
        ALTER TABLE SECURITY_ROLES  ALTER COLUMN ROLE_NAME VARCHAR(50)
    END
GO
IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'PROJECT_DOCUMENTS' AND COLUMN_NAME = 'PROJ_DOC_NAME' AND CHARACTER_MAXIMUM_LENGTH = '50')
    BEGIN
        ALTER TABLE PROJECT_DOCUMENTS  ALTER COLUMN PROJ_DOC_NAME VARCHAR(255)
    END
GO
IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'SYSTEM_DOCUMENTS' AND COLUMN_NAME = 'SYS_DOC_NAME' AND CHARACTER_MAXIMUM_LENGTH = '50')
    BEGIN
        ALTER TABLE SYSTEM_DOCUMENTS  ALTER COLUMN SYS_DOC_NAME VARCHAR(255)
    END
GO
IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'MAPPING_DETAILS' AND COLUMN_NAME = 'VERSIONLABEL' AND CHARACTER_MAXIMUM_LENGTH = '20')
    BEGIN
        ALTER TABLE MAPPING_DETAILS  ALTER COLUMN VERSIONLABEL VARCHAR(100)
    END
GO
IF EXISTS (SELECT * FROM LANGUAGE_PREFERENCES WHERE KEY_ID = 'com.ads.mm.permission.rdm.folder.table.publish' AND ENGLISH = 'Publish')
    BEGIN
        Update Language_Preferences set ENGLISH = 'Publish/Unpublish', KEY_DESCRIPTION='Publish/Unpublish' where KEY_ID = 'com.ads.mm.permission.rdm.folder.table.publish'
    END
GO
IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS WHERE CONSTRAINT_NAME='UK_CODENAME_CAT_VER_ID' AND TABLE_NAME='CSM_CODESET')
    EXECUTE('ALTER TABLE CSM_CODESET  ADD  CONSTRAINT UK_CODENAME_CAT_VER_ID UNIQUE (CATEGORY_ID,CODESET_NAME,CODESET_VERSION)')
GO
IF COL_LENGTH('MAPPING_SPECIFICATION', 'SRC_TABLE_CLASS') IS NULL
BEGIN
ALTER TABLE MAPPING_SPECIFICATION ADD SRC_TABLE_CLASS varchar(255) NULL
EXECUTE('DELETE FROM USER_PREFERENCES WHERE USER_ID LIKE ''%HEADER_ORDER_PREFERENCE%''');
EXECUTE('DELETE FROM USER_PREFERENCES WHERE USER_ID LIKE ''%HEADER_VISIBILITY_PREFERENCE%''');
EXECUTE('DELETE FROM USER_PREFERENCES WHERE USER_ID IN (SELECT USER_ID FROM USERS)');
-- EXECUTE('DELETE FROM USER_PREFERENCES WHERE USER_ID IN (SELECT USER_ID FROM USERS)');
END
GO
IF COL_LENGTH('MAPPING_SPECIFICATION', 'TGT_TABLE_CLASS') IS NULL
BEGIN
ALTER TABLE MAPPING_SPECIFICATION ADD TGT_TABLE_CLASS varchar(255) NULL
END
GO
IF COL_LENGTH('MAPPING_SPECIFICATION', 'SRC_COLUMN_CLASS') IS NULL
BEGIN
ALTER TABLE MAPPING_SPECIFICATION ADD SRC_COLUMN_CLASS varchar(255) NULL
END
GO
IF COL_LENGTH('MAPPING_SPECIFICATION', 'TGT_COLUMN_CLASS') IS NULL
BEGIN
ALTER TABLE MAPPING_SPECIFICATION ADD TGT_COLUMN_CLASS varchar(255) NULL
END
GO
IF COL_LENGTH('MAPPING_SPECIFICATION', 'SRC_BUSINESS_KEY_FLAG') IS NULL
BEGIN
ALTER TABLE MAPPING_SPECIFICATION ADD SRC_BUSINESS_KEY_FLAG char(1) NULL
END
GO
IF COL_LENGTH('MAPPING_SPECIFICATION', 'TGT_BUSINESS_KEY_FLAG') IS NULL
BEGIN
ALTER TABLE MAPPING_SPECIFICATION ADD TGT_BUSINESS_KEY_FLAG char(1) NULL
END
GO
IF COL_LENGTH('SYSTEM_TABLE_COLUMNS_METADATA', 'COLUMN_CLASS') IS NULL
BEGIN
ALTER TABLE SYSTEM_TABLE_COLUMNS_METADATA ADD COLUMN_CLASS varchar(255) NULL
END
GO
IF COL_LENGTH('SYSTEM_TABLE_COLUMNS_METADATA', 'BUSINESS_KEY_FLAG') IS NULL
BEGIN
ALTER TABLE SYSTEM_TABLE_COLUMNS_METADATA ADD BUSINESS_KEY_FLAG char(1) NULL
END
GO
IF COL_LENGTH('SYSTEM_TABLE_METADATA', 'TABLE_CLASS') IS NULL
BEGIN
ALTER TABLE SYSTEM_TABLE_METADATA ADD TABLE_CLASS varchar(255) NULL
END
GO
IF EXISTS(SELECT * FROM ADS_MM_VERSION WHERE [KEY]='AMM_VERSION_INSTALLED' AND VALUE = '4.5')
BEGIN
UPDATE ADS_MM_VERSION SET VALUE = '4.6' WHERE [KEY] = 'AMM_VERSION_INSTALLED'
END
GO
IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS WHERE CONSTRAINT_NAME='UK_RDM_TBL_CID_NAME_VER' AND TABLE_NAME='RDM_REFERENCE_TABLE')
    EXECUTE('ALTER TABLE RDM_REFERENCE_TABLE ADD CONSTRAINT UK_RDM_TBL_CID_NAME_VER UNIQUE (RDM_REF_TABLE_CAT_ID, RDM_REF_TABLE_NAME, RDM_REF_TAB_VERSION)')
GO

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS WHERE CONSTRAINT_NAME='UK_CODESET_PUB_HIST' AND TABLE_NAME='CSM_CODESET_PUBLISH_HISTORY')
    EXECUTE('ALTER TABLE CSM_CODESET_PUBLISH_HISTORY ADD CONSTRAINT UK_CODESET_PUB_HIST UNIQUE (CSM_CODESET_CAT_ID, CSM_CODESET_NAME, CSM_CODESET_VERSION, CSM_ENVIRONMENT_ID)')
GO

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS WHERE CONSTRAINT_NAME='UK_MAP_PUB_HISTORY' AND TABLE_NAME='CSM_MAP_PUBLISH_HISTORY')
    EXECUTE('ALTER TABLE CSM_MAP_PUBLISH_HISTORY ADD CONSTRAINT UK_MAP_PUB_HISTORY UNIQUE (CSM_MAP_CAT_ID, CSM_MAP_NAME, CSM_MAP_VERSION, CSM_ENVIRONMENT_ID)')
GO

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS WHERE CONSTRAINT_NAME='UK_RDM_TAB_PUB_HIST' AND TABLE_NAME='RDM_REF_TAB_PUBLISH_HISTORY')
    EXECUTE('ALTER TABLE RDM_REF_TAB_PUBLISH_HISTORY ADD CONSTRAINT UK_RDM_TAB_PUB_HIST UNIQUE(RDM_REF_TABLE_CAT_ID, RDM_REF_TABLE_NAME, RDM_REF_TAB_VERSION, RDM_ENVIRONMENT_ID)')
GO

IF COL_LENGTH('USERS', 'USER_THEME') IS NULL
BEGIN
    ALTER TABLE USERS ADD USER_THEME varchar(50) NULL;
END
GO

IF EXISTS (SELECT * FROM USERS WHERE USER_THEME IS NULL)
    BEGIN
        UPDATE USERS SET USER_THEME = 'DHTMLX_SKIN_SKYBLUE' WHERE USER_THEME IS NULL;
    END
GO
IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'SYSTEM_DEFINITION_DETAILS' AND COLUMN_NAME = 'SYSTEM_NAME' AND CHARACTER_MAXIMUM_LENGTH = '20')
    BEGIN
        ALTER TABLE SYSTEM_DEFINITION_DETAILS  ALTER COLUMN SYSTEM_NAME VARCHAR(50)
    END
GO

IF NOT EXISTS (SELECT * FROM   SYSOBJECTS WHERE  ID = OBJECT_ID(N'SM_CLASSIFICATION_TABLE') AND TYPE = 'U')
  BEGIN
      EXECUTE ('CREATE TABLE SM_CLASSIFICATION_TABLE   (     TABLE_CLASS_ID  BIGINT IDENTITY(1,1) NOT NULL,     TABLE_CLASS_NAME VARCHAR(255),     TABLE_CLASS_DESCRIPTION VARCHAR(4000),     CREATED_BY  VARCHAR(20),     CREATED_DATE_TIME DATETIME,     LAST_MODIFIED_BY VARCHAR(20),     LAST_MODIFIED_DATE_TIME DATETIME,     CONSTRAINT PK_SM_CLASSIFICATION_TABLE PRIMARY KEY (TABLE_CLASS_ID)   )')
  END
GO

IF NOT EXISTS (SELECT * FROM   SYSOBJECTS WHERE  ID = OBJECT_ID(N'SM_CLASSIFICATION_COLUMN') AND TYPE = 'U')
  BEGIN
      EXECUTE ('CREATE TABLE SM_CLASSIFICATION_COLUMN   (     COLUMN_CLASS_ID  BIGINT IDENTITY(1,1) NOT NULL,     COLUMN_CLASS_NAME VARCHAR(255),     COLUMN_CLASS_DESCRIPTION VARCHAR(4000),     CREATED_BY               VARCHAR(20),     CREATED_DATE_TIME DATETIME,     LAST_MODIFIED_BY VARCHAR(20),     LAST_MODIFIED_DATE_TIME DATETIME,     CONSTRAINT PK_SM_CLASSIFICATION_COLUMN PRIMARY KEY (COLUMN_CLASS_ID)   )')
  END
GO
IF (OBJECTPROPERTY(OBJECT_ID(N'[RDM_CREATE_COMPARE_TABLES]'),N'IsProcedure') = 1)
BEGIN
	DROP PROCEDURE RDM_CREATE_COMPARE_TABLES
END
GO

CREATE PROCEDURE [RDM_CREATE_COMPARE_TABLES]
@TAB_ID bigint,
@TAB_VER varchar(100)
AS
BEGIN
DECLARE @TEMP_TAB_NAME VARCHAR(100), @TMP_VAR VARCHAR(100), @IMAX BIGINT, @TEMP_COL_NAME VARCHAR(4000),@i int, @TEMPSQL varchar(4000),
@TEMPCNT BIGINT, @tempcolcnt bigint, @TEMP_COL_VAL VARCHAR(4000);

IF EXISTS (SELECT * FROM   SYSOBJECTS WHERE  ID = OBJECT_ID(N'TEMP_STRUT') AND TYPE = 'U')
EXECUTE('TRUNCATE TABLE TEMP_STRUT');
EXECUTE('INSERT INTO TEMP_STRUT
		SELECT RDM_REF_TAB_COL_NAME, RDM_REF_TAB_COL_VALUE, RDM_TAB_COL_VAL_ROW_ORDER
        FROM RDM_REFERENCE_TABLE A, RDM_REF_TAB_COLUMNS C, RDM_REF_TAB_COL_VALUES D
        WHERE A.RDM_REF_TABLE_ID = C.RDM_REF_TAB_ID AND C.RDM_REF_TAB_COL_ID = D.RDM_REF_TAB_COL_ID
        AND A.RDM_REF_TABLE_ID = ' + @TAB_ID + '
        ORDER BY RDM_REF_TAB_COL_ORDER, RDM_REF_TAB_COL_NAME, RDM_TAB_COL_VAL_ROW_ORDER');

SELECT @TEMP_TAB_NAME = (SELECT CAST(RDM_REF_TABLE_CAT_ID AS VARCHAR) FROM RDM_REFERENCE_TABLE WHERE RDM_REF_TABLE_ID = @TAB_ID);

SELECT @TMP_VAR = 'TEMP_' + @TEMP_TAB_NAME + CAST(@TAB_ID AS VARCHAR) + @TAB_VER;

IF OBJECT_ID ( @TMP_VAR, 'U' ) IS NOT NULL
EXECUTE('DROP TABLE ' + @TMP_VAR);

SELECT @IMAX = (SELECT DISTINCT COUNT(RDM_REF_TAB_COL_NAME)
FROM RDM_REFERENCE_TABLE A, RDM_REF_TAB_COLUMNS B
WHERE A.RDM_REF_TABLE_ID = B.RDM_REF_TAB_ID
AND A.RDM_REF_TABLE_ID = @TAB_ID);

SET @i = 1
SELECT @TEMPSQL = 'CREATE TABLE '+ @TMP_VAR + '( ROW_NUM VARCHAR(4000), '

WHILE (@i <= @IMAX)
BEGIN

select @TEMP_COL_NAME = (SELECT DISTINCT RDM_REF_TAB_COL_NAME
FROM RDM_REFERENCE_TABLE A, RDM_REF_TAB_COLUMNS B
WHERE A.RDM_REF_TABLE_ID = B.RDM_REF_TAB_ID
AND A.RDM_REF_TABLE_ID = @TAB_ID AND B.RDM_REF_TAB_COL_ORDER = @i);

SELECT @TEMPSQL = @TEMPSQL +'[' +@TEMP_COL_NAME + ']VARCHAR(4000) ';

IF (@i < @imax)
SELECT @TEMPSQL = @TEMPSQL + ' , '

SET @i = @i + 1

END

SELECT @TEMPSQL = @TEMPSQL + ' )';

EXECUTE (@TEMPSQL)

SELECT @TEMPCNT = (SELECT MAX(RDM_TAB_COL_VAL_ROW_ORDER) FROM TEMP_STRUT)
SET @i = 1

WHILE (@i <= @TEMPCNT)
BEGIN
SELECT @TEMPSQL = 'INSERT INTO ' + @TMP_VAR + ' VALUES ( ' + QUOTENAME(@i, CHAR(39)) + ', '
SELECT @TEMP_COL_VAL = (SELECT SUBSTRING((SELECT ',' + QUOTENAME(RDM_REF_TAB_COL_VALUE, CHAR(39)) FROM TEMP_STRUT WHERE RDM_TAB_COL_VAL_ROW_ORDER = @i FOR XML PATH('')),2,200000))

SELECT @TEMPSQL = @TEMPSQL + @TEMP_COL_VAL + ' )'

EXECUTE (@TEMPSQL)

SET @i = @i + 1
END
END
GO
with cte as (SELECT DISTINCT MAX(CSM_CODESET_ID) CSMCODESETID,
MAX(CSM_CODESET_VERSION) codesetversion,
csm_environment_id csmenvid FROM CSM_CODESET_PUBLISH_HISTORY GROUP BY CSM_ENVIRONMENT_ID  )
update CSM_CODESET_PUBLISH_HISTORY  set CSM_CODESET_NEW_VER_PUB = 'N' from
 cte
where cte.CSMCODESETID = CSM_CODESET_ID AND cte.csmenvid = CSM_ENVIRONMENT_ID
GO
IF (OBJECTPROPERTY(OBJECT_ID('FN_PARENTPATHSUBJECT'),'ISTABLEFUNCTION') = 1)
BEGIN
	DROP FUNCTION FN_PARENTPATHSUBJECT
END
GO

CREATE FUNCTION FN_PARENTPATHSUBJECT(@SUBJECT_ID INT)
RETURNS  @TEMPTABLE TABLE(SUBJECTHIERARCHY VARCHAR(MAX)) AS
BEGIN
  DECLARE @SUBJECTPATH VARCHAR(MAX);
  ;WITH CTE(PARENT_SUBJECT_ID) AS (SELECT C.PARENT_SUBJECT_ID FROM SUBJECT_DETAILS C WHERE C.SUBJECT_ID =@SUBJECT_ID
  UNION ALL
  SELECT C.PARENT_SUBJECT_ID
  FROM [CTE] P JOIN SUBJECT_DETAILS C
  ON C.SUBJECT_ID = P.PARENT_SUBJECT_ID)
          SELECT @SUBJECTPATH = STUFF(( SELECT  '/ ' + SUBJECT_NAME
                FROM    SUBJECT_DETAILS
                WHERE SUBJECT_ID IN
                (
                  SELECT PARENT_SUBJECT_ID FROM CTE
                  UNION
                  SELECT @SUBJECT_ID
                )
                ORDER BY PARENT_SUBJECT_ID FOR XML PATH('')
            ), 1, 1, '/');

         INSERT @TEMPTABLE (SUBJECTHIERARCHY) VALUES (@SUBJECTPATH)
         RETURN
END
GO

IF NOT EXISTS (SELECT * FROM SYSOBJECTS WHERE  ID = OBJECT_ID(N'CSM_MAPPING_SPEC_READONLY') AND TYPE = 'U')
  BEGIN
      EXECUTE('CREATE TABLE CSM_MAPPING_SPEC_READONLY
  (
    CSM_MAP_ID          BIGINT NOT NULL,
    SRC_CATEGORY_ID     INT,
    SRC_CATEGORY_NAME   VARCHAR(255),
    SRC_CODESET_ID      INT,
    SRC_CODESET_NAME    VARCHAR(100),
    SRC_CODESET_VERSION DECIMAL(16,2),
    SRC_CODE_ID         INT,
    SRC_CODE_NAME       VARCHAR(100),
    SRC_CODE_VALUE      VARCHAR(255),
    SRC_CODE_DESC       VARCHAR(4000),
    SRC_SYSTEM_ID       INT,
    SRC_SYSTEM_NAME     VARCHAR(50),
    SRC_SYS_ENV_NAME    VARCHAR(50),
    MAP_SEQ_ID          INT,
    TGT_CATEGORY_ID     INT,
    TGT_CATEGORY_NAME   VARCHAR(255),
    TGT_CODESET_ID      INT,
    TGT_CODESET_NAME    VARCHAR(255),
    TGT_CODESET_VERSION DECIMAL(16,2),
    TGT_CODE_ID         INT,
    TGT_CODE_NAME       VARCHAR(100),
    TGT_CODE_VALUE      VARCHAR(255),
    TGT_CODE_DESC       VARCHAR(4000),
    TGT_SYSTEM_ID       VARCHAR(20),
    TGT_SYSTEM_NAME     VARCHAR(50),
    TGT_SYS_ENV_NAME    VARCHAR(50),
    DELETE_FLAG         VARCHAR(1),
    PUBLISH_FLAG        VARCHAR(1),
    CREATED_BY          VARCHAR(50),
    CREATED_DATE DATETIME,
    MODIFIED_BY VARCHAR(50),
    MODIFIED_DATE DATETIME,
    CONSTRAINT CSM_MAP_SPEC_RO_FK FOREIGN KEY (CSM_MAP_ID) REFERENCES CSM_MAPPING_DETAILS (CSM_MAP_ID) ON DELETE CASCADE
  )');
 EXECUTE('INSERT
INTO CSM_MAPPING_SPEC_READONLY
  (
    CSM_MAP_ID,
    SRC_CATEGORY_ID,
    SRC_CATEGORY_NAME,
    SRC_CODESET_ID,
    SRC_CODESET_NAME,
    SRC_CODESET_VERSION,
    SRC_CODE_ID,
    SRC_CODE_NAME,
    SRC_CODE_VALUE,
    SRC_CODE_DESC,
    SRC_SYSTEM_ID,
    SRC_SYSTEM_NAME,
    SRC_SYS_ENV_NAME,
    MAP_SEQ_ID,
    TGT_CATEGORY_ID,
    TGT_CATEGORY_NAME,
    TGT_CODESET_ID,
    TGT_CODESET_NAME,
    TGT_CODESET_VERSION,
    TGT_CODE_ID,
    TGT_CODE_NAME,
    TGT_CODE_VALUE,
    TGT_CODE_DESC,
    TGT_SYSTEM_ID,
    TGT_SYSTEM_NAME,
    TGT_SYS_ENV_NAME,
    DELETE_FLAG,
    PUBLISH_FLAG,
    CREATED_BY,
    CREATED_DATE,
    MODIFIED_BY,
    MODIFIED_DATE
  )
  (SELECT   SPEC.CSM_MAP_ID,
  SRCCATEGORY.CATEGORY_ID	          AS SRC_CAT_ID,
  SRCCATEGORY.CATEGORY_NAME         AS SRC_CAT_NAME,
  SRCCODESET.CODESET_ID             AS SRC_CODESET_ID,
  SRCCODESET.CODESET_NAME           AS SRC_CODESET_NAME,
  SRCCODESET.CODESET_VERSION        AS SRC_CODESET_VERSION,
  SRCCODES.CODE_ID  	            AS SRC_CODE_ID,
  SRCCODES.CODE_NAME                AS SRC_CODE_NAME,
  SRCCODES.CODE_STND_VALUE          AS SRC_CODE_VALUE,
  SRCCODES.CODE_DESC   AS SRC_CODE_DESC,
  SRCCODES.SYSTEM_ID          AS SRC_SYSTEM_ID,
  SRCCODES.SYSTEM_NAME            AS SRC_SYSTEM_NAME,
  SRCCODES.SYSTEM_ENV_NAME	    AS SRC_ENV_NAME,
  CSM_MAP_SEQUENCE_ID,
  TGTCATEGORY.CATEGORY_ID	    AS TGT_CAT_ID,
  TGTCATEGORY.CATEGORY_NAME         AS TGT_CAT_NAME,
  TGTCODESET.CODESET_ID             AS TGT_CODESET_ID,
  TGTCODESET.CODESET_NAME           AS TGT_CODESET_NAME,
  TGTCODESET.CODESET_VERSION        AS TGT_CODESET_VERSION,
  TGTCODES.CODE_ID  	            AS TGT_CODE_ID,
  TGTCODES.CODE_NAME                AS TGT_CODE_NAME,
  TGTCODES.CODE_STND_VALUE          AS TGT_CODE_VALUE,
  TGTCODES.CODE_DESC                AS TGT_CODE_DESC,
  TGTCODES.SYSTEM_ID          AS TGT_SYSTEM_ID,
  TGTCODES.SYSTEM_NAME            AS TGT_SYSTEM_NAME,
  TGTCODES.SYSTEM_ENV_NAME	    AS TGT_ENV_NAME,
  SPEC.CSM_MAP_DELETE_FLAG,
  SPEC.CSM_MAP_PUBLISH_FLAG,
  CSM_MAP_CREATEDBY,
  CSM_MAP_CREATED_DATE,
  CSM_MAP_MODIFIEDBY,
  CSM_MAP_MODIFIED_DATE
FROM CSM_MAPPING_SPEC SPEC
JOIN CSM_MAPPING_DETAILS CSMMAP
ON (SPEC.CSM_MAP_ID = CSMMAP.CSM_MAP_ID AND CSMMAP.CSM_MAP_STATUS = ''Passive'')
LEFT JOIN CSM_CODE_VALUE SRCCODES
ON SPEC.CSM_MAP_SOURCE_CODE_ID = SRCCODES.CODE_ID
LEFT JOIN CSM_CODESET SRCCODESET
ON SRCCODES.CODESET_ID = SRCCODESET.CODESET_ID
LEFT JOIN CSM_CATEGORY SRCCATEGORY
ON SRCCATEGORY.CATEGORY_ID = SRCCODESET.CATEGORY_ID
LEFT JOIN CSM_CODE_VALUE TGTCODES
ON SPEC.CSM_MAP_TARGET_CODE_ID = TGTCODES.CODE_ID
LEFT JOIN CSM_CODESET TGTCODESET
ON TGTCODES.CODESET_ID = TGTCODESET.CODESET_ID
LEFT JOIN CSM_CATEGORY TGTCATEGORY
ON TGTCATEGORY.CATEGORY_ID = TGTCODESET.CATEGORY_ID)');
EXECUTE('DELETE FROM CSM_MAPPING_SPEC WHERE CSM_MAP_ID IN (SELECT CSM_MAP_ID FROM CSM_MAPPING_SPEC_READONLY)');
END;
GO

IF COL_LENGTH('MAPPING_SPECIFICATION', 'TGT_TABLE_ALIAS') IS NULL
    BEGIN
    EXECUTE('ALTER TABLE MAPPING_SPECIFICATION ADD TGT_TABLE_ALIAS varchar(255) NULL');
    EXECUTE('DELETE FROM USER_PREFERENCES WHERE USER_ID LIKE ''%HEADER_ORDER_PREFERENCE%''');
    EXECUTE('DELETE FROM USER_PREFERENCES WHERE USER_ID LIKE ''%HEADER_VISIBILITY_PREFERENCE%''');
    EXECUTE('DELETE FROM USER_PREFERENCES WHERE USER_ID IN (SELECT USER_ID FROM USERS)');
    END
GO

IF COL_LENGTH('MAPPING_SPECIFICATION', 'SRC_TABLE_ALIAS') IS NULL
    BEGIN
    ALTER TABLE MAPPING_SPECIFICATION ADD SRC_TABLE_ALIAS varchar(255) NULL
    END
GO

IF COL_LENGTH('MAPPING_SPECIFICATION', 'TGT_COLUMN_ALIAS') IS NULL
    BEGIN
    ALTER TABLE MAPPING_SPECIFICATION ADD TGT_COLUMN_ALIAS varchar(255) NULL
    END
GO

IF COL_LENGTH('MAPPING_SPECIFICATION', 'SRC_COLUMN_ALIAS') IS NULL
    BEGIN
    ALTER TABLE MAPPING_SPECIFICATION ADD SRC_COLUMN_ALIAS varchar(255) NULL
    END
GO

IF COL_LENGTH('SYSTEM_TABLE_COLUMNS_METADATA', 'COLUMN_ALIAS') IS NULL
    BEGIN
        ALTER TABLE SYSTEM_TABLE_COLUMNS_METADATA ADD COLUMN_ALIAS varchar(255) NULL
    END
GO
IF COL_LENGTH('SYSTEM_TABLE_METADATA', 'TABLE_ALIAS') IS NULL
    BEGIN
        ALTER TABLE SYSTEM_TABLE_METADATA ADD TABLE_ALIAS varchar(255) NULL
    END
GO
IF COL_LENGTH('RDM_CHANGE_HISTORY', 'FOLDER_HIERARCHY') IS NULL
    BEGIN
        ALTER TABLE RDM_CHANGE_HISTORY ADD FOLDER_HIERARCHY VARCHAR(4000) NULL
    END
GO

DECLARE
@Name VARCHAR(MAX)
BEGIN
SELECT @Name = o.name from sys.objects o join sys.columns c on o.object_id = c.default_object_id join sys.tables t on c.object_id = t.object_id where t.name='CSM_MAPPING_DETAILS' and c.name='CSM_MAP_PUBLISH_FLAG'
IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'CSM_MAPPING_DETAILS' AND COLUMN_NAME = 'CSM_MAP_PUBLISH_FLAG' AND COLUMN_DEFAULT = '(''Y'')')
    BEGIN
      --SELECT @Name
      EXECUTE ('ALTER TABLE CSM_MAPPING_DETAILS DROP CONSTRAINT ' + @Name);
      EXECUTE ('ALTER TABLE CSM_MAPPING_DETAILS ADD CONSTRAINT DF_CSM_MAP_DET_PUB_FLAG DEFAULT ''N'' FOR CSM_MAP_PUBLISH_FLAG');
      --EXECUTE ('UPDATE CSM_MAPPING_DETAILS SET CSM_MAP_PUBLISH_FLAG = ''N'' WHERE CSM_MAP_ID NOT IN (SELECT CSM_MAP_ID FROM CSM_MAP_PUBLISH_HISTORY) and CSM_MAP_PUBLISH_FLAG = ''Y'' ');
    END;
END
IF EXISTS (SELECT * FROM SYS.OBJECTS WHERE OBJECT_ID = OBJECT_ID(N'[FN_ISINT]') AND TYPE IN (N'FN', N'IF', N'TF', N'FS', N'FT'))
BEGIN
    DROP FUNCTION [FN_ISINT]
END
GO

CREATE FUNCTION [FN_ISINT](@N_VALUE VARCHAR(255))
RETURNS @Data TABLE(NUM_VALUE VARCHAR(255)) AS
BEGIN
		DECLARE @TEMP_NUM_VALUE VARCHAR(255);
		SELECT @TEMP_NUM_VALUE = CASE
                WHEN SUBSTRING(@N_VALUE, 2, LEN(@N_VALUE)) LIKE '%[^0-9]%' COLLATE LATIN1_GENERAL_BIN THEN NULL
                WHEN SUBSTRING(@N_VALUE, 1, 1) NOT LIKE '[-+0-9]' COLLATE LATIN1_GENERAL_BIN THEN NULL
                WHEN @N_VALUE IN('-', '+') THEN NULL
                WHEN CAST(@N_VALUE AS BIGINT) NOT BETWEEN -2147483648 AND 2147483647 THEN NULL
                ELSE CAST(@N_VALUE AS INT)
            END;
	    INSERT @Data(NUM_VALUE) VALUES(@TEMP_NUM_VALUE)
	    RETURN
END
GO
IF COL_LENGTH('SM_CLASSIFICATION_TABLE', 'SM_SYSTEM_BASED') IS NULL
    BEGIN
        ALTER TABLE SM_CLASSIFICATION_TABLE ADD SM_SYSTEM_BASED BIT NULL
    END
GO

IF COL_LENGTH('SM_CLASSIFICATION_COLUMN', 'SM_SYSTEM_BASED') IS NULL
    BEGIN
        ALTER TABLE SM_CLASSIFICATION_COLUMN ADD SM_SYSTEM_BASED BIT NULL
    END
GO
IF NOT EXISTS (SELECT * FROM   SYSOBJECTS WHERE  ID = OBJECT_ID(N'CAT_TEMPLATE_OPTIONS') AND TYPE = 'U')
  BEGIN
      EXECUTE ('CREATE TABLE [CAT_TEMPLATE_OPTIONS]
      (
       [CAT_OPTION_ID] int IDENTITY(1,1) NOT NULL,
       [CAT_OPTION_NAME] varchar(255) NOT NULL,
       [CAT_OPTION_TITLE] varchar(255) NOT NULL,
       [CAT_OPTION_TYPES] varchar(500) NOT NULL,
       [CAT_OPTION_DEFAULT_VALUE] varchar(255) NULL,
       [CAT_OPTION_SYSTEM_BASED] bit DEFAULT 0 NOT NULL,
       [CAT_ID] int NOT NULL,
       CONSTRAINT [PK_CAT_TEMPLATE_OPTIONS] PRIMARY KEY([CAT_OPTION_ID]),
       CONSTRAINT [FK_CAT_OPTIONS_TEMPLATES] FOREIGN KEY(CAT_ID) REFERENCES [CAT_TEMPLATES] ([CAT_ID])  ON DELETE CASCADE
       )');
  END
GO
IF (OBJECTPROPERTY(OBJECT_ID(N'[FN_RESTORECSM_PASSIVEMAP]'),N'IsProcedure') = 1)
BEGIN
	DROP PROCEDURE FN_RESTORECSM_PASSIVEMAP
END
GO
CREATE PROCEDURE FN_RESTORECSM_PASSIVEMAP @V_CSM_MAP_ID int
AS
BEGIN
BEGIN
;WITH CODEVALUES AS(SELECT CODESET.CATEGORY_ID,CODESET.CODESET_ID,CODEVALUE.CODE_ID,CODEVALUE.CODE_NAME,CODEVALUE.CODE_STND_VALUE,

cast(CODEVALUE.SYSTEM_ID as varchar)+coalesce(CODEVALUE.SYSTEM_NAME,NULL,'')+coalesce(CODEVALUE.SYSTEM_ENV_NAME,NULL,'') as codesystemenv , CODEVALUE.DELETE_FLAG FROM CSM_CODESET CODESET JOIN CSM_CODE_VALUE CODEVALUE ON

(CODESET.CODESET_ID = CODEVALUE.CODESET_ID AND CODEVALUE.CODESET_ID IN

(SELECT SRC_CODESET_ID CODESET_ID FROM CSM_MAPPING_SPEC_READONLY WHERE CSM_MAP_ID = @V_CSM_MAP_ID

UNION SELECT TGT_CODESET_ID  FROM CSM_MAPPING_SPEC_READONLY WHERE CSM_MAP_ID = @V_CSM_MAP_ID))),
source as (SELECT CVALS.CODE_ID AS SRC_CODE_ID,MAPSPEC.MAP_SEQ_ID,MAPSPEC.CSM_MAP_ID,MAPSPEC.CREATED_BY , MAPSPEC.CREATED_DATE , MAPSPEC.DELETE_FLAG ,
MAPSPEC.MODIFIED_BY , MAPSPEC.MODIFIED_DATE , MAPSPEC.PUBLISH_FLAG FROM CSM_MAPPING_SPEC_READONLY MAPSPEC JOIN CODEVALUES CVALS
ON (MAPSPEC.SRC_CATEGORY_ID = CVALS.CATEGORY_ID AND MAPSPEC.SRC_CODESET_ID = CVALS.CODESET_ID AND
UPPER(MAPSPEC.SRC_CODE_NAME)    = UPPER(CVALS.CODE_NAME)
AND UPPER(MAPSPEC.SRC_CODE_VALUE)   = UPPER(CVALS.CODE_STND_VALUE)
AND cast(MAPSPEC.SRC_SYSTEM_ID as varchar)+coalesce(MAPSPEC.SRC_SYSTEM_NAME,NULL,'')+coalesce(MAPSPEC.SRC_SYS_ENV_NAME,NULL,'') = CVALS.codesystemenv
AND MAPSPEC.CSM_MAP_ID = @V_CSM_MAP_ID) AND CVALS.DELETE_FLAG = 'N'),
target as (SELECT CVALS.CODE_ID AS TGT_CODE_ID,MAPSPEC.MAP_SEQ_ID FROM CSM_MAPPING_SPEC_READONLY MAPSPEC JOIN CODEVALUES CVALS
ON (MAPSPEC.TGT_CATEGORY_ID = CVALS.CATEGORY_ID AND MAPSPEC.TGT_CODESET_ID = CVALS.CODESET_ID AND
UPPER(MAPSPEC.TGT_CODE_NAME)    = UPPER(CVALS.CODE_NAME)
AND UPPER(MAPSPEC.TGT_CODE_VALUE)   = UPPER(CVALS.CODE_STND_VALUE)
AND cast(MAPSPEC.TGT_SYSTEM_ID as varchar)+coalesce(MAPSPEC.TGT_SYSTEM_NAME,NULL,'')+coalesce(MAPSPEC.TGT_SYS_ENV_NAME,NULL,'') = CVALS.codesystemenv
AND MAPSPEC.CSM_MAP_ID = @V_CSM_MAP_ID) AND CVALS.DELETE_FLAG = 'N')
INSERT INTO CSM_MAPPING_SPEC(CSM_MAP_ID,CSM_MAP_SOURCE_CODE_ID,CSM_MAP_TARGET_CODE_ID,
CSM_MAP_DELETE_FLAG,CSM_MAP_PUBLISH_FLAG, CSM_MAP_CREATEDBY,CSM_MAP_CREATED_DATE,
CSM_MAP_MODIFIEDBY,CSM_MAP_MODIFIED_DATE
)SELECT SRC.CSM_MAP_ID,SRC.SRC_CODE_ID,TGT.TGT_CODE_ID,SRC.DELETE_FLAG,SRC.PUBLISH_FLAG,
SRC.CREATED_BY,SRC.CREATED_DATE,SRC.MODIFIED_BY,SRC.MODIFIED_DATE FROM SOURCE SRC LEFT JOIN
TARGET TGT ON (SRC.MAP_SEQ_ID = TGT.MAP_SEQ_ID);
END;
BEGIN
DELETE FROM CSM_MAPPING_SPEC_READONLY WHERE CSM_MAP_ID = @V_CSM_MAP_ID;
END
END;
GO
UPDATE APP_PREFERENCES SET preference_value = 'Copied Mapping Details - DO NOT REPLY' WHERE preference_value = 'Copied Mapping Details – DO NOT REPLY'
GO
UPDATE APP_PREFERENCES SET preference_value = 'Merged Mapping Details - DO NOT REPLY' WHERE preference_value = 'Merged Mapping Details – DO NOT REPLY'
GO
UPDATE APP_PREFERENCES SET preference_value = 'New Mapping Details - DO NOT REPLY' WHERE preference_value = 'New Mapping Details – DO NOT REPLY'
GO
UPDATE APP_PREFERENCES SET preference_value = 'New Version Details - DO NOT REPLY' WHERE preference_value = 'New Version Details – DO NOT REPLY'
GO
UPDATE APP_PREFERENCES SET preference_value = 'XML Mapping Details - DO NOT REPLY ' WHERE preference_value = 'XML Mapping Details – DO NOT REPLY '
GO
UPDATE APP_PREFERENCES SET preference_value = 'Project Baseline Details - DO NOT REPLY' WHERE preference_value = 'Project Baseline Details – DO NOT REPLY'
GO

IF NOT EXISTS(SELECT * FROM CAT_TEMPLATES CT,CAT_TEMPLATE_OPTIONS CTO WHERE CT.CAT_ID = CTO.CAT_ID AND CT.CAT_NAME = 'Datastage 7.5 Parallel Job')
BEGIN
IF EXISTS (SELECT * FROM ADS_MM_VERSION WHERE VALUE <'6.1')
BEGIN
	INSERT INTO CAT_TEMPLATE_OPTIONS(CAT_OPTION_NAME,CAT_OPTION_TITLE,CAT_OPTION_TYPES,CAT_OPTION_SYSTEM_BASED,CAT_ID)
         SELECT 'srcType','Treat SOURCE as Sequential file stage','Check Box', 1,(SELECT CAT_ID FROM CAT_TEMPLATES WHERE CAT_NAME = 'Datastage 7.5 Parallel Job')
         UNION ALL
         SELECT 'tgtType','Treat TARGET as Sequential file stage','Check Box',1,(SELECT CAT_ID FROM CAT_TEMPLATES WHERE CAT_NAME = 'Datastage 7.5 Parallel Job')
         UNION ALL
         SELECT 'srcType','Treat SOURCE as Sequential file stage','Check Box', 1,(SELECT CAT_ID FROM CAT_TEMPLATES WHERE CAT_NAME = 'Datastage 7.5 Server Job')
         UNION ALL
         SELECT 'tgtType','Treat TARGET as Sequential file stage','Check Box',1,(SELECT CAT_ID FROM CAT_TEMPLATES WHERE CAT_NAME = 'Datastage 7.5 Server Job')
         UNION ALL
         SELECT 'srcType','Treat SOURCE as Sequential file stage','Check Box', 1,(SELECT CAT_ID FROM CAT_TEMPLATES WHERE CAT_NAME = 'Datastage 8.0 Parallel Job')
         UNION ALL
         SELECT 'tgtType','Treat TARGET as Sequential file stage','Check Box',1,(SELECT CAT_ID FROM CAT_TEMPLATES WHERE CAT_NAME = 'Datastage 8.0 Parallel Job')
         UNION ALL
         SELECT 'srcType','Treat SOURCE as Sequential file stage','Check Box', 1,(SELECT CAT_ID FROM CAT_TEMPLATES WHERE CAT_NAME = 'Datastage 8.0 Parallel Job Include Sql Expression Datastage 8.0')
         UNION ALL
         SELECT 'tgtType','Treat TARGET as Sequential file stage','Check Box',1,(SELECT CAT_ID FROM CAT_TEMPLATES WHERE CAT_NAME = 'Datastage 8.0 Parallel Job Include Sql Expression Datastage 8.0')
         UNION ALL
         SELECT 'srcType','Treat SOURCE as Sequential file stage','Check Box', 1,(SELECT CAT_ID FROM CAT_TEMPLATES WHERE CAT_NAME = 'Datastage 8.0 Server Job')
         UNION ALL
         SELECT 'tgtType','Treat TARGET as Sequential file stage','Check Box',1,(SELECT CAT_ID FROM CAT_TEMPLATES WHERE CAT_NAME = 'Datastage 8.0 Server Job')
         UNION ALL
         SELECT 'srcType','Treat SOURCE as Sequential file stage','Check Box', 1,(SELECT CAT_ID FROM CAT_TEMPLATES WHERE CAT_NAME = 'Datastage 8.0 Server Job Include Sql Expression	Datastage 8.0')
         UNION ALL
         SELECT 'tgtType','Treat TARGET as Sequential file stage','Check Box',1,(SELECT CAT_ID FROM CAT_TEMPLATES WHERE CAT_NAME = 'Datastage 8.0 Server Job Include Sql Expression	Datastage 8.0')
    END
END
GO

IF (OBJECTPROPERTY(OBJECT_ID(N'[CSM_AUTO_MAPPING]'),N'IsProcedure') = 1)
BEGIN
	DROP PROCEDURE CSM_AUTO_MAPPING
END
GO


IF NOT EXISTS (SELECT * FROM sys.objects WHERE type = 'P' AND name = 'CSM_AUTO_MAPPING')
      exec('CREATE PROCEDURE [CSM_AUTO_MAPPING](
             @SRC_CODESET_ID   BIGINT,
             @SRC_SYSTEM_ID    BIGINT,
             @SRC_SYS_NAME     VARCHAR(50),
             @SRC_SYS_ENV_NAME VARCHAR(255),
             @TGT_CODESET_ID   BIGINT,
             @TGT_SYSTEM_ID    BIGINT,
             @TGT_SYS_NAME     VARCHAR(50),
             @TGT_SYS_ENV_NAME VARCHAR(255),
             @FOR_CSM_MAP_ID BIGINT)
         AS
         BEGIN
         UPDATE CSM_MAPPING_SPEC
         SET CSM_MAPPING_SPEC.CSM_MAP_TARGET_CODE_ID = T.TGT_CODE_ID
         FROM (
         SELECT * FROM (SELECT DISTINCT CODE_ID AS SRC_CODE_ID, CODE_STND_VALUE AS SRC_CODE_VALUE, CODE_NAME AS SRC_CODE_NAME
         FROM CSM_CODE_VALUE SRC_CSMCV, CSM_CODESET SRC_CSMC,CSM_MAPPING_SPEC
         WHERE SRC_CSMCV.CODESET_ID = SRC_CSMC.CODESET_ID
         AND SRC_CSMCV.CODESET_ID = @SRC_CODESET_ID
         AND SRC_CSMCV.SYSTEM_ID = @SRC_SYSTEM_ID
         AND COALESCE(upper(SRC_CSMCV.SYSTEM_NAME), NULL, '''') = COALESCE(upper(@SRC_SYS_NAME), NULL, '''')
         AND COALESCE(upper(SRC_CSMCV.SYSTEM_ENV_NAME), NULL, '''') = COALESCE(upper(@SRC_SYS_ENV_NAME), NULL, '''')) AS CTE,
         (SELECT DISTINCT CODE_ID AS TGT_CODE_ID,  CODE_STND_VALUE AS TGT_CODE_VALUE, CODE_NAME AS TGT_CODE_NAME
         FROM CSM_CODE_VALUE TGT_CSMCV, CSM_CODESET TGT_CSMC
         WHERE TGT_CSMCV.CODESET_ID = TGT_CSMC.CODESET_ID
         AND TGT_CSMCV.CODESET_ID = @TGT_CODESET_ID
         AND TGT_CSMCV.SYSTEM_ID = @TGT_SYSTEM_ID
         AND COALESCE(upper(TGT_CSMCV.SYSTEM_NAME), NULL, '''') = COALESCE(upper(@TGT_SYS_NAME), NULL, '''')
         AND COALESCE(upper(TGT_CSMCV.SYSTEM_ENV_NAME), NULL, '''') = COALESCE(upper(@TGT_SYS_ENV_NAME), NULL, '''')
         AND TGT_CSMCV.ACTIVE_FLAG = ''Y'' AND TGT_CSMCV.DELETE_FLAG = ''N'') AS CTEONE
         WHERE upper(CTEONE.TGT_CODE_VALUE) = upper(CTE.SRC_CODE_VALUE) AND upper(CTEONE.TGT_CODE_NAME) = upper(CTE.SRC_CODE_NAME)) AS T
         WHERE CSM_MAPPING_SPEC.CSM_MAP_ID = @FOR_CSM_MAP_ID
         AND CSM_MAPPING_SPEC.CSM_MAP_SOURCE_CODE_ID = T.SRC_CODE_ID
         AND (CSM_MAPPING_SPEC.CSM_MAP_TARGET_CODE_ID IS NULL OR CSM_MAPPING_SPEC.CSM_MAP_TARGET_CODE_ID = 0)
         END')
GO
-- New Column Added to CAT Template options to change order
IF COL_LENGTH('CAT_TEMPLATE_OPTIONS', 'CAT_OPTION_ORDER') IS NULL
    BEGIN
    ALTER TABLE CAT_TEMPLATE_OPTIONS ADD CAT_OPTION_ORDER FLOAT DEFAULT 1.0 NULL
    END
GO
IF NOT EXISTS(SELECT * FROM SYS.VIEWS WHERE NAME = 'MAP_SPEC_NUMLENGTH_RCDS_V')
BEGIN
EXEC ('CREATE VIEW [MAP_SPEC_NUMLENGTH_RCDS_V]
AS
SELECT * FROM APPENDED_MAP_SPEC_RCRDS_V WHERE (ISNUMERIC(src_col_length) = 1 and ISNUMERIC(tgt_col_length) = 1
AND (SELECT * FROM FN_ISINT(src_col_length)) IS NOT NULL
AND (SELECT * FROM FN_ISINT(tgt_col_length)) IS NOT NULL)
');
END
GO

IF NOT EXISTS(SELECT * FROM SYS.VIEWS WHERE NAME = 'IMPACT_ANALYSIS_SUMMARY_V')
BEGIN
EXEC ('CREATE VIEW [IMPACT_ANALYSIS_SUMMARY_V] AS
select count(project.proj_id) as mappingscount,
project.proj_id, proj_name, proj_descr, mapping_Details.status from MAP_SPEC_NUMLENGTH_RCDS_V MSNR
left join mapping_details on MSNR.MAP_ID = MAPPING_DETAILS.MAP_ID
left join project on project.proj_id = mapping_Details.project_id
where len(tgt_col_length) > 0
and len(src_col_length) > 0 AND (convert(float,src_col_length)  > convert(float,tgt_col_length))
and project.proj_id is not null
group by project.proj_id, proj_name, proj_descr,mapping_Details.status
');
END
GO

IF NOT EXISTS(SELECT * FROM SYS.VIEWS WHERE NAME = 'IMPACT_ANALYSIS_DETAILS_V')
BEGIN
EXEC ('CREATE VIEW [IMPACT_ANALYSIS_DETAILS_V] AS
select MSNR.map_id, src_col_length, src_col_precision, tgt_col_length, tgt_col_precision,project.proj_id,
proj_name, proj_descr, mapping_Details.map_name, mapping_Details.status, mapping_Details.map_spec_version,mapping_Details.versionlabel,MSNR.MAP_seq_ID,
MSNR.SRC_table_NAME, MSNR.TGT_table_NAME,
MSNR.SRC_COLUMN_NAME, MSNR.TGT_COLUMN_NAME from MAP_SPEC_NUMLENGTH_RCDS_V MSNR
left join mapping_details on MSNR.MAP_ID = MAPPING_DETAILS.MAP_ID
left join project on project.proj_id = mapping_Details.project_id
where len(tgt_col_length) > 0
and len(src_col_length) > 0 AND (convert(float,src_col_length)  > convert(float,tgt_col_length))
');
END
GO

IF (OBJECTPROPERTY(OBJECT_ID(N'[CSM_AUTO_MAPPING]'),N'IsProcedure') = 1)
BEGIN
	DROP PROCEDURE CSM_AUTO_MAPPING
END
GO

IF NOT EXISTS (SELECT * FROM sys.objects WHERE type = 'P' AND name = 'CSM_AUTO_MAPPING')
      exec('CREATE PROCEDURE [CSM_AUTO_MAPPING](
             @SRC_CODESET_ID   BIGINT,
             @SRC_SYSTEM_ID    BIGINT,
             @SRC_SYS_NAME     VARCHAR(50),
             @SRC_SYS_ENV_NAME VARCHAR(255),
             @TGT_CODESET_ID   BIGINT,
             @TGT_SYSTEM_ID    BIGINT,
             @TGT_SYS_NAME     VARCHAR(50),
             @TGT_SYS_ENV_NAME VARCHAR(255),
             @FOR_CSM_MAP_ID BIGINT)
         AS
         BEGIN
         UPDATE CSM_MAPPING_SPEC
         SET CSM_MAPPING_SPEC.CSM_MAP_TARGET_CODE_ID = T.TGT_CODE_ID
         FROM (
         SELECT * FROM (SELECT DISTINCT CODE_ID AS SRC_CODE_ID, CODE_STND_VALUE AS SRC_CODE_VALUE
         FROM CSM_CODE_VALUE SRC_CSMCV, CSM_CODESET SRC_CSMC,CSM_MAPPING_SPEC
         WHERE SRC_CSMCV.CODESET_ID = SRC_CSMC.CODESET_ID
         AND SRC_CSMCV.CODESET_ID = @SRC_CODESET_ID
         AND SRC_CSMCV.SYSTEM_ID = @SRC_SYSTEM_ID
         AND COALESCE(upper(SRC_CSMCV.SYSTEM_NAME), NULL, '''') = COALESCE(upper(@SRC_SYS_NAME), NULL, '''')
         AND COALESCE(upper(SRC_CSMCV.SYSTEM_ENV_NAME), NULL, '''') = COALESCE(upper(@SRC_SYS_ENV_NAME), NULL, '''')) AS CTE,
         (SELECT DISTINCT CODE_ID AS TGT_CODE_ID,  CODE_STND_VALUE AS TGT_CODE_VALUE
         FROM CSM_CODE_VALUE TGT_CSMCV, CSM_CODESET TGT_CSMC
         WHERE TGT_CSMCV.CODESET_ID = TGT_CSMC.CODESET_ID
         AND TGT_CSMCV.CODESET_ID = @TGT_CODESET_ID
         AND TGT_CSMCV.SYSTEM_ID = @TGT_SYSTEM_ID
         AND COALESCE(upper(TGT_CSMCV.SYSTEM_NAME), NULL, '''') = COALESCE(upper(@TGT_SYS_NAME), NULL, '''')
         AND COALESCE(upper(TGT_CSMCV.SYSTEM_ENV_NAME), NULL, '''') = COALESCE(upper(@TGT_SYS_ENV_NAME), NULL, '''')
         AND TGT_CSMCV.ACTIVE_FLAG = ''Y'' AND TGT_CSMCV.DELETE_FLAG = ''N'') AS CTEONE
         WHERE upper(CTEONE.TGT_CODE_VALUE) = upper(CTE.SRC_CODE_VALUE)) AS T
         WHERE CSM_MAPPING_SPEC.CSM_MAP_ID = @FOR_CSM_MAP_ID
         AND CSM_MAPPING_SPEC.CSM_MAP_SOURCE_CODE_ID = T.SRC_CODE_ID
         AND (CSM_MAPPING_SPEC.CSM_MAP_TARGET_CODE_ID IS NULL OR CSM_MAPPING_SPEC.CSM_MAP_TARGET_CODE_ID = 0)
         END')
GO
IF COL_LENGTH('RM_RELEASE', 'RELEASE_DATE') IS NULL
BEGIN
   ALTER TABLE [RM_RELEASE] ADD [RELEASE_DATE] datetime NULL
END
GO
IF COL_LENGTH('RM_RELEASE', 'CHANGE_CONTROL_NUMBER') IS NULL
BEGIN
   ALTER TABLE [RM_RELEASE] ADD [CHANGE_CONTROL_NUMBER] varchar(255) NULL
END
GO
IF COL_LENGTH('RM_MIGRATIONOBJECT', 'MIGRATION_OBJECT_OWNER') IS NULL
BEGIN
   ALTER TABLE [RM_MIGRATIONOBJECT] ADD [MIGRATION_OBJECT_OWNER] varchar(255) NULL
END
GO
IF COL_LENGTH('SYS_CON_ENVIRONMENTS', 'SYSTEM_NUMBER') IS NULL
BEGIN
    ALTER TABLE SYS_CON_ENVIRONMENTS ADD SYSTEM_NUMBER INT NULL
END
GO

IF COL_LENGTH('SYS_CON_ENVIRONMENTS', 'DESTINATION') IS NULL
BEGIN
    ALTER TABLE SYS_CON_ENVIRONMENTS ADD DESTINATION varchar(50) NULL
END
GO

IF COL_LENGTH('SYS_CON_ENVIRONMENTS', 'CLIENT') IS NULL
BEGIN
    ALTER TABLE SYS_CON_ENVIRONMENTS ADD CLIENT INT NULL
END
GO
IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'SYS_CON_ENVIRONMENTS' AND COLUMN_NAME = 'DBMS_INSTANCE_SCHEMA' AND CHARACTER_MAXIMUM_LENGTH = '50')
    BEGIN
        ALTER TABLE SYS_CON_ENVIRONMENTS  ALTER COLUMN DBMS_INSTANCE_SCHEMA VARCHAR(MAX)
    END
GO
IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'SYSTEM_TABLE_COLUMNS_METADATA' AND COLUMN_NAME = 'COL_DB_DEFAULT_VALUE' AND CHARACTER_MAXIMUM_LENGTH = '50')
    BEGIN
        ALTER TABLE SYSTEM_TABLE_COLUMNS_METADATA ALTER COLUMN COL_DB_DEFAULT_VALUE VARCHAR(100)
    END
GO
IF NOT EXISTS(select OBJECT_ID from SYS.ALL_COLUMNS where NAME = 'FIELD_DELIMITER' UNION ALL select OBJECT_ID from SYS.ALL_COLUMNS where NAME = 'SAP_DELIMITER')
BEGIN
    ALTER TABLE SYS_CON_ENVIRONMENTS ADD SAP_DELIMITER CHAR(1) NULL
END
GO
IF COL_LENGTH('SYS_CON_ENVIRONMENTS', 'SAP_MANUAL_TABLES') IS NULL
BEGIN
    ALTER TABLE SYS_CON_ENVIRONMENTS ADD SAP_MANUAL_TABLES VARCHAR(MAX) NULL
END
GO
IF EXISTS(SELECT * FROM SYS.VIEWS WHERE NAME = 'VIEW_REF_TABLE')
BEGIN
   EXEC ('ALTER VIEW VIEW_REF_TABLE (RDM_CATEGORY_NAME, RDM_REF_TABLE_ID, RDM_REF_TABLE_NAME, RDM_REF_TABLE_DESC, RDM_REF_TAB_OWNER, RDM_REF_TAB_VERSION, RDM_REF_TAB_VER_DESC, RDM_REF_TAB_VER_LABEL, CREATED_BY, CREATED_DATE, MODIFIED_BY, MODIFIED_DATE, USER_DEFINED_FIELD1, USER_DEFINED_FIELD2, USER_DEFINED_FIELD3, USER_DEFINED_FIELD4, USER_DEFINED_FIELD5, USER_DEFINED_FIELD6, USER_DEFINED_FIELD7, USER_DEFINED_FIELD8, USER_DEFINED_FIELD9, USER_DEFINED_FIELD10)
AS
  SELECT RDM_CATEGORY_NAME,
    rdm_reference_table.RDM_REF_TABLE_ID,
    RDM_REF_TABLE_NAME,
    RDM_REF_TABLE_DESC,
    RDM_REF_TAB_OWNER,
    RDM_REF_TAB_VERSION,
    RDM_REF_TAB_VER_DESC,
    RDM_REF_TAB_VER_LABEL,
    rdm_reference_table.CREATED_BY,
    rdm_reference_table.CREATED_DATE,
    rdm_reference_table.MODIFIED_BY,
    rdm_reference_table.MODIFIED_DATE,
    USER_DEFINED_FIELD1,
    USER_DEFINED_FIELD2,
    USER_DEFINED_FIELD3,
    USER_DEFINED_FIELD4,
    USER_DEFINED_FIELD5,
    USER_DEFINED_FIELD6,
    USER_DEFINED_FIELD7,
    USER_DEFINED_FIELD8,
    USER_DEFINED_FIELD9,
    USER_DEFINED_FIELD10
  FROM rdm_reference_table JOIN rdm_category
  ON rdm_reference_table.rdm_ref_table_cat_id = rdm_category.rdm_category_id
  JOIN RDM_REF_TAB_USERDEFINED
  ON rdm_reference_table.rdm_ref_table_id       = rdm_ref_tab_userdefined.rdm_ref_table_id;');
END
GO
UPDATE USERS set USER_THEME='dhtmlx_skin_skyblue' where USER_THEME='dhtmlx_skin_air_force_blue'
GO
UPDATE USERS set USER_THEME='dhtmlx_skin_skyblue' where USER_THEME='dhtmlx_skin_sky'
GO
--VERSION 5.3 DDL START HERE
IF NOT EXISTS (SELECT * FROM   SYSOBJECTS WHERE  ID = OBJECT_ID(N'[CAT_TABS]') AND TYPE = 'U')
BEGIN
EXECUTE('CREATE TABLE [CAT_TABS]( CAT_TAB_ID INT NOT NULL IDENTITY(1,1), CAT_TAB_NAME VARCHAR(200) NOT NULL,  CAT_TAB_DESCRIPTION VARCHAR(500) NULL, DISPLAY_ORDER FLOAT NOT NULL DEFAULT 1.0,  TAB_VISIBILITY CHAR(1)NOT NULL DEFAULT 1 , CONSTRAINT PK_CATTABSID PRIMARY KEY (CAT_TAB_ID))');
EXECUTE('INSERT CAT_TABS(CAT_TAB_NAME) SELECT DISTINCT CAT_TAB_ID  FROM CAT_TEMPLATES');
EXECUTE('UPDATE CAT_TEMPLATES SET CAT_TEMPLATES.CAT_TAB_ID = CAT_TABS.CAT_TAB_ID  FROM CAT_TEMPLATES  INNER JOIN  CAT_TABS ON CAT_TEMPLATES.CAT_TAB_ID = CAT_TABS.CAT_TAB_NAME');
EXECUTE('WITH CTE AS (SELECT CAT_TAB_ID, CAT_TAB_NAME, ROW_NUMBER()OVER ( ORDER BY CASE DISPLAY_ORDER WHEN NULL THEN 0 WHEN 0 THEN 999999999 ELSE DISPLAY_ORDER END) AS DISPLAY_ORDER FROM   CAT_TABS ) UPDATE MS SET    MS.DISPLAY_ORDER = CTE.DISPLAY_ORDER FROM   CAT_TABS MS JOIN CTE ON MS.CAT_TAB_ID = CTE.CAT_TAB_ID AND MS.CAT_TAB_NAME = CTE.CAT_TAB_NAME');
END
GO

IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'CAT_TEMPLATES' AND COLUMN_NAME = 'CAT_TAB_ID' AND DATA_TYPE = 'VARCHAR')
BEGIN
ALTER TABLE CAT_TEMPLATES ALTER COLUMN CAT_TAB_ID INT
END
GO
IF (SELECT COUNT(*) FROM APP_PREFERENCES WHERE PREFERENCE_NAME = 'TIME_TOTALFILES') < 1
BEGIN
INSERT INTO APP_PREFERENCES( PREFERENCE_NAME, PREFERENCE_VALUE) VALUES('TIME_TOTALFILES','300:20');
END;
GO
IF COL_LENGTH('CAT_TEMPLATE_OPTIONS', 'CAT_OPTION_CONTROL_STYLE') IS NULL
BEGIN
    ALTER TABLE CAT_TEMPLATE_OPTIONS ADD CAT_OPTION_CONTROL_STYLE VARCHAR(1000) NULL
END
GO
IF COL_LENGTH('CAT_TEMPLATE_OPTIONS', 'CAT_OPTION_CONTROL_STYLE_JSON') IS NULL
BEGIN
    ALTER TABLE CAT_TEMPLATE_OPTIONS ADD CAT_OPTION_CONTROL_STYLE_JSON VARCHAR(1000) NULL
END
GO
IF COL_LENGTH('CAT_TEMPLATE_OPTIONS', 'CAT_OPTION_LABEL_STYLE') IS NULL
BEGIN
    ALTER TABLE CAT_TEMPLATE_OPTIONS ADD CAT_OPTION_LABEL_STYLE VARCHAR(1000) NULL
END
GO
IF COL_LENGTH('CAT_TEMPLATE_OPTIONS', 'CAT_OPTION_LABEL_STYLE_JSON') IS NULL
BEGIN
    ALTER TABLE CAT_TEMPLATE_OPTIONS ADD CAT_OPTION_LABEL_STYLE_JSON VARCHAR(1000) NULL
END
GO
IF COL_LENGTH('CAT_TEMPLATE_OPTIONS', 'CAT_OPTION_ENABLE') IS NULL

BEGIN
    ALTER TABLE CAT_TEMPLATE_OPTIONS ADD CAT_OPTION_ENABLE VARCHAR(50) NULL
END
GO
IF COL_LENGTH('CAT_TEMPLATE_OPTIONS', 'CAT_OPTION_VISIBLE') IS NULL
BEGIN
    ALTER TABLE CAT_TEMPLATE_OPTIONS ADD CAT_OPTION_VISIBLE VARCHAR(50) NULL
END
GO
IF COL_LENGTH('CAT_TEMPLATE_OPTIONS', 'CAT_OPTION_LIST') IS NULL
BEGIN
    ALTER TABLE CAT_TEMPLATE_OPTIONS ADD CAT_OPTION_LIST VARCHAR(1000) NULL
END
GO

IF NOT EXISTS (SELECT * FROM SYSOBJECTS WHERE ID = OBJECT_ID(N'ADS_KEY_VALUE_OBJECTS') AND TYPE = 'U')
BEGIN
EXECUTE ('
CREATE TABLE ADS_KEY_VALUE_OBJECTS
(
 OBJECT_TYPE_ID BIGINT IDENTITY(1, 1)
,OBJECT_TYPE VARCHAR(500) NOT NULL
,OBJECT_TABLE VARCHAR(500) NOT NULL
,OBJECT_TABLE_COLUMN VARCHAR(500) NOT NULL
,OBJECT_PARENT_TYPE VARCHAR(500) NULL
,OBJECT_PARENT_COLUMN_ID VARCHAR(500) NULL
,CONSTRAINT ADS_KEY_VALUE_OBJECTS_PK PRIMARY KEY
  (
    OBJECT_TYPE_ID
  )
);
')
END
GO

IF NOT EXISTS (SELECT * FROM ADS_KEY_VALUE_OBJECTS WHERE  OBJECT_TYPE = 'SM_SYSTEM')
BEGIN
INSERT INTO ADS_KEY_VALUE_OBJECTS (OBJECT_TYPE,OBJECT_TABLE,OBJECT_TABLE_COLUMN,OBJECT_PARENT_TYPE,OBJECT_PARENT_COLUMN_ID)
	SELECT 'SM_SYSTEM','SYSTEM_DEFINITION_DETAILS','SYSTEM_ID','',''
	UNION ALL
	SELECT 'SM_ENVIRONMENT','SYS_CON_ENVIRONMENTS','SCE_ID','SM_SYSTEM','SYSTEM_ID'
	UNION ALL
	SELECT 'SM_TABLE','SYSTEM_TABLE_METADATA','STM_ID','SM_ENVIRONMENT','SCE_ID'
	UNION ALL
	SELECT 'SM_COLUMN','SYSTEM_TABLE_COLUMNS_METADATA','STCM_ID','SM_TABLE','STM_ID'
	UNION ALL
	SELECT 'SM_COMPONENT','SYSTEM_TABLE_METADATA','STM_ID','SM_ENVIRONMENT','SCE_ID'
	UNION ALL
	SELECT 'MM_PROJECT','PROJECT','PROJ_ID','',''
	UNION ALL
	SELECT 'MM_SUBJECT','SUBJECT_DETAILS','SUBJECT_ID','MM_PROJECT','PROJ_ID'
	UNION ALL
	SELECT 'MM_MAPPING','MAPPING_DETAILS','MAP_ID','MM_SUBJECT',''
	UNION ALL
	SELECT 'MM_MAPPING_ROW','MAPPING_SPECIFICATION','MAP_SEQ_ID','MM_MAPPING',''
END
GO

IF NOT EXISTS (SELECT * FROM SYSOBJECTS WHERE ID = OBJECT_ID(N'AMM_DATATYPES') AND TYPE = 'U')
BEGIN
EXECUTE ('
CREATE TABLE AMM_DATATYPES
(
  ADT_ID BIGINT IDENTITY(1, 1)
, DATATYPE VARCHAR(200) NOT NULL
, LENGTH BIGINT DEFAULT 0 NOT NULL
, PRECISION BIGINT DEFAULT 0 NOT NULL
, SCALE BIGINT DEFAULT 0 NOT NULL
, CONSTRAINT AMM_DATATYPES_PK PRIMARY KEY
  (
    ADT_ID
  )
);
')
END
GO

IF NOT EXISTS (SELECT * FROM AMM_DATATYPES WHERE  DATATYPE = 'string')
BEGIN
INSERT INTO AMM_DATATYPES (DATATYPE,PRECISION,SCALE)
SELECT 'string',0,0
UNION ALL
SELECT 'int',0,0
UNION ALL
SELECT 'boolean',0,0
UNION ALL
SELECT 'datetime',0,0
UNION ALL
SELECT 'timestamp',0,0
UNION ALL
SELECT 'varchar',0,0
UNION ALL
SELECT 'nvarchar',0,0
UNION ALL
SELECT 'text',0,0
UNION ALL
SELECT 'float',0,0
UNION ALL
SELECT 'double',0,0
UNION ALL
SELECT 'decimal',0,0
UNION ALL
SELECT 'money',0,0
UNION ALL
SELECT 'currency',0,0
UNION ALL
SELECT 'smallint',0,0
END
GO

IF NOT EXISTS (SELECT * FROM SYSOBJECTS WHERE  ID = OBJECT_ID(N'AMM_DATATYPE_CONVERSION') AND TYPE = 'U')
BEGIN
EXECUTE ('
CREATE TABLE AMM_DATATYPE_CONVERSION
(
  ADC_ID BIGINT IDENTITY(1, 1)
, ETL_TOOL VARCHAR(500)
, AMM_DATATYPE VARCHAR(200)
, ETL_DATATYPE VARCHAR(200)
, ETL_DT_LENGTH BIGINT DEFAULT 0
, ETL_DT_PRECISION BIGINT DEFAULT 0
, ETL_DT_SCALE BIGINT DEFAULT 0
, ETL_DT_CODE_PAGE VARCHAR(200)
, ETL_EXP_DATATYPE VARCHAR(200)
, ETL_EXP_DT_LENGTH BIGINT DEFAULT 0
, ETL_EXP_DT_PRECISION BIGINT DEFAULT 0
, ETL_EXP_DT_SCALE BIGINT DEFAULT 0
, ETL_DT_CAST VARCHAR(200)
, ETL_EXP_DT_CODE_PAGE VARCHAR(200)
, CONSTRAINT AMM_DATATYPE_CONVERSION_PK PRIMARY KEY
  (
    ADC_ID
  )
);
');
END
GO


IF NOT EXISTS (SELECT * FROM AMM_DATATYPE_CONVERSION WHERE  ETL_TOOL = 'Informatica')
BEGIN
INSERT INTO AMM_DATATYPE_CONVERSION (ETL_TOOL,AMM_DATATYPE,ETL_DATATYPE,ETL_DT_PRECISION,ETL_DT_SCALE,ETL_DT_CODE_PAGE,ETL_EXP_DATATYPE,ETL_EXP_DT_PRECISION,ETL_EXP_DT_SCALE,ETL_DT_CAST,ETL_EXP_DT_CODE_PAGE)

SELECT 'Informatica','datetime','datetime',23,3,'','date/time',29,9,'',''
UNION ALL
SELECT 'SSIS','smallint','i2',0,0,'1252','System.Int16',0,0,'DT_I1',''
END
GO


IF NOT EXISTS (SELECT * FROM  SYSOBJECTS WHERE  ID = OBJECT_ID(N'ADS_KEY_VALUE') AND TYPE = 'U')
  BEGIN
EXECUTE('
CREATE TABLE ADS_KEY_VALUE
(
  KV_ID BIGINT IDENTITY(1, 1)
, KEY_NAME VARCHAR(4000) NOT NULL
, KEY_VALUE VARCHAR(4000)
, OBJECT_TYPE_ID BIGINT NOT NULL
, OBJECT_ID VARCHAR(200) NOT NULL
, DATATYPE_ID BIGINT NOT NULL
, CONSTRAINT ADS_KEY_VALUE_PK PRIMARY KEY(KV_ID)
, CONSTRAINT ADS_KEY_VAL_DT_FK FOREIGN KEY(DATATYPE_ID) REFERENCES AMM_DATATYPES(ADT_ID)
, CONSTRAINT ADS_KEY_VAL_OBJ_TY_FK FOREIGN KEY (OBJECT_TYPE_ID) REFERENCES ADS_KEY_VALUE_OBJECTS (OBJECT_TYPE_ID) ON DELETE CASCADE
);
')
END
GO


IF NOT EXISTS(SELECT * FROM sys.indexes WHERE name = 'ADS_KEY_VAL_DT_INDX' AND object_id = OBJECT_ID('ADS_KEY_VALUE'))
BEGIN
EXECUTE('CREATE INDEX ADS_KEY_VAL_DT_INDX ON ADS_KEY_VALUE (DATATYPE_ID)');
END
GO
IF NOT EXISTS(SELECT * FROM sys.indexes WHERE name = 'ADS_KEY_VAL_OBJ_TYP_INDX' AND object_id = OBJECT_ID('ADS_KEY_VALUE'))
BEGIN
EXECUTE('CREATE INDEX ADS_KEY_VAL_OBJ_TYP_INDX ON ADS_KEY_VALUE (OBJECT_TYPE_ID)');
END
GO

IF EXISTS (SELECT * FROM ADS_MM_VERSION WHERE VALUE <= '5.3')
BEGIN
IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS WHERE CONSTRAINT_NAME='R_15')
   BEGIN
   EXECUTE('ALTER TABLE SYSTEM_DOCUMENTS DROP CONSTRAINT R_15');
   END
EXECUTE [sp_rename]
        @objname  = N'XPKSYSTEM_DOCUMENTS',
        @newname  = N'TEMP_XPKSYS_DOCS',
        @objtype  = 'OBJECT'
EXECUTE [sp_rename]
        @objname  = N'SYSTEM_DOCUMENTS',
        @newname  = N'TEMP_SYSTEM_DOCUMENTS',
        @objtype  = 'OBJECT'
EXECUTE('CREATE TABLE [SYSTEM_DOCUMENTS](
	[SYS_DOC_NAME] [varchar](255) NULL,
	[SYS_DOC_TYPE] [varchar](20) NULL,
	[SYS_DOC_INTEDED_USE_DESCR] [varchar](max) NULL,
	[PROJ_DOC_OWNER] [varchar](50) NULL,
	[SYSTEM_DOC_ID] [bigint] identity(1,1),
	[SYSTEM_ID] [int] NOT NULL,
	[CREATED_DATE_TIME] [datetime] NOT NULL,
	[LAST_MODIFIED_BY] [varchar](20) NULL,
	[LAST_MODIFIED_DATE_TIME] [datetime] NULL,
	[CREATED_BY] [varchar](20) NOT NULL,
	[PROJECT_DOC_OBJECT] [varchar](max) NOT NULL,
	[APPROVAL_REQD_FLAG] [char](1) NULL,
	[APPROVED_BY] [varchar](20) NULL,
	[APROVAL_DATETIME] [datetime] NULL,
	[DOCUMENT_STATUS] [varchar](20) NULL,
)');
END
GO

IF EXISTS (SELECT * FROM ADS_MM_VERSION WHERE VALUE <= '5.3')
BEGIN
SET IDENTITY_INSERT SYSTEM_DOCUMENTS ON
EXECUTE('INSERT INTO SYSTEM_DOCUMENTS (
SYS_DOC_NAME,
SYS_DOC_TYPE,
SYS_DOC_INTEDED_USE_DESCR,
PROJ_DOC_OWNER,
SYSTEM_DOC_ID,
SYSTEM_ID,
CREATED_DATE_TIME,
LAST_MODIFIED_BY,
LAST_MODIFIED_DATE_TIME,
CREATED_BY,
PROJECT_DOC_OBJECT,
APPROVAL_REQD_FLAG,
APPROVED_BY,
APROVAL_DATETIME,
DOCUMENT_STATUS)
SELECT SYS_DOC_NAME,
SYS_DOC_TYPE,
SYS_DOC_INTEDED_USE_DESCR,
PROJ_DOC_OWNER,
SYSTEM_DOC_ID,
SYSTEM_ID,
CREATED_DATE_TIME,
LAST_MODIFIED_BY,
LAST_MODIFIED_DATE_TIME,
CREATED_BY,
PROJECT_DOC_OBJECT,
APPROVAL_REQD_FLAG,
APPROVED_BY,
APROVAL_DATETIME,
DOCUMENT_STATUS FROM TEMP_SYSTEM_DOCUMENTS');
SET IDENTITY_INSERT SYSTEM_DOCUMENTS OFF
EXECUTE('DROP TABLE TEMP_SYSTEM_DOCUMENTS');
END
GO

IF EXISTS (SELECT * FROM ADS_MM_VERSION WHERE VALUE <= '5.3')
BEGIN
IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS WHERE CONSTRAINT_NAME='R_14')
   BEGIN
   EXECUTE('ALTER TABLE SYSTEM_TABLE_COLUMNS_METADATA DROP CONSTRAINT R_14');
   END
EXECUTE [sp_rename]
        @objname  = N'XPKSYS_TAB_COL_METADATA',
        @newname  = N'TEMP_XPKSYS_TAB_COL_METADATA',
        @objtype  = 'OBJECT'
EXECUTE [sp_rename]
        @objname  = N'SYSTEM_TABLE_COLUMNS_METADATA',
        @newname  = N'TEMP_SYSTEM_TABLE_COLUMNS_METADATA',
        @objtype  = 'OBJECT'
EXECUTE('CREATE TABLE [SYSTEM_TABLE_COLUMNS_METADATA](
	[TABLE_NAME] [varchar](255) NOT NULL,
	[COLUMN_NAME] [varchar](255) NOT NULL,
	[COL_DATATYPE] [varchar](50) NULL,
	[COL_LENGTH] [varchar](20) NULL,
	[COL_PRECISION] [varchar](20) NULL,
	[COL_DB_DEFAULT_VALUE] [varchar](100) NULL,
	[COL_ETL_DEFAULT_VALUE] [varchar](50) NULL,
	[COL_IDENTITY_FLAG] [varchar](1) NULL,
	[SYSTEM_ID] [int] NOT NULL,
	[SYSTEM_ENV_NAME] [varchar](50) NOT NULL,
	[COL_DEF] [varchar](max) NULL,
	[CREATED_DATETIME] [datetime] NOT NULL,
	[LAST_MODIFIED_BY] [varchar](20) NULL,
	[LAST_MODIFIED_DATE_TIME] [datetime] NULL,
	[CREATED_BY] [varchar](20) NOT NULL,
	[COL_NULLABLE_FLAG] [varchar](1) NULL,
	[MIN_VALUE] [varchar](200) NULL,
	[MAX_VALUE] [varchar](200) NULL,
	[PERCENT_NULL_VALUE] [varchar](20) NULL,
	[COL_SCALE] [varchar](50) NULL,
	[PRIMARY_KEY_FLAG] [varchar](1) NULL,
	[NATURAL_KEY_FLAG] [varchar](1) NULL,
	[FOREIGN_KEY_FLAG] [varchar](1) NULL,
	[FK_TABLE_NAME] [varchar](50) NULL,
	[FK_COLUMN_NAME] [varchar](255) NULL,
	[COL_DATA_DOMAIN] [varchar](50) NULL,
	[LOGICAL_COLUMN_NAME] [varchar](255) NULL,
	[SDI_FLAG] [varchar](1) NULL,
	[SDI_DESCRIPTION] [varchar](max) NULL,
	[VALID] [bit] NULL,
	[INSERT_ORDER] [int] NULL,
	[COLUMN_COMMENTS] [varchar](max) NULL,
	[USER_DEFINATION1] [varchar](max) NULL,
	[USER_DEFINATION2] [varchar](max) NULL,
	[USER_DEFINATION3] [varchar](max) NULL,
	[USER_DEFINATION4] [varchar](max) NULL,
	[USER_DEFINATION5] [varchar](max) NULL,
	[COLUMN_REF_ID] [varchar](255) NULL,
	[TYPE] [varchar](max) NULL,
	[XPATH] [varchar](max) NULL,
	[USED_IN_GAP_ANALYSIS] [char](1) DEFAULT ''Y'' NOT NULL,
	[USER_DEFINATION6] [varchar](max) NULL,
	[USER_DEFINATION7] [varchar](max) NULL,
	[USER_DEFINATION8] [varchar](max) NULL,
	[USER_DEFINATION9] [varchar](max) NULL,
	[USER_DEFINATION10] [varchar](max) NULL,
	[FILE_STARTING_POSITION] [varchar](255) NULL,
	[COLUMN_CLASS] [varchar](255) NULL,
	[BUSINESS_KEY_FLAG] [char](1) NULL,
	[COLUMN_ALIAS] [varchar](255) NULL,
	[STATUS] VARCHAR(50) DEFAULT ''Active'' NOT NULL,
	[STCM_ID] BIGINT IDENTITY(1,1))
	');
END
GO

IF EXISTS (SELECT * FROM ADS_MM_VERSION WHERE VALUE <= '5.3')
BEGIN
EXECUTE('INSERT INTO SYSTEM_TABLE_COLUMNS_METADATA (
TABLE_NAME,
COLUMN_NAME,
COL_DATATYPE,
COL_LENGTH,
COL_PRECISION,
COL_DB_DEFAULT_VALUE,
COL_ETL_DEFAULT_VALUE,
COL_IDENTITY_FLAG,
SYSTEM_ID,
SYSTEM_ENV_NAME,
COL_DEF,
CREATED_DATETIME,
LAST_MODIFIED_BY,
LAST_MODIFIED_DATE_TIME,
CREATED_BY,
COL_NULLABLE_FLAG,
MIN_VALUE,
MAX_VALUE,
PERCENT_NULL_VALUE,
COL_SCALE,
PRIMARY_KEY_FLAG,
NATURAL_KEY_FLAG,
FOREIGN_KEY_FLAG,
FK_TABLE_NAME,
FK_COLUMN_NAME,
COL_DATA_DOMAIN,
LOGICAL_COLUMN_NAME,
SDI_FLAG,
SDI_DESCRIPTION,
VALID,
INSERT_ORDER,
COLUMN_COMMENTS,
USER_DEFINATION1,
USER_DEFINATION2,
USER_DEFINATION3,
USER_DEFINATION4,
USER_DEFINATION5,
COLUMN_REF_ID,
TYPE,
XPATH,
USED_IN_GAP_ANALYSIS,
USER_DEFINATION6,
USER_DEFINATION7,
USER_DEFINATION8,
USER_DEFINATION9,
USER_DEFINATION10,
FILE_STARTING_POSITION,
COLUMN_CLASS,
BUSINESS_KEY_FLAG,
COLUMN_ALIAS
)
SELECT
TABLE_NAME,
COLUMN_NAME,
COL_DATATYPE,
COL_LENGTH,
COL_PRECISION,
COL_DB_DEFAULT_VALUE,
COL_ETL_DEFAULT_VALUE,
COL_IDENTITY_FLAG,
SYSTEM_ID,
SYSTEM_ENV_NAME,
COL_DEF,
CREATED_DATETIME,
LAST_MODIFIED_BY,
LAST_MODIFIED_DATE_TIME,
CREATED_BY,
COL_NULLABLE_FLAG,
MIN_VALUE,
MAX_VALUE,
PERCENT_NULL_VALUE,
COL_SCALE,
PRIMARY_KEY_FLAG,
NATURAL_KEY_FLAG,
FOREIGN_KEY_FLAG,
FK_TABLE_NAME,
FK_COLUMN_NAME,
COL_DATA_DOMAIN,
LOGICAL_COLUMN_NAME,
SDI_FLAG,
SDI_DESCRIPTION,
VALID,
INSERT_ORDER,
COLUMN_COMMENTS,
USER_DEFINATION1,
USER_DEFINATION2,
USER_DEFINATION3,
USER_DEFINATION4,
USER_DEFINATION5,
COLUMN_REF_ID,
TYPE,
XPATH,
USED_IN_GAP_ANALYSIS,
USER_DEFINATION6,
USER_DEFINATION7,
USER_DEFINATION8,
USER_DEFINATION9,
USER_DEFINATION10,
FILE_STARTING_POSITION,
COLUMN_CLASS,
BUSINESS_KEY_FLAG,
COLUMN_ALIAS
FROM TEMP_SYSTEM_TABLE_COLUMNS_METADATA');
EXECUTE('DROP TABLE TEMP_SYSTEM_TABLE_COLUMNS_METADATA');
END
GO

IF EXISTS (SELECT * FROM ADS_MM_VERSION WHERE VALUE <= '5.3')
BEGIN
IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS WHERE CONSTRAINT_NAME='R_13')
   BEGIN
   EXECUTE('ALTER TABLE SYSTEM_TABLE_METADATA DROP CONSTRAINT R_13');
   END
EXECUTE [sp_rename]
        @objname  = N'XPKSYSTEM_TABLE_METADATA',
        @newname  = N'TEMP_XPKSYSTEM_TABLE_METADATA',
        @objtype  = 'OBJECT'
EXECUTE [sp_rename]
        @objname  = N'SYSTEM_TABLE_METADATA',
        @newname  = N'TEMP_SYSTEM_TABLE_METADATA',
        @objtype  = 'OBJECT'
EXECUTE('CREATE TABLE [SYSTEM_TABLE_METADATA](
	[SYSTEM_ID] [int] NOT NULL,
	[TABLE_NAME] [varchar](255) NOT NULL,
	[SYSTEM_ENV_NAME] [varchar](50) NOT NULL,
	[TABLE_DEF] [varchar](max) NULL,
	[CREATED_DATETIME] [datetime] NOT NULL,
	[LAST_MODIFIED_BY] [varchar](20) NULL,
	[LAST_MODIFIED_DATE_TIME] [datetime] NULL,
	[CREATED_BY] [varchar](20) NOT NULL,
	[NUMBER_ROWS] [bigint] NULL,
	[TYPE] [varchar](20) NULL,
	[LOGICAL_TABLE_NAME] [varchar](255) NULL,
	[VALID] [bit] NULL,
	[ACTUAL_TABLE_NAME] [varchar](100) NULL,
	[TABLE_REF_ID] [varchar](255) NULL,
	[USER_DEFINED1] [varchar](max) NULL,
	[USER_DEFINED2] [varchar](max) NULL,
	[USER_DEFINED3] [varchar](max) NULL,
	[USER_DEFINED4] [varchar](max) NULL,
	[USER_DEFINED5] [varchar](max) NULL,
	[USED_IN_GAP_ANALYSIS] [char](1) DEFAULT ''Y'' NOT NULL,
	[TABLE_COMMENTS] [varchar](max) NULL,
	[USER_DEFINED6] [varchar](max) NULL,
	[USER_DEFINED7] [varchar](max) NULL,
	[USER_DEFINED8] [varchar](max) NULL,
	[USER_DEFINED9] [varchar](max) NULL,
	[USER_DEFINED10] [varchar](max) NULL,
	[FILE_TYPE] [varchar](255) NULL,
	[TABLE_CLASS] [varchar](255) NULL,
	[TABLE_ALIAS] [varchar](255) NULL,
	[STATUS] VARCHAR(50) DEFAULT ''Active'' NOT NULL,
	[STM_ID] [bigint] identity(1,1))');
END
GO

IF EXISTS (SELECT * FROM ADS_MM_VERSION WHERE VALUE <= '5.3')
BEGIN
EXECUTE('INSERT INTO SYSTEM_TABLE_METADATA (
SYSTEM_ID,
TABLE_NAME,
SYSTEM_ENV_NAME,
TABLE_DEF,
CREATED_DATETIME,
LAST_MODIFIED_BY,
LAST_MODIFIED_DATE_TIME,
CREATED_BY,
NUMBER_ROWS,
TYPE,
LOGICAL_TABLE_NAME,
VALID,
ACTUAL_TABLE_NAME,
TABLE_REF_ID,
USER_DEFINED1,
USER_DEFINED2,
USER_DEFINED3,
USER_DEFINED4,
USER_DEFINED5,
USED_IN_GAP_ANALYSIS,
TABLE_COMMENTS,
USER_DEFINED6,
USER_DEFINED7,
USER_DEFINED8,
USER_DEFINED9,
USER_DEFINED10,
FILE_TYPE,
TABLE_CLASS,
TABLE_ALIAS)
SELECT
SYSTEM_ID,
TABLE_NAME,
SYSTEM_ENV_NAME,
TABLE_DEF,
CREATED_DATETIME,
LAST_MODIFIED_BY,
LAST_MODIFIED_DATE_TIME,
CREATED_BY,
NUMBER_ROWS,
TYPE,
LOGICAL_TABLE_NAME,
VALID,
ACTUAL_TABLE_NAME,
TABLE_REF_ID,
USER_DEFINED1,
USER_DEFINED2,
USER_DEFINED3,
USER_DEFINED4,
USER_DEFINED5,
USED_IN_GAP_ANALYSIS,
TABLE_COMMENTS,
USER_DEFINED6,
USER_DEFINED7,
USER_DEFINED8,
USER_DEFINED9,
USER_DEFINED10,
FILE_TYPE,
TABLE_CLASS,
TABLE_ALIAS
FROM TEMP_SYSTEM_TABLE_METADATA');
EXECUTE('DROP TABLE TEMP_SYSTEM_TABLE_METADATA');
EXECUTE('ALTER TABLE [SYSTEM_TABLE_METADATA] ADD  CONSTRAINT [PK_SYS_TAB_METADATA] PRIMARY KEY CLUSTERED
(
	[STM_ID] ASC
)');
EXECUTE('ALTER TABLE [SYSTEM_TABLE_COLUMNS_METADATA] ADD  CONSTRAINT [PK_STCM_ID] PRIMARY KEY CLUSTERED
(
	[STCM_ID] ASC
)');
END
GO

IF EXISTS (SELECT * FROM ADS_MM_VERSION WHERE VALUE <= '5.3')
BEGIN
IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS WHERE CONSTRAINT_NAME='R_11')
   BEGIN
   EXECUTE('ALTER TABLE SYS_CON_ENVIRONMENTS DROP CONSTRAINT R_11');
   END
IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS WHERE CONSTRAINT_NAME='RM_SYSCON_FK1')
   BEGIN
   EXECUTE('ALTER TABLE RM_PROMOTE_SYS_CON_ENVS DROP CONSTRAINT RM_SYSCON_FK1');
   END
EXECUTE [sp_rename]
        @objname  = N'XPKSYS_CON_ENVIRONMENTS',
        @newname  = N'TEMP_XPKSYS_CON_ENV',
        @objtype  = 'OBJECT'
EXECUTE [sp_rename]
        @objname  = N'SYS_CON_ENVIRONMENTS',
        @newname  = N'TEMP_SYS_CON_ENV',
        @objtype  = 'OBJECT'
EXECUTE('CREATE TABLE [SYS_CON_ENVIRONMENTS] (
	[SYSTEM_ENVIRONMENT_TYPE] [varchar](50) NULL,
	[SYSTEM_ENVIRONMENT_NAME] [varchar](50) NOT NULL,
	[SYSTEM_ID] [int] NOT NULL,
	[SYSTEM_NAME] [varchar](50) NULL,
	[SERVER_PLATFORM] [varchar](50) NULL,
	[SERVER_OS_VERSION] [varchar](50) NULL,
	[SPECIAL_APP_CON_INSTS] [varchar](max) NULL,
	[CREATED_DATETIME] [datetime] NOT NULL,
	[LAST_MODIFIED_BY] [varchar](20) NULL,
	[LAST_MODIFIED_DATE_TIME] [datetime] NULL,
	[CREATED_BY] [varchar](20) NOT NULL,
	[IP_ADDRESS] [varchar](50) NULL,
	[PORT] [varchar](10) NULL,
	[DBMS_NAME] [varchar](50) NULL,
	[DBMS_INSTANCE_SCHEMA] [varchar](MAX) NULL,
	[ENV_INTENDED_USE_DESCR] [varchar](max) NULL,
	[ENVIRONMENT_NOTES] [varchar](max) NULL,
	[USER_NAME] [varchar](50) NULL,
	[PASSWORD] [varchar](50) NULL,
	[DATABASE_TYPE] [varchar](50) NULL,
	[DATABASE_URL] [varchar](255) NULL,
	[DATABASE_DRIVER] [varchar](50) NULL,
	[LAST_LOADING_TIME] [datetime] NULL,
	[USER_ID] [varchar](50) NULL,
	[DB_DOMAIN] [varchar](255) NULL,
	[DATA_FILE_NAME] [varchar](255) NULL,
	[DATA_FILE] [image] NULL,
	[PWD_ENCRYPT_FLAG] [char](1) DEFAULT ''N'' NOT NULL,
	[FILE_MANAGEMENT_SYSTEM_TYPE] [varchar](50) NULL,
	[FILE_LOCATION] [varchar](50) NULL,
	[PROD_SYSTEM_ID] [int] NULL,
	[PROD_SYSTEM_NAME] [varchar](50) NULL,
	[PROD_ENVIRONMENT_NAME] [varchar](50) NULL,
	[TABLE_DISPLAY_FLAG] [char](1) DEFAULT ''N'' NOT NULL,
	[VIEW_DISPLAY_FLAG] [char](1) DEFAULT ''N'' NOT NULL,
	[SYNONYM_DISPLAY_FLAG] [char](1) DEFAULT ''N'' NOT NULL,
	[STATUS] VARCHAR(50) DEFAULT ''Active'' NOT NULL,
	[SYSTEM_NUMBER] INT NULL,
	[DESTINATION] varchar(50) NULL,
	[CLIENT] INT NULL,
	[SAP_DELIMITER] CHAR(1) NULL,
	[SAP_MANUAL_TABLES] VARCHAR(MAX) NULL,
	[SCE_ID] bigint identity(1,1) NOT NULL)');
EXECUTE [sp_rename]
        @objname  = N'XPKSYSTEM_DEFINITION_DETAILS',
        @newname  = N'TEMP_XPKSYSTEM_DEF_DETAILS',
        @objtype  = 'OBJECT'
EXECUTE [sp_rename]
        @objname  = N'SYSTEM_DEFINITION_DETAILS',
        @newname  = N'TEMP_SYSTEM_DEF_DETAILS',
        @objtype  = 'OBJECT'
EXECUTE('CREATE TABLE [SYSTEM_DEFINITION_DETAILS](
	[SYSTEM_NAME] [varchar](50) NOT NULL,
	[SYSTEM_MOVE_TYPE_SRC_TGT] [varchar](20) NULL,
	[SYSTEM_BUSINESS_PURPOSE_SHORT] [varchar](max) NULL,
	[SYSTEM_DESCRIPTION_LONG] [varchar](max) NULL,
	[SERVER_PLATFORM] [varchar](20) NULL,
	[SERVER_OS_VERSION] [varchar](20) NULL,
	[DBMS_PLATFORM] [varchar](20) NULL,
	[DBMS_VERSION] [varchar](20) NULL,
	[FILE_MANAGMENT_SYSTEM_TYPE] [varchar](20) NULL,
	[FILE_LOCATION] [varchar](255) NULL,
	[ESB_PLATFORM_TYPE] [varchar](20) NULL,
	[ESB_Q_MGR_NAME] [varchar](20) NULL,
	[RELEASE] [varchar](20) NULL,
	[TOTAL_NUM_TABLES] [int] NULL,
	[TOTAL_DB_SIZE_GIGABYTES] [varchar](20) NULL,
	[DEFINITION_OF_END_OF_DAY] [varchar](max) NULL,
	[DAILY_BATCH_EXTRACT_WINDOW] [varchar](max) NULL,
	[AVG_NUM_NAMED_USERS] [varchar](20) NULL,
	[AVG_NUM_CONCURRENT_USERS] [varchar](20) NULL,
	[SPECIAL_INSRUCTIONS_COMMENTS] [varchar](max) NULL,
	[SYSTEM_OWNER_FULL_NAME] [varchar](255) NULL,
	[SYSTEM_OWNER_TEL] [varchar](20) NULL,
	[SYSTEM_OWNER_EMAIL] [varchar](255) NULL,
	[CREATED_BY] [varchar](20) NOT NULL,
	[CREATED_DATETIME] [datetime] NOT NULL,
	[LAST_MODIFIED_BY] [varchar](20) NULL,
	[LAST_MODIFIED_DATE_TIME] [datetime] NULL,
	[SYSTEM_ID] [int] identity(1,1) NOT NULL,
 CONSTRAINT [XPKSYSTEM_DEFINITION_DETAILS] PRIMARY KEY CLUSTERED
(
	[SYSTEM_ID] ASC
))');
EXECUTE('ALTER TABLE SYSTEM_DEFINITION_DETAILS ADD CONSTRAINT UK_SYS_NAME UNIQUE (SYSTEM_NAME)');
END
GO

IF EXISTS (SELECT * FROM ADS_MM_VERSION WHERE VALUE <= '5.3')
BEGIN
SET IDENTITY_INSERT SYSTEM_DEFINITION_DETAILS ON
EXECUTE('INSERT INTO SYSTEM_DEFINITION_DETAILS (
SYSTEM_NAME,
SYSTEM_MOVE_TYPE_SRC_TGT,
SYSTEM_BUSINESS_PURPOSE_SHORT,
SYSTEM_DESCRIPTION_LONG,
SERVER_PLATFORM,
SERVER_OS_VERSION,
DBMS_PLATFORM,
DBMS_VERSION,
FILE_MANAGMENT_SYSTEM_TYPE,
FILE_LOCATION,
ESB_PLATFORM_TYPE,
ESB_Q_MGR_NAME,
RELEASE,
TOTAL_NUM_TABLES,
TOTAL_DB_SIZE_GIGABYTES,
DEFINITION_OF_END_OF_DAY,
DAILY_BATCH_EXTRACT_WINDOW,
AVG_NUM_NAMED_USERS,
AVG_NUM_CONCURRENT_USERS,
SPECIAL_INSRUCTIONS_COMMENTS,
SYSTEM_OWNER_FULL_NAME,
SYSTEM_OWNER_TEL,
SYSTEM_OWNER_EMAIL,
CREATED_BY,
CREATED_DATETIME,
LAST_MODIFIED_BY,
LAST_MODIFIED_DATE_TIME,
SYSTEM_ID)
SELECT SYSTEM_NAME,
SYSTEM_MOVE_TYPE_SRC_TGT,
SYSTEM_BUSINESS_PURPOSE_SHORT,
SYSTEM_DESCRIPTION_LONG,
SERVER_PLATFORM,
SERVER_OS_VERSION,
DBMS_PLATFORM,
DBMS_VERSION,
FILE_MANAGMENT_SYSTEM_TYPE,
FILE_LOCATION,
ESB_PLATFORM_TYPE,
ESB_Q_MGR_NAME,
RELEASE,
TOTAL_NUM_TABLES,
TOTAL_DB_SIZE_GIGABYTES,
DEFINITION_OF_END_OF_DAY,
DAILY_BATCH_EXTRACT_WINDOW,
AVG_NUM_NAMED_USERS,
AVG_NUM_CONCURRENT_USERS,
SPECIAL_INSRUCTIONS_COMMENTS,
SYSTEM_OWNER_FULL_NAME,
SYSTEM_OWNER_TEL,
SYSTEM_OWNER_EMAIL,
CREATED_BY,
CREATED_DATETIME,
LAST_MODIFIED_BY,
LAST_MODIFIED_DATE_TIME,
SYSTEM_ID FROM TEMP_SYSTEM_DEF_DETAILS');
SET IDENTITY_INSERT SYSTEM_DEFINITION_DETAILS OFF
EXECUTE('INSERT INTO SYS_CON_ENVIRONMENTS (
	   [SYSTEM_ENVIRONMENT_TYPE]
      ,[SYSTEM_ENVIRONMENT_NAME]
      ,[SYSTEM_ID]
      ,[SYSTEM_NAME]
      ,[SERVER_PLATFORM]
      ,[SERVER_OS_VERSION]
      ,[SPECIAL_APP_CON_INSTS]
      ,[CREATED_DATETIME]
      ,[LAST_MODIFIED_BY]
      ,[LAST_MODIFIED_DATE_TIME]
      ,[CREATED_BY]
      ,[IP_ADDRESS]
      ,[PORT]
      ,[DBMS_NAME]
      ,[DBMS_INSTANCE_SCHEMA]
      ,[ENV_INTENDED_USE_DESCR]
      ,[ENVIRONMENT_NOTES]
      ,[USER_NAME]
      ,[PASSWORD]
      ,[DATABASE_TYPE]
      ,[DATABASE_URL]
      ,[DATABASE_DRIVER]
      ,[LAST_LOADING_TIME]
      ,[USER_ID]
      ,[DB_DOMAIN]
      ,[DATA_FILE_NAME]
      ,[DATA_FILE]
      ,[PWD_ENCRYPT_FLAG]
      ,[FILE_MANAGEMENT_SYSTEM_TYPE]
      ,[FILE_LOCATION]
      ,[PROD_SYSTEM_ID]
      ,[PROD_SYSTEM_NAME]
      ,[PROD_ENVIRONMENT_NAME]
      ,[TABLE_DISPLAY_FLAG]
      ,[VIEW_DISPLAY_FLAG]
      ,[SYNONYM_DISPLAY_FLAG]
      ,[SAP_DELIMITER]
      ,[SAP_MANUAL_TABLES]
      ,[SYSTEM_NUMBER]
      ,[DESTINATION]
      ,[CLIENT])
	SELECT [SYSTEM_ENVIRONMENT_TYPE]
      ,[SYSTEM_ENVIRONMENT_NAME]
      ,[SYSTEM_ID]
      ,[SYSTEM_NAME]
      ,[SERVER_PLATFORM]
      ,[SERVER_OS_VERSION]
      ,[SPECIAL_APP_CON_INSTS]
      ,[CREATED_DATETIME]
      ,[LAST_MODIFIED_BY]
      ,[LAST_MODIFIED_DATE_TIME]
      ,[CREATED_BY]
      ,[IP_ADDRESS]
      ,[PORT]
      ,[DBMS_NAME]
      ,[DBMS_INSTANCE_SCHEMA]
      ,[ENV_INTENDED_USE_DESCR]
      ,[ENVIRONMENT_NOTES]
      ,[USER_NAME]
      ,[PASSWORD]
      ,[DATABASE_TYPE]
      ,[DATABASE_URL]
      ,[DATABASE_DRIVER]
      ,[LAST_LOADING_TIME]
      ,[USER_ID]
      ,[DB_DOMAIN]
      ,[DATA_FILE_NAME]
      ,[DATA_FILE]
      ,[PWD_ENCRYPT_FLAG]
      ,[FILE_MANAGEMENT_SYSTEM_TYPE]
      ,[FILE_LOCATION]
      ,[PROD_SYSTEM_ID]
      ,[PROD_SYSTEM_NAME]
      ,[PROD_ENVIRONMENT_NAME]
      ,[TABLE_DISPLAY_FLAG]
      ,[VIEW_DISPLAY_FLAG]
      ,[SYNONYM_DISPLAY_FLAG]
      ,[SAP_DELIMITER]
      ,[SAP_MANUAL_TABLES]
      ,[SYSTEM_NUMBER]
      ,[DESTINATION]
      ,[CLIENT]
      FROM TEMP_SYS_CON_ENV');
EXECUTE('DROP TABLE TEMP_SYS_CON_ENV');
EXECUTE('DROP TABLE TEMP_SYSTEM_DEF_DETAILS');
EXECUTE('ALTER TABLE [SYS_CON_ENVIRONMENTS] ADD CONSTRAINT [XPK_SYS_CON_ENVIRONMENTS] PRIMARY KEY CLUSTERED
(
	[SCE_ID] ASC
)');
EXECUTE('ALTER TABLE [SYS_CON_ENVIRONMENTS]  ADD  CONSTRAINT [FK_ENV_SYS_ID] FOREIGN KEY([SYSTEM_ID]) REFERENCES [SYSTEM_DEFINITION_DETAILS] ([SYSTEM_ID])');
EXECUTE('ALTER TABLE [SYS_CON_ENVIRONMENTS] ADD  CONSTRAINT [UK_SYS_CON_ENV] UNIQUE NONCLUSTERED
(
	[SYSTEM_ID] ASC,
	[SYSTEM_ENVIRONMENT_NAME] ASC
)');
EXECUTE ('ALTER TABLE [RM_PROMOTE_SYS_CON_ENVS]  ADD  CONSTRAINT [RM_SYSCON_FK1] FOREIGN KEY([SYSTEM_ID], [SYSTEM_ENVIRONMENT_NAME]) REFERENCES [SYS_CON_ENVIRONMENTS] ([SYSTEM_ID], [SYSTEM_ENVIRONMENT_NAME])
ON DELETE CASCADE');
EXECUTE('ALTER TABLE [SYSTEM_TABLE_METADATA] ADD  CONSTRAINT [UK_SYSID_ENV_TAB_NAME] UNIQUE NONCLUSTERED
(
	[SYSTEM_ID] ASC,
	[SYSTEM_ENV_NAME] ASC,
	[TABLE_NAME] ASC
)');
EXECUTE('ALTER TABLE [SYSTEM_TABLE_METADATA]  ADD  CONSTRAINT [FK_SYS_CON_ENV] FOREIGN KEY([SYSTEM_ID], [SYSTEM_ENV_NAME]) REFERENCES [SYS_CON_ENVIRONMENTS] ([SYSTEM_ID], [SYSTEM_ENVIRONMENT_NAME])');
EXECUTE('ALTER TABLE [SYSTEM_TABLE_COLUMNS_METADATA] ADD  CONSTRAINT [UK_SYS_ID_ENV_TAB_COL] UNIQUE NONCLUSTERED
(
	[SYSTEM_ID] ASC,
	[SYSTEM_ENV_NAME] ASC,
	[TABLE_NAME] ASC,
	[COLUMN_NAME] ASC
)');
EXECUTE('ALTER TABLE [SYSTEM_TABLE_COLUMNS_METADATA]  ADD  CONSTRAINT [FK_SYS_TAB_METADATA] FOREIGN KEY([SYSTEM_ID], [SYSTEM_ENV_NAME], [TABLE_NAME]) REFERENCES [SYSTEM_TABLE_METADATA] ([SYSTEM_ID], [SYSTEM_ENV_NAME], [TABLE_NAME])');
EXECUTE('ALTER TABLE [SYSTEM_DOCUMENTS]  ADD  CONSTRAINT [R_15] FOREIGN KEY([SYSTEM_ID]) REFERENCES [SYSTEM_DEFINITION_DETAILS] ([SYSTEM_ID])');
EXECUTE('ALTER TABLE [SYSTEM_DOCUMENTS] ADD  CONSTRAINT [XPK_SYS_DOCS] PRIMARY KEY CLUSTERED
(
	[SYSTEM_DOC_ID] ASC
)');
END
GO
IF COL_LENGTH('SYS_CON_ENVIRONMENTS', 'MAX_NO_OF_CONNECTIONS') IS NULL
    BEGIN
        EXECUTE('ALTER TABLE SYS_CON_ENVIRONMENTS ADD MAX_NO_OF_CONNECTIONS INT NULL DEFAULT 10');
        EXECUTE('UPDATE SYS_CON_ENVIRONMENTS SET MAX_NO_OF_CONNECTIONS = 10 WHERE MAX_NO_OF_CONNECTIONS IS NULL');
    END
GO
IF COL_LENGTH('SYS_CON_ENVIRONMENTS', 'MIN_NO_OF_CONNECTIONS') IS NULL
    BEGIN
        EXECUTE('ALTER TABLE SYS_CON_ENVIRONMENTS ADD MIN_NO_OF_CONNECTIONS INT NULL DEFAULT 3');
        EXECUTE('UPDATE SYS_CON_ENVIRONMENTS SET MIN_NO_OF_CONNECTIONS = 3 WHERE MIN_NO_OF_CONNECTIONS IS NULL');
    END
GO
IF COL_LENGTH('SYS_CON_ENVIRONMENTS', 'NO_OF_PARTITIONS') IS NULL
    BEGIN
        EXECUTE('ALTER TABLE SYS_CON_ENVIRONMENTS ADD NO_OF_PARTITIONS INT NULL DEFAULT 2');
        EXECUTE('UPDATE SYS_CON_ENVIRONMENTS SET NO_OF_PARTITIONS = 2 WHERE NO_OF_PARTITIONS IS NULL');
    END
GO
IF COL_LENGTH('RM_RELEASE', 'RELEASE_OWNER') IS NULL
BEGIN
    ALTER TABLE RM_RELEASE ADD RELEASE_OWNER VARCHAR(255) NULL
END
GO
IF COL_LENGTH('RM_PROJECT', 'CREATED_BY') IS NULL
BEGIN
    ALTER TABLE RM_PROJECT ADD CREATED_BY VARCHAR(20) NULL
END
GO
IF COL_LENGTH('RM_PROJECT', 'CREATED_DATE_TIME') IS NULL
BEGIN
     ALTER TABLE RM_PROJECT ADD CREATED_DATE_TIME DATETIME NULL
END
GO
IF COL_LENGTH('RM_PROJECT', 'LAST_MODIFIED_BY') IS NULL
BEGIN
    ALTER TABLE RM_PROJECT ADD LAST_MODIFIED_BY VARCHAR(20) NULL
END
GO
IF COL_LENGTH('RM_PROJECT', 'LAST_MODIFIED_DATE_TIME') IS NULL
BEGIN
    ALTER TABLE RM_PROJECT ADD LAST_MODIFIED_DATE_TIME DATETIME NULL
END
GO
IF COL_LENGTH('RM_RELEASE', 'CREATED_BY') IS NULL
BEGIN
    ALTER TABLE RM_RELEASE ADD CREATED_BY VARCHAR(20) NULL
END
GO
IF COL_LENGTH('RM_RELEASE', 'CREATED_DATE_TIME') IS NULL
BEGIN
    ALTER TABLE RM_RELEASE ADD CREATED_DATE_TIME DATETIME NULL
END
GO
IF COL_LENGTH('RM_RELEASE', 'LAST_MODIFIED_BY') IS NULL
BEGIN
    ALTER TABLE RM_RELEASE ADD LAST_MODIFIED_BY VARCHAR(20) NULL
END
GO
IF COL_LENGTH('RM_RELEASE', 'LAST_MODIFIED_DATE_TIME') IS NULL
BEGIN
    ALTER TABLE RM_RELEASE ADD LAST_MODIFIED_DATE_TIME DATETIME NULL
END
GO

IF COL_LENGTH('RM_MIGRATIONOBJECT', 'CREATED_BY') IS NULL
BEGIN
    ALTER TABLE RM_MIGRATIONOBJECT ADD CREATED_BY VARCHAR(20) NULL
END
GO
IF COL_LENGTH('RM_MIGRATIONOBJECT', 'CREATED_DATE_TIME') IS NULL
BEGIN
	ALTER TABLE RM_MIGRATIONOBJECT ADD CREATED_DATE_TIME DATETIME NULL
END
GO
IF COL_LENGTH('RM_MIGRATIONOBJECT', 'LAST_MODIFIED_BY') IS NULL
BEGIN
    ALTER TABLE RM_MIGRATIONOBJECT ADD LAST_MODIFIED_BY VARCHAR(20) NULL
END
GO
IF COL_LENGTH('RM_MIGRATIONOBJECT', 'LAST_MODIFIED_DATE_TIME') IS NULL
BEGIN
    ALTER TABLE RM_MIGRATIONOBJECT ADD LAST_MODIFIED_DATE_TIME DATETIME NULL
END
GO
IF COL_LENGTH('RM_MIGRATIONOBJECT', 'SUBJECT_ID') IS NULL
BEGIN
	ALTER TABLE RM_MIGRATIONOBJECT ADD SUBJECT_ID INT NULL
END
GO
IF COL_LENGTH('RM_MIGRATIONOBJECT', 'PROJECT_ID') IS NULL
BEGIN
    ALTER TABLE RM_MIGRATIONOBJECT ADD PROJECT_ID INT NULL
END
GO
IF COL_LENGTH('RM_MIGRATIONOBJECT', 'MIGRATIONOBJECTVERSION') IS NULL
BEGIN
    EXECUTE('ALTER TABLE RM_MIGRATIONOBJECT ADD MIGRATIONOBJECTVERSION DECIMAL(18,2) NULL');
    EXECUTE('UPDATE RM_MIGRATIONOBJECT
    SET PROJECT_ID = MD.PROJECT_ID, SUBJECT_ID = MD.SUBJECT_ID, MIGRATIONOBJECTVERSION = MD.MAP_SPEC_VERSION
    FROM MAPPING_DETAILS MD JOIN
    RM_MIGRATIONOBJECT MO
    ON MD.MAP_ID = MO.MAP_ID');
    EXECUTE('UPDATE RM_MIGRATIONOBJECT
    SET PROJECT_ID = MD.CSM_MAP_CAT_ID, SUBJECT_ID = 0, MIGRATIONOBJECTVERSION = MD.CSM_MAP_VERSION
    FROM CSM_MAPPING_DETAILS MD JOIN
    RM_MIGRATIONOBJECT MO
    ON MD.CSM_MAP_ID = MO.CSM_MAP_ID');
    EXECUTE('UPDATE RM_MIGRATIONOBJECT
    SET PROJECT_ID = CC.CATEGORY_ID, SUBJECT_ID = 0, MIGRATIONOBJECTVERSION = CC.CODESET_VERSION
    FROM CSM_CODESET CC JOIN
    RM_MIGRATIONOBJECT MO
    ON CC.CODESET_ID = MO.CODESET_ID');
END
GO


IF EXISTS (SELECT * FROM SYS.OBJECTS WHERE OBJECT_ID = OBJECT_ID(N'[GREATEST]') AND TYPE IN (N'FN', N'IF', N'TF', N'FS', N'FT'))
BEGIN
    DROP FUNCTION [GREATEST]
END
GO
CREATE FUNCTION GREATEST(@v1 datetime, @v2 datetime=NULL, @v3 datetime=NULL)
RETURNS datetime AS
BEGIN
 DECLARE @return datetime
 SELECT TOP 1 @return=VALUE
 FROM (SELECT @v1 value UNION ALL SELECT @v2 UNION ALL SELECT @v3) a
 ORDER BY value DESC
 RETURN @return
END
GO
IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'SYSTEM_TABLE_COLUMNS_METADATA' AND COLUMN_NAME = 'MIN_VALUE' AND CHARACTER_MAXIMUM_LENGTH=20)
    BEGIN
      EXECUTE ('ALTER TABLE SYSTEM_TABLE_COLUMNS_METADATA ALTER COLUMN  MIN_VALUE varchar(200)')
    END;
GO

IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'SYSTEM_TABLE_COLUMNS_METADATA' AND COLUMN_NAME = 'MAX_VALUE' AND CHARACTER_MAXIMUM_LENGTH=20)
    BEGIN
      EXECUTE ('ALTER TABLE SYSTEM_TABLE_COLUMNS_METADATA ALTER COLUMN  MAX_VALUE varchar(200)')
    END;
GO
IF COL_LENGTH('CAT_TEMPLATE_OPTIONS', 'CAT_OPTION_CONTROL_WIDTH') IS NULL
BEGIN
    ALTER TABLE CAT_TEMPLATE_OPTIONS ADD CAT_OPTION_CONTROL_WIDTH VARCHAR(20) NULL
END
GO

IF COL_LENGTH('CAT_TEMPLATES', 'CAT_FORM_PROPERTIES') IS NULL
BEGIN
    ALTER TABLE CAT_TEMPLATES ADD CAT_FORM_PROPERTIES VARCHAR(500) NULL
END
GO
IF NOT EXISTS (SELECT *
	       FROM   SYSOBJECTS
	       WHERE  ID = OBJECT_ID(N'TCM_VALIDATION_TYPE')
		      AND TYPE = 'U')
 BEGIN
      EXECUTE ('
        CREATE TABLE TCM_VALIDATION_TYPE
        (
            VALIDATION_TYPE_ID bigint IDENTITY(1,1) NOT NULL,
            VALIDATION_TYPE_NAME varchar(400) NOT NULL,
            CONSTRAINT PK_VALIDATION_TYPE PRIMARY KEY(VALIDATION_TYPE_ID),
            CONSTRAINT UK_VALID_TYPE_NAME UNIQUE (VALIDATION_TYPE_NAME)
        )')
  END
GO

IF NOT EXISTS (SELECT *
	       FROM   SYSOBJECTS
	       WHERE  ID = OBJECT_ID(N'TCM_TESTCASE_TYPE')
		      AND TYPE = 'U')

 BEGIN
      EXECUTE ('CREATE TABLE TCM_TESTCASE_TYPE (
    TESTCASE_TYPE_ID bigint IDENTITY(1,1) NOT NULL,
    TESTCASE_TYPE_NAME varchar(400) NOT NULL,
    CONSTRAINT PK_TESTCASE_TYPE PRIMARY KEY(TESTCASE_TYPE_ID),
    CONSTRAINT UK_TEST_TYPE_NAME UNIQUE (TESTCASE_TYPE_NAME)
    )')
  END
GO


IF NOT EXISTS (SELECT *
	       FROM   SYSOBJECTS
	       WHERE  ID = OBJECT_ID(N'TCM_TESTCASE_STATUS')
		      AND TYPE = 'U')

 BEGIN
      EXECUTE ('CREATE TABLE TCM_TESTCASE_STATUS (
    STATUS_ID bigint IDENTITY(1,1) NOT NULL,
    STATUS_NAME varchar(400) NOT NULL,
    CONSTRAINT PK_TESTCASE_STATUS PRIMARY KEY(STATUS_ID),
    CONSTRAINT UK_TC_STATUS_NAME UNIQUE (STATUS_NAME)
)')
  END
GO

IF NOT EXISTS (SELECT *
	       FROM   SYSOBJECTS
	       WHERE  ID = OBJECT_ID(N'TCM_TESTCASE_PRIORITY')
		      AND TYPE = 'U')

 BEGIN
      EXECUTE ('CREATE TABLE TCM_TESTCASE_PRIORITY (
     PRIORITY_ID bigint IDENTITY(1,1) NOT NULL,
    PRIORITY_NAME varchar(400) NOT NULL,
    CONSTRAINT PK_TC_PRIORITY PRIMARY KEY(PRIORITY_ID),
    CONSTRAINT UK_TC_PRIORITY UNIQUE (PRIORITY_NAME)
    )')
  END
GO

IF NOT EXISTS (SELECT *
	       FROM   SYSOBJECTS
	       WHERE  ID = OBJECT_ID(N'TCM_TESTCASE')
		      AND TYPE = 'U')

 BEGIN
      EXECUTE ('CREATE TABLE TCM_TESTCASE (    TESTCASE_ID int IDENTITY(1,1) NOT NULL, TESTCASE_LABEL varchar(400) NULL, TESTCASE_TYPE_ID BIGINT NULL, TESTCASE_NAME varchar(400) NOT NULL, STATUS_ID BIGINT NULL, PRIORITY_ID BIGINT  NULL, TEST_SQL_SCRIPT varchar(4000) NULL, DESCRIPTION varchar(4000) NULL, CREATED_BY varchar (400) NULL,  CREATED_DATE datetime NULL, MODIFIED_BY varchar(400) NULL, MODIFIED_DATE [datetime] NULL,  EXTENDABLE varchar(50) NULL,TESTCASE_ROOT_ID BIGINT NULL,
    EXPECTED_RESULT VARCHAR(4000) NULL,
    ACTUAL_RESULT VARCHAR(4000) NULL,
    TEST_COMMENTS VARCHAR(4000) NULL,
    CONSTRAINT PK_TESTCASE PRIMARY KEY(TESTCASE_ID),
    CONSTRAINT FK_TESTCASE_TYPE FOREIGN KEY(TESTCASE_TYPE_ID) REFERENCES TCM_TESTCASE_TYPE(TESTCASE_TYPE_ID),
    CONSTRAINT FK_TESTCASE_STATUS FOREIGN KEY(STATUS_ID) REFERENCES TCM_TESTCASE_STATUS(STATUS_ID),
    CONSTRAINT FK_PRIORITY FOREIGN KEY(PRIORITY_ID) REFERENCES TCM_TESTCASE_PRIORITY(PRIORITY_ID))' )
  END
GO

IF NOT EXISTS (SELECT *
	       FROM   SYSOBJECTS
	       WHERE  ID = OBJECT_ID(N'TCM_TESTCASE_STEP')
		      AND TYPE = 'U')

 BEGIN
      EXECUTE ('CREATE TABLE TCM_TESTCASE_STEP (   STEP_ID int IDENTITY(1,1) NOT NULL,
	TESTCASE_ID int NOT NULL,
	STEP_NAME varchar(400) NOT NULL,
	STATUS_ID BIGINT NULL,
	DESCRIPTION varchar(4000) NULL,
	EXPECTED_RESULT varchar(4000) NULL,
	ACTUAL_RESULT varchar(4000) NULL,
        TEST_STEP_COMMENTS VARCHAR(4000) NULL,
	VALIDATION_TYPE_ID BIGINT NULL,
	CREATED_BY varchar(400) NULL,
	CREATED_DATE datetime NULL,
	MODIFIED_BY varchar(400) NULL,
	MODIFIED_DATE datetime NULL,
	CONSTRAINT FK_TESTCASE_ID FOREIGN KEY(TESTCASE_ID) REFERENCES TCM_TESTCASE(TESTCASE_ID),
        CONSTRAINT FK_TESTSTEP_STATUS FOREIGN KEY(STATUS_ID) REFERENCES TCM_TESTCASE_STATUS(STATUS_ID),
        CONSTRAINT FK_VALIDATION_TYPE FOREIGN KEY(VALIDATION_TYPE_ID) REFERENCES TCM_VALIDATION_TYPE(VALIDATION_TYPE_ID))')
  END
GO

IF NOT EXISTS (SELECT *
	       FROM   SYSOBJECTS
	       WHERE  ID = OBJECT_ID(N'TCM_OBJECT_TESTCASE')
		      AND TYPE = 'U')

 BEGIN
      EXECUTE ('CREATE TABLE TCM_OBJECT_TESTCASE  (OBJECT_ID  INT  NOT NULL, OBJECT_TYPE_ID INT NOT NULL, TESTCASE_ID INT  NOT NULL)')
  END
GO

IF NOT EXISTS (SELECT *
	       FROM   SYSOBJECTS
	       WHERE  ID = OBJECT_ID(N'TCM_TESTCASE_DOCS')
		      AND TYPE = 'U')
 BEGIN
      EXECUTE ('CREATE TABLE TCM_TESTCASE_DOCS (
	TESTCASE_DOC_NAME varchar(50) NOT NULL,
	TESTCASE_DOC_TYPE varchar (20) NULL,
	TEST_DOC_INTE_USE_DESC varchar (max) NULL,
	TESTCASE_DOC_OWNER varchar (50) NULL,
	OBJECT_ID int NOT NULL,
	OBJECT_TYPE_ID int NOT NULL,
	TESTCASE_ID int NOT NULL,
	TESTCASE_DOC_ID bigint IDENTITY(1,1) NOT NULL,
	CREATED_DATE_TIME datetime NOT NULL,
	LAST_MODIFIED_BY varchar(20) NULL,
	LAST_MODIFIED_DATE_TIME datetime NULL,
	CREATED_BY varchar(20) NOT NULL,
	TESTCASE_DOC_OBJECT varchar (max) NOT NULL,
	APPROVAL_REQD_FLAG char (1) NULL,
	APPROVED_BY  varchar(20) NULL,
	APROVAL_DATETIME datetime NULL,
	DOCUMENT_STATUS varchar(20) NULL,
	CONSTRAINT XPK_TCM_TESTCASE_DOC PRIMARY KEY(OBJECT_ID,OBJECT_TYPE_ID ,TESTCASE_ID ,TESTCASE_DOC_ID),
	CONSTRAINT FK_DOC_TESTCASE_ID FOREIGN KEY(TESTCASE_ID) REFERENCES TCM_TESTCASE(TESTCASE_ID))' )
  END
GO

IF (SELECT COUNT(*) FROM TCM_TESTCASE_PRIORITY) < 1
BEGIN
INSERT INTO TCM_TESTCASE_PRIORITY(PRIORITY_NAME)
        SELECT 'High'
        UNION ALL
        SELECT 'Medium'
        UNION ALL
        SELECT 'Low'
        UNION ALL
        SELECT 'Critical'
    END
GO

IF (SELECT COUNT(*) FROM TCM_TESTCASE_STATUS) < 1
BEGIN
INSERT INTO TCM_TESTCASE_STATUS(STATUS_NAME)
        SELECT 'Pass'
        UNION ALL
        SELECT 'Fail'
        UNION ALL
        SELECT 'UnSpecified'
        UNION ALL
        SELECT 'Need Analysis'
    END
GO

IF (SELECT COUNT(*) FROM TCM_TESTCASE_TYPE) < 1
BEGIN
INSERT INTO TCM_TESTCASE_TYPE(TESTCASE_TYPE_NAME)
        SELECT 'Production Validation Testing'
        UNION ALL
        SELECT 'Source to Target Testing'
        UNION ALL
        SELECT 'Application Upgrades'
        UNION ALL
        SELECT 'Metadata Testing'
        UNION ALL
        SELECT 'Data Transformation Testing'
        UNION ALL
        SELECT 'Data Completeness Testing'
        UNION ALL
        SELECT 'Incremental ETL Testing'
        UNION ALL
        SELECT 'GUI/Navigation Testing'
    END
GO

IF (SELECT COUNT(*) FROM TCM_VALIDATION_TYPE) < 1
BEGIN
INSERT INTO TCM_VALIDATION_TYPE(VALIDATION_TYPE_NAME)
        SELECT 'Structure Validation'
        UNION ALL
        SELECT 'Constraint Validation'
        UNION ALL
        SELECT 'Business Rule Validation'
        UNION ALL
        SELECT 'Null Validation'
        UNION ALL
        SELECT 'Duplicate Check'
        UNION ALL
        SELECT 'Data Check'
        UNION ALL
        SELECT 'Others'
    END
GO
IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'SYS_CON_ENVIRONMENTS' AND COLUMN_NAME = 'IP_ADDRESS' AND CHARACTER_MAXIMUM_LENGTH = '50')
    BEGIN
        ALTER TABLE SYS_CON_ENVIRONMENTS ALTER COLUMN IP_ADDRESS VARCHAR(250)
    END
GO
IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'SYS_CON_ENVIRONMENTS' AND COLUMN_NAME = 'SYSTEM_NUMBER' )
    BEGIN
      EXECUTE ('ALTER TABLE SYS_CON_ENVIRONMENTS ALTER COLUMN  SYSTEM_NUMBER varchar(50)')
    END;
GO
IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'SYS_CON_ENVIRONMENTS' AND COLUMN_NAME = 'SYSTEM_NUMBER' )
    BEGIN
      EXECUTE ('ALTER TABLE SYS_CON_ENVIRONMENTS ALTER COLUMN  CLIENT varchar(50)')
    END;
GO
IF NOT EXISTS(SELECT * FROM Cat_tabs WHERE CAT_TAB_NAME = 'com.ads.mm.stb.talend')
	INSERT INTO CAT_TABS ( CAT_TAB_NAME, CAT_TAB_DESCRIPTION ,  DISPLAY_ORDER , TAB_VISIBILITY) VALUES ( 'com.ads.mm.stb.talend', '' , '5' , '1');
GO

IF NOT EXISTS(SELECT * FROM CAT_TEMPLATES WHERE CAT_NAME = 'Talend Cat SSST SQL')
INSERT INTO CAT_TEMPLATES(CAT_NAME,CAT_DESC,CAT_IMAGE,CAT_STOCK_IMAGE,CAT_ENABLED,CAT_TAB_ID,CAT_SYSTEM_BASED,CAT_SCRIPT,CAT_ACTION,CREATED_BY,CREATED_DATE_TIME,LAST_MODIFIED_BY,LAST_MODIFIED_DATE_TIME,CAT_TEMPLATE_ORDER,CAT_SCRIPTING_LANGUAGE,CAT_OUTPUT_CONTENT_TYPE,CAT_OUTPUT_FILE_EXTENSION,CAT_ENABLE_MAPPING_DIALOG)
       SELECT 'Talend Cat SSST SQL', 'Talend Cat SSST SQL', NULL, 'defaultCatImage.png', '1', (select max(CAT_TAB_ID) from cat_tabs), '1', NULL, 'NULL', 'AnalytiX Data Services', CURRENT_TIMESTAMP, 'AnalytiX Data Services', CURRENT_TIMESTAMP, '1', 'Javascript', 'Plain Text', '.txt', 1
GO
IF EXISTS (SELECT * FROM ADS_MM_VERSION WHERE VALUE <= '5.3')
BEGIN
    IF (SELECT COUNT(*) FROM CAT_TABS WHERE CAT_TAB_NAME = 'com.ads.mm.stb.mappingmanager') = 1
    BEGIN
        update CAT_TABS SET  display_order=9 where display_order = 8;
        update CAT_TABS SET  display_order=9 where display_order = 7;
        update CAT_TABS SET  display_order=9 where display_order = 6;
        update CAT_TABS SET  display_order=9 where display_order = 5;
        update CAT_TABS SET  display_order=9 where display_order = 4;
        update CAT_TABS SET  display_order=9 where display_order = 3;
        update CAT_TABS SET  display_order=9 where display_order = 2;
        update CAT_TABS SET  display_order=9 where display_order = 1;
        update CAT_TABS set DISPLAY_ORDER = 1 where CAT_TAB_NAME ='com.ads.mm.stb.mappingmanager';
        update CAT_TABS set DISPLAY_ORDER = 2 where CAT_TAB_NAME ='com.ads.mm.stb.informatica';
        update CAT_TABS set DISPLAY_ORDER = 3 where CAT_TAB_NAME ='com.ads.mm.stb.datastage';
        update CAT_TABS set DISPLAY_ORDER = 4 where CAT_TAB_NAME ='com.ads.mm.stb.ssis';
        update CAT_TABS set DISPLAY_ORDER = 5 where CAT_TAB_NAME ='com.ads.mm.stb.talend';
        update CAT_TABS set DISPLAY_ORDER = 6 where CAT_TAB_NAME ='com.ads.mm.stb.odi';
        update CAT_TABS set DISPLAY_ORDER = 7 where CAT_TAB_NAME ='com.ads.mm.stb.rapidgends';
        update CAT_TABS set DISPLAY_ORDER = 8 where CAT_TAB_NAME ='com.ads.mm.stb.dataprofiling';
    EXECUTE('WITH CTE AS (SELECT CAT_TAB_ID, CAT_TAB_NAME, ROW_NUMBER()OVER ( ORDER BY CASE DISPLAY_ORDER WHEN NULL THEN 0 WHEN 0 THEN 999999999 ELSE DISPLAY_ORDER END) AS DISPLAY_ORDER FROM   CAT_TABS ) UPDATE MS SET    MS.DISPLAY_ORDER = CTE.DISPLAY_ORDER FROM   CAT_TABS MS JOIN CTE ON MS.CAT_TAB_ID = CTE.CAT_TAB_ID AND MS.CAT_TAB_NAME = CTE.CAT_TAB_NAME');
    END
END
GO
IF NOT EXISTS (SELECT * FROM   SYSOBJECTS WHERE  ID = OBJECT_ID(N'CAT_DIALOG') AND TYPE = 'U')
  BEGIN
      EXECUTE ('CREATE TABLE CAT_DIALOG (
        CAT_DIALOG_ID INTEGER  NOT NULL   IDENTITY(1,1) ,
        CAT_DIALOG_NAME VARCHAR(50),
        CAT_DIALOG_PROPERTIES VARCHAR(4000)    ,
        CAT_DIALOG_DEFAULT_PROFILE_ID VARCHAR(50),
        CAT_ID INT NOT NULL,
        CREATED_BY VARCHAR(50)  NOT NULL  ,
        CREATED_DATE_TIME DATETIME  NOT NULL  ,
        LAST_MODIFIED_BY VARCHAR(50)  NOT NULL  ,
        LAST_MODIFIED_DATE_TIME DATETIME  NOT NULL,
        PRIMARY KEY(CAT_DIALOG_ID),
        FOREIGN KEY(CAT_ID) REFERENCES CAT_TEMPLATES(CAT_ID) ON DELETE CASCADE ON UPDATE CASCADE)');
END
GO

IF NOT EXISTS (SELECT * FROM   SYSOBJECTS WHERE  ID = OBJECT_ID(N'CAT_DIALOG_PROFILE') AND TYPE = 'U')
  BEGIN
      EXECUTE ('CREATE TABLE CAT_DIALOG_PROFILE (
		CAT_DIALOG_PROFILE_ID INTEGER  NOT NULL   IDENTITY(1,1) ,
		CAT_DIALOG_ID INTEGER  NOT NULL  ,
		CAT_DIALOG_PROFILE_NAME VARCHAR(50)      ,
		CREATED_BY VARCHAR(50)  NOT NULL  ,
		CREATED_DATE_TIME DATETIME  NOT NULL  ,
		LAST_MODIFIED_BY VARCHAR(50)  NOT NULL  ,
		LAST_MODIFIED_DATE_TIME DATETIME  NOT NULL    ,
		PRIMARY KEY(CAT_DIALOG_PROFILE_ID),
		FOREIGN KEY(CAT_DIALOG_ID)
		REFERENCES CAT_DIALOG(CAT_DIALOG_ID)
		ON DELETE CASCADE
		ON UPDATE CASCADE)');
END
GO

IF NOT EXISTS (SELECT * FROM   SYSOBJECTS WHERE  ID = OBJECT_ID(N'CAT_DIALOG_TAB') AND TYPE = 'U')
  BEGIN
      EXECUTE ('CREATE TABLE CAT_DIALOG_TAB (
		CAT_DIALOG_TAB_ID INTEGER  NOT NULL IDENTITY(1,1)  ,
		CAT_DIALOG_PROFILE_ID INTEGER  NOT NULL  ,
		CAT_DIALOG_TAB_NAME VARCHAR(50)    ,
		CAT_DIALOG_TAB_PROPERTIES VARCHAR(4000)      ,
		CREATED_BY VARCHAR(50)  NOT NULL  ,
		CREATED_DATE_TIME DATETIME  NOT NULL  ,
		LAST_MODIFIED_BY VARCHAR(50)  NOT NULL  ,
		LAST_MODIFIED_DATE_TIME DATETIME  NOT NULL    ,
		PRIMARY KEY(CAT_DIALOG_TAB_ID),
		FOREIGN KEY(CAT_DIALOG_PROFILE_ID)
		REFERENCES CAT_DIALOG_PROFILE(CAT_DIALOG_PROFILE_ID)
		ON DELETE CASCADE
		ON UPDATE CASCADE)');
END
GO

IF NOT EXISTS (SELECT * FROM   SYSOBJECTS WHERE  ID = OBJECT_ID(N'CAT_DIALOG_OPTION') AND TYPE = 'U')
  BEGIN
      EXECUTE ('CREATE TABLE CAT_DIALOG_OPTION (
		CAT_DIALOG_OPTION_ID INTEGER  NOT NULL   IDENTITY(1,1) ,
		CAT_DIALOG_TAB_ID INTEGER  NOT NULL  ,
		CAT_DIALOG_OPTION_PROPERTIES VARCHAR(4000)    ,
		CAT_DIALOG_OPTION_NAME VARCHAR(400)      ,
		CREATED_BY VARCHAR(50)  NOT NULL  ,
		CREATED_DATE_TIME DATETIME  NOT NULL  ,
		LAST_MODIFIED_BY VARCHAR(50)  NOT NULL  ,
		LAST_MODIFIED_DATE_TIME DATETIME  NOT NULL    ,
		PRIMARY KEY(CAT_DIALOG_OPTION_ID),
		FOREIGN KEY(CAT_DIALOG_TAB_ID)
		REFERENCES CAT_DIALOG_TAB(CAT_DIALOG_TAB_ID)
		ON DELETE CASCADE
		ON UPDATE CASCADE)');
END
GO

IF NOT EXISTS(SELECT * FROM sys.indexes WHERE name = 'CAT_DIALOG_PROFILE_INDX' AND object_id = OBJECT_ID('CAT_DIALOG_PROFILE'))
BEGIN
EXECUTE('CREATE INDEX CAT_DIALOG_PROFILE_INDX ON CAT_DIALOG_PROFILE (CAT_DIALOG_ID)');
END
GO

IF NOT EXISTS(SELECT * FROM sys.indexes WHERE name = 'CAT_DIALOG_INDX' AND object_id = OBJECT_ID('CAT_DIALOG'))
BEGIN
EXECUTE('CREATE INDEX CAT_DIALOG_INDX ON CAT_DIALOG (CAT_DIALOG_ID)');
END
GO

IF NOT EXISTS(SELECT * FROM sys.indexes WHERE name = 'CAT_DIALOG_TAB_INDX' AND object_id = OBJECT_ID('CAT_DIALOG_TAB'))
BEGIN
EXECUTE('CREATE INDEX CAT_DIALOG_TAB_INDX ON CAT_DIALOG_TAB (CAT_DIALOG_PROFILE_ID)');
END
GO

IF NOT EXISTS(SELECT * FROM sys.indexes WHERE name = 'CAT_DIALOG_OPTION_INDX' AND object_id = OBJECT_ID('CAT_DIALOG_OPTION'))
BEGIN
EXECUTE('CREATE INDEX CAT_DIALOG_OPTION_INDX ON CAT_DIALOG_OPTION (CAT_DIALOG_TAB_ID)');
END
GO

IF (OBJECTPROPERTY(OBJECT_ID(N'[CAT_OPTION_DATA_MGRN_PROC]'),N'IsProcedure') = 1)
BEGIN
	DROP PROCEDURE CAT_OPTION_DATA_MGRN_PROC
END
GO

CREATE PROCEDURE CAT_OPTION_DATA_MGRN_PROC
AS
DECLARE  @CAT_ID BIGINT, @CAT_COUNT INT, @INITIAL_VALUE INT = 1;
DECLARE @CAT_DIALOG_ID BIGINT,@CAT_DIALOG_PROFILE_ID BIGINT,@CAT_DIALOG_TAB_ID BIGINT;
DECLARE @CAT_DIALOG_OPTION_LIST VARCHAR(MAX),@CAT_DIALOG_OPTION_NAME VARCHAR(MAX);
DECLARE @CAT_DIALOG_PROPERTIES VARCHAR(4000);
SET @CAT_DIALOG_PROPERTIES = '{"fheight":400,"fwidth":600,"flabelwidth":50,"fcontrolwidth":50}';
DECLARE @DEFAULT_DIALOG VARCHAR(100);
SET @DEFAULT_DIALOG = 'DefaultDialog';
DECLARE @DEFAULT_PROFILE VARCHAR(100);
SET @DEFAULT_PROFILE = 'Default';
DECLARE @DEFAULT_TAB VARCHAR(100);
SET @DEFAULT_TAB = 'DefaultTab';
DECLARE @ADMIN VARCHAR(100);
SET @ADMIN = 'Administrator';
DECLARE @CAT_TEMPLATE TABLE
(
ID INT IDENTITY(1,1),
CAT_ID VARCHAR(50)
);
	BEGIN
	INSERT @CAT_TEMPLATE(CAT_ID)
	SELECT CAT_ID FROM CAT_TEMPLATES;
	SELECT @CAT_COUNT = COUNT(CAT_ID) FROM CAT_TEMPLATES;
		WHILE (@INITIAL_VALUE <= @CAT_COUNT)
		BEGIN
			SELECT @CAT_ID = CAT_ID FROM @CAT_TEMPLATE WHERE ID = @INITIAL_VALUE;
			INSERT INTO CAT_DIALOG(CAT_DIALOG_NAME,CAT_DIALOG_PROPERTIES,CAT_ID,CREATED_BY,CREATED_DATE_TIME,LAST_MODIFIED_BY,LAST_MODIFIED_DATE_TIME) VALUES(@DEFAULT_DIALOG,@CAT_DIALOG_PROPERTIES,@CAT_ID,@ADMIN,GETDATE(),@ADMIN,GETDATE());
			SELECT @CAT_DIALOG_ID = CAT_DIALOG_ID FROM CAT_DIALOG WHERE CAT_DIALOG_NAME = @DEFAULT_DIALOG;
			--INSERT INTO CAT_TEMPLATE_DIALOG(CAT_DIALOG_ID,CAT_ID) VALUES(@CAT_DIALOG_ID,@CAT_ID);
			INSERT INTO CAT_DIALOG_PROFILE(CAT_DIALOG_ID,CAT_DIALOG_PROFILE_NAME,CREATED_BY,CREATED_DATE_TIME,LAST_MODIFIED_BY,LAST_MODIFIED_DATE_TIME) VALUES (@CAT_DIALOG_ID,@DEFAULT_PROFILE,@ADMIN,GETDATE(),@ADMIN,GETDATE());
			SELECT @CAT_DIALOG_PROFILE_ID = CAT_DIALOG_PROFILE_ID FROM CAT_DIALOG_PROFILE WHERE CAT_DIALOG_PROFILE_NAME = @DEFAULT_PROFILE;
			UPDATE CAT_DIALOG SET [CAT_DIALOG_DEFAULT_PROFILE_ID] = @CAT_DIALOG_PROFILE_ID WHERE CAT_DIALOG_ID = @CAT_DIALOG_ID
			INSERT INTO CAT_DIALOG_TAB(CAT_DIALOG_PROFILE_ID,CAT_DIALOG_TAB_NAME,CAT_DIALOG_TAB_PROPERTIES,CREATED_BY,CREATED_DATE_TIME,LAST_MODIFIED_BY,LAST_MODIFIED_DATE_TIME) VALUES(@CAT_DIALOG_PROFILE_ID,@DEFAULT_TAB,'',@ADMIN,GETDATE(),@ADMIN,GETDATE());
			SELECT @CAT_DIALOG_TAB_ID = CAT_DIALOG_TAB_ID FROM CAT_DIALOG_TAB WHERE CAT_DIALOG_TAB_NAME = @DEFAULT_TAB;
			  INSERT INTO CAT_DIALOG_OPTION(CAT_DIALOG_TAB_ID,CAT_DIALOG_OPTION_NAME,CAT_DIALOG_OPTION_PROPERTIES,CREATED_BY,CREATED_DATE_TIME,LAST_MODIFIED_BY,LAST_MODIFIED_DATE_TIME)
			  SELECT @CAT_DIALOG_TAB_ID, CAT_OPTION_NAME,
			replace('{"name":"'+ CAT_OPTION_NAME+'",
			"type":"'+catop.CAT_OPTION_TYPES+'",
			"title":"'+catop.CAT_OPTION_TITLE+'",
			"catOptionOrder":'+ COALESCE (LTRIM(Str(catop.CAT_OPTION_ORDER, 25, 5)),'0')+',
			"defaultValue":"' +(CASE WHEN (catop.CAT_OPTION_TYPES = 'Combo Box' OR catop.CAT_OPTION_TYPES = 'Radio') THEN '' ELSE COALESCE(catop.CAT_OPTION_DEFAULT_VALUE,'') END)
			+'","list":"'+(CASE WHEN (catop.CAT_OPTION_TYPES = 'Combo Box' OR catop.CAT_OPTION_TYPES = 'Radio') THEN COALESCE (catop.CAT_OPTION_DEFAULT_VALUE,'') ELSE '' END)+'"}','\','\\'),@ADMIN,GETDATE(),@ADMIN,GETDATE()
			  FROM [CAT_TEMPLATE_OPTIONS] catop INNER JOIN [CAT_TEMPLATES] ct on catop.cat_id = ct.CAT_ID AND CT.CAT_ID = @CAT_ID;
			  SET @INITIAL_VALUE = @INITIAL_VALUE + 1
		END;
	END;
GO

IF NOT EXISTS(SELECT * FROM CAT_DIALOG)
BEGIN
EXEC CAT_OPTION_DATA_MGRN_PROC;
END
GO

IF COL_LENGTH('SYSTEM_TABLE_METADATA', 'ROOT_TABLE') IS NULL
BEGIN
   EXECUTE('ALTER TABLE SYSTEM_TABLE_METADATA ADD ROOT_TABLE CHAR(1) NULL DEFAULT ''Y''');
   EXECUTE('UPDATE SYSTEM_TABLE_METADATA SET ROOT_TABLE = ''Y'' WHERE ROOT_TABLE IS NULL');
END
GO
IF EXISTS (SELECT * FROM  INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = 'CGT_TEMPLATES')
   BEGIN
    DROP TABLE CGT_TEMPLATES;
   END
GO
IF EXISTS (SELECT * FROM RM_RELEASE WHERE RELEASE_DATE IS NULL)
    BEGIN
        UPDATE RM_RELEASE SET RELEASE_DATE = '12/31/9999' WHERE RELEASE_DATE IS NULL
    END
GO

IF COL_LENGTH('SYS_CON_ENVIRONMENTS', 'MODEL_FILE') IS NULL
    BEGIN
        ALTER TABLE SYS_CON_ENVIRONMENTS ADD MODEL_FILE image NULL
    END
GO

IF COL_LENGTH('SYS_CON_ENVIRONMENTS', 'MODEL_FILE_NAME') IS NULL
    BEGIN
        ALTER TABLE SYS_CON_ENVIRONMENTS ADD MODEL_FILE_NAME varchar(255) NULL
    END
GO

-- IF EXISTS(SELECT * FROM SYS.VIEWS WHERE NAME = 'MAP_SPEC_SUMMARY_V')
-- BEGIN
-- EXEC ('DROP VIEW MAP_SPEC_SUMMARY_V')
-- END
-- GO

-- CREATE VIEW [MAP_SPEC_SUMMARY_V] AS
-- SELECT proj_id, map_id, map_seq_id, extended_bus_rule, src_system_id, src_system_name, src_system_environment_name,
-- src_table_name, src_column_name, src_col_datatype, src_col_length, src_col_precision, src_col_scale,
-- src_col_db_default_value, src_col_def, src_col_identity_flag, src_col_nullable_flag, src_percent_null_value,
-- src_natural_key_flag, src_min_value, src_max_value, tgt_system_id, tgt_system_name, tgt_system_environment_name,
-- tgt_table_name, tgt_column_name, tgt_col_datatype, tgt_col_length, tgt_col_precision, tgt_col_scale,
-- tgt_col_etl_default_value, tgt_col_def, tgt_natural_key_flag, tgt_primary_key_flag, lookup_column,trnsf_lookup_condition,lookup_on,
-- business_rule, col_map_complete_flag, ms.last_modified_by, ms.last_modified_date_time, ms.created_by, ms.created_datetime,
-- user_defination1, user_defination2, user_defination3, user_defination4, map_specrowcomments, tgt_col_nullable_flag,
-- src_sdi_flag, src_sdi_description, tgt_sdi_flag, tgt_sdi_description,
-- ISNULL(t.psuedo_code, ms.business_rule) psuedo_code
-- FROM MAPPING_SPECIFICATION ms
-- LEFT OUTER JOIN transformations t ON ms.business_rule = t.transf_name;
-- GO

IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'RM_PROJECT' AND COLUMN_NAME = 'CREATED_BY')
BEGIN
        EXECUTE('ALTER TABLE RM_PROJECT DROP COLUMN CREATED_BY,CREATED_DATE_TIME,LAST_MODIFIED_BY,LAST_MODIFIED_DATE_TIME');
        EXECUTE('ALTER TABLE RM_RELEASE DROP COLUMN CREATED_BY,CREATED_DATE_TIME,LAST_MODIFIED_BY,LAST_MODIFIED_DATE_TIME');
        EXECUTE('ALTER TABLE RM_MIGRATIONOBJECT DROP COLUMN CREATED_BY,CREATED_DATE_TIME,LAST_MODIFIED_BY,LAST_MODIFIED_DATE_TIME');
   END
GO
IF NOT EXISTS (SELECT *
	       FROM   SYSOBJECTS
	       WHERE  ID = OBJECT_ID(N'CAT_TEMPLATE_VERSION')
		      AND TYPE = 'U')
  BEGIN
      EXECUTE ('CREATE TABLE CAT_TEMPLATE_VERSION
        (
          CAT_ID                INT NOT NULL,
          VERSION_DESCRIPTION               VARCHAR(500) NULL,
          IS_VERSION CHAR DEFAULT 0 NOT NULL,
          VERSIONED_BY              VARCHAR(50) NOT NULL,
          VERSIONED_DATE_TIME       DATETIME NOT NULL
        )')
  END
GO

IF  NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'MAPPING_DETAILS' AND COLUMN_NAME='USER_DEFINED_FIELD1')
    BEGIN
        ALTER TABLE MAPPING_DETAILS ADD
        [USER_DEFINED_FIELD1]  [varchar](max) NULL,
        [USER_DEFINED_FIELD2]  [varchar](max) NULL,
	[USER_DEFINED_FIELD3]  [varchar](max) NULL,
	[USER_DEFINED_FIELD4]  [varchar](max) NULL,
	[USER_DEFINED_FIELD5]  [varchar](max) NULL,
	[USER_DEFINED_FIELD6]  [varchar](max) NULL,
	[USER_DEFINED_FIELD7]  [varchar](max) NULL,
	[USER_DEFINED_FIELD8]  [varchar](max) NULL,
	[USER_DEFINED_FIELD9]  [varchar](max) NULL,
	[USER_DEFINED_FIELD10] [varchar](max) NULL,
	[USER_DEFINED_FIELD11] [varchar](max) NULL,
	[USER_DEFINED_FIELD12] [varchar](max) NULL,
	[USER_DEFINED_FIELD13] [varchar](max) NULL,
	[USER_DEFINED_FIELD14] [varchar](max) NULL,
	[USER_DEFINED_FIELD15] [varchar](max) NULL,
	[USER_DEFINED_FIELD16] [varchar](max) NULL,
	[USER_DEFINED_FIELD17] [varchar](max) NULL,
	[USER_DEFINED_FIELD18] [varchar](max) NULL,
	[USER_DEFINED_FIELD19] [varchar](max) NULL,
	[USER_DEFINED_FIELD20] [varchar](max) NULL,
	[USER_DEFINED_FIELD21] [varchar](max) NULL,
	[USER_DEFINED_FIELD22] [varchar](max) NULL,
	[USER_DEFINED_FIELD23] [varchar](max) NULL,
	[USER_DEFINED_FIELD24] [varchar](max) NULL,
	[USER_DEFINED_FIELD25] [varchar](max) NULL,
	[USER_DEFINED_FIELD26] [varchar](max) NULL,
	[USER_DEFINED_FIELD27] [varchar](max) NULL,
	[USER_DEFINED_FIELD28] [varchar](max) NULL,
	[USER_DEFINED_FIELD29] [varchar](max) NULL,
	[USER_DEFINED_FIELD30] [varchar](max) NULL,
	[USER_DEFINED_FIELD31] [varchar](max) NULL,
	[USER_DEFINED_FIELD32] [varchar](max) NULL,
	[USER_DEFINED_FIELD33] [varchar](max) NULL,
	[USER_DEFINED_FIELD34] [varchar](max) NULL,
	[USER_DEFINED_FIELD35] [varchar](max) NULL,
	[USER_DEFINED_FIELD36] [varchar](max) NULL,
	[USER_DEFINED_FIELD37] [varchar](max) NULL,
	[USER_DEFINED_FIELD38] [varchar](max) NULL,
	[USER_DEFINED_FIELD39] [varchar](max) NULL,
	[USER_DEFINED_FIELD40] [varchar](max) NULL
    END
GO
IF  EXISTS (SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'MAPPING_DETAILS' AND COLUMN_NAME='USER_DEFINED_FIELD1')
IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = 'MAPPING_USER_DEFINED_FIELDS')
    BEGIN
        UPDATE MAPPING_DETAILS  SET
        USER_DEFINED_FIELD1  = MUDF.USER_DEFINED_FIELD1,
        USER_DEFINED_FIELD2  = MUDF.USER_DEFINED_FIELD2,
        USER_DEFINED_FIELD3  = MUDF.USER_DEFINED_FIELD3,
        USER_DEFINED_FIELD4  = MUDF.USER_DEFINED_FIELD4,
        USER_DEFINED_FIELD5  = MUDF.USER_DEFINED_FIELD5,
        USER_DEFINED_FIELD6  = MUDF.USER_DEFINED_FIELD6,
        USER_DEFINED_FIELD7  = MUDF.USER_DEFINED_FIELD7,
        USER_DEFINED_FIELD8  = MUDF.USER_DEFINED_FIELD8,
        USER_DEFINED_FIELD9  = MUDF.USER_DEFINED_FIELD9,
        USER_DEFINED_FIELD10 = MUDF.USER_DEFINED_FIELD10,
        USER_DEFINED_FIELD11 = MUDF.USER_DEFINED_FIELD11,
        USER_DEFINED_FIELD12 = MUDF.USER_DEFINED_FIELD12,
        USER_DEFINED_FIELD13 = MUDF.USER_DEFINED_FIELD13,
        USER_DEFINED_FIELD14 = MUDF.USER_DEFINED_FIELD14,
        USER_DEFINED_FIELD15 = MUDF.USER_DEFINED_FIELD15,
        USER_DEFINED_FIELD16 = MUDF.USER_DEFINED_FIELD16,
        USER_DEFINED_FIELD17 = MUDF.USER_DEFINED_FIELD17,
        USER_DEFINED_FIELD18 = MUDF.USER_DEFINED_FIELD18,
        USER_DEFINED_FIELD19 = MUDF.USER_DEFINED_FIELD19,
        USER_DEFINED_FIELD20 = MUDF.USER_DEFINED_FIELD20,
        USER_DEFINED_FIELD21 = MUDF.USER_DEFINED_FIELD21,
        USER_DEFINED_FIELD22 = MUDF.USER_DEFINED_FIELD22,
        USER_DEFINED_FIELD23 = MUDF.USER_DEFINED_FIELD23,
        USER_DEFINED_FIELD24 = MUDF.USER_DEFINED_FIELD24,
        USER_DEFINED_FIELD25 = MUDF.USER_DEFINED_FIELD25,
        USER_DEFINED_FIELD26 = MUDF.USER_DEFINED_FIELD26,
        USER_DEFINED_FIELD27 = MUDF.USER_DEFINED_FIELD27,
        USER_DEFINED_FIELD28 = MUDF.USER_DEFINED_FIELD28,
        USER_DEFINED_FIELD29 = MUDF.USER_DEFINED_FIELD29,
        USER_DEFINED_FIELD30 = MUDF.USER_DEFINED_FIELD30,
        USER_DEFINED_FIELD31 = MUDF.USER_DEFINED_FIELD31,
        USER_DEFINED_FIELD32 = MUDF.USER_DEFINED_FIELD32,
        USER_DEFINED_FIELD33 = MUDF.USER_DEFINED_FIELD33,
        USER_DEFINED_FIELD34 = MUDF.USER_DEFINED_FIELD34,
        USER_DEFINED_FIELD35 = MUDF.USER_DEFINED_FIELD35,
        USER_DEFINED_FIELD36 = MUDF.USER_DEFINED_FIELD36,
        USER_DEFINED_FIELD37 = MUDF.USER_DEFINED_FIELD37,
        USER_DEFINED_FIELD38 = MUDF.USER_DEFINED_FIELD38,
        USER_DEFINED_FIELD39 = MUDF.USER_DEFINED_FIELD39,
        USER_DEFINED_FIELD40 = MUDF.USER_DEFINED_FIELD40
        FROM MAPPING_USER_DEFINED_FIELDS MUDF WHERE MAPPING_DETAILS.MAP_ID = MUDF.MAP_ID;
   END
 GO
IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'MAPPING_USER_DEFINED_FIELDS')
    BEGIN
          DROP TABLE MAPPING_USER_DEFINED_FIELDS;
   END
 GO
IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'SUBJECT_DETAILS' AND COLUMN_NAME='USER_FIELD1')
    BEGIN
        ALTER TABLE SUBJECT_DETAILS ADD
        [USER_FIELD1]  [varchar](max) NULL,
	[USER_FIELD2]  [varchar](max) NULL,
	[USER_FIELD3]  [varchar](max) NULL,
	[USER_FIELD4]  [varchar](max) NULL,
	[USER_FIELD5]  [varchar](max) NULL,
	[USER_FIELD6]  [varchar](max) NULL,
	[USER_FIELD7]  [varchar](max) NULL,
	[USER_FIELD8]  [varchar](max) NULL,
	[USER_FIELD9]  [varchar](max) NULL,
	[USER_FIELD10] [varchar](max) NULL,
	[USER_FIELD11] [varchar](max) NULL,
	[USER_FIELD12] [varchar](max) NULL,
	[USER_FIELD13] [varchar](max) NULL,
	[USER_FIELD14] [varchar](max) NULL,
	[USER_FIELD15] [varchar](max) NULL
    END
GO
IF  EXISTS (SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'SUBJECT_DETAILS' AND COLUMN_NAME='USER_FIELD1')
BEGIN
IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'SUBJECT_USER_FIELDS')
    BEGIN
	BEGIN TRY
            BEGIN TRANSACTION SUBUDF_TO_SUBDTLS_MOVE;
                EXECUTE('UPDATE SUBJECT_DETAILS  SET
                USER_FIELD1  = SUDF.USER_FIELD1,
                USER_FIELD2  = SUDF.USER_FIELD2,
                USER_FIELD3  = SUDF.USER_FIELD3,
                USER_FIELD4  = SUDF.USER_FIELD4,
                USER_FIELD5  = SUDF.USER_FIELD5,
                USER_FIELD6  = SUDF.USER_FIELD6,
                USER_FIELD7  = SUDF.USER_FIELD7,
                USER_FIELD8  = SUDF.USER_FIELD8,
                USER_FIELD9  = SUDF.USER_FIELD9,
                USER_FIELD10 = SUDF.USER_FIELD10,
                USER_FIELD11 = SUDF.USER_FIELD11,
                USER_FIELD12 = SUDF.USER_FIELD12,
                USER_FIELD13 = SUDF.USER_FIELD13,
                USER_FIELD14 = SUDF.USER_FIELD14,
                USER_FIELD15 = SUDF.USER_FIELD15
                FROM SUBJECT_USER_FIELDS SUDF WHERE SUBJECT_DETAILS.SUBJECT_ID = SUDF.SUBJECT_ID');
            COMMIT TRANSACTION SUBUDF_TO_SUBDTLS_MOVE;
            EXECUTE('DROP TABLE SUBJECT_USER_FIELDS');
	END TRY
        BEGIN CATCH
        ROLLBACK TRANSACTION SUBUDF_TO_SUBDTLS_MOVE;
	PRINT 'Error while migrating the SUBJECT_USER_FIELDS TO SUBJECT_DETAILS  block';
        PRINT ERROR_LINE();
        PRINT ERROR_MESSAGE ();
        END CATCH
   END
END
GO
IF NOT EXISTS(SELECT * FROM STATE_DETAILS WHERE STATENAME = 'In Progress')
    BEGIN
        INSERT INTO STATE_DETAILS (STATENAME,CREATED_BY,CREATED_DATE_TIME,LAST_MODIFIED_BY,LAST_MODIFIED_DATE_TIME) VALUES ('In Progress','SYSTEM',GETDATE(),'SYSTEM',GETDATE());
    END
GO
IF NOT EXISTS(SELECT * FROM STATE_DETAILS WHERE STATENAME = 'Approved')
    BEGIN
        INSERT INTO STATE_DETAILS (STATENAME,CREATED_BY,CREATED_DATE_TIME,LAST_MODIFIED_BY,LAST_MODIFIED_DATE_TIME) VALUES ('Approved','SYSTEM',GETDATE(),'SYSTEM',GETDATE());
    END
GO
IF EXISTS (SELECT * FROM ADS_MM_VERSION WHERE VALUE <= '6.0')
    BEGIN
        DECLARE
            @STATEID INT
                SET	@STATEID = (SELECT STATE_ID FROM STATE_DETAILS WHERE STATENAME='In Progress')
                UPDATE MAPPING_DETAILS SET STATE_ID = @STATEID WHERE STATE_ID IS NULL
    END
GO
IF EXISTS (SELECT * FROM ADS_MM_VERSION WHERE VALUE <= '6.0')
    BEGIN
        IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS WHERE CONSTRAINT_NAME='R_14' AND TABLE_NAME='SYSTEM_TABLE_COLUMNS_METADATA')
        EXECUTE('ALTER TABLE SYSTEM_TABLE_COLUMNS_METADATA DROP CONSTRAINT R_14')
    END
GO
IF EXISTS (SELECT * FROM ADS_MM_VERSION WHERE VALUE <= '6.0')
    BEGIN
        IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS WHERE CONSTRAINT_NAME='FK_SYS_CON_ENV' AND TABLE_NAME='SYSTEM_TABLE_METADATA')
        EXECUTE('ALTER TABLE SYSTEM_TABLE_METADATA DROP CONSTRAINT FK_SYS_CON_ENV')
    END
GO
IF EXISTS (SELECT * FROM ADS_MM_VERSION WHERE VALUE <= '6.0')
    BEGIN
        IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS WHERE CONSTRAINT_NAME='FK_SYS_TAB_METADATA' AND TABLE_NAME='SYSTEM_TABLE_COLUMNS_METADATA')
        EXECUTE('ALTER TABLE SYSTEM_TABLE_COLUMNS_METADATA DROP CONSTRAINT FK_SYS_TAB_METADATA')
    END
GO
IF EXISTS (SELECT * FROM ADS_MM_VERSION WHERE VALUE <= '6.0')
    BEGIN
        EXECUTE('ALTER TABLE SYSTEM_TABLE_METADATA DROP CONSTRAINT UK_SYSID_ENV_TAB_NAME')
    END
GO
IF EXISTS (SELECT * FROM ADS_MM_VERSION WHERE VALUE <= '6.0')
    BEGIN
        EXECUTE('ALTER TABLE SYSTEM_TABLE_COLUMNS_METADATA DROP CONSTRAINT UK_SYS_ID_ENV_TAB_COL')
    END
GO
IF EXISTS (SELECT * FROM ADS_MM_VERSION WHERE VALUE <= '6.0')
    BEGIN
        EXECUTE('ALTER TABLE SYSTEM_TABLE_METADATA ADD SCE_ID BIGINT')
    END
GO
IF EXISTS (SELECT * FROM ADS_MM_VERSION WHERE VALUE <= '6.0')
    BEGIN
        EXECUTE('ALTER TABLE SYSTEM_TABLE_COLUMNS_METADATA ADD STM_ID BIGINT')
    END
GO
IF EXISTS (SELECT * FROM ADS_MM_VERSION WHERE VALUE <= '6.0')
    BEGIN
        EXECUTE('UPDATE SYSTEM_TABLE_METADATA SET SYSTEM_TABLE_METADATA.SCE_ID = SCE.SCE_ID FROM SYS_CON_ENVIRONMENTS SCE WHERE (SCE.SYSTEM_ID = SYSTEM_TABLE_METADATA.SYSTEM_ID AND SCE.SYSTEM_ENVIRONMENT_NAME = SYSTEM_TABLE_METADATA.SYSTEM_ENV_NAME)')
    END
GO
IF EXISTS (SELECT * FROM ADS_MM_VERSION WHERE VALUE <= '6.0')
    BEGIN
        EXECUTE('UPDATE SYSTEM_TABLE_COLUMNS_METADATA SET SYSTEM_TABLE_COLUMNS_METADATA.STM_ID = STM.STM_ID FROM SYSTEM_TABLE_METADATA STM WHERE (STM.SYSTEM_ID = SYSTEM_TABLE_COLUMNS_METADATA.SYSTEM_ID AND STM.SYSTEM_ENV_NAME = SYSTEM_TABLE_COLUMNS_METADATA.SYSTEM_ENV_NAME AND STM.TABLE_NAME = SYSTEM_TABLE_COLUMNS_METADATA.TABLE_NAME)')
    END
GO
IF EXISTS (SELECT * FROM ADS_MM_VERSION WHERE VALUE <= '6.0')
    BEGIN
        EXECUTE('ALTER TABLE SYSTEM_TABLE_METADATA ADD CONSTRAINT FK_SYS_CON_ENV FOREIGN KEY(SCE_ID) REFERENCES SYS_CON_ENVIRONMENTS(SCE_ID)')
    END
GO
IF EXISTS (SELECT * FROM ADS_MM_VERSION WHERE VALUE <= '6.0')
    BEGIN
        EXECUTE('ALTER TABLE SYSTEM_TABLE_COLUMNS_METADATA ADD CONSTRAINT FK_SYS_TAB_METADATA FOREIGN KEY(STM_ID) REFERENCES SYSTEM_TABLE_METADATA(STM_ID)')
    END
GO
IF EXISTS (SELECT * FROM ADS_MM_VERSION WHERE VALUE <= '6.0')
    BEGIN
        EXECUTE('ALTER TABLE SYSTEM_TABLE_METADATA ADD CONSTRAINT UK_SYSID_ENV_TAB_NAME UNIQUE(SCE_ID,TABLE_NAME)')
    END
GO
IF EXISTS (SELECT * FROM ADS_MM_VERSION WHERE VALUE <= '6.0')
    BEGIN
        EXECUTE('ALTER TABLE SYSTEM_TABLE_COLUMNS_METADATA ADD CONSTRAINT UK_SYS_ID_ENV_TAB_COL UNIQUE(STM_ID, COLUMN_NAME)')
    END
GO
IF EXISTS (SELECT * FROM ADS_MM_VERSION WHERE VALUE <= '6.0')
    BEGIN
        EXECUTE('ALTER TABLE RM_PROMOTE_SYS_CON_ENVS DROP CONSTRAINT RM_SYSCON_FK1')
    END
GO
IF EXISTS (SELECT * FROM ADS_MM_VERSION WHERE VALUE <= '6.0')
    BEGIN
        EXECUTE('ALTER TABLE RM_PROMOTE_SYS_CON_ENVS ADD SCE_ID BIGINT')
    END
GO
IF EXISTS (SELECT * FROM ADS_MM_VERSION WHERE VALUE <= '6.0')
    BEGIN
        EXECUTE('UPDATE RM_PROMOTE_SYS_CON_ENVS SET SCE_ID = SCE.SCE_ID FROM  SYS_CON_ENVIRONMENTS SCE WHERE (SCE.SYSTEM_ID = RM_PROMOTE_SYS_CON_ENVS.SYSTEM_ID AND SCE.SYSTEM_ENVIRONMENT_NAME = RM_PROMOTE_SYS_CON_ENVS.SYSTEM_ENVIRONMENT_NAME)')
    END
GO
IF EXISTS (SELECT * FROM ADS_MM_VERSION WHERE VALUE <= '6.0')
    BEGIN
        EXECUTE('ALTER TABLE RM_PROMOTE_SYS_CON_ENVS ADD CONSTRAINT RM_SYSCON_FK1 FOREIGN KEY(SCE_ID) REFERENCES SYS_CON_ENVIRONMENTS(SCE_ID)')
    END
GO
IF COL_LENGTH('SUBJECT_DETAILS', 'SUBJECT_CUSTOM_ORDER') IS NULL
BEGIN
   ALTER TABLE SUBJECT_DETAILS ADD SUBJECT_CUSTOM_ORDER float NULL DEFAULT 0;
   ALTER TABLE SUBJECT_DETAILS ADD SUBJECT_ORDER_BY varchar(100) NULL;
   ALTER TABLE PROJECT  ADD SUBJECT_ORDER_BY varchar(100) NULL;
   EXECUTE('UPDATE PROJECT SET SUBJECT_ORDER_BY = ''SUBJECT_NAME ASC''');
   EXECUTE('UPDATE SUBJECT_DETAILS SET SUBJECT_ORDER_BY = ''SUBJECT_NAME ASC''');
   EXECUTE(';WITH CTE AS (SELECT PROJECT_ID, SUBJECT_ID,PARENT_SUBJECT_ID, ROW_NUMBER() OVER (PARTITION BY PROJECT_ID, PARENT_SUBJECT_ID ORDER BY SUBJECT_NAME) AS SUBJECT_CUSTOM_ORDER FROM SUBJECT_DETAILS)
             UPDATE SD
            	SET SD.SUBJECT_CUSTOM_ORDER = CTE.SUBJECT_CUSTOM_ORDER
            	FROM SUBJECT_DETAILS SD
            	JOIN CTE
            	ON SD.PROJECT_ID = CTE.PROJECT_ID
            	AND SD.PARENT_SUBJECT_ID = CTE.PARENT_SUBJECT_ID
            	AND SD.SUBJECT_ID = CTE.SUBJECT_ID')
END
GO
IF EXISTS (SELECT * FROM ADS_MM_VERSION WHERE VALUE <= '7.1')
    BEGIN
        UPDATE USERS SET USER_THEME = 'DHTMLX_SKIN_ANALYTIX';
    END
GO

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'MAPPING_DETAILS' AND COLUMN_NAME = 'MAP_NAME' AND CHARACTER_MAXIMUM_LENGTH = '300')
    BEGIN
        ALTER TABLE MAPPING_DETAILS DROP CONSTRAINT UK_MAP_DET_NAME_PSID
        ALTER TABLE MAPPING_DETAILS ALTER COLUMN MAP_NAME VARCHAR(300)
        ALTER TABLE MAPPING_DETAILS  ADD CONSTRAINT UK_MAP_DET_NAME_PSID UNIQUE NONCLUSTERED( [PROJECT_ID] ASC,[SUBJECT_ID] ASC,[MAP_NAME] ASC,[MAP_SPEC_VERSION] ASC)
    END
GO

IF NOT EXISTS (SELECT * FROM SYSOBJECTS WHERE ID = OBJECT_ID(N'SM_CLASSIFICATION_SDI') AND TYPE = 'U')
  BEGIN
      EXECUTE ('CREATE TABLE SM_CLASSIFICATION_SDI( SDI_CLASS_ID  BIGINT IDENTITY(1,1) NOT NULL,
	  SDI_CLASS_NAME VARCHAR(255) NULL,
	  SDI_CLASS_DESCRIPTION VARCHAR(4000) NULL,
	  CREATED_BY  VARCHAR(100)  NULL,
	  CREATED_DATE DATETIME  NULL,
	  LAST_MODIFIED_BY VARCHAR(100)  NULL,
	  LAST_MODIFIED_DATE DATETIME  NULL,
	  CONSTRAINT PK_SM_CLASSIFICATION_SDI PRIMARY KEY (SDI_CLASS_ID))')
  END
GO

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'SYSTEM_TABLE_COLUMNS_METADATA' AND COLUMN_NAME = 'SDI_CLASS_ID')
BEGIN
   ALTER TABLE SYSTEM_TABLE_COLUMNS_METADATA ADD SDI_CLASS_ID BIGINT NULL;
END
GO

IF  EXISTS (SELECT * FROM SYS.FOREIGN_KEYS WHERE name = 'FK_CODE_VALUE_CDSTID')
    ALTER TABLE CSM_CODE_VALUE DROP CONSTRAINT [FK_CODE_VALUE_CDSTID]
GO
IF EXISTS (SELECT * FROM SYS.FOREIGN_KEYS WHERE NAME = 'FK_CODESET_CODESET_ID' AND DELETE_REFERENTIAL_ACTION_DESC = 'NO_ACTION' AND DELETE_REFERENTIAL_ACTION = 0)
    BEGIN
        EXECUTE('ALTER TABLE CSM_CODE_VALUE DROP CONSTRAINT FK_CODESET_CODESET_ID');
        EXECUTE('ALTER TABLE CSM_CODE_VALUE WITH CHECK ADD  CONSTRAINT FK_CODESET_CODESET_ID FOREIGN KEY(CODESET_ID) REFERENCES CSM_CODESET (CODESET_ID) ON DELETE CASCADE');
    END
GO

IF NOT EXISTS(SELECT * FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS WHERE CONSTRAINT_NAME ='FK_CODESET_CODESET_ID' AND TABLE_NAME = 'CSM_CODE_VALUE')
    BEGIN
	EXECUTE('ALTER TABLE CSM_CODE_VALUE WITH CHECK ADD  CONSTRAINT FK_CODESET_CODESET_ID FOREIGN KEY(CODESET_ID) REFERENCES CSM_CODESET (CODESET_ID) ON DELETE CASCADE');
    END
GO

IF COL_LENGTH('SYS_CON_ENVIRONMENTS', 'SAP_DELIMITER') IS NOT NULL
    BEGIN
        EXECUTE ('ALTER TABLE SYS_CON_ENVIRONMENTS ADD FIELD_DELIMITER VARCHAR(10) NULL');
        EXECUTE ('ALTER TABLE SYS_CON_ENVIRONMENTS ADD ROW_DELIMITER VARCHAR(10) NULL');
        EXECUTE ('UPDATE SYS_CON_ENVIRONMENTS SET FIELD_DELIMITER = SAP_DELIMITER');
        EXECUTE ('ALTER TABLE SYS_CON_ENVIRONMENTS DROP COLUMN SAP_DELIMITER');
   END
GO
IF EXISTS (SELECT * FROM CAT_TEMPLATES WHERE CAT_NAME = 'Datastage 7.5 Parallel Job')
	BEGIN
            UPDATE CAT_TEMPLATES SET CAT_NAME = 'Parallel Job (v8.0 & above)', CAT_TEMPLATE_ORDER = 1  WHERE CAT_NAME = 'Datastage 8.0 Parallel Job';
            UPDATE CAT_TEMPLATES SET CAT_NAME = 'Server Job (v8.0 & above)', CAT_TEMPLATE_ORDER = 2  WHERE CAT_NAME = 'Datastage 8.0 Server Job';
            UPDATE CAT_TEMPLATES SET CAT_NAME = 'Parallel Job Include Sql Expression (v8.0 & above)', CAT_TEMPLATE_ORDER = 3  WHERE CAT_NAME = 'Datastage 8.0 Parallel Job Include Sql Expression Datastage 8.0';
            UPDATE CAT_TEMPLATES SET CAT_NAME = 'Server Job Include Sql Expression (v8.0 & above)', CAT_TEMPLATE_ORDER = 4  WHERE CAT_NAME = 'Datastage 8.0 Server Job Include Sql Expression	Datastage 8.0';
            UPDATE CAT_TEMPLATES SET CAT_NAME = 'Parallel Job (v7.5)', CAT_TEMPLATE_ORDER = 5  WHERE CAT_NAME = 'Datastage 7.5 Parallel Job';
            UPDATE CAT_TEMPLATES SET CAT_NAME = 'Server Job (v7.5)', CAT_TEMPLATE_ORDER = 6  WHERE CAT_NAME = 'Datastage 7.5 Server Job';
	END
GO
IF NOT EXISTS(SELECT * FROM CAT_TEMPLATES WHERE CAT_NAME = 'Generate JSON Schema')
BEGIN
    DECLARE  @CAT_ID BIGINT, @CAT_DIALOG_ID BIGINT, @CAT_DIALOG_PROFILE_ID BIGINT, @CAT_DIALOG_TAB_ID BIGINT, @CAT_TAB_ID BIGINT, @CAT_TEMPLATE_ORDER BIGINT;
    BEGIN
        SELECT @CAT_TAB_ID = CAT_TAB_ID FROM CAT_TABS WHERE CAT_TAB_NAME = 'com.ads.mm.stb.mappingmanager';
        SELECT @CAT_TEMPLATE_ORDER = ISNULL(MAX(CAT_TEMPLATE_ORDER)+1,1) FROM CAT_TEMPLATES WHERE CAT_TAB_ID = @CAT_TAB_ID;
        INSERT INTO CAT_TEMPLATES(CAT_NAME,CAT_DESC,CAT_IMAGE,CAT_STOCK_IMAGE,CAT_ENABLED,CAT_TAB_ID,CAT_SYSTEM_BASED,CAT_SCRIPT,CAT_ACTION,CREATED_BY,CREATED_DATE_TIME,LAST_MODIFIED_BY,LAST_MODIFIED_DATE_TIME,CAT_TEMPLATE_ORDER,CAT_SCRIPTING_LANGUAGE,CAT_OUTPUT_CONTENT_TYPE,CAT_OUTPUT_FILE_EXTENSION,CAT_ENABLE_MAPPING_DIALOG)
        VALUES('Generate JSON Schema', 'Generate JSON Schema', NULL, 'defaultCatImage.png', '1', @CAT_TAB_ID, '1', NULL, 'NULL', 'AnalytiX Data Services', CURRENT_TIMESTAMP, 'AnalytiX Data Services', CURRENT_TIMESTAMP, @CAT_TEMPLATE_ORDER, 'Javascript', 'Plain Text', '.json', 0);
        SELECT @CAT_ID = CAT_ID FROM CAT_TEMPLATES WHERE CAT_NAME = 'Generate JSON Schema' AND CAT_TAB_ID = @CAT_TAB_ID;
        INSERT INTO CAT_DIALOG(CAT_DIALOG_NAME,CAT_DIALOG_PROPERTIES,CAT_ID,CREATED_BY,CREATED_DATE_TIME,LAST_MODIFIED_BY,LAST_MODIFIED_DATE_TIME) VALUES('Generate JSON Schema','{"fheight":400,"fwidth":600,"flabelwidth":50,"fcontrolwidth":50}',@CAT_ID,'Administrator',GETDATE(),'Administrator',GETDATE());
        SELECT @CAT_DIALOG_ID = CAT_DIALOG_ID FROM CAT_DIALOG WHERE CAT_DIALOG_NAME = 'Generate JSON Schema' AND CAT_ID = @CAT_ID;
        INSERT INTO CAT_DIALOG_PROFILE(CAT_DIALOG_ID,CAT_DIALOG_PROFILE_NAME,CREATED_BY,CREATED_DATE_TIME,LAST_MODIFIED_BY,LAST_MODIFIED_DATE_TIME) VALUES (@CAT_DIALOG_ID,'Default','Administrator',GETDATE(),'Administrator',GETDATE());
        SELECT @CAT_DIALOG_PROFILE_ID = CAT_DIALOG_PROFILE_ID FROM CAT_DIALOG_PROFILE WHERE CAT_DIALOG_PROFILE_NAME = 'Default' AND CAT_DIALOG_ID = @CAT_DIALOG_ID;
        UPDATE CAT_DIALOG SET [CAT_DIALOG_DEFAULT_PROFILE_ID] = @CAT_DIALOG_PROFILE_ID WHERE CAT_DIALOG_ID = @CAT_DIALOG_ID;
        INSERT INTO CAT_DIALOG_TAB(CAT_DIALOG_PROFILE_ID,CAT_DIALOG_TAB_NAME,CAT_DIALOG_TAB_PROPERTIES,CREATED_BY,CREATED_DATE_TIME,LAST_MODIFIED_BY,LAST_MODIFIED_DATE_TIME) VALUES(@CAT_DIALOG_PROFILE_ID,'DefaultTab','','Administrator',GETDATE(),'Administrator',GETDATE());
        SELECT @CAT_DIALOG_TAB_ID = CAT_DIALOG_TAB_ID FROM CAT_DIALOG_TAB WHERE CAT_DIALOG_TAB_NAME = 'DefaultTab' AND CAT_DIALOG_PROFILE_ID = @CAT_DIALOG_PROFILE_ID;
        INSERT INTO CAT_DIALOG_OPTION(CAT_DIALOG_TAB_ID,CAT_DIALOG_OPTION_NAME,CAT_DIALOG_OPTION_PROPERTIES,CREATED_BY,CREATED_DATE_TIME,LAST_MODIFIED_BY,LAST_MODIFIED_DATE_TIME) VALUES(@CAT_DIALOG_TAB_ID,'checkbox1','{"controlStyle":"font-family:Century Gothic; font-size: 12px;font-weight:regular;text-decoration:none;padding-top:0px;padding-left:0px;padding-right:0px;padding-bottom:0px;text-align: left;vertical-align:center;color:#000000;background-color: #ffffff","showTimer":true,"visible":true,"labelStyleJSON":"{\"font-family\": \"Comic Sans MS\", \"font-size\": \"12px\",\"font-weight\":\"regular\",\"text-decoration\":\"none\",\"padding-top\":\"0\",\"padding-left\":\"0\",\"padding-right\":\"3\",\"padding-bottom\":\"0\",\"text-align\":\" right\",\"vertical-align\":\"center\",\"color\":\"#000000\",\"background-color\": \"#ffffff\"}","labelStyle":"font-family:Comic Sans MS; font-size: 12px;font-weight:regular;text-decoration:none;padding-top:0px;padding-left:0px;padding-right:3px;padding-bottom:0px;text-align: right;vertical-align:center;color:#000000;background-color: #ffffff","catOptionId":2158,"type":"Check Box","buttonClear":true,"title":"Generate Strict JSON Schema","controlStyleJSON":"{\"font-family\": \"Century Gothic\", \"font-size\": \"12px\",\"font-weight\":\"regular\",\"text-decoration\":\"none\",\"padding-top\":\"0\",\"padding-left\":\"0\",\"padding-right\":\"0\",\"padding-bottom\":\"0\",\"text-align\":\" left\",\"vertical-align\":\"center\",\"color\":\"#000000\",\"background-color\": \"#ffffff\"}","filesCount":5,"name":"checkbox1","defaultValue":false,"enabled":true,"controlwidth":"15px","multiValued":false,"tabId":0,"componentObject":"","image":"images/checkbox.jpg","allowDisabling":false,"list":"","maskField":false,"buttonUpload":true,"container":false,"html":"","controlHeight":150,"catOptionOrder":0}','Administrator',GETDATE(),'Administrator',GETDATE());
    END
END
GO

IF NOT EXISTS(SELECT * FROM Cat_tabs WHERE CAT_TAB_NAME = 'com.ads.mm.stb.bigdata')
	INSERT INTO CAT_TABS ( CAT_TAB_NAME, CAT_TAB_DESCRIPTION ,  DISPLAY_ORDER , TAB_VISIBILITY) VALUES ( 'com.ads.mm.stb.bigdata', '' , '9' , '1')
GO


IF NOT EXISTS(SELECT * FROM CAT_TEMPLATES WHERE CAT_NAME = 'Pig & Sqoop Script')
BEGIN
    DECLARE  @CAT_ID BIGINT, @CAT_DIALOG_ID BIGINT, @CAT_DIALOG_PROFILE_ID BIGINT, @CAT_DIALOG_TAB_ID BIGINT, @CAT_TAB_ID BIGINT, @CAT_TEMPLATE_ORDER BIGINT;
    BEGIN
        SELECT @CAT_TAB_ID = CAT_TAB_ID FROM CAT_TABS WHERE CAT_TAB_NAME = 'com.ads.mm.stb.bigdata';
        SELECT @CAT_TEMPLATE_ORDER = ISNULL(MAX(CAT_TEMPLATE_ORDER)+1,1) FROM CAT_TEMPLATES WHERE CAT_TAB_ID = @CAT_TAB_ID;
        INSERT INTO CAT_TEMPLATES(CAT_NAME,CAT_DESC,CAT_IMAGE,CAT_STOCK_IMAGE,CAT_ENABLED,CAT_TAB_ID,CAT_SYSTEM_BASED,CAT_SCRIPT,CAT_ACTION,CREATED_BY,CREATED_DATE_TIME,LAST_MODIFIED_BY,LAST_MODIFIED_DATE_TIME,CAT_TEMPLATE_ORDER,CAT_SCRIPTING_LANGUAGE,CAT_OUTPUT_CONTENT_TYPE,CAT_OUTPUT_FILE_EXTENSION,CAT_ENABLE_MAPPING_DIALOG)
        VALUES('Pig & Sqoop Script', 'Pig & Sqoop Script', NULL, 'defaultCatImage.png', '1', @CAT_TAB_ID, '1', NULL, 'NULL', 'AnalytiX Data Services', CURRENT_TIMESTAMP, 'AnalytiX Data Services', CURRENT_TIMESTAMP, @CAT_TEMPLATE_ORDER, 'Javascript', 'Plain Text', '.txt', 0);
        SELECT @CAT_ID = CAT_ID FROM CAT_TEMPLATES WHERE CAT_NAME = 'Pig & Sqoop Script' AND CAT_TAB_ID = @CAT_TAB_ID;
        INSERT INTO CAT_DIALOG(CAT_DIALOG_NAME,CAT_DIALOG_PROPERTIES,CAT_ID,CREATED_BY,CREATED_DATE_TIME,LAST_MODIFIED_BY,LAST_MODIFIED_DATE_TIME)
        VALUES('Pig & Sqoop Script','{"fheight":400,"fwidth":600,"flabelwidth":50,"fcontrolwidth":50}',@CAT_ID,'Administrator',GETDATE(),'Administrator',GETDATE());
        SELECT @CAT_DIALOG_ID = CAT_DIALOG_ID FROM CAT_DIALOG WHERE CAT_DIALOG_NAME = 'Pig & Sqoop Script' AND CAT_ID = @CAT_ID;
        INSERT INTO CAT_DIALOG_PROFILE(CAT_DIALOG_ID,CAT_DIALOG_PROFILE_NAME,CREATED_BY,CREATED_DATE_TIME,LAST_MODIFIED_BY,LAST_MODIFIED_DATE_TIME)
        VALUES (@CAT_DIALOG_ID,'Default','Administrator',GETDATE(),'Administrator',GETDATE());
        SELECT @CAT_DIALOG_PROFILE_ID = CAT_DIALOG_PROFILE_ID FROM CAT_DIALOG_PROFILE WHERE CAT_DIALOG_PROFILE_NAME = 'Default' AND CAT_DIALOG_ID = @CAT_DIALOG_ID;
        UPDATE CAT_DIALOG SET [CAT_DIALOG_DEFAULT_PROFILE_ID] = @CAT_DIALOG_PROFILE_ID WHERE CAT_DIALOG_ID = @CAT_DIALOG_ID;
        INSERT INTO CAT_DIALOG_TAB(CAT_DIALOG_PROFILE_ID,CAT_DIALOG_TAB_NAME,CAT_DIALOG_TAB_PROPERTIES,CREATED_BY,CREATED_DATE_TIME,LAST_MODIFIED_BY,LAST_MODIFIED_DATE_TIME)
        VALUES(@CAT_DIALOG_PROFILE_ID,'DefaultTab','','Administrator',GETDATE(),'Administrator',GETDATE());
        SELECT @CAT_DIALOG_TAB_ID = CAT_DIALOG_TAB_ID FROM CAT_DIALOG_TAB WHERE CAT_DIALOG_TAB_NAME = 'DefaultTab' AND CAT_DIALOG_PROFILE_ID = @CAT_DIALOG_PROFILE_ID;
        INSERT INTO CAT_DIALOG_OPTION(CAT_DIALOG_TAB_ID,CAT_DIALOG_OPTION_NAME,CAT_DIALOG_OPTION_PROPERTIES,CREATED_BY,CREATED_DATE_TIME,LAST_MODIFIED_BY,LAST_MODIFIED_DATE_TIME)
        VALUES(@CAT_DIALOG_TAB_ID,'FILENAME_V','{"enabled":true,"visible":true,"type":"Text Box","title":"FILENAME","name":"FILENAME_V","catOptionOrder":0.0,"defaultValue":"google-allkeyreport-XXX.Tsv"}','Administrator',GETDATE(),'Administrator',GETDATE());
        INSERT INTO CAT_DIALOG_OPTION(CAT_DIALOG_TAB_ID,CAT_DIALOG_OPTION_NAME,CAT_DIALOG_OPTION_PROPERTIES,CREATED_BY,CREATED_DATE_TIME,LAST_MODIFIED_BY,LAST_MODIFIED_DATE_TIME)
        VALUES(@CAT_DIALOG_TAB_ID,'SOURCE_HDFS_FOLDER_V','{"enabled":true,"visible":true,"type":"Text Box","title":"SOURCE_HDFS_FOLDER","name":"SOURCE_HDFS_FOLDER_V","catOptionOrder":0.0,"defaultValue":"feeds/XXX"}','Administrator',GETDATE(),'Administrator',GETDATE());
        INSERT INTO CAT_DIALOG_OPTION(CAT_DIALOG_TAB_ID,CAT_DIALOG_OPTION_NAME,CAT_DIALOG_OPTION_PROPERTIES,CREATED_BY,CREATED_DATE_TIME,LAST_MODIFIED_BY,LAST_MODIFIED_DATE_TIME)
        VALUES(@CAT_DIALOG_TAB_ID,'TARGET_HDFS_FOLDER_V','{"enabled":true,"visible":true,"type":"Text Box","title":"TARGET_HDFS_FOLDER","name":"TARGET_HDFS_FOLDER_V","catOptionOrder":0.0,"defaultValue":"canonicaldata/XXX/search"}','Administrator',GETDATE(),'Administrator',GETDATE());
        INSERT INTO CAT_DIALOG_OPTION(CAT_DIALOG_TAB_ID,CAT_DIALOG_OPTION_NAME,CAT_DIALOG_OPTION_PROPERTIES,CREATED_BY,CREATED_DATE_TIME,LAST_MODIFIED_BY,LAST_MODIFIED_DATE_TIME)
        VALUES(@CAT_DIALOG_TAB_ID,'BATCH_ID_V','{"enabled":true,"visible":true,"type":"Text Box","title":"BATCH_ID","name":"BATCH_ID_V","catOptionOrder":0.0,"defaultValue":"-1"}','Administrator',GETDATE(),'Administrator',GETDATE());
        INSERT INTO CAT_DIALOG_OPTION(CAT_DIALOG_TAB_ID,CAT_DIALOG_OPTION_NAME,CAT_DIALOG_OPTION_PROPERTIES,CREATED_BY,CREATED_DATE_TIME,LAST_MODIFIED_BY,LAST_MODIFIED_DATE_TIME)
        VALUES(@CAT_DIALOG_TAB_ID,'PY_SCRIPT','{"enabled":true,"visible":true,"type":"Text Box","title":"PY_SCRIPT","name":"PY_SCRIPT","catOptionOrder":0.0,"defaultValue":"pig/XXX_search_udf.py"}','Administrator',GETDATE(),'Administrator',GETDATE());
        INSERT INTO CAT_DIALOG_OPTION(CAT_DIALOG_TAB_ID,CAT_DIALOG_OPTION_NAME,CAT_DIALOG_OPTION_PROPERTIES,CREATED_BY,CREATED_DATE_TIME,LAST_MODIFIED_BY,LAST_MODIFIED_DATE_TIME)
        VALUES(@CAT_DIALOG_TAB_ID,'SourceDelim','{"enabled":true,"visible":true,"type":"Text Box","title":"SourceDelim","name":"SourceDelim","catOptionOrder":0.0,"defaultValue":","}','Administrator',GETDATE(),'Administrator',GETDATE());
    END
END
GO

IF NOT EXISTS(SELECT * FROM CAT_TEMPLATES WHERE CAT_NAME = 'Forward Engineering - Simple Pattern')
BEGIN
    DECLARE  @CAT_ID BIGINT, @CAT_DIALOG_ID BIGINT, @CAT_DIALOG_PROFILE_ID BIGINT, @CAT_DIALOG_TAB_ID BIGINT, @CAT_TAB_ID BIGINT,@CAT_TEMPLATE_ORDER BIGINT;
    BEGIN
        SELECT @CAT_TAB_ID = CAT_TAB_ID FROM CAT_TABS WHERE CAT_TAB_NAME = 'com.ads.mm.stb.talend';
        SELECT @CAT_TEMPLATE_ORDER = ISNULL(MAX(CAT_TEMPLATE_ORDER)+1,1) FROM CAT_TEMPLATES WHERE CAT_TAB_ID = @CAT_TAB_ID;
        INSERT INTO CAT_TEMPLATES(CAT_NAME,CAT_DESC,CAT_IMAGE,CAT_STOCK_IMAGE,CAT_ENABLED,CAT_TAB_ID,CAT_SYSTEM_BASED,CAT_SCRIPT,CAT_ACTION,CREATED_BY,CREATED_DATE_TIME,LAST_MODIFIED_BY,LAST_MODIFIED_DATE_TIME,CAT_TEMPLATE_ORDER,CAT_SCRIPTING_LANGUAGE,CAT_OUTPUT_CONTENT_TYPE,CAT_OUTPUT_FILE_EXTENSION,CAT_ENABLE_MAPPING_DIALOG)
        VALUES('Forward Engineering - Simple Pattern', 'Forward Engineering - Simple Pattern', NULL, 'defaultCatImage.png', '1', @CAT_TAB_ID, '1', NULL, 'NULL', 'AnalytiX Data Services', CURRENT_TIMESTAMP, 'AnalytiX Data Services', CURRENT_TIMESTAMP, @CAT_TEMPLATE_ORDER, 'Javascript', 'XML', '.xml', 0);
        SELECT @CAT_ID = CAT_ID FROM CAT_TEMPLATES WHERE CAT_NAME = 'Forward Engineering - Simple Pattern' AND CAT_TAB_ID = @CAT_TAB_ID;
        INSERT INTO CAT_DIALOG(CAT_DIALOG_NAME,CAT_DIALOG_PROPERTIES,CAT_ID,CREATED_BY,CREATED_DATE_TIME,LAST_MODIFIED_BY,LAST_MODIFIED_DATE_TIME) VALUES('Forward Engineering - Simple Pattern','{"fheight":400,"fwidth":600,"flabelwidth":50,"fcontrolwidth":50}',@CAT_ID,'Administrator',GETDATE(),'Administrator',GETDATE());
        SELECT @CAT_DIALOG_ID = CAT_DIALOG_ID FROM CAT_DIALOG WHERE CAT_DIALOG_NAME = 'Forward Engineering - Simple Pattern' AND CAT_ID = @CAT_ID;
        INSERT INTO CAT_DIALOG_PROFILE(CAT_DIALOG_ID,CAT_DIALOG_PROFILE_NAME,CREATED_BY,CREATED_DATE_TIME,LAST_MODIFIED_BY,LAST_MODIFIED_DATE_TIME) VALUES (@CAT_DIALOG_ID,'Default','Administrator',GETDATE(),'Administrator',GETDATE());
        SELECT @CAT_DIALOG_PROFILE_ID = CAT_DIALOG_PROFILE_ID FROM CAT_DIALOG_PROFILE WHERE CAT_DIALOG_PROFILE_NAME = 'Default' AND CAT_DIALOG_ID = @CAT_DIALOG_ID;
        UPDATE CAT_DIALOG SET [CAT_DIALOG_DEFAULT_PROFILE_ID] = @CAT_DIALOG_PROFILE_ID WHERE CAT_DIALOG_ID = @CAT_DIALOG_ID;
        INSERT INTO CAT_DIALOG_TAB(CAT_DIALOG_PROFILE_ID,CAT_DIALOG_TAB_NAME,CAT_DIALOG_TAB_PROPERTIES,CREATED_BY,CREATED_DATE_TIME,LAST_MODIFIED_BY,LAST_MODIFIED_DATE_TIME) VALUES(@CAT_DIALOG_PROFILE_ID,'DefaultTab','','Administrator',GETDATE(),'Administrator',GETDATE());
        SELECT @CAT_DIALOG_TAB_ID = CAT_DIALOG_TAB_ID FROM CAT_DIALOG_TAB WHERE CAT_DIALOG_TAB_NAME = 'DefaultTab' AND CAT_DIALOG_PROFILE_ID = @CAT_DIALOG_PROFILE_ID;
        INSERT INTO CAT_DIALOG_OPTION(CAT_DIALOG_TAB_ID,CAT_DIALOG_OPTION_NAME,CAT_DIALOG_OPTION_PROPERTIES,CREATED_BY,CREATED_DATE_TIME,LAST_MODIFIED_BY,LAST_MODIFIED_DATE_TIME)
        VALUES(@CAT_DIALOG_TAB_ID,'vAmm_Con_Port','{"controlStyle":"","enabled":true,"controlwidth":"100%","visible":true,"multiValued":false,"labelStyleJSON":"","labelStyle":"","tabId":0,"image":"images/textbox.jpg","allowDisabling":false,"list":"","catOptionId":354,"type":"Text Box","title":"AMM Port","container":false,"controlStyleJSON":"","name":"vAmm_Con_Port","html":"","defaultValue":"1433","catOptionOrder":1}','Administrator',GETDATE(),'Administrator',GETDATE());
        INSERT INTO CAT_DIALOG_OPTION(CAT_DIALOG_TAB_ID,CAT_DIALOG_OPTION_NAME,CAT_DIALOG_OPTION_PROPERTIES,CREATED_BY,CREATED_DATE_TIME,LAST_MODIFIED_BY,LAST_MODIFIED_DATE_TIME)
        VALUES(@CAT_DIALOG_TAB_ID,'vAmm_Con_AdditionalParams','{"controlStyle":"","enabled":true,"controlwidth":"100%","visible":true,"multiValued":false,"labelStyleJSON":"","labelStyle":"","tabId":0,"image":"images/textbox.jpg","allowDisabling":false,"list":"","catOptionId":355,"type":"Text Box","title":"AMM AdditionalParams","container":false,"controlStyleJSON":"","name":"vAmm_Con_AdditionalParams","html":"","defaultValue":"","catOptionOrder":7}','Administrator',GETDATE(),'Administrator',GETDATE());
        INSERT INTO CAT_DIALOG_OPTION(CAT_DIALOG_TAB_ID,CAT_DIALOG_OPTION_NAME,CAT_DIALOG_OPTION_PROPERTIES,CREATED_BY,CREATED_DATE_TIME,LAST_MODIFIED_BY,LAST_MODIFIED_DATE_TIME)
        VALUES(@CAT_DIALOG_TAB_ID,'vAmm_Con_Server','{"controlStyle":"","enabled":true,"controlwidth":"100%","visible":true,"multiValued":false,"labelStyleJSON":"","labelStyle":"","tabId":0,"image":"images/textbox.jpg","allowDisabling":false,"list":"","catOptionId":356,"type":"Text Box","title":"AMM Server","container":false,"controlStyleJSON":"","name":"vAmm_Con_Server","html":"","defaultValue":"localhost","catOptionOrder":0}','Administrator',GETDATE(),'Administrator',GETDATE());
        INSERT INTO CAT_DIALOG_OPTION(CAT_DIALOG_TAB_ID,CAT_DIALOG_OPTION_NAME,CAT_DIALOG_OPTION_PROPERTIES,CREATED_BY,CREATED_DATE_TIME,LAST_MODIFIED_BY,LAST_MODIFIED_DATE_TIME)
        VALUES(@CAT_DIALOG_TAB_ID,'vAmm_Con_Database','{"controlStyle":"","enabled":true,"controlwidth":"100%","visible":true,"multiValued":false,"labelStyleJSON":"","labelStyle":"","tabId":0,"image":"images/textbox.jpg","allowDisabling":false,"list":"","catOptionId":357,"type":"Text Box","title":"AMM Database","container":false,"controlStyleJSON":"","name":"vAmm_Con_Database","html":"","defaultValue":"AMM","catOptionOrder":2}','Administrator',GETDATE(),'Administrator',GETDATE());
        INSERT INTO CAT_DIALOG_OPTION(CAT_DIALOG_TAB_ID,CAT_DIALOG_OPTION_NAME,CAT_DIALOG_OPTION_PROPERTIES,CREATED_BY,CREATED_DATE_TIME,LAST_MODIFIED_BY,LAST_MODIFIED_DATE_TIME)
        VALUES(@CAT_DIALOG_TAB_ID,'vAmm_Con_Login','{"controlStyle":"","enabled":true,"controlwidth":"100%","visible":true,"multiValued":false,"labelStyleJSON":"","labelStyle":"","tabId":0,"image":"images/textbox.jpg","allowDisabling":false,"list":"","catOptionId":358,"type":"Text Box","title":"AMM Login","controlStyleJSON":"","container":false,"name":"vAmm_Con_Login","html":"","defaultValue":"amm","catOptionOrder":4}','Administrator',GETDATE(),'Administrator',GETDATE());
        INSERT INTO CAT_DIALOG_OPTION(CAT_DIALOG_TAB_ID,CAT_DIALOG_OPTION_NAME,CAT_DIALOG_OPTION_PROPERTIES,CREATED_BY,CREATED_DATE_TIME,LAST_MODIFIED_BY,LAST_MODIFIED_DATE_TIME)
        VALUES(@CAT_DIALOG_TAB_ID,'vAmm_Con_Schema','{"controlStyle":"","enabled":true,"controlwidth":"100%","visible":true,"multiValued":false,"labelStyleJSON":"","labelStyle":"","tabId":0,"image":"images/textbox.jpg","allowDisabling":false,"list":"","catOptionId":359,"type":"Text Box","title":"Amm Schema","controlStyleJSON":"","container":false,"name":"vAmm_Con_Schema","html":"","defaultValue":"dbo","catOptionOrder":3}','Administrator',GETDATE(),'Administrator',GETDATE());
        INSERT INTO CAT_DIALOG_OPTION(CAT_DIALOG_TAB_ID,CAT_DIALOG_OPTION_NAME,CAT_DIALOG_OPTION_PROPERTIES,CREATED_BY,CREATED_DATE_TIME,LAST_MODIFIED_BY,LAST_MODIFIED_DATE_TIME)
        VALUES(@CAT_DIALOG_TAB_ID,'vAmm_Con_Password','{"controlStyle":"","enabled":true,"controlwidth":"100%","visible":true,"multiValued":false,"labelStyleJSON":"","labelStyle":"","tabId":0,"image":"images/textbox.jpg","allowDisabling":false,"list":"","catOptionId":360,"type":"Text Box","title":"AMM Password","controlStyleJSON":"","container":false,"name":"vAmm_Con_Password","html":"","defaultValue":"amm","catOptionOrder":5}','Administrator',GETDATE(),'Administrator',GETDATE());
        INSERT INTO CAT_DIALOG_OPTION(CAT_DIALOG_TAB_ID,CAT_DIALOG_OPTION_NAME,CAT_DIALOG_OPTION_PROPERTIES,CREATED_BY,CREATED_DATE_TIME,LAST_MODIFIED_BY,LAST_MODIFIED_DATE_TIME)
        VALUES(@CAT_DIALOG_TAB_ID,'vsrc_col_count','{"controlStyle":"","enabled":true,"controlwidth":"100%","visible":false,"multiValued":false,"labelStyleJSON":"","labelStyle":"","tabId":0,"image":"images/textbox.jpg","allowDisabling":false,"list":"","catOptionId":361,"type":"Text Box","title":"src_col_count","controlStyleJSON":"","container":false,"name":"vsrc_col_count","html":"","defaultValue":"","catOptionOrder":8}','Administrator',GETDATE(),'Administrator',GETDATE());
        INSERT INTO CAT_DIALOG_OPTION(CAT_DIALOG_TAB_ID,CAT_DIALOG_OPTION_NAME,CAT_DIALOG_OPTION_PROPERTIES,CREATED_BY,CREATED_DATE_TIME,LAST_MODIFIED_BY,LAST_MODIFIED_DATE_TIME)
        VALUES(@CAT_DIALOG_TAB_ID,'vtgt_col_count','{"controlStyle":"","enabled":true,"controlwidth":"100%","visible":false,"multiValued":false,"labelStyleJSON":"","labelStyle":"","tabId":0,"image":"images/textbox.jpg","allowDisabling":false,"list":"","catOptionId":362,"type":"Text Box","title":"tgt_col_count","controlStyleJSON":"","container":false,"name":"vtgt_col_count","html":"","defaultValue":"","catOptionOrder":9}','Administrator',GETDATE(),'Administrator',GETDATE());
        INSERT INTO CAT_DIALOG_OPTION(CAT_DIALOG_TAB_ID,CAT_DIALOG_OPTION_NAME,CAT_DIALOG_OPTION_PROPERTIES,CREATED_BY,CREATED_DATE_TIME,LAST_MODIFIED_BY,LAST_MODIFIED_DATE_TIME)
        VALUES(@CAT_DIALOG_TAB_ID,'vMap_ID','{"controlStyle":"","enabled":true,"controlwidth":"100%","visible":false,"multiValued":false,"labelStyleJSON":"","labelStyle":"","tabId":0,"image":"images/textbox.jpg","allowDisabling":false,"list":"","catOptionId":363,"type":"Text Box","title":"Map_ID","controlStyleJSON":"","container":false,"name":"vMap_ID","html":"","defaultValue":"","catOptionOrder":10}','Administrator',GETDATE(),'Administrator',GETDATE());
        INSERT INTO CAT_DIALOG_OPTION(CAT_DIALOG_TAB_ID,CAT_DIALOG_OPTION_NAME,CAT_DIALOG_OPTION_PROPERTIES,CREATED_BY,CREATED_DATE_TIME,LAST_MODIFIED_BY,LAST_MODIFIED_DATE_TIME)
        VALUES(@CAT_DIALOG_TAB_ID,'vProj_ID','{"controlStyle":"","enabled":true,"controlwidth":"100%","visible":false,"multiValued":false,"labelStyleJSON":"","labelStyle":"","tabId":0,"image":"images/textbox.jpg","allowDisabling":false,"list":"","catOptionId":364,"type":"Text Box","title":"Proj_ID","controlStyleJSON":"","container":false,"name":"vProj_ID","html":"","defaultValue":"","catOptionOrder":11}','Administrator',GETDATE(),'Administrator',GETDATE());
        INSERT INTO CAT_DIALOG_OPTION(CAT_DIALOG_TAB_ID,CAT_DIALOG_OPTION_NAME,CAT_DIALOG_OPTION_PROPERTIES,CREATED_BY,CREATED_DATE_TIME,LAST_MODIFIED_BY,LAST_MODIFIED_DATE_TIME)
        VALUES(@CAT_DIALOG_TAB_ID,'vMap_Name','{"controlStyle":"","enabled":true,"controlwidth":"100%","visible":true,"multiValued":false,"labelStyleJSON":"","labelStyle":"","tabId":0,"image":"images/textbox.jpg","allowDisabling":false,"list":"","catOptionId":365,"type":"Text Box","title":"Map_Name","controlStyleJSON":"","container":false,"name":"vMap_Name","html":"","defaultValue":"","catOptionOrder":12}','Administrator',GETDATE(),'Administrator',GETDATE());
        INSERT INTO CAT_DIALOG_OPTION(CAT_DIALOG_TAB_ID,CAT_DIALOG_OPTION_NAME,CAT_DIALOG_OPTION_PROPERTIES,CREATED_BY,CREATED_DATE_TIME,LAST_MODIFIED_BY,LAST_MODIFIED_DATE_TIME)
        VALUES(@CAT_DIALOG_TAB_ID,'vProj_Name','{"controlStyle":"","enabled":true,"controlwidth":"100%","visible":true,"multiValued":false,"labelStyleJSON":"","labelStyle":"","tabId":0,"image":"images/textbox.jpg","allowDisabling":false,"list":"","catOptionId":366,"type":"Text Box","title":"Proj_Name","controlStyleJSON":"","container":false,"name":"vProj_Name","html":"","defaultValue":"","catOptionOrder":13}','Administrator',GETDATE(),'Administrator',GETDATE());
        INSERT INTO CAT_DIALOG_OPTION(CAT_DIALOG_TAB_ID,CAT_DIALOG_OPTION_NAME,CAT_DIALOG_OPTION_PROPERTIES,CREATED_BY,CREATED_DATE_TIME,LAST_MODIFIED_BY,LAST_MODIFIED_DATE_TIME)
        VALUES(@CAT_DIALOG_TAB_ID,'vOutput_file_path','{"controlStyle":"","enabled":true,"controlwidth":"100%","visible":true,"multiValued":false,"labelStyleJSON":"","labelStyle":"","tabId":0,"image":"images/textbox.jpg","allowDisabling":false,"list":"","catOptionId":367,"type":"Text Box","title":"Output_file_path","container":false,"controlStyleJSON":"","name":"vOutput_file_path","html":"","defaultValue":"","catOptionOrder":6}','Administrator',GETDATE(),'Administrator',GETDATE());
    END
END
GO


IF NOT EXISTS(SELECT * FROM CAT_TEMPLATES WHERE CAT_NAME = 'Reverse Engineering - Simple Pattern')
BEGIN
    DECLARE  @CAT_ID BIGINT, @CAT_DIALOG_ID BIGINT, @CAT_DIALOG_PROFILE_ID BIGINT, @CAT_DIALOG_TAB_ID BIGINT, @CAT_TAB_ID BIGINT,@CAT_TEMPLATE_ORDER BIGINT;
    BEGIN
        SELECT @CAT_TAB_ID = CAT_TAB_ID FROM CAT_TABS WHERE CAT_TAB_NAME = 'com.ads.mm.stb.talend';
        SELECT @CAT_TEMPLATE_ORDER = ISNULL(MAX(CAT_TEMPLATE_ORDER)+1,1) FROM CAT_TEMPLATES WHERE CAT_TAB_ID = @CAT_TAB_ID;
        INSERT INTO CAT_TEMPLATES(CAT_NAME,CAT_DESC,CAT_IMAGE,CAT_STOCK_IMAGE,CAT_ENABLED,CAT_TAB_ID,CAT_SYSTEM_BASED,CAT_SCRIPT,CAT_ACTION,CREATED_BY,CREATED_DATE_TIME,LAST_MODIFIED_BY,LAST_MODIFIED_DATE_TIME,CAT_TEMPLATE_ORDER,CAT_SCRIPTING_LANGUAGE,CAT_OUTPUT_CONTENT_TYPE,CAT_OUTPUT_FILE_EXTENSION,CAT_ENABLE_MAPPING_DIALOG)
        VALUES('Reverse Engineering - Simple Pattern', 'Reverse Engineering - Simple Pattern', NULL, 'defaultCatImage.png', '1', @CAT_TAB_ID, '1', NULL, 'NULL', 'AnalytiX Data Services', CURRENT_TIMESTAMP, 'AnalytiX Data Services', CURRENT_TIMESTAMP, @CAT_TEMPLATE_ORDER, 'Javascript', 'Plain Text', '.txt', 0);
        SELECT @CAT_ID = CAT_ID FROM CAT_TEMPLATES WHERE CAT_NAME = 'Reverse Engineering - Simple Pattern' AND CAT_TAB_ID = @CAT_TAB_ID;
        INSERT INTO CAT_DIALOG(CAT_DIALOG_NAME,CAT_DIALOG_PROPERTIES,CAT_ID,CREATED_BY,CREATED_DATE_TIME,LAST_MODIFIED_BY,LAST_MODIFIED_DATE_TIME) VALUES('Reverse Engineering - Simple Pattern','{"fheight":400,"fwidth":600,"flabelwidth":50,"fcontrolwidth":50}',@CAT_ID,'Administrator',GETDATE(),'Administrator',GETDATE());
        SELECT @CAT_DIALOG_ID = CAT_DIALOG_ID FROM CAT_DIALOG WHERE CAT_DIALOG_NAME = 'Reverse Engineering - Simple Pattern' AND CAT_ID = @CAT_ID;
        INSERT INTO CAT_DIALOG_PROFILE(CAT_DIALOG_ID,CAT_DIALOG_PROFILE_NAME,CREATED_BY,CREATED_DATE_TIME,LAST_MODIFIED_BY,LAST_MODIFIED_DATE_TIME) VALUES (@CAT_DIALOG_ID,'Default','Administrator',GETDATE(),'Administrator',GETDATE());
        SELECT @CAT_DIALOG_PROFILE_ID = CAT_DIALOG_PROFILE_ID FROM CAT_DIALOG_PROFILE WHERE CAT_DIALOG_PROFILE_NAME = 'Default' AND CAT_DIALOG_ID = @CAT_DIALOG_ID;
        UPDATE CAT_DIALOG SET [CAT_DIALOG_DEFAULT_PROFILE_ID] = @CAT_DIALOG_PROFILE_ID WHERE CAT_DIALOG_ID = @CAT_DIALOG_ID;
        INSERT INTO CAT_DIALOG_TAB(CAT_DIALOG_PROFILE_ID,CAT_DIALOG_TAB_NAME,CAT_DIALOG_TAB_PROPERTIES,CREATED_BY,CREATED_DATE_TIME,LAST_MODIFIED_BY,LAST_MODIFIED_DATE_TIME) VALUES(@CAT_DIALOG_PROFILE_ID,'DefaultTab','','Administrator',GETDATE(),'Administrator',GETDATE());
        SELECT @CAT_DIALOG_TAB_ID = CAT_DIALOG_TAB_ID FROM CAT_DIALOG_TAB WHERE CAT_DIALOG_TAB_NAME = 'DefaultTab' AND CAT_DIALOG_PROFILE_ID = @CAT_DIALOG_PROFILE_ID;
        INSERT INTO CAT_DIALOG_OPTION(CAT_DIALOG_TAB_ID,CAT_DIALOG_OPTION_NAME,CAT_DIALOG_OPTION_PROPERTIES,CREATED_BY,CREATED_DATE_TIME,LAST_MODIFIED_BY,LAST_MODIFIED_DATE_TIME)
        VALUES(@CAT_DIALOG_TAB_ID,'vAMM_tables_AdditionalParams','{"controlStyle":"","enabled":true,"controlwidth":"100%","visible":false,"multiValued":false,"labelStyleJSON":"","labelStyle":"","tabId":0,"image":"images/textbox.jpg","allowDisabling":false,"list":"","catOptionId":205,"type":"Text Box","title":"AMM AdditionalParams","container":false,"controlStyleJSON":"","name":"vAMM_tables_AdditionalParams","html":"","defaultValue":"","catOptionOrder":9}','Administrator',GETDATE(),'Administrator',GETDATE());
        INSERT INTO CAT_DIALOG_OPTION(CAT_DIALOG_TAB_ID,CAT_DIALOG_OPTION_NAME,CAT_DIALOG_OPTION_PROPERTIES,CREATED_BY,CREATED_DATE_TIME,LAST_MODIFIED_BY,LAST_MODIFIED_DATE_TIME)
        VALUES(@CAT_DIALOG_TAB_ID,'vAMM_tables_Database','{"controlStyle":"","enabled":true,"controlwidth":"100%","visible":true,"multiValued":false,"labelStyleJSON":"","labelStyle":"","tabId":0,"image":"images/textbox.jpg","allowDisabling":false,"list":"","catOptionId":206,"type":"Text Box","title":"AMM Database","container":false,"controlStyleJSON":"","name":"vAMM_tables_Database","html":"","defaultValue":"AMM6","catOptionOrder":1}','Administrator',GETDATE(),'Administrator',GETDATE());
        INSERT INTO CAT_DIALOG_OPTION(CAT_DIALOG_TAB_ID,CAT_DIALOG_OPTION_NAME,CAT_DIALOG_OPTION_PROPERTIES,CREATED_BY,CREATED_DATE_TIME,LAST_MODIFIED_BY,LAST_MODIFIED_DATE_TIME)
        VALUES(@CAT_DIALOG_TAB_ID,'vAMM_tables_Login','{"controlStyle":"","enabled":true,"controlwidth":"100%","visible":true,"multiValued":false,"labelStyleJSON":"","labelStyle":"","tabId":0,"image":"images/textbox.jpg","allowDisabling":false,"list":"","catOptionId":207,"type":"Text Box","title":"AMM Login","container":false,"controlStyleJSON":"","name":"vAMM_tables_Login","html":"","defaultValue":"jay","catOptionOrder":4}','Administrator',GETDATE(),'Administrator',GETDATE());
        INSERT INTO CAT_DIALOG_OPTION(CAT_DIALOG_TAB_ID,CAT_DIALOG_OPTION_NAME,CAT_DIALOG_OPTION_PROPERTIES,CREATED_BY,CREATED_DATE_TIME,LAST_MODIFIED_BY,LAST_MODIFIED_DATE_TIME)
        VALUES(@CAT_DIALOG_TAB_ID,'vAMM_tables_Password','{"controlStyle":"","enabled":true,"controlwidth":"100%","visible":true,"multiValued":false,"labelStyleJSON":"","labelStyle":"","tabId":0,"image":"images/textbox.jpg","allowDisabling":false,"list":"","catOptionId":208,"type":"Text Box","title":"AMM Password","container":false,"controlStyleJSON":"","name":"vAMM_tables_Password","html":"","defaultValue":"jay","catOptionOrder":5}','Administrator',GETDATE(),'Administrator',GETDATE());
        INSERT INTO CAT_DIALOG_OPTION(CAT_DIALOG_TAB_ID,CAT_DIALOG_OPTION_NAME,CAT_DIALOG_OPTION_PROPERTIES,CREATED_BY,CREATED_DATE_TIME,LAST_MODIFIED_BY,LAST_MODIFIED_DATE_TIME)
        VALUES(@CAT_DIALOG_TAB_ID,'vAMM_tables_Port','{"controlStyle":"","enabled":true,"controlwidth":"100%","visible":true,"multiValued":false,"labelStyleJSON":"","labelStyle":"","tabId":0,"image":"images/textbox.jpg","allowDisabling":false,"list":"","catOptionId":209,"type":"Text Box","title":"AMM Port","container":false,"controlStyleJSON":"","name":"vAMM_tables_Port","html":"","defaultValue":"1433","catOptionOrder":2}','Administrator',GETDATE(),'Administrator',GETDATE());
        INSERT INTO CAT_DIALOG_OPTION(CAT_DIALOG_TAB_ID,CAT_DIALOG_OPTION_NAME,CAT_DIALOG_OPTION_PROPERTIES,CREATED_BY,CREATED_DATE_TIME,LAST_MODIFIED_BY,LAST_MODIFIED_DATE_TIME)
        VALUES(@CAT_DIALOG_TAB_ID,'vAMM_tables_Schema','{"controlStyle":"","enabled":true,"controlwidth":"100%","visible":true,"multiValued":false,"labelStyleJSON":"","labelStyle":"","tabId":0,"image":"images/textbox.jpg","allowDisabling":false,"list":"","catOptionId":210,"type":"Text Box","title":"AMM Schema","container":false,"controlStyleJSON":"","name":"vAMM_tables_Schema","html":"","defaultValue":"dbo","catOptionOrder":3}','Administrator',GETDATE(),'Administrator',GETDATE());
        INSERT INTO CAT_DIALOG_OPTION(CAT_DIALOG_TAB_ID,CAT_DIALOG_OPTION_NAME,CAT_DIALOG_OPTION_PROPERTIES,CREATED_BY,CREATED_DATE_TIME,LAST_MODIFIED_BY,LAST_MODIFIED_DATE_TIME)
        VALUES(@CAT_DIALOG_TAB_ID,'vAMM_tables_Server','{"controlStyle":"","enabled":true,"controlwidth":"100%","visible":true,"multiValued":false,"labelStyleJSON":"","labelStyle":"","tabId":0,"image":"images/textbox.jpg","allowDisabling":false,"list":"","catOptionId":211,"type":"Text Box","title":"AMM Server","container":false,"controlStyleJSON":"","name":"vAMM_tables_Server","html":"","defaultValue":"localhost","catOptionOrder":0}','Administrator',GETDATE(),'Administrator',GETDATE());
        INSERT INTO CAT_DIALOG_OPTION(CAT_DIALOG_TAB_ID,CAT_DIALOG_OPTION_NAME,CAT_DIALOG_OPTION_PROPERTIES,CREATED_BY,CREATED_DATE_TIME,LAST_MODIFIED_BY,LAST_MODIFIED_DATE_TIME)
        VALUES(@CAT_DIALOG_TAB_ID,'vMap_ID','{"controlStyle":"","enabled":true,"controlwidth":"100%","visible":false,"multiValued":false,"labelStyleJSON":"","labelStyle":"","tabId":0,"image":"images/textbox.jpg","allowDisabling":false,"list":"","catOptionId":212,"type":"Text Box","title":"vMap_ID","container":false,"controlStyleJSON":"","name":"vMap_ID","html":"","defaultValue":"","catOptionOrder":10}','Administrator',GETDATE(),'Administrator',GETDATE());
        INSERT INTO CAT_DIALOG_OPTION(CAT_DIALOG_TAB_ID,CAT_DIALOG_OPTION_NAME,CAT_DIALOG_OPTION_PROPERTIES,CREATED_BY,CREATED_DATE_TIME,LAST_MODIFIED_BY,LAST_MODIFIED_DATE_TIME)
        VALUES(@CAT_DIALOG_TAB_ID,'vMap_Name','{"controlStyle":"","enabled":true,"controlwidth":"100%","visible":true,"multiValued":false,"labelStyleJSON":"","labelStyle":"","tabId":0,"image":"images/textbox.jpg","allowDisabling":false,"list":"","catOptionId":213,"type":"Text Box","title":"AMM MapName","container":false,"controlStyleJSON":"","name":"vMap_Name","html":"","defaultValue":"","catOptionOrder":8}','Administrator',GETDATE(),'Administrator',GETDATE());
        INSERT INTO CAT_DIALOG_OPTION(CAT_DIALOG_TAB_ID,CAT_DIALOG_OPTION_NAME,CAT_DIALOG_OPTION_PROPERTIES,CREATED_BY,CREATED_DATE_TIME,LAST_MODIFIED_BY,LAST_MODIFIED_DATE_TIME)
        VALUES(@CAT_DIALOG_TAB_ID,'vProj_ID','{"controlStyle":"","enabled":true,"controlwidth":"100%","visible":false,"multiValued":false,"labelStyleJSON":"","labelStyle":"","tabId":0,"image":"images/textbox.jpg","allowDisabling":false,"list":"","catOptionId":214,"type":"Text Box","title":"vProj_ID","container":false,"controlStyleJSON":"","name":"vProj_ID","html":"","defaultValue":"","catOptionOrder":11}','Administrator',GETDATE(),'Administrator',GETDATE());
        INSERT INTO CAT_DIALOG_OPTION(CAT_DIALOG_TAB_ID,CAT_DIALOG_OPTION_NAME,CAT_DIALOG_OPTION_PROPERTIES,CREATED_BY,CREATED_DATE_TIME,LAST_MODIFIED_BY,LAST_MODIFIED_DATE_TIME)
        VALUES(@CAT_DIALOG_TAB_ID,'vProj_Name','{"controlStyle":"","enabled":true,"controlwidth":"100%","visible":true,"multiValued":false,"labelStyleJSON":"","labelStyle":"","tabId":0,"image":"images/textbox.jpg","allowDisabling":false,"list":"","catOptionId":215,"type":"Text Box","title":"AMM ProjName","container":false,"controlStyleJSON":"","name":"vProj_Name","html":"","defaultValue":"Talend_To_Amm","catOptionOrder":7}','Administrator',GETDATE(),'Administrator',GETDATE());
        INSERT INTO CAT_DIALOG_OPTION(CAT_DIALOG_TAB_ID,CAT_DIALOG_OPTION_NAME,CAT_DIALOG_OPTION_PROPERTIES,CREATED_BY,CREATED_DATE_TIME,LAST_MODIFIED_BY,LAST_MODIFIED_DATE_TIME)
        VALUES(@CAT_DIALOG_TAB_ID,'vSource_DB','{"controlStyle":"","enabled":true,"controlwidth":"100%","visible":false,"multiValued":false,"labelStyleJSON":"","labelStyle":"","tabId":0,"image":"images/textbox.jpg","allowDisabling":false,"list":"","catOptionId":216,"type":"Text Box","title":"vSource_DB","container":false,"controlStyleJSON":"","name":"vSource_DB","html":"","defaultValue":"MSSQL","catOptionOrder":12}','Administrator',GETDATE(),'Administrator',GETDATE());
        INSERT INTO CAT_DIALOG_OPTION(CAT_DIALOG_TAB_ID,CAT_DIALOG_OPTION_NAME,CAT_DIALOG_OPTION_PROPERTIES,CREATED_BY,CREATED_DATE_TIME,LAST_MODIFIED_BY,LAST_MODIFIED_DATE_TIME)
        VALUES(@CAT_DIALOG_TAB_ID,'vTaland_SRC_File_Path','{"controlStyle":"","enabled":true,"controlwidth":"100%","visible":true,"multiValued":false,"labelStyleJSON":"","labelStyle":"","tabId":0,"image":"images/textbox.jpg","allowDisabling":false,"list":"","catOptionId":217,"type":"Text Box","title":"Taland Source File Path","container":false,"controlStyleJSON":"","name":"vTaland_SRC_File_Path","html":"","defaultValue":" C:/Users/Analytix/Desktop/Subbu/TALEND_TO_AMM_0.1(1)/Input_file/Talend_amm.xml","catOptionOrder":6}','Administrator',GETDATE(),'Administrator',GETDATE());
        INSERT INTO CAT_DIALOG_OPTION(CAT_DIALOG_TAB_ID,CAT_DIALOG_OPTION_NAME,CAT_DIALOG_OPTION_PROPERTIES,CREATED_BY,CREATED_DATE_TIME,LAST_MODIFIED_BY,LAST_MODIFIED_DATE_TIME)
        VALUES(@CAT_DIALOG_TAB_ID,'vTarget_DB','{"controlStyle":"","enabled":true,"controlwidth":"100%","visible":false,"multiValued":false,"labelStyleJSON":"","labelStyle":"","tabId":0,"image":"images/textbox.jpg","allowDisabling":false,"list":"","catOptionId":218,"type":"Text Box","title":"vTarget_DB","container":false,"controlStyleJSON":"","name":"vTarget_DB","html":"","defaultValue":"MSSQL","catOptionOrder":13}','Administrator',GETDATE(),'Administrator',GETDATE());
    END
END
GO
IF NOT EXISTS(SELECT * FROM CAT_TEMPLATES WHERE CAT_NAME = 'Import Microsoft SSIS DTSX')
BEGIN
    DECLARE  @CAT_ID BIGINT, @CAT_DIALOG_ID BIGINT, @CAT_DIALOG_PROFILE_ID BIGINT, @CAT_DIALOG_TAB_ID BIGINT, @CAT_TAB_ID BIGINT,@CAT_TEMPLATE_ORDER BIGINT;
    BEGIN
        SELECT @CAT_TAB_ID = CAT_TAB_ID FROM CAT_TABS WHERE CAT_TAB_NAME = 'com.ads.mm.stb.ssis';
        SELECT @CAT_TEMPLATE_ORDER = ISNULL(MAX(CAT_TEMPLATE_ORDER)+1,1) FROM CAT_TEMPLATES WHERE CAT_TAB_ID = @CAT_TAB_ID;
        INSERT INTO CAT_TEMPLATES(CAT_NAME,CAT_DESC,CAT_IMAGE,CAT_STOCK_IMAGE,CAT_ENABLED,CAT_TAB_ID,CAT_SYSTEM_BASED,CAT_SCRIPT,CAT_ACTION,CREATED_BY,CREATED_DATE_TIME,LAST_MODIFIED_BY,LAST_MODIFIED_DATE_TIME,CAT_TEMPLATE_ORDER,CAT_SCRIPTING_LANGUAGE,CAT_OUTPUT_CONTENT_TYPE,CAT_OUTPUT_FILE_EXTENSION,CAT_ENABLE_MAPPING_DIALOG)
        VALUES('Import Microsoft SSIS DTSX', 'Import SSIS DTSX Packages for 2005, 2008, 2010, 2012 & 2014 Versions of Microsoft SQL Server', NULL, 'defaultCatImage.png', '1', @CAT_TAB_ID, '1', NULL, 'NULL', 'AnalytiX Data Services', CURRENT_TIMESTAMP, 'AnalytiX Data Services', CURRENT_TIMESTAMP, @CAT_TEMPLATE_ORDER, 'Javascript', 'Plain Text', '.log', 0);
        SELECT @CAT_ID = CAT_ID FROM CAT_TEMPLATES WHERE CAT_NAME = 'Import Microsoft SSIS DTSX' AND CAT_TAB_ID = @CAT_TAB_ID;
        INSERT INTO CAT_DIALOG(CAT_DIALOG_NAME,CAT_DIALOG_PROPERTIES,CAT_ID,CREATED_BY,CREATED_DATE_TIME,LAST_MODIFIED_BY,LAST_MODIFIED_DATE_TIME) VALUES('DTSX Multi Import Java','{"fheight":385,"fwidth":369,"flabelwidth":"35","fcontrolwidth":"65"}',@CAT_ID,'Administrator',GETDATE(),'Administrator',GETDATE());
        SELECT @CAT_DIALOG_ID = CAT_DIALOG_ID FROM CAT_DIALOG WHERE CAT_DIALOG_NAME = 'DTSX Multi Import Java' AND CAT_ID = @CAT_ID;
        INSERT INTO CAT_DIALOG_PROFILE(CAT_DIALOG_ID,CAT_DIALOG_PROFILE_NAME,CREATED_BY,CREATED_DATE_TIME,LAST_MODIFIED_BY,LAST_MODIFIED_DATE_TIME) VALUES (@CAT_DIALOG_ID,'Default','Administrator',GETDATE(),'Administrator',GETDATE());
        SELECT @CAT_DIALOG_PROFILE_ID = CAT_DIALOG_PROFILE_ID FROM CAT_DIALOG_PROFILE WHERE CAT_DIALOG_PROFILE_NAME = 'Default' AND CAT_DIALOG_ID = @CAT_DIALOG_ID;
        UPDATE CAT_DIALOG SET [CAT_DIALOG_DEFAULT_PROFILE_ID] = @CAT_DIALOG_PROFILE_ID WHERE CAT_DIALOG_ID = @CAT_DIALOG_ID;
        INSERT INTO CAT_DIALOG_TAB(CAT_DIALOG_PROFILE_ID,CAT_DIALOG_TAB_NAME,CAT_DIALOG_TAB_PROPERTIES,CREATED_BY,CREATED_DATE_TIME,LAST_MODIFIED_BY,LAST_MODIFIED_DATE_TIME) VALUES(@CAT_DIALOG_PROFILE_ID,'DefaultTab','','Administrator',GETDATE(),'Administrator',GETDATE());
        SELECT @CAT_DIALOG_TAB_ID = CAT_DIALOG_TAB_ID FROM CAT_DIALOG_TAB WHERE CAT_DIALOG_TAB_NAME = 'DefaultTab' AND CAT_DIALOG_PROFILE_ID = @CAT_DIALOG_PROFILE_ID;
        INSERT INTO CAT_DIALOG_OPTION(CAT_DIALOG_TAB_ID,CAT_DIALOG_OPTION_NAME,CAT_DIALOG_OPTION_PROPERTIES,CREATED_BY,CREATED_DATE_TIME,LAST_MODIFIED_BY,LAST_MODIFIED_DATE_TIME)
        VALUES(@CAT_DIALOG_TAB_ID,'DTSXFILES','{"controlStyle":"font-family:Century Gothic; font-size: 12px;font-weight:regular;text-decoration:none;padding-top:0px;padding-left:0px;padding-right:0px;padding-bottom:0px;text-align:left;vertical-align:top;color:#000000;","showTimer":true,"visible":true,"labelStyleJSON":"{\"font-family\": \"Comic Sans MS\", \"font-size\": \"12px\",\"font-weight\":\"bold\",\"text-decoration\":\"none\",\"padding-top\":\"0\",\"padding-left\":\"0\",\"padding-right\":\"3\",\"padding-bottom\":\"0\",\"text-align\":\" right\",\"vertical-align\":\"center\",\"color\":\"#000000\",\"background-color\": \"#ffffff\"}","labelStyle":"font-family:Comic Sans MS; font-size: 12px;font-weight:bold;text-decoration:none;padding-top:0px;padding-left:0px;padding-right:3px;padding-bottom:0px;text-align: right;vertical-align:center;color:#000000;background-color: #ffffff","catOptionId":2157,"type":"Upload","buttonClear":true,"title":"Upload DTSX","controlStyleJSON":{"vertical-align":"top","padding-right":"0","padding-left":"0","padding-top":"0","color":"#000000","text-align":"left","font-size":"12px","text-decoration":"none","font-family":"Century Gothic","font-weight":"regular","padding-bottom":"0"},"filesCount":"50","name":"DTSXFILES","defaultValue":"","enabled":true,"controlwidth":"100%","multiValued":false,"tabId":0,"componentObject":"","image":"images/uploader.jpg","allowDisabling":false,"list":"","maskField":false,"buttonUpload":true,"container":false,"html":"","controlHeight":"300","catOptionOrder":0}','Administrator',GETDATE(),'Administrator',GETDATE());
    END
END
GO

IF NOT EXISTS(SELECT * FROM CAT_TEMPLATES WHERE CAT_NAME = 'Generate Microsoft SSIS DTSX')
BEGIN
    DECLARE  @CAT_ID BIGINT, @CAT_DIALOG_ID BIGINT, @CAT_DIALOG_PROFILE_ID BIGINT, @CAT_DIALOG_TAB_ID BIGINT, @CAT_TAB_ID BIGINT,@CAT_TEMPLATE_ORDER BIGINT;
    BEGIN
        SELECT @CAT_TAB_ID = CAT_TAB_ID FROM CAT_TABS WHERE CAT_TAB_NAME = 'com.ads.mm.stb.ssis';
        SELECT @CAT_TEMPLATE_ORDER = ISNULL(MAX(CAT_TEMPLATE_ORDER)+1,1) FROM CAT_TEMPLATES WHERE CAT_TAB_ID = @CAT_TAB_ID;
        INSERT INTO CAT_TEMPLATES(CAT_NAME,CAT_DESC,CAT_IMAGE,CAT_STOCK_IMAGE,CAT_ENABLED,CAT_TAB_ID,CAT_SYSTEM_BASED,CAT_SCRIPT,CAT_ACTION,CREATED_BY,CREATED_DATE_TIME,LAST_MODIFIED_BY,LAST_MODIFIED_DATE_TIME,CAT_TEMPLATE_ORDER,CAT_SCRIPTING_LANGUAGE,CAT_OUTPUT_CONTENT_TYPE,CAT_OUTPUT_FILE_EXTENSION,CAT_ENABLE_MAPPING_DIALOG)
        VALUES('Generate Microsoft SSIS DTSX', 'Generate SSIS DTSX Packages for 2012 & 2014 Versions of Microsoft SQL Server', NULL, 'defaultCatImage.png', '1', @CAT_TAB_ID, '1', NULL, 'NULL', 'AnalytiX Data Services', CURRENT_TIMESTAMP, 'AnalytiX Data Services', CURRENT_TIMESTAMP, @CAT_TEMPLATE_ORDER, 'Javascript', 'XML', '.dtsx', 0);
        SELECT @CAT_ID = CAT_ID FROM CAT_TEMPLATES WHERE CAT_NAME = 'Generate Microsoft SSIS DTSX' AND CAT_TAB_ID = @CAT_TAB_ID;
        INSERT INTO CAT_DIALOG(CAT_DIALOG_NAME,CAT_DIALOG_PROPERTIES,CAT_ID,CREATED_BY,CREATED_DATE_TIME,LAST_MODIFIED_BY,LAST_MODIFIED_DATE_TIME) VALUES('Generate Microsoft SSIS DTSX','{"fheight":385,"fwidth":369,"flabelwidth":"35","fcontrolwidth":"65"}',@CAT_ID,'Administrator',GETDATE(),'Administrator',GETDATE());
        SELECT @CAT_DIALOG_ID = CAT_DIALOG_ID FROM CAT_DIALOG WHERE CAT_DIALOG_NAME = 'Generate Microsoft SSIS DTSX' AND CAT_ID = @CAT_ID;
        INSERT INTO CAT_DIALOG_PROFILE(CAT_DIALOG_ID,CAT_DIALOG_PROFILE_NAME,CREATED_BY,CREATED_DATE_TIME,LAST_MODIFIED_BY,LAST_MODIFIED_DATE_TIME) VALUES (@CAT_DIALOG_ID,'Default','Administrator',GETDATE(),'Administrator',GETDATE());
        SELECT @CAT_DIALOG_PROFILE_ID = CAT_DIALOG_PROFILE_ID FROM CAT_DIALOG_PROFILE WHERE CAT_DIALOG_PROFILE_NAME = 'Default' AND CAT_DIALOG_ID = @CAT_DIALOG_ID;
        UPDATE CAT_DIALOG SET [CAT_DIALOG_DEFAULT_PROFILE_ID] = @CAT_DIALOG_PROFILE_ID WHERE CAT_DIALOG_ID = @CAT_DIALOG_ID;
        INSERT INTO CAT_DIALOG_TAB(CAT_DIALOG_PROFILE_ID,CAT_DIALOG_TAB_NAME,CAT_DIALOG_TAB_PROPERTIES,CREATED_BY,CREATED_DATE_TIME,LAST_MODIFIED_BY,LAST_MODIFIED_DATE_TIME) VALUES(@CAT_DIALOG_PROFILE_ID,'DefaultTab','','Administrator',GETDATE(),'Administrator',GETDATE());
    END
END
GO

IF EXISTS (SELECT * FROM   USER_PREFERENCES WHERE  USER_ID LIKE 'SETTINGS_MM_DASHBOARD_LAYOUT_PATTERN%' AND COLUMN_PREFERENCES NOT LIKE '%"id":"g"%')
 UPDATE USER_PREFERENCES SET COLUMN_PREFERENCES = REPLACE(COLUMN_PREFERENCES, '}]]}', '}],[{"id":"g"}],[{"id": "h"}, {"id": "i"}, {"id": "j"}]]}' )
 WHERE USER_ID LIKE 'SETTINGS_MM_DASHBOARD_LAYOUT_PATTERN%' AND COLUMN_PREFERENCES NOT LIKE '%"id":"g"%'
GO
IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE COLUMN_NAME = 'RDM_REF_TAB_DATA_STEWARD' AND TABLE_NAME = 'RDM_REFERENCE_TABLE' )
    BEGIN
        ALTER TABLE RDM_REFERENCE_TABLE ADD RDM_REF_TAB_DATA_STEWARD VARCHAR(100);
    END
GO

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE COLUMN_NAME = 'ISLDAP_USER' AND TABLE_NAME = 'USERS' )
    BEGIN
     EXECUTE('ALTER TABLE USERS ADD ISLDAP_USER VARCHAR(1)');
    END
GO

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE COLUMN_NAME = 'OBJECT_DOC_LINK' AND TABLE_NAME = 'SYSTEM_DOCUMENTS' )
    BEGIN
        ALTER TABLE SYSTEM_DOCUMENTS ADD OBJECT_DOC_LINK VARCHAR(2083) NULL;
        ALTER TABLE MAPPING_DOCUMENTS ADD OBJECT_DOC_LINK VARCHAR(2083) NULL;
        ALTER TABLE PROJECT_DOCUMENTS ADD OBJECT_DOC_LINK VARCHAR(2083) NULL;
        ALTER TABLE TCM_TESTCASE_DOCS ADD OBJECT_DOC_LINK VARCHAR(2083) NULL;
    END
GO
IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE COLUMN_NAME = 'EXTERNAL_TESTCASE_ID' AND TABLE_NAME = 'TCM_TESTCASE' )
    BEGIN
    ALTER TABLE TCM_TESTCASE ADD EXTERNAL_TESTCASE_ID int;
    END
GO
IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE COLUMN_NAME = 'EXTERNAL_STEP_ID' AND TABLE_NAME = 'TCM_TESTCASE_STEP' )
    BEGIN
    ALTER TABLE TCM_TESTCASE_STEP ADD EXTERNAL_STEP_ID int;
    END
GO
IF EXISTS (SELECT * FROM ADS_MM_VERSION WHERE VALUE <= '6.1')
IF EXISTS (SELECT *  FROM   SYSOBJECTS WHERE  ID = OBJECT_ID(N'TCM_TESTCASE_TYPE') AND TYPE = 'U')
BEGIN
INSERT INTO TCM_TESTCASE_TYPE(TESTCASE_TYPE_NAME)
        SELECT 'MANUAL'
        UNION ALL
        SELECT 'ALT-SCENARIO'
        UNION ALL
        SELECT 'LR-SCENARIO'
        UNION ALL
        SELECT 'PERFORMANCE-TEST'
        UNION ALL
        SELECT 'QAINSPECT-TEST'
        UNION ALL
        SELECT 'SYSTEM-TEST'
        UNION ALL
        SELECT 'VAPI-XP-TEST'
    END
GO

IF NOT EXISTS (SELECT * FROM SYSOBJECTS WHERE  ID = OBJECT_ID(N'OBJECT_USER') AND TYPE = 'U')
 BEGIN
      EXECUTE ('CREATE TABLE OBJECT_USER ( OBJECT_ID BIGINT NOT NULL,
      OBJECT_TYPE_ID BIGINT NOT NULL,
      USER_ID VARCHAR(20) NOT NULL,
      CREATED_BY VARCHAR(100) NOT NULL,
      CREATED_DATE datetime NOT NULL,
      LAST_MODIFIED_BY VARCHAR(100) NULL,
      LAST_MODIFIED_DATE datetime NULL,
      CONSTRAINT FK_OBJECT_USER_OID FOREIGN KEY(OBJECT_TYPE_ID) REFERENCES ADS_KEY_VALUE_OBJECTS(OBJECT_TYPE_ID),
      CONSTRAINT FK_OBJECT_USER_UID FOREIGN KEY(USER_ID) REFERENCES USERS(USER_ID),
      CONSTRAINT UK_OBJ_USER_OID_OTID_UID UNIQUE (OBJECT_ID,OBJECT_TYPE_ID,USER_ID))')
  END
  GO
  IF NOT EXISTS (SELECT * FROM SYSOBJECTS WHERE ID = OBJECT_ID(N'OBJECT_DOCUMENT') AND TYPE = 'U')
    BEGIN
      EXECUTE ('CREATE TABLE OBJECT_DOCUMENT ( OBJECT_DOC_ID BIGINT IDENTITY(1,1) NOT NULL,
      OBJECT_ID VARCHAR(200) NOT NULL,
      OBJECT_TYPE_ID BIGINT  NOT NULL,
      OBJECT_DOC_NAME VARCHAR(20) NOT NULL,
      OBJECT_DOC_TYPE VARCHAR(20) NULL,
      OBJECT_DOC_LINK VARCHAR(2083) NULL,
      OBJ_DOC_INTEDED_USE_DESC VARCHAR(4000) NULL,
      OBJECT_DOC_REFERENCE VARCHAR(50)  NULL,
      OBJECT_DOC_REF_NUMBER VARCHAR(20) NULL,
      OBJECT_DOC_OWNER VARCHAR(50) NULL,
      DOCUMENT_OBJECT VARCHAR(4000) NULL,
      APPROVAL_REQD_FLAG  VARCHAR(1) NULL,
      APPROVED_BY VARCHAR(20) NULL,
      APROVAL_DATE DATETIME NULL,
      DOCUMENT_STATUS VARCHAR(20) NOT NULL DEFAULT ''InProgress'',
      CREATED_BY VARCHAR(20) NOT NULL,
      CREATED_DATE DATETIME NOT NULL,
      LAST_MODIFIED_BY VARCHAR(20) NULL,
      LAST_MODIFIED_DATE DATETIME NULL,
      CONSTRAINT PK_OBJ_DOC_ODOC_ID PRIMARY KEY(OBJECT_DOC_ID),
      CONSTRAINT FK_OBJ_DOC_OTID FOREIGN KEY(OBJECT_TYPE_ID) REFERENCES ADS_KEY_VALUE_OBJECTS(OBJECT_TYPE_ID),
      CONSTRAINT UK_OBJ_DOC_OTDOC_NAME UNIQUE (OBJECT_DOC_NAME,OBJECT_ID,OBJECT_TYPE_ID))')
  END
GO
IF NOT EXISTS (SELECT MODULE_KEY FROM ADS_MODULES WHERE MODULE_KEY = 'com.ads.mm.permission.tm')
    BEGIN
        INSERT INTO ADS_MODULES(MODULE_ID, MODULE_NAME, MODULE_KEY, MODULE_ORDER, MODULE_FORWARD)
        SELECT 8, 'Test Manager', 'com.ads.mm.permission.tm', 8, 'Test Manager'
    END
GO
IF NOT EXISTS (SELECT * FROM   SYSOBJECTS WHERE  ID = OBJECT_ID(N'AMM_SDLR_CALENDARS') AND TYPE = 'U')
    BEGIN
        EXECUTE ('CREATE TABLE [AMM_SDLR_CALENDARS] (
		  [SCHED_NAME] [VARCHAR] (120)  NOT NULL ,
		  [CALENDAR_NAME] [VARCHAR] (200)  NOT NULL ,
		  [CALENDAR] [IMAGE] NOT NULL)ON [PRIMARY] ')
    END
GO
IF NOT EXISTS (SELECT * FROM   SYSOBJECTS WHERE  ID = OBJECT_ID(N'AMM_SDLR_CRON_TRIGGERS') AND TYPE = 'U')
    BEGIN
         EXECUTE ('CREATE TABLE [AMM_SDLR_CRON_TRIGGERS] (
                [SCHED_NAME] [VARCHAR] (120)  NOT NULL ,
                [TRIGGER_NAME] [VARCHAR] (200)  NOT NULL ,
                [TRIGGER_GROUP] [VARCHAR] (200)  NOT NULL ,
                [CRON_EXPRESSION] [VARCHAR] (120)  NOT NULL ,
                [TIME_ZONE_ID] [VARCHAR] (80)) ON [PRIMARY] ')
    END
GO
IF NOT EXISTS (SELECT * FROM   SYSOBJECTS WHERE  ID = OBJECT_ID(N'AMM_SDLR_FIRED_TRIGGERS') AND TYPE = 'U')
    BEGIN
        EXECUTE ('CREATE TABLE [AMM_SDLR_FIRED_TRIGGERS] (
                [SCHED_NAME] [VARCHAR] (120)  NOT NULL ,
                [ENTRY_ID] [VARCHAR] (95)  NOT NULL ,
                [TRIGGER_NAME] [VARCHAR] (200)  NOT NULL ,
                [TRIGGER_GROUP] [VARCHAR] (200)  NOT NULL ,
                [INSTANCE_NAME] [VARCHAR] (200)  NOT NULL ,
                [FIRED_TIME] [BIGINT] NOT NULL ,
                [SCHED_TIME] [BIGINT] NOT NULL ,
                [PRIORITY] [INTEGER] NOT NULL ,
                [STATE] [VARCHAR] (16)  NOT NULL,
                [JOB_NAME] [VARCHAR] (200)  NULL ,
                [JOB_GROUP] [VARCHAR] (200)  NULL ,
                [IS_NONCONCURRENT] [VARCHAR] (1)  NULL ,
                [REQUESTS_RECOVERY] [VARCHAR] (1)  NULL) ON [PRIMARY]')
    END
GO
IF NOT EXISTS (SELECT * FROM   SYSOBJECTS WHERE  ID = OBJECT_ID(N'AMM_SDLR_PAUSED_TRIGGER_GRPS') AND TYPE = 'U')
    BEGIN
        EXECUTE ('CREATE TABLE [AMM_SDLR_PAUSED_TRIGGER_GRPS] (
                [SCHED_NAME] [VARCHAR] (120)  NOT NULL ,
                [TRIGGER_GROUP] [VARCHAR] (200)  NOT NULL) ON [PRIMARY]')
     END
GO
IF NOT EXISTS (SELECT * FROM   SYSOBJECTS WHERE  ID = OBJECT_ID(N'AMM_SDLR_SCHEDULER_STATE') AND TYPE = 'U')
    BEGIN
         EXECUTE ('CREATE TABLE [AMM_SDLR_SCHEDULER_STATE] (
                [SCHED_NAME] [VARCHAR] (120)  NOT NULL ,
                [INSTANCE_NAME] [VARCHAR] (200)  NOT NULL ,
                [LAST_CHECKIN_TIME] [BIGINT] NOT NULL ,
                [CHECKIN_INTERVAL] [BIGINT] NOT NULL) ON [PRIMARY]')
    END
GO
IF NOT EXISTS (SELECT * FROM   SYSOBJECTS WHERE  ID = OBJECT_ID(N'AMM_SDLR_LOCKS') AND TYPE = 'U')
    BEGIN
         EXECUTE ('CREATE TABLE [AMM_SDLR_LOCKS] (
                [SCHED_NAME] [VARCHAR] (120)  NOT NULL ,
                [LOCK_NAME] [VARCHAR] (40)  NOT NULL ) ON [PRIMARY]')
    END
GO
IF NOT EXISTS (SELECT * FROM   SYSOBJECTS WHERE  ID = OBJECT_ID(N'AMM_SDLR_JOB_DETAILS') AND TYPE = 'U')
    BEGIN
        EXECUTE ('CREATE TABLE [AMM_SDLR_JOB_DETAILS] (
                [OBJECT_ID] [BIGINT]  NULL ,
                [SCHED_NAME] [VARCHAR] (120)  NOT NULL ,
                [JOB_NAME] [VARCHAR] (200)  NOT NULL ,
                [JOB_GROUP] [VARCHAR] (200)  NOT NULL ,
                [DESCRIPTION] [VARCHAR] (250) NULL ,
                [JOB_CLASS_NAME] [VARCHAR] (250)  NOT NULL ,
                [IS_DURABLE] [VARCHAR] (1)  NOT NULL ,
                [IS_NONCONCURRENT] [VARCHAR] (1)  NOT NULL ,
                [IS_UPDATE_DATA] [VARCHAR] (1)  NOT NULL ,
                [REQUESTS_RECOVERY] [VARCHAR] (1)  NOT NULL ,
                [JOB_DATA] [IMAGE] NULL) ON [PRIMARY]')
  END
GO
IF NOT EXISTS (SELECT * FROM   SYSOBJECTS WHERE  ID = OBJECT_ID(N'AMM_SDLR_SIMPLE_TRIGGERS') AND TYPE = 'U')
    BEGIN
        EXECUTE ('CREATE TABLE [AMM_SDLR_SIMPLE_TRIGGERS] (
                [SCHED_NAME] [VARCHAR] (120)  NOT NULL ,
                [TRIGGER_NAME] [VARCHAR] (200)  NOT NULL ,
                [TRIGGER_GROUP] [VARCHAR] (200)  NOT NULL ,
                [REPEAT_COUNT] [BIGINT] NOT NULL ,
                [REPEAT_INTERVAL] [BIGINT] NOT NULL ,
                [TIMES_TRIGGERED] [BIGINT] NOT NULL) ON [PRIMARY]')
    END
GO
IF NOT EXISTS (SELECT * FROM   SYSOBJECTS WHERE  ID = OBJECT_ID(N'AMM_SDLR_SIMPROP_TRIGGERS') AND TYPE = 'U')
    BEGIN
        EXECUTE ('CREATE TABLE [AMM_SDLR_SIMPROP_TRIGGERS] (
                    [SCHED_NAME] [VARCHAR] (120)  NOT NULL ,
                    [TRIGGER_NAME] [VARCHAR] (200)  NOT NULL ,
                    [TRIGGER_GROUP] [VARCHAR] (200)  NOT NULL ,
                    [STR_PROP_1] [VARCHAR] (512) NULL,
                    [STR_PROP_2] [VARCHAR] (512) NULL,
                    [STR_PROP_3] [VARCHAR] (512) NULL,
                    [INT_PROP_1] [INT] NULL,
                    [INT_PROP_2] [INT] NULL,
                    [LONG_PROP_1] [BIGINT] NULL,
                    [LONG_PROP_2] [BIGINT] NULL,
                    [DEC_PROP_1] [NUMERIC] (13,4) NULL,
                    [DEC_PROP_2] [NUMERIC] (13,4) NULL,
                    [BOOL_PROP_1] [VARCHAR] (1) NULL,
                    [BOOL_PROP_2] [VARCHAR] (1) NULL) ON [PRIMARY]')
    END
GO
IF NOT EXISTS (SELECT * FROM   SYSOBJECTS WHERE  ID = OBJECT_ID(N'AMM_SDLR_BLOB_TRIGGERS') AND TYPE = 'U')
    BEGIN
        EXECUTE ('CREATE TABLE [AMM_SDLR_BLOB_TRIGGERS] (
                    [SCHED_NAME] [VARCHAR] (120)  NOT NULL ,
                    [TRIGGER_NAME] [VARCHAR] (200)  NOT NULL ,
                    [TRIGGER_GROUP] [VARCHAR] (200)  NOT NULL ,
                    [BLOB_DATA] [IMAGE] NULL) ON [PRIMARY]')
    END
GO
IF NOT EXISTS (SELECT * FROM   SYSOBJECTS WHERE  ID = OBJECT_ID(N'AMM_SDLR_TRIGGERS') AND TYPE = 'U')
    BEGIN
        EXECUTE ('CREATE TABLE [AMM_SDLR_TRIGGERS] (
                    [SCHED_NAME] [VARCHAR] (120)  NOT NULL ,
                    [TRIGGER_NAME] [VARCHAR] (200)  NOT NULL ,
                    [TRIGGER_GROUP] [VARCHAR] (200)  NOT NULL ,
                    [JOB_NAME] [VARCHAR] (200)  NOT NULL ,
                    [JOB_GROUP] [VARCHAR] (200)  NOT NULL ,
                    [DESCRIPTION] [VARCHAR] (250) NULL ,
                    [NEXT_FIRE_TIME] [BIGINT] NULL ,
                    [PREV_FIRE_TIME] [BIGINT] NULL ,
                    [PRIORITY] [INTEGER] NULL ,
                    [TRIGGER_STATE] [VARCHAR] (16)  NOT NULL ,
                    [TRIGGER_TYPE] [VARCHAR] (8)  NOT NULL ,
                    [START_TIME] [BIGINT] NOT NULL ,
                    [END_TIME] [BIGINT] NULL ,
                    [CALENDAR_NAME] [VARCHAR] (200)  NULL ,
                    [MISFIRE_INSTR] [SMALLINT] NULL ,
                    [JOB_DATA] [IMAGE] NULL) ON [PRIMARY]')
    END
GO
IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS WHERE CONSTRAINT_NAME='PK_AMM_SDLR_CALENDARS' AND TABLE_NAME='AMM_SDLR_CALENDARS')
    EXECUTE ('ALTER TABLE [AMM_SDLR_CALENDARS] WITH NOCHECK ADD   CONSTRAINT [PK_AMM_SDLR_CALENDARS] PRIMARY KEY  CLUSTERED   (     [SCHED_NAME],     [CALENDAR_NAME]   )  ON [PRIMARY]')
GO
IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS WHERE CONSTRAINT_NAME='PK_AMM_SDLR_CRON_TRIGGERS' AND TABLE_NAME='AMM_SDLR_CRON_TRIGGERS')
    EXECUTE ('ALTER TABLE [AMM_SDLR_CRON_TRIGGERS] WITH NOCHECK ADD   CONSTRAINT [PK_AMM_SDLR_CRON_TRIGGERS] PRIMARY KEY  CLUSTERED   (     [SCHED_NAME],     [TRIGGER_NAME],     [TRIGGER_GROUP]   )  ON [PRIMARY]')
GO
IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS WHERE CONSTRAINT_NAME='PK_AMM_SDLR_FIRED_TRIGGERS' AND TABLE_NAME='AMM_SDLR_FIRED_TRIGGERS')
    EXECUTE ('ALTER TABLE [AMM_SDLR_FIRED_TRIGGERS] WITH NOCHECK ADD   CONSTRAINT [PK_AMM_SDLR_FIRED_TRIGGERS] PRIMARY KEY  CLUSTERED   (     [SCHED_NAME],     [ENTRY_ID]   )  ON [PRIMARY]')
GO
IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS WHERE CONSTRAINT_NAME='PK_AMM_SDLR_PAUSED_TRIGGER_GRPS' AND TABLE_NAME='AMM_SDLR_PAUSED_TRIGGER_GRPS')
    EXECUTE ('ALTER TABLE [AMM_SDLR_PAUSED_TRIGGER_GRPS] WITH NOCHECK ADD   CONSTRAINT [PK_AMM_SDLR_PAUSED_TRIGGER_GRPS] PRIMARY KEY  CLUSTERED   (     [SCHED_NAME],     [TRIGGER_GROUP]   )  ON [PRIMARY]')
GO
IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS WHERE CONSTRAINT_NAME='PK_AMM_SDLR_SCHEDULER_STATE' AND TABLE_NAME='AMM_SDLR_SCHEDULER_STATE')
    EXECUTE ('ALTER TABLE [AMM_SDLR_SCHEDULER_STATE] WITH NOCHECK ADD   CONSTRAINT [PK_AMM_SDLR_SCHEDULER_STATE] PRIMARY KEY  CLUSTERED   (     [SCHED_NAME],     [INSTANCE_NAME]   )  ON [PRIMARY]')
GO
IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS WHERE CONSTRAINT_NAME='PK_AMM_SDLR_LOCKS' AND TABLE_NAME='AMM_SDLR_LOCKS')
    EXECUTE ('ALTER TABLE [AMM_SDLR_LOCKS] WITH NOCHECK ADD   CONSTRAINT [PK_AMM_SDLR_LOCKS] PRIMARY KEY  CLUSTERED   (     [SCHED_NAME],     [LOCK_NAME]   )  ON [PRIMARY]')
GO
IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS WHERE CONSTRAINT_NAME='PK_AMM_SDLR_JOB_DETAILS' AND TABLE_NAME='AMM_SDLR_JOB_DETAILS')
    EXECUTE ('ALTER TABLE [AMM_SDLR_JOB_DETAILS] WITH NOCHECK ADD   CONSTRAINT [PK_AMM_SDLR_JOB_DETAILS] PRIMARY KEY  CLUSTERED   (     [SCHED_NAME],     [JOB_NAME],     [JOB_GROUP]   )  ON [PRIMARY]')
GO
IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS WHERE CONSTRAINT_NAME='PK_AMM_SDLR_SIMPLE_TRIGGERS' AND TABLE_NAME='AMM_SDLR_SIMPLE_TRIGGERS')
    EXECUTE ('ALTER TABLE [AMM_SDLR_SIMPLE_TRIGGERS] WITH NOCHECK ADD   CONSTRAINT [PK_AMM_SDLR_SIMPLE_TRIGGERS] PRIMARY KEY  CLUSTERED   (     [SCHED_NAME],     [TRIGGER_NAME],     [TRIGGER_GROUP]   )  ON [PRIMARY]')
GO
IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS WHERE CONSTRAINT_NAME='PK_AMM_SDLR_SIMPROP_TRIGGERS' AND TABLE_NAME='AMM_SDLR_SIMPROP_TRIGGERS')
    EXECUTE ('ALTER TABLE [AMM_SDLR_SIMPROP_TRIGGERS] WITH NOCHECK ADD   CONSTRAINT [PK_AMM_SDLR_SIMPROP_TRIGGERS] PRIMARY KEY  CLUSTERED   (     [SCHED_NAME],     [TRIGGER_NAME],     [TRIGGER_GROUP]   )  ON [PRIMARY]')
GO
IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS WHERE CONSTRAINT_NAME='PK_AMM_SDLR_TRIGGERS' AND TABLE_NAME='AMM_SDLR_TRIGGERS')
    EXECUTE ('ALTER TABLE [AMM_SDLR_TRIGGERS] WITH NOCHECK ADD   CONSTRAINT [PK_AMM_SDLR_TRIGGERS] PRIMARY KEY  CLUSTERED   (     [SCHED_NAME],     [TRIGGER_NAME],     [TRIGGER_GROUP]   )  ON [PRIMARY]')
GO
IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS WHERE CONSTRAINT_NAME='FK_AMM_SDLR_CRON_TRIGGERS_AMM_SDLR_TRIGGERS' AND TABLE_NAME='AMM_SDLR_CRON_TRIGGERS')
    EXECUTE ('ALTER TABLE [AMM_SDLR_CRON_TRIGGERS] ADD   CONSTRAINT [FK_AMM_SDLR_CRON_TRIGGERS_AMM_SDLR_TRIGGERS] FOREIGN KEY   (     [SCHED_NAME],     [TRIGGER_NAME],     [TRIGGER_GROUP]   ) REFERENCES [AMM_SDLR_TRIGGERS] (     [SCHED_NAME],     [TRIGGER_NAME],     [TRIGGER_GROUP]   ) ON DELETE CASCADE')
GO
IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS WHERE CONSTRAINT_NAME='FK_AMM_SDLR_SIMPLE_TRIGGERS_AMM_SDLR_TRIGGERS' AND TABLE_NAME='AMM_SDLR_SIMPLE_TRIGGERS')
    EXECUTE ('ALTER TABLE [AMM_SDLR_SIMPLE_TRIGGERS] ADD   CONSTRAINT [FK_AMM_SDLR_SIMPLE_TRIGGERS_AMM_SDLR_TRIGGERS] FOREIGN KEY   (     [SCHED_NAME],     [TRIGGER_NAME],     [TRIGGER_GROUP]   ) REFERENCES [AMM_SDLR_TRIGGERS] (     [SCHED_NAME],     [TRIGGER_NAME],     [TRIGGER_GROUP]   ) ON DELETE CASCADE')
GO
IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS WHERE CONSTRAINT_NAME='FK_AMM_SDLR_SIMPROP_TRIGGERS_AMM_SDLR_TRIGGERS' AND TABLE_NAME='AMM_SDLR_SIMPROP_TRIGGERS')
    EXECUTE ('ALTER TABLE [AMM_SDLR_SIMPROP_TRIGGERS] ADD   CONSTRAINT [FK_AMM_SDLR_SIMPROP_TRIGGERS_AMM_SDLR_TRIGGERS] FOREIGN KEY   (     [SCHED_NAME],     [TRIGGER_NAME],     [TRIGGER_GROUP]   ) REFERENCES [AMM_SDLR_TRIGGERS] (     [SCHED_NAME],     [TRIGGER_NAME],     [TRIGGER_GROUP]   ) ON DELETE CASCADE')
GO
IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS WHERE CONSTRAINT_NAME='FK_AMM_SDLR_TRIGGERS_AMM_SDLR_JOB_DETAILS' AND TABLE_NAME='AMM_SDLR_TRIGGERS')
    EXECUTE ('ALTER TABLE [AMM_SDLR_TRIGGERS] ADD   CONSTRAINT [FK_AMM_SDLR_TRIGGERS_AMM_SDLR_JOB_DETAILS] FOREIGN KEY   (     [SCHED_NAME],     [JOB_NAME],     [JOB_GROUP]   ) REFERENCES [AMM_SDLR_JOB_DETAILS] (     [SCHED_NAME],     [JOB_NAME],     [JOB_GROUP]   )')
GO
IF NOT EXISTS(SELECT * FROM CAT_TABS WHERE CAT_TAB_NAME = 'com.ads.mm.stb.testauto')
    INSERT INTO CAT_TABS ( CAT_TAB_NAME, CAT_TAB_DESCRIPTION ,  DISPLAY_ORDER , TAB_VISIBILITY) VALUES ( 'com.ads.mm.stb.testauto', '' , '10' , '1')
GO
IF NOT EXISTS(SELECT * FROM CAT_TEMPLATES WHERE CAT_NAME = 'Automated Test Case Generation')
BEGIN
DECLARE  @CAT_ID BIGINT, @CAT_DIALOG_ID BIGINT, @CAT_DIALOG_PROFILE_ID BIGINT, @CAT_DIALOG_TAB_ID BIGINT, @CAT_TAB_ID BIGINT,@CAT_TEMPLATE_ORDER BIGINT;
BEGIN
    SELECT @CAT_TAB_ID = CAT_TAB_ID FROM CAT_TABS WHERE CAT_TAB_NAME = 'com.ads.mm.stb.testauto';
    SELECT @CAT_TEMPLATE_ORDER = ISNULL(MAX(CAT_TEMPLATE_ORDER)+1,1) FROM CAT_TEMPLATES WHERE CAT_TAB_ID = @CAT_TAB_ID;
    INSERT INTO CAT_TEMPLATES(CAT_NAME,CAT_DESC,CAT_IMAGE,CAT_STOCK_IMAGE,CAT_ENABLED,CAT_TAB_ID,CAT_SYSTEM_BASED,CAT_SCRIPT,CAT_ACTION,CREATED_BY,CREATED_DATE_TIME,LAST_MODIFIED_BY,LAST_MODIFIED_DATE_TIME,CAT_TEMPLATE_ORDER,CAT_SCRIPTING_LANGUAGE,CAT_OUTPUT_CONTENT_TYPE,CAT_OUTPUT_FILE_EXTENSION,CAT_ENABLE_MAPPING_DIALOG)
    VALUES('Automated Test Case Generation', '', NULL, 'defaultCatImage.png', '1', @CAT_TAB_ID, '1', NULL, 'NULL', 'AnalytiX Data Services', CURRENT_TIMESTAMP, 'AnalytiX Data Services', CURRENT_TIMESTAMP, @CAT_TEMPLATE_ORDER, 'Javascript', 'CSV', '.csv', 0);
    SELECT @CAT_ID = CAT_ID FROM CAT_TEMPLATES WHERE CAT_NAME = 'Automated Test Case Generation' AND CAT_TAB_ID = @CAT_TAB_ID;
    INSERT INTO CAT_DIALOG(CAT_DIALOG_NAME,CAT_DIALOG_PROPERTIES,CAT_ID,CREATED_BY,CREATED_DATE_TIME,LAST_MODIFIED_BY,LAST_MODIFIED_DATE_TIME) VALUES('Automated Test Case Generation','',@CAT_ID,'Administrator',GETDATE(),'Administrator',GETDATE());
    SELECT @CAT_DIALOG_ID = CAT_DIALOG_ID FROM CAT_DIALOG WHERE CAT_DIALOG_NAME = 'Automated Test Case Generation' AND CAT_ID = @CAT_ID;
    INSERT INTO CAT_DIALOG_PROFILE(CAT_DIALOG_ID,CAT_DIALOG_PROFILE_NAME,CREATED_BY,CREATED_DATE_TIME,LAST_MODIFIED_BY,LAST_MODIFIED_DATE_TIME) VALUES (@CAT_DIALOG_ID,'Default','Administrator',GETDATE(),'Administrator',GETDATE());
    SELECT @CAT_DIALOG_PROFILE_ID = CAT_DIALOG_PROFILE_ID FROM CAT_DIALOG_PROFILE WHERE CAT_DIALOG_PROFILE_NAME = 'Default' AND CAT_DIALOG_ID = @CAT_DIALOG_ID;
    UPDATE CAT_DIALOG SET [CAT_DIALOG_DEFAULT_PROFILE_ID] = @CAT_DIALOG_PROFILE_ID WHERE CAT_DIALOG_ID = @CAT_DIALOG_ID;
    INSERT INTO CAT_DIALOG_TAB(CAT_DIALOG_PROFILE_ID,CAT_DIALOG_TAB_NAME,CAT_DIALOG_TAB_PROPERTIES,CREATED_BY,CREATED_DATE_TIME,LAST_MODIFIED_BY,LAST_MODIFIED_DATE_TIME) VALUES(@CAT_DIALOG_PROFILE_ID,'DefaultTab','','Administrator',GETDATE(),'Administrator',GETDATE());
END
END
GO
IF COL_LENGTH('SYS_CON_ENVIRONMENTS', 'USER_NAME') < 250
BEGIN
    ALTER TABLE [SYS_CON_ENVIRONMENTS] ALTER COLUMN [user_name] varchar(250);
    ALTER TABLE [SYS_CON_ENVIRONMENTS] ALTER COLUMN [password] varchar(250);
END
GO
IF EXISTS (SELECT * FROM ADS_MM_VERSION WHERE VALUE <= '6.1')
IF EXISTS (SELECT *  FROM   SYSOBJECTS WHERE  ID = OBJECT_ID(N'TCM_TESTCASE_STATUS') AND TYPE = 'U')
BEGIN
    EXECUTE('UPDATE TCM_TESTCASE_STATUS SET STATUS_NAME = ''Passed'' WHERE STATUS_NAME = ''Pass''');
    EXECUTE('UPDATE TCM_TESTCASE_STATUS SET STATUS_NAME = ''Failed'' WHERE STATUS_NAME = ''Fail''');
    EXECUTE('INSERT INTO TCM_TESTCASE_STATUS VALUES(''No Run'')');
END
GO
IF EXISTS (SELECT * FROM ADS_MM_VERSION WHERE VALUE <= '6.1')
IF  EXISTS (SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE COLUMN_NAME = 'ISLDAP_USER' AND TABLE_NAME = 'USERS' )
    BEGIN
     EXECUTE('UPDATE USERS SET ISLDAP_USER = ''N''');
    END
GO
IF EXISTS(SELECT * FROM APP_PREFERENCES WHERE PREFERENCE_NAME = 'USER_CREATION_MESSAGE' and PREFERENCE_VALUE = 'Hello <B>@userFullName@</B>,<BR><BR>User <B>@userid@</B> has been successfully&nbsp;added to mapping manager.This user has been granted with role(s) <B>@roles@.</B><BR><BR>The default role for this user is <B>@defaultrole@.</B><BR><BR><I>Note: This is an auto generated email notification and this mailbox is not monitored.<BR>Please do not reply to this email.</I><BR><BR>Regards,<BR><B>Mapping Manager System Administrator</B>')
    UPDATE APP_PREFERENCES SET PREFERENCE_VALUE = 'Hello <B>@UserFullName@</B>,<BR><BR>User <B>@UserId@</B> has been successfully&nbsp;added to mapping manager with password <B>@Password@<B>.This user has been granted with role(s) <B>@Roles@.</B><BR><BR>The default role for this user is <B>@DefaultRole@.</B><BR><BR><I>Note: This is an auto generated email notification and this mailbox is not monitored.<BR>Please do not reply to this email.</I><BR><BR>Regards,<BR><B>Mapping Manager System Administrator</B>' WHERE PREFERENCE_NAME='USER_CREATION_MESSAGE'
GO
IF (SELECT COUNT(*) FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_CATALOG = DB_NAME() AND TABLE_SCHEMA = SCHEMA_NAME() AND TABLE_NAME = 'SYSTEM_DOCUMENTS' AND COLUMN_NAME = 'PROJECT_DOC_OBJECT' AND IS_NULLABLE='YES') = 0
BEGIN
    ALTER TABLE SYSTEM_DOCUMENTS ALTER COLUMN PROJECT_DOC_OBJECT VARCHAR(MAX) NULL;
    ALTER TABLE MAPPING_DOCUMENTS ALTER COLUMN MAP_DOC_OBJECT VARCHAR(MAX) NULL;
    ALTER TABLE PROJECT_DOCUMENTS ALTER COLUMN PROJECT_DOC_OBJECT VARCHAR(MAX) NULL;
    ALTER TABLE TCM_TESTCASE_DOCS ALTER COLUMN TESTCASE_DOC_OBJECT VARCHAR(MAX) NULL;
END
GO
IF NOT EXISTS (SELECT * FROM APP_PREFERENCES WHERE  PREFERENCE_NAME = 'ADS_MM_VERSION_FIRST_LOGIN')
BEGIN
    EXECUTE('INSERT INTO APP_PREFERENCES(PREFERENCE_NAME,PREFERENCE_VALUE) VALUES(''ADS_MM_VERSION_FIRST_LOGIN'', ''true'')');
END
GO
IF EXISTS (SELECT * FROM ADS_MODULES WHERE  MODULE_FORWARD = 'Test Manager')
BEGIN
    EXECUTE ('UPDATE ADS_MODULES SET MODULE_FORWARD = ''testmanager'' where MODULE_KEY =''com.ads.mm.permission.tm''');
END
GO
IF EXISTS (SELECT * FROM ADS_MM_VERSION WHERE VALUE <= '6.2')
BEGIN
    BEGIN TRY
    BEGIN TRANSACTION MOVE_PERM_LANG_TO_PROPS;
        IF EXISTS (SELECT * FROM LANGUAGE_PREFERENCES WHERE  KEY_ID = 'com.ads.rm.buttons,tooltip')
        BEGIN
            EXECUTE ('UPDATE LANGUAGE_PREFERENCES SET KEY_DESCRIPTION = '' System Document name will not allow special characters  except hyphen(-) and underscore(_)'', ENGLISH = '' System Document name will not allow special characters  except hyphen(-) and underscore(_)'' where key_id = ''com.ads.mm.stb.alert.sysdocnospeclchars'' AND ENGLISH = '' System Document name will not allow special characters except Except @ $ & / _ and -.''');
            EXECUTE ('UPDATE LANGUAGE_PREFERENCES SET KEY_DESCRIPTION = ''Please enter Plugin URL'', ENGLISH = ''Please enter Plugin URL'' where key_id = ''com.ads.mm.stb.pluginentrurl'' AND ENGLISH = ''Please Upload Plugin URL''');
            EXECUTE ('UPDATE LANGUAGE_PREFERENCES SET KEY_DESCRIPTION = ''Please select image file (gif,png,jpeg,tiff,jpg)'', ENGLISH = ''Please select image file (gif,png,jpeg,tiff,jpg)'' where key_id = ''com.ads.mm.stb.pluginuplcrtricon'' AND ENGLISH = ''Please select image file (gif,png,jpeg,tif,jpg''');
            EXECUTE ('UPDATE LANGUAGE_PREFERENCES SET KEY_DESCRIPTION = ''Please enter System Name'', ENGLISH = ''Please enter System Name'' where key_id = ''com.ads.mm.stb.alert.sysname'' AND ENGLISH = ''Please Enter System Name''');
            EXECUTE ('UPDATE LANGUAGE_PREFERENCES SET KEY_ID = ''com.ads.rm.buttons.tooltip'' where key_id = ''com.ads.rm.buttons,tooltip''');
            EXECUTE ('UPDATE LANGUAGE_PREFERENCES SET KEY_ID = ''com.ads.rm.buttons.tooltip.delete'' where key_id = ''com.ads.rm.buttons,tooltip.delete''');
            EXECUTE ('UPDATE LANGUAGE_PREFERENCES SET KEY_DESCRIPTION = ''Map/Table/Project'', ENGLISH = ''Map/Table/Project'' where key_id = ''com.ads.mm.th.tcm.maptcmaptarpro'' AND ENGLISH = ''Map/Target Table/Project''');
            EXECUTE ('UPDATE LANGUAGE_PREFERENCES SET KEY_DESCRIPTION = ''Dual Combined View'', ENGLISH = ''Dual Combined View'' where key_id = ''com.ads.mm.permission.mm.metadata.lineagereport.dual'' AND ENGLISH = ''Dual''');
            EXECUTE ('UPDATE LANGUAGE_PREFERENCES SET KEY_DESCRIPTION = ''Table & Column Class'', ENGLISH = ''Table & Column Class'' where key_id = ''com.ads.mm.settgs.sm.systemmanager'' AND ENGLISH = ''System Manager''');
            EXECUTE ('UPDATE LANGUAGE_PREFERENCES SET KEY_DESCRIPTION = ''name already exists'', ENGLISH = ''name already exists'' where key_id = ''com.ads.mm.settgs.sm.alert.tablecolumnclass.nameexist'' AND ENGLISH = ''name already exist!''');
            EXECUTE ('UPDATE LANGUAGE_PREFERENCES SET KEY_DESCRIPTION = ''Last Modified Date Time'', ENGLISH = ''Last Modified Date Time'' where key_id = ''com.ads.mm.settgs.sm.th.sdiclassgrid.modifieddaatetime'' AND ENGLISH = ''Last Modified Data Time''');
            EXECUTE ('DELETE LANGUAGE_PREFERENCES WHERE LANG_PREF_ID IN (52,1070,1077,782,506,601,461,547,465,575,862,1526,1561,1528,1576,3741,2613,2612,161,144,1384,1120,545,1244,1033,1833,1840,2000,2623)');
        END

        IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'LANGUAGE_PREFERENCES' AND COLUMN_NAME = 'LANG_PREF_ID')
        BEGIN
            EXECUTE('ALTER TABLE LANGUAGE_PREFERENCES ALTER COLUMN PARENT_ID VARCHAR(MAX) NOT NULL');
            EXECUTE('UPDATE L_PREF SET L_PREF.PARENT_ID = LANG_PREF.KEY_ID FROM  LANGUAGE_PREFERENCES L_PREF JOIN LANGUAGE_PREFERENCES LANG_PREF ON LANG_PREF.LANG_PREF_ID = L_PREF.PARENT_ID');
            EXECUTE('ALTER TABLE LANGUAGE_PREFERENCES DROP CONSTRAINT PK_LANGUAGE_PREFERENCES');
            EXECUTE('ALTER TABLE LANGUAGE_PREFERENCES DROP COLUMN LANG_PREF_ID');
            EXECUTE('UPDATE LANGUAGE_PREFERENCES set parent_id = ''com.ads'' where parent_id = ''0''');
        END

	IF EXISTS (SELECT * FROM SYSOBJECTS WHERE  ID = OBJECT_ID(N'R_5') AND XTYPE = 'F')
	BEGIN
            EXECUTE('ALTER TABLE [USER_ASSIGNED_ROLES] DROP CONSTRAINT R_5');
	END
	IF  EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[SECURITY_ROLES]') AND name = N'PK_SECURITY_ROLES_ROLE_ID')
	BEGIN
            EXECUTE('ALTER TABLE [SECURITY_ROLES] DROP CONSTRAINT [PK_SECURITY_ROLES_ROLE_ID]');
	END
        IF  EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[SECURITY_ROLES]') AND name = N'UK_SR_ROLE_ID')
	BEGIN
            EXECUTE('ALTER TABLE [SECURITY_ROLES] DROP CONSTRAINT [UK_SR_ROLE_ID]');
        END

	IF EXISTS (SELECT * FROM SYSOBJECTS WHERE  ID = OBJECT_ID(N'XPKPROJECT_RESOURCES') AND XTYPE = 'PK')
	BEGIN
            EXECUTE('ALTER TABLE [PROJECT_RESOURCES] DROP CONSTRAINT R_9');
            EXECUTE('ALTER TABLE [PROJECT_RESOURCES] DROP CONSTRAINT XPKPROJECT_RESOURCES');
            EXECUTE('ALTER TABLE [PROJECT_RESOURCES] ALTER COLUMN [ROLE_ID]  VARCHAR(100) NOT NULL');
	END

	IF EXISTS (SELECT * FROM SYSOBJECTS WHERE  ID = OBJECT_ID(N'XPKUSER_ASSIGNED_ROLES') AND XTYPE = 'PK')
	BEGIN
            EXECUTE('ALTER TABLE [USER_ASSIGNED_ROLES] DROP CONSTRAINT R_6');
            EXECUTE('ALTER TABLE [USER_ASSIGNED_ROLES] DROP CONSTRAINT XPKUSER_ASSIGNED_ROLES');
            EXECUTE('ALTER TABLE [SECURITY_ROLES] ADD [TEMP_ROLE_ID] VARCHAR(100) NOT NULL DEFAULT -1');
            EXECUTE('ALTER TABLE [USER_ASSIGNED_ROLES] ALTER COLUMN [ROLE_ID]  VARCHAR(100) NOT NULL');
            EXECUTE('DELETE FROM MMROLE_PERMISSIONS WHERE MMrole_id NOT IN  (SELECT role_id FROM SECURITY_ROLES)');
            EXECUTE('DELETE FROM MMROLE_PERMISSIONS WHERE MMROLE_ID IN  (SELECT ROLE_ID FROM SECURITY_ROLES WHERE LAST_MODIFIED_BY = ''System'')');
            EXECUTE('ALTER TABLE [MMROLE_PERMISSIONS] ALTER COLUMN [MMROLE_ID]  VARCHAR(100) NOT NULL');
            EXECUTE('ALTER TABLE [MMROLE_PERMISSIONS] ALTER COLUMN [PERMISSION_ID]  VARCHAR(max) NOT NULL');
            EXECUTE('UPDATE [SECURITY_ROLES] SET [TEMP_ROLE_ID] = ''com.ads.roles.''+REPLACE(ROLE_NAME, '' '', '''')');
            EXECUTE('UPDATE USER_ASSIGNED_ROLES SET ROLE_ID = (SELECT TEMP_ROLE_ID FROM SECURITY_ROLES SR WHERE SR.ROLE_ID = USER_ASSIGNED_ROLES.ROLE_ID)');
            EXECUTE('UPDATE PROJECT_RESOURCES SET ROLE_ID = (SELECT TEMP_ROLE_ID FROM SECURITY_ROLES SR WHERE SR.ROLE_ID = PROJECT_RESOURCES.ROLE_ID)');
            EXECUTE('UPDATE MMROLE_PERMISSIONS SET MMROLE_ID = (SELECT TEMP_ROLE_ID FROM SECURITY_ROLES SR WHERE SR.ROLE_ID = MMROLE_PERMISSIONS.MMROLE_ID)');
        END

        IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'APP_PERMISSIONS' AND COLUMN_NAME = 'PERMISSION_ID')
	BEGIN
            EXECUTE('DELETE FROM MMROLE_PERMISSIONS WHERE PERMISSION_ID NOT IN  (SELECT PERMISSION_ID FROM APP_PERMISSIONS)');
            EXECUTE('UPDATE MMROLE_PERMISSIONS SET PERMISSION_ID = (SELECT PERMISSION_NAME FROM APP_PERMISSIONS AP WHERE AP.PERMISSION_ID = MMROLE_PERMISSIONS.PERMISSION_ID)');
            EXECUTE('DROP TABLE APP_PERMISSIONS');
        END

        IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'SECURITY_ROLES' AND COLUMN_NAME = 'TEMP_ROLE_ID')
	BEGIN
            EXECUTE('ALTER TABLE [SECURITY_ROLES] DROP COLUMN [ROLE_ID]');
            EXEC sp_RENAME 'SECURITY_ROLES.TEMP_ROLE_ID', 'ROLE_ID', 'COLUMN';
        END

        IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS WHERE CONSTRAINT_NAME='UK_SR_ROLE_ID' AND TABLE_NAME='SECURITY_ROLES')
        BEGIN
            EXECUTE('ALTER TABLE SECURITY_ROLES ADD CONSTRAINT UK_SR_ROLE_ID UNIQUE  (ROLE_ID)')
        END
        IF  NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[SECURITY_ROLES]') AND name = N'PK_SECURITY_ROLES_ROLE_ID')
        BEGIN
            EXECUTE('ALTER TABLE SECURITY_ROLES ADD CONSTRAINT PK_SECURITY_ROLES_ROLE_ID PRIMARY KEY CLUSTERED ( ROLE_ID ASC)');
        END
        IF NOT EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[R_5]') AND parent_object_id = OBJECT_ID(N'[USER_ASSIGNED_ROLES]'))
        BEGIN
            EXECUTE('ALTER TABLE USER_ASSIGNED_ROLES ADD CONSTRAINT R_5 FOREIGN KEY (ROLE_ID) REFERENCES SECURITY_ROLES (ROLE_ID)');
        END
        IF  NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[PROJECT_RESOURCES]') AND name = N'XPKPROJECT_RESOURCES')
        BEGIN
            EXECUTE('ALTER TABLE [PROJECT_RESOURCES] ADD  CONSTRAINT [XPKPROJECT_RESOURCES] PRIMARY KEY CLUSTERED (PROJ_ID, USER_ID, ROLE_ID)');
        END
        IF  NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[USER_ASSIGNED_ROLES]') AND name = N'XPKUSER_ASSIGNED_ROLES')
	BEGIN
            EXECUTE('ALTER TABLE [USER_ASSIGNED_ROLES] ADD  CONSTRAINT [XPKUSER_ASSIGNED_ROLES] PRIMARY KEY CLUSTERED (USER_ID,ROLE_ID)');
        END
        IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS WHERE CONSTRAINT_NAME='R_6' AND TABLE_NAME='USER_ASSIGNED_ROLES')
	BEGIN
            EXECUTE('ALTER TABLE USER_ASSIGNED_ROLES ADD CONSTRAINT R_6 FOREIGN KEY (USER_ID) REFERENCES USERS (USER_ID) ON DELETE CASCADE');
	END

        IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS WHERE CONSTRAINT_NAME='R_9' AND TABLE_NAME='PROJECT_RESOURCES')
	BEGIN
            EXECUTE('ALTER TABLE PROJECT_RESOURCES ADD CONSTRAINT R_9 FOREIGN KEY (USER_ID, ROLE_ID) REFERENCES USER_ASSIGNED_ROLES (USER_ID, ROLE_ID)')
        END
    COMMIT TRANSACTION MOVE_PERM_LANG_TO_PROPS;
    END TRY
    BEGIN CATCH
        ROLLBACK TRANSACTION  MOVE_PERM_LANG_TO_PROPS;
        PRINT 'Error while migrating the language preferencss and permissions to properties file block';
        PRINT ERROR_LINE();
        PRINT ERROR_MESSAGE ();
    END CATCH
END
GO
IF COL_LENGTH('RM_MIGRATIONOBJECT', 'MIGRATIONOBJECTNAME')  <> 300
BEGIN
    EXECUTE('ALTER TABLE RM_MIGRATIONOBJECT ALTER COLUMN MIGRATIONOBJECTNAME VARCHAR(300)');
END
GO
IF COL_LENGTH('TRANSFORMATIONS', 'ISPUBLISHED') IS NULL
BEGIN
   EXEC('ALTER TABLE [TRANSFORMATIONS] ADD [ISPUBLISHED] char(1) DEFAULT ''N'' NULL')
   EXEC('UPDATE TRANSFORMATIONS SET ISPUBLISHED = ''Y''')
END
GO

IF COL_LENGTH('TCM_TESTCASE_TYPE', 'CREATED_BY') IS NULL
    BEGIN
        EXECUTE('ALTER TABLE TCM_TESTCASE_TYPE ADD
            ISPUBLISHED char(1)  NULL,
            ISSYSTEMBASED char(1) NULL,
            CREATED_BY varchar(20) NULL,
            CREATED_DATE datetime  NULL,
            MODIFIED_BY varchar(20) NULL,
            MODIFIED_DATE datetime  NULL');
        EXECUTE('UPDATE TCM_TESTCASE_TYPE SET ISPUBLISHED = ''Y'',ISSYSTEMBASED = ''Y'',CREATED_BY = ''SYSTEM'',CREATED_DATE = CURRENT_TIMESTAMP, MODIFIED_BY = ''SYSTEM'',MODIFIED_DATE = CURRENT_TIMESTAMP');
    END
GO
IF (OBJECTPROPERTY(OBJECT_ID('fnSplitString'),'ISTABLEFUNCTION') = 1)
BEGIN
	DROP FUNCTION dbo.fnSplitString
END
GO

CREATE   FUNCTION [DBO].[fnSplitString](
      @string NVARCHAR(
        MAX),
      @delimiter CHAR(
        1) )
    RETURNS @output TABLE(
      splitdata NVARCHAR(
        200))
    BEGIN
      DECLARE
        @start INT, @end INT
        DECLARE
          @split TABLE(splitdata NVARCHAR(MAX)) SELECT @start = 1, @end = CHARINDEX(@delimiter, @string) WHILE @start < LEN(@string) + 1
        BEGIN
          IF @end    = 0
            SET @end = LEN(@string) + 1
            INSERT
            INTO @output
              (
                splitdata
              )
              VALUES
              (
                SUBSTRING(@string, @start, @end - @start)
              )
              SET @start = @end + 1
              SET @end   = CHARINDEX
              (
                @delimiter,
                @string,
                @start
              )
          END
            RETURN
        END
GO

IF (OBJECTPROPERTY(OBJECT_ID('fn_APPENDED_MAP_SPEC_RCRDS'),'ISTABLEFUNCTION') = 1)
BEGIN
    DROP FUNCTION dbo.fn_APPENDED_MAP_SPEC_RCRDS
END
GO

CREATE FUNCTION dbo.fn_APPENDED_MAP_SPEC_RCRDS(@MAP_IDs NVARCHAR(MAX))
RETURNS TABLE
AS
RETURN(
        WITH CTE AS (
	SELECT CAST(1 AS INT) AS scn_srt, CHARINDEX(CHAR(10), SRC_COLUMN_NAME) AS scn_stp, SRC_COLUMN_NAME
			 , CAST(1 AS INT) AS stn_srt, CHARINDEX(CHAR(10), SRC_TABLE_NAME) AS stn_stp, SRC_TABLE_NAME
			 , CAST(1 AS INT) AS sen_srt, CHARINDEX(CHAR(10), SRC_SYSTEM_ENVIRONMENT_NAME) AS sen_stp, SRC_SYSTEM_ENVIRONMENT_NAME
			 , CAST(1 AS INT) AS ssn_srt, CHARINDEX(CHAR(10), SRC_SYSTEM_NAME) AS ssn_stp, SRC_SYSTEM_NAME
			 , CAST(1 AS INT) AS scd_srt, CHARINDEX(CHAR(10), SRC_COL_DATATYPE) AS scd_stp, SRC_COL_DATATYPE
			 , CAST(1 AS INT) AS scl_srt, CHARINDEX(CHAR(10), SRC_COL_LENGTH) AS scl_stp, SRC_COL_LENGTH
			 , CAST(1 AS INT) AS scp_srt, CHARINDEX(CHAR(10), SRC_COL_PRECISION) AS scp_stp, SRC_COL_PRECISION
			 , CAST(1 AS INT) AS scs_srt, CHARINDEX(CHAR(10), SRC_COL_SCALE) AS scs_stp, SRC_COL_SCALE
			 , CAST(1 AS INT) AS sxp_srt, CHARINDEX(CHAR(10), SRC_XPATH) AS sxp_stp, SRC_XPATH
			 , MAP_SEQ_ID AS SRC_MAP_SEQ_ID

			 , CAST(1 AS INT) AS tcn_srt, CHARINDEX(CHAR(10), TGT_COLUMN_NAME) AS tcn_stp, TGT_COLUMN_NAME
			 , CAST(1 AS INT) AS ttn_srt, CHARINDEX(CHAR(10), TGT_TABLE_NAME) AS ttn_stp, TGT_TABLE_NAME
			 , CAST(1 AS INT) AS ten_srt, CHARINDEX(CHAR(10), TGT_SYSTEM_ENVIRONMENT_NAME) AS ten_stp, TGT_SYSTEM_ENVIRONMENT_NAME
			 , CAST(1 AS INT) AS tsn_srt, CHARINDEX(CHAR(10), TGT_SYSTEM_NAME) AS tsn_stp, TGT_SYSTEM_NAME
			 , CAST(1 AS INT) AS tcd_srt, CHARINDEX(CHAR(10), TGT_COL_DATATYPE) AS tcd_stp, TGT_COL_DATATYPE
			 , CAST(1 AS INT) AS tcl_srt, CHARINDEX(CHAR(10), TGT_COL_LENGTH) AS tcl_stp, TGT_COL_LENGTH
			 , CAST(1 AS INT) AS tcp_srt, CHARINDEX(CHAR(10), TGT_COL_PRECISION) AS tcp_stp, TGT_COL_PRECISION
			 , CAST(1 AS INT) AS tcs_srt, CHARINDEX(CHAR(10), TGT_COL_SCALE) AS tcs_stp, TGT_COL_SCALE
			 , CAST(1 AS INT) AS txp_srt, CHARINDEX(CHAR(10), TGT_XPATH) AS txp_stp, TGT_XPATH
			 , MAP_ID, MAP_SEQ_ID, PROJ_ID, BUSINESS_RULE
		  FROM MAPPING_SPECIFICATION MS
		  LEFT JOIN dbo.fnSplitString(@MAP_IDs, ',') fn
		    ON MS.MAP_ID = fn.splitdata
		 WHERE @MAP_IDs IS NULL
		    OR MS.MAP_ID = fn.splitdata
		 UNION ALL
		SELECT CAST(scn_stp + 1 AS INT), CHARINDEX(CHAR(10), SRC_COLUMN_NAME, scn_stp + 1), SRC_COLUMN_NAME
			 , CAST(stn_stp + 1 AS INT), CHARINDEX(CHAR(10), SRC_TABLE_NAME, stn_stp + 1), SRC_TABLE_NAME
			 , CAST(sen_stp + 1 AS INT), CHARINDEX(CHAR(10), SRC_SYSTEM_ENVIRONMENT_NAME, sen_stp + 1), SRC_SYSTEM_ENVIRONMENT_NAME
			 , CAST(ssn_stp + 1 AS INT), CHARINDEX(CHAR(10), SRC_SYSTEM_NAME, ssn_stp + 1), SRC_SYSTEM_NAME
			 , CAST(scd_stp + 1 AS INT), CHARINDEX(CHAR(10), SRC_COL_DATATYPE, scd_stp + 1), SRC_COL_DATATYPE
			 , CAST(scl_stp + 1 AS INT), CHARINDEX(CHAR(10), SRC_COL_LENGTH, scl_stp + 1), SRC_COL_LENGTH
			 , CAST(scp_stp + 1 AS INT), CHARINDEX(CHAR(10), SRC_COL_PRECISION, scp_stp + 1), SRC_COL_PRECISION
			 , CAST(scs_stp + 1 AS INT), CHARINDEX(CHAR(10), SRC_COL_SCALE, scs_stp + 1), SRC_COL_SCALE
			 , CAST(sxp_stp + 1 AS INT), CHARINDEX(CHAR(10), SRC_XPATH, sxp_stp + 1), SRC_XPATH
			 , CASE WHEN scn_stp = 0 THEN NULL ELSE SRC_MAP_SEQ_ID END AS SRC_MAP_SEQ_ID

			 , CAST(tcn_stp + 1 AS INT), CHARINDEX(CHAR(10), TGT_COLUMN_NAME, tcn_stp + 1), TGT_COLUMN_NAME
			 , CAST(ttn_stp + 1 AS INT), CHARINDEX(CHAR(10), TGT_TABLE_NAME, ttn_stp + 1), TGT_TABLE_NAME
			 , CAST(ten_stp + 1 AS INT), CHARINDEX(CHAR(10), TGT_SYSTEM_ENVIRONMENT_NAME, ten_stp + 1), TGT_SYSTEM_ENVIRONMENT_NAME
			 , CAST(tsn_stp + 1 AS INT), CHARINDEX(CHAR(10), TGT_SYSTEM_NAME, tsn_stp + 1), TGT_SYSTEM_NAME
			 , CAST(tcd_stp + 1 AS INT), CHARINDEX(CHAR(10), TGT_COL_DATATYPE, tcd_stp + 1), TGT_COL_DATATYPE
			 , CAST(tcl_stp + 1 AS INT), CHARINDEX(CHAR(10), TGT_COL_LENGTH, tcl_stp + 1), TGT_COL_LENGTH
			 , CAST(tcp_stp + 1 AS INT), CHARINDEX(CHAR(10), TGT_COL_PRECISION, tcp_stp + 1), TGT_COL_PRECISION
			 , CAST(tcs_stp + 1 AS INT), CHARINDEX(CHAR(10), TGT_COL_SCALE, tcs_stp + 1), TGT_COL_SCALE
			 , CAST(txp_stp + 1 AS INT), CHARINDEX(CHAR(10), TGT_XPATH, txp_stp + 1), TGT_XPATH
			 , MAP_ID, CASE WHEN tcn_stp = 0 THEN NULL ELSE MAP_SEQ_ID END AS MAP_SEQ_ID, PROJ_ID, BUSINESS_RULE
		  FROM CTE
		 WHERE scn_stp > 0 OR stn_stp > 0 OR sen_stp > 0 OR ssn_stp > 0 OR tcn_stp > 0 OR ttn_stp > 0 OR ten_stp > 0 OR tsn_stp > 0)
		SELECT SUBSTRING(TGT.TGT_COLUMN_NAME, TGT.tcn_srt, CASE WHEN TGT.tcn_stp > 0 THEN TGT.tcn_stp-TGT.tcn_srt ELSE 512 END) AS TGT_COLUMN_NAME
			 , SUBSTRING(TGT.TGT_SYSTEM_ENVIRONMENT_NAME, TGT.ten_srt, CASE WHEN TGT.ten_stp > 0 THEN TGT.ten_stp-TGT.ten_srt ELSE 512 END) AS TGT_SYSTEM_ENVIRONMENT_NAME
			 , SUBSTRING(TGT.TGT_TABLE_NAME, TGT.ttn_srt, CASE WHEN TGT.ttn_stp > 0 THEN TGT.ttn_stp-TGT.ttn_srt ELSE 512 END) AS TGT_TABLE_NAME
			 , SUBSTRING(TGT.TGT_SYSTEM_NAME, TGT.tsn_srt, CASE WHEN TGT.tsn_stp > 0 THEN TGT.tsn_stp-TGT.tsn_srt ELSE 512 END) AS TGT_SYSTEM_NAME
			 , SUBSTRING(TGT.TGT_COL_DATATYPE, TGT.tcd_srt, CASE WHEN TGT.tcd_stp > 0 THEN TGT.tcd_stp-TGT.tcd_srt ELSE 512 END) AS TGT_COL_DATATYPE
			 , SUBSTRING(TGT.TGT_COL_LENGTH, TGT.tcl_srt, CASE WHEN TGT.tcl_stp > 0 THEN TGT.tcl_stp-TGT.tcl_srt ELSE 512 END) AS TGT_COL_LENGTH
			 , SUBSTRING(TGT.TGT_COL_PRECISION, TGT.tcp_srt, CASE WHEN TGT.tcp_stp > 0 THEN TGT.tcp_stp-TGT.tcp_srt ELSE 512 END) AS TGT_COL_PRECISION
			 , SUBSTRING(TGT.TGT_COL_SCALE, TGT.tcs_srt, CASE WHEN TGT.tcs_stp > 0 THEN TGT.tcs_stp-TGT.tcs_srt ELSE 512 END) AS TGT_COL_SCALE
			 , SUBSTRING(TGT.TGT_XPATH, TGT.txp_srt, CASE WHEN TGT.txp_stp > 0 THEN TGT.txp_stp-TGT.txp_srt ELSE LEN(TGT.TGT_XPATH) + 1 END) AS TGT_XPATH
			 , TGT.BUSINESS_RULE
			 , SUBSTRING(SRC.SRC_COLUMN_NAME, SRC.scn_srt, CASE WHEN SRC.scn_stp > 0 THEN SRC.scn_stp-SRC.scn_srt ELSE 512 END) AS SRC_COLUMN_NAME
			 , SUBSTRING(SRC.SRC_TABLE_NAME, SRC.stn_srt, CASE WHEN SRC.stn_stp > 0 THEN SRC.stn_stp-SRC.stn_srt ELSE 512 END) AS SRC_TABLE_NAME
			 , SUBSTRING(SRC.SRC_SYSTEM_ENVIRONMENT_NAME, SRC.sen_srt, CASE WHEN SRC.sen_stp > 0 THEN SRC.sen_stp-SRC.sen_srt ELSE 512 END) AS SRC_SYSTEM_ENVIRONMENT_NAME
			 , SUBSTRING(SRC.SRC_SYSTEM_NAME, SRC.ssn_srt, CASE WHEN SRC.ssn_stp > 0 THEN SRC.ssn_stp-SRC.ssn_srt ELSE 512 END) AS SRC_SYSTEM_NAME
			 , SUBSTRING(SRC.SRC_COL_DATATYPE, SRC.scd_srt, CASE WHEN SRC.scd_stp > 0 THEN SRC.scd_stp-SRC.scd_srt ELSE 512 END) AS SRC_COL_DATATYPE
			 , SUBSTRING(SRC.SRC_COL_LENGTH, SRC.scl_srt, CASE WHEN SRC.scl_stp > 0 THEN SRC.scl_stp-SRC.scl_srt ELSE 512 END) AS SRC_COL_LENGTH
			 , SUBSTRING(SRC.SRC_COL_PRECISION, SRC.scp_srt, CASE WHEN SRC.scp_stp > 0 THEN SRC.scp_stp-SRC.scp_srt ELSE 512 END) AS SRC_COL_PRECISION
			 , SUBSTRING(SRC.SRC_COL_SCALE, SRC.scs_srt, CASE WHEN SRC.scs_stp > 0 THEN SRC.scs_stp-SRC.scs_srt ELSE 512 END) AS SRC_COL_SCALE
			 , SUBSTRING(SRC.SRC_XPATH, SRC.sxp_srt, CASE WHEN SRC.sxp_stp > 0 THEN SRC.sxp_stp-SRC.sxp_srt ELSE LEN(SRC.SRC_XPATH) + 1 END) AS SRC_XPATH
			 , TGT.MAP_SEQ_ID, TGT.MAP_ID, TGT.PROJ_ID
		 FROM CTE SRC
		 JOIN CTE TGT
		   ON SRC.SRC_MAP_SEQ_ID = TGT.MAP_SEQ_ID
)
GO
IF COL_LENGTH('MAPPING_SPECIFICATION', 'SRC_COL_LENGTH')  < 4000
BEGIN
    EXECUTE('ALTER TABLE MAPPING_SPECIFICATION ALTER COLUMN SRC_COL_LENGTH VARCHAR(4000)');
    EXECUTE('ALTER TABLE MAPPING_SPECIFICATION ALTER COLUMN SRC_COL_PRECISION VARCHAR(4000)');
    EXECUTE('ALTER TABLE MAPPING_SPECIFICATION ALTER COLUMN SRC_COL_SCALE VARCHAR(4000)');
    EXECUTE('ALTER TABLE MAPPING_SPECIFICATION ALTER COLUMN SRC_XPATH VARCHAR(max)');
    EXECUTE('ALTER TABLE MAPPING_SPECIFICATION ALTER COLUMN TGT_COL_LENGTH VARCHAR(4000)');
    EXECUTE('ALTER TABLE MAPPING_SPECIFICATION ALTER COLUMN TGT_COL_PRECISION VARCHAR(4000)');
    EXECUTE('ALTER TABLE MAPPING_SPECIFICATION ALTER COLUMN TGT_COL_SCALE VARCHAR(4000)');
    EXECUTE('ALTER TABLE MAPPING_SPECIFICATION ALTER COLUMN TGT_XPATH VARCHAR(max)');
END
GO
IF COL_LENGTH('TCM_TESTCASE', 'APPROVED') IS NULL
BEGIN
    EXECUTE('ALTER TABLE TCM_TESTCASE ADD  APPROVED CHAR(1) default ''N'' NULL');
END
GO
IF (SELECT COUNT(*) FROM APP_PREFERENCES WHERE PREFERENCE_NAME = 'SEND_EMAIL_ON_SAVE_MAPPING') = 0
BEGIN
INSERT INTO APP_PREFERENCES(PREFERENCE_NAME,PREFERENCE_VALUE)
    SELECT 'SEND_EMAIL_ON_SAVE_MAPPING','false'
    UNION ALL
    SELECT 'ADD_COMMENTS_ON_SAVE_MAPPING','false'
    UNION ALL
    SELECT 'SEND_EMAIL_ON_SAVE_MAPPING_SUBJECT','Save Mapping Details - DO NOT REPLY'
    UNION ALL
    SELECT 'SEND_EMAIL_ON_SAVE_MAPPING_MESSAGE','Hi,<br><br>This is a system generated email notification. <br><br><b>A MAPPING HAS BEEN SAVED.</b><br> <br><TABLE style=''border-bottom: #600 1px solid; border-left: #600 1px solid; border-spacing: 1px; font-family: Century Gothic; font-size: 10pt; border-top: #600 1px solid; border-right: #600 1px solid'' border=1 cellPadding=5>
                                                <TR><TD><B>Project Name:</B></TD><TD>@targetProjectName@</TD></TR>
                                                <TR><TD><B>Subject Name:</B></TD><TD>@targetSubjectName@</TD></TR>
                                                <TR><TD><B>Mapping Name:</B></TD><TD>@targetMappingName@</TD></TR>
                                                <TR><TD><B>Mapping Id:</B></TD><TD>@targetMappingId@</TD></TR>
                                                <TR><TD><B>Mapping Version:</B></TD><TD>@targetMappingVersion@</TD></TR>
                                                <TR><TD><B>Created By:</B></TD><TD>@targetMappingCreatedBy@</TD></TR>
                                                <TR><TD><B>Created Date:</B></TD><TD>@targetMappingCreatedDate@</TD></TR>
                                                <TR><TD><B>Modifed By:</B></TD><TD>@targetMappingModifiedBy@</TD></TR>
                                                <TR><TD><B>Modified Date:</B></TD><TD>@targetMappingModifiedDate@</TD></TR>
                                                <TR><TD><B>Inserted Mapping Sequence Id(s):</B></TD><TD>@targetInsertedMappingSequenceId@</TD></TR>
                                                <TR><TD><B>Updated Mapping Sequence Id(s):</B></TD><TD>@targetUpdatedMappingSequenceId@</TD></TR>
                                                <TR><TD><B>Share Link:</B></TD><TD>@shareLinkUrl@</TD></TR></TABLE>
                                                <BR><br><b>Comments:<b><br>@comments@ <BR><BR>Note: This mailbox is not monitored. DO NOT REPLY TO THIS EMAIL.'
END
GO
IF COL_LENGTH('SPECIFICATION_LOCK', 'LOCKED_DATE_TIME') IS NULL
BEGIN
    EXECUTE('ALTER TABLE SPECIFICATION_LOCK ADD LOCKED_DATE_TIME DATETIME  NULL');
END
GO

IF NOT EXISTS (SELECT *  FROM   SYSOBJECTS   WHERE  ID = OBJECT_ID(N'CHAT_THREAD') AND TYPE = 'U')
	BEGIN
	EXECUTE('CREATE TABLE [CHAT_THREAD](
		[CHAT_THREAD_ID] [bigint] NOT NULL IDENTITY (1,1),
		[CHAT_THREAD_NAME] [varchar](200) NOT NULL,
		[CHAT_THREAD_DESCRIPTION] [varchar](500) NULL,
		[ARCHIVED] [varchar](1) NULL DEFAULT ''N'',
		[CREATED_BY] [varchar](20) NOT NULL,
		[CREATED_DATETIME] [datetime] NOT NULL,
		[MODIFIED_BY] [varchar](20) NULL,
		[MODIFIED_DATETIME] [datetime] NULL,
		CONSTRAINT [PK_CHAT_THREAD] PRIMARY KEY CLUSTERED ([CHAT_THREAD_ID] ASC),
		CONSTRAINT [FK_CREATED_BY_CHAT_THREAD] FOREIGN KEY([CREATED_BY]) REFERENCES [USERS] ([USER_ID]))');
	END
GO

IF NOT EXISTS (SELECT *  FROM   SYSOBJECTS   WHERE  ID = OBJECT_ID(N'CHAT_THREAD_USER') AND TYPE = 'U')
	BEGIN
	EXECUTE('CREATE TABLE [CHAT_THREAD_USER](
	[CHAT_THREAD_ID] [bigint] NOT NULL,
	[USER_ID] [varchar](20) NOT NULL,
	[CHAT_THREAD_MUTED] [varchar](1) NULL DEFAULT ''N'',
	CONSTRAINT [FK_CHAT_THREAD_USER_CHAT_THRD] FOREIGN KEY([CHAT_THREAD_ID])
	REFERENCES [CHAT_THREAD] ([CHAT_THREAD_ID]),
	CONSTRAINT [FK_CHAT_THREAD_USER_USERS] FOREIGN KEY([USER_ID])
	REFERENCES [USERS] ([USER_ID]))');
	END
GO

IF NOT EXISTS (SELECT *  FROM   SYSOBJECTS   WHERE  ID = OBJECT_ID(N'CHAT_MESSAGES') AND TYPE = 'U')
	BEGIN
	EXECUTE('CREATE TABLE [CHAT_MESSAGES](
	[CHAT_MSG_ID] [bigint] NOT NULL IDENTITY (1,1),
	[CHAT_MSG_CONTENT] [varchar](max) NOT NULL,
	[CREATED_BY] [varchar](20) NOT NULL,
	[CREATED_DATETIME] [datetime] NOT NULL,
	[CHAT_MSG_DELETED] [varchar](1) NULL DEFAULT ''N'',
	[CHAT_THREAD_ID] [bigint] NOT NULL,
	CONSTRAINT [PK_CHAT_MESSAGES] PRIMARY KEY CLUSTERED([CHAT_MSG_ID] ASC),
	CONSTRAINT [FK_CHAT_MESSAGES_CHAT_THREAD] FOREIGN KEY([CHAT_THREAD_ID])
	REFERENCES [CHAT_THREAD] ([CHAT_THREAD_ID]),
	CONSTRAINT [FK_CHAT_MESSAGES_USERS] FOREIGN KEY([CREATED_BY])
	REFERENCES [USERS] ([USER_ID]))');
	END
GO

IF NOT EXISTS (SELECT *  FROM   SYSOBJECTS   WHERE  ID = OBJECT_ID(N'CHAT_THREAD_OBJECT') AND TYPE = 'U')
	BEGIN
	EXECUTE('CREATE TABLE [CHAT_THREAD_OBJECT](
	[OBJECT_TYPE_ID] [bigint] NOT NULL,
	[OBJECT_ID] [bigint] NULL,
	[CHAT_THREAD_ID] [bigint] NOT NULL,
	CONSTRAINT [FK_CHT_TRD_OBJ_ADS_KEY_VAL_OBJ] FOREIGN KEY([OBJECT_TYPE_ID])
	REFERENCES [ADS_KEY_VALUE_OBJECTS] ([OBJECT_TYPE_ID]),
	CONSTRAINT [FK_CHAT_THREAD_OBJ_CHAT_THREAD] FOREIGN KEY([CHAT_THREAD_ID])
	REFERENCES [CHAT_THREAD] ([CHAT_THREAD_ID]))');
	END
GO

IF NOT EXISTS (SELECT *  FROM   SYSOBJECTS   WHERE  ID = OBJECT_ID(N'CHAT_USER_MESSAGES') AND TYPE = 'U')
	BEGIN
	EXECUTE('CREATE TABLE [CHAT_USER_MESSAGES](
		[CHAT_MSG_ID] [bigint] NOT NULL,
		[USER_ID] [varchar](20) NOT NULL,
		[CHAT_MSG_STATUS] [tinyint] NULL,
		CONSTRAINT [PK_CHAT_USER_MESSAGES] PRIMARY KEY CLUSTERED ([CHAT_MSG_ID] ASC,[USER_ID] ASC),
		CONSTRAINT [FK_CHAT_USER_MESSAGES_USERS] FOREIGN KEY([USER_ID]) REFERENCES [USERS] ([USER_ID]))');
	END
GO

IF NOT EXISTS (SELECT *
	       FROM   SYSOBJECTS
	       WHERE  ID = OBJECT_ID(N'FORM_FIELD')
		      AND TYPE = 'U')
  BEGIN
      EXECUTE ('CREATE TABLE FORM_FIELD(
	 FIELD_ID bigint IDENTITY(1,1) NOT NULL,
	 FIELD_NAME varchar(250) NOT NULL,
	 FIELD_DESCRIPTION varchar(4000) NULL,
	 FIELD_TYPE bigint NOT NULL,
	 IS_SYSTEM_BASED CHAR(1) NOT NULL DEFAULT ''N'',
	 CONSTRAINT PK_FORM_FIELD_FIELD_ID PRIMARY KEY(FIELD_ID),
	 CONSTRAINT FK_FORM_FIELD_FIELDTYPE FOREIGN KEY(FIELD_TYPE)
	 REFERENCES AMM_DATATYPES (ADT_ID))');
  END
GO

IF NOT EXISTS (SELECT * FROM FORM_FIELD WHERE  FIELD_NAME = 'DATASTEWARD')
BEGIN
INSERT INTO FORM_FIELD (FIELD_NAME,FIELD_DESCRIPTION,FIELD_TYPE,IS_SYSTEM_BASED)
SELECT 'DATASTEWARD','The Data Steward is a role/person responsible for the management of the metadata and for administering the organizations'' entire data in compliance with policy and/or regulatory obligations',6,'Y'
END
GO

IF NOT EXISTS (SELECT *
	       FROM   SYSOBJECTS
	       WHERE  ID = OBJECT_ID(N'FORM_FIELD_DATA')
		      AND TYPE = 'U')
  BEGIN
      EXECUTE ('CREATE TABLE FORM_FIELD_DATA(

	 FIELD_DATA_ID bigint IDENTITY(1,1) NOT NULL,
	 FIELD_ID bigint NOT NULL,
	 FIELD_DATA varchar(4000) NOT NULL,
	 FIELD_DESCRIPTION varchar(4000) NULL,
	 IS_PUBLISHED CHAR(1) NOT NULL DEFAULT ''N'',
	 IS_SYSTEM_BASED CHAR(1) NOT NULL DEFAULT ''N'',
	 CREATED_BY varchar(20) NOT NULL,
	 CREATED_DATE datetime NOT NULL,
	 LAST_MODIFIED_BY varchar(20) NULL,
	 LAST_MODIFIED_DATE datetime NULL,
	 CONSTRAINT UK_FID_FDATA UNIQUE(FIELD_ID,FIELD_DATA),
	 CONSTRAINT PK_FIELD_DATA_ID PRIMARY KEY (FIELD_DATA_ID),
	 CONSTRAINT FK_FORM_FIELD_DATA_FIELDID FOREIGN KEY(FIELD_ID) REFERENCES FORM_FIELD (FIELD_ID)
	)');
  END
GO

IF COL_LENGTH('SYS_CON_ENVIRONMENTS', 'DATA_STEWARD_NAME') IS NULL
    BEGIN
        EXECUTE('ALTER TABLE SYS_CON_ENVIRONMENTS ADD DATA_STEWARD_NAME varchar(4000) NULL');
	EXECUTE('ALTER TABLE SYS_CON_ENVIRONMENTS ADD USE_DATA_STEWARD_FOR_CHILDS CHAR(1) NULL');
    END
GO
IF COL_LENGTH('SYSTEM_DEFINITION_DETAILS', 'DATA_STEWARD_NAME') IS NULL
    BEGIN
         EXECUTE('ALTER TABLE SYSTEM_DEFINITION_DETAILS ADD DATA_STEWARD_NAME varchar(4000) NULL');
    END
GO

IF COL_LENGTH('SYSTEM_TABLE_METADATA', 'DATA_STEWARD_NAME') IS NULL
    BEGIN
         EXECUTE('ALTER TABLE SYSTEM_TABLE_METADATA ADD DATA_STEWARD_NAME varchar(4000) NULL');
    END
GO
IF COL_LENGTH('SYSTEM_TABLE_COLUMNS_METADATA', 'DATA_STEWARD_NAME') IS NULL
    BEGIN
         EXECUTE('ALTER TABLE SYSTEM_TABLE_COLUMNS_METADATA ADD DATA_STEWARD_NAME varchar(4000) NULL');
   END
GO

IF EXISTS(SELECT * FROM APP_PREFERENCES WHERE PREFERENCE_NAME = 'SEND_EMAIL_ON_NEW_MAP_CREATION_MESSAGE' and PREFERENCE_VALUE = 'Hi,<br><br>This is a system generated email notification. <br><br><b>A NEW MAPPING HAS BEEN CREATED.</b><br><br><B>Project Name :</B>@targetProjectName@ <br><B>Subject Name:</B> @targetSubjectName@ <br><B>Mapping Name:</B>@targetMappingName@ <br><B>Mapping Id:</B> @targetMappingId@ <br><B>Mapping Version:</B>@targetMappingVersion@ <br><B>Created By:</B> @targetMappingCreatedBy@ <br><B>Created Date:</B>@targetMappingCreatedDate@ <br><B>Modified By:</B>@targetMappingModifiedBy@<br><B>Modified Date:</B> @targetMappingModifiedDate@<br><br><b>Comments:<b><br>@comments@<BR><BR>Note: This mailbox is not monitored. DO NOT REPLY TO THIS EMAIL.')
    UPDATE APP_PREFERENCES SET PREFERENCE_VALUE = 'Hi,<br><br>This is a system generated email notification. <br><br><b>NEW MAPPING(s) HAS BEEN CREATED.</b><br><br><b>Project Name :</b>@targetProjectName@ <br><b>Subject Name:</b> @targetSubjectName@ <br><b>Mapping Name(s):</b>@targetMappingName@ <br><b>Mapping Id(s):</b> @targetMappingId@ <br><b>Mapping Version:</b>@targetMappingVersion@ <br><b>Created By:</b> @targetMappingCreatedBy@ <br><b>Created Date:</b>@targetMappingCreatedDate@ <br><b>Modified By:</b>@targetMappingModifiedBy@<br><b>Modified Date:</b> @targetMappingModifiedDate@<br><br><b>Comments:<b><br>@comments@<br><br>Note: This mailbox is not monitored. DO NOT REPLY TO THIS EMAIL.</b></b>'  WHERE PREFERENCE_NAME='SEND_EMAIL_ON_NEW_MAP_CREATION_MESSAGE'
GO

IF EXISTS (SELECT * FROM ADS_MM_VERSION WHERE VALUE <= '6.2')
BEGIN
    IF EXISTS(SELECT * FROM APP_PREFERENCES WHERE PREFERENCE_NAME = 'CONST_LOGIN_IMAGE_STYLE')
    BEGIN
        EXECUTE('UPDATE APP_PREFERENCES SET PREFERENCE_VALUE = '''' WHERE PREFERENCE_NAME = ''CONST_LOGIN_IMAGE_STYLE''');
    END
    IF EXISTS (SELECT * FROM LANGUAGE_PREFERENCES WHERE KEY_ID = 'com.ads.mm.stb.bstviewresieexpabove')
    BEGIN
        EXECUTE('UPDATE LANGUAGE_PREFERENCES SET KEY_DESCRIPTION = ''Best viewed in 1280 x 1024 resolution in IE 10.0, Firefox 16.0, Chrome 28.0, Safari 5.1 &amp; above''  ,  ENGLISH = ''Best viewed in 1280 x 1024 resolution in IE 10.0, Firefox 16.0, Chrome 28.0, Safari 5.1 &amp; above'' where KEY_ID = ''com.ads.mm.stb.bstviewresieexpabove''');
    END
END
GO

IF NOT EXISTS (SELECT * FROM SYSOBJECTS WHERE ID = OBJECT_ID(N'OBJECT_CONFIGURATIONS') AND TYPE = 'U')
BEGIN
    EXECUTE ('CREATE TABLE OBJECT_CONFIGURATIONS(
            CONFIGURATION_ID BIGINT IDENTITY(1,1) NOT NULL,
            OBJECT_ID varchar(4000) NOT NULL,
            OBJECT_TYPE_ID BIGINT NOT NULL,
            CONFIGURATION_USER VARCHAR(20) NOT NULL,
            CONFIGURATION_TYPE VARCHAR(4000) NOT NULL,
            CONSTRAINT UK_OBJECT_CONFIG_USERID UNIQUE (OBJECT_ID,OBJECT_TYPE_ID,CONFIGURATION_USER),
            CONSTRAINT PK_OBJ_CONFIG_ID PRIMARY KEY(CONFIGURATION_ID),
            CONSTRAINT FK_OBJECT_CONFIG_USERID FOREIGN KEY (CONFIGURATION_USER) REFERENCES USERS(USER_ID) ON DELETE CASCADE,
            CONSTRAINT FK_OBJECT_CONFIG_OBJ_ID FOREIGN KEY( OBJECT_TYPE_ID) REFERENCES ADS_KEY_VALUE_OBJECTS(OBJECT_TYPE_ID))')
END
GO

IF NOT EXISTS(SELECT * FROM APP_PREFERENCES WHERE PREFERENCE_NAME = 'SEND_EMAIL_ON_METADATA_SCAN_JOB_EXECUTED_MESSAGE')
BEGIN
    INSERT INTO APP_PREFERENCES(PREFERENCE_NAME,PREFERENCE_VALUE) VALUES ('SEND_EMAIL_ON_METADATA_SCAN_JOB_EXECUTION_SUBJECT','Metadata Scan Job Execution Status - DO NOT REPLY');
    INSERT INTO APP_PREFERENCES(PREFERENCE_NAME,PREFERENCE_VALUE) VALUES ('SEND_EMAIL_ON_METADATA_SCAN_JOB_EXECUTED_MESSAGE','Hi,<br><br>This is a system generated email notification.<br><br><b>@executionMessage@</b></br><br><table border = 1><tr><th colspan = 2><b>Job Details</b></th></tr><tr><td>Job Name :</td><td>@jobName@</td><tr><td>Job Owner : </td><td>@jobOwner@</td></tr><tr><td>System Name: </td><td>@systemName@</td></tr><tr><td>Environment Name : </td><td>@environmentName@</td></tr><tr><td>Scheduled Schemas : </td><td>@scheduledObjects@</td></tr><tr><td>Job Scheduled Date Time : </td><td>@scheduledDateTime@</td></tr><tr><td>Job Completed Date Time : </td><td>@jobExecutedDateTime@</td></tr><tr><td>Job Next Executed Date Time : </td><td>@jobNextExecutedDateTime@</td></tr></table><BR><BR><I><font color =red>Note</font>: This is an auto generated email notification and this mailbox is not monitored.<BR>Please do not reply to this email.</I>');
    INSERT INTO APP_PREFERENCES(PREFERENCE_NAME,PREFERENCE_VALUE) VALUES ('SEND_EMAIL_ON_METADATA_SCAN','true');
END
GO

IF COL_LENGTH('MAPPING_SPECIFICATION', 'SRC_PRIMARY_KEY_FLAG') IS NULL
	BEGIN
            EXECUTE('ALTER TABLE MAPPING_SPECIFICATION ADD SRC_PRIMARY_KEY_FLAG char(1) NULL');
            EXECUTE('UPDATE USER_PREFERENCES SET COLUMN_PREFERENCES = COLUMN_PREFERENCES + '',SrcPrimaryKeyFlag:0'' WHERE USER_ID like ''HEADER_ORDER_PREFERENCE_%''');
            EXECUTE('UPDATE USER_PREFERENCES SET COLUMN_PREFERENCES = COLUMN_PREFERENCES + '','' WHERE USER_ID LIKE ''HEADER_VISIBILITY_PREFERENCE_%''');
            EXECUTE('UPDATE USER_PREFERENCES SET COLUMN_PREFERENCES = COLUMN_PREFERENCES + '',SrcPrimaryKeyFlag'' WHERE USER_ID LIKE ''SETTINGS_MM_DASHBOARD_NOTMAPPED_SOURCES_GRID_HEADER_PREF_%''');
	END
GO

IF EXISTS (SELECT * FROM ADS_MM_VERSION WHERE VALUE <= '6.2')
BEGIN
    EXECUTE('WITH CTE AS (SELECT CAT_TAB_ID, CAT_TAB_NAME, ROW_NUMBER()OVER ( ORDER BY CASE DISPLAY_ORDER WHEN NULL THEN 0 WHEN 0 THEN 999999999 ELSE DISPLAY_ORDER END) AS DISPLAY_ORDER FROM   CAT_TABS ) UPDATE MS SET    MS.DISPLAY_ORDER = CTE.DISPLAY_ORDER FROM   CAT_TABS MS JOIN CTE ON MS.CAT_TAB_ID = CTE.CAT_TAB_ID AND MS.CAT_TAB_NAME = CTE.CAT_TAB_NAME');
END
GO
IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS WHERE CONSTRAINT_NAME='UK_CODENAME_CAT_VER_ID' AND TABLE_NAME='CSM_CODESET')
BEGIN
    IF COL_LENGTH('CSM_CODESET', 'CODESET_NAME')  < 100
    BEGIN
        EXECUTE('ALTER TABLE CSM_CODESET  DROP  CONSTRAINT UK_CODENAME_CAT_VER_ID')
        EXECUTE('ALTER TABLE CSM_CODESET ALTER COLUMN CODESET_NAME VARCHAR(100) NOT NULL');
        EXECUTE('ALTER TABLE CSM_CODESET  ADD  CONSTRAINT UK_CODENAME_CAT_VER_ID UNIQUE (CATEGORY_ID,CODESET_NAME,CODESET_VERSION)')
    END
END
GO

IF COL_LENGTH('CSM_CODE_VALUE', 'CODE_STND_VALUE')  < 100
    BEGIN
        EXECUTE('ALTER TABLE CSM_CODE_VALUE ALTER COLUMN CODE_STND_VALUE VARCHAR(100) NOT NULL');
    END
GO
IF COL_LENGTH('USERS', 'DEFAULT_ROLE')  < 50
BEGIN
    EXECUTE('ALTER TABLE USERS ALTER COLUMN DEFAULT_ROLE VARCHAR(50)');
END
GO
IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS WHERE CONSTRAINT_NAME='R_13')
    BEGIN
    EXECUTE('ALTER TABLE SYSTEM_TABLE_METADATA DROP CONSTRAINT R_13');
    END
GO

IF NOT EXISTS (SELECT *
                       FROM   SYSOBJECTS
                       WHERE  ID = OBJECT_ID(N'MT_DEFINITION')
                                      AND TYPE = 'U')
  BEGIN
      EXECUTE ('CREATE TABLE MT_DEFINITION  ( MTD_ID  BIGINT IDENTITY(1, 1) NOT NULL ,
      MTD_NAME                 VARCHAR(250) NOT NULL,
      MTD_DESC                   VARCHAR(MAX) NULL,
      ADS_MODULE    VARCHAR(50) NULL,
      CONSTRAINT PK_MT_DEF_MTD_ID PRIMARY KEY(MTD_ID))')
  END
GO

IF NOT EXISTS (SELECT * FROM ADS_KEY_VALUE_OBJECTS WHERE  OBJECT_TYPE = 'MT_DEFINITION')
    BEGIN
        INSERT INTO ADS_KEY_VALUE_OBJECTS (OBJECT_TYPE,OBJECT_TABLE,OBJECT_TABLE_COLUMN,OBJECT_PARENT_TYPE,OBJECT_PARENT_COLUMN_ID)
        SELECT 'MT_DEFINITION','MT_DEFINITION','MTD_ID','',''
        UNION ALL
        SELECT 'MT_DEFINITION_VALUE','','','',''
        UNION ALL
        SELECT 'ADS_KEY_VALUE','ADS_KEY_VALUE','KV_ID','',''
    END
GO
IF COL_LENGTH('ADS_KEY_VALUE', 'KV_TYPE') IS NULL
BEGIN
    ALTER TABLE ADS_KEY_VALUE ADD KV_TYPE varchar(50) NULL
END
GO
IF COL_LENGTH('ADS_KEY_VALUE', 'LABEL_WIDTH') IS NULL
BEGIN
    ALTER TABLE ADS_KEY_VALUE ADD LABEL_WIDTH varchar(50) NULL
END
GO
IF COL_LENGTH('ADS_KEY_VALUE', 'CONTROL_WIDTH') IS NULL
BEGIN
    ALTER TABLE ADS_KEY_VALUE ADD CONTROL_WIDTH varchar(50) NULL
END
GO
IF COL_LENGTH('ADS_KEY_VALUE', 'KV_ORDER') IS NULL
BEGIN
    ALTER TABLE ADS_KEY_VALUE ADD KV_ORDER varchar(50) NULL
END
GO
IF COL_LENGTH('ADS_KEY_VALUE', 'COMPONENT') IS NULL
BEGIN
    ALTER TABLE ADS_KEY_VALUE ADD COMPONENT NVARCHAR(MAX) NULL
END
GO
IF COL_LENGTH('ADS_KEY_VALUE', 'DEFAULTVALUE') IS NULL
BEGIN
    ALTER TABLE ADS_KEY_VALUE ADD DEFAULTVALUE varchar(50) NULL
END
GO
IF NOT EXISTS (SELECT *
                       FROM   SYSOBJECTS
                       WHERE  ID = OBJECT_ID(N'REQM_PROJECT')
                                      AND TYPE = 'U')
  BEGIN
      EXECUTE ('CREATE TABLE REQM_PROJECT   (
      PROJECT_ID	BIGINT IDENTITY(1,1) NOT NULL,
      PROJECT_NAME VARCHAR(250) NOT NULL ,
      PROJECT_DESCRIPTION		VARCHAR(4000) NULL ,
      CONSTRAINT REQM_PROJECT_ID PRIMARY KEY(PROJECT_ID) ,
      CONSTRAINT UK_REQM_PROJECT_NAME UNIQUE (PROJECT_NAME)) ')
  END
GO

IF NOT EXISTS (SELECT *
                       FROM   SYSOBJECTS
                       WHERE  ID = OBJECT_ID(N'REQM_SUBJECT')
                                      AND TYPE = 'U')
  BEGIN
      EXECUTE ('CREATE TABLE REQM_SUBJECT   (
      SUBJECT_ID	BIGINT  IDENTITY(1,1) NOT NULL,
      SUBJECT_NAME VARCHAR(250) NOT NULL ,
      SUBJECT_DESCRIPTION		VARCHAR(4000) NULL ,
      PARENT_SUBJECT_ID   BIGINT NOT NULL DEFAULT -1 ,
      PROJECT_ID BIGINT NOT NULL ,
      CONSTRAINT REQM_SUBJECT_ID PRIMARY KEY(SUBJECT_ID) ,
      CONSTRAINT FK_REQM_PROJECT_ID FOREIGN KEY(PROJECT_ID) REFERENCES REQM_PROJECT(PROJECT_ID) ON DELETE CASCADE ,
      CONSTRAINT UK_REQM_SUBJECT_ID_NAME UNIQUE (PROJECT_ID, PARENT_SUBJECT_ID, SUBJECT_NAME))')
  END
GO

IF NOT EXISTS (SELECT *
                       FROM   SYSOBJECTS
                       WHERE  ID = OBJECT_ID(N'REQM_SPECIFICATION_TEMPLATE')
                                      AND TYPE = 'U')
  BEGIN
      EXECUTE ('CREATE TABLE REQM_SPECIFICATION_TEMPLATE   (
      SPEC_TEMPLATE_ID	BIGINT  IDENTITY(1,1) NOT NULL,
      SPEC_TEMPLATE_NAME VARCHAR(250) NOT NULL ,
      SPEC_TEMPLATE_DESCRIPTION		VARCHAR(4000) NULL ,
      SYSTEM_BASED BIT DEFAULT 0 NOT NULL,
      CONSTRAINT REQM_SPEC_TEMPLATE_ID PRIMARY KEY(SPEC_TEMPLATE_ID),
      CONSTRAINT UK_REQM_SPEC_TEMPLATE_NAME UNIQUE (SPEC_TEMPLATE_NAME)) ')
  END
GO

IF NOT EXISTS (SELECT *
                       FROM   SYSOBJECTS
                       WHERE  ID = OBJECT_ID(N'REQM_SPECIFICATION')
                                      AND TYPE = 'U')
  BEGIN
      EXECUTE ('CREATE TABLE REQM_SPECIFICATION   (
      SPEC_ID	BIGINT  IDENTITY(1,1) NOT NULL,
      SPEC_TEMPLATE_ID BIGINT NOT NULL ,
      SPEC_NAME VARCHAR(250) NOT NULL ,
      SPEC_DESCRIPTION		VARCHAR(4000) NULL ,
      PROJECT_ID BIGINT NOT NULL ,
      SUBJECT_ID   BIGINT NOT NULL ,
      OWNER  VARCHAR(50) NULL ,
      STATUS BIGINT NOT NULL ,
      CONSTRAINT REQM_SPEC_ID PRIMARY KEY(SPEC_ID) ,
      CONSTRAINT FK_REQM_SPEC_TEMPLATE_ID FOREIGN KEY(SPEC_TEMPLATE_ID) REFERENCES REQM_SPECIFICATION_TEMPLATE(SPEC_TEMPLATE_ID) ON DELETE CASCADE,
      CONSTRAINT FK_REQM_SPEC_PROJECT_ID FOREIGN KEY(PROJECT_ID) REFERENCES REQM_PROJECT(PROJECT_ID) ON DELETE CASCADE ,
      CONSTRAINT UK_REQM_SPECIFICATION_NAME UNIQUE (SPEC_NAME, PROJECT_ID,SUBJECT_ID))')
  END
GO

IF NOT EXISTS (SELECT *
                       FROM   SYSOBJECTS
                       WHERE  ID = OBJECT_ID(N'REQM_ARTIFACT')
                                      AND TYPE = 'U')
  BEGIN
      EXECUTE ('CREATE TABLE REQM_ARTIFACT   (
      ARTIFACT_ID	BIGINT  IDENTITY(1,1) NOT NULL,
      SPEC_TEMPLATE_ID BIGINT NOT NULL ,
      ARTIFACT_NAME VARCHAR(250) NOT NULL ,
      ARTIFACT_DESCRIPTION		VARCHAR(4000) NULL ,
      PARENT_ARTIFACT_ID   BIGINT NOT NULL DEFAULT -1 ,
      TREE_NODE_POLICY BIGINT NOT NULL ,
      MTD_ID BIGINT NOT NULL ,
      SUPPORT_DOCUMENT_UPLOAD CHAR(1) NOT NULL DEFAULT ''N'' ,
      ENABLE_DESCRIPTION CHAR(1) NOT NULL DEFAULT ''N'',
      CONSTRAINT REQM_ARTIFACT_ID PRIMARY KEY(ARTIFACT_ID) ,
      CONSTRAINT FK_REQM_ARTIFACT_SPEC_TEMP_ID FOREIGN KEY(SPEC_TEMPLATE_ID) REFERENCES REQM_SPECIFICATION_TEMPLATE(SPEC_TEMPLATE_ID) ON DELETE CASCADE,
      CONSTRAINT UK_REQM_ARTIFACT_NAME UNIQUE (SPEC_TEMPLATE_ID ,ARTIFACT_NAME, PARENT_ARTIFACT_ID))')
  END
GO

IF NOT EXISTS (SELECT *
                       FROM   SYSOBJECTS
                       WHERE  ID = OBJECT_ID(N'REQM_SPECIFICATION_ARTIFACT')
                                      AND TYPE = 'U')
  BEGIN
      EXECUTE ('CREATE TABLE REQM_SPECIFICATION_ARTIFACT   (
      SPEC_ARTIFACT_ID	BIGINT  IDENTITY(1,1) NOT NULL,
      SPEC_ID	BIGINT  NOT NULL ,
      ARTIFACT_ID BIGINT NOT NULL ,
      SPEC_ARTIFACT_NAME VARCHAR(250) NOT NULL ,
      DESCRIPTION VARCHAR(4000),
      CONSTRAINT REQM_SPEC_ARTIFACT_ID PRIMARY KEY(SPEC_ARTIFACT_ID) ,
      CONSTRAINT FK_REQM_SPEC_ID FOREIGN KEY(SPEC_ID) REFERENCES REQM_SPECIFICATION(SPEC_ID) ON DELETE CASCADE ,
      CONSTRAINT FK_REQM_ARTIFACT_ID FOREIGN KEY(ARTIFACT_ID) REFERENCES REQM_ARTIFACT(ARTIFACT_ID),
      CONSTRAINT UK_REQM_SPEC_ARTIFACT_NAME UNIQUE (SPEC_ID,ARTIFACT_ID,SPEC_ARTIFACT_NAME))')
  END
GO

IF (OBJECTPROPERTY(OBJECT_ID('FN_SPECCOUNT'),'ISTABLEFUNCTION') = 1)
BEGIN
 DROP FUNCTION FN_SPECCOUNT
END
GO

CREATE FUNCTION [FN_SPECCOUNT]
(
    @SUBIDS VARCHAR(MAX),
    @countValue int,
    @statusFlag VARCHAR(20)
)
RETURNS @TEMPTABLE Table(cntValue int)
as
begin
    DECLARE @tempValue int
    DECLARE @CodeNameString nvarchar(max)
    select @tempValue = count(*) from REQM_SUBJECT where parent_subject_id in (select * from FN_SPLITTREENODEIDS(@SUBIDS,','))
    SELECT @countValue = COUNT(*) FROM  REQM_SPECIFICATION B1 WHERE B1.STATUS = @statusFlag AND SUBJECT_ID in (select * from FN_SPLITTREENODEIDS(@SUBIDS,','))
    IF @tempValue <> 0
    BEGIN
       select  @CodeNameString = COALESCE(@CodeNameString + ',', '')  + Cast(subject_id as varchar) from REQM_SUBJECT where parent_subject_id in (select * from FN_SPLITTREENODEIDS(@SUBIDS, ','))
       set @countValue = @countValue + (select * from FN_SPECCOUNT(@CodeNameString,@countValue,@statusFlag))
    END
    ELSE
     BEGIN
        set @countValue  = @countValue
     END
     INSERT @TEMPTABLE (cntValue) VALUES (@countValue)
    RETURN
end
GO

IF NOT EXISTS (SELECT * FROM ADS_KEY_VALUE_OBJECTS WHERE  OBJECT_TYPE = 'REQM_PROJECT')
BEGIN
INSERT INTO ADS_KEY_VALUE_OBJECTS (OBJECT_TYPE,OBJECT_TABLE,OBJECT_TABLE_COLUMN,OBJECT_PARENT_TYPE,OBJECT_PARENT_COLUMN_ID)
SELECT 'REQM_PROJECT','REQM_PROJECT','PROJECT_ID','',''
UNION ALL
SELECT 'REQM_SUBJECT','REQM_SUBJECT','SUBJECT_ID','REQM_PROJECT','PROJECT_ID'
UNION ALL
SELECT 'REQM_SPECIFICATION','REQM_SPECIFICATION','SPEC_ID','',''
UNION ALL
SELECT 'REQM_SPECIFICATION_TEMPLATE','REQM_SPECIFICATION_TEMPLATE','SPEC_TEMPLATE_ID','',''
UNION ALL
SELECT 'REQM_ARTIFACT','REQM_ARTIFACT','ARTIFACT_ID','REQM_SPECIFICATION_TEMPLATE','SPEC_TEMPLATE_ID'
UNION ALL
SELECT 'REQM_SPECIFICATION_ARTIFACT','REQM_SPECIFICATION_ARTIFACT','SPEC_ARTIFACT_ID','',''
END
GO

IF NOT EXISTS (SELECT * FROM REQM_SPECIFICATION_TEMPLATE WHERE  SPEC_TEMPLATE_NAME = 'Default' AND SYSTEM_BASED = 1)
BEGIN
INSERT INTO REQM_SPECIFICATION_TEMPLATE (SPEC_TEMPLATE_NAME,SPEC_TEMPLATE_DESCRIPTION,SYSTEM_BASED)
values ('Default','Default Template','1');

INSERT INTO RM_HISTORY
           (HISTORYTYPEID ,HISTORYDESC ,OBJECTID ,OBJECTTYPEID ,HISTORYDATESTAMP ,USER_ID)
     VALUES
           (1 , (SELECT  '{ specificationTemplateId: ' + CAST( SPEC_TEMPLATE_ID as varchar) + ', specificationTemplateName: Default, description: Default Template, isSystemBased: true }' from REQM_SPECIFICATION_TEMPLATE where SPEC_TEMPLATE_NAME= 'Default' and  SYSTEM_BASED = 1)
           , (SELECT  SPEC_TEMPLATE_ID from REQM_SPECIFICATION_TEMPLATE where SPEC_TEMPLATE_NAME= 'Default' and  SYSTEM_BASED = 1)
           ,(SELECT OBJECT_TYPE_ID from ADS_KEY_VALUE_OBJECTS where OBJECT_TYPE = 'REQM_SPECIFICATION_TEMPLATE' and OBJECT_TABLE = 'REQM_SPECIFICATION_TEMPLATE')
           ,CURRENT_TIMESTAMP,'Administrator'
           );
END
GO
IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'ADS_KEY_VALUE_OBJECTS' AND COLUMN_NAME = 'OBJECT_TABLE' AND IS_NULLABLE = 'NO' )
    BEGIN
        EXECUTE ('ALTER TABLE ADS_KEY_VALUE_OBJECTS ALTER COLUMN  OBJECT_TABLE varchar(500) ');
        EXECUTE ('ALTER TABLE ADS_KEY_VALUE_OBJECTS ALTER COLUMN  OBJECT_TABLE_COLUMN varchar(500) ');
    END;
GO

IF COL_LENGTH('MAPPING_SPECIFICATION', 'USER_DEFINITION11') IS NULL
    BEGIN
        ALTER TABLE MAPPING_SPECIFICATION ADD USER_DEFINITION11 VARCHAR(max) NULL,
		USER_DEFINITION12 VARCHAR(max) NULL,
		USER_DEFINITION13 VARCHAR(max) NULL,
		USER_DEFINITION14 VARCHAR(max) NULL,
		USER_DEFINITION15 VARCHAR(max) NULL,
		USER_DEFINITION16 VARCHAR(max) NULL,
		USER_DEFINITION17 VARCHAR(max) NULL,
		USER_DEFINITION18 VARCHAR(max) NULL,
		USER_DEFINITION19 VARCHAR(max) NULL,
		USER_DEFINITION20 VARCHAR(max) NULL,
		USER_DEFINITION21 VARCHAR(max) NULL,
		USER_DEFINITION22 VARCHAR(max) NULL,
		USER_DEFINITION23 VARCHAR(max) NULL,
		USER_DEFINITION24 VARCHAR(max) NULL,
		USER_DEFINITION25 VARCHAR(max) NULL,
		USER_DEFINITION26 VARCHAR(max) NULL,
		USER_DEFINITION27 VARCHAR(max) NULL,
		USER_DEFINITION28 VARCHAR(max) NULL,
		USER_DEFINITION29 VARCHAR(max) NULL,
		USER_DEFINITION30 VARCHAR(max) NULL,
		USER_DEFINITION31 VARCHAR(max) NULL,
		USER_DEFINITION32 VARCHAR(max) NULL,
		USER_DEFINITION33 VARCHAR(max) NULL,
		USER_DEFINITION34 VARCHAR(max) NULL,
		USER_DEFINITION35 VARCHAR(max) NULL,
		USER_DEFINITION36 VARCHAR(max) NULL,
		USER_DEFINITION37 VARCHAR(max) NULL,
		USER_DEFINITION38 VARCHAR(max) NULL,
		USER_DEFINITION39 VARCHAR(max) NULL,
		USER_DEFINITION40 VARCHAR(max) NULL,
		USER_DEFINITION41 VARCHAR(max) NULL,
		USER_DEFINITION42 VARCHAR(max) NULL,
		USER_DEFINITION43 VARCHAR(max) NULL,
		USER_DEFINITION44 VARCHAR(max) NULL,
		USER_DEFINITION45 VARCHAR(max) NULL,
		USER_DEFINITION46 VARCHAR(max) NULL,
		USER_DEFINITION47 VARCHAR(max) NULL,
		USER_DEFINITION48 VARCHAR(max) NULL,
		USER_DEFINITION49 VARCHAR(max) NULL,
		USER_DEFINITION50 VARCHAR(max) NULL
    END
GO
IF EXISTS (SELECT * FROM ADS_MM_VERSION WHERE VALUE <= '7.1')
	BEGIN
            EXECUTE('UPDATE USER_PREFERENCES SET COLUMN_PREFERENCES = COLUMN_PREFERENCES + '',UserDefinition11:0,UserDefinition12:0,UserDefinition13:0,UserDefinition14:0,UserDefinition15:0,UserDefinition16:0,UserDefinition17:0,UserDefinition18:0,UserDefinition19:0,UserDefinition20:0,UserDefinition21:0,UserDefinition22:0,UserDefinition23:0,UserDefinition24:0,UserDefinition25:0,UserDefinition26:0,UserDefinition27:0,UserDefinition28:0,UserDefinition29:0,UserDefinition30:0,UserDefinition31:0,UserDefinition32:0,UserDefinition33:0,UserDefinition34:0,UserDefinition35:0,UserDefinition36:0,UserDefinition37:0,UserDefinition38:0,UserDefinition39:0,UserDefinition40:0,UserDefinition41:0,UserDefinition42:0,UserDefinition43:0,UserDefinition44:0,UserDefinition45:0,UserDefinition46:0,UserDefinition47:0,UserDefinition48:0,UserDefinition49:0,UserDefinition50:0,SpecificationArtifacts:0'' WHERE USER_ID like ''HEADER_ORDER_PREFERENCE_%''');
            EXECUTE('UPDATE USER_PREFERENCES SET COLUMN_PREFERENCES = COLUMN_PREFERENCES + '',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,'' WHERE USER_ID LIKE ''HEADER_VISIBILITY_PREFERENCE_%''');
	END
GO
IF NOT EXISTS (SELECT MODULE_KEY FROM ADS_MODULES WHERE MODULE_KEY = 'com.ads.mm.permission.rqm')
BEGIN
    INSERT INTO ADS_MODULES(MODULE_ID, MODULE_NAME, MODULE_KEY, MODULE_ORDER, MODULE_FORWARD)
    SELECT 11, 'Requirements Manager', 'com.ads.mm.permission.rqm', 11, 'requirementsmanager'
END
GO
IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'SYSTEM_TABLE_COLUMNS_METADATA' AND COLUMN_NAME = 'FK_TABLE_NAME' AND CHARACTER_MAXIMUM_LENGTH = '50')
    BEGIN
        ALTER TABLE SYSTEM_TABLE_COLUMNS_METADATA ALTER COLUMN FK_TABLE_NAME VARCHAR(255)
    END
GO
IF NOT EXISTS (SELECT * FROM ADS_KEY_VALUE_OBJECTS WHERE  OBJECT_TYPE = 'MM_GRAPHICAL_PROPERTIES')
    BEGIN
	INSERT INTO ADS_KEY_VALUE_OBJECTS (OBJECT_TYPE,OBJECT_TABLE,OBJECT_TABLE_COLUMN,OBJECT_PARENT_TYPE,OBJECT_PARENT_COLUMN_ID)
        VALUES('MM_GRAPHICAL_PROPERTIES','MM_GRAPHICAL_PROPERTIES','MAP_ID','','')
END
GO
IF NOT EXISTS (SELECT *
	       FROM   SYSOBJECTS
	       WHERE  ID = OBJECT_ID(N'REPM_CATEGORY')
		      AND TYPE = 'U')
    BEGIN
        EXECUTE ('CREATE TABLE REPM_CATEGORY   ( CATEGORY_ID  BIGINT IDENTITY(1, 1) ,
        CATEGORY_NAME              VARCHAR(300) NOT NULL,
        DESCRIPTION VARCHAR(MAX) NULL,
        PARENT_CATEGORY_ID BIGINT NOT NULL,
        CONSTRAINT UK_REPM_CATEGORY_CIDCN  UNIQUE(CATEGORY_ID,CATEGORY_NAME),
        CONSTRAINT PK_REPM_CATEGORY_CID PRIMARY KEY(CATEGORY_ID))');
    END
GO
IF NOT EXISTS (SELECT *
	       FROM   SYSOBJECTS
	       WHERE  ID = OBJECT_ID(N'REPM_REPORTS')
		      AND TYPE = 'U')
    BEGIN
    EXECUTE ('CREATE TABLE REPM_REPORTS   ( REPORT_ID  BIGINT IDENTITY(1, 1) ,
      REPORT_NAME              VARCHAR(300) NOT NULL,
      DESCRIPTION VARCHAR(4000) NULL,
      PUBLIC_ACCESS BIT DEFAULT 0 NOT NULL,
      CATEGORY_ID BIGINT NOT NULL,
      CONSTRAINT UK_REPM_REPORTS_CIDRN UNIQUE(CATEGORY_ID,REPORT_NAME),
      CONSTRAINT FK_REPM_REPORTS_CAT_ID FOREIGN KEY(CATEGORY_ID) REFERENCES REPM_CATEGORY(CATEGORY_ID) ON DELETE CASCADE,
      CONSTRAINT PK_REPM_REPORTS_RID PRIMARY KEY(REPORT_ID))');
  END
GO
IF NOT EXISTS (SELECT *
	       FROM   SYSOBJECTS
	       WHERE  ID = OBJECT_ID(N'REPM_CHARTS')
		      AND TYPE = 'U')
    BEGIN
    EXECUTE ('CREATE TABLE REPM_CHARTS   ( CHART_ID  BIGINT IDENTITY(1, 1) ,
      CHART_NAME              VARCHAR(300) NOT NULL,
      DESCRIPTION VARCHAR(4000) NULL,
      CHART_QUERY VARCHAR(MAX) NULL,
      CHART_TYPE  VARCHAR(100) NOT  NULL,
      CHART_COLORS  VARCHAR (500) NULL  ,
      PUBLIC_ACCESS BIT DEFAULT 0 NOT NULL,
      CATEGORY_ID BIGINT NOT NULL,
      CONSTRAINT UK_REPM_CHARTS_CIDCN UNIQUE(CATEGORY_ID,CHART_NAME),
      CONSTRAINT FK_REPM_CHARTS_CAT_ID FOREIGN KEY(CATEGORY_ID) REFERENCES REPM_CATEGORY(CATEGORY_ID) ON DELETE CASCADE,
      CONSTRAINT PK_REPM_CHARTS_CID PRIMARY KEY(CHART_ID))');
    END
GO
IF NOT EXISTS (SELECT *
	       FROM   SYSOBJECTS
	       WHERE  ID = OBJECT_ID(N'REPM_DASHBOARDS')
		      AND TYPE = 'U')
    BEGIN
    EXECUTE ('CREATE TABLE REPM_DASHBOARDS   ( DASHBOARD_ID  BIGINT IDENTITY(1, 1) ,
      DASHBOARD_NAME VARCHAR(300) NOT NULL,
      DESCRIPTION VARCHAR(4000) NULL,
      PUBLIC_ACCESS BIT DEFAULT 0 NOT NULL,
      CATEGORY_ID BIGINT NOT NULL,
      CONSTRAINT UK_REPM_DASHBOARDS_CIDDN UNIQUE(CATEGORY_ID,DASHBOARD_NAME),
      CONSTRAINT FK_REPM_DASHBOARDS_CAT_ID FOREIGN KEY(CATEGORY_ID) REFERENCES REPM_CATEGORY(CATEGORY_ID) ON DELETE CASCADE,
      CONSTRAINT PK_REPM_DASHBOARDS_DID PRIMARY KEY(DASHBOARD_ID))');
    END
GO
IF NOT EXISTS (SELECT *
	       FROM   SYSOBJECTS
	       WHERE  ID = OBJECT_ID(N'REPM_DASHBAORD_COMPONENT')
		      AND TYPE = 'U')
    BEGIN
    EXECUTE ('CREATE TABLE REPM_DASHBAORD_COMPONENT   ( DASHBOARD_ID  BIGINT NOT NULL ,
      OBJECT_TYPE_ID BIGINT NOT NULL,
      OBJECT_ID BIGINT NOT NULL,
      CONSTRAINT FK_REPM_DB_CNT_OTID FOREIGN KEY(OBJECT_TYPE_ID) REFERENCES ADS_KEY_VALUE_OBJECTS(OBJECT_TYPE_ID),
      CONSTRAINT FK_REPM_DB_CNT_DID FOREIGN KEY(DASHBOARD_ID) REFERENCES REPM_DASHBOARDS(DASHBOARD_ID) ON DELETE CASCADE )');
    END
GO
IF NOT EXISTS (SELECT *
	       FROM   SYSOBJECTS
	       WHERE  ID = OBJECT_ID(N'REPM_COLOR_PALLETTE')
		      AND TYPE = 'U')
    BEGIN
    EXECUTE ('CREATE TABLE REPM_COLOR_PALLETTE   ( COLOR_PALLETTE_ID   BIGINT IDENTITY(1, 1) ,
      COLOR_PALLETTE_NAME VARCHAR(250) NOT NULL ,
      COLOR_PALLETTE_DATA VARCHAR(1000) NULL,
      COLOR_PALLETTE_THUMBNAIL image NULL,
      CONSTRAINT PK_REPM_CP_CPID PRIMARY KEY(COLOR_PALLETTE_ID))');
    END
GO
IF NOT EXISTS (SELECT * FROM ADS_KEY_VALUE_OBJECTS WHERE  OBJECT_TYPE = 'REPM_REPORT')
    BEGIN
	INSERT INTO ADS_KEY_VALUE_OBJECTS (OBJECT_TYPE,OBJECT_TABLE,OBJECT_TABLE_COLUMN,OBJECT_PARENT_TYPE,OBJECT_PARENT_COLUMN_ID)
        SELECT 'REPM_REPORT','REPM_REPORTS','REPORT_ID','','';
	INSERT INTO ADS_KEY_VALUE_OBJECTS (OBJECT_TYPE,OBJECT_TABLE,OBJECT_TABLE_COLUMN,OBJECT_PARENT_TYPE,OBJECT_PARENT_COLUMN_ID)
        SELECT 'REPM_CHART','REPM_CHARTS','CHART_ID','','';
    END
GO
IF (SELECT COUNT(*) FROM APP_PREFERENCES WHERE PREFERENCE_NAME = 'SETTING_REPM_GRID_DEFAULT_PAGE_SIZE') = 0
    BEGIN
        EXECUTE('INSERT INTO APP_PREFERENCES(PREFERENCE_NAME,PREFERENCE_VALUE) VALUES (''SETTING_REPM_GRID_DEFAULT_PAGE_SIZE'',''100'')');
    END
GO
IF NOT EXISTS (SELECT MODULE_KEY FROM ADS_MODULES  WHERE MODULE_KEY ='com.ads.mm.permission.rpm')
BEGIN
    INSERT INTO ADS_MODULES(MODULE_ID, MODULE_NAME, MODULE_KEY, MODULE_ORDER, MODULE_FORWARD)
    SELECT 12, 'Reporting Manager', 'com.ads.mm.permission.rpm', 12, 'reportingmanager'
END
GO
IF NOT EXISTS (SELECT * FROM   SYSOBJECTS WHERE  ID = OBJECT_ID(N'ADS_OBJECT_TO_OBJECT_SCOPE') AND TYPE = 'U')
    BEGIN
    EXECUTE ('CREATE TABLE ADS_OBJECT_TO_OBJECT_SCOPE (
                OBJECT_TYPE_ID  VARCHAR(200) NULL,
                OBJECT_ID  VARCHAR(200) NULL,
                SCOPE_OBJECT_TYPE_ID  VARCHAR(200) NULL,
                SCOPE_OBJECT_ID  VARCHAR(200) NULL)');
    END
GO
IF NOT EXISTS (SELECT * FROM   SYSOBJECTS WHERE  ID = OBJECT_ID(N'ADS_PROFILES') AND TYPE = 'U')
    BEGIN
        EXECUTE ('CREATE TABLE ADS_PROFILES (
                    PROFILE_ID  BIGINT IDENTITY(1, 1),
                    PROFILE_NAME VARCHAR(300) NOT NULL,
                    PROFILE_TYPE VARCHAR(100) NOT NULL,
                    DESCRIPTION VARCHAR(4000) NULL,
                    OWNER_USER_ID VARCHAR(20) NOT NULL,
                    CONSTRAINT FK_ADS_PROFILES_OUID FOREIGN KEY(OWNER_USER_ID) REFERENCES USERS(USER_ID) ON DELETE CASCADE,
                    CONSTRAINT UK_ADS_PROFILES_PN UNIQUE(PROFILE_NAME,OWNER_USER_ID,PROFILE_TYPE),
                    CONSTRAINT PK_ADS_PROFILES_PID PRIMARY KEY(PROFILE_ID))');
    END
GO
IF NOT EXISTS (SELECT * FROM   SYSOBJECTS WHERE  ID = OBJECT_ID(N'ADS_PROFILES_DETAILS') AND TYPE = 'U')
    BEGIN
        EXECUTE ('CREATE TABLE ADS_PROFILES_DETAILS (
                    PROFILE_DETAILS_ID  BIGINT IDENTITY(1, 1),
                    PROFILE_ID  BIGINT NOT NULL,
                    PROFILE_DETAILS_NAME VARCHAR(400) NOT NULL,
                    PROFILE_DETAILS_VALUE VARCHAR(MAX) NOT NULL,
                    CONSTRAINT FK_ADS_PROF_DET_PID FOREIGN KEY(PROFILE_ID) REFERENCES ADS_PROFILES(PROFILE_ID) ON DELETE CASCADE,
                    CONSTRAINT UK_ADS_PROF_DET_PDN  UNIQUE(PROFILE_ID,PROFILE_DETAILS_NAME),
                    CONSTRAINT PK_ADS_PROF_DET_PID PRIMARY KEY(PROFILE_DETAILS_ID))');
    END
GO
IF NOT EXISTS (SELECT * FROM ADS_KEY_VALUE_OBJECTS WHERE  OBJECT_TYPE = 'ADS_USER')
    BEGIN
	INSERT INTO ADS_KEY_VALUE_OBJECTS (OBJECT_TYPE,OBJECT_TABLE,OBJECT_TABLE_COLUMN,OBJECT_PARENT_TYPE,OBJECT_PARENT_COLUMN_ID)
        SELECT 'ADS_USER','USER','USER_ID','',''
    END
GO
IF NOT EXISTS (SELECT * FROM ADS_KEY_VALUE_OBJECTS WHERE  OBJECT_TYPE = 'ADS_PROFILE')
    BEGIN
	INSERT INTO ADS_KEY_VALUE_OBJECTS (OBJECT_TYPE,OBJECT_TABLE,OBJECT_TABLE_COLUMN,OBJECT_PARENT_TYPE,OBJECT_PARENT_COLUMN_ID)
        SELECT 'ADS_PROFILE','ADS_PROFILES','PROFILE_ID','',''
    END
GO
IF NOT EXISTS (SELECT * FROM   SYSOBJECTS WHERE  ID = OBJECT_ID(N'ADS_OBJECT_CODESETS') AND TYPE = 'U')
    BEGIN
        EXECUTE ('CREATE TABLE ADS_OBJECT_CODESETS (
                    OBJECT_TYPE_ID  BIGINT NOT NULL,
                    OBJECT_ID BIGINT NOT NULL,
                    CODESET_ID BIGINT NOT NULL,
                    CONSTRAINT FK_OBJ_CDST_OBJ_TYPE_ID FOREIGN KEY(OBJECT_TYPE_ID) REFERENCES ADS_KEY_VALUE_OBJECTS(OBJECT_TYPE_ID) ON DELETE CASCADE,
                    CONSTRAINT FK_OBJ_CDST_ID FOREIGN KEY(CODESET_ID) REFERENCES CSM_CODESET(CODESET_ID) ON DELETE CASCADE,
                    CONSTRAINT "UK_ADS_OBJ_CDST" UNIQUE(OBJECT_TYPE_ID,OBJECT_ID,CODESET_ID))');
    END
GO
IF NOT EXISTS (SELECT * FROM SYSOBJECTS WHERE  ID = OBJECT_ID(N'CAT_WORKFLOWS') AND TYPE = 'U')
    BEGIN
    EXECUTE ( 'CREATE TABLE CAT_WORKFLOWS(
            WFLOW_ID INT IDENTITY(1,1),
            WFLOW_MODULE VARCHAR(50) NOT NULL,
            WFLOW_NAME VARCHAR(50)  NOT NULL,
            WFLOW_PARENT_ID INT DEFAULT -1,
            CREATED_BY VARCHAR(20) NOT NULL,
            CREATED_DATETIME DATETIME NOT NULL,
            MODIFIED_BY VARCHAR(20) NULL,
            MODIFIED_DATETIME DATETIME NULL,
            CONSTRAINT PK_WFLOW_ID PRIMARY KEY(WFLOW_ID))');
  END
GO
IF NOT EXISTS (SELECT * FROM SYSOBJECTS WHERE  ID = OBJECT_ID(N'CAT_WORKFLOW_PROPERTIES') AND TYPE = 'U')
    BEGIN
        EXECUTE ('CREATE TABLE CAT_WORKFLOW_PROPERTIES(
            WFLOW_PROPERTIES_ID INT IDENTITY(1,1),
            CAT_WORKFLOW_ID INT NOT NULL,
            WFLOW_PROPERTIES_TYPE VARCHAR(50) NOT NULL,
            WFLOW_PROPERTIES_VALUE VARCHAR(MAX),
            CREATED_BY VARCHAR(20) NOT NULL,
            CREATED_DATETIME DATETIME NOT NULL,
            CONSTRAINT PK_WFLOW_PROPERTIES_ID PRIMARY KEY(WFLOW_PROPERTIES_ID),
            CONSTRAINT FK_CAT_WORKFLOW_ID FOREIGN KEY(CAT_WORKFLOW_ID) REFERENCES CAT_WORKFLOWS(WFLOW_ID))');
  END
GO
IF COL_LENGTH('MAPPING_SPECIFICATION', 'SPEC_ARTIFACTS_REFERENCE') IS NULL
    BEGIN
        EXECUTE('ALTER TABLE MAPPING_SPECIFICATION ADD SPEC_ARTIFACTS_REFERENCE varchar(max) NULL');
    END
GO
IF NOT EXISTS (SELECT * FROM ADS_KEY_VALUE_OBJECTS WHERE  OBJECT_TYPE = 'REPM_CATEGORY')
    BEGIN
        INSERT INTO ADS_KEY_VALUE_OBJECTS (OBJECT_TYPE,OBJECT_TABLE,OBJECT_TABLE_COLUMN,OBJECT_PARENT_TYPE,OBJECT_PARENT_COLUMN_ID)
        SELECT 'REPM_CATEGORY','REPM_CATEGORIES','CATEGORY_ID','',''
    END
GO
IF (SELECT COUNT(*) FROM RM_HISTORYTYPE where HISTORYTYPENAME = 'EXECUTE') = 0
    BEGIN
        INSERT INTO RM_HISTORYTYPE (HISTORYTYPENAME, HISTORYTYPEDESC)
        (SELECT 'EXECUTE', 'Execute Query');
    END
GO
IF COL_LENGTH('CAT_TEMPLATES', 'CAT_TEMPLATE_VERSION') IS NULL
    BEGIN
        EXECUTE('ALTER TABLE CAT_TEMPLATES ADD CAT_TEMPLATE_VERSION varchar(50) NULL');
        EXECUTE('UPDATE CAT_TEMPLATES SET CAT_TEMPLATE_VERSION = ''7.0''');
    END
GO
IF NOT EXISTS (SELECT * FROM SYSOBJECTS  WHERE  ID = OBJECT_ID(N'CATFX_WORKFLOW')  AND TYPE = 'U')
    BEGIN
        EXECUTE ('CREATE TABLE CATFX_WORKFLOW(
        CATFX_WORKFLOW_ID int IDENTITY(1,1) NOT NULL,
        CATFX_TAB_ID int NULL,
        CATFX_WORKFLOW_NAME varchar(100) NULL,
        CATFX_WORKFLOW_DESCRIPTION varchar(4000) NULL,
        CREATED_BY  VARCHAR(20) NOT NULL,
        CREATED_DATE DATETIME  NOT NULL,
        LAST_MODIFIED_BY VARCHAR(20)  NULL,
        LAST_MODIFIED_DATE DATETIME  NULL,
        CONSTRAINT PK_CATFX_WORKFLOW_ID PRIMARY KEY(CATFX_WORKFLOW_ID))');
    END
GO
IF NOT EXISTS (SELECT * FROM SYSOBJECTS  WHERE  ID = OBJECT_ID(N'CATFX_WORKFLOW_COMPONENT')  AND TYPE = 'U')
    BEGIN
        EXECUTE ('CREATE TABLE CATFX_WORKFLOW_COMPONENT(
        CATFX_WORKFLOW_COMPONENT_ID int IDENTITY(1,1) NOT NULL,
        CATFX_COMPONENT_ID int NOT NULL,
        CATFX_COMPONENT_TYPE varchar(100) NOT NULL,
        CATFX_WORKFLOW_ID int NULL,
        CATFX_WORKFLOW_COMPONENT_NAME varchar(100) NULL,
        CATFX_WORKFLOW_COMP_PROPS varchar(4000) NULL,
        CREATED_BY  VARCHAR(20) NOT NULL,
        CREATED_DATE DATETIME  NOT NULL,
        LAST_MODIFIED_BY VARCHAR(20)  NULL,
        LAST_MODIFIED_DATE DATETIME  NULL,
        CONSTRAINT PK_CATFX_WORKFLOW_COMP_ID PRIMARY KEY(CATFX_WORKFLOW_COMPONENT_ID),
        CONSTRAINT FK_CATFX_WORKFLOW_COMP_ID FOREIGN KEY(CATFX_WORKFLOW_ID) REFERENCES CATFX_WORKFLOW(CATFX_WORKFLOW_ID) ON DELETE CASCADE)');
    END
GO
IF NOT EXISTS (SELECT * FROM SYSOBJECTS  WHERE  ID = OBJECT_ID(N'CATFX_WORKFLOW_CONNECTION')  AND TYPE = 'U')
    BEGIN
        EXECUTE ('CREATE TABLE CATFX_WORKFLOW_CONNECTION(
        CATFX_WORKFLOW_CONNECTION_ID int IDENTITY(1,1) NOT NULL,
        CATFX_WORKFLOW_ID int NULL,
        CATFX_WORKFLOW_CONN_PROPS varchar(4000) NULL,
        CREATED_BY  VARCHAR(20)  NOT NULL,
        CREATED_DATE DATETIME  NOT NULL,
        LAST_MODIFIED_BY VARCHAR(20)  NULL,
        LAST_MODIFIED_DATE DATETIME  NULL,
        CONSTRAINT PK_CATFX_WORKFLOW_CON_ID PRIMARY KEY(CATFX_WORKFLOW_CONNECTION_ID),
        CONSTRAINT FK_CATFX_WORKFLOW_CON_ID FOREIGN KEY(CATFX_WORKFLOW_ID) REFERENCES CATFX_WORKFLOW(CATFX_WORKFLOW_ID) ON DELETE CASCADE)');
    END
GO
IF NOT EXISTS (SELECT * FROM SYSOBJECTS  WHERE  ID = OBJECT_ID(N'CATFX_WORKFLOW_CON_COMPONENT')  AND TYPE = 'U')
    BEGIN
        EXECUTE ('CREATE TABLE CATFX_WORKFLOW_CON_COMPONENT(
        CATFX_WORKFLOW_CON_COMP_ID int IDENTITY(1,1) NOT NULL,
        CATFX_WORKFLOW_COMPONENT_ID int NULL,
        CATFX_WORKFLOW_CONNECTION_ID int NULL,
        CATFX_WORKFLOW_CON_COMP_TYPE CHAR(1) NULL,
        CONSTRAINT PK_CATFX_WORKFLOW_CON_COMP_ID PRIMARY KEY(CATFX_WORKFLOW_CON_COMP_ID),
        CONSTRAINT FK_CATFX_WORKFLOW_CON_ID_COMP FOREIGN KEY(CATFX_WORKFLOW_CONNECTION_ID) REFERENCES CATFX_WORKFLOW_CONNECTION(CATFX_WORKFLOW_CONNECTION_ID),
        CONSTRAINT FK_CATFX_WORKFLOW_COMP_ID_COMP FOREIGN KEY(CATFX_WORKFLOW_COMPONENT_ID) REFERENCES CATFX_WORKFLOW_COMPONENT(CATFX_WORKFLOW_COMPONENT_ID) ON DELETE CASCADE)');
    END
GO
IF NOT EXISTS (SELECT * FROM SYSOBJECTS  WHERE  ID = OBJECT_ID(N'CATFX_SCRIPT')  AND TYPE = 'U')
    BEGIN
    EXECUTE ('CREATE TABLE CATFX_SCRIPT(
        CATFX_SCRIPT_ID int IDENTITY(1,1) NOT NULL,
        CATFX_TAB_ID int NULL,
        CATFX_SCRIPT_NAME varchar(100) NULL,
        CREATED_BY  VARCHAR(20) NOT NULL,
        CREATED_DATE DATETIME  NOT NULL,
        LAST_MODIFIED_BY VARCHAR(100)  NULL,
        LAST_MODIFIED_DATE DATETIME  NULL)');
    END
GO
IF NOT EXISTS (SELECT * FROM SYSOBJECTS  WHERE ID = OBJECT_ID(N'CATFX_CAT_COMPONENT')  AND TYPE = 'U')
    BEGIN
        EXECUTE ('CREATE TABLE CATFX_CAT_COMPONENT(
        CATFX_CAT_COMPONENT_ID INT IDENTITY(1,1) NOT NULL,
        CAT_ID INT NOT NULL,
        CAT_COMPONENT_ID INT NOT NULL,
        CAT_COMPONENT_TYPE varchar(1) NOT NULL,
        CONSTRAINT PK_CATFX_CAT_COMP_ID PRIMARY KEY(CATFX_CAT_COMPONENT_ID),
        CONSTRAINT FK_CATFX_CAT_COMP_CAT_ID FOREIGN KEY(CAT_ID) REFERENCES CAT_TEMPLATES(CAT_ID) ON DELETE CASCADE)');
    END
GO
IF NOT EXISTS (SELECT * FROM SYSOBJECTS  WHERE  ID = OBJECT_ID(N'CATFX_PROFILE_COMPONENT')  AND TYPE = 'U')
  BEGIN
    EXECUTE ('CREATE TABLE CATFX_PROFILE_COMPONENT(
    CATFX_PROFILE_COMPONENT_ID int IDENTITY(1,1) NOT NULL,
    CAT_DIALOG_PROFILE_ID int NULL,
    CAT_COMPONENT_ID int NULL,
    CAT_COMPONENT_TYPE VARCHAR(1) NULL,
    CREATED_BY  VARCHAR(20) NOT NULL,
    CREATED_DATE DATETIME  NOT NULL,
    LAST_MODIFIED_BY VARCHAR(20)  NULL,
    LAST_MODIFIED_DATE DATETIME  NULL,
    CONSTRAINT PK_CATFX_PROFILE_COMPONENT_ID PRIMARY KEY(CATFX_PROFILE_COMPONENT_ID),
    CONSTRAINT FK_CATFX_DIALOG_PROFILE_ID FOREIGN KEY(CAT_DIALOG_PROFILE_ID) REFERENCES CAT_DIALOG_PROFILE(CAT_DIALOG_PROFILE_ID) ON DELETE CASCADE)');
  END
GO
IF NOT EXISTS (SELECT * FROM SYSOBJECTS  WHERE  ID = OBJECT_ID(N'CATFX_DIALOG_COMPONENT')  AND TYPE = 'U')
    BEGIN
    EXECUTE ('CREATE TABLE CATFX_DIALOG_COMPONENT(
    CATFX_DIALOG_COMPONENT_ID int IDENTITY(1,1) NOT NULL,
    CAT_DIALOG_ID int NULL,
    CAT_COMPONENT_ID int NULL,
    CAT_COMPONENT_TYPE VARCHAR(1) NULL,
    CREATED_BY  VARCHAR(20)  NOT NULL,
    CREATED_DATE DATETIME  NOT NULL,
    LAST_MODIFIED_BY VARCHAR(20)  NULL,
    LAST_MODIFIED_DATE DATETIME  NULL,
    CONSTRAINT PK_CATFX_DIALOG_COMPONENT_ID PRIMARY KEY(CATFX_DIALOG_COMPONENT_ID),
    CONSTRAINT FK_CATFX_DIALOG_ID FOREIGN KEY(CAT_DIALOG_ID) REFERENCES CAT_DIALOG(CAT_DIALOG_ID) ON DELETE CASCADE)');
 END
GO

DECLARE @CONSTRAINT_NAME VARCHAR(300), @SQL_QUERY VARCHAR(1000);
IF EXISTS(SELECT * FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS WHERE TABLE_NAME='CAT_DIALOG' AND CONSTRAINT_TYPE = 'FOREIGN KEY')
BEGIN
	SELECT @CONSTRAINT_NAME = CONSTRAINT_NAME FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS WHERE TABLE_NAME='CAT_DIALOG' AND CONSTRAINT_TYPE = 'FOREIGN KEY'
	SET @SQL_QUERY = 'ALTER TABLE CAT_DIALOG  DROP CONSTRAINT '+@CONSTRAINT_NAME;
	EXEC(@SQL_QUERY);
END
GO
IF (OBJECTPROPERTY(OBJECT_ID(N'[CAT_DIALOG_DATA_MGRN_PROC]'),N'IsProcedure') = 1)
BEGIN
    DROP PROCEDURE CAT_DIALOG_DATA_MGRN_PROC
END
GO
CREATE PROCEDURE CAT_DIALOG_DATA_MGRN_PROC
AS
DECLARE  @CAT_ID INT,@CAT_DIALOG_ID INT, @DIALOG_COUNT INT, @INITIAL_VALUE INT = 1;
DECLARE @CAT_DIALOG TABLE
(
ID INT IDENTITY(1,1),
CAT_ID INT,
DIALOG_ID VARCHAR(50)
);
	BEGIN
	INSERT @CAT_DIALOG(CAT_ID,DIALOG_ID) SELECT CAT_ID,CAT_DIALOG_ID FROM CAT_DIALOG;
	SELECT @DIALOG_COUNT = COUNT(CAT_DIALOG_ID) FROM CAT_DIALOG;
		WHILE (@INITIAL_VALUE <= @DIALOG_COUNT)
		BEGIN
			SELECT @CAT_ID = CAT_ID, @CAT_DIALOG_ID = DIALOG_ID FROM @CAT_DIALOG WHERE ID = @INITIAL_VALUE;
			INSERT INTO CATFX_CAT_COMPONENT(CAT_ID, CAT_COMPONENT_ID, CAT_COMPONENT_TYPE) VALUES (@CAT_ID,@CAT_DIALOG_ID,'D');
			SET @INITIAL_VALUE = @INITIAL_VALUE + 1
		END;
	END;
GO
IF NOT EXISTS(SELECT * FROM CATFX_CAT_COMPONENT)
BEGIN
    EXEC CAT_DIALOG_DATA_MGRN_PROC;
END
GO
IF EXISTS (SELECT * FROM ADS_MM_VERSION WHERE VALUE <= '7.1')
BEGIN
    DECLARE @ORD_PREF_VAL VARCHAR(100)= 'HEADER_ORDER_PREFERENCE';
    DECLARE @VIS_PREF_VAL VARCHAR(100)= 'HEADER_VISIBILITY_PREFERENCE';
    DECLARE @USER_ID VARCHAR(100);
    DECLARE @PROJ_ID VARCHAR(100);
    DECLARE @PROF_TYPE VARCHAR(10);
    DECLARE @PROF_DET_ID INT;
	DECLARE @CUR_PROF_STR VARCHAR(MAX);
	DECLARE @CUR_PREF_HISTDESC VARCHAR(MAX);
    IF OBJECT_ID('tempdb..#USR_PREF_MAP') IS NOT NULL
    DROP TABLE #USR_PREF_MAP;
    IF OBJECT_ID('tempdb..#USR_MAP') IS NOT NULL
    DROP TABLE #USR_MAP;
    SELECT LTRIM(RTRIM(REPLACE(USER_ID, @ORD_PREF_VAL + '_', ''))) USER_ID, COLUMN_PREFERENCES, @ORD_PREF_VAL  AS PREF_NAME  INTO #USR_PREF_MAP FROM USER_PREFERENCES
    WHERE USER_ID LIKE @ORD_PREF_VAL + '_' + '%'
    UNION
    SELECT LTRIM(RTRIM(REPLACE(USER_ID, @VIS_PREF_VAL + '_', ''))) USER_ID, COLUMN_PREFERENCES, @VIS_PREF_VAL FROM USER_PREFERENCES
    WHERE  USER_ID LIKE @VIS_PREF_VAL+ '_' +'%';
    SELECT DISTINCT UP.USER_ID INTO #USR_MAP FROM #USR_PREF_MAP UP JOIN USERS U ON UP.USER_ID = U.USER_ID;
    While (Select Count(*) From #USR_MAP) > 0
    BEGIN
	IF OBJECT_ID('tempdb..#PROJ_MAP') IS NOT NULL
	DROP TABLE #PROJ_MAP;
	SELECT DISTINCT CONVERT(VARCHAR(MAX), PROJ_ID) PROJ_ID INTO #PROJ_MAP FROM PROJECT;
		SET @PROF_TYPE = 'User';
        Select Top 1 @USER_ID = USER_ID From #USR_MAP
		EXECUTE('INSERT INTO ADS_PROFILES (PROFILE_NAME,PROFILE_TYPE,DESCRIPTION,OWNER_USER_ID) VALUES (''Default'','''+@prof_type+''',''System Generated Profile'','''+@USER_ID+''')');
		declare @PROF_ID INT = @@IDENTITY;
		While (Select Count(*) From #USR_PREF_MAP WHERE USER_ID=@USER_ID) > 0
                BEGIN
                    declare @CUR_PREF_NAME VARCHAR(100);
                    declare @CUR_PREF_VAL VARCHAR(MAX);
                    Select Top 1 @CUR_PREF_NAME = PREF_NAME,@CUR_PREF_VAL = COLUMN_PREFERENCES From #USR_PREF_MAP WHERE USER_ID=@USER_ID;
                    EXECUTE('INSERT INTO ADS_PROFILES_DETAILS (PROFILE_ID,PROFILE_DETAILS_NAME,PROFILE_DETAILS_VALUE) VALUES ('''+@PROF_ID+''','''+@CUR_PREF_NAME+''','''+@CUR_PREF_VAL+''')');
                    Delete #USR_PREF_MAP Where PREF_NAME = @CUR_PREF_NAME and USER_ID=@USER_ID;
		End
		SET @CUR_PROF_STR = CONVERT(VARCHAR(MAX), @PROF_ID);
		WHILE (SELECT Count(*) FROM #PROJ_MAP ) > 0
                BEGIN
                    Select Top 1 @PROJ_ID = PROJ_ID From #PROJ_MAP;
                    EXECUTE('INSERT INTO USER_PREFERENCES (USER_ID,COLUMN_PREFERENCES) VALUES (''MM_PROJECT_USER_PROFILE_PREFERENCE_'+@USER_ID+ '_' + @PROJ_ID + ''','''+@CUR_PROF_STR+''')');
                    Delete #PROJ_MAP Where PROJ_ID=@PROJ_ID;
		END
		EXECUTE('INSERT INTO ADS_OBJECT_TO_OBJECT_SCOPE (OBJECT_TYPE_ID,OBJECT_ID,SCOPE_OBJECT_TYPE_ID,SCOPE_OBJECT_ID) SELECT (SELECT OBJECT_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE = ''ADS_PROFILE''),'+@PROF_ID+',(SELECT OBJECT_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE = ''MM_PROJECT''),-1');
		SET @CUR_PREF_HISTDESC = '{profileId:'+CONVERT(VARCHAR(MAX), @PROF_ID)+',profileName:Default,profileType:'+@PROF_TYPE+',description:System Generated Profile, ownerUserId:'+@USER_ID+'}';
		EXECUTE('INSERT INTO RM_HISTORY (HISTORYTYPEID ,HISTORYDESC ,OBJECTID ,OBJECTTYPEID ,HISTORYDATESTAMP ,USER_ID) SELECT (SELECT HISTORYTYPEID FROM RM_HISTORYTYPE WHERE HISTORYTYPENAME = ''ADD''),'''+@CUR_PREF_HISTDESC+''','''+@CUR_PROF_STR+''', (SELECT OBJECT_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE = ''ADS_PROFILE''),CURRENT_TIMESTAMP,'''+@USER_ID+'''');
        Delete #USR_MAP Where USER_ID = @USER_ID
    END
	SET @PROF_TYPE= 'Site';
    SET @USER_ID= 'Administrator';

    EXECUTE('INSERT INTO ADS_PROFILES (PROFILE_NAME,PROFILE_TYPE,DESCRIPTION,OWNER_USER_ID) VALUES (''Default'','''+@PROF_TYPE+''',''System Generated Profile'',''Administrator'')');
    SET @PROF_ID = @@IDENTITY;
    EXECUTE('INSERT INTO ADS_PROFILES_DETAILS (PROFILE_ID,PROFILE_DETAILS_NAME,PROFILE_DETAILS_VALUE) VALUES ('+@PROF_ID+','''+@ORD_PREF_VAL+''',''-:0,slNo:40,SrcSysName:100,SrcEnvName:100,SrcTabName:100,SrcColName:100,SrcColDataType:100,SrcColLen:100,BusinessRule:200,ExtendedBusRuleTransformation:200,TgtSysName:100,TgtEnvName:100,TgtTabName:100,TgtColName:100,TgtColDataType:100,TgtColLen:100,CreatedBy:100,CreatedDate:100,TgtColPrecision:0,TgtColScale:0,TgtColNullableFlag:0,TgtColETLDefaultValue:0,TgtColDef:0,TgtColComments:0,TgtNaturalKeyFlag:0,TgtPrimaryKeyFlag:0,TgtLogicalColName:0,TgtSdiFlag:0,TgtSdiDescription:0,TgtXPath:0,TgtTableClass:0,TgtTableAlias:0,TgtColumnClass:0,TgtColumnAlias:0,TgtBusinessKeyFlag:0,CSMMapping:0,SpecificationArtifacts:0,LookupReferenceColumn:0,LookupOn:0,TransLookupCondition:0,SrcColPrecision:0,SrcColScale:0,SrcColDBDefaultValue:0,SrcColDef:0,SrcColComments:0,SrcColIdentityFlag:0,SrcColNullableFlag:0,SrcPercentNullValue:0,SrcNaturalKeyFlag:0,SrcPrimaryKeyFlag:0,SrcLogicalColName:0,SrcSdiFlag:0,SrcSdiDescription:0,SrcXPath:0,SrcTableClass:0,SrcTableAlias:0,SrcColumnClass:0,SrcColumnAlias:0,SrcBusinessKeyFlag:0,SrcMinValue:0,SrcMaxValue:0,Status:0,LastModifiedBy:100,LastmodifiedDateTime:100,MapSeqId:0,UserDefination1:0,UserDefination2:0,UserDefination3:0,UserDefination4:0,UserDefination5:0,UserDefination6:0,UserDefination7:0,UserDefination8:0,UserDefination9:0,UserDefination10:0,UserDefinition11:0,UserDefinition12:0,UserDefinition13:0,UserDefinition14:0,UserDefinition15:0,UserDefinition16:0,UserDefinition17:0,UserDefinition18:0,UserDefinition19:0,UserDefinition20:0,UserDefinition21:0,UserDefinition22:0,UserDefinition23:0,UserDefinition24:0,UserDefinition25:0,UserDefinition26:0,UserDefinition27:0,UserDefinition28:0,UserDefinition29:0,UserDefinition30:0,UserDefinition31:0,UserDefinition32:0,UserDefinition33:0,UserDefinition34:0,UserDefinition35:0,UserDefinition36:0,UserDefinition37:0,UserDefinition38:0,UserDefinition39:0,UserDefinition40:0,UserDefinition41:0,UserDefinition42:0,UserDefinition43:0,UserDefinition44:0,UserDefinition45:0,UserDefinition46:0,UserDefinition47:0,UserDefinition48:0,UserDefinition49:0,UserDefinition50:0,MappingSpecRowComments:0,RowOrder:0'')');
    EXECUTE('INSERT INTO ADS_PROFILES_DETAILS (PROFILE_ID,PROFILE_DETAILS_NAME,PROFILE_DETAILS_VALUE) VALUES ('+@PROF_ID+','''+@VIS_PREF_VAL+''',''-,slNo,TgtSysName,TgtEnvName,TgtTabName,TgtColName,TgtColDataType,TgtColLen,,,,,,,,,,,,,,,,,,,,BusinessRule,ExtendedBusRuleTransformation,,,,SrcSysName,SrcEnvName,SrcTabName,SrcColName,SrcColDataType,SrcColLen,,,,,,,,,,,,,,,,,,,,,,,LastModifiedBy,LastmodifiedDateTime,CreatedBy,CreatedDate,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,'')');
    EXECUTE('INSERT INTO ADS_OBJECT_TO_OBJECT_SCOPE (OBJECT_TYPE_ID,OBJECT_ID,SCOPE_OBJECT_TYPE_ID,SCOPE_OBJECT_ID) SELECT (SELECT OBJECT_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE = ''ADS_PROFILE''),'+@PROF_ID+',(SELECT OBJECT_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE = ''MM_PROJECT''),-1');
    EXECUTE('INSERT INTO ADS_OBJECT_TO_OBJECT_SCOPE (OBJECT_TYPE_ID,OBJECT_ID,SCOPE_OBJECT_TYPE_ID,SCOPE_OBJECT_ID) SELECT (SELECT OBJECT_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE = ''ADS_PROFILE''),'+@PROF_ID+',(SELECT OBJECT_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE = ''ADS_USER''),-1');
	SET @CUR_PROF_STR  = CONVERT(VARCHAR(MAX), @PROF_ID);
	SET @CUR_PREF_HISTDESC = '{profileId:'+@CUR_PROF_STR+',profileName:Default,profileType:'+@PROF_TYPE+',description:System Generated Profile, ownerUserId:'+@USER_ID+'}';
	EXECUTE('INSERT INTO RM_HISTORY (HISTORYTYPEID ,HISTORYDESC ,OBJECTID ,OBJECTTYPEID ,HISTORYDATESTAMP ,USER_ID) SELECT (SELECT HISTORYTYPEID FROM RM_HISTORYTYPE WHERE HISTORYTYPENAME = ''ADD''),'''+@CUR_PREF_HISTDESC+''','''+@CUR_PROF_STR+''', (SELECT OBJECT_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE = ''ADS_PROFILE''),CURRENT_TIMESTAMP,'''+@USER_ID+'''');
      IF EXISTS (SELECT * FROM USER_PREFERENCES WHERE USER_ID LIKE 'HEADER_ORDER_PREFERENCE%' OR USER_ID LIKE 'HEADER_VISIBILITY_PREFERENCE%')
        BEGIN
            EXECUTE('DELETE FROM USER_PREFERENCES WHERE USER_ID LIKE ''%HEADER_ORDER_PREFERENCE%''');
           EXECUTE('DELETE FROM USER_PREFERENCES WHERE USER_ID LIKE ''%HEADER_VISIBILITY_PREFERENCE%''');
       END
END
GO
IF COL_LENGTH('REQM_SPECIFICATION', 'PROGRESS_STATUS') IS NULL
    BEGIN
        EXECUTE SYS.SP_RENAME @OBJNAME = N'[REQM_SPECIFICATION].[STATUS]', @NEWNAME = N'PROGRESS_STATUS', @OBJTYPE = 'COLUMN'
    END
GO
IF COL_LENGTH('REQM_SPECIFICATION', 'STATUS') IS NULL
    BEGIN
        EXECUTE('ALTER TABLE REQM_SPECIFICATION ADD STATUS VARCHAR(20) DEFAULT ''Active''');
        EXECUTE('UPDATE REQM_SPECIFICATION SET STATUS = ''Active''');
        EXECUTE('ALTER TABLE REQM_SPECIFICATION ADD SPEC_VERSION DECIMAL(16,2) DEFAULT 1.00');
        EXECUTE('UPDATE REQM_SPECIFICATION SET SPEC_VERSION = 1.00');
        EXECUTE('ALTER TABLE REQM_SPECIFICATION DROP CONSTRAINT UK_REQM_SPECIFICATION_NAME');
        EXECUTE('ALTER TABLE REQM_SPECIFICATION ADD CONSTRAINT UK_REQM_SPEC_NAME UNIQUE (SPEC_NAME, SPEC_VERSION ,PROJECT_ID,SUBJECT_ID)');
        EXECUTE('ALTER TABLE REQM_SPECIFICATION ADD SPEC_VERSION_LABEL VARCHAR(50)');
        EXECUTE('ALTER TABLE REQM_SPECIFICATION ADD SPEC_CHANGED_DESC VARCHAR(4000)');
    END
GO

IF NOT EXISTS (SELECT * FROM ADS_KEY_VALUE_OBJECTS WHERE  OBJECT_TYPE = 'REPM_DASHBOARD')
    BEGIN
	INSERT INTO ADS_KEY_VALUE_OBJECTS (OBJECT_TYPE,OBJECT_TABLE,OBJECT_TABLE_COLUMN,OBJECT_PARENT_TYPE,OBJECT_PARENT_COLUMN_ID)
        SELECT 'REPM_DASHBOARD','REPM_DASHBOARDS','DASHBOARD_ID','',''
        UNION ALL
        SELECT 'REPM_CHART','REPM_CHARTS','CHART_ID','',''
    END
GO
IF NOT EXISTS (SELECT * FROM   USER_PREFERENCES WHERE  USER_ID LIKE 'RQM_SPECIFICATION_VERSION_LABEL_PREFERENCE%')
    INSERT INTO USER_PREFERENCES (USER_ID,COLUMN_PREFERENCES) VALUES('RQM_SPECIFICATION_VERSION_LABEL_PREFERENCE_REQUIREMENTS_MANAGER_Administrator','true')
GO
IF NOT EXISTS (SELECT * FROM SYSOBJECTS WHERE  ID = OBJECT_ID(N'BG_CATEGORIES') AND TYPE = 'U')
  BEGIN
    EXECUTE ('CREATE TABLE BG_CATEGORIES (CATEGORY_ID	BIGINT IDENTITY(1,1) NOT NULL, PARENT_CATEGORY_ID BIGINT NOT NULL DEFAULT -1, CATEGORY_NAME VARCHAR(250) NULL ,      DESCRIPTION		VARCHAR(4000) NULL ,   CONSTRAINT BG_CATEGORIES_CATEGORY_ID PRIMARY KEY(CATEGORY_ID) ,CONSTRAINT UK_BGM_CATEGORIES_CAT_ID_NAME UNIQUE (CATEGORY_ID, CATEGORY_NAME))');
  END
GO
IF NOT EXISTS (SELECT *  FROM   SYSOBJECTS WHERE  ID = OBJECT_ID(N'BUSINESS_TERMS') AND TYPE = 'U')
  BEGIN
      EXECUTE ('CREATE TABLE BUSINESS_TERMS   (BUS_TERM_ID BIGINT  IDENTITY(1,1) NOT NULL, CATEGORY_ID BIGINT NOT NULL , BUS_TERM_NAME VARCHAR(250) NOT NULL ,      DEFINITION		VARCHAR(4000) NULL , DESCRIPTION		VARCHAR(4000) NULL ,  ACRONYM   VARCHAR(1) NOT NULL DEFAULT ''N'' , VALID BIT DEFAULT 1 NOT NULL,PUBLISH   VARCHAR(1) NOT NULL DEFAULT ''N'' ,NOTES		VARCHAR(4000) NULL ,TERM_IMAGE VARCHAR(MAX) NULL , STATUS   BIGINT NOT NULL DEFAULT 1 ,DATA_CLASSIFICATION_TYPE   BIGINT NOT NULL DEFAULT -1, DATA_OBJECT_TYPE   BIGINT NOT NULL DEFAULT -1 , DATA_COLLECTION_TYPE   BIGINT NOT NULL DEFAULT -1 ,MEANING_CATEGORY_TYPE   BIGINT NOT NULL DEFAULT -1 , DATA_STEWARD_NAME   BIGINT NOT NULL DEFAULT -1 , USER_DEFINED_1   VARCHAR(max) NULL ,USER_DEFINED_2   VARCHAR(max) NULL ,USER_DEFINED_3   VARCHAR(max) NULL ,USER_DEFINED_4   VARCHAR(max) NULL ,USER_DEFINED_5   VARCHAR(max) NULL ,USER_DEFINED_6   VARCHAR(max) NULL ,USER_DEFINED_7   VARCHAR(max) NULL ,USER_DEFINED_8   VARCHAR(max) NULL ,USER_DEFINED_9   VARCHAR(max) NULL ,USER_DEFINED_10   VARCHAR(max) NULL , CONSTRAINT BUSINESS_TERMS_BUS_TERM_ID PRIMARY KEY(BUS_TERM_ID) ,CONSTRAINT FK_BT_CATEGORY_ID FOREIGN KEY(CATEGORY_ID) REFERENCES BG_CATEGORIES(CATEGORY_ID) ON DELETE CASCADE, CONSTRAINT UK_BGM_TERMS_CAT_ID_NAME UNIQUE (CATEGORY_ID, BUS_TERM_NAME))');
  END
GO
IF NOT EXISTS (SELECT * FROM   SYSOBJECTS WHERE  ID = OBJECT_ID(N'BG_ASSOCIATED_BUSINESS_TERMS') AND TYPE = 'U')
  BEGIN
      EXECUTE ('CREATE TABLE BG_ASSOCIATED_BUSINESS_TERMS   (BUS_TERM_ID BIGINT NOT NULL ,ASSOC_BUS_TERM_ID	BIGINT NOT NULL,  CONSTRAINT ASSOC_BUS_TERMS_ABT_ID PRIMARY KEY(ASSOC_BUS_TERM_ID, BUS_TERM_ID) , CONSTRAINT FK_ABT_BUS_TERM_ID FOREIGN KEY(BUS_TERM_ID) REFERENCES BUSINESS_TERMS(BUS_TERM_ID), CONSTRAINT FK_ABT_ASSOC_BUS_TERM_ID FOREIGN KEY(ASSOC_BUS_TERM_ID) REFERENCES BUSINESS_TERMS(BUS_TERM_ID)  )');
  END
GO
IF NOT EXISTS (SELECT * FROM   SYSOBJECTS WHERE  ID = OBJECT_ID(N'BG_ASSO_TECHNICAL_METADATA') AND TYPE = 'U')
  BEGIN
      EXECUTE ('CREATE TABLE BG_ASSO_TECHNICAL_METADATA   (ASSOC_TECH_META_DATA_ID	BIGINT IDENTITY(1,1) NOT NULL, BUS_TERM_ID	BIGINT NOT NULL, OBJECT_TYPE_ID BIGINT NOT NULL ,OBJECT_ID VARCHAR(max) NULL, CONSTRAINT BG_ASSOC_TECH_MD_ATM_ID PRIMARY KEY(ASSOC_TECH_META_DATA_ID) , CONSTRAINT FK_ATM_BT_ID FOREIGN KEY(BUS_TERM_ID) REFERENCES BUSINESS_TERMS(BUS_TERM_ID) ON DELETE CASCADE, CONSTRAINT FK_BG_ATM_OBJECT_TYPE_ID FOREIGN KEY(OBJECT_TYPE_ID) REFERENCES ADS_KEY_VALUE_OBJECTS(OBJECT_TYPE_ID) ON DELETE CASCADE)');
  END
GO
IF NOT EXISTS (SELECT * FROM ADS_KEY_VALUE_OBJECTS WHERE  OBJECT_TYPE = 'BGM_CATEGORY')
    BEGIN
        INSERT INTO ADS_KEY_VALUE_OBJECTS (OBJECT_TYPE,OBJECT_TABLE,OBJECT_TABLE_COLUMN,OBJECT_PARENT_TYPE,OBJECT_PARENT_COLUMN_ID)
            SELECT 'BGM_CATEGORY','BG_CATEGORIES','CATEGORY_ID','',''
            UNION ALL
            SELECT 'BGM_TERM','BUSINESS_TERMS','BUS_TERM_ID','BGM_CATEGORY','CATEGORY_ID'
    END
GO
IF COL_LENGTH('ADS_KEY_VALUE', 'ISPUBLISHED') IS NULL
    BEGIN
        ALTER TABLE ADS_KEY_VALUE ADD ISPUBLISHED INT NULL
    END
GO
IF COL_LENGTH('ADS_KEY_VALUE', 'ISSYSTEMBASED') IS NULL
    BEGIN
        ALTER TABLE ADS_KEY_VALUE ADD ISSYSTEMBASED INT NULL
    END
GO
IF NOT EXISTS (SELECT * FROM MT_DEFINITION WHERE  MTD_NAME = 'BGM_DATA_CLASSIFICATION_TYPE')
    BEGIN
        INSERT INTO MT_DEFINITION (MTD_NAME,MTD_DESC,ADS_MODULE)
        SELECT 'BGM_DATA_CLASSIFICATION_TYPE','BGM_DATA_CLASSIFICATION_TYPE','BGM'
        UNION ALL
        SELECT 'BGM_DATA_OBJECT_TYPE','BGM_DATA_OBJECT_TYPE','BGM'
        UNION ALL
        SELECT 'BGM_DATA_COLLECTION_TYPE','BGM_DATA_COLLECTION_TYPE','BGM'
        UNION ALL
        SELECT 'BGM_MEANING_CATEGORY_TYPE','BGM_MEANING_CATEGORY_TYPE','BGM'
        UNION ALL
        SELECT 'BGM_GLOSSARY_STATUS','BGM_GLOSSARY_STATUS','BGM'
    END
GO
IF NOT EXISTS(SELECT * FROM SYS.VIEWS WHERE NAME = 'V_STCM_JSON')
    BEGIN
        EXEC ('create view V_STCM_JSON as select sdd.SYSTEM_ID,sdd.SYSTEM_NAME,sce.SCE_ID, sce.SYSTEM_ENVIRONMENT_NAME,stm.STM_ID,stm.TABLE_NAME, stcm.COLUMN_NAME,
            (''{SDD:'' + sdd.SYSTEM_NAME + '',SCE:'' + sce.SYSTEM_ENVIRONMENT_NAME + '',STM:'' + stm.TABLE_NAME + '',SCTM:'' + stcm.COLUMN_NAME + ''}'') as json, stcm.valid, stcm.stcm_id
            from SYSTEM_TABLE_COLUMNS_METADATA as STCM
            left join SYSTEM_TABLE_METADATA as STM on STM.stm_id = STCM.STM_ID
            left join SYS_CON_ENVIRONMENTS as SCE on SCE.sce_id = STM.sce_id
            left join SYSTEM_DEFINITION_DETAILS as SDD on SDD.SYSTEM_ID = SCE.SYSTEM_ID');
    END
GO
DECLARE @OBJECT_TYPE_ID INT,@OBJECT_ID INT;
SELECT @OBJECT_TYPE_ID =  OBJECT_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE='MT_DEFINITION';
SELECT @OBJECT_ID =  MTD_ID FROM MT_DEFINITION WHERE  MTD_NAME = 'BGM_DATA_CLASSIFICATION_TYPE' AND ADS_MODULE = 'BGM';
IF NOT EXISTS (SELECT * FROM ADS_KEY_VALUE WHERE  KEY_NAME = 'Master' and OBJECT_TYPE_ID = @OBJECT_TYPE_ID)
    BEGIN
	INSERT INTO ADS_KEY_VALUE(KEY_NAME,KEY_VALUE,OBJECT_TYPE_ID,OBJECT_ID,DATATYPE_ID,KV_ORDER,ISPUBLISHED)
	VALUES('Master','Master',@OBJECT_TYPE_ID,@OBJECT_ID,'1','1','1')
	INSERT INTO ADS_KEY_VALUE(KEY_NAME,KEY_VALUE,OBJECT_TYPE_ID,OBJECT_ID,DATATYPE_ID,KV_ORDER,ISPUBLISHED)
	VALUES('Reference','Reference',@OBJECT_TYPE_ID,@OBJECT_ID,'1','2','1')
	INSERT INTO ADS_KEY_VALUE(KEY_NAME,KEY_VALUE,OBJECT_TYPE_ID,OBJECT_ID,DATATYPE_ID,KV_ORDER,ISPUBLISHED)
	VALUES('Derived','Derived',@OBJECT_TYPE_ID,@OBJECT_ID,'1','3','1')
	INSERT INTO ADS_KEY_VALUE(KEY_NAME,KEY_VALUE,OBJECT_TYPE_ID,OBJECT_ID,DATATYPE_ID,KV_ORDER,ISPUBLISHED)
	VALUES('Transactional','Transactional',@OBJECT_TYPE_ID,@OBJECT_ID,'1','4','1')
	INSERT INTO ADS_KEY_VALUE(KEY_NAME,KEY_VALUE,OBJECT_TYPE_ID,OBJECT_ID,DATATYPE_ID,KV_ORDER,ISPUBLISHED)
	VALUES('Operational','Operational',@OBJECT_TYPE_ID,@OBJECT_ID,'1','5','1')
    END
GO
DECLARE @OBJECT_TYPE_ID INT,@OBJECT_ID INT ;
SELECT @OBJECT_TYPE_ID =  OBJECT_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE='MT_DEFINITION';
SELECT @OBJECT_ID =  MTD_ID FROM MT_DEFINITION WHERE  MTD_NAME = 'BGM_DATA_OBJECT_TYPE' AND ADS_MODULE = 'BGM';
IF NOT EXISTS (SELECT * FROM ADS_KEY_VALUE WHERE  KEY_NAME = 'Business Data Element' and OBJECT_TYPE_ID = @OBJECT_TYPE_ID)
    BEGIN
	INSERT INTO ADS_KEY_VALUE(KEY_NAME,KEY_VALUE,OBJECT_TYPE_ID,OBJECT_ID,DATATYPE_ID,KV_ORDER,ISPUBLISHED)
	VALUES('Business Data Element','Business Data Element',@OBJECT_TYPE_ID,@OBJECT_ID,'1','1','1')
	INSERT INTO ADS_KEY_VALUE(KEY_NAME,KEY_VALUE,OBJECT_TYPE_ID,OBJECT_ID,DATATYPE_ID,KV_ORDER,ISPUBLISHED)
	VALUES('Data Collection','Data Collection',@OBJECT_TYPE_ID,@OBJECT_ID,'1','2','1')
	INSERT INTO ADS_KEY_VALUE(KEY_NAME,KEY_VALUE,OBJECT_TYPE_ID,OBJECT_ID,DATATYPE_ID,KV_ORDER,ISPUBLISHED)
	VALUES('Physical Data Element','Physical Data Element',@OBJECT_TYPE_ID,@OBJECT_ID,'1','3','1')
    END
GO
DECLARE @OBJECT_TYPE_ID INT,@OBJECT_ID INT ;
SELECT @OBJECT_TYPE_ID =  OBJECT_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE='MT_DEFINITION';
SELECT @OBJECT_ID =  MTD_ID FROM MT_DEFINITION WHERE  MTD_NAME = 'BGM_DATA_COLLECTION_TYPE' AND ADS_MODULE = 'BGM';
IF NOT EXISTS (SELECT * FROM ADS_KEY_VALUE WHERE  KEY_NAME = 'Report' and OBJECT_TYPE_ID = @OBJECT_TYPE_ID)
    BEGIN
	INSERT INTO ADS_KEY_VALUE(KEY_NAME,KEY_VALUE,OBJECT_TYPE_ID,OBJECT_ID,DATATYPE_ID,KV_ORDER,ISPUBLISHED)
	VALUES('Report','Report',@OBJECT_TYPE_ID,@OBJECT_ID,'1','1','1')
	INSERT INTO ADS_KEY_VALUE(KEY_NAME,KEY_VALUE,OBJECT_TYPE_ID,OBJECT_ID,DATATYPE_ID,KV_ORDER,ISPUBLISHED)
	VALUES('Report Section','Report Section',@OBJECT_TYPE_ID,@OBJECT_ID,'1','2','1')
	INSERT INTO ADS_KEY_VALUE(KEY_NAME,KEY_VALUE,OBJECT_TYPE_ID,OBJECT_ID,DATATYPE_ID,KV_ORDER,ISPUBLISHED)
	VALUES('Screen','Screen',@OBJECT_TYPE_ID,@OBJECT_ID,'1','3','1')
	INSERT INTO ADS_KEY_VALUE(KEY_NAME,KEY_VALUE,OBJECT_TYPE_ID,OBJECT_ID,DATATYPE_ID,KV_ORDER,ISPUBLISHED)
	VALUES('Dashboard','Dashboard',@OBJECT_TYPE_ID,@OBJECT_ID,'1','4','1')
	INSERT INTO ADS_KEY_VALUE(KEY_NAME,KEY_VALUE,OBJECT_TYPE_ID,OBJECT_ID,DATATYPE_ID,KV_ORDER,ISPUBLISHED)
	VALUES('Extract','Extract',@OBJECT_TYPE_ID,@OBJECT_ID,'1','5','1')
	INSERT INTO ADS_KEY_VALUE(KEY_NAME,KEY_VALUE,OBJECT_TYPE_ID,OBJECT_ID,DATATYPE_ID,KV_ORDER,ISPUBLISHED)
	VALUES('API','API',@OBJECT_TYPE_ID,@OBJECT_ID,'1','6','1')
    END
GO
DECLARE @OBJECT_TYPE_ID INT,@OBJECT_ID INT ;
SELECT @OBJECT_TYPE_ID =  OBJECT_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE='MT_DEFINITION';
SELECT @OBJECT_ID =  MTD_ID FROM MT_DEFINITION WHERE  MTD_NAME = 'BGM_MEANING_CATEGORY_TYPE' AND ADS_MODULE = 'BGM';
IF NOT EXISTS (SELECT * FROM ADS_KEY_VALUE WHERE  KEY_NAME = 'Conceptual' and OBJECT_TYPE_ID = @OBJECT_TYPE_ID)
    BEGIN
	INSERT INTO ADS_KEY_VALUE(KEY_NAME,KEY_VALUE,OBJECT_TYPE_ID,OBJECT_ID,DATATYPE_ID,KV_ORDER,ISPUBLISHED)
	VALUES('Conceptual','Conceptual',@OBJECT_TYPE_ID,@OBJECT_ID,'1','1','1')
	INSERT INTO ADS_KEY_VALUE(KEY_NAME,KEY_VALUE,OBJECT_TYPE_ID,OBJECT_ID,DATATYPE_ID,KV_ORDER,ISPUBLISHED)
	VALUES('Logical','Logical',@OBJECT_TYPE_ID,@OBJECT_ID,'1','2','1')
	INSERT INTO ADS_KEY_VALUE(KEY_NAME,KEY_VALUE,OBJECT_TYPE_ID,OBJECT_ID,DATATYPE_ID,KV_ORDER,ISPUBLISHED)
	VALUES('Physical','Physical',@OBJECT_TYPE_ID,@OBJECT_ID,'1','3','1')
    END
GO
DECLARE @OBJECT_TYPE_ID INT,@OBJECT_ID INT ;
SELECT @OBJECT_TYPE_ID =  OBJECT_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE='MT_DEFINITION';
SELECT @OBJECT_ID =  MTD_ID FROM MT_DEFINITION WHERE  MTD_NAME = 'BGM_GLOSSARY_STATUS' AND ADS_MODULE = 'BGM';
IF NOT EXISTS (SELECT * FROM ADS_KEY_VALUE WHERE  KEY_NAME = 'Pending Review' and OBJECT_TYPE_ID = @OBJECT_TYPE_ID)
BEGIN
    INSERT INTO ADS_KEY_VALUE(KEY_NAME,KEY_VALUE,OBJECT_TYPE_ID,OBJECT_ID,DATATYPE_ID,KV_ORDER,ISPUBLISHED)
    VALUES('Pending Review','#3385c1',@OBJECT_TYPE_ID,@OBJECT_ID,'1','1','1')
    INSERT INTO ADS_KEY_VALUE(KEY_NAME,KEY_VALUE,OBJECT_TYPE_ID,OBJECT_ID,DATATYPE_ID,KV_ORDER,ISPUBLISHED)
    VALUES('Pending Approval','#eeea36',@OBJECT_TYPE_ID,@OBJECT_ID,'1','2','1')
    INSERT INTO ADS_KEY_VALUE(KEY_NAME,KEY_VALUE,OBJECT_TYPE_ID,OBJECT_ID,DATATYPE_ID,KV_ORDER,ISPUBLISHED)
    VALUES('Approved','#00B152',@OBJECT_TYPE_ID,@OBJECT_ID,'1','3','1')
    INSERT INTO ADS_KEY_VALUE(KEY_NAME,KEY_VALUE,OBJECT_TYPE_ID,OBJECT_ID,DATATYPE_ID,KV_ORDER,ISPUBLISHED)
    VALUES('Published','#a9ee36',@OBJECT_TYPE_ID,@OBJECT_ID,'1','4','1')
    INSERT INTO ADS_KEY_VALUE(KEY_NAME,KEY_VALUE,OBJECT_TYPE_ID,OBJECT_ID,DATATYPE_ID,KV_ORDER,ISPUBLISHED)
    VALUES('Rejected','#ee3639',@OBJECT_TYPE_ID,@OBJECT_ID,'1','5','1')
END
GO
IF NOT EXISTS (SELECT * FROM APP_PREFERENCES WHERE  PREFERENCE_NAME = 'BGM_DATA_COLLECTION_TYPE')
    BEGIN
        INSERT INTO APP_PREFERENCES (PREFERENCE_NAME,PREFERENCE_VALUE)
        SELECT 'BGM_DATA_COLLECTION_TYPE','true'
        UNION ALL
        SELECT 'BGM_DATA_OBJECT_TYPE','true'
        UNION ALL
        SELECT 'BGM_MEANING_CATEGORY_TYPE','true'
    END
GO
IF NOT EXISTS(SELECT MODULE_KEY FROM ADS_MODULES WHERE MODULE_KEY = 'com.ads.mm.permission.bgm')
    BEGIN
        INSERT INTO ADS_MODULES(MODULE_ID, MODULE_NAME, MODULE_KEY, MODULE_ORDER, MODULE_FORWARD)
        SELECT 13, 'Business Glossary Manager', 'com.ads.mm.permission.bgm', 13, 'businessglossarymanager';
    END
GO
IF COL_LENGTH('SYS_CON_ENVIRONMENTS', 'DATABASE_OPTIONS') IS NULL
    BEGIN
        EXECUTE('ALTER TABLE SYS_CON_ENVIRONMENTS ADD DATABASE_OPTIONS VARCHAR(4000) NULL');
        EXECUTE('ALTER TABLE SYS_CON_ENVIRONMENTS ADD DATABASE_POOL_TYPE VARCHAR(100) NULL');
    END
GO
IF NOT EXISTS (SELECT * FROM ADS_KEY_VALUE_OBJECTS WHERE  OBJECT_TYPE = 'SM_DATABASE_OPTIONS')
    BEGIN
	INSERT INTO ADS_KEY_VALUE_OBJECTS (OBJECT_TYPE,OBJECT_TABLE,OBJECT_TABLE_COLUMN,OBJECT_PARENT_TYPE,OBJECT_PARENT_COLUMN_ID)
        SELECT 'SM_DATABASE_OPTIONS','','','',''
    END
GO
IF NOT EXISTS (SELECT * FROM MT_DEFINITION WHERE  MTD_NAME = 'SM_DATABASE_OPTIONS' AND ADS_MODULE = 'SM')
    BEGIN
        INSERT INTO MT_DEFINITION (MTD_NAME,MTD_DESC,ADS_MODULE)
        SELECT 'SM_DATABASE_OPTIONS','','SM'
    END
GO
DECLARE @OBJECT_TYPE_ID INT, @OBJECT_ID INT ;
SELECT @OBJECT_TYPE_ID =  OBJECT_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE='SM_DATABASE_OPTIONS';
SELECT @OBJECT_ID =  MTD_ID FROM MT_DEFINITION WHERE  MTD_NAME = 'SM_DATABASE_OPTIONS' AND ADS_MODULE = 'SM';
IF EXISTS( SELECT @OBJECT_TYPE_ID) AND EXISTS( SELECT @OBJECT_ID) AND NOT EXISTS( SELECT * FROM ADS_KEY_VALUE WHERE OBJECT_TYPE_ID  = @OBJECT_TYPE_ID AND OBJECT_ID = @OBJECT_ID)
    BEGIN
	INSERT INTO ADS_KEY_VALUE(KEY_NAME,KEY_VALUE,OBJECT_TYPE_ID,OBJECT_ID,DATATYPE_ID,KV_TYPE,LABEL_WIDTH,CONTROL_WIDTH,KV_ORDER,COMPONENT,DEFAULTVALUE)      VALUES('TransactionIsolation','Transaction Isolation',@OBJECT_TYPE_ID,@OBJECT_ID,'1','Combo Box','','','0','','TRANSACTION_READ_COMMITTED')
	INSERT INTO ADS_KEY_VALUE(KEY_NAME,KEY_VALUE,OBJECT_TYPE_ID,OBJECT_ID,DATATYPE_ID,KV_TYPE,LABEL_WIDTH,CONTROL_WIDTH,KV_ORDER,COMPONENT,DEFAULTVALUE)      VALUES('IsReadOnly','Read Only',@OBJECT_TYPE_ID,@OBJECT_ID,'1','Check Box','','','1','','false')
	INSERT INTO ADS_KEY_VALUE(KEY_NAME,KEY_VALUE,OBJECT_TYPE_ID,OBJECT_ID,DATATYPE_ID,KV_TYPE,LABEL_WIDTH,CONTROL_WIDTH,KV_ORDER,COMPONENT,DEFAULTVALUE)      VALUES('IsAutoCommit','Auto Commit',@OBJECT_TYPE_ID,@OBJECT_ID,'1','Check Box','','','2','','true')
        INSERT INTO ADS_KEY_VALUE(KEY_NAME,KEY_VALUE,OBJECT_TYPE_ID,OBJECT_ID,DATATYPE_ID,KV_TYPE,LABEL_WIDTH,CONTROL_WIDTH,KV_ORDER,COMPONENT,DEFAULTVALUE)      VALUES('TestConnectionQuery','Test Connection Query',@OBJECT_TYPE_ID,@OBJECT_ID,'1','Text Box','','','3','','')
	SELECT @OBJECT_ID =  KV_ID FROM ADS_KEY_VALUE WHERE  KEY_NAME = 'TransactionIsolation' AND  @OBJECT_TYPE_ID IS NOT NULL AND @OBJECT_ID IS NOT NULL;
	SELECT @OBJECT_TYPE_ID = OBJECT_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE='ADS_KEY_VALUE';
	INSERT INTO ADS_KEY_VALUE(KEY_NAME,KEY_VALUE,OBJECT_TYPE_ID,OBJECT_ID,DATATYPE_ID,KV_TYPE,LABEL_WIDTH,CONTROL_WIDTH,KV_ORDER,COMPONENT,DEFAULTVALUE)      VALUES('TRANSACTION_NONE','TRANSACTION_NONE',@OBJECT_TYPE_ID,@OBJECT_ID,'1','combovalues','','','1','','')
	INSERT INTO ADS_KEY_VALUE(KEY_NAME,KEY_VALUE,OBJECT_TYPE_ID,OBJECT_ID,DATATYPE_ID,KV_TYPE,LABEL_WIDTH,CONTROL_WIDTH,KV_ORDER,COMPONENT,DEFAULTVALUE)      VALUES('TRANSACTION_READ_COMMITTED','TRANSACTION_READ_COMMITTED',@OBJECT_TYPE_ID,@OBJECT_ID,'1','combovalues','','','1','','')
	INSERT INTO ADS_KEY_VALUE(KEY_NAME,KEY_VALUE,OBJECT_TYPE_ID,OBJECT_ID,DATATYPE_ID,KV_TYPE,LABEL_WIDTH,CONTROL_WIDTH,KV_ORDER,COMPONENT,DEFAULTVALUE)      VALUES('TRANSACTION_READ_UNCOMMITTED','TRANSACTION_READ_UNCOMMITTED',@OBJECT_TYPE_ID,@OBJECT_ID,'1','combovalues','','','1','','')
	INSERT INTO ADS_KEY_VALUE(KEY_NAME,KEY_VALUE,OBJECT_TYPE_ID,OBJECT_ID,DATATYPE_ID,KV_TYPE,LABEL_WIDTH,CONTROL_WIDTH,KV_ORDER,COMPONENT,DEFAULTVALUE)      VALUES('TRANSACTION_REPEATABLE_READ','TRANSACTION_REPEATABLE_READ',@OBJECT_TYPE_ID,@OBJECT_ID,'1','combovalues','','','1','','')
	INSERT INTO ADS_KEY_VALUE(KEY_NAME,KEY_VALUE,OBJECT_TYPE_ID,OBJECT_ID,DATATYPE_ID,KV_TYPE,LABEL_WIDTH,CONTROL_WIDTH,KV_ORDER,COMPONENT,DEFAULTVALUE)      VALUES('TRANSACTION_SERIALIZABLE','TRANSACTION_SERIALIZABLE',@OBJECT_TYPE_ID,@OBJECT_ID,'1','combovalues','','','1','','')
    END
GO
IF (SELECT COUNT(*) FROM APP_PREFERENCES WHERE PREFERENCE_NAME = 'ADS_EMAIL_SETTINGS') = 0
    BEGIN
        INSERT INTO APP_PREFERENCES(PREFERENCE_NAME,PREFERENCE_VALUE)
        SELECT 'ADS_EMAIL_SETTINGS','smtp';
    END
GO
IF COL_LENGTH('SYSTEM_TABLE_METADATA', 'METADATA_SOURCE') IS NULL
BEGIN
   ALTER TABLE [SYSTEM_TABLE_METADATA] ADD [METADATA_SOURCE] char(1) NOT NULL DEFAULT 'S'
END
GO
IF COL_LENGTH('SYSTEM_TABLE_COLUMNS_METADATA', 'METADATA_SOURCE') IS NULL
BEGIN
   ALTER TABLE [SYSTEM_TABLE_COLUMNS_METADATA] ADD [METADATA_SOURCE] char(1) NOT NULL DEFAULT 'S'
END
GO
IF NOT EXISTS (SELECT *
                       FROM   SYSOBJECTS
                       WHERE  ID = OBJECT_ID(N'REQM_EMAIL_TEMPLATE')
                                      AND TYPE = 'U')
  BEGIN
    EXECUTE ('CREATE TABLE REQM_EMAIL_TEMPLATE   (
    REQM_ET_ID BIGINT  IDENTITY(1,1) NOT NULL,
    TEMPLATE_NAME VARCHAR(250) NOT NULL ,
    TEMPLATE_ENABLED CHAR(1) NOT NULL DEFAULT ''Y'',
    TRIGGER_ON VARCHAR(250) NULL,
    EMAIL_SUBJECT VARCHAR(max) NOT NULL,
    ENABLE_COMMENTS CHAR(1) NOT NULL DEFAULT ''Y'',
    TEMPLATE_TYPE_ID BIGINT NOT NULL,
    CONSTRAINT REQM_ET_ID PRIMARY KEY(REQM_ET_ID),
    CONSTRAINT UK_REQM_TEMPLATE_NAME UNIQUE (TEMPLATE_NAME))');
  END
GO
IF NOT EXISTS (SELECT * FROM ADS_KEY_VALUE_OBJECTS WHERE  OBJECT_TYPE = 'REQM_EMAIL_TEMPLATE')
    BEGIN
        INSERT INTO ADS_KEY_VALUE_OBJECTS (OBJECT_TYPE,OBJECT_TABLE,OBJECT_TABLE_COLUMN,OBJECT_PARENT_TYPE,OBJECT_PARENT_COLUMN_ID)
        SELECT 'REQM_EMAIL_TEMPLATE','REQM_EMAIL_TEMPLATE','REQM_ET_ID','',''
    END
GO
IF (SELECT COUNT(*) FROM APP_PREFERENCES WHERE PREFERENCE_NAME = 'SEND_EMAIL_ON_NEW_SPECIFICATION_SUBJECT') = 0
BEGIN
    INSERT INTO APP_PREFERENCES(PREFERENCE_NAME,PREFERENCE_VALUE)
    SELECT 'SEND_EMAIL_ON_NEW_SPECIFICATION_SUBJECT','Requirements Manager Specification Status - DO NOT REPLY'
    UNION
    SELECT 'ADD_COMMENTS_ON_NEW_SPECIFICATION_CREATION','true'
    UNION
    SELECT 'SEND_EMAIL_ON_NEW_SPECIFICATION_CREATION','true'
    UNION
    SELECT 'SEND_EMAIL_ON_NEW_SPECIFICATION_MESSAGE','<font style="font-family: Century Gothic; font-size: 10pt;" >Hi,<br><br> This is a system generated email notification.</font> <font style="font-family: Century Gothic; font-size: 11pt;" ><br><br><b>Action Performed:</b> @ACTIONTYPE@ @ACTION@ </font><br><br><TABLE style=''font-family: Century Gothic; font-size: 11pt;'' border=1 cellPadding=5>
												<tr><th colspan = 2><b>Specification Details</b></th>
												<TR><TD><B>Name </B></TD><TD>@SpecificationName@</TD></TR>
                                                <TR><TD><B>Id </B></TD><TD>@SpecificationId@</TD></TR>
												<TR><TD><B>Version </B></TD><TD>@Version@</TD></TR>
                                                <TR><TD><B>Project Name </B></TD><TD>@ProjectName@</TD></TR>
                                                <TR><TD><B>Subject Name </B></TD><TD>@SubjectName@</TD></TR>
                                                <TR><TD><B>Created By </B></TD><TD>@CreatedBy@</TD></TR>
                                                <TR><TD><B>Created Date </B></TD><TD>@CreatedDate@</TD></TR>
                                                <TR><TD><B>Modified By </B></TD><TD>@ModifiedBy@</TD></TR>
                                                <TR><TD><B>Modified Date </B></TD><TD>@ModifiedDate@</TD></TR>
                                                </TABLE>
												<BR><font style="font-family: Century Gothic; font-size: 11pt;" ><b>Note: </b>This mailbox is not monitored. DO NOT REPLY TO THIS EMAIL.</font>'
    UNION
    SELECT 'SEND_EMAIL_ON_NEW_SPECIFICATION_COMMENTS_MESSAGE','<BR><b><font style="font-family: Century Gothic; font-size: 11pt;" >Comments:</b><br>@comments@ </font><BR>'
    UNION
    SELECT 'SEND_EMAIL_ON_NEW_ARTIFACT_SUBJECT','Requirements Manager Artifact Status - DO NOT REPLY'
    UNION
    SELECT 'ADD_COMMENTS_ON_NEW_ARTIFACT_CREATION','true'
    UNION
    SELECT 'SEND_EMAIL_ON_NEW_ARTIFACT_CREATION','true'
    UNION
    SELECT 'SEND_EMAIL_ON_NEW_ARTIFACT_MESSAGE','<font style="font-family: Century Gothic; font-size: 10pt;" >Hi,<br><br> This is a system generated email notification.</font> <font style="font-family: Century Gothic; font-size: 11pt;" ><br><br><b>Action Performed:</b> @ACTIONTYPE@ @ACTION@ </font><br><br><TABLE style=''font-family: Century Gothic; font-size: 11pt;'' border=1 cellPadding=5>
												<tr><th colspan = 2><b>Artifact Details</b></th>
                                                <TR><TD><B>Name</B></TD><TD>@ArtifactName@</TD></TR>
												<TR><TD><B>Id</B></TD><TD>@ArtifactId@</TD></TR>
                                                <TR><TD><B>Created By</B></TD><TD>@CreatedBy@</TD></TR>
                                                <TR><TD><B>Created Date</B></TD><TD>@CreatedDate@</TD></TR>
                                                <TR><TD><B>Modified By</B></TD><TD>@ModifiedBy@</TD></TR>
                                                <TR><TD><B>Modified Date</B></TD><TD>@ModifiedDate@</TD></TR>
                                                </TABLE>
                                              <BR><font style="font-family: Century Gothic; font-size: 11pt;" ><b>Note: </b>This mailbox is not monitored. DO NOT REPLY TO THIS EMAIL.</font>'
    UNION
    SELECT 'SEND_EMAIL_ON_NEW_ARTIFACT_COMMENTS_MESSAGE','<BR><b><font style="font-family: Century Gothic; font-size: 11pt;" >Comments:</b><br>@comments@ </font><BR>'
    UNION
    SELECT 'SEND_EMAIL_ON_NEW_SPECIFICATION_ARTIFACT_SUBJECT','Requirements Manager Specification Artifact Status - DO NOT REPLY'
    UNION
    SELECT 'ADD_COMMENTS_ON_NEW_SPECIFICATION_ARTIFACT_CREATION','true'
    UNION
    SELECT 'SEND_EMAIL_ON_NEW_SPECIFICATION_ARTIFACT_CREATION','true'
    UNION
    SELECT 'SEND_EMAIL_ON_NEW_SPECIFICATION_ARTIFACT_MESSAGE','<font style="font-family: Century Gothic; font-size: 10pt;" >Hi,<br><br> This is a system generated email notification.</font> <font style="font-family: Century Gothic; font-size: 11pt;" ><br><br><b>Action Performed:</b> @ACTIONTYPE@ @ACTION@ </font><br><br><TABLE style=''font-family: Century Gothic; font-size: 11pt;'' border=1 cellPadding=5>
												<tr><th colspan = 2><b>Specification Artifact Details</b></th>
												<TR><TD><B>Name</B></TD><TD>@SpecArtifactName@</TD></TR>
                                                <TR><TD><B>Id</B></TD><TD>@SpecArtifactId@</TD></TR>
                                                <TR><TD><B>Created By</B></TD><TD>@CreatedBy@</TD></TR>
                                                <TR><TD><B>Created Date</B></TD><TD>@CreatedDate@</TD></TR>
                                                <TR><TD><B>Modified By</B></TD><TD>@ModifiedBy@</TD></TR>
                                                <TR><TD><B>Modified Date</B></TD><TD>@ModifiedDate@</TD></TR>
                                                </TABLE>
                                                <BR><font style="font-family: Century Gothic; font-size: 11pt;" ><b>Note: </b>This mailbox is not monitored. DO NOT REPLY TO THIS EMAIL.</font>'
    UNION
    SELECT 'SEND_EMAIL_ON_NEW_SPECIFICATION_ARTIFACT_COMMENTS_MESSAGE','<BR><b><font style="font-family: Century Gothic; font-size: 11pt;" >Comments:</b><br>@comments@ </font><BR>';
END
GO
IF COL_LENGTH('REPM_REPORTS', 'CHART_COLORS') IS NULL
BEGIN
   ALTER TABLE REPM_REPORTS ADD CHART_COLORS VARCHAR (500) NULL;
   ALTER TABLE REPM_REPORTS ADD CHART_TYPE VARCHAR(100)   NULL;
   ALTER TABLE REPM_REPORTS ADD CHART_PROPERTIES VARCHAR(MAX) NULL;
   ALTER TABLE REPM_REPORTS ADD ENABLE BIT DEFAULT 0 NOT NULL;
   ALTER TABLE REPM_REPORTS ADD REPORT_ENABLE BIT DEFAULT 0 NOT NULL;
   ALTER TABLE REPM_REPORTS ADD CHART_ENABLE BIT DEFAULT 0 NOT NULL;
   ALTER TABLE REPM_DASHBAORD_COMPONENT ADD DASHBOARD_COMPONENT_ID BIGINT IDENTITY(1, 1);
   ALTER TABLE REPM_DASHBAORD_COMPONENT  ADD  CONSTRAINT PK_REPM_DB_CMNT_DCID PRIMARY KEY(DASHBOARD_COMPONENT_ID);
   ALTER TABLE REPM_DASHBAORD_COMPONENT ADD NAME VARCHAR(300)   NULL;
   ALTER TABLE REPM_REPORTS ADD ROWS_LIMIT VARCHAR (50) NULL;
   ALTER TABLE REPM_COLOR_PALLETTE
   ALTER COLUMN COLOR_PALLETTE_DATA VARCHAR(max)  NULL
   ALTER TABLE REPM_REPORTS ADD COLUMNS_WIDTH VARCHAR(MAX) NULL;
   ALTER TABLE REPM_DASHBAORD_COMPONENT ADD LAYOUT_CELL CHAR(1) NULL;
   ALTER TABLE REPM_DASHBOARDS ADD LAYOUT_PATTERN varchar(500) NULL

END
GO
IF EXISTS (SELECT * FROM SYSOBJECTS WHERE  ID = OBJECT_ID(N'REPM_CHARTS') AND TYPE = 'U')
BEGIN
    DROP TABLE REPM_CHARTS;
END
GO
IF (SELECT COUNT(*) FROM APP_PREFERENCES WHERE PREFERENCE_NAME = 'SEND_EMAIL_ON_REPM_REPORT_MESSAGE') = 0
BEGIN
    INSERT INTO APP_PREFERENCES VALUES('SEND_EMAIL_ON_REPM_EXPORT_PDF_EXCEL','Reporting Manager Export Status - DO NOT REPLY');
    INSERT INTO APP_PREFERENCES(PREFERENCE_NAME,PREFERENCE_VALUE) VALUES ('SEND_EMAIL_ON_REPM_REPORT_MESSAGE','Hi,<br><br>This is a system generated email notification. <br><TABLE style=''font-family: Tahoma; font-size: 10pt;'' border=1 cellPadding=5>
            <tr><th colspan = 2><b>REPORT DETAILS</b></th>
                                                <TR><TD><B>Category Name</B></TD><TD>@categoryName@</TD></TR>
                                                <TR><TD><B>Report Name</B></TD><TD>@reportName@</TD></TR>
                                                <TR><TD><B>Created By</B></TD><TD>@createdBy@</TD></TR>
                                                <TR><TD><B>Created Date</B></TD><TD>@createdDate@</TD></TR>
                                                <TR><TD><B>Modified By</B></TD><TD>@modifiedBy@</TD></TR>
                                                <TR><TD><B>Modified Date</B></TD><TD>@modifiedDate@</TD></TR>
                                                </TABLE>
            <BR>Note: This mailbox is not monitored. DO NOT REPLY TO THIS EMAIL.');
END
GO
IF NOT EXISTS (SELECT * FROM ADS_KEY_VALUE_OBJECTS WHERE  OBJECT_TYPE = 'ADS_MAIL_CMD')
BEGIN
    INSERT INTO ADS_KEY_VALUE_OBJECTS (OBJECT_TYPE,OBJECT_TABLE,OBJECT_TABLE_COLUMN,OBJECT_PARENT_TYPE,OBJECT_PARENT_COLUMN_ID)
        SELECT 'ADS_MAIL_CMD','','','',''
END
GO

IF EXISTS (SELECT * FROM ADS_MODULES WHERE  MODULE_NAME = 'System Manager')
BEGIN
    EXECUTE ('UPDATE ADS_MODULES SET MODULE_NAME = ''Metadata Manager'' where MODULE_KEY =''com.ads.mm.permission.sm''');
END
GO

IF EXISTS (SELECT * FROM SECURITY_ROLES WHERE ROLE_NAME = 'SYSTEM ADMIN')
BEGIN
    EXECUTE ('UPDATE SECURITY_ROLES SET ROLE_DESCR = ''Administers Metadata Manager module to define new systems/environments and import and manage metadata for source and target systems'' WHERE  ROLE_NAME = ''SYSTEM ADMIN''');
END
GO
IF EXISTS (SELECT * FROM ADS_MODULES WHERE MODULE_KEY = 'com.ads.mm.permission.dm')
  BEGIN
    EXECUTE ('DELETE FROM ADS_MODULES WHERE MODULE_KEY = ''com.ads.mm.permission.dm''');
  END
GO

IF EXISTS(SELECT * FROM ADS_MM_VERSION WHERE VALUE < '8.0')
BEGIN
	UPDATE CAT_TEMPLATES SET CAT_ENABLED = 0 WHERE CAT_NAME='Standard Informatica' AND CAT_SYSTEM_BASED = 1
	UPDATE CAT_TEMPLATES SET CAT_ENABLED = 0 WHERE CAT_NAME='Parallel Job (v8.0 & above)'  AND CAT_SYSTEM_BASED = 1
	UPDATE CAT_TEMPLATES SET CAT_ENABLED = 0 WHERE CAT_NAME='Server Job (v8.0 & above)'  AND CAT_SYSTEM_BASED = 1
	UPDATE CAT_TEMPLATES SET CAT_ENABLED = 0 WHERE CAT_NAME='Parallel Job Include Sql Expression (v8.0 & above)'  AND CAT_SYSTEM_BASED = 1
	UPDATE CAT_TEMPLATES SET CAT_ENABLED = 0 WHERE CAT_NAME='Server Job Include Sql Expression (v8.0 & above)'  AND CAT_SYSTEM_BASED = 1
	UPDATE CAT_TEMPLATES SET CAT_ENABLED = 0 WHERE CAT_NAME='Parallel Job (v7.5)'  AND CAT_SYSTEM_BASED = 1
	UPDATE CAT_TEMPLATES SET CAT_ENABLED = 0 WHERE CAT_NAME='Server Job (v7.5)'  AND CAT_SYSTEM_BASED = 1
	UPDATE CAT_TEMPLATES SET CAT_ENABLED = 0 WHERE CAT_NAME='Microsoft SSIS DTSX'  AND CAT_SYSTEM_BASED = 1
	UPDATE CAT_TEMPLATES SET CAT_ENABLED = 0 WHERE CAT_NAME='Generate Microsoft SSIS DTSX'  AND CAT_SYSTEM_BASED = 1
	UPDATE CAT_TEMPLATES SET CAT_ENABLED = 0 WHERE CAT_NAME='Talend Cat SSST SQL'  AND CAT_SYSTEM_BASED = 1
	UPDATE CAT_TEMPLATES SET CAT_ENABLED = 0 WHERE CAT_NAME='Forward Engineering - Simple Pattern'  AND CAT_SYSTEM_BASED = 1
	UPDATE CAT_TEMPLATES SET CAT_ENABLED = 0 WHERE CAT_NAME='Reverse Engineering - Simple Pattern'  AND CAT_SYSTEM_BASED = 1
	UPDATE CAT_TEMPLATES SET CAT_ENABLED = 0 WHERE CAT_NAME='Sample Data Profile By ColumnName'  AND CAT_SYSTEM_BASED = 1
	UPDATE CAT_TEMPLATES SET CAT_ENABLED = 0 WHERE CAT_NAME='Pig & Sqoop Script'  AND CAT_SYSTEM_BASED = 1

END
GO

IF EXISTS(SELECT * FROM ADS_MM_VERSION WHERE VALUE < '8.0')
	BEGIN
		UPDATE CAT_TABS SET DISPLAY_ORDER = '1' WHERE CAT_TAB_NAME = 'com.ads.mm.stb.mappingmanager'
		UPDATE CAT_TABS SET DISPLAY_ORDER = '1.1' WHERE CAT_TAB_NAME = 'com.ads.mm.stb.testauto'
		INSERT INTO CAT_TABS ( CAT_TAB_NAME, CAT_TAB_DESCRIPTION ,  DISPLAY_ORDER , TAB_VISIBILITY) VALUES ( 'com.ads.mm.stb.etlengineering', '' , '1.2' , '1');
		UPDATE CAT_TABS SET DISPLAY_ORDER = '1.3' WHERE CAT_TAB_NAME = 'com.ads.mm.stb.rapidgends'
		EXECUTE('WITH CTE AS (SELECT CAT_TAB_ID, CAT_TAB_NAME, ROW_NUMBER()OVER ( ORDER BY CASE DISPLAY_ORDER WHEN NULL THEN 0 WHEN 0 THEN 999999999 ELSE DISPLAY_ORDER END) AS DISPLAY_ORDER FROM   CAT_TABS ) UPDATE MS SET    MS.DISPLAY_ORDER = CTE.DISPLAY_ORDER FROM   CAT_TABS MS JOIN CTE ON MS.CAT_TAB_ID = CTE.CAT_TAB_ID AND MS.CAT_TAB_NAME = CTE.CAT_TAB_NAME');
	END
GO

IF EXISTS(SELECT * FROM ADS_MM_VERSION WHERE VALUE < '8.0')
BEGIN
    DECLARE  @CAT_ID BIGINT, @CAT_DIALOG_ID BIGINT, @CAT_DIALOG_PROFILE_ID BIGINT, @CAT_DIALOG_TAB_ID BIGINT, @CAT_TAB_ID BIGINT, @CAT_TEMPLATE_ORDER BIGINT;
    BEGIN
        SELECT @CAT_TAB_ID = CAT_TAB_ID FROM CAT_TABS WHERE CAT_TAB_NAME = 'com.ads.mm.stb.etlengineering';
        INSERT INTO CAT_TEMPLATES(CAT_NAME,CAT_DESC,CAT_IMAGE,CAT_STOCK_IMAGE,CAT_ENABLED,CAT_TAB_ID,CAT_SYSTEM_BASED,CAT_SCRIPT,CAT_ACTION,CREATED_BY,CREATED_DATE_TIME,LAST_MODIFIED_BY,LAST_MODIFIED_DATE_TIME,CAT_TEMPLATE_ORDER,CAT_SCRIPTING_LANGUAGE,CAT_OUTPUT_CONTENT_TYPE,CAT_OUTPUT_FILE_EXTENSION,CAT_ENABLE_MAPPING_DIALOG)
        SELECT 'Informatica 9x', 'This template creates a simple ETL job for the selected Mappings', NULL, 'cat/ETL_CATS_Images/informatica-cat-2.png', '1', @CAT_TAB_ID, '1', NULL, 'NULL', 'AnalytiX Data Services', CURRENT_TIMESTAMP, 'AnalytiX Data Services', CURRENT_TIMESTAMP, 1, 'Javascript', 'XML', '.xml', 1
		UNION ALL
        SELECT 'SSIS Forward 2012', 'This template creates a simple ETL job for the selected Mappings', NULL, 'cat/ETL_CATS_Images/SSIS.png', '1', @CAT_TAB_ID, '1', NULL, 'NULL', 'AnalytiX Data Services', CURRENT_TIMESTAMP, 'AnalytiX Data Services', CURRENT_TIMESTAMP, 2, 'Javascript', 'XML', '.dtsx', 1
		UNION ALL
        SELECT 'Talend 6.2', 'This template creates a simple ETL job for the selected Mappings', NULL, 'cat/ETL_CATS_Images/Talend-cat.png', '1', @CAT_TAB_ID, '1', NULL, 'NULL', 'AnalytiX Data Services', CURRENT_TIMESTAMP, 'AnalytiX Data Services', CURRENT_TIMESTAMP, 4, 'Javascript', 'Plain Text', '.txt', 1
		UNION ALL
        SELECT 'Datastage 8.5', 'This template creates a simple ETL job for the selected Mappings', NULL, 'cat/ETL_CATS_Images/data-stage-1.png', '1', @CAT_TAB_ID, '1', NULL, 'NULL', 'AnalytiX Data Services', CURRENT_TIMESTAMP, 'AnalytiX Data Services', CURRENT_TIMESTAMP, 5, 'Javascript', 'XML', '.xml', 1 ;

		UPDATE CAT_TEMPLATES SET CAT_TAB_ID = @CAT_TAB_ID, CAT_TEMPLATE_ORDER = 3  WHERE CAT_NAME = 'Import Microsoft SSIS DTSX' AND CAT_SYSTEM_BASED = 1;
		UPDATE CAT_TEMPLATES SET CAT_DESC = 'This template creates a simple ETL job for the selected Mappings' , CAT_TAB_ID = @CAT_TAB_ID, CAT_TEMPLATE_ORDER = 6  WHERE CAT_NAME = 'Standard ODI' AND CAT_SYSTEM_BASED = 1;
    END
END
GO
IF COL_LENGTH('PROJECT', 'ETL_TOOL') IS NULL
BEGIN
 ALTER TABLE [PROJECT] ADD [ETL_TOOL] VARCHAR(100) DEFAULT 'INFORMATICA_PSEUDOCODE'
 ALTER TABLE [PROJECT] ADD [ETL_SHOW_EMPTY_PSEUDOCODE] VARCHAR(1) DEFAULT '0'
END
GO
IF EXISTS (SELECT COUNT(*) FROM [PROJECT] WHERE ETL_TOOL IS NULL)
    BEGIN
	EXECUTE('UPDATE PROJECT SET ETL_TOOL = ''INFORMATICA_PSEUDOCODE'', ETL_SHOW_EMPTY_PSEUDOCODE = ''0'' WHERE ETL_TOOL IS NULL');
    END
GO
IF COL_LENGTH('TRANSFORMATIONS', 'INFORMATICA_PSEUDOCODE') IS NULL
   BEGIN
      EXECUTE sys.sp_rename @objname = N'[TRANSFORMATIONS].[PSUEDO_CODE]', @newname = N'INFORMATICA_PSEUDOCODE', @objtype = 'COLUMN'
   END
GO

IF COL_LENGTH('TRANSFORMATIONS', 'DATASTAGE_PSEUDOCODE') IS NULL
BEGIN
	ALTER TABLE [TRANSFORMATIONS] ADD [DATASTAGE_PSEUDOCODE] VARCHAR(MAX)
	ALTER TABLE [TRANSFORMATIONS] ADD [TALEND_PSEUDOCODE] VARCHAR(MAX)
	ALTER TABLE [TRANSFORMATIONS] ADD [SSIS_PSEUDOCODE] VARCHAR(MAX)
	ALTER TABLE [TRANSFORMATIONS] ADD [ODI_PSEUDOCODE] VARCHAR(MAX)
	ALTER TABLE [TRANSFORMATIONS] ADD [BODS_PSEUDOCODE] VARCHAR(MAX)
END
GO

IF (SELECT COUNT(*) FROM TRANSFORMATIONS) < 25
BEGIN
	INSERT INTO TRANSFORMATIONS (TRANSF_NAME, INFORMATICA_PSEUDOCODE, TRANSF_USE_DESCR, ISPUBLISHED, CREATED_DATETIME, LAST_MODIFIED_BY, LAST_MODIFIED_DATE_TIME, CREATED_BY)
	SELECT  '1-DataGov(HighDate:12/31/9999)', 'To_date(mm/dd/yyyy,12/31/9999)', 'DataGovernance rule - use on all projects', 'Y', CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
	UNION ALL
	SELECT  '2-DataGov(LowDate01/01/0001)', 'To_date(mm/dd/yyyy, 01/01/0001)', 'DataGovernance rule - use on all projects', 'Y', CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
	UNION ALL
	SELECT  '3-DataGov(AverageChurn)', 'Count(active customers)/(Count of Cancelled Customers for current month)', 'DataGovernance rule - use on all projects where financial reports are viewed and Churn KPIs are used.', 'Y', CURRENT_TIMESTAMP, ' Administrator',CURRENT_TIMESTAMP, 'Administrator'
	UNION ALL
	SELECT  'ABORT', 'ABORT(%1)', 'ETL Built-In Transformation: Stops the session and issues a specified error message to the session log file. When the Integration Service encounters an ABORT function it stops transforming data at that row. It processes any rows read before the session aborts and loads them based on the source- or target-based commit interval and the buffer block size defined for the session.', 'Y', CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
	UNION ALL
	SELECT  'ABS', 'ABS(%1)', 'ETL Built-In Transformation: Returns the absolute value of a numeric value.Arguments: %1 = numeric field', 'Y', CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
	UNION ALL
	SELECT  'ADD_TO_DATE', 'ADD_TO_DATE(%1, format, amount)', 'ETL Built-In Transformation: Adds a specified amount to one part of a datetime value and returns a date in the same format as the date you pass to the function. Arguments: %1 = date field', 'Y', CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
	UNION ALL
	SELECT  'AES_DECRYPT', 'AES_DECRYPT(%1, key)', 'ETL Built-In Transformation: Returns decrypted data to string format. The Integration Service uses Advanced Encryption Standard (AES) algorithm with 128-bit encoding. The AES algorithm is a FIPS-approved cryptographic algorithm.Arguments: %1 = encrypted text field', 'Y', CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
	UNION ALL
	SELECT  'ASCII', 'ASCII(%1)', 'ETL Built-In Transformation: Record handling and processing rule for all projects. When you configure the Integration Service to run in ASCII mode, the ASCII function returns the numeric ASCII value of the first character of the string passed to the function. When you configure the Integration Service to run in Unicode mode, the ASCII function returns the numeric Unicode value of the first character of the string passed to the function. Unicode values fall in the range 0 to 65,535. Arguments: %1 = text field', 'Y', CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
	UNION ALL
	SELECT  'AVG', 'AVG(%1 [, filter_condition ])', 'ETL Built in transformation (Aggregation). Returns the average of all values in a group of rows. Optionally, you can apply a filter to limit the rows you read to calculate the average. You can nest only one other aggregate function within AVG, and the nested function must return a Numeric datatype', 'Y', CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
	UNION ALL
	SELECT  'CEIL', 'CEIL(%1)', 'ETL Built-In Transformation: Record handling and processing rule for all projects. Returns the smallest integer greater than or equal to the numeric value passed to this function. For example, if you pass 3.14 to CEIL, the function returns 4. If you pass 3.98 to CEIL, the function returns 4. Likewise, if you pass -3.17 to CEIL, the function returns -3.', 'Y', CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
	UNION ALL
	SELECT  'CHOOSE', 'CHOOSE(index, string1 [, string2, ..., stringN])', 'ETL Built-In Transformation: Record handling and processing rule for all projects.Chooses a string from a list of strings based on a given position. You specify the position and the value. If the value matches the position, the Integration Service returns the value.', 'Y', CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
	UNION ALL
	SELECT  'CHR', 'CHR(%1)', 'ETL Built-In Transformation: Record handling and processing rule for all projects. When you configure the Integration Service to move data in ASCII mode, CHR returns the ASCII character corresponding to the numeric value you pass to this function. ASCII values fall in the range 0 to 255. You can pass any integer to CHR, but only ASCII codes 32 to 126 are printable characters. When you configure the Integration Service to move data in Unicode mode, CHR returns the Unicode character corresponding to the numeric value you pass to this function. Unicode values fall in the range 0 to 65,535.', 'Y', CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
	UNION ALL
	SELECT  'CHRCODE', 'CHRCODE(%1)','ETL Built-In Transformation: Record handling and processing rule for all projects. When you configure the Integration Service to run in ASCII mode, CHRCODE returns the numeric ASCII value of the first character of the string passed to the function. ASCII values fall in the range 0 to 255.When you configure the Integration Service to run in Unicode mode, CHRCODE returns the numeric Unicode value of the first character of the string passed to the function. Unicode values fall in the range 0 to 65,535.Normally, before you pass any string value to CHRCODE, you parse out the specific character you want to convert to an ASCII or Unicode value. For example, you might use RTRIM or another string-manipulation function. If you pass a numeric value, CHRCODE converts it to a character string and returns the ASCII or Unicode value of the first character in the string.This function is identical in behavior to the ASCII function. If you currently use ASCII in expressions, it will still work correctly. However, when you create new expressions, use the CHRCODE function instead of the ASCII function.', 'Y', CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
	UNION ALL
	SELECT  'COMPRESS', 'COMPRESS(%1)', 'ETL Built-In Transformation: Record handling and processing rule for all projects. Compresses data using the zlib 1.2.1 compression algorithm.Use the COMPRESS function before you send large amounts of data over a wide area network', 'Y', CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
	UNION ALL
	SELECT  'CONCAT', 'CONCAT(string1,string2)', 'ETL Built-In Transformation: Record handling and processing rule for all projects.Concatenates two strings. CONCAT converts all data to text before concatenating the strings. Alternatively, use the || string operator to concatenate strings. Using the || string operator instead of CONCAT improves Integration Service performance when you run sessions.', 'Y', CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
	UNION ALL
	SELECT  'CONVERT_BASE', 'CONVERT_BASE(%1,source_base,dest_base)', 'ETL Built-In Transformation: Record handling and processing rule for all projects. Converts a number from one base value to another base value.', 'Y', CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
	UNION ALL
	SELECT  'COS', 'COS(%1)', 'ETL Built-In Transformation: Record handling and processing rule for all projects. Returns the cosine of a numeric value (%1 is expressed in radians).', 'Y', CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
	UNION ALL
	SELECT  'COSH', 'COSH(%1)', 'ETL Built-In Transformation: Record handling and processing rule for all projects. Returns the hyperbolic cosine of a numeric value (%1 is expressed in radians).', 'Y', CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
	UNION ALL
	SELECT  'COUNT', 'COUNT(*[,filter_condition])', 'ETL Built in transformation (Aggregation). Returns the number of rows that have non-null values in a group. Optionally, you can include the asterisk (*) argument to count all input values in a transformation. You can nest only one other aggregate function within COUNT. You can apply a condition to filter rows before counting them.', 'Y', CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
	UNION ALL
	SELECT  'CRC32', 'CRC32(%1)', 'ETL Built-In Transformation: Record handling and processing rule for all projects.Returns a 32-bit Cyclic Redundancy Check (CRC32) value. Use CRC32 to find data transmission errors. You can also use CRC32 if you want to verify that data stored in a file has not been modified. If you use CRC32 to perform a redundancy check on data in ASCII mode and Unicode mode, the Integration Service may generate different results on the same input value.Note: CRC32 can return the same output for different input strings. If you want to generate keys in a mapping, use a Sequence Generator transformation. If you use CRC32 to generate keys in a mapping, you may receive unexpected results.', 'Y', CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
	UNION ALL
	SELECT  'CUME', 'CUME(%1[,filter_condition])', 'ETL Built-In Transformation: Record handling and processing rule for all projects. Returns a running total. A running total means CUME returns a total each time it adds a value. You can add a condition to filter rows out of the row set before calculating the running total.ETL Built-In Transformation: Use CUME and similar functions (such as MOVINGAVG and MOVINGSUM) to simplify reporting by calculating running values.', 'Y', CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
	UNION ALL
	SELECT  'DATE_COMPARE', 'DATE_COMPARE(%1,%2)', 'ETL Built-In Transformation: Record handling and processing rule for all projects. Returns an integer indicating which of two dates is earlier.DATE_COMPARE returns an integer value rather than a date value.', 'Y', CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
	UNION ALL
	SELECT  'DATE_DIFF', 'DATE_DIFF(%1,%2,format)', 'ETL Built-In Transformation: Record handling and processing rule for all projects. Returns the length of time between two dates. You can request the format to be years, months, days, hours, minutes, seconds, milliseconds, microseconds, or nanoseconds. The Integration Service subtracts the second date from the first date and returns the difference.Effective in version 8.5, the DATE_COMPARE function can compare dates that include subseconds. If you do not want to include subseconds in a date comparison, use the TRUNC (Dates) function to truncate the subsecond portion of the date, and then compare the dates.', 'Y', CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
	UNION ALL
	SELECT  'DEC_BASE64', 'DEC_BASE64(%1)', 'ETL Built-In Transformation: Record handling and processing rule for all projects. Decodes a base 64 encoded value and returns a string with the binary data representation of the data. If you encode data using ENC_BASE64, and you want to decode data using DEC_BASE64, you must run the decoding session using the same data movement mode.Otherwise, the output of the decoded data may differ from the original data.', 'Y', CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
	UNION ALL
	SELECT  'DECODE', 'DECODE(%1,first_search,first_result[,second_search,second_result]...[,default])', 'ETL Built-In Transformation: Record handling and processing rule for all projects. Searches a port for a value you specify. If the function finds the value, it returns a result value, which you define. You can build an unlimited number of searches within a DECODE function.If you use DECODE to search for a value in a string port, you can either trim trailing blanks with the RTRIM function or include the blanks in the search string.', 'Y', CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
	UNION ALL
	SELECT  'DECOMPRESS', 'DECOMPRESS(%1,precision)', 'ETL Built-In Transformation: Record handling and processing rule for all projects.Decompresses data using the zlib 1.2.1 compression algorithm.Use the DECOMPRESS function on data that has been compressed with the COMPRESS function or a compression tool that uses the zlib 1.2.1 algorithm.If the session that decompresses the data uses a different data movement mode than the session that compressed the data, the output of the decompressed data may differ from the original data.', 'Y', CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
	UNION ALL
	SELECT  'ENC_BASE64', 'ENC_BASE64(%1)', 'ETL Built-In Transformation: Record handling and processing rule for all projects. Encodes data by converting binary data to string data using Multipurpose Internet Mail Extensions (MIME) encoding. Encode data when you want to store data in a database or file that does not allow binary data. You can also encode data to pass binary data through PowerCenter transformations in string format. The encoded data is approximately 33% longer than the original data. It displays as a set of random characters.', 'Y', CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
	UNION ALL
	SELECT  'ERROR', 'ERROR(%1)', 'ETL Built-In Transformation: Record handling and processing rule for all projects. Causes the Integration Service to skip a row and issue an error message, which you define. The error message displays in the session log. The Integration Service does not write these skipped rows to the session reject file.Use ERROR in Expression transformations to validate data. Generally, you use ERROR within an IIF or DECODE function to set rules for skipping rows.Use the ERROR function for both input and output port default values. You might use ERROR for input ports to keep null values from passing into a transformation.Use ERROR for output ports to handle any kind of transformation error, including ERROR function calls within an expression. When you use the ERROR function in an expression and in the output port default value, the Integration Service skips the row and logs both the error message from the expression and the error message from the default value. If you want to ensure the Integration Service skips rows that produce an error, assign ERROR as the default value.f you use an output default value other than ERROR, the default value overrides the ERROR function in an expression. For example, you use the ERROR function in an expression, and you assign the default value, ‘1234’, to the output port. Each time the Integration Service encounters the ERROR function in the expression, it overrides the error with the value ‘1234’ and passes ‘1234’ to the next transformation. It does not skip the row, and it does not log an error in the session log.', 'Y', CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
	UNION ALL
	SELECT  'EXP', 'EXP(%1)', 'ETL Built-In Transformation: Record handling and processing rule for all projects. Returns e raised to the specified power (exponent), where e=2.71828183. For example, EXP(2) returns 7.38905609893065. You might use this function to analyze scientific and technical data rather than business data. EXP is the reciprocal of the LN function, which returns the natural logarithm of a numeric value.', 'Y', CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
	UNION ALL
	SELECT  'FIRST', 'FIRST(%1 [,filter_condition])', 'ETL Built in transformation (Aggregation). Returns the first value found within a port or group. Optionally, you can apply a filter to limit the rows the Integration Service reads.You can nest only one other aggregate function within FIRST.', 'Y', CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
	UNION ALL
	SELECT  'FLOOR', 'FLOOR(%1)', 'ETL Built-In Transformation: Record handling and processing rule for all projects. Returns the largest integer less than or equal to the numeric value you pass to this function. For example, if you pass 3.14 to FLOOR, the function returns 3. If you pass 3.98 to FLOOR, the function returns 3. Likewise, if you pass -3.17 to FLOOR, the function returns -4.', 'Y', CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
	UNION ALL
	SELECT  'FV', 'FV(rate,terms,payment[,presentvalue,type])', 'ETL Built-In Transformation: Record handling and processing rule for all projects. Returns the future value of an investment, where you make periodic, constant payments and the investment earns a constant interest rate.', 'Y', CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
	UNION ALL
	SELECT  'GET_DATE_PART', 'GET_DATE_PART(%1,format)', 'ETL Built-In Transformation: Record handling and processing rule for all projects. Returns the specified part of a date as an integer value. Therefore, if you create an expression that returns the month portion of the date, and pass a date such as Apr 1 1997 00:00:00, GET_DATE_PART returns 4.', 'Y', CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
	UNION ALL
	SELECT  'GREATEST', 'GREATEST(%1,[value2, ...,valueN,]CaseFlag)', 'ETL Built-In Transformation: Record handling and processing rule for all projects. Returns the greatest value from a list of input values. Use this function to return the greatest string, date, or number.By default, the match is case sensitive.Effective in version 8.5, the GREATEST function returns NULL if any argument is null. Previously, the GREATEST function returned NULL if all arguments were null.', 'Y', CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
	UNION ALL
	SELECT  'IIF', 'IIF(condition,value1[,value2])', 'ETL Built-In Transformation: Record handling and processing rule for all projects. Returns one of two values you specify, based on the results of a condition.', 'Y', CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
	UNION ALL
	SELECT  'IN', 'IN(valueToSearch,value1,[value2, ...,valueN,]CaseFlag)', 'ETL Built-In Transformation: Record handling and processing rule for all projects. Matches input data to a list of values. By default, the match is case sensitive', 'Y', CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
	UNION ALL
	SELECT  'INDEXOF', 'INDEXOF(valueToSearch,string1,[string2, ..., stringN,]CaseFlag)', 'ETL Built-In Transformation: Record handling and processing rule for all projects. Finds the index of a value among a list of values. By default, the match is case sensitive.', 'Y', CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
	UNION ALL
	SELECT  'INITCAP', 'INITCAP(%1)', 'ETL Built-In Transformation: Record handling and processing rule for all projects. Capitalizes the first letter in each word of a string and converts all other letters to lowercase. Words are delimited by white space (a blank space, formfeed, newline, carriage return, tab, or vertical tab) and characters that are not alphanumeric. For example, if you pass the string ‘…THOMAS’, the function returns Thomas.', 'Y', CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
	UNION ALL
	SELECT  'INSTR', 'INSTR(string,search_value[,start[,occurrence[,comparison_type]]])', 'ETL Built-In Transformation: Record handling and processing rule for all projects. Returns the position of a character set in a string, counting from left to right.', 'Y', CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
	UNION ALL
	SELECT  'IS_DATE', 'IS_DATE(value[,format]', 'ETL Built-In Transformation: Record handling and processing rule for all projects. Returns whether a string value is a valid date. A valid date is any string in the date portion of the date time format specified in the session. If the string you want to test is not in this date format, use the TO_DATE format string to specify the date format. If the strings passed to IS_DATE do not match the format string specified, the function returns FALSE (0). If the strings match the format string, the function returns TRUE (1).', 'Y', CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
	UNION ALL
	SELECT  'IS_NUMBER', 'IS_NUMBER(%1)', 'ETL Built-In Transformation: Record handling and processing rule for all projects. Returns whether a string is a valid number. A valid number consists of the following parts:Optional space before the number Optional sign (+/-) One or more digits with an optional decimal point Optional scientific notation, such as the letter ‘e’ or ‘E’ (and the letter ‘d’ or ‘D’ on Windows) followed by an optional sign (+/-), followed by one or more digits Optional white space following the number', 'Y', CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
	UNION ALL
	SELECT  'IS_SPACES', 'IS_SPACES(%1)', 'ETL Built-In Transformation: Record handling and processing rule for all projects. Returns whether a string value consists entirely of spaces.A space is a blank space, a formfeed, a newline, a carriage return, a tab, or a vertical tab.IS_SPACES evaluates an empty string as FALSE because there are no spaces. To test for an empty string, use LENGTH.', 'Y', CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
	UNION ALL
	SELECT  'ISNULL', 'ISNULL(%1)', 'ETL Built-In Transformation: Record handling and processing rule for all projects. Returns whether a value is NULL. ISNULL evaluates an empty string as FALSE. Note: To test for empty strings, use LENGTH.', 'Y', CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
	UNION ALL
	SELECT  'LAST', 'LAST(value[,filter_condition])', 'ETL Built in transformation (Aggregation). Returns the last row in the selected port. Optionally, you can apply a filter to limit the rows the PowerCenter Integration Service reads. You can nest only one other aggregate function within LAST.', 'Y', CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
	UNION ALL
	SELECT  'LAST_DAY', 'LAST_DAY(%1)', 'ETL Built-In Transformation: Record handling and processing rule for all projects. Returns the date of the last day of the month for each date in a port where %1 is a date.', 'Y', CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
	UNION ALL
	SELECT  'LEAST', 'LEAST(value1,[value2, ...,valueN,]CaseFlag)', 'ETL Built-In Transformation: Record handling and processing rule for all projects. Returns the smallest value from a list of input values. By default, the match is case sensitive.Effective in version 8.5, the GREATEST function returns NULL if any argument is null. Previously, the GREATEST function returned NULL if all arguments were null.', 'Y', CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
	UNION ALL
	SELECT  'LENGTH', 'LENGTH(%1)', 'ETL Built-In Transformation: Record handling and processing rule for all projects. Returns the number of characters in a string ( %1 ), including trailing blanks.', 'Y', CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
	UNION ALL
	SELECT  'LN', 'LN(%1)', 'ETL Built-In Transformation: Record handling and processing rule for all projects. Returns the natural logarithm of a numeric value ( %1 ).For example, LN(3) returns 1.098612. You usually use this function to analyze scientific data rather than business data.This function is the reciprocal of the function EXP.', 'Y', CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
	UNION ALL
	SELECT  'LOG', 'LOG(%1,%2)', 'ETL Built-In Transformation: Record handling and processing rule for all projects. Returns the logarithm of a base numeric value ( %1 ) with an exponent ( %2 ) . Most often, you use this function to analyze scientific data rather than business data.', 'Y', CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
	UNION ALL
	SELECT  'LOOKUP', 'LOOKUP(result,search1,value1[,search2,value2]...)', 'ETL Built-In Transformation: Record handling and processing rule for all projects. Searches for a value in a lookup source column. The LOOKUP function compares data in a lookup source to a value you specify. When the PowerCenter Integration Service finds the search value in the lookup table, it returns the value from a specified column in the same row in the lookup table. When you create a session based on a mapping that uses the LOOKUP function, you must specify the database connections for $Source Connection Value and $Target Connection Value in the session properties. To validate a lookup function in an Expression transformation, verify that the lookup definition is in the mapping. Note: This function is not supported in mapplets.', 'Y', CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
	UNION ALL
	SELECT  'LOWER', 'LOWER(%1)', 'ETL Built-In Transformation: Record handling and processing rule for all projects. Converts uppercase string characters ( %1 ) to lowercase', 'Y', CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
	UNION ALL
	SELECT  'LPAD', 'LPAD(first_string,length[,second_string])', 'ETL Built-In Transformation: Record handling and processing rule for all projects. Adds a set of blanks or characters to the beginning of a string to set the string to a specified length.', 'Y', CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
	UNION ALL
	SELECT  'LTRIM', 'LTRIM(string[,trim_set])', 'ETL Built-In Transformation: Record handling and processing rule for all projects. Removes blanks or characters from the beginning of a string. You can use LTRIM with IIF or DECODE in an Expression or Update Strategy transformation to avoid spaces in a target table. If you do not specify a trim_set parameter in the expression: In UNICODE mode, LTRIM removes both single- and double-byte spaces from the beginning of a string. In ASCII mode, LTRIM removes only single-byte spaces. If you use LTRIM to remove characters from a string, LTRIM compares the trim_set to each character in the string argument, character-by-character, starting with the left side of the string. If the character in the string matches any character in the trim_set, LTRIM removes it. LTRIM continues comparing and removing characters until it fails to find a matching character in the trim_set. Then it returns the string, which does not include matching characters.', 'Y', CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
	UNION ALL
	SELECT  'MAKE_DATE_TIME', 'MAKE_DATE_TIME(year,month,day,hour,minute,second,nanosecond)', 'ETL Built-In Transformation: Record handling and processing rule for all projects. Returns the date and time based on the input values. Effective in version 8.5, the MAKE_DATE_TIME function can return the date and time based on input values up to nanoseconds. Previously, MAKE_DATE_TIME returned the date and time based on input values up to seconds.', 'Y', CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
	UNION ALL
	SELECT  'MAX', 'MAX', 'ETL Built in transformation (Aggregation)', 'Y', CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
	UNION ALL
	SELECT  'MD5', 'MD5(value)', 'ETL Built-In Transformation: Record handling and processing rule for all projects. Calculates the checksum of the input value. The function uses Message-Digest algorithm 5 (MD5). MD5 is a one-way cryptographic hash function with a 128-bit hash value. You can conclude that input values are different when the checksums of the input values are different. Use MD5 to verify data integrity.', 'Y', CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
	UNION ALL
	SELECT  'MEDIAN', 'MEDIAN(numeric_value[,filter_condition])', 'ETL Built in transformation (Aggregation). Returns the median of all values in a selected port.If there is an even number of values in the port, the median is the average of the middle two values when all values are placed ordinally on a number line.If there is an odd number of values in the port, the median is the middle number.You can nest only one other aggregate function within MEDIAN, and the nested function must return a Numeric datatype.The PowerCenter Integration Service reads all rows of data to perform the median calculation. The process of reading rows of data to perform the calculation may affect performance. Optionally, you can apply a filter to limit the rows you read to calculate the median.', 'Y', CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
	UNION ALL
	SELECT  'METAPHONE', 'METAPHONE(string[,length])', 'ETL Built-In Transformation: Record handling and processing rule for all projects. Encodes string values. You can specify the length of the string that you want to encode.METAPHONE encodes characters of the English language alphabet (A-Z). It encodes both uppercase and lowercase letters in uppercase.METAPHONE encodes characters according to the following list of rules:Skips vowels (A, E, I, O, and U) unless one of them is the first character of the input string. METAPHONE(‘CAR’) returns ‘KR’ and METAPHONE(‘AAR’) returns ‘AR’.Uses special encoding guidelines.', 'Y', CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
	UNION ALL
	SELECT  'MIN', 'MIN', 'ETL Built in transformation (Aggregation)', 'Y', CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
	UNION ALL
	SELECT  'MOD', 'MOD(numeric_value,divisor)', 'ETL Built-In Transformation: Record handling and processing rule for all projects. Returns the remainder of a division calculation. For example, MOD(8,5) returns 3.', 'Y', CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
	UNION ALL
	SELECT  'MOVINGAVG', 'MOVINGAVG(numeric_value,rowset[,filter_condition])', 'ETL Built-In Transformation: Record handling and processing rule for all projects. Returns the average (row-by-row) of a specified set of rows. Optionally, you can apply a condition to filter rows before calculating the moving average.', 'Y', CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
	UNION ALL
	SELECT  'MOVINGSUM', 'MOVINGSUM(numeric_value,rowset[,filter_condition])', 'ETL Built-In Transformation: Record handling and processing rule for all projects. Returns the sum (row-by-row) of a specified set of rows.Optionally, you can apply a condition to filter rows before calculating the moving sum.', 'Y', CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
	UNION ALL
	SELECT  'NPER', 'NPER(rate,presentvalue,payment[,futurevalue,type])', 'ETL Built-In Transformation: Record handling and processing rule for all projects. Returns the number of periods for an investment based on a constant interest rate and periodic, constant payments.', 'Y', CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
	UNION ALL
	SELECT  'PERCENTILE', 'PERCENTILE(numeric_value,percentile[,filter_condition])', 'ETL Built in transformation (Aggregation). Record handling and processing rule for all projects. Calculates the value that falls at a given percentile in a group of numbers. You can nest only one other aggregate function within PERCENTILE, and the nested function must return a Numeric datatype.The PowerCenter Integration Service reads all rows of data to perform the percentile calculation. The process of reading rows to perform the calculation may affect performance. Optionally, you can apply a filter to limit the rows you read to calculate the percentile.', 'Y', CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
	UNION ALL
	SELECT  'PMT', 'PMT(rate,terms,presentvalue[,futurevalue,type])', 'ETL Built-In Transformation: Record handling and processing rule for all projects. Returns the payment for a loan based on constant payments and a constant interest rate.', 'Y', CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
	UNION ALL
	SELECT  'POWER', 'POWER(base,exponent)', 'ETL Built-In Transformation: Record handling and processing rule for all projects. Returns a value raised to the exponent you pass to the function.', 'Y', CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
	UNION ALL
	SELECT  'PV', 'PV(rate,terms,payment[,futurevalue,type])', 'ETL Built-In Transformation: Record handling and processing rule for all projects. Returns the present value of an investment.', 'Y', CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
	UNION ALL
	SELECT  'RAND', 'RAND(seed)', 'ETL Built-In Transformation: Record handling and processing rule for all projects. Returns a random number between 0 and 1. This is useful for probability scenarios.', 'Y', CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
	UNION ALL
	SELECT  'RATE', 'RATE(terms,payment,presentvalue[,futurevalue,type])', 'ETL Built-In Transformation: Record handling and processing rule for all projects. Returns the interest rate earned per period by a security.', 'Y', CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
	UNION ALL
	SELECT  'REG_EXTRACT', 'REG_EXTRACT( subject,''pattern'',subPatternNum)', 'ETL Built-In Transformation: Record handling and processing rule for all projects. Extracts subpatterns of a regular expression within an input value. For example, from a regular expression pattern for a full name, you can extract the first name or last name.Note: Use the REG_REPLACE function to replace a character pattern in a string with another character pattern', 'Y', CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
	UNION ALL
	SELECT  'REG_MATCH', 'REG_MATCH(subject,pattern)', 'ETL Built-In Transformation: Record handling and processing rule for all projects. Returns whether a value matches a regular expression pattern. This lets you validate data patterns, such as IDs, telephone numbers, postal codes, and state names.Note: Use the REG_REPLACE function to replace a character pattern in a string with a new character pattern.', 'Y', CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
	UNION ALL
	SELECT  'REG_REPLACE', 'REG_REPLACE(subject,pattern,replace,numReplacements', 'ETL Built-In Transformation: Record handling and processing rule for all projects. Replaces characters in a string with another character pattern. By default, REG_REPLACE searches the input string for the character pattern you specify and replaces all occurrences with the replacement pattern. You can also indicate the number of occurrences of the pattern you want to replace in the string.', 'Y', CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
	UNION ALL
	SELECT  'REPLACECHR', 'REPLACECHR(CaseFlag,InputString,OldCharSet,NewChar )', 'ETL Built-In Transformation: Record handling and processing rule for all projects. Replaces characters in a string with a single character or no character. REPLACECHR searches the input string for the characters you specify and replaces all occurrences of all characters with the new character you specify.', 'Y', CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
	UNION ALL
	SELECT  'REPLACESTR', 'REPLACESTR(CaseFlag,InputString,OldString1,[OldString2, ... OldStringN,]NewString)', 'ETL Built-In Transformation: Record handling and processing rule for all projects. Replaces characters in a string with a single character, multiple characters, or no character. REPLACESTR searches the input string for all strings you specify and replaces them with the new string you specify.', 'Y', CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
	UNION ALL
	SELECT  'REVERSE', 'REVERSE(string)', 'ETL Built-In Transformation: Record handling and processing rule for all projects. Reverses the input string.', 'Y', CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
	UNION ALL
	SELECT  'ROUND', 'ROUND', 'ETL Built-In Transformation: Record handling and processing rule for all projects', 'Y', CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
	UNION ALL
	SELECT  'RPAD', 'RPAD(first_string,length[,second_string])', 'ETL Built-In Transformation: Record handling and processing rule for all projects. Converts a string to a specified length by adding blanks or characters to the end of the string.', 'Y', CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
	UNION ALL
	SELECT  'RTRIM', 'RTRIM(string[,trim_set])', 'ETL Built-In Transformation: Record handling and processing rule for all projects. Removes blanks or characters from the end of a string.', 'Y', CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
	UNION ALL
	SELECT  'SET_DATE_PART', 'SET_DATE_PART(date,format,value)', 'ETL Built-In Transformation: Record handling and processing rule for all projects. Sets one part of a Date/Time value to a value you specify.', 'Y', CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
	UNION ALL
	SELECT  'SETCOUNTVARIABLE', 'SETCOUNTVARIABLE($$Variable)', 'ETL Built-In Transformation: Record handling and processing rule for all projects. Counts the rows evaluated by the function and increments the current value of a mapping variable based on the count. Increases the current value by one for each row marked for insertion. Decreases the current value by one for each row marked for deletion. Keeps the current value the same for each row marked for update or reject. Returns the new current value.', 'Y', CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
	UNION ALL
	SELECT  'SETMAXVARIABLE', 'SETMAXVARIABLE($$Variable,value)', 'ETL Built-In Transformation: Record handling and processing rule for all projects. Sets the current value of a mapping variable to the higher of two values: the current value of the variable or the value you specify. Returns the new current value. The function executes only if a row is marked as insert. SETMAXVARIABLE ignores all other row types and the current value remains unchanged.', 'Y', CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
	UNION ALL
	SELECT  'SETMINVARIABLE', 'SETMINVARIABLE($$Variable,value)', 'ETL Built-In Transformation: Record handling and processing rule for all projects. Sets the current value of a mapping variable to the lower of two values: the current value of the variable or the value you specify. Returns the new current value. The SETMINVARIABLE function executes only if a row is marked as insert. SETMINVARIABLE ignores all other row types and the current value remains unchanged.', 'Y', CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
	UNION ALL
	SELECT  'SETVARIABLE', 'SETVARIABLE($$Variable,value)', 'ETL Built-In Transformation: Record handling and processing rule for all projects. Sets the current value of a mapping variable to a value you specify. Returns the specified value. The SETVARIABLE function executes only if a row is marked as insert or update. SETVARIABLE ignores all other row types and the current value remains unchanged.', 'Y', CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
	UNION ALL
	SELECT  'SIGN', 'SIGN(numeric_value)', 'ETL Built-In Transformation: Record handling and processing rule for all projects. Returns whether a numeric value is positive, negative, or 0.', 'Y', CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
	UNION ALL
	SELECT  'SIN', 'SIN(numeric_value)', 'ETL Built-In Transformation: Record handling and processing rule for all projects. Returns the sine of a numeric value (expressed in radians).', 'Y', CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
	UNION ALL
	SELECT  'SINH', 'SINH(numeric_value)', 'ETL Built-In Transformation: Record handling and processing rule for all projects. Returns the hyperbolic sine of the numeric value.', 'Y', CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
	UNION ALL
	SELECT  'SOUNDEX', 'SOUNDEX(string)', 'ETL Built-In Transformation: Record handling and processing rule for all projects. Encodes a string value into a four-character string.SOUNDEX works for characters in the English alphabet (A-Z). It uses the first character of the input string as the first character in the return value and encodes the remaining three unique consonants as numbers.', 'Y', CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
	UNION ALL
	SELECT  'SQRT', 'SQRT(numeric_value)', 'ETL Built-In Transformation: Record handling and processing rule for all projects. Returns the square root of a non-negative numeric value.', 'Y', CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
	UNION ALL
	SELECT  'STDDEV', 'STDDEV(numeric_value[,filter_condition])', 'ETL Built in transformation (Aggregation). Returns the standard deviation of the numeric values you pass to this function. STDDEV is used to analyze statistical data. You can nest only one other aggregate function within STDDEV, and the nested function must return a Numeric datatype.', 'Y', CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
	UNION ALL
	SELECT  'SUBSTR', 'SUBSTR(string,start[,length])', 'ETL Built-In Transformation: Record handling and processing rule for all projects. Returns a portion of a string. SUBSTR counts all characters, including blanks, starting at the beginning of the string.', 'Y', CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
	UNION ALL
	SELECT  'SUM', 'SUM(numeric_value[,filter_condition])', 'ETL Built in transformation (Aggregation).Returns the sum of all values in the selected port. Optionally, you can apply a filter to limit the rows you read to calculate the total. You can nest only one other aggregate function within SUM, and the nested function must return a Numeric datatype.', 'Y', CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
	UNION ALL
	SELECT  'SYSTIMESTAMP', 'SYSTIMESTAMP([format])', 'ETL Built-In Transformation: Record handling and processing rule for all projects. Returns the current date and time of the node hosting the PowerCenter Integration Service with precision to the nanosecond. The precision to which you display the date and time depends on the platform.', 'Y', CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
	UNION ALL
	SELECT  'TAN', 'TAN(numeric_value)', 'TL Built-In Transformation: Record handling and processing rule for all projects. Returns the tangent of a numeric value (expressed in radians).', 'Y', CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
	UNION ALL
	SELECT  'TANH', 'TANH(numeric_value)', 'ETL Built-In Transformation: Record handling and processing rule for all projects. Returns the hyperbolic tangent of the numeric value passed to this function.', 'Y', CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
	UNION ALL
	SELECT  'TO_BIGINT', 'TO_BIGINT(value[,flag])', 'ETL Built-In Transformation: Record handling and processing rule for all projects. Converts a string or numeric value to a bigint value. TO_BIGINT syntax contains an optional argument that you can choose to round the number to the nearest integer or truncate the decimal portion. TO_BIGINT ignores leading blanks.', 'Y', CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
	UNION ALL
	SELECT  'TO_CHAR', 'TO_CHAR', 'ETL Built-In Transformation: Record handling and processing rule for all projects', 'Y', CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
	UNION ALL
	SELECT  'TO_DATE', 'TO_DATE(string[,format])', 'ETL Built-In Transformation: Record handling and processing rule for all projects. Converts a character string to a Date/Time datatype. You use the TO_DATE format strings to specify the format of the source strings.', 'Y', CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
	UNION ALL
	SELECT  'TO_DECIMAL', 'TO_DECIMAL(value[,scale])', 'ETL Built-In Transformation: Record handling and processing rule for all projects. Converts a string or numeric value to a decimal value. TO_DECIMAL ignores leading blanks.', 'Y', CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
	UNION ALL
	SELECT  'TO_FLOAT', 'TO_FLOAT(value)', 'ETL Built-In Transformation: Record handling and processing rule for all projects. Converts a string or numeric value to a double-precision floating point number (the Double datatype). TO_FLOAT ignores leading blanks.', 'Y', CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
	UNION ALL
	SELECT  'TO_INTEGER', 'TO_INTEGER(value[,flag])', 'ETL Built-In Transformation: Record handling and processing rule for all projects. Converts a string or numeric value to an integer. TO_INTEGER syntax contains an optional argument that you can choose to round the number to the nearest integer or truncate the decimal portion. TO_INTEGER ignores leading blanks.', 'Y', CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
	UNION ALL
	SELECT  'TRUNC', 'TRUNC', 'ETL Built-In Transformation: Record handling and processing rule for all projects', 'Y', CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
	UNION ALL
	SELECT  'UPPER', 'UPPER(string)', 'ETL Built-In Transformation: Record handling and processing rule for all projects. Converts lowercase string characters to uppercase.', 'Y', CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
	UNION ALL
	SELECT  'VARIANCE', 'VARIANCE(numeric_value[,filter_condition])', 'ETL Built in transformation (Aggregation). Returns the variance of a value you pass to it. VARIANCE is used to analyze statistical data. You can nest only one other aggregate function within VARIANCE, and the nested function must return a Numeric datatype', 'Y', CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
END
GO

IF NOT EXISTS (SELECT * FROM APP_PREFERENCES WHERE  PREFERENCE_NAME = 'ETL_TRANSFORMATION_SETTINGS')
BEGIN
    INSERT INTO APP_PREFERENCES(PREFERENCE_NAME,PREFERENCE_VALUE)
    VALUES('ETL_TRANSFORMATION_SETTINGS','{"com.ads.mm.transformation.pseudocode.informatica":1}')
END
GO

IF COL_LENGTH('TRANSFORMATIONS_HISTORY', 'ETL_TOOL') IS NULL
BEGIN
	ALTER TABLE [TRANSFORMATIONS_HISTORY] ADD [ETL_TOOL] VARCHAR(100)
END
GO

IF EXISTS (SELECT COUNT(*) FROM [TRANSFORMATIONS_HISTORY] WHERE ETL_TOOL IS NULL)
    BEGIN
	EXECUTE('UPDATE TRANSFORMATIONS_HISTORY SET ETL_TOOL = ''INFORMATICA_PSEUDOCODE'' WHERE ETL_TOOL IS NULL');
    END
GO
IF COL_LENGTH('SYS_CON_ENVIRONMENTS', 'VERSION') IS NULL
    BEGIN
        EXECUTE('ALTER TABLE SYS_CON_ENVIRONMENTS ADD VERSION DECIMAL(16,2) DEFAULT 1.00');
        EXECUTE('UPDATE SYS_CON_ENVIRONMENTS SET VERSION = 1.00');
        EXECUTE('ALTER TABLE SYS_CON_ENVIRONMENTS DROP CONSTRAINT UK_SYS_CON_ENV');
        EXECUTE('ALTER TABLE SYS_CON_ENVIRONMENTS ADD CONSTRAINT UK_SYS_CON_ENVRON UNIQUE (SYSTEM_ID, SYSTEM_ENVIRONMENT_NAME, VERSION)');
        EXECUTE('ALTER TABLE SYS_CON_ENVIRONMENTS ADD VERSION_LABEL VARCHAR(50)');
        EXECUTE('ALTER TABLE SYS_CON_ENVIRONMENTS ADD CHANGED_DESC VARCHAR(4000)');
    END
GO
IF COL_LENGTH('SYSTEM_TABLE_COLUMNS_METADATA', 'SCE_ID') IS NULL
    BEGIN
        EXECUTE('ALTER TABLE SYSTEM_TABLE_COLUMNS_METADATA ADD SCE_ID BIGINT')
        EXECUTE('UPDATE SYSTEM_TABLE_COLUMNS_METADATA SET SYSTEM_TABLE_COLUMNS_METADATA.SCE_ID = STM.SCE_ID FROM SYSTEM_TABLE_METADATA STM WHERE (STM.STM_ID = SYSTEM_TABLE_COLUMNS_METADATA.STM_ID)')
        EXECUTE('ALTER TABLE SYSTEM_TABLE_COLUMNS_METADATA ADD CONSTRAINT FK_SYS_CON_ENV_COL FOREIGN KEY(SCE_ID) REFERENCES SYS_CON_ENVIRONMENTS(SCE_ID)')
    END
GO
IF NOT EXISTS (SELECT * FROM   USER_PREFERENCES WHERE  USER_ID LIKE 'SM_ENVIRONMENT_SETTINGS_VERSION_LABEL%')
    INSERT INTO USER_PREFERENCES (USER_ID,COLUMN_PREFERENCES) VALUES('SM_ENVIRONMENT_SETTINGS_VERSION_LABEL_Administrator','false')
    INSERT INTO USER_PREFERENCES (USER_ID,COLUMN_PREFERENCES) VALUES('SM_ENVIRONMENT_SETTINGS_VERSION_LABEL_USER_BASED_Administrator','false')
    INSERT INTO USER_PREFERENCES (USER_ID,COLUMN_PREFERENCES) VALUES('SM_ENVIRONMENT_SETTINGS_VERSION_LABEL_NO_Administrator','false')
GO
IF NOT EXISTS(SELECT * FROM SYS.VIEWS WHERE NAME = 'ACTIVE_SYS_CON_ENVIRONMENTS')
BEGIN
   EXEC ('CREATE VIEW [ACTIVE_SYS_CON_ENVIRONMENTS]
 AS
   SELECT *
   FROM   SYS_CON_ENVIRONMENTS
   WHERE  STATUS =''ACTIVE''');
END
ELSE
BEGIN
   EXEC ('ALTER VIEW ACTIVE_SYS_CON_ENVIRONMENTS
 AS
   SELECT *
   FROM   SYS_CON_ENVIRONMENTS
   WHERE  STATUS = ''ACTIVE''
   ');
END
GO
ALTER VIEW [VALID_SYS_TBL_COL_METADATA]
 AS
   SELECT STCM.* FROM   SYSTEM_TABLE_COLUMNS_METADATA STCM JOIN ACTIVE_SYS_CON_ENVIRONMENTS SCS ON STCM.SCE_ID = SCS.SCE_ID WHERE  STCM.VALID = 1 OR STCM.VALID IS NULL
GO
ALTER VIEW [VALID_SYSTEM_TABLE_METADATA]
 AS
   SELECT STM.* FROM   SYSTEM_TABLE_METADATA STM JOIN ACTIVE_SYS_CON_ENVIRONMENTS SCS ON STM.SCE_ID = SCS.SCE_ID WHERE STM.VALID = 1 OR STM.VALID IS NULL
GO
IF NOT EXISTS(SELECT * FROM SYS.VIEWS WHERE NAME = 'V_ACTIVE_STCM_JSON')
    BEGIN
        EXEC ('create view V_ACTIVE_STCM_JSON as select sdd.SYSTEM_ID,sdd.SYSTEM_NAME,sce.SCE_ID, sce.SYSTEM_ENVIRONMENT_NAME,stm.STM_ID,stm.TABLE_NAME, stcm.COLUMN_NAME,
            (''{SDD:'' + sdd.SYSTEM_NAME + '',SCE:'' + sce.SYSTEM_ENVIRONMENT_NAME + '',STM:'' + stm.TABLE_NAME + '',SCTM:'' + stcm.COLUMN_NAME + ''}'') as json, stcm.valid, stcm.stcm_id
            from VALID_SYS_TBL_COL_METADATA as STCM
            left join VALID_SYSTEM_TABLE_METADATA as STM on STM.stm_id = STCM.STM_ID
            left join ACTIVE_SYS_CON_ENVIRONMENTS as SCE on SCE.sce_id = STM.sce_id
            left join SYSTEM_DEFINITION_DETAILS as SDD on SDD.SYSTEM_ID = SCE.SYSTEM_ID');
    END
GO
IF EXISTS (SELECT * FROM SYS.OBJECTS WHERE OBJECT_ID = OBJECT_ID(N'[FN_REPLACE_SYS_NAME]') AND TYPE IN (N'FN', N'IF', N'TF', N'FS', N'FT'))
BEGIN
    DROP FUNCTION [FN_REPLACE_SYS_NAME]
END
GO
CREATE FUNCTION [FN_REPLACE_SYS_NAME](@p_system_name varchar(max),  @p_old_system_name varchar(max), @p_new_system_name varchar(max))
	RETURNS VARCHAR(MAX) AS
BEGIN
	DECLARE @r_sys_src_name varchar(max) = '';
	DECLARE @v_old_upd_sys_name varchar(max)= @p_old_system_name;
	DECLARE @v_new_sys_name varchar(max)= @p_new_system_name;
	DECLARE @v_temp_sys_name VARCHAR(MAX) = @p_system_name;
	DECLARE @v_temp_cur_sys_name VARCHAR(MAX);
	DECLARE @v_space_count INT;
	DECLARE @cnt INT = 0;
	SET @v_space_count = LEN(@p_system_name) - LEN(REPLACE(@p_system_name, CHAR(10),''));
	IF @v_space_count = 0
		BEGIN
			IF (UPPER(@p_system_name) = UPPER(@v_old_upd_sys_name))
			BEGIN
				set @r_sys_src_name = @v_new_sys_name;
			END
		END
	ELSE
		BEGIN
			WHILE @cnt <= @v_space_count
			BEGIN
				IF @CNT = @v_space_count
				BEGIN
					SET @v_temp_cur_sys_name = @v_temp_sys_name;
					SET @v_temp_sys_name = '';
				END
				ELSE
				BEGIN
					SET @v_temp_cur_sys_name = SUBSTRING(@v_temp_sys_name, 0, CHARINDEX(CHAR(10), @v_temp_sys_name));
					SET @v_temp_sys_name = SUBSTRING(@v_temp_sys_name, CHARINDEX(CHAR(10), @v_temp_sys_name) + 1, len(@v_temp_sys_name));
				END
				IF(UPPER(@v_temp_cur_sys_name) = UPPER(@v_old_upd_sys_name))
				BEGIN
					IF LEN(@r_sys_src_name) = 0
					BEGIN
						SET @r_sys_src_name = @v_new_sys_name;
					END
					ELSE
					BEGIN
						SET @r_sys_src_name = @r_sys_src_name + CHAR(10) + @v_new_sys_name;
					END
				END
				ELSE
				BEGIN
					IF LEN(@r_sys_src_name) = 0
					BEGIN
						SET @r_sys_src_name = @v_temp_cur_sys_name;
					END
					ELSE
					BEGIN
						SET @r_sys_src_name = @r_sys_src_name + CHAR(10) + @v_temp_cur_sys_name;
					END
				END
			SET @cnt = @cnt + 1;
		END
	END
	IF LEN(@r_sys_src_name) = 0
	BEGIN
		SET	@r_sys_src_name = @p_system_name;
	END
	RETURN @r_sys_src_name;
END
GO
IF EXISTS (SELECT * FROM SYS.OBJECTS WHERE OBJECT_ID = OBJECT_ID(N'FN_APND_SYS_ENV_CHECK') AND TYPE IN (N'FN', N'IF', N'TF', N'FS', N'FT'))
BEGIN
    DROP FUNCTION [FN_APND_SYS_ENV_CHECK]
END
GO
CREATE FUNCTION [FN_APND_SYS_ENV_CHECK](@p_system_name varchar(max),@p_environment_name varchar(max),  @p_old_system_name varchar(max),  @p_old_environment_name varchar(max))
	RETURNS VARCHAR(MAX) AS
BEGIN
	DECLARE @r_sys_src_name varchar(max) = '';
	DECLARE @r_sys_environment_src_name varchar(max) = '';
	DECLARE @v_old_upd_sys_name varchar(max)= @p_old_system_name;
	DECLARE @v_old_upd_environment_name varchar(max)= @p_old_environment_name;
	DECLARE @v_temp_sys_name VARCHAR(MAX) = @p_system_name;
	DECLARE @v_temp_environment_name VARCHAR(MAX) = @p_environment_name;
	DECLARE @v_temp_cur_sys_name VARCHAR(MAX);
	DECLARE @v_temp_cur_environment_name VARCHAR(MAX);
	DECLARE @v_sys_space_count INT;
	DECLARE @v_environment_space_count INT;
	DECLARE @cnt INT = 0;
	DECLARE @existedCnt INT = 0;
	SET @v_sys_space_count = LEN(@p_system_name) - LEN(REPLACE(@p_system_name, CHAR(10),''));
	SET @v_environment_space_count = LEN(@p_environment_name) - LEN(REPLACE(@p_environment_name, CHAR(10),''));
	IF (@v_sys_space_count = 0 AND @v_environment_space_count = 0)
		BEGIN
			IF (UPPER(@p_system_name) = UPPER(@v_old_upd_sys_name) AND UPPER(@p_environment_name) = UPPER(@v_old_upd_environment_name))
			BEGIN
				SET @existedCnt = @existedCnt + 1;
			END
		END
	ELSE
		BEGIN
			WHILE @cnt <= @v_sys_space_count OR @cnt <= @v_environment_space_count
			BEGIN
				IF @cnt = @v_environment_space_count and @cnt = @v_sys_space_count
				BEGIN
					SET @v_temp_cur_sys_name = @v_temp_sys_name;
					SET @v_temp_sys_name = '';
					SET @v_temp_cur_environment_name = @v_temp_environment_name;
					SET @v_temp_environment_name = '';
				END
				ELSE IF @cnt = @v_sys_space_count
				BEGIN
					SET @v_temp_cur_sys_name = @v_temp_sys_name;
					SET @v_temp_sys_name = '';
					SET @v_temp_cur_environment_name = SUBSTRING(@v_temp_environment_name, 0, CHARINDEX(CHAR(10), @v_temp_environment_name));
					SET @v_temp_environment_name = SUBSTRING(@v_temp_environment_name, CHARINDEX(CHAR(10), @v_temp_environment_name) + 1, len(@v_temp_environment_name));
				END
				ELSE IF @cnt = @v_environment_space_count
				BEGIN
					SET @v_temp_cur_sys_name = SUBSTRING(@v_temp_sys_name, 0, CHARINDEX(CHAR(10), @v_temp_sys_name));
					SET @v_temp_sys_name = SUBSTRING(@v_temp_sys_name, CHARINDEX(CHAR(10), @v_temp_sys_name) + 1, len(@v_temp_sys_name));
					SET @v_temp_cur_environment_name = @v_temp_environment_name;
					SET @v_temp_environment_name = '';
				END
				ELSE
				BEGIN
					SET @v_temp_cur_sys_name = SUBSTRING(@v_temp_sys_name, 0, CHARINDEX(CHAR(10), @v_temp_sys_name));
					SET @v_temp_sys_name = SUBSTRING(@v_temp_sys_name, CHARINDEX(CHAR(10), @v_temp_sys_name) + 1, len(@v_temp_sys_name));
					SET @v_temp_cur_environment_name = SUBSTRING(@v_temp_environment_name, 0, CHARINDEX(CHAR(10), @v_temp_environment_name));
					SET @v_temp_environment_name = SUBSTRING(@v_temp_environment_name, CHARINDEX(CHAR(10), @v_temp_environment_name) + 1, len(@v_temp_environment_name));
				END
				IF(UPPER(@v_temp_cur_sys_name) = UPPER(@v_old_upd_sys_name) AND UPPER(@v_temp_cur_environment_name) = UPPER(@v_old_upd_environment_name))
				BEGIN
					SET @existedCnt = @existedCnt + 1;
				END
			SET @cnt = @cnt + 1;
		END
	END
	IF @existedCnt > 0
	BEGIN
		set @existedCnt = 1;
	END
	ELSE
	BEGIN
		set @existedCnt = 0;
	END
	return @existedCnt;
END
GO
IF EXISTS (SELECT * FROM SYS.OBJECTS WHERE OBJECT_ID = OBJECT_ID(N'FN_REPLACE_ENVIRONMENT_NAME') AND TYPE IN (N'FN', N'IF', N'TF', N'FS', N'FT'))
BEGIN
    DROP FUNCTION [FN_REPLACE_ENVIRONMENT_NAME]
END
GO
CREATE FUNCTION [FN_REPLACE_ENVIRONMENT_NAME](@p_system_name varchar(max),@p_environment_name varchar(max),  @p_old_system_name varchar(max),  @p_old_environment_name varchar(max), @p_new_environment_name varchar(max))
	RETURNS VARCHAR(MAX) AS
BEGIN
	DECLARE @r_sys_environment_src_name varchar(max) = '';
	DECLARE @v_old_upd_sys_name varchar(max)= @p_old_system_name;
	DECLARE @v_old_upd_environment_name varchar(max)= @p_old_environment_name;
	DECLARE @v_new_environment_name varchar(max)= @p_new_environment_name;
	DECLARE @v_temp_sys_name VARCHAR(MAX) = @p_system_name;
	DECLARE @v_temp_environment_name VARCHAR(MAX) = @p_environment_name;
	DECLARE @v_temp_cur_sys_name VARCHAR(MAX);
	DECLARE @v_temp_cur_environment_name VARCHAR(MAX);
	DECLARE @v_sys_space_count INT;
	DECLARE @v_environment_space_count INT;
	DECLARE @cnt INT = 0;
	SET @v_sys_space_count = LEN(@p_system_name) - LEN(REPLACE(@p_system_name, CHAR(10),''));
	SET @v_environment_space_count = LEN(@p_environment_name) - LEN(REPLACE(@p_environment_name, CHAR(10),''));
	IF (@v_sys_space_count = 0 AND @v_environment_space_count = 0)
		BEGIN
			IF (UPPER(@p_system_name) = UPPER(@v_old_upd_sys_name) AND UPPER(@p_environment_name) = UPPER(@v_old_upd_environment_name))
			BEGIN
				set @r_sys_environment_src_name = @v_new_environment_name;
			END
		END
	ELSE
		BEGIN
			WHILE @cnt <= @v_sys_space_count OR @cnt <= @v_environment_space_count
			BEGIN
				IF @cnt = @v_environment_space_count and @cnt = @v_sys_space_count
				BEGIN
					SET @v_temp_cur_sys_name = @v_temp_sys_name;
					SET @v_temp_sys_name = '';
					SET @v_temp_cur_environment_name = @v_temp_environment_name;
					SET @v_temp_environment_name = '';
				END
				ELSE IF @cnt = @v_sys_space_count
				BEGIN
					SET @v_temp_cur_sys_name = @v_temp_sys_name;
					SET @v_temp_sys_name = '';
					SET @v_temp_cur_environment_name = SUBSTRING(@v_temp_environment_name, 0, CHARINDEX(CHAR(10), @v_temp_environment_name));
					SET @v_temp_environment_name = SUBSTRING(@v_temp_environment_name, CHARINDEX(CHAR(10), @v_temp_environment_name) + 1, len(@v_temp_environment_name));
				END
				ELSE IF @cnt = @v_environment_space_count
				BEGIN
					SET @v_temp_cur_sys_name = SUBSTRING(@v_temp_sys_name, 0, CHARINDEX(CHAR(10), @v_temp_sys_name));
					SET @v_temp_sys_name = SUBSTRING(@v_temp_sys_name, CHARINDEX(CHAR(10), @v_temp_sys_name) + 1, len(@v_temp_sys_name));
					SET @v_temp_cur_environment_name = @v_temp_environment_name;
					SET @v_temp_environment_name = '';
				END
				ELSE
				BEGIN
					SET @v_temp_cur_sys_name = SUBSTRING(@v_temp_sys_name, 0, CHARINDEX(CHAR(10), @v_temp_sys_name));
					SET @v_temp_sys_name = SUBSTRING(@v_temp_sys_name, CHARINDEX(CHAR(10), @v_temp_sys_name) + 1, len(@v_temp_sys_name));
					SET @v_temp_cur_environment_name = SUBSTRING(@v_temp_environment_name, 0, CHARINDEX(CHAR(10), @v_temp_environment_name));
					SET @v_temp_environment_name = SUBSTRING(@v_temp_environment_name, CHARINDEX(CHAR(10), @v_temp_environment_name) + 1, len(@v_temp_environment_name));
				END
				IF(UPPER(@v_temp_cur_sys_name) = UPPER(@v_old_upd_sys_name) AND UPPER(@v_temp_cur_environment_name) = UPPER(@v_old_upd_environment_name))
				BEGIN
					IF LEN(@r_sys_environment_src_name) = 0
					BEGIN
						SET @r_sys_environment_src_name = @v_new_environment_name;
					END
					ELSE
					BEGIN
						SET @r_sys_environment_src_name = @r_sys_environment_src_name + CHAR(10) + @v_new_environment_name;
					END
				END
				ELSE
				BEGIN
					IF LEN(@r_sys_environment_src_name) = 0
					BEGIN
						SET @r_sys_environment_src_name = @v_temp_cur_environment_name;
					END
					ELSE
					BEGIN
						SET @r_sys_environment_src_name = @r_sys_environment_src_name + CHAR(10) + @v_temp_cur_environment_name;
					END
				END
			SET @cnt = @cnt + 1;
		END
	END
	IF LEN(@r_sys_environment_src_name) = 0
	BEGIN
		SET	@r_sys_environment_src_name = @p_environment_name;
	END
	RETURN @r_sys_environment_src_name;
END
GO
IF COL_LENGTH('CSM_CODE_VALUE', 'START_DATE') IS NULL
    BEGIN
        EXECUTE('ALTER TABLE CSM_CODE_VALUE ADD START_DATE DATETIME')
		EXECUTE('ALTER TABLE CSM_CODE_VALUE ADD END_DATE DATETIME')
		EXECUTE('ALTER TABLE CSM_CODE_VALUE ADD USER_DEFINED_FIELD1 VARCHAR(MAX)')
		EXECUTE('ALTER TABLE CSM_CODE_VALUE ADD USER_DEFINED_FIELD2 VARCHAR(MAX)')
		EXECUTE('ALTER TABLE CSM_CODE_VALUE ADD USER_DEFINED_FIELD3 VARCHAR(MAX)')
		EXECUTE('ALTER TABLE CSM_CODE_VALUE ADD USER_DEFINED_FIELD4 VARCHAR(MAX)')
		EXECUTE('ALTER TABLE CSM_CODE_VALUE ADD USER_DEFINED_FIELD5 VARCHAR(MAX)')
		EXECUTE('ALTER TABLE CSM_CODE_VALUE ADD USER_DEFINED_FIELD6 VARCHAR(MAX)')
		EXECUTE('ALTER TABLE CSM_CODE_VALUE ADD USER_DEFINED_FIELD7 VARCHAR(MAX)')
		EXECUTE('ALTER TABLE CSM_CODE_VALUE ADD USER_DEFINED_FIELD8 VARCHAR(MAX)')
		EXECUTE('ALTER TABLE CSM_CODE_VALUE ADD USER_DEFINED_FIELD9 VARCHAR(MAX)')
		EXECUTE('ALTER TABLE CSM_CODE_VALUE ADD USER_DEFINED_FIELD10 VARCHAR(MAX)')
    END
GO
IF EXISTS(SELECT * FROM SYS.VIEWS WHERE NAME = 'V_CODESET_DETAILS')
BEGIN
   DROP VIEW V_CODESET_DETAILS
END
GO

IF NOT EXISTS(SELECT * FROM SYS.VIEWS WHERE NAME = 'V_CODESET_DETAILS')
BEGIN
   EXEC ('CREATE  VIEW V_CODESET_DETAILS (CODESET_ID, CODESET_NAME, CODESET_VERSION, CODE_ID, CODE_VALUE, CODE_NAME, CODE_DESC, SYSTEM_NAME,START_DATE,END_DATE,USER_DEFINED_FIELD1,USER_DEFINED_FIELD2,USER_DEFINED_FIELD3,USER_DEFINED_FIELD4,USER_DEFINED_FIELD5,USER_DEFINED_FIELD6,USER_DEFINED_FIELD7,USER_DEFINED_FIELD8,USER_DEFINED_FIELD9,USER_DEFINED_FIELD10)
	AS
	  SELECT B.CODESET_ID,
	    B.CODESET_NAME,
	    B.CODESET_VERSION,
	    C.CODE_ID,
	    C.CODE_STND_VALUE AS CODE_VALUE,
	    C.CODE_NAME,
		C.CODE_DESC,
	   CASE WHEN (C.SYSTEM_ENV_NAME IS NULL OR LTRIM(RTRIM(C.SYSTEM_ENV_NAME)) = '''') THEN C.SYSTEM_NAME ELSE C.SYSTEM_ENV_NAME END AS SYSTEM_NAME,
	   C.START_DATE,
	    C.END_DATE,
	    C.USER_DEFINED_FIELD1,
	    C.USER_DEFINED_FIELD2,
	    C.USER_DEFINED_FIELD3,
	    C.USER_DEFINED_FIELD4,
	    C.USER_DEFINED_FIELD5,
	    C.USER_DEFINED_FIELD6,
	    C.USER_DEFINED_FIELD7,
	    C.USER_DEFINED_FIELD8,
	    C.USER_DEFINED_FIELD9,
	    C.USER_DEFINED_FIELD10
	  FROM CSM_CODESET B JOIN CSM_CODE_VALUE C
	  ON B.CODESET_ID = C.CODESET_ID AND C.DELETE_FLAG=''N''');
END
GO
IF EXISTS (SELECT * FROM   SYSOBJECTS  WHERE  ID = OBJECT_ID(N'ADS_PROFILES') AND TYPE = 'U')
  BEGIN
   IF (SELECT COUNT(PROFILE_ID) FROM   ADS_PROFILES  WHERE  PROFILE_ID = 1) > 0
    BEGIN
        IF (SELECT COUNT(PROFILE_DETAILS_NAME) FROM   ADS_PROFILES_DETAILS  WHERE  PROFILE_ID = 1 AND PROFILE_DETAILS_NAME in ('CSM_CODE_VALUE_GRID_HEADER_ORDER_PREFERENCE','CSM_CODE_VALUE_GRID_HEADER_VISIBILITY_PREFERENCE')) = 0
        BEGIN
         EXECUTE ('INSERT INTO ADS_PROFILES_DETAILS(PROFILE_ID,PROFILE_DETAILS_NAME,PROFILE_DETAILS_VALUE) VALUES (1,''CSM_CODE_VALUE_GRID_HEADER_ORDER_PREFERENCE'',''codeName:100,codeValue:100,codeDesc:150,codesetName:100,systemEnvName:160,activeFlag:69,deleteFlag:69,startDate:0,endDate:0,userDef1:0,userDef2:0,userDef3:0,userDef4:0,userDef5:0,userDef6:0,userDef7:0,userDef8:0,userDef9:0,userDef10:0,createdBy:100,createdate:150,modifiedby:109,modifieddate:150'')');
         EXECUTE ('INSERT INTO ADS_PROFILES_DETAILS(PROFILE_ID,PROFILE_DETAILS_NAME,PROFILE_DETAILS_VALUE) VALUES (1,''CSM_CODE_VALUE_GRID_HEADER_VISIBILITY_PREFERENCE'',''codeName,codeValue,codeDesc,codesetName,systemEnvName,activeFlag,deleteFlag,,,,,,,,,,,,,createdBy,createdate,modifiedby,modifieddate'')');
        END
    END
 END
GO
IF COL_LENGTH('CSM_CODE_VALUE', 'CODE_STND_VALUE')  < 255
    BEGIN
        EXECUTE('ALTER TABLE CSM_CODE_VALUE ALTER COLUMN CODE_STND_VALUE VARCHAR(255) NOT NULL');
    END
GO
IF NOT EXISTS (SELECT * FROM ADS_KEY_VALUE_OBJECTS WHERE  OBJECT_TYPE = 'TESTCASE_PLAN')
    BEGIN
        INSERT INTO ADS_KEY_VALUE_OBJECTS (OBJECT_TYPE,OBJECT_TABLE,OBJECT_TABLE_COLUMN,OBJECT_PARENT_TYPE,OBJECT_PARENT_COLUMN_ID)
        SELECT 'TESTCASE_PLAN','TCM_TESTCASE','TESTCASE_ID','',''
    END
GO
IF COL_LENGTH('MAPPING_DETAILS', 'SPEC_ARTIFACTS_REFERENCE') IS NULL
 BEGIN
  EXECUTE('ALTER TABLE MAPPING_DETAILS ADD SPEC_ARTIFACTS_REFERENCE varchar(MAX) NULL');
 END
GO
IF EXISTS (SELECT * FROM ADS_MM_VERSION WHERE VALUE = '8.0')
    BEGIN
        UPDATE ADS_PROFILES_DETAILS SET PROFILE_DETAILS_VALUE = PROFILE_DETAILS_VALUE + ',testSpecifications' WHERE PROFILE_DETAILS_NAME = 'TABS_TO_DISPLAY' AND PROFILE_DETAILS_VALUE NOT LIKE '%testSpecifications%';
    END
GO
IF COL_LENGTH('MAPPING_SPECIFICATION', 'REFERENCE_TABLE') IS NULL
    BEGIN
        EXECUTE('ALTER TABLE MAPPING_SPECIFICATION ADD REFERENCE_TABLE VARCHAR(MAX) NULL');
    END
GO
IF EXISTS (SELECT * FROM ADS_MM_VERSION WHERE VALUE < '8.1')
   IF (SELECT count(*) FROM ADS_PROFILES_DETAILS WHERE PROFILE_DETAILS_NAME = 'HEADER_VISIBILITY_PREFERENCE' and PROFILE_DETAILS_VALUE LIKE '%ReferenceTable%') = 0
    BEGIN
        UPDATE ADS_PROFILES_DETAILS SET PROFILE_DETAILS_VALUE = PROFILE_DETAILS_VALUE + ',ReferenceTable' WHERE PROFILE_DETAILS_NAME = 'HEADER_VISIBILITY_PREFERENCE';
    END
GO
IF EXISTS (SELECT * FROM ADS_MM_VERSION WHERE VALUE < '8.1')
    IF (SELECT count(*) FROM ADS_PROFILES_DETAILS WHERE PROFILE_DETAILS_NAME = 'HEADER_ORDER_PREFERENCE' and PROFILE_DETAILS_VALUE LIKE '%ReferenceTable%') = 0
    BEGIN
        UPDATE ADS_PROFILES_DETAILS SET PROFILE_DETAILS_VALUE = PROFILE_DETAILS_VALUE + ',ReferenceTable:200' WHERE PROFILE_DETAILS_NAME = 'HEADER_ORDER_PREFERENCE';
    END
GO
IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'PROJECT_RESOURCES' AND COLUMN_NAME = 'ASSIGNED_ROLE' AND CHARACTER_MAXIMUM_LENGTH = '20')
    BEGIN
        ALTER TABLE PROJECT_RESOURCES  ALTER COLUMN ASSIGNED_ROLE VARCHAR(50)
    END
GO
IF (SELECT count(*) FROM USERS WHERE LANDED_MODULE IS NULL) > 0
    BEGIN
      EXECUTE ('UPDATE USERS SET LANDED_MODULE = ''com.ads.mm.permission.mm'' WHERE LANDED_MODULE IS NULL AND (USER_ID = ''Administrator'' OR USER_ID = ''public'')');
    END
GO
IF COL_LENGTH('CSM_MAPPING_SPEC_READONLY', 'SRC_START_DATE') IS NULL
    BEGIN
  EXECUTE('ALTER TABLE CSM_MAPPING_SPEC_READONLY ADD SRC_START_DATE DATETIME')
  EXECUTE('ALTER TABLE CSM_MAPPING_SPEC_READONLY ADD SRC_END_DATE DATETIME')
  EXECUTE('ALTER TABLE CSM_MAPPING_SPEC_READONLY ADD SRC_USER_DEFINED_FIELD1 VARCHAR(MAX)')
  EXECUTE('ALTER TABLE CSM_MAPPING_SPEC_READONLY ADD SRC_USER_DEFINED_FIELD2 VARCHAR(MAX)')
  EXECUTE('ALTER TABLE CSM_MAPPING_SPEC_READONLY ADD SRC_USER_DEFINED_FIELD3 VARCHAR(MAX)')
  EXECUTE('ALTER TABLE CSM_MAPPING_SPEC_READONLY ADD SRC_USER_DEFINED_FIELD4 VARCHAR(MAX)')
  EXECUTE('ALTER TABLE CSM_MAPPING_SPEC_READONLY ADD SRC_USER_DEFINED_FIELD5 VARCHAR(MAX)')
  EXECUTE('ALTER TABLE CSM_MAPPING_SPEC_READONLY ADD SRC_USER_DEFINED_FIELD6 VARCHAR(MAX)')
  EXECUTE('ALTER TABLE CSM_MAPPING_SPEC_READONLY ADD SRC_USER_DEFINED_FIELD7 VARCHAR(MAX)')
  EXECUTE('ALTER TABLE CSM_MAPPING_SPEC_READONLY ADD SRC_USER_DEFINED_FIELD8 VARCHAR(MAX)')
  EXECUTE('ALTER TABLE CSM_MAPPING_SPEC_READONLY ADD SRC_USER_DEFINED_FIELD9 VARCHAR(MAX)')
  EXECUTE('ALTER TABLE CSM_MAPPING_SPEC_READONLY ADD SRC_USER_DEFINED_FIELD10 VARCHAR(MAX)')
  EXECUTE('ALTER TABLE CSM_MAPPING_SPEC_READONLY ADD TGT_START_DATE DATETIME')
  EXECUTE('ALTER TABLE CSM_MAPPING_SPEC_READONLY ADD TGT_END_DATE DATETIME')
  EXECUTE('ALTER TABLE CSM_MAPPING_SPEC_READONLY ADD TGT_USER_DEFINED_FIELD1 VARCHAR(MAX)')
  EXECUTE('ALTER TABLE CSM_MAPPING_SPEC_READONLY ADD TGT_USER_DEFINED_FIELD2 VARCHAR(MAX)')
  EXECUTE('ALTER TABLE CSM_MAPPING_SPEC_READONLY ADD TGT_USER_DEFINED_FIELD3 VARCHAR(MAX)')
  EXECUTE('ALTER TABLE CSM_MAPPING_SPEC_READONLY ADD TGT_USER_DEFINED_FIELD4 VARCHAR(MAX)')
  EXECUTE('ALTER TABLE CSM_MAPPING_SPEC_READONLY ADD TGT_USER_DEFINED_FIELD5 VARCHAR(MAX)')
  EXECUTE('ALTER TABLE CSM_MAPPING_SPEC_READONLY ADD TGT_USER_DEFINED_FIELD6 VARCHAR(MAX)')
  EXECUTE('ALTER TABLE CSM_MAPPING_SPEC_READONLY ADD TGT_USER_DEFINED_FIELD7 VARCHAR(MAX)')
  EXECUTE('ALTER TABLE CSM_MAPPING_SPEC_READONLY ADD TGT_USER_DEFINED_FIELD8 VARCHAR(MAX)')
  EXECUTE('ALTER TABLE CSM_MAPPING_SPEC_READONLY ADD TGT_USER_DEFINED_FIELD9 VARCHAR(MAX)')
  EXECUTE('ALTER TABLE CSM_MAPPING_SPEC_READONLY ADD TGT_USER_DEFINED_FIELD10 VARCHAR(MAX)')
    END
GO
IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'SYSTEM_TABLE_COLUMNS_METADATA' AND COLUMN_NAME = 'COL_DATA_DOMAIN' AND CHARACTER_MAXIMUM_LENGTH = '50')
    BEGIN
        ALTER TABLE SYSTEM_TABLE_COLUMNS_METADATA  ALTER COLUMN COL_DATA_DOMAIN VARCHAR(4000)
    END
GO
IF COL_LENGTH('SYS_CON_ENVIRONMENTS', 'SSH_PORT') IS NULL
BEGIN
   ALTER TABLE [SYS_CON_ENVIRONMENTS] ADD [SSH_PORT] BIGINT NULL
END
GO
IF COL_LENGTH('SYS_CON_ENVIRONMENTS', 'AUTHENTICATION_TYPE') IS NULL
BEGIN
   ALTER TABLE [SYS_CON_ENVIRONMENTS] ADD [AUTHENTICATION_TYPE] varchar(100) NULL
END
GO
IF COL_LENGTH('SYS_CON_ENVIRONMENTS', 'KERBEROS_PRINCIPAL') IS NULL
BEGIN
   ALTER TABLE [SYS_CON_ENVIRONMENTS] ADD [KERBEROS_PRINCIPAL] varchar(255) NULL
END
GO
BEGIN
   EXEC ('ALTER VIEW ACTIVE_SYS_CON_ENVIRONMENTS
 AS
   SELECT *
   FROM   SYS_CON_ENVIRONMENTS
   WHERE  STATUS = ''ACTIVE''
   ');
END
GO
IF COL_LENGTH('CATFX_WORKFLOW', 'CATFX_RUN_ON_STARTUP') IS NULL
    BEGIN
        ALTER TABLE [CATFX_WORKFLOW] ADD [CATFX_RUN_ON_STARTUP] CHAR(1) NULL
        ALTER TABLE [CATFX_WORKFLOW] ADD [CATFX_RUN_ON_SHUTDOWN] CHAR(1) NULL
        ALTER TABLE [CATFX_WORKFLOW] ADD [CATFX_INSTALL_SCRIPT] VARCHAR(MAX) NULL
        ALTER TABLE [CATFX_WORKFLOW] ADD [CATFX_UNINSTALL_SCRIPT] VARCHAR(MAX) NULL
    END
GO
IF EXISTS (SELECT COUNT(*) FROM [CATFX_WORKFLOW] WHERE CATFX_RUN_ON_STARTUP IS NULL)
    BEGIN
 EXECUTE('UPDATE CATFX_WORKFLOW SET CATFX_RUN_ON_STARTUP = ''0'' ,CATFX_RUN_ON_SHUTDOWN= ''0'' WHERE CATFX_RUN_ON_STARTUP IS NULL AND CATFX_RUN_ON_SHUTDOWN IS NULL');
    END
GO
IF COL_LENGTH('CAT_TEMPLATES', 'CATFX_RUN_ON_STARTUP') IS NULL
BEGIN
 ALTER TABLE [CAT_TEMPLATES] ADD [CATFX_RUN_ON_STARTUP] CHAR(1) NULL
 ALTER TABLE [CAT_TEMPLATES] ADD [CATFX_RUN_ON_SHUTDOWN] CHAR(1) NULL
 ALTER TABLE [CAT_TEMPLATES] ADD [CATFX_INSTALL_SCRIPT] VARCHAR(MAX) NULL
 ALTER TABLE [CAT_TEMPLATES] ADD [CATFX_UNINSTALL_SCRIPT] VARCHAR(MAX) NULL
 ALTER TABLE [CAT_TEMPLATES] ADD [CATFX_WORKFLOW_ID] INT NULL
END
GO
IF EXISTS (SELECT COUNT(*) FROM [CAT_TEMPLATES] WHERE CATFX_RUN_ON_STARTUP IS NULL)
    BEGIN
 EXECUTE('UPDATE CAT_TEMPLATES SET CATFX_RUN_ON_STARTUP = ''0'', CATFX_RUN_ON_SHUTDOWN= ''0'' WHERE CATFX_RUN_ON_STARTUP IS NULL AND CATFX_RUN_ON_SHUTDOWN IS NULL');
    END
GO
IF COL_LENGTH('CATFX_SCRIPT', 'CATFX_RUN_ON_STARTUP') IS NULL
BEGIN
 ALTER TABLE CATFX_SCRIPT ADD CATFX_SCRIPT_DESCRIPTION VARCHAR(MAX) NULL
 ALTER TABLE CATFX_SCRIPT ADD CATFX_RUN_ON_STARTUP CHAR(1) NULL
 ALTER TABLE CATFX_SCRIPT ADD CATFX_RUN_ON_SHUTDOWN CHAR(1) NULL
 ALTER TABLE CATFX_SCRIPT ADD CATFX_INSTALL_SCRIPT VARCHAR(MAX) NULL
 ALTER TABLE CATFX_SCRIPT ADD CATFX_UNINSTALL_SCRIPT VARCHAR(MAX) NULL
END
GO
IF EXISTS (SELECT COUNT(*) FROM CATFX_SCRIPT WHERE CATFX_RUN_ON_STARTUP IS NULL)
    BEGIN
 EXECUTE('UPDATE CATFX_SCRIPT SET CATFX_RUN_ON_STARTUP = ''0'' ,CATFX_RUN_ON_SHUTDOWN= ''0'' WHERE CATFX_RUN_ON_STARTUP IS NULL AND CATFX_RUN_ON_SHUTDOWN IS NULL');
    END
GO
IF COL_LENGTH('RM_RELEASE', 'USER_DEFINED_FIELD1') IS NULL
    BEGIN
		EXECUTE('ALTER TABLE RM_RELEASE ADD USER_DEFINED_FIELD1 VARCHAR(MAX)')
		EXECUTE('ALTER TABLE RM_RELEASE ADD USER_DEFINED_FIELD2 VARCHAR(MAX)')
		EXECUTE('ALTER TABLE RM_RELEASE ADD USER_DEFINED_FIELD3 VARCHAR(MAX)')
		EXECUTE('ALTER TABLE RM_RELEASE ADD USER_DEFINED_FIELD4 VARCHAR(MAX)')
		EXECUTE('ALTER TABLE RM_RELEASE ADD USER_DEFINED_FIELD5 VARCHAR(MAX)')
		EXECUTE('ALTER TABLE RM_RELEASE ADD USER_DEFINED_FIELD6 VARCHAR(MAX)')
		EXECUTE('ALTER TABLE RM_RELEASE ADD USER_DEFINED_FIELD7 VARCHAR(MAX)')
		EXECUTE('ALTER TABLE RM_RELEASE ADD USER_DEFINED_FIELD8 VARCHAR(MAX)')
		EXECUTE('ALTER TABLE RM_RELEASE ADD USER_DEFINED_FIELD9 VARCHAR(MAX)')
		EXECUTE('ALTER TABLE RM_RELEASE ADD USER_DEFINED_FIELD10 VARCHAR(MAX)')
    END
GO
IF EXISTS (SELECT * FROM ADS_MM_VERSION WHERE VALUE < '8.2')
BEGIN
	IF (SELECT COUNT(*) FROM RM_HISTORYTYPE where HISTORYTYPENAME = 'Login') < 1
		BEGIN
		 INSERT INTO RM_HISTORYTYPE (HISTORYTYPENAME, HISTORYTYPEDESC)
			SELECT 'Login', 'User Logged In'
				UNION ALL
			SELECT 'Logout', 'User Logged Out'
		END
        IF EXISTS (SELECT * FROM SYSOBJECTS WHERE  ID = OBJECT_ID(N'FK_DQ_VALUE_VOTE_USER_ID') AND XTYPE = 'F')
        BEGIN
                EXECUTE('ALTER TABLE DQ_VALUE_VOTE DROP CONSTRAINT FK_DQ_VALUE_VOTE_USER_ID');
        END
        IF EXISTS (SELECT * FROM SYSOBJECTS WHERE  ID = OBJECT_ID(N'FK_DQ_VAL_VOTE_USER_ID') AND XTYPE = 'F')
        BEGIN
                EXECUTE('ALTER TABLE DQ_COLUMN_RESOURCE DROP CONSTRAINT FK_DQ_VAL_VOTE_USER_ID');
        END
        IF EXISTS (SELECT * FROM SYSOBJECTS WHERE  ID = OBJECT_ID(N'FK_DQ_ATTR_VOTE_USER_ID') AND XTYPE = 'F')
        BEGIN
                EXECUTE('ALTER TABLE DQ_ATTRIBUTE_VOTE DROP CONSTRAINT FK_DQ_ATTR_VOTE_USER_ID');
        END
	IF EXISTS (SELECT * FROM SYSOBJECTS WHERE  ID = OBJECT_ID(N'FK_RDM_TBL_USER_ID') AND XTYPE = 'F')
		BEGIN
			EXECUTE('ALTER TABLE RDM_REF_TABLE_USERS DROP CONSTRAINT FK_RDM_TBL_USER_ID');
		END
	IF EXISTS (SELECT * FROM SYSOBJECTS WHERE  ID = OBJECT_ID(N'R_6') AND XTYPE = 'F')
		BEGIN
			EXECUTE('ALTER TABLE USER_ASSIGNED_ROLES DROP CONSTRAINT R_6');
		END
	IF EXISTS (SELECT * FROM SYSOBJECTS WHERE  ID = OBJECT_ID(N'FK_CSM_MAP_USER_ID') AND XTYPE = 'F')
		BEGIN
			EXECUTE('ALTER TABLE CSM_MAP_CAT_USERS DROP CONSTRAINT FK_CSM_MAP_USER_ID');
		END
	IF EXISTS (SELECT * FROM SYSOBJECTS WHERE  ID = OBJECT_ID(N'FK_CSM_CDST_USR_ID') AND XTYPE = 'F')
		BEGIN
			EXECUTE('ALTER TABLE CSM_CODESET_CAT_USERS DROP CONSTRAINT FK_CSM_CDST_USR_ID');
		END
	IF EXISTS (SELECT * FROM SYSOBJECTS WHERE  ID = OBJECT_ID(N'FK_OBJECT_CONFIG_USERID') AND XTYPE = 'F')
		BEGIN
			EXECUTE('ALTER TABLE OBJECT_CONFIGURATIONS DROP CONSTRAINT FK_OBJECT_CONFIG_USERID');
		END
	IF EXISTS (SELECT * FROM SYSOBJECTS WHERE  ID = OBJECT_ID(N'FK_ADS_PROFILES_OUID') AND XTYPE = 'F')
		BEGIN
			EXECUTE('ALTER TABLE ADS_PROFILES DROP CONSTRAINT FK_ADS_PROFILES_OUID');
		END
	IF EXISTS (SELECT * FROM SYSOBJECTS WHERE  ID = OBJECT_ID(N'FK_CHAT_USER_MESSAGES_USERS') AND XTYPE = 'F')
		BEGIN
			EXECUTE('ALTER TABLE CHAT_USER_MESSAGES DROP CONSTRAINT FK_CHAT_USER_MESSAGES_USERS');
		END
	IF EXISTS (SELECT * FROM SYSOBJECTS WHERE  ID = OBJECT_ID(N'FK_CHAT_MESSAGES_USERS') AND XTYPE = 'F')
		BEGIN
			EXECUTE('ALTER TABLE CHAT_MESSAGES DROP CONSTRAINT FK_CHAT_MESSAGES_USERS');
		END
	IF EXISTS (SELECT * FROM SYSOBJECTS WHERE  ID = OBJECT_ID(N'FK_CHAT_THREAD_USER_USERS') AND XTYPE = 'F')
		BEGIN
			EXECUTE('ALTER TABLE CHAT_THREAD_USER DROP CONSTRAINT FK_CHAT_THREAD_USER_USERS');
		END
	IF EXISTS (SELECT * FROM SYSOBJECTS WHERE  ID = OBJECT_ID(N'FK_CREATED_BY_CHAT_THREAD') AND XTYPE = 'F')
		BEGIN
			EXECUTE('ALTER TABLE CHAT_THREAD DROP CONSTRAINT FK_CREATED_BY_CHAT_THREAD');
	END
	IF EXISTS (SELECT * FROM SYSOBJECTS WHERE  ID = OBJECT_ID(N'FK_OBJECT_USER_UID') AND XTYPE = 'F')
		BEGIN
			EXECUTE('ALTER TABLE OBJECT_USER DROP CONSTRAINT FK_OBJECT_USER_UID');
		END
	IF EXISTS (SELECT * FROM SYSOBJECTS WHERE  ID = OBJECT_ID(N'FK_RM_USER_ID') AND XTYPE = 'F')
		BEGIN
			EXECUTE('ALTER TABLE RM_HISTORY DROP CONSTRAINT FK_RM_USER_ID');
		END
	IF EXISTS (SELECT * FROM SYSOBJECTS WHERE  ID = OBJECT_ID(N'XPKUSERS') AND XTYPE = 'PK')
		BEGIN
			EXECUTE('ALTER TABLE USERS DROP CONSTRAINT XPKUSERS');
		END
	BEGIN
		EXECUTE sp_rename [USERS] , [TEMP_USERS] ;
	END

	BEGIN
		EXECUTE ('CREATE TABLE [USERS](
				ID bigint IDENTITY(1, 1) NOT NULL,
				[USER_ID] [varchar](20) NOT NULL,
				[USER_FULL_NAME] [varchar](50) NOT NULL,
				[USER_EMAIL_ADDR] [varchar](50) NULL,
				[USER_TEL] [varchar](20) NULL,
				[USER_MOBILE] [varchar](20) NULL,
				[USER_ALTERNATE_TEL] [varchar](20) NULL,
				[DEFAULT_ROLE] [varchar](50) NULL,
				[USER_PASSWORD] [varchar](250) NOT NULL,
				[USER_COMPANY_TITLE] [varchar](50) NULL,
				[USER_COMPANY] [varchar](255) NULL,
				[USER_REPORTS_TO_MGR_NAME] [varchar](50) NULL,
				[CREATED_BY] [varchar](20) NOT NULL,
				[CREATED_DATETIME] [datetime] NOT NULL,
				[LAST_MODIFIED_DATE_TIME] [datetime] NULL,
				[LAST_MODIFIED_BY] [varchar](20) NULL,
				[USER_READ_ONLY] [varchar](1) NULL,
				[USER_LANGUAGE] [varchar](100) NULL,
				[LANDED_MODULE] [varchar](max) NULL DEFAULT (''Mapping Manager''),
				[ENABLED] [int] NULL DEFAULT ((1)),
				[USER_THEME] [varchar](50) NULL,
				[ISLDAP_USER] [varchar](1) NULL,
				constraint [XPKUSERS] PRIMARY KEY
				( USER_ID ))');
	END

	IF (SELECT COUNT(*) FROM USERS) < 1
		BEGIN
			EXECUTE('INSERT INTO USERS SELECT * FROM TEMP_USERS order by user_id asc')
		END;
	IF (SELECT COUNT(*) FROM TEMP_USERS) > 1
		BEGIN
			EXECUTE('drop table TEMP_USERS')
		END;

	IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS WHERE CONSTRAINT_NAME='FK_RDM_TBL_USER_ID' AND TABLE_NAME='RDM_REF_TABLE_USERS')
		EXECUTE('ALTER TABLE RDM_REF_TABLE_USERS ADD CONSTRAINT FK_RDM_TBL_USER_ID FOREIGN KEY (USER_ID) REFERENCES USERS (USER_ID)')
	IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS WHERE CONSTRAINT_NAME='R_6' AND TABLE_NAME='USER_ASSIGNED_ROLES')
		EXECUTE('ALTER TABLE USER_ASSIGNED_ROLES ADD CONSTRAINT R_6 FOREIGN KEY (USER_ID) REFERENCES USERS (USER_ID)')
	IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS WHERE CONSTRAINT_NAME='FK_CSM_MAP_USER_ID' AND TABLE_NAME='CSM_MAP_CAT_USERS')
		EXECUTE('ALTER TABLE CSM_MAP_CAT_USERS ADD CONSTRAINT FK_CSM_MAP_USER_ID FOREIGN KEY (USER_ID) REFERENCES USERS (USER_ID) ON  DELETE CASCADE')
	IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS WHERE CONSTRAINT_NAME='FK_CSM_CDST_USR_ID' AND TABLE_NAME='CSM_CODESET_CAT_USERS')
		EXECUTE('ALTER TABLE CSM_CODESET_CAT_USERS ADD CONSTRAINT FK_CSM_CDST_USR_ID FOREIGN KEY (USER_ID) REFERENCES USERS (USER_ID) ON DELETE CASCADE')
	IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS WHERE CONSTRAINT_NAME='FK_OBJECT_CONFIG_USERID' AND TABLE_NAME='OBJECT_CONFIGURATIONS')
		EXECUTE('ALTER TABLE OBJECT_CONFIGURATIONS ADD CONSTRAINT FK_OBJECT_CONFIG_USERID FOREIGN KEY (CONFIGURATION_USER) REFERENCES USERS (USER_ID)')
	IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS WHERE CONSTRAINT_NAME='FK_ADS_PROFILES_OUID' AND TABLE_NAME='ADS_PROFILES')
		EXECUTE('ALTER TABLE ADS_PROFILES ADD CONSTRAINT FK_ADS_PROFILES_OUID FOREIGN KEY (OWNER_USER_ID) REFERENCES USERS (USER_ID)')
	IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS WHERE CONSTRAINT_NAME='FK_CHAT_USER_MESSAGES_USERS' AND TABLE_NAME='CHAT_USER_MESSAGES')
		EXECUTE('ALTER TABLE CHAT_USER_MESSAGES ADD CONSTRAINT FK_CHAT_USER_MESSAGES_USERS FOREIGN KEY (USER_ID) REFERENCES USERS (USER_ID)')
	IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS WHERE CONSTRAINT_NAME='FK_CHAT_MESSAGES_USERS' AND TABLE_NAME='CHAT_MESSAGES')
		EXECUTE('ALTER TABLE CHAT_MESSAGES ADD CONSTRAINT FK_CHAT_MESSAGES_USERS FOREIGN KEY (CREATED_BY) REFERENCES USERS (USER_ID)')
	IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS WHERE CONSTRAINT_NAME='FK_CHAT_THREAD_USER_USERS' AND TABLE_NAME='CHAT_THREAD_USER')
		EXECUTE('ALTER TABLE CHAT_THREAD_USER ADD CONSTRAINT FK_CHAT_THREAD_USER_USERS FOREIGN KEY (USER_ID) REFERENCES USERS (USER_ID)')
	IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS WHERE CONSTRAINT_NAME='FK_CREATED_BY_CHAT_THREAD' AND TABLE_NAME='CHAT_THREAD')
		EXECUTE('ALTER TABLE CHAT_THREAD ADD CONSTRAINT FK_CREATED_BY_CHAT_THREAD FOREIGN KEY (CREATED_BY) REFERENCES USERS (USER_ID)')
	IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS WHERE CONSTRAINT_NAME='FK_OBJECT_USER_UID' AND TABLE_NAME='OBJECT_USER')
		EXECUTE('ALTER TABLE OBJECT_USER ADD CONSTRAINT FK_OBJECT_USER_UID FOREIGN KEY (USER_ID) REFERENCES USERS (USER_ID)')
	IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS WHERE CONSTRAINT_NAME='FK_RM_USER_ID' AND TABLE_NAME='RM_HISTORY')
		EXECUTE('ALTER TABLE RM_HISTORY ADD CONSTRAINT FK_RM_USER_ID FOREIGN KEY (USER_ID) REFERENCES USERS (USER_ID)')

END
GO
IF NOT EXISTS (SELECT * FROM ADS_KEY_VALUE_OBJECTS WHERE  OBJECT_TYPE = 'CAT')
    BEGIN
        INSERT INTO ADS_KEY_VALUE_OBJECTS (OBJECT_TYPE,OBJECT_TABLE,OBJECT_TABLE_COLUMN,OBJECT_PARENT_TYPE,OBJECT_PARENT_COLUMN_ID)
        SELECT 'CAT','CAT_TEMPLATES','CAT_ID','',''
        UNION ALL
        SELECT 'CATFX_WORKFLOW','CATFX_WORKFLOW','CATFX_WORKFLOW_ID','',''
    END
GO
IF NOT EXISTS(SELECT * FROM APP_PREFERENCES WHERE PREFERENCE_NAME = 'SEND_EMAIL_ON_CAT_JOB_EXECUTED')
BEGIN
    INSERT INTO APP_PREFERENCES(PREFERENCE_NAME,PREFERENCE_VALUE) VALUES ('SEND_EMAIL_ON_CAT_JOB_EXECUTED','true');
    INSERT INTO APP_PREFERENCES(PREFERENCE_NAME,PREFERENCE_VALUE) VALUES ('SEND_EMAIL_ON_CAT_JOB_EXECUTED_SUBJECT','@Name@ Job Execution Details - DO NOT REPLY')
    INSERT INTO APP_PREFERENCES(PREFERENCE_NAME,PREFERENCE_VALUE) VALUES ('SEND_EMAIL_ON_CAT_JOB_EXECUTED_MESSAGE','Hi,<br>This is a system generated email notification.<br><br><table border = 1><tr><th colspan = 2><b>Job Details</b></th></tr><tr><td>Workflow Name  </td><td>@workflowName@</td></tr><tr><td>Job Name </td><td>@jobName@</td><tr><td>Job Owner  </td><td>@jobOwner@</td></tr><tr><td>Job Scheduled Date Time  </td><td>@scheduledDateTime@</td></tr><tr><td>Job Completed Date Time  </td><td>@jobExecutedDateTime@</td></tr><tr><td>Job Next Executed Date Time  </td><td>@jobNextExecutedDateTime@</td></tr></table><BR><BR><b>@executionMessage@</b><br><br><I><font color =red>Note</font> This is an auto generated email notification and this mailbox is not monitored.<BR>Please do not reply to this email.</I>');
END
IF EXISTS(SELECT * FROM SYS.VIEWS WHERE NAME = 'MAP_SPEC_SUMMARY_V')
BEGIN
    EXEC ('DROP VIEW MAP_SPEC_SUMMARY_V')
END
GO
IF EXISTS(SELECT * FROM ADS_MM_VERSION WHERE VALUE < '8.2')
BEGIN
    EXEC('UPDATE t SET t.OBJECT_ID = Cast(t2.artifact_id AS varchar(max)) FROM ADS_KEY_VALUE t INNER JOIN REQM_ARTIFACT t2 ON t.OBJECT_ID = Cast(t2.mtd_id AS varchar(max))  WHERE OBJECT_TYPE_ID = (SELECT OBJECT_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS where OBJECT_TYPE = ''REQM_ARTIFACT'')')
END
GO
IF COL_LENGTH('REQM_ARTIFACT', 'MTD_ID') IS NOT NULL
BEGIN
    EXECUTE ('ALTER TABLE REQM_ARTIFACT DROP COLUMN MTD_ID');
END
GO
IF COL_LENGTH('BG_CATEGORIES', 'OBJECT_TYPE_ID') IS NULL
	BEGIN
            EXECUTE('ALTER TABLE BG_CATEGORIES ADD OBJECT_TYPE_ID BIGINT NULL');
            EXECUTE ('update  BG_CATEGORIES  set OBJECT_TYPE_ID = (SELECT OBJECT_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE=''BGM_TERM'')');
	END
GO
IF NOT EXISTS (SELECT *  FROM   SYSOBJECTS WHERE  ID = OBJECT_ID(N'BG_BUSINESS_RULES') AND TYPE = 'U')
  BEGIN
      EXECUTE ('
	  CREATE TABLE BG_BUSINESS_RULES
	  (ID BIGINT  IDENTITY(1,1) NOT NULL,
	   CATALOG_ID BIGINT NOT NULL ,
	   NAME VARCHAR(250) NOT NULL ,
	   DEFINITION		VARCHAR(MAX) NULL ,
	   DESCRIPTION		VARCHAR(MAX) NULL ,
	   NOTES		VARCHAR(MAX) NULL ,
	   OBJECTIVE VARCHAR(MAX) NULL ,
	   DATA_STEWARD_ID   BIGINT NOT NULL DEFAULT -1 ,
	   STATUS_ID   BIGINT NOT NULL DEFAULT -1 ,
	   RESPONSIBLE_TEAM   VARCHAR(MAX) NULL ,
	   CRITICALITY_ID   BIGINT NULL ,
	   CONSTRAINT BUSINESS_RULES_BUS_RULE_ID PRIMARY KEY(ID) ,
	   CONSTRAINT FK_BR_CATEGORY_ID FOREIGN KEY(CATALOG_ID) REFERENCES BG_CATEGORIES(CATEGORY_ID) ON DELETE CASCADE,
	   CONSTRAINT UK_BR_CATEGORY_ID_NAME UNIQUE (CATALOG_ID, NAME))'
	   );
  END
GO
IF NOT EXISTS (SELECT * FROM ADS_KEY_VALUE_OBJECTS WHERE  OBJECT_TYPE = 'BGM_RULE')
    BEGIN
        INSERT INTO ADS_KEY_VALUE_OBJECTS (OBJECT_TYPE,OBJECT_TABLE,OBJECT_TABLE_COLUMN,OBJECT_PARENT_TYPE,OBJECT_PARENT_COLUMN_ID)
        SELECT 'BGM_RULE','BG_BUSINESS_RULES','ID','','';
    END
GO
IF NOT EXISTS (SELECT *  FROM   SYSOBJECTS WHERE  ID = OBJECT_ID(N'BG_POLICIES') AND TYPE = 'U')
  BEGIN
      EXECUTE ('
	  CREATE TABLE BG_POLICIES
	  (ID BIGINT  IDENTITY(1,1) NOT NULL,
	   CATALOG_ID BIGINT NOT NULL ,
	   NAME VARCHAR(250) NOT NULL ,
	   DEFINITION		VARCHAR(MAX) NULL ,
	   DESCRIPTION		VARCHAR(MAX) NULL ,
	   NOTES		VARCHAR(MAX) NULL ,
	   DATA_STEWARD_ID   BIGINT NOT NULL DEFAULT -1 ,
	   STATUS_ID   BIGINT NOT NULL DEFAULT -1 ,
	   RESPONSIBLE_TEAM   VARCHAR(MAX) NULL ,
	   POLICY_VALIDITY VARCHAR(100) NULL,
	   POLICY_START_DATE   DATETIME NULL ,
	   POLICY_END_DATE DATETIME NULL,
	   USER_DEFINED_1 VARCHAR(MAX) NULL,
	   USER_DEFINED_2 VARCHAR(MAX) NULL,
	   USER_DEFINED_3 VARCHAR(MAX) NULL,
	   USER_DEFINED_4 VARCHAR(MAX) NULL,
	   USER_DEFINED_5 VARCHAR(MAX) NULL,
	   USER_DEFINED_6 VARCHAR(MAX) NULL,
	   USER_DEFINED_7 VARCHAR(MAX) NULL,
	   USER_DEFINED_8 VARCHAR(MAX) NULL,
	   USER_DEFINED_9 VARCHAR(MAX) NULL,
	   USER_DEFINED_10 VARCHAR(MAX) NULL,
	   CONSTRAINT PK_POLICY_ID PRIMARY KEY(ID) ,
	   CONSTRAINT FK_BP_CATALOG_ID FOREIGN KEY(CATALOG_ID) REFERENCES BG_CATEGORIES(CATEGORY_ID) ON DELETE CASCADE,
	   CONSTRAINT UK_BP_CATALOG_ID_NAME UNIQUE (CATALOG_ID, NAME))'
	   );
  END
GO
IF NOT EXISTS (SELECT * FROM ADS_KEY_VALUE_OBJECTS WHERE  OBJECT_TYPE = 'BGM_POLICY')
    BEGIN
        INSERT INTO ADS_KEY_VALUE_OBJECTS (OBJECT_TYPE,OBJECT_TABLE,OBJECT_TABLE_COLUMN,OBJECT_PARENT_TYPE,OBJECT_PARENT_COLUMN_ID)
        SELECT 'BGM_POLICY','BG_POLICIES','ID','','';
    END
GO
IF NOT EXISTS (SELECT *  FROM   SYSOBJECTS WHERE  ID = OBJECT_ID(N'TAGS') AND TYPE = 'U')
  BEGIN
      EXECUTE ('
	  CREATE TABLE TAGS
	  (ID BIGINT  IDENTITY(1,1) NOT NULL,
	   NAME VARCHAR(250) NOT NULL ,
	   DESCRIPTION		VARCHAR(MAX) NULL ,
	   STATUS VARCHAR(1),
	   CONSTRAINT PK_TAG_ID PRIMARY KEY(ID))'
	   );
  END
GO
IF NOT EXISTS (SELECT * FROM ADS_KEY_VALUE_OBJECTS WHERE  OBJECT_TYPE = 'TAG')
    BEGIN
        INSERT INTO ADS_KEY_VALUE_OBJECTS (OBJECT_TYPE,OBJECT_TABLE,OBJECT_TABLE_COLUMN,OBJECT_PARENT_TYPE,OBJECT_PARENT_COLUMN_ID)
        SELECT 'TAG','TAGS','ID','','';
    END
GO
IF NOT EXISTS (SELECT *  FROM   SYSOBJECTS WHERE  ID = OBJECT_ID(N'ADS_ASSOCIATIONS') AND TYPE = 'U')
  BEGIN
      EXECUTE ('
   CREATE TABLE ADS_ASSOCIATIONS
   (ID BIGINT  IDENTITY(1,1) NOT NULL,
    SOURCE_OBJECT_ID bigint NOT NULL ,
    SOURCE_OBJECT_TYPE_ID bigint NOT NULL ,
    TARGET_OBJECT_ID bigint NOT NULL ,
    TARGET_OBJECT_TYPE_ID bigint NOT NULL ,
    RELATIONSHIP  VARCHAR(250)  NULL,
    CONSTRAINT PK_ASSOCIATION_ID PRIMARY KEY(ID))'
    );
END
GO
IF NOT EXISTS (SELECT * FROM MT_DEFINITION WHERE  MTD_NAME = 'CRITICALITY')
    BEGIN
        INSERT INTO MT_DEFINITION (MTD_NAME,MTD_DESC,ADS_MODULE)
        SELECT 'CRITICALITY','CRITICALITY','BGM'
    END
GO
DECLARE @OBJECT_TYPE_ID INT,@OBJECT_ID INT;
SELECT @OBJECT_TYPE_ID =  OBJECT_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE='MT_DEFINITION';
SELECT @OBJECT_ID =  MTD_ID FROM MT_DEFINITION WHERE  MTD_NAME = 'CRITICALITY' AND ADS_MODULE = 'BGM';
IF NOT EXISTS (SELECT * FROM ADS_KEY_VALUE WHERE  KEY_NAME = 'High' and OBJECT_TYPE_ID = @OBJECT_TYPE_ID)
    BEGIN
	INSERT INTO ADS_KEY_VALUE(KEY_NAME,KEY_VALUE,OBJECT_TYPE_ID,OBJECT_ID,DATATYPE_ID,KV_ORDER,ISPUBLISHED)
	VALUES('High','High',@OBJECT_TYPE_ID,@OBJECT_ID,'1','1','1')
	INSERT INTO ADS_KEY_VALUE(KEY_NAME,KEY_VALUE,OBJECT_TYPE_ID,OBJECT_ID,DATATYPE_ID,KV_ORDER,ISPUBLISHED)
	VALUES('Low','Low',@OBJECT_TYPE_ID,@OBJECT_ID,'1','2','1')
	INSERT INTO ADS_KEY_VALUE(KEY_NAME,KEY_VALUE,OBJECT_TYPE_ID,OBJECT_ID,DATATYPE_ID,KV_ORDER,ISPUBLISHED)
	VALUES('Medium','Medium',@OBJECT_TYPE_ID,@OBJECT_ID,'1','3','1')
    END
GO
IF NOT EXISTS (SELECT * FROM ADS_KEY_VALUE_OBJECTS WHERE  OBJECT_TYPE = 'BGM_STEWARDSHIP_GOALS')
    BEGIN
        INSERT INTO ADS_KEY_VALUE_OBJECTS (OBJECT_TYPE,OBJECT_TABLE,OBJECT_TABLE_COLUMN,OBJECT_PARENT_TYPE,OBJECT_PARENT_COLUMN_ID)
        SELECT 'BGM_STEWARDSHIP_GOALS','','','','';
    END
GO
IF EXISTS (SELECT * FROM ADS_MM_VERSION WHERE VALUE < '8.2')
	BEGIN
		EXECUTE('INSERT INTO ADS_ASSOCIATIONS(SOURCE_OBJECT_ID, SOURCE_OBJECT_TYPE_ID, TARGET_OBJECT_ID,TARGET_OBJECT_TYPE_ID)
		SELECT BUS_TERM_ID,(SELECT OBJECT_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE=''BGM_TERM''),ASSOC_BUS_TERM_ID,(SELECT OBJECT_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE=''BGM_TERM'')
		FROM BG_ASSOCIATED_BUSINESS_TERMS');
		EXECUTE('DROP TABLE BG_ASSOCIATED_BUSINESS_TERMS');
	END
GO
IF EXISTS (SELECT * FROM ADS_MM_VERSION WHERE VALUE < '8.2')
	BEGIN
		EXECUTE('INSERT INTO ADS_ASSOCIATIONS(SOURCE_OBJECT_ID, SOURCE_OBJECT_TYPE_ID, TARGET_OBJECT_ID,TARGET_OBJECT_TYPE_ID)
		SELECT BUS_TERM_ID,(SELECT OBJECT_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE=''BGM_TERM''),stcm_ID,OBJECT_TYPE_ID
		FROM BG_ASSO_TECHNICAL_METADATA batm join V_STCM_JSON vstj on batm.OBJECT_ID = vstj.json');
		EXECUTE('DROP TABLE BG_ASSO_TECHNICAL_METADATA');
	END
GO
IF EXISTS (SELECT COUNT(*) FROM CAT_TEMPLATES WHERE CAT_TEMPLATE_VERSION IS NULL)
    BEGIN
        EXECUTE('UPDATE  CAT_TEMPLATES SET CAT_TEMPLATE_VERSION = i.VALUE FROM (SELECT VALUE FROM ADS_MM_VERSION) i WHERE CAT_TEMPLATE_VERSION IS NULL');
    END
GO
IF COL_LENGTH('ADS_KEY_VALUE', 'DEFAULTVALUE') = 50
BEGIN
    ALTER TABLE ADS_KEY_VALUE ALTER COLUMN DEFAULTVALUE varchar(MAX) NULL
END
GO
IF NOT EXISTS (SELECT * FROM MT_DEFINITION WHERE  MTD_NAME = 'RELATIONSHIP' AND ADS_MODULE = 'BGM')
    BEGIN
        INSERT INTO MT_DEFINITION (MTD_NAME,MTD_DESC,ADS_MODULE) SELECT 'RELATIONSHIP','RELATIONSHIP','BGM'
    END
GO
IF EXISTS (SELECT * FROM ADS_MM_VERSION WHERE VALUE < '8.2')
BEGIN
    ALTER TABLE [RM_HISTORY] DROP CONSTRAINT [FK_RM_USER_ID]
    ALTER TABLE [RM_HISTORY]  WITH CHECK ADD  CONSTRAINT [FK_RM_USER_ID] FOREIGN KEY([USER_ID]) REFERENCES [USERS] ([USER_ID]) ON DELETE CASCADE
    ALTER TABLE [RM_HISTORY] CHECK CONSTRAINT [FK_RM_USER_ID]
    ALTER TABLE [USER_ASSIGNED_ROLES] DROP CONSTRAINT [R_6]
    ALTER TABLE [USER_ASSIGNED_ROLES]  WITH CHECK ADD  CONSTRAINT [R_6] FOREIGN KEY([USER_ID]) REFERENCES [USERS] ([USER_ID]) ON DELETE CASCADE
    ALTER TABLE [USER_ASSIGNED_ROLES] CHECK CONSTRAINT [R_6]
END
GO
IF EXISTS (SELECT *
	       FROM   SYSOBJECTS
	       WHERE  ID = OBJECT_ID(N'CAT_WORKFLOW_PROPERTIES')
		      AND TYPE = 'U')
  BEGIN
      EXECUTE ('DROP TABLE CAT_WORKFLOW_PROPERTIES')
  END
GO
IF EXISTS (SELECT *
	       FROM   SYSOBJECTS
	       WHERE  ID = OBJECT_ID(N'CAT_WORKFLOWS')
		      AND TYPE = 'U')
  BEGIN
      EXECUTE ('DROP TABLE CAT_WORKFLOWS')
  END
GO
IF (SELECT COUNT(*) FROM APP_PREFERENCES WHERE PREFERENCE_NAME = 'ADS_MM_LICENSE_EXPIRY_SHOW_POPUP_DAYS') < 1
BEGIN
    EXECUTE ('INSERT INTO APP_PREFERENCES(PREFERENCE_NAME, PREFERENCE_VALUE) VALUES(''ADS_MM_LICENSE_EXPIRY_SHOW_POPUP_DAYS'',''30'')');
    EXECUTE ('INSERT INTO APP_PREFERENCES(PREFERENCE_NAME, PREFERENCE_VALUE) VALUES(''AMM_CFX_WORKFLOW_MAX_LOOPS'',''50'')');
END
GO
IF COL_LENGTH('RM_RELEASE','RELEASEDESC') < 4000
BEGIN
    EXECUTE('ALTER TABLE RM_RELEASE ALTER COLUMN RELEASEDESC VARCHAR(4000)');
END
GO
IF (SELECT COUNT(*) FROM TCM_TESTCASE_STATUS WHERE STATUS_NAME = 'DESIGN') < 1
BEGIN
    EXECUTE('INSERT INTO TCM_TESTCASE_STATUS(STATUS_NAME) VALUES(''DESIGN'')');
END
GO
IF NOT EXISTS (SELECT * FROM ADS_KEY_VALUE_OBJECTS WHERE  OBJECT_TYPE = 'CSM_CODE_VALUE')
BEGIN
    INSERT INTO ADS_KEY_VALUE_OBJECTS (OBJECT_TYPE,OBJECT_TABLE,OBJECT_TABLE_COLUMN,OBJECT_PARENT_TYPE,OBJECT_PARENT_COLUMN_ID)
    SELECT 'CSM_CODE_VALUE','CSM_CODE_VALUE','CODE_ID','',''
END
GO
IF EXISTS (SELECT * FROM ADS_MM_VERSION WHERE VALUE <= '8.2')
   IF (SELECT count(*) FROM ADS_PROFILES_DETAILS WHERE PROFILE_DETAILS_NAME = 'CSM_CODE_VALUE_GRID_HEADER_VISIBILITY_PREFERENCE' and PROFILE_DETAILS_VALUE LIKE '%extendedProperties%') = 0
    BEGIN
        UPDATE ADS_PROFILES_DETAILS SET PROFILE_DETAILS_VALUE = PROFILE_DETAILS_VALUE + ',extendedProperties' WHERE PROFILE_DETAILS_NAME = 'CSM_CODE_VALUE_GRID_HEADER_VISIBILITY_PREFERENCE';
    END
GO
IF EXISTS (SELECT * FROM ADS_MM_VERSION WHERE VALUE <= '8.2')
    IF (SELECT count(*) FROM ADS_PROFILES_DETAILS WHERE PROFILE_DETAILS_NAME = 'CSM_CODE_VALUE_GRID_HEADER_ORDER_PREFERENCE' and PROFILE_DETAILS_VALUE LIKE '%extendedProperties%') = 0
    BEGIN
        UPDATE ADS_PROFILES_DETAILS SET PROFILE_DETAILS_VALUE = PROFILE_DETAILS_VALUE + ',extendedProperties:120' WHERE PROFILE_DETAILS_NAME = 'CSM_CODE_VALUE_GRID_HEADER_ORDER_PREFERENCE';
    END
GO
IF EXISTS (SELECT * FROM ADS_MM_VERSION WHERE VALUE < '8.21')
    BEGIN
        ALTER TABLE ADS_KEY_VALUE ADD DISPLAY_POLICY INT DEFAULT 0 NULL
END
GO
IF EXISTS (SELECT COUNT(*) FROM ADS_KEY_VALUE WHERE KV_TYPE = 'DEFAULT' OR KV_TYPE IS NULL)
    BEGIN
EXECUTE('UPDATE ADS_KEY_VALUE SET KV_TYPE = ''Text Box'' WHERE KV_TYPE = ''DEFAULT'' OR KV_TYPE IS NULL');
END
GO
IF EXISTS (SELECT COUNT(*) FROM ADS_KEY_VALUE WHERE DISPLAY_POLICY IS NULL)
    BEGIN
EXECUTE('UPDATE ADS_KEY_VALUE SET DISPLAY_POLICY = ''0'' WHERE DISPLAY_POLICY IS NULL');
END
GO
IF EXISTS (SELECT COUNT(*) FROM ADS_KEY_VALUE WHERE ISPUBLISHED IS NULL)
    BEGIN
EXECUTE('UPDATE ADS_KEY_VALUE SET ISPUBLISHED = ''0'' WHERE ISPUBLISHED IS NULL');
END
GO
IF EXISTS (SELECT COUNT(*) FROM ADS_KEY_VALUE WHERE ISSYSTEMBASED IS NULL)
    BEGIN
EXECUTE('UPDATE ADS_KEY_VALUE SET ISSYSTEMBASED = ''0'' WHERE ISSYSTEMBASED IS NULL');
END
GO
IF NOT EXISTS (SELECT * FROM SYSOBJECTS WHERE  ID = OBJECT_ID(N'SM_INDEX') AND TYPE = 'U')
    BEGIN
        EXECUTE('CREATE TABLE SM_INDEX(
          ID INT IDENTITY,
          OWNER VARCHAR(250) NULL,
          NAME VARCHAR(250) NOT NULL,
          TYPE VARCHAR(250) NULL,
          UNIQUENESS VARCHAR(250) NULL,
          SORT_ORDER VARCHAR(5) NULL,
          ORDINAL_POSITION INT NULL,
	  STM_ID BIGINT NOT NULL,
          CONSTRAINT PK_SM_INDX_ID PRIMARY KEY(ID),
	  CONSTRAINT FK_SM_TAB_ID FOREIGN KEY(STM_ID) REFERENCES SYSTEM_TABLE_METADATA(STM_ID) ON DELETE CASCADE
    )')
    END
GO
IF NOT EXISTS (SELECT * FROM ADS_KEY_VALUE_OBJECTS WHERE  OBJECT_TYPE = 'SM_INDEX')
BEGIN
    INSERT INTO ADS_KEY_VALUE_OBJECTS (OBJECT_TYPE,OBJECT_TABLE,OBJECT_TABLE_COLUMN,OBJECT_PARENT_TYPE,OBJECT_PARENT_COLUMN_ID)
    SELECT 'SM_INDEX','SM_INDEX','ID','',''
END
GO
IF NOT EXISTS (SELECT * FROM ADS_KEY_VALUE_OBJECTS WHERE  OBJECT_TYPE = 'BGM_TERM_CATALOG')
    BEGIN
        INSERT INTO ADS_KEY_VALUE_OBJECTS (OBJECT_TYPE,OBJECT_TABLE,OBJECT_TABLE_COLUMN,OBJECT_PARENT_TYPE,OBJECT_PARENT_COLUMN_ID)
        SELECT 'BGM_TERM_CATALOG','BG_CATEGORIES','OBJECT_TYPE_ID','','';
        INSERT INTO ADS_KEY_VALUE_OBJECTS (OBJECT_TYPE,OBJECT_TABLE,OBJECT_TABLE_COLUMN,OBJECT_PARENT_TYPE,OBJECT_PARENT_COLUMN_ID)
        SELECT 'BGM_POLICY_CATALOG','BG_CATEGORIES','OBJECT_TYPE_ID','','';
        INSERT INTO ADS_KEY_VALUE_OBJECTS (OBJECT_TYPE,OBJECT_TABLE,OBJECT_TABLE_COLUMN,OBJECT_PARENT_TYPE,OBJECT_PARENT_COLUMN_ID)
        SELECT 'BGM_RULE_CATALOG','BG_CATEGORIES','OBJECT_TYPE_ID','','';
    END
GO
IF EXISTS(SELECT * FROM ADS_MM_VERSION WHERE VALUE <= '8.21')
BEGIN
    EXEC('UPDATE BG_CATEGORIES SET OBJECT_TYPE_ID = (SELECT OBJECT_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE = ''BGM_TERM_CATALOG'') WHERE OBJECT_TYPE_ID = (SELECT OBJECT_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE = ''BGM_TERM'')')
    EXEC('UPDATE BG_CATEGORIES SET OBJECT_TYPE_ID = (SELECT OBJECT_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE = ''BGM_POLICY_CATALOG'') WHERE OBJECT_TYPE_ID = (SELECT OBJECT_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE = ''BGM_POLICY'')')
    EXEC('UPDATE BG_CATEGORIES SET OBJECT_TYPE_ID = (SELECT OBJECT_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE = ''BGM_RULE_CATALOG'') WHERE OBJECT_TYPE_ID = (SELECT OBJECT_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE = ''BGM_RULE'')')
END
GO
IF COL_LENGTH('BUSINESS_TERMS', 'SOURCE_ID') IS NULL
    BEGIN
        ALTER TABLE BUSINESS_TERMS ADD SOURCE_ID VARCHAR(MAX) NULL
        ALTER TABLE BUSINESS_TERMS ADD SOURCE_REFERENCE VARCHAR(MAX) NULL
    END
GO
IF (OBJECTPROPERTY(OBJECT_ID(N'[PROC_DELETE_TECH_PROP]'),N'IsProcedure') = 1)
BEGIN
	DROP PROCEDURE PROC_DELETE_TECH_PROP
END
GO
CREATE PROCEDURE PROC_DELETE_TECH_PROP
  @id      VARCHAR(MAX),
  @Id_Type VARCHAR(50)
AS
BEGIN
  IF @Id_Type = 'SM_ENVIRONMENT'
    BEGIN
    /**
	 * Delete Codesets For Columns Within Environments
	 */
    DELETE FROM ADS_OBJECT_CODESETS WHERE OBJECT_ID IN (SELECT STCM_ID FROM SYSTEM_TABLE_COLUMNS_METADATA WHERE sce_id in (select splitdata from dbo.fnSplitString(@id,','))) AND OBJECT_TYPE_ID = (SELECT object_type_id FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE = 'SM_COLUMN');
    /**
     * Delete Associations For Indexes For Tables Within Environments
     */
    DELETE FROM ADS_ASSOCIATIONS WHERE (SOURCE_OBJECT_ID IN (SELECT ID FROM SM_INDEX WHERE STM_ID IN (SELECT STM_ID FROM SYSTEM_TABLE_METADATA WHERE SCE_ID in (select splitdata from dbo.fnSplitString(@id,',')))) AND SOURCE_OBJECT_TYPE_ID = (SELECT object_type_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE = 'SM_INDEX')) OR (TARGET_OBJECT_ID IN ( SELECT ID FROM SM_INDEX WHERE STM_ID IN (SELECT STM_ID FROM SYSTEM_TABLE_METADATA WHERE SCE_ID in (select splitdata from dbo.fnSplitString(@id,',')))) AND TARGET_OBJECT_TYPE_ID = (SELECT object_type_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE = 'SM_INDEX'));
    /**
     * Delete Indexes For Tables Within Environments
     */
    DELETE FROM SM_INDEX WHERE stm_id IN (SELECT stm_id FROM SYSTEM_TABLE_METADATA WHERE SCE_ID in (select splitdata from dbo.fnSplitString(@id,',')));
    /**
	 * Delete Extended Properties For Columns Within Environments
	 */
	WITH CTE AS (SELECT A.* FROM ADS_KEY_VALUE A WHERE A.OBJECT_ID IN (SELECT STCM_ID FROM SYSTEM_TABLE_COLUMNS_METADATA WHERE sce_id in (select splitdata from dbo.fnSplitString(@id,','))) AND A.OBJECT_TYPE_ID = (SELECT OBJECT_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE = 'SM_COLUMN') UNION ALL SELECT T.* FROM ADS_KEY_VALUE AS T JOIN CTE ON CAST(CTE.KV_ID AS VARCHAR) = T.OBJECT_ID AND T.OBJECT_TYPE_ID = (SELECT OBJECT_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE = 'ADS_KEY_VALUE')) DELETE FROM ADS_KEY_VALUE WHERE KV_ID IN (SELECT KV_ID FROM CTE);
	/**
	 * Delete Extended Properties For Tables Within Environments
	 */
	WITH CTE AS (SELECT A.* FROM ADS_KEY_VALUE A WHERE A.OBJECT_ID IN (SELECT STM_ID FROM SYSTEM_TABLE_METADATA WHERE sce_id in (select splitdata from dbo.fnSplitString(@id,','))) AND A.OBJECT_TYPE_ID = (SELECT OBJECT_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE = 'SM_TABLE') UNION ALL SELECT T.* FROM ADS_KEY_VALUE AS T JOIN CTE ON CAST(CTE.KV_ID AS VARCHAR) = T.OBJECT_ID AND T.OBJECT_TYPE_ID = (SELECT OBJECT_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE = 'ADS_KEY_VALUE')) DELETE FROM ADS_KEY_VALUE WHERE KV_ID IN (SELECT KV_ID FROM CTE);
	/**
	 * Delete Extended Properties For Environments
	 */
	WITH CTE AS (SELECT A.* FROM ADS_KEY_VALUE A WHERE A.OBJECT_ID in (select splitdata from dbo.fnSplitString(@id,',')) AND A.OBJECT_TYPE_ID = (SELECT OBJECT_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE = 'SM_ENVIRONMENT') UNION ALL SELECT T.* FROM ADS_KEY_VALUE AS T JOIN CTE ON CAST(CTE.KV_ID AS VARCHAR) = T.OBJECT_ID AND T.OBJECT_TYPE_ID = (SELECT OBJECT_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE = 'ADS_KEY_VALUE')) DELETE FROM ADS_KEY_VALUE WHERE KV_ID IN (SELECT KV_ID FROM CTE);
    /**
     * Delete Association Extended Properties For Columns Within Environments
     */
    DELETE KV FROM ADS_KEY_VALUE KV JOIN ADS_ASSOCIATIONS A ON KV.OBJECT_ID = A.ID AND KV.OBJECT_TYPE_ID = (SELECT KVO.OBJECT_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS KVO WHERE KVO.OBJECT_TYPE = 'RELATIONSHIP_DETAILS') WHERE ( A.SOURCE_OBJECT_TYPE_ID = (SELECT object_type_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE = 'SM_COLUMN') AND A.SOURCE_OBJECT_ID IN (SELECT STCM_ID FROM SYSTEM_TABLE_COLUMNS_METADATA WHERE sce_ID in (select splitdata from dbo.fnSplitString(@id,',')))) OR ( A.TARGET_OBJECT_TYPE_ID = (SELECT object_type_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE = 'SM_COLUMN') AND A.TARGET_OBJECT_ID IN (SELECT STCM_ID FROM SYSTEM_TABLE_COLUMNS_METADATA WHERE sce_ID in (select splitdata from dbo.fnSplitString(@id,','))));
    /**
     * Delete Associations For Columns Within Environments
     */
    DELETE FROM ADS_ASSOCIATIONS WHERE (SOURCE_OBJECT_ID IN ( SELECT STCM_ID FROM SYSTEM_TABLE_COLUMNS_METADATA WHERE sce_ID in (select splitdata from dbo.fnSplitString(@id,','))) AND SOURCE_OBJECT_TYPE_ID = (SELECT object_type_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE = 'SM_COLUMN')) OR (TARGET_OBJECT_ID IN (SELECT STCM_ID FROM SYSTEM_TABLE_COLUMNS_METADATA WHERE sce_ID in (select splitdata from dbo.fnSplitString(@id,','))) AND TARGET_OBJECT_TYPE_ID = (SELECT object_type_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE = 'SM_COLUMN'));
    /**
     * Delete Association Extended Properties For Tables Within Environments
     */
    DELETE KV FROM ADS_KEY_VALUE KV JOIN ADS_ASSOCIATIONS A ON KV.OBJECT_ID = A.ID AND KV.OBJECT_TYPE_ID = (SELECT KVO.OBJECT_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS KVO WHERE KVO.OBJECT_TYPE = 'RELATIONSHIP_DETAILS') WHERE ( A.SOURCE_OBJECT_TYPE_ID = (SELECT object_type_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE = 'SM_TABLE') AND A.SOURCE_OBJECT_ID IN (SELECT STM_ID FROM SYSTEM_TABLE_METADATA WHERE sce_ID in (select splitdata from dbo.fnSplitString(@id,',')))) OR (A.TARGET_OBJECT_TYPE_ID = (SELECT object_type_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE = 'SM_TABLE') AND A.TARGET_OBJECT_ID IN (SELECT STM_ID FROM SYSTEM_TABLE_METADATA WHERE sce_ID in (select splitdata from dbo.fnSplitString(@id,','))));
    /**
     * Delete Associations For Tables Within Environments
     */
    DELETE FROM ADS_ASSOCIATIONS WHERE (SOURCE_OBJECT_ID IN (SELECT STM_ID FROM SYSTEM_TABLE_METADATA WHERE SCE_ID IN (select splitdata from dbo.fnSplitString(@id,','))) AND SOURCE_OBJECT_TYPE_ID = (SELECT object_type_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE = 'SM_TABLE')) OR (TARGET_OBJECT_ID IN (SELECT STM_ID FROM SYSTEM_TABLE_METADATA WHERE SCE_ID IN (select splitdata from dbo.fnSplitString(@id,','))) AND TARGET_OBJECT_TYPE_ID = (SELECT object_type_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE = 'SM_TABLE'));
    /**
     * Delete Association Extended Properties For Environments
     */
    DELETE KV FROM ADS_KEY_VALUE KV JOIN ADS_ASSOCIATIONS A ON KV.OBJECT_ID = A.ID AND KV.OBJECT_TYPE_ID = (SELECT KVO.OBJECT_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS KVO WHERE KVO.OBJECT_TYPE = 'RELATIONSHIP_DETAILS') WHERE ( A.SOURCE_OBJECT_TYPE_ID = (SELECT object_type_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE = 'SM_ENVIRONMENT') AND A.SOURCE_OBJECT_ID IN (select splitdata from dbo.fnSplitString(@id,','))) OR ( A.TARGET_OBJECT_TYPE_ID = (SELECT object_type_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE = 'SM_ENVIRONMENT') AND A.TARGET_OBJECT_ID IN (select splitdata from dbo.fnSplitString(@id,',')));
    /**
     * Delete Associations For Environments
     */
    DELETE FROM ADS_ASSOCIATIONS WHERE (SOURCE_OBJECT_ID IN (select splitdata from dbo.fnSplitString(@id,',')) AND SOURCE_OBJECT_TYPE_ID = (SELECT object_type_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE = 'SM_ENVIRONMENT')) OR (TARGET_OBJECT_ID IN (select splitdata from dbo.fnSplitString(@id,',')) AND TARGET_OBJECT_TYPE_ID = (SELECT object_type_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE = 'SM_ENVIRONMENT'));
  END
ELSE
  IF @Id_Type = 'SM_TABLE'
    BEGIN
    /**
     * Delete Codesets For Columns Within Tables
     */
    DELETE FROM ADS_OBJECT_CODESETS WHERE OBJECT_ID IN (SELECT STCM_ID FROM SYSTEM_TABLE_COLUMNS_METADATA WHERE STM_ID in (select splitdata from dbo.fnSplitString(@id,','))) AND OBJECT_TYPE_ID = (SELECT object_type_id FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE = 'SM_COLUMN');
    /**
     * Delete Associations For Indexes For Tables Within Environments
     */
    DELETE FROM ADS_ASSOCIATIONS WHERE SOURCE_OBJECT_ID IN (SELECT ID FROM SM_INDEX WHERE STM_ID IN (SELECT ID FROM SM_INDEX WHERE STM_ID IN (select splitdata from dbo.fnSplitString(@id,','))) AND SOURCE_OBJECT_TYPE_ID = (SELECT object_type_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE = 'SM_INDEX') OR TARGET_OBJECT_ID IN (SELECT ID FROM SM_INDEX WHERE STM_ID IN (select splitdata from dbo.fnSplitString(@id,','))) AND TARGET_OBJECT_TYPE_ID = (SELECT object_type_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE = 'SM_INDEX'));
    /**
     * Delete Indexes For Columns Within Tables
     */
    DELETE FROM SM_INDEX WHERE STM_ID in (select splitdata from dbo.fnSplitString(@id,','));
    /**
     * Delete Extended Properties For Tables
     */
    WITH CTE AS (SELECT A.* FROM ADS_KEY_VALUE A WHERE A.OBJECT_ID in (select splitdata from dbo.fnSplitString(@id,',')) AND A.OBJECT_TYPE_ID = (SELECT OBJECT_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE = 'SM_TABLE') UNION ALL SELECT T.* FROM ADS_KEY_VALUE AS T JOIN CTE ON CAST(CTE.KV_ID AS VARCHAR) = T.OBJECT_ID AND T.OBJECT_TYPE_ID = (SELECT OBJECT_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE = 'ADS_KEY_VALUE')) DELETE FROM ADS_KEY_VALUE WHERE KV_ID IN (SELECT KV_ID FROM CTE);
    /**
     * Delete Extended Properties For Columns Within Tables
     */
    WITH CTE AS (SELECT A.* FROM ADS_KEY_VALUE A WHERE A.OBJECT_ID IN (SELECT STCM_ID FROM SYSTEM_TABLE_COLUMNS_METADATA WHERE STM_ID in (select splitdata from dbo.fnSplitString(@id,','))) AND A.OBJECT_TYPE_ID = (SELECT OBJECT_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE = 'SM_COLUMN') UNION ALL SELECT T.* FROM ADS_KEY_VALUE AS T JOIN CTE ON CAST(CTE.KV_ID AS VARCHAR) = T.OBJECT_ID AND T.OBJECT_TYPE_ID = (SELECT OBJECT_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE = 'ADS_KEY_VALUE')) DELETE FROM ADS_KEY_VALUE WHERE KV_ID IN (SELECT KV_ID FROM CTE);
    /**
     * Delete Association Extended Properties For Columns Within Tables
     */
    DELETE KV FROM ADS_KEY_VALUE KV JOIN ADS_ASSOCIATIONS A ON KV.OBJECT_ID = A.ID AND KV.OBJECT_TYPE_ID = (SELECT KVO.OBJECT_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS KVO WHERE KVO.OBJECT_TYPE = 'RELATIONSHIP_DETAILS') WHERE ( A.SOURCE_OBJECT_TYPE_ID = (SELECT object_type_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE = 'SM_COLUMN') AND A.SOURCE_OBJECT_ID IN (SELECT STCM_ID FROM SYSTEM_TABLE_COLUMNS_METADATA WHERE STM_ID in (select splitdata from dbo.fnSplitString(@id,',')))) OR (A.TARGET_OBJECT_TYPE_ID = (SELECT object_type_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE = 'SM_COLUMN') AND A.TARGET_OBJECT_ID IN (SELECT STCM_ID FROM SYSTEM_TABLE_COLUMNS_METADATA WHERE STM_ID in (select splitdata from dbo.fnSplitString(@id,','))));
    /**
     * Delete Associations For Columns Within Tables
     */
    DELETE FROM ADS_ASSOCIATIONS WHERE (SOURCE_OBJECT_ID IN (SELECT STCM_ID FROM SYSTEM_TABLE_COLUMNS_METADATA WHERE STM_ID IN (select splitdata from dbo.fnSplitString(@id,','))) AND SOURCE_OBJECT_TYPE_ID = (SELECT object_type_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE = 'SM_COLUMN')) OR (TARGET_OBJECT_ID IN (SELECT STCM_ID FROM SYSTEM_TABLE_COLUMNS_METADATA WHERE STM_ID IN (select splitdata from dbo.fnSplitString(@id,','))) AND TARGET_OBJECT_TYPE_ID = (SELECT object_type_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE = 'SM_COLUMN'));
    /**
     * Delete Association Extended Properties For Tables
     */
    DELETE KV FROM ADS_KEY_VALUE KV JOIN ADS_ASSOCIATIONS A ON KV.OBJECT_ID = A.ID AND KV.OBJECT_TYPE_ID = (SELECT KVO.OBJECT_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS KVO WHERE KVO.OBJECT_TYPE = 'RELATIONSHIP_DETAILS') WHERE ( A.SOURCE_OBJECT_TYPE_ID = (SELECT object_type_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE = 'SM_TABLE') AND A.SOURCE_OBJECT_ID IN (select splitdata from dbo.fnSplitString(@id,','))) OR ( A.TARGET_OBJECT_TYPE_ID = (SELECT object_type_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE = 'SM_TABLE') AND A.TARGET_OBJECT_ID IN (select splitdata from dbo.fnSplitString(@id,',')));
    /**
     * Delete Associations For Tables
     */
    DELETE FROM ADS_ASSOCIATIONS WHERE (SOURCE_OBJECT_ID IN (select splitdata from dbo.fnSplitString(@id,',')) AND SOURCE_OBJECT_TYPE_ID = (SELECT object_type_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE = 'SM_TABLE')) OR (TARGET_OBJECT_ID IN (select splitdata from dbo.fnSplitString(@id,',')) AND TARGET_OBJECT_TYPE_ID = (SELECT object_type_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE = 'SM_TABLE'));
  END
ELSE
  IF @Id_Type = 'SM_COLUMN'
    BEGIN
    /**
     * Delete Codesets For Columns Within Tables
     */
    DELETE FROM ADS_OBJECT_CODESETS WHERE OBJECT_ID in (select splitdata from dbo.fnSplitString(@id,',')) AND OBJECT_TYPE_ID = (SELECT object_type_id FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE = 'SM_COLUMN');
    /**
     * Delete Column Extended Properties
     */
    WITH CTE AS (SELECT A.* FROM ADS_KEY_VALUE A WHERE A.OBJECT_ID  in (select splitdata from dbo.fnSplitString(@id,',')) AND A.OBJECT_TYPE_ID = (SELECT OBJECT_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE = 'SM_COLUMN') UNION ALL SELECT T.* FROM ADS_KEY_VALUE AS T JOIN CTE ON CAST(CTE.KV_ID AS VARCHAR) = T.OBJECT_ID AND T.OBJECT_TYPE_ID = (SELECT OBJECT_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE = 'ADS_KEY_VALUE')) DELETE FROM ADS_KEY_VALUE WHERE KV_ID IN (SELECT KV_ID FROM CTE);
    /**
     * Delete Associations For Indexes For Columns
     */
    DELETE FROM ADS_ASSOCIATIONS WHERE SOURCE_OBJECT_TYPE_ID = (SELECT OBJECT_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE = 'SM_INDEX') AND TARGET_OBJECT_TYPE_ID = (SELECT OBJECT_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE = 'SM_COLUMN') AND TARGET_OBJECT_ID IN (select splitdata from dbo.fnSplitString(@id,','));
    /**
     * Delete Indexes For Columns
     */
    DELETE FROM SM_INDEX WHERE ID IN (SELECT SOURCE_OBJECT_ID FROM ADS_ASSOCIATIONS WHERE SOURCE_OBJECT_TYPE_ID = (SELECT OBJECT_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE = 'SM_INDEX') AND TARGET_OBJECT_TYPE_ID = (SELECT OBJECT_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE = 'SM_COLUMN') AND TARGET_OBJECT_ID IN (select splitdata from dbo.fnSplitString(@id,',')));
    /**
     * Delete Association Extended Properties For Columns
     */
    DELETE KV FROM ADS_KEY_VALUE KV JOIN ADS_ASSOCIATIONS A ON KV.OBJECT_ID = A.ID AND KV.OBJECT_TYPE_ID = (SELECT KVO.OBJECT_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS KVO WHERE KVO.OBJECT_TYPE = 'RELATIONSHIP_DETAILS') WHERE ( A.SOURCE_OBJECT_TYPE_ID = (SELECT object_type_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE = 'SM_COLUMN') AND A.SOURCE_OBJECT_ID IN (select splitdata from dbo.fnSplitString(@id,','))) OR ( A.TARGET_OBJECT_TYPE_ID = (SELECT object_type_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE = 'SM_COLUMN') AND A.TARGET_OBJECT_ID IN (select splitdata from dbo.fnSplitString(@id,',')));
    /**
     * Delete Associations For Columns
     */
    DELETE FROM ADS_ASSOCIATIONS WHERE (TARGET_OBJECT_ID in (select splitdata from dbo.fnSplitString(@id,',')) AND TARGET_OBJECT_TYPE_ID = (SELECT object_type_id FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE = 'SM_COLUMN')) OR (SOURCE_OBJECT_ID in (select splitdata from dbo.fnSplitString(@id,',')) AND SOURCE_OBJECT_TYPE_ID = (SELECT object_type_id FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE = 'SM_COLUMN'));
    END
END
GO
IF (SELECT COUNT(*) FROM APP_PREFERENCES WHERE PREFERENCE_NAME = 'ADS_MM_LICENSE_RENEWAL_REMINDER_SEND') < 1
BEGIN
INSERT INTO APP_PREFERENCES(PREFERENCE_NAME,PREFERENCE_VALUE)
    SELECT 'ADS_MM_LICENSE_RENEWAL_REMINDER_SEND','true'
    UNION ALL
    SELECT 'ADS_MM_LICENSE_RENEWAL_REMINDER_SNOOZE','3'
    UNION ALL
    SELECT 'ADS_MM_LICENSE_RENEWAL_REMINDER_EMAIL_TO','false'
    UNION ALL
    SELECT 'ADS_MM_LICENSE_RENEWAL_REMINDER_EMAIL_IDS',''
END
GO
IF NOT EXISTS (SELECT * FROM ADS_KEY_VALUE_OBJECTS WHERE  OBJECT_TYPE = 'AMM_LICENSE')
BEGIN
    INSERT INTO ADS_KEY_VALUE_OBJECTS (OBJECT_TYPE,OBJECT_TABLE,OBJECT_TABLE_COLUMN,OBJECT_PARENT_TYPE,OBJECT_PARENT_COLUMN_ID)
    SELECT 'AMM_LICENSE','AMM_LICENSE','','',''
END
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE type = 'P' AND name = 'SP_RUN_QUERY')
      EXEC('CREATE PROCEDURE SP_RUN_QUERY
        @QUERY VARCHAR(MAX)
        AS
        BEGIN
                SET NOCOUNT ON;
                EXECUTE(@QUERY);
        END
');
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE type = 'P' AND name = 'SP_RUN_DML_QUERY')
      EXEC('CREATE PROCEDURE SP_RUN_DML_QUERY
        @QUERY VARCHAR(MAX)
        AS
        BEGIN
                EXECUTE(@QUERY);
                RETURN @@ROWCOUNT;
        END');
GO
IF (OBJECTPROPERTY(OBJECT_ID(N'[SP_RUN_DML_QM3_QUERY]'),N'IsProcedure') = 1)
BEGIN
    DROP PROCEDURE SP_RUN_DML_QM3_QUERY
END
GO
CREATE PROCEDURE SP_RUN_DML_QM3_QUERY
@LANG_NAME VARCHAR(100),
@LANG_VALUE VARCHAR(100),
@KEY_ID VARCHAR(100)
AS
DECLARE @QUERY VARCHAR(MAX)
SET @QUERY = 'UPDATE LANGUAGE_PREFERENCES SET ' + @LANG_NAME + ' = ''' + @LANG_VALUE + ''' WHERE KEY_ID = ''' + @KEY_ID + ''''
BEGIN
	EXECUTE(@QUERY);
	RETURN @@ROWCOUNT;
END
GO

IF (OBJECTPROPERTY(OBJECT_ID(N'[SP_RUN_DML_QM5_QUERY]'),N'IsProcedure') = 1)
BEGIN
    DROP PROCEDURE SP_RUN_DML_QM5_QUERY
END
GO
CREATE PROCEDURE SP_RUN_DML_QM5_QUERY
@LANG_NAME VARCHAR(100),
@KEY_ID VARCHAR(100),
@LANG_VALUE VARCHAR(100),
@KEY_DESC VARCHAR(100),
@PARENT_ID VARCHAR(100)
AS
DECLARE @QUERY VARCHAR(MAX)
SET @QUERY = 'INSERT INTO LANGUAGE_PREFERENCES (KEY_ID, ' + @LANG_NAME + ', KEY_DESCRIPTION, PARENT_ID) VALUES (''' + @KEY_ID + ''','''+ @LANG_VALUE + ''','''+ @KEY_DESC+ ''','''+ @PARENT_ID +''')'
BEGIN
	EXECUTE(@QUERY);
	RETURN @@ROWCOUNT;
END
GO
IF COL_LENGTH('ADS_KEY_VALUE', 'REGEX') IS NULL
BEGIN
    EXECUTE('ALTER TABLE ADS_KEY_VALUE ADD REGEX varchar(100) NULL');
    EXECUTE('ALTER TABLE ADS_KEY_VALUE ADD MANDATORY tinyint NULL');
    EXECUTE('ALTER TABLE ADS_KEY_VALUE ADD ENABLED tinyint NULL');
    EXECUTE('ALTER TABLE ADS_KEY_VALUE ADD FIELD_LENGTH INT NULL');
    EXECUTE('ALTER TABLE ADS_KEY_VALUE ADD PROCESSING_ORDER INT NULL');
END
GO
IF NOT EXISTS (SELECT * FROM SYSOBJECTS  WHERE  ID = OBJECT_ID(N'ADS_FORM')  AND TYPE = 'U')
    BEGIN
        EXECUTE ('CREATE TABLE ADS_FORM(
        F_ID bigint IDENTITY(1,1) NOT NULL,
        FORM_NAME varchar(250) NOT NULL,
        DESCRIPTION varchar(4000) NULL,
        BASE_FORM_ID int NULL DEFAULT 0,
        SYSTEM_BASED tinyint NULL DEFAULT 0
        CONSTRAINT PK_ADS_FORM_F_ID PRIMARY KEY(F_ID),
        CONSTRAINT UK_ADS_FORM_NAME UNIQUE (FORM_NAME))');
    END
GO
IF(SELECT COUNT(*) FROM ADS_FORM) = 0
    BEGIN
        INSERT INTO ADS_FORM(FORM_NAME,DESCRIPTION,BASE_FORM_ID,SYSTEM_BASED)
            SELECT 'Table Properties - Metadata Manager','Default template to configure table field properties', 0,1
            UNION ALL
            SELECT 'Column Properties - Metadata Manager','Default template to configure column field properties', 0,1
    END
GO
IF NOT EXISTS (SELECT * FROM ADS_KEY_VALUE_OBJECTS WHERE  OBJECT_TYPE = 'FORM')
BEGIN
    INSERT INTO ADS_KEY_VALUE_OBJECTS (OBJECT_TYPE,OBJECT_TABLE,OBJECT_TABLE_COLUMN,OBJECT_PARENT_TYPE,OBJECT_PARENT_COLUMN_ID)
    SELECT 'FORM','ADS_FORM','F_ID','',''
END
GO
IF(select COUNT(OBJECT_ID) from ADS_OBJECT_TO_OBJECT_SCOPE WHERE OBJECT_ID =
    (SELECT F_ID FROM ADS_FORM where FORM_NAME = 'Table Properties - Metadata Manager' AND SYSTEM_BASED = 1) AND SCOPE_OBJECT_TYPE_ID =
    (select Object_type_id from ADS_KEY_VALUE_OBJECTS where object_type = 'SM_ENVIRONMENT')) = 0
    BEGIN
    declare @formObjectTypeId bigint
    declare @scopeObjectTypeId bigint
    declare @formId bigint

        set @formObjectTypeId = (select Object_type_id from ADS_KEY_VALUE_OBJECTS where object_type = 'FORM');
        set @scopeObjectTypeId = (select Object_type_id from ADS_KEY_VALUE_OBJECTS where object_type = 'SM_ENVIRONMENT');

        set @formId = (select F_ID from ADS_FORM where FORM_NAME = 'Table Properties - Metadata Manager' AND SYSTEM_BASED = 1);
        INSERT INTO ADS_OBJECT_TO_OBJECT_SCOPE(OBJECT_TYPE_ID,OBJECT_ID,SCOPE_OBJECT_TYPE_ID, SCOPE_OBJECT_ID)
        VALUES(@formObjectTypeId, @formId, @scopeObjectTypeId,-1);
        set @formId = (select F_ID from ADS_FORM where FORM_NAME = 'Column Properties - Metadata Manager' AND SYSTEM_BASED = 1);
        INSERT INTO ADS_OBJECT_TO_OBJECT_SCOPE(OBJECT_TYPE_ID,OBJECT_ID,SCOPE_OBJECT_TYPE_ID, SCOPE_OBJECT_ID)
        VALUES(@formObjectTypeId, @formId, @scopeObjectTypeId,-1);
    END
GO
IF (SELECT COUNT(DATATYPE) FROM AMM_DATATYPES WHERE  DATATYPE = 'numeric') = 0
    BEGIN
    INSERT INTO AMM_DATATYPES (DATATYPE,PRECISION,SCALE) SELECT 'numeric',0,0
    END
GO
IF NOT EXISTS (SELECT *
	       FROM   SYSOBJECTS
	       WHERE  ID = OBJECT_ID(N'ADS_WORKFLOW_FOLDER')
		      AND TYPE = 'U')
  BEGIN
      EXECUTE ('CREATE TABLE ADS_WORKFLOW_FOLDER
	(
	WFF_ID bigint IDENTITY(1,1) NOT NULL,
	FOLDER_NAME VARCHAR(250) NULL,
	DESCRIPTION VARCHAR(MAX) NULL,
	FOLDER_ORDER INT NOT NULL,
	CONSTRAINT PK_ADS_WF_WFF_ID PRIMARY KEY(WFF_ID),
	CONSTRAINT UK_ADS_WF_FOLDER_NAME UNIQUE (FOLDER_NAME)
	)')
  END
GO
IF EXISTS (SELECT * FROM ADS_MM_VERSION WHERE VALUE < '9.2')
BEGIN
IF NOT EXISTS (SELECT *
	       FROM   SYSOBJECTS
	       WHERE  ID = OBJECT_ID(N'ADS_WORKFLOW_TRIGGER')
		      AND TYPE = 'U')
  BEGIN
      EXECUTE ('CREATE TABLE ADS_WORKFLOW_TRIGGER
	(
	WFT_ID BIGINT IDENTITY(1,1) NOT NULL,
	TRIGGER_NAME VARCHAR(250) NOT NULL,
	TRIGGER_TITLE VARCHAR(250) NOT NULL,
	DESCRIPTION VARCHAR(MAX) NULL,
	STATUS_TITLE VARCHAR(50) NOT NULL DEFAULT ''Draft'',
	CONSTRAINT PK_ADS_WRKFLW_TRG_ID PRIMARY KEY(WFT_ID)
	)')
  END
END
GO
IF NOT EXISTS (SELECT *
	       FROM   SYSOBJECTS
	       WHERE  ID = OBJECT_ID(N'ADS_WORKFLOW_STAGE')
		      AND TYPE = 'U')
  BEGIN
      EXECUTE ('CREATE TABLE ADS_WORKFLOW_STAGE
	(
	WFS_ID BIGINT IDENTITY(1,1) NOT NULL,
	STAGE_NAME VARCHAR(250) NOT NULL,
	DESCRIPTION VARCHAR(MAX) NULL,
	STATUS_TITLE VARCHAR(50) NOT NULL,
	MODULE_ID INT NOT NULL,
	STAGE_ORDER INT NULL,
	THUMBNAIL VARBINARY(MAX) NULL,
        VALID BIT DEFAULT 1 NOT NULL,
        SYSTEMBASED BIT DEFAULT 0 NULL,
	CONSTRAINT PK_ADS_WRKFLW_WFS_ID PRIMARY KEY(WFS_ID),
	CONSTRAINT FK_ADS_WRKFLW_MOD_ID FOREIGN KEY(MODULE_ID) REFERENCES ADS_MODULES(MODULE_ID) ON DELETE CASCADE
	)')
  END
GO

IF NOT EXISTS (SELECT *
	       FROM   SYSOBJECTS
	       WHERE  ID = OBJECT_ID(N'ADS_WORKFLOW_STAGE_ROLE')
		      AND TYPE = 'U')
  BEGIN
      EXECUTE ('CREATE TABLE ADS_WORKFLOW_STAGE_ROLE
	(
	WFS_ID BIGINT NOT NULL,
	ROLE_ID VARCHAR(100) NOT NULL,
	CONSTRAINT FK_ADS_WRKFLW_WFS_ID FOREIGN KEY(WFS_ID) REFERENCES ADS_WORKFLOW_STAGE(WFS_ID) ON DELETE CASCADE,
	CONSTRAINT FK_ADS_WRKFLW_ROLE_ID FOREIGN KEY(ROLE_ID) REFERENCES SECURITY_ROLES(ROLE_ID) ON DELETE CASCADE,
	CONSTRAINT UK_ADS_WF_STAGE_ROLE_ID UNIQUE(WFS_ID,ROLE_ID)
	)')
  END
GO
IF EXISTS (SELECT * FROM ADS_MM_VERSION WHERE VALUE < '9.2')
BEGIN
IF NOT EXISTS (SELECT *
	       FROM   SYSOBJECTS
	       WHERE  ID = OBJECT_ID(N'ADS_WORKFLOW_ACTION')
		      AND TYPE = 'U')
  BEGIN
      EXECUTE ('CREATE TABLE ADS_WORKFLOW_ACTION
	(
	WFA_ID BIGINT IDENTITY(1,1) NOT NULL,
	ACTION_NAME VARCHAR(250) NOT NULL,
	ACTION_TITLE VARCHAR(250) NOT NULL,
	DESCRIPTION VARCHAR(MAX) NULL,
	STATUS_TITLE VARCHAR(50) NOT NULL,
	MODULE_ID INT NOT NULL,
	ACTION_FILENAME VARCHAR(50) NULL,
	ACTION_METHOD VARCHAR(50) NULL,
	CONSTRAINT PK_ADS_WF_ACTN_WFA_ID PRIMARY KEY(WFA_ID),
	CONSTRAINT FK_ADS_WF_ACTN_MODULE_ID FOREIGN KEY(MODULE_ID) REFERENCES ADS_MODULES(MODULE_ID) ON DELETE CASCADE
	)')
  END
END
GO

IF NOT EXISTS (SELECT *
	       FROM   SYSOBJECTS
	       WHERE  ID = OBJECT_ID(N'ADS_WORKFLOW')
		      AND TYPE = 'U')
  BEGIN
      EXECUTE ('CREATE TABLE ADS_WORKFLOW
	(
	WF_ID BIGINT IDENTITY(1,1) NOT NULL,
	WORKFLOW_NAME VARCHAR(250) NOT NULL,
	DESCRIPTION VARCHAR(MAX) NULL,
	WFF_ID BIGINT NOT NULL,
	MODULE_ID INT NOT NULL,
	SYSTEMBASED BIT DEFAULT 0,
	THUMBNAIL VARBINARY(MAX) NULL,
        VALID BIT DEFAULT 1 NOT NULL,
	CONSTRAINT PK_ADS_WORKFLOW_ID PRIMARY KEY(WF_ID),
        CONSTRAINT UK_ADS_WORKFLOW_NAME UNIQUE(WORKFLOW_NAME,WFF_ID),
	CONSTRAINT FK_ADS_WF_ACTN_WFF_ID FOREIGN KEY(WFF_ID) REFERENCES ADS_WORKFLOW_FOLDER(WFF_ID) ON DELETE CASCADE,
	CONSTRAINT FK_ADS_WF_MOD_ID FOREIGN KEY(MODULE_ID) REFERENCES ADS_MODULES(MODULE_ID) ON DELETE CASCADE
	)')
  END
GO

IF NOT EXISTS (SELECT *
	       FROM   SYSOBJECTS
	       WHERE  ID = OBJECT_ID(N'ADS_WORKFLOW_NODE')
		      AND TYPE = 'U')
  BEGIN
      EXECUTE ('CREATE TABLE ADS_WORKFLOW_NODE
	(
	WFN_ID BIGINT IDENTITY(1,1) NOT NULL,
	WF_ID BIGINT NOT NULL,
	NODE_TYPE CHAR(1) NOT NULL,
	NODE_ID BIGINT NULL,
	UI_PROPERTIES VARCHAR(MAX) NULL,
	VALID BIT DEFAULT 1 NOT NULL,
	CONSTRAINT PK_ADS_WRKFLW_WFN_ID PRIMARY KEY(WFN_ID),
	CONSTRAINT FK_ADS_WRKFLW_WF_ID FOREIGN KEY(WF_ID) REFERENCES ADS_WORKFLOW(WF_ID) ON DELETE CASCADE
	)')
  END
GO

IF NOT EXISTS (SELECT *
	       FROM   SYSOBJECTS
	       WHERE  ID = OBJECT_ID(N'ADS_WORKFLOW_NODE_CON')
		      AND TYPE = 'U')
  BEGIN
      EXECUTE ('CREATE TABLE ADS_WORKFLOW_NODE_CON
	(
	SOURCE_WFN_ID BIGINT NOT NULL,
	TARGET_WFN_ID BIGINT NOT NULL,
	UI_PROPERTIES VARCHAR(MAX) NULL,
	CONSTRAINT FK_ADS_SOURCE_WFN_ID FOREIGN KEY(SOURCE_WFN_ID) REFERENCES ADS_WORKFLOW_NODE(WFN_ID) ON DELETE CASCADE
	)')
  END
GO

IF NOT EXISTS (SELECT *
	       FROM   SYSOBJECTS
	       WHERE  ID = OBJECT_ID(N'ADS_WORKFLOW_NODE_ROLE')
		      AND TYPE = 'U')
  BEGIN
      EXECUTE ('CREATE TABLE ADS_WORKFLOW_NODE_ROLE
	(
	WFN_ID BIGINT NOT NULL,
	ROLE_ID VARCHAR(100) NOT NULL,
	CONSTRAINT FK_ADS_WF_NODE_WFN_ID FOREIGN KEY(WFN_ID) REFERENCES ADS_WORKFLOW_NODE(WFN_ID) ON DELETE CASCADE,
	CONSTRAINT FK_ADS_WF_NODE_ROLE_ID FOREIGN KEY(ROLE_ID) REFERENCES SECURITY_ROLES(ROLE_ID) ON DELETE CASCADE
	)')
  END
GO

IF NOT EXISTS (SELECT *
	       FROM   SYSOBJECTS
	       WHERE  ID = OBJECT_ID(N'ADS_WORKFLOW_ASSIGNMENT')
		      AND TYPE = 'U')
  BEGIN
      EXECUTE ('CREATE TABLE ADS_WORKFLOW_ASSIGNMENT
	(
	WFG_ID BIGINT IDENTITY(1,1) NOT NULL,
	WF_ID BIGINT NOT NULL,
	OBJECT_ID BIGINT NOT NULL,
	OBJECT_TYPE_ID BIGINT NOT NULL,
        VALID BIT DEFAULT 1 NOT NULL,
	CONSTRAINT PK_ADS_WF_ASSGN_WFG_ID PRIMARY KEY(WFG_ID),
	CONSTRAINT FK_ADS_WF_ASGN_WF_ID FOREIGN KEY(WF_ID) REFERENCES ADS_WORKFLOW(WF_ID) ON DELETE CASCADE,
	CONSTRAINT FK_ADS_WF_OBJECT_TYPE_ID FOREIGN KEY(OBJECT_TYPE_ID) REFERENCES ADS_KEY_VALUE_OBJECTS(OBJECT_TYPE_ID) ON DELETE CASCADE
	)')
  END
GO

IF NOT EXISTS (SELECT *
	       FROM   SYSOBJECTS
	       WHERE  ID = OBJECT_ID(N'ADS_WORKFLOW_ASGN_NODE_CONFIG')
		      AND TYPE = 'U')
  BEGIN
      EXECUTE ('CREATE TABLE ADS_WORKFLOW_ASGN_NODE_CONFIG
	(
	WFG_ID BIGINT NOT NULL,
	WFN_ID BIGINT NOT NULL,
	CONFIG_TYPE VARCHAR(250) NOT NULL,
	CONFIG_VALUE VARCHAR(250) NOT NULL,
	CONSTRAINT FK_ADS_WF_ASSGN_WFG_ID FOREIGN KEY(WFG_ID) REFERENCES ADS_WORKFLOW_ASSIGNMENT(WFG_ID) ON DELETE CASCADE,
	CONSTRAINT FK_ADS_WF_ASSGN_CONF_WFN_ID FOREIGN KEY(WFN_ID) REFERENCES ADS_WORKFLOW_NODE(WFN_ID) ON DELETE NO ACTION
	)')
  END
GO
IF EXISTS (SELECT * FROM ADS_MM_VERSION WHERE VALUE < '9.2')
    BEGIN
IF NOT EXISTS (SELECT *
	       FROM   SYSOBJECTS
	       WHERE  ID = OBJECT_ID(N'ADS_WORKFLOW_ASGMNT_TRIGGER')
		      AND TYPE = 'U')
  BEGIN
      EXECUTE ('CREATE TABLE ADS_WORKFLOW_ASGMNT_TRIGGER
	(
	WFG_ID BIGINT NOT NULL,
	OBJECT_TYPE_ID BIGINT NOT NULL,
	OBJECT_ID BIGINT NOT NULL,
	CONSTRAINT FK_ADS_WF_ASSGN_TRGR_WFA_ID FOREIGN KEY(WFG_ID) REFERENCES ADS_WORKFLOW_ASSIGNMENT(WFG_ID) ON DELETE CASCADE,
	CONSTRAINT FK_ADS_WF_ASGN_TR_OBTYPE_ID FOREIGN KEY(OBJECT_TYPE_ID) REFERENCES ADS_KEY_VALUE_OBJECTS(OBJECT_TYPE_ID) ON DELETE NO ACTION
	)')
  END
END
GO

IF NOT EXISTS (SELECT *
	       FROM   SYSOBJECTS
	       WHERE  ID = OBJECT_ID(N'ADS_WORKFLOW_STATUS')
		      AND TYPE = 'U')
  BEGIN
      EXECUTE ('CREATE TABLE ADS_WORKFLOW_STATUS
	(
	OBJECT_TYPE_ID BIGINT NOT NULL,
	OBJECT_ID BIGINT NOT NULL,
	WFN_ID BIGINT NOT NULL,
	CONSTRAINT FK_ADS_WF_STATUS_OBJ_TYPE_ID FOREIGN KEY(OBJECT_TYPE_ID) REFERENCES ADS_KEY_VALUE_OBJECTS(OBJECT_TYPE_ID) ON DELETE CASCADE,
	CONSTRAINT FK_ADS_WF_STATUS_WFN_ID FOREIGN KEY(WFN_ID) REFERENCES ADS_WORKFLOW_NODE(WFN_ID) ON DELETE CASCADE
	)')
  END
GO

IF NOT EXISTS(SELECT MODULE_KEY FROM ADS_MODULES WHERE MODULE_KEY = 'com.ads.mm.permission.generic')
BEGIN
    INSERT INTO ADS_MODULES(MODULE_ID, MODULE_NAME, MODULE_KEY, MODULE_ORDER, MODULE_FORWARD)
    SELECT 14, 'Generic', 'com.ads.mm.permission.generic', 14 , 'generic'
    UNION ALL
    SELECT 15, 'Workflow Manager', 'com.ads.mm.permission.workflow', 15 , 'workflowmanager'
END
GO
IF EXISTS (SELECT * FROM ADS_MM_VERSION WHERE VALUE < '8.3')
BEGIN
	IF NOT EXISTS (SELECT * FROM ADS_WORKFLOW_STAGE WHERE STAGE_NAME = 'Review' AND MODULE_ID = (SELECT MODULE_ID FROM ADS_MODULES WHERE MODULE_NAME = 'Generic'))
	BEGIN
		INSERT INTO ADS_WORKFLOW_STAGE(STAGE_NAME, DESCRIPTION, STATUS_TITLE,MODULE_ID,STAGE_ORDER,VALID,SYSTEMBASED)
		SELECT 'Review','Review','Pending Review', (SELECT MODULE_ID FROM ADS_MODULES WHERE MODULE_NAME = 'Generic'), 1,1,1
		UNION ALL
		SELECT 'Approve','Approve','Pending Approve', (SELECT MODULE_ID FROM ADS_MODULES WHERE MODULE_NAME = 'Generic'), 2,1,1
		UNION ALL
		SELECT 'Pending Publish','Pending Publish','Pending Publish', (SELECT MODULE_ID FROM ADS_MODULES WHERE MODULE_NAME = 'Generic'), 3,1,1
	END;
END;
GO
IF NOT EXISTS (SELECT * FROM ADS_KEY_VALUE_OBJECTS WHERE  OBJECT_TYPE = 'ADS_WORKFLOW_STAGE')
    BEGIN
        INSERT INTO ADS_KEY_VALUE_OBJECTS (OBJECT_TYPE,OBJECT_TABLE,OBJECT_TABLE_COLUMN,OBJECT_PARENT_TYPE,OBJECT_PARENT_COLUMN_ID)
        SELECT 'ADS_WORKFLOW_STAGE','ADS_WORKFLOW_STAGE','WFS_ID','','';
    END
GO
IF NOT EXISTS (SELECT * FROM ADS_KEY_VALUE_OBJECTS WHERE  OBJECT_TYPE = 'ADS_WORKFLOW_FOLDER')
    BEGIN
        INSERT INTO ADS_KEY_VALUE_OBJECTS (OBJECT_TYPE,OBJECT_TABLE,OBJECT_TABLE_COLUMN,OBJECT_PARENT_TYPE,OBJECT_PARENT_COLUMN_ID)
        SELECT 'ADS_WORKFLOW_FOLDER','ADS_WORKFLOW_FOLDER','WFF_ID','','';
    END
GO
IF NOT EXISTS (SELECT * FROM ADS_KEY_VALUE_OBJECTS WHERE  OBJECT_TYPE = 'ADS_WORKFLOW_ASSIGNMENT')
    BEGIN
        INSERT INTO ADS_KEY_VALUE_OBJECTS (OBJECT_TYPE,OBJECT_TABLE,OBJECT_TABLE_COLUMN,OBJECT_PARENT_TYPE,OBJECT_PARENT_COLUMN_ID)
        SELECT 'ADS_WORKFLOW_ASSIGNMENT','ADS_WORKFLOW_ASSIGNMENT','WFA_ID','','';
    END
GO
IF NOT EXISTS (SELECT * FROM ADS_KEY_VALUE_OBJECTS WHERE  OBJECT_TYPE = 'ADS_WORKFLOW')
    BEGIN
        INSERT INTO ADS_KEY_VALUE_OBJECTS (OBJECT_TYPE,OBJECT_TABLE,OBJECT_TABLE_COLUMN,OBJECT_PARENT_TYPE,OBJECT_PARENT_COLUMN_ID)
        SELECT 'ADS_WORKFLOW','ADS_WORKFLOW','WF_ID','','';
    END
GO
IF EXISTS (SELECT * FROM ADS_MM_VERSION WHERE VALUE < '9.2')
BEGIN
    IF (SELECT COUNT(*) FROM ADS_WORKFLOW_TRIGGER WHERE TRIGGER_NAME = 'ON_CREATE') < 1
    BEGIN
        INSERT INTO ADS_WORKFLOW_TRIGGER(TRIGGER_NAME, TRIGGER_TITLE, DESCRIPTION, STATUS_TITLE)
        SELECT 'ON_CREATE','On Create','On Create','Draft'
    END
END
GO
IF EXISTS (SELECT * FROM ADS_MM_VERSION WHERE VALUE < '9.2')
BEGIN
    IF (SELECT COUNT(*) FROM ADS_WORKFLOW_ACTION WHERE ACTION_NAME = 'PUBLISH') < 1
    BEGIN
        INSERT INTO ADS_WORKFLOW_ACTION(ACTION_NAME, ACTION_TITLE, DESCRIPTION, STATUS_TITLE,MODULE_ID,ACTION_FILENAME, ACTION_METHOD)
        SELECT 'PUBLISH','Publish','Publish','Published', (SELECT MODULE_ID FROM ADS_MODULES WHERE MODULE_NAME = 'Mapping Manager'), 'MM_Actions.js', 'onMapPublish'
        UNION ALL
        SELECT 'PUBLISH','Publish','Publish','Published', (SELECT MODULE_ID FROM ADS_MODULES WHERE MODULE_NAME = 'Metadata Manager'), 'SM_Actions.js', 'onPublish'
        UNION ALL
        SELECT 'PUBLISH','Publish','Publish','Published', (SELECT MODULE_ID FROM ADS_MODULES WHERE MODULE_NAME = 'Business Glossary Manager'), 'BGM_Actions.js', 'onBusinessTermPublish'
    END;
END;
GO
  IF (SELECT COUNT(*) FROM RM_HISTORYTYPE WHERE HISTORYTYPENAME = 'ASSIGNMENT') = 0
    BEGIN
        INSERT INTO RM_HISTORYTYPE (HISTORYTYPENAME, HISTORYTYPEDESC)
        (SELECT 'ASSIGNMENT', 'Assign Record');
    END
GO
IF COL_LENGTH('SYSTEM_TABLE_METADATA', 'PUBLISH') IS NULL
    BEGIN
        EXECUTE('ALTER TABLE SYSTEM_TABLE_METADATA ADD PUBLISH BIT NULL DEFAULT 0')
        EXECUTE('UPDATE SYSTEM_TABLE_METADATA SET PUBLISH = 0')
        EXECUTE('ALTER TABLE SYSTEM_TABLE_COLUMNS_METADATA ADD PUBLISH BIT NULL DEFAULT 0')
        EXECUTE('UPDATE SYSTEM_TABLE_COLUMNS_METADATA SET PUBLISH = 0')
    END
GO
IF EXISTS (SELECT * FROM ADS_MM_VERSION WHERE VALUE < '9.2')
BEGIN
IF NOT EXISTS(SELECT * FROM SYS.VIEWS WHERE NAME = 'ADS_WORKFLOW_STATUS_V')
    BEGIN
       EXEC ('CREATE VIEW [ADS_WORKFLOW_STATUS_V]
     AS
       WITH objectstatus
         AS (SELECT AWN.node_id,
                    AWN.node_type,
                    awn.wfn_id,
                    object_id, wf_id,
                    object_type_id
             FROM   ads_workflow_node AWN
                    JOIN ads_workflow_status AWS
                      ON AWN.wfn_id = AWS.wfn_id
            )

    SELECT CASE
             WHEN node_type = ''A'' THEN (SELECT status_title
                                        FROM   ads_workflow_action
                                        WHERE  wfa_id = objectstatus.node_id)
             WHEN node_type = ''S'' THEN (SELECT status_title
                                        FROM   ads_workflow_stage
                                        WHERE  wfs_id = objectstatus.node_id)
             WHEN node_type = ''T'' THEN (SELECT status_title
                                        FROM   ads_workflow_trigger
                                        WHERE  wft_id = objectstatus.node_id)
             ELSE ''''
           END AS STATUS_TITLE ,object_id,object_type_id,node_id,objectstatus.WF_ID,aw.WORKFLOW_NAME, objectstatus.wfn_id,objectstatus.node_type
    FROM   objectstatus join ADS_WORKFLOW aw on objectstatus.WF_ID = aw.WF_ID ');
    END
END
GO
IF EXISTS
  (SELECT *
   FROM ads_mm_version
   WHERE value < '8.3' )
   BEGIN DECLARE @WFF_ID BIGINT, @BG_WF_ID BIGINT,@MM_WF_ID BIGINT,@SM_WF_ID BIGINT, @TERM_COUNT INT,@TABLE_COUNT INT,@COLUMN_COUNT INT,@MAP_COUNT INT, @BUS_TERM_ID BIGINT,@MAP_ID BIGINT, @STM_ID BIGINT,@STCM_ID BIGINT,@FOLDER_ID BIGINT, @IS_PUBLISHED VARCHAR(100), @WFG_ID BIGINT, @INITIAL_VALUE INT = 1;

DECLARE @BUSINESS_TERMS TABLE (id INT IDENTITY(1,1), bus_term_id VARCHAR(50));
DECLARE @MAPPING_DETAILS TABLE (id INT IDENTITY(1,1), MAP_ID VARCHAR(50));

BEGIN
INSERT INTO ads_workflow_folder (folder_name, description,folder_order)
VALUES ('DefaultFolder',
        'DefaultFolder',
        1);

SELECT @WFF_ID = wff_id
FROM ads_workflow_folder
WHERE folder_name = 'DefaultFolder';
INSERT INTO RM_HISTORY(HISTORYTYPEID ,HISTORYDESC ,OBJECTID ,OBJECTTYPEID ,HISTORYDATESTAMP ,USER_ID)
	 VALUES
	   (1 , '{"id": "'+CAST(@WFF_ID AS VARCHAR)+'", "name": "DefaultFolder"}'
	   , @WFF_ID
	   ,(SELECT OBJECT_TYPE_ID from ADS_KEY_VALUE_OBJECTS where OBJECT_TYPE = 'ADS_WORKFLOW_FOLDER')
	   ,CURRENT_TIMESTAMP,'Administrator'
	   );

INSERT INTO ads_workflow (workflow_name, wff_id, module_id, description, systembased, thumbnail)
VALUES ('Business_Glossary_Default_Workflow',
        @WFF_ID,
          (SELECT module_id
           FROM ads_modules
           WHERE module_name = 'Business Glossary Manager' ), 'Business_Glossary_Default_Workflow',
                                                              1,CONVERT(VARBINARY(4000),0x

SELECT @BG_WF_ID = wf_id
FROM ads_workflow
WHERE workflow_name = 'Business_Glossary_Default_Workflow';

INSERT INTO RM_HISTORY(HISTORYTYPEID ,HISTORYDESC ,OBJECTID ,OBJECTTYPEID ,HISTORYDATESTAMP ,USER_ID)
	 VALUES
	   (1 , '{"id": "'+CAST(@BG_WF_ID AS VARCHAR)+'", "name": "Business_Glossary_Default_Workflow"}'
	   , @BG_WF_ID
	   ,(SELECT OBJECT_TYPE_ID from ADS_KEY_VALUE_OBJECTS where OBJECT_TYPE = 'ADS_WORKFLOW')
	   ,CURRENT_TIMESTAMP,'Administrator'
	   );

INSERT INTO ads_workflow (workflow_name, wff_id, module_id, description, systembased, thumbnail)
VALUES ('Mapping_Manager_Default_Workflow',
        @WFF_ID,
          (SELECT module_id
           FROM ads_modules
           WHERE module_name = 'Mapping Manager' ), 'Mapping_Manager_Default_Workflow',
                                                              1,CONVERT(VARBINARY(4000),0x


SELECT @MM_WF_ID = wf_id
FROM ads_workflow
WHERE workflow_name = 'Mapping_Manager_Default_Workflow';

INSERT INTO RM_HISTORY(HISTORYTYPEID ,HISTORYDESC ,OBJECTID ,OBJECTTYPEID ,HISTORYDATESTAMP ,USER_ID)
	 VALUES
	   (1 , '{"id": "'+CAST(@MM_WF_ID AS VARCHAR)+'", "name": "Mapping_Manager_Default_Workflow"}'
	   , @MM_WF_ID
	   ,(SELECT OBJECT_TYPE_ID from ADS_KEY_VALUE_OBJECTS where OBJECT_TYPE = 'ADS_WORKFLOW')
	   ,CURRENT_TIMESTAMP,'Administrator'
	   );

INSERT INTO ads_workflow (workflow_name, wff_id, module_id, description, systembased, thumbnail)
VALUES ('Metadata_Manager_Default_Workflow',
        @WFF_ID,
          (SELECT module_id
           FROM ads_modules
           WHERE module_name = 'Metadata Manager' ), 'Metadata_Manager_Default_Workflow',
                                                              1,CONVERT(VARBINARY(4000),0x

SELECT @SM_WF_ID = wf_id
FROM ads_workflow
WHERE workflow_name = 'Metadata_Manager_Default_Workflow';

INSERT INTO RM_HISTORY(HISTORYTYPEID ,HISTORYDESC ,OBJECTID ,OBJECTTYPEID ,HISTORYDATESTAMP ,USER_ID)
	 VALUES
	   (1 , '{"id": "'+CAST(@SM_WF_ID AS VARCHAR)+'", "name": "Metadata_Manager_Default_Workflow"}'
	   , @SM_WF_ID
	   ,(SELECT OBJECT_TYPE_ID from ADS_KEY_VALUE_OBJECTS where OBJECT_TYPE = 'ADS_WORKFLOW')
	   ,CURRENT_TIMESTAMP,'Administrator'
	   );

INSERT INTO ADS_WORKFLOW_ASSIGNMENT(WF_ID, OBJECT_ID, OBJECT_TYPE_ID)
	VALUES(@BG_WF_ID, -1, (SELECT OBJECT_TYPE_ID from ADS_KEY_VALUE_OBJECTS where OBJECT_TYPE = 'BGM_TERM_CATALOG'));

SELECT @WFG_ID = WFG_ID FROM ADS_WORKFLOW_ASSIGNMENT WHERE OBJECT_ID = -1 AND OBJECT_TYPE_ID = (SELECT OBJECT_TYPE_ID from ADS_KEY_VALUE_OBJECTS where OBJECT_TYPE = 'BGM_TERM_CATALOG');
INSERT INTO ADS_WORKFLOW_ASGMNT_TRIGGER(WFG_ID, OBJECT_TYPE_ID, OBJECT_ID) VALUES
	(@WFG_ID, (SELECT OBJECT_TYPE_ID from ADS_KEY_VALUE_OBJECTS where OBJECT_TYPE = 'BGM_TERM'),-1)

INSERT INTO ADS_WORKFLOW_ASSIGNMENT(WF_ID, OBJECT_ID, OBJECT_TYPE_ID)
	VALUES(@MM_WF_ID, -1, (SELECT OBJECT_TYPE_ID from ADS_KEY_VALUE_OBJECTS where OBJECT_TYPE = 'MM_PROJECT'));
SELECT @WFG_ID = WFG_ID FROM ADS_WORKFLOW_ASSIGNMENT WHERE OBJECT_ID = -1 AND OBJECT_TYPE_ID = (SELECT OBJECT_TYPE_ID from ADS_KEY_VALUE_OBJECTS where OBJECT_TYPE = 'MM_PROJECT');
INSERT INTO ADS_WORKFLOW_ASGMNT_TRIGGER(WFG_ID, OBJECT_TYPE_ID, OBJECT_ID) VALUES
	(@WFG_ID, (SELECT OBJECT_TYPE_ID from ADS_KEY_VALUE_OBJECTS where OBJECT_TYPE = 'MM_MAPPING'),-1)

INSERT INTO ADS_WORKFLOW_ASSIGNMENT(WF_ID, OBJECT_ID, OBJECT_TYPE_ID)
	VALUES(@SM_WF_ID, -1, (SELECT OBJECT_TYPE_ID from ADS_KEY_VALUE_OBJECTS where OBJECT_TYPE = 'SM_ENVIRONMENT'));
SELECT @WFG_ID = WFG_ID FROM ADS_WORKFLOW_ASSIGNMENT WHERE OBJECT_ID = -1 AND OBJECT_TYPE_ID = (SELECT OBJECT_TYPE_ID from ADS_KEY_VALUE_OBJECTS where OBJECT_TYPE = 'SM_ENVIRONMENT');

INSERT INTO ADS_WORKFLOW_ASGMNT_TRIGGER(WFG_ID, OBJECT_TYPE_ID, OBJECT_ID) VALUES
	(@WFG_ID, (SELECT OBJECT_TYPE_ID from ADS_KEY_VALUE_OBJECTS where OBJECT_TYPE = 'SM_TABLE'),-1)

INSERT INTO ADS_WORKFLOW_ASGMNT_TRIGGER(WFG_ID, OBJECT_TYPE_ID, OBJECT_ID) VALUES
	(@WFG_ID, (SELECT OBJECT_TYPE_ID from ADS_KEY_VALUE_OBJECTS where OBJECT_TYPE = 'SM_COLUMN'),-1)

INSERT INTO ads_workflow_node (wf_id, node_type, node_id, ui_properties)
VALUES (@BG_WF_ID,
        'T',
          (SELECT wft_id
           FROM ads_workflow_trigger
           WHERE TRIGGER_NAME ='ON_CREATE' ), '{"loc":"-137.74667103844354 100.49684550208363","fill":"#8FDD00"}' );

INSERT INTO ads_workflow_node (wf_id, node_type, node_id, ui_properties)
VALUES (@BG_WF_ID,
        'A',
          (SELECT wfa_id
           FROM ads_workflow_action
           WHERE action_name ='PUBLISH'
             AND MODULE_ID =
               (SELECT module_id
                FROM ads_modules
                WHERE module_name = 'Business Glossary Manager' ) ), '{"loc":"269.0133972240249 99.49684550208343","fill":"#B9224C"}');
INSERT INTO ads_workflow_node (wf_id, node_type, node_id, ui_properties)
VALUES (@MM_WF_ID,
        'T',
          (SELECT wft_id
           FROM ads_workflow_trigger
           WHERE TRIGGER_NAME ='ON_CREATE' ), '{"loc":"-137.74667103844354 100.49684550208363","fill":"#8FDD00"}' );

INSERT INTO ads_workflow_node (wf_id, node_type, node_id, ui_properties)
VALUES (@MM_WF_ID,
        'A',
          (SELECT wfa_id
           FROM ads_workflow_action
           WHERE action_name ='PUBLISH'
             AND MODULE_ID =
               (SELECT module_id
                FROM ads_modules
                WHERE module_name = 'Mapping Manager' ) ), '{"loc":"269.0133972240249 99.49684550208343","fill":"#B9224C"}');

INSERT INTO ads_workflow_node (wf_id, node_type, node_id, ui_properties)
VALUES (@SM_WF_ID,
        'T',
          (SELECT wft_id
           FROM ads_workflow_trigger
           WHERE TRIGGER_NAME ='ON_CREATE' ), '{"loc":"-137.74667103844354 100.49684550208363","fill":"#8FDD00"}' );

INSERT INTO ads_workflow_node (wf_id, node_type, node_id, ui_properties)
VALUES (@SM_WF_ID,
        'A',
          (SELECT wfa_id
           FROM ads_workflow_action
           WHERE action_name ='PUBLISH'
             AND MODULE_ID =
               (SELECT module_id
                FROM ads_modules
                WHERE module_name = 'Metadata Manager' ) ), '{"loc":"269.0133972240249 99.49684550208343","fill":"#B9224C"}');

INSERT INTO ads_workflow_node_con (source_wfn_id, target_wfn_id, ui_properties)
VALUES (
          (SELECT wfn_id
           FROM ads_workflow_node
           WHERE wf_id = @BG_WF_ID
             AND node_type='T'
             AND node_id =
               (SELECT wft_id
                FROM ads_workflow_trigger
                WHERE TRIGGER_NAME ='ON_CREATE' ) ) ,
          (SELECT wfn_id
           FROM ads_workflow_node
           WHERE wf_id = @BG_WF_ID
             AND node_type='A'
             AND node_id =
               (SELECT wfa_id
                FROM ads_workflow_action
                WHERE action_name ='PUBLISH'
                  AND MODULE_ID =
                    (SELECT module_id
                     FROM ads_modules
                     WHERE module_name = 'Business Glossary Manager' ) ) ),'{"controls":[14.634016102984326,84.12217658392561,116.55403986446669,83.87161112356547]}');

	 INSERT INTO ads_workflow_node_con (source_wfn_id, target_wfn_id, ui_properties)
VALUES (
          (SELECT wfn_id
           FROM ads_workflow_node
           WHERE wf_id = @MM_WF_ID
             AND node_type='T'
             AND node_id =
               (SELECT wft_id
                FROM ads_workflow_trigger
                WHERE TRIGGER_NAME ='ON_CREATE' ) ) ,
          (SELECT wfn_id
           FROM ads_workflow_node
           WHERE wf_id = @MM_WF_ID
             AND node_type='A'
             AND node_id =
               (SELECT wfa_id
                FROM ads_workflow_action
                WHERE action_name ='PUBLISH'
                  AND MODULE_ID =
                    (SELECT module_id
                     FROM ads_modules
                     WHERE module_name = 'Mapping Manager' ) ) ),'{"controls":[14.634016102984326,84.12217658392561,116.55403986446669,83.87161112356547]}');

 INSERT INTO ads_workflow_node_con (source_wfn_id, target_wfn_id, ui_properties)
VALUES (
          (SELECT wfn_id
           FROM ads_workflow_node
           WHERE wf_id = @SM_WF_ID
             AND node_type='T'
             AND node_id =
               (SELECT wft_id
                FROM ads_workflow_trigger
                WHERE TRIGGER_NAME ='ON_CREATE' ) ) ,
          (SELECT wfn_id
           FROM ads_workflow_node
           WHERE wf_id = @SM_WF_ID
             AND node_type='A'
             AND node_id =
               (SELECT wfa_id
                FROM ads_workflow_action
                WHERE action_name ='PUBLISH'
                  AND MODULE_ID =
                    (SELECT module_id
                     FROM ads_modules
                     WHERE module_name = 'Metadata Manager' ) ) ),'{"controls":[14.634016102984326,84.12217658392561,116.55403986446669,83.87161112356547]}');

INSERT @BUSINESS_TERMS (bus_term_id )
SELECT bus_term_id
FROM business_terms;

SELECT @TERM_COUNT = COUNT(bus_term_id)
FROM business_terms;

WHILE (@INITIAL_VALUE <= @TERM_COUNT) BEGIN
  (SELECT @BUS_TERM_ID = bus_term_id
   FROM @BUSINESS_TERMS
   WHERE id = @INITIAL_VALUE);

  (SELECT @IS_PUBLISHED = publish
   FROM business_terms
   WHERE bus_term_id = @BUS_TERM_ID);

IF @IS_PUBLISHED ='Y'
BEGIN
INSERT INTO ads_workflow_status ( object_id, object_type_id, wfn_id )
VALUES ( @BUS_TERM_ID,
          (SELECT object_type_id
           FROM ads_key_value_objects
           WHERE object_type ='BGM_TERM' ),
          (SELECT wfn_id
           FROM ads_workflow_node
           WHERE wf_id = @BG_WF_ID
             AND node_type='A'
             AND node_id =
               (SELECT wfa_id
                FROM ads_workflow_action
                WHERE action_name ='PUBLISH'
                  AND module_id =
                    (SELECT module_id
                     FROM ads_modules
                     WHERE module_name = 'Business Glossary Manager' ) ) ) );
INSERT INTO RM_HISTORY(HISTORYTYPEID ,HISTORYDESC ,OBJECTID ,OBJECTTYPEID ,HISTORYDATESTAMP ,USER_ID)
	 VALUES
		   (6 , 'Published'
		   , @BUS_TERM_ID
		   ,(SELECT OBJECT_TYPE_ID from ADS_KEY_VALUE_OBJECTS where OBJECT_TYPE = 'BGM_TERM')
		   ,CURRENT_TIMESTAMP,'Administrator'
		   );

END;
SET @INITIAL_VALUE = @INITIAL_VALUE + 1 END;

INSERT @MAPPING_DETAILS (MAP_ID)
SELECT MAP_ID
FROM MAPPING_DETAILS;
SET @INITIAL_VALUE = 1;

SELECT @MAP_COUNT = COUNT(MAP_ID)
FROM MAPPING_DETAILS;

WHILE (@INITIAL_VALUE <= @MAP_COUNT) BEGIN
  (SELECT @MAP_ID = MAP_ID
   FROM @MAPPING_DETAILS
   WHERE id = @INITIAL_VALUE);


  (SELECT @IS_PUBLISHED = ISPUBLISHED
   FROM MAPPING_DETAILS
   WHERE MAP_ID = @MAP_ID);

IF @IS_PUBLISHED ='Y'
BEGIN
INSERT INTO ads_workflow_status ( object_id, object_type_id, wfn_id )
VALUES ( @MAP_ID,
          (SELECT object_type_id
           FROM ads_key_value_objects
           WHERE object_type ='MM_MAPPING' ),
          (SELECT wfn_id
           FROM ads_workflow_node
           WHERE wf_id = @MM_WF_ID
             AND node_type='A'
             AND node_id =
               (SELECT wfa_id
                FROM ads_workflow_action
                WHERE action_name ='PUBLISH'
                  AND module_id =
                    (SELECT module_id
                     FROM ads_modules
                     WHERE module_name = 'Mapping Manager' ) ) ) );
INSERT INTO RM_HISTORY(HISTORYTYPEID ,HISTORYDESC ,OBJECTID ,OBJECTTYPEID ,HISTORYDATESTAMP ,USER_ID)
	 VALUES
		   (6 , 'Published'
		   , @MAP_ID
		   ,(SELECT OBJECT_TYPE_ID from ADS_KEY_VALUE_OBJECTS where OBJECT_TYPE = 'MM_MAPPING')
		   ,CURRENT_TIMESTAMP,'Administrator'
		   );

END;
SET @INITIAL_VALUE = @INITIAL_VALUE + 1
 END;
END;
END;
GO
IF EXISTS (SELECT * FROM ADS_MM_VERSION WHERE VALUE < '8.3')
    BEGIN
        EXECUTE('DELETE FROM USER_PREFERENCES WHERE USER_ID LIKE ''%BGM_TERM_LAYOUT_VIEW%''');
    END
GO
IF(SELECT COUNT(*) FROM APP_PREFERENCES WHERE PREFERENCE_NAME = 'SEND_EMAIL_ON_WORKFLOW_STATUS_UPDATE_SUBJECT') < 1
BEGIN
INSERT INTO APP_PREFERENCES(PREFERENCE_NAME,PREFERENCE_VALUE) VALUES ('SEND_EMAIL_ON_WORKFLOW_STATUS_UPDATE_SUBJECT','Workflow Notification - DO NOT REPLY');
INSERT INTO APP_PREFERENCES(PREFERENCE_NAME,PREFERENCE_VALUE) VALUES ('SEND_EMAIL_ON_WORKFLOW_STATUS_UPDATE_MESSAGE',
 'Hello,<br><br>
 This is to notify you about status change for the following.<br><br>
 <b>@objectName@</b>
 </br><br>
 <table border = 1>
 <tr><th colspan = 2><b>Details</b></th></tr>
 <tr>
 <td>Object Name :</td>
 <td>@objectName@</td>
 </tr>
 <tr>
 <td>Object Parent : </td>
 <td>@objectParent@</td>
 </tr>
 <tr><th colspan = 2><b>Status Change</b></th></tr>
 <tr>
 <td>From :</td>
 <td>@fromStage@</td>
 </tr>
 <tr>
 <td>To :</td>
 <td>@toStage@</td>
 </tr>

 <tr><th colspan = 2><b>Audit Details</b></th></tr>
 <tr>
 <td>Created By :</td>
 <td>@createdBy@</td>
 </tr>
 <tr>
 <td>Created Date :</td>
 <td>@createdDate@</td>
 </tr>
 <tr>
 <td>Status Updated By :</td>
 <td>@statusUpdatedBy@</td>
 </tr>
 <tr>
 <td>Status Updated Date :</td>
 <td>@statusUpdatedDate@</td>
 </tr>
 </table>
 <BR><BR>@objectName@
 <BR><BR><I><font color =red>Note</font>: This is an auto generated email notification and this mailbox is not monitored.<BR>Please do not reply to this email.</I>');
END
GO
IF COL_LENGTH('ADS_KEY_VALUE', 'VISIBLE') IS NULL
    BEGIN
        EXECUTE('ALTER TABLE ADS_KEY_VALUE ADD VISIBLE tinyint NULL DEFAULT 1');
        EXECUTE('ALTER TABLE ADS_KEY_VALUE ADD LOAD_ON_STARTUP tinyint NULL DEFAULT 0');
        EXECUTE('UPDATE ADS_KEY_VALUE SET VISIBLE = 1');
    END
GO
IF COL_LENGTH('ADS_KEY_VALUE_OBJECTS', 'OBJECT_LEVEL') IS NULL
	BEGIN
		EXECUTE('ALTER TABLE ADS_KEY_VALUE_OBJECTS ADD OBJECT_LEVEL INT DEFAULT 0');
		EXECUTE('ALTER TABLE ADS_KEY_VALUE_OBJECTS ADD MODULE_KEY VARCHAR(255)');
		EXECUTE('UPDATE ADS_KEY_VALUE_OBJECTS SET MODULE_KEY = ''com.ads.mm.permission.sm'', OBJECT_LEVEL = 1 WHERE OBJECT_TYPE = ''SM_SYSTEM''');
		EXECUTE('UPDATE ADS_KEY_VALUE_OBJECTS SET MODULE_KEY = ''com.ads.mm.permission.sm'', OBJECT_LEVEL = 2 WHERE OBJECT_TYPE = ''SM_ENVIRONMENT''');
		EXECUTE('UPDATE ADS_KEY_VALUE_OBJECTS SET MODULE_KEY = ''com.ads.mm.permission.sm'', OBJECT_LEVEL = 3 WHERE OBJECT_TYPE = ''SM_TABLE''');
		EXECUTE('UPDATE ADS_KEY_VALUE_OBJECTS SET MODULE_KEY = ''com.ads.mm.permission.sm'', OBJECT_LEVEL = 4 WHERE OBJECT_TYPE = ''SM_COLUMN''');
		EXECUTE('UPDATE ADS_KEY_VALUE_OBJECTS SET MODULE_KEY = ''com.ads.mm.permission.sm'', OBJECT_LEVEL = 1 WHERE OBJECT_TYPE = ''SM_COMPONENT''');
		EXECUTE('UPDATE ADS_KEY_VALUE_OBJECTS SET MODULE_KEY = ''com.ads.mm.permission.mm'', OBJECT_LEVEL = 1 WHERE OBJECT_TYPE = ''MM_PROJECT''');
		EXECUTE('UPDATE ADS_KEY_VALUE_OBJECTS SET MODULE_KEY = ''com.ads.mm.permission.mm'', OBJECT_LEVEL = 2 WHERE OBJECT_TYPE = ''MM_SUBJECT''');
		EXECUTE('UPDATE ADS_KEY_VALUE_OBJECTS SET MODULE_KEY = ''com.ads.mm.permission.mm'', OBJECT_LEVEL = 3 WHERE OBJECT_TYPE = ''MM_MAPPING''');
		EXECUTE('UPDATE ADS_KEY_VALUE_OBJECTS SET MODULE_KEY = ''com.ads.mm.permission.mm'', OBJECT_LEVEL = 4 WHERE OBJECT_TYPE = ''MM_MAPPING_ROW''');
		EXECUTE('UPDATE ADS_KEY_VALUE_OBJECTS SET MODULE_KEY = ''com.ads.mm.permission.generic'', OBJECT_LEVEL = 1 WHERE OBJECT_TYPE = ''MT_DEFINITION''');
		EXECUTE('UPDATE ADS_KEY_VALUE_OBJECTS SET MODULE_KEY = ''com.ads.mm.permission.generic'', OBJECT_LEVEL = 1 WHERE OBJECT_TYPE = ''MT_DEFINITION_VALUE''');
		EXECUTE('UPDATE ADS_KEY_VALUE_OBJECTS SET MODULE_KEY = ''com.ads.mm.permission.generic'', OBJECT_LEVEL = 1 WHERE OBJECT_TYPE = ''ADS_KEY_VALUE''');
		EXECUTE('UPDATE ADS_KEY_VALUE_OBJECTS SET MODULE_KEY = ''com.ads.mm.permission.rqm'', OBJECT_LEVEL = 1 WHERE OBJECT_TYPE = ''REQM_PROJECT''');
		EXECUTE('UPDATE ADS_KEY_VALUE_OBJECTS SET MODULE_KEY = ''com.ads.mm.permission.rqm'', OBJECT_LEVEL = 2 WHERE OBJECT_TYPE = ''REQM_SUBJECT''');
		EXECUTE('UPDATE ADS_KEY_VALUE_OBJECTS SET MODULE_KEY = ''com.ads.mm.permission.rqm'', OBJECT_PARENT_TYPE = ''REQM_SUBJECT'', OBJECT_PARENT_COLUMN_ID = ''SUBJECT_ID'', OBJECT_LEVEL = 3 WHERE OBJECT_TYPE = ''REQM_SPECIFICATION''');
		EXECUTE('UPDATE ADS_KEY_VALUE_OBJECTS SET MODULE_KEY = ''com.ads.mm.permission.rqm'', OBJECT_LEVEL = 1 WHERE OBJECT_TYPE = ''REQM_SPECIFICATION_TEMPLATE''');
		EXECUTE('UPDATE ADS_KEY_VALUE_OBJECTS SET MODULE_KEY = ''com.ads.mm.permission.rqm'', OBJECT_PARENT_TYPE = ''REQM_SPECIFICATION_TEMPLATE'', OBJECT_PARENT_COLUMN_ID = ''SPEC_TEMPLATE_ID'', OBJECT_LEVEL = 2 WHERE OBJECT_TYPE = ''REQM_ARTIFACT''');
		EXECUTE('UPDATE ADS_KEY_VALUE_OBJECTS SET MODULE_KEY = ''com.ads.mm.permission.rqm'', OBJECT_PARENT_TYPE = ''REQM_SPECIFICATION'', OBJECT_PARENT_COLUMN_ID = ''SPEC_ID'', OBJECT_LEVEL = 4 WHERE OBJECT_TYPE = ''REQM_SPECIFICATION_ARTIFACT''');
		EXECUTE('UPDATE ADS_KEY_VALUE_OBJECTS SET MODULE_KEY = ''com.ads.mm.permission.mm'', OBJECT_LEVEL = 1 WHERE OBJECT_TYPE = ''MM_GRAPHICAL_PROPERTIES''');
		EXECUTE('UPDATE ADS_KEY_VALUE_OBJECTS SET MODULE_KEY = ''com.ads.mm.permission.rpm'', OBJECT_PARENT_TYPE = ''REPM_CATEGORY'', OBJECT_PARENT_COLUMN_ID = ''CATEGORY_ID'', OBJECT_LEVEL = 2 WHERE OBJECT_TYPE = ''REPM_REPORT''');
		EXECUTE('UPDATE ADS_KEY_VALUE_OBJECTS SET MODULE_KEY = ''com.ads.mm.permission.rpm'', OBJECT_PARENT_TYPE = ''REPM_CATEGORY'', OBJECT_PARENT_COLUMN_ID = ''CATEGORY_ID'', OBJECT_LEVEL = 2 WHERE OBJECT_TYPE = ''REPM_CHART''');
		EXECUTE('UPDATE ADS_KEY_VALUE_OBJECTS SET MODULE_KEY = ''com.ads.mm.permission.generic'', OBJECT_LEVEL = 1 WHERE OBJECT_TYPE = ''ADS_USER''');
		EXECUTE('UPDATE ADS_KEY_VALUE_OBJECTS SET MODULE_KEY = ''com.ads.mm.permission.generic'', OBJECT_LEVEL = 1 WHERE OBJECT_TYPE = ''ADS_PROFILE''');
		EXECUTE('UPDATE ADS_KEY_VALUE_OBJECTS SET MODULE_KEY = ''com.ads.mm.permission.rpm'', OBJECT_LEVEL = 1 WHERE OBJECT_TYPE = ''REPM_CATEGORY''');
		EXECUTE('UPDATE ADS_KEY_VALUE_OBJECTS SET MODULE_KEY = ''com.ads.mm.permission.rpm'', OBJECT_PARENT_TYPE = ''REPM_CATEGORY'', OBJECT_PARENT_COLUMN_ID = ''CATEGORY_ID'', OBJECT_LEVEL = 2 WHERE OBJECT_TYPE = ''REPM_DASHBOARD''');
		EXECUTE('UPDATE ADS_KEY_VALUE_OBJECTS SET MODULE_KEY = ''com.ads.mm.permission.bgm'', OBJECT_LEVEL = 1 WHERE OBJECT_TYPE = ''BGM_CATEGORY''');
		EXECUTE('UPDATE ADS_KEY_VALUE_OBJECTS SET MODULE_KEY = ''com.ads.mm.permission.bgm'', OBJECT_LEVEL = 2 WHERE OBJECT_TYPE = ''BGM_TERM''');
		EXECUTE('UPDATE ADS_KEY_VALUE_OBJECTS SET MODULE_KEY = ''com.ads.mm.permission.sm'', OBJECT_LEVEL = 1 WHERE OBJECT_TYPE = ''SM_DATABASE_OPTIONS''');
		EXECUTE('UPDATE ADS_KEY_VALUE_OBJECTS SET MODULE_KEY = ''com.ads.mm.permission.rqm'', OBJECT_LEVEL = 1 WHERE OBJECT_TYPE = ''REQM_EMAIL_TEMPLATE''');
		EXECUTE('UPDATE ADS_KEY_VALUE_OBJECTS SET MODULE_KEY = ''com.ads.mm.permission.generic'', OBJECT_LEVEL = 1 WHERE OBJECT_TYPE = ''ADS_MAIL_CMD''');
		EXECUTE('UPDATE ADS_KEY_VALUE_OBJECTS SET MODULE_KEY = ''com.ads.mm.permission.tm'', OBJECT_LEVEL = 1 WHERE OBJECT_TYPE = ''TESTCASE_PLAN''');
		EXECUTE('UPDATE ADS_KEY_VALUE_OBJECTS SET MODULE_KEY = ''com.ads.mm.permission.cat'', OBJECT_LEVEL = 1 WHERE OBJECT_TYPE = ''CAT''');
		EXECUTE('UPDATE ADS_KEY_VALUE_OBJECTS SET MODULE_KEY = ''com.ads.mm.permission.cat'', OBJECT_LEVEL = 1 WHERE OBJECT_TYPE = ''CATFX_WORKFLOW''');
		EXECUTE('UPDATE ADS_KEY_VALUE_OBJECTS SET MODULE_KEY = ''com.ads.mm.permission.bgm'', OBJECT_LEVEL = 2, OBJECT_PARENT_TYPE = ''BGM_CATEGORY'', OBJECT_PARENT_COLUMN_ID = ''CATEGORY_ID'' WHERE OBJECT_TYPE = ''BGM_RULE''');
		EXECUTE('UPDATE ADS_KEY_VALUE_OBJECTS SET MODULE_KEY = ''com.ads.mm.permission.bgm'', OBJECT_LEVEL = 2, OBJECT_PARENT_TYPE = ''BGM_CATEGORY'', OBJECT_PARENT_COLUMN_ID = ''CATEGORY_ID'' WHERE OBJECT_TYPE = ''BGM_POLICY''');
		EXECUTE('UPDATE ADS_KEY_VALUE_OBJECTS SET MODULE_KEY = ''com.ads.mm.permission.generic'', OBJECT_LEVEL = 1 WHERE OBJECT_TYPE = ''TAG''');
		EXECUTE('UPDATE ADS_KEY_VALUE_OBJECTS SET MODULE_KEY = ''com.ads.mm.permission.bgm'', OBJECT_LEVEL = 1 WHERE OBJECT_TYPE = ''BGM_STEWARDSHIP_GOALS''');
		EXECUTE('UPDATE ADS_KEY_VALUE_OBJECTS SET MODULE_KEY = ''com.ads.mm.permission.csm'', OBJECT_LEVEL = 1 WHERE OBJECT_TYPE = ''CSM_CODE_VALUE''');
		EXECUTE('UPDATE ADS_KEY_VALUE_OBJECTS SET MODULE_KEY = ''com.ads.mm.permission.sm'', OBJECT_LEVEL = 1 WHERE OBJECT_TYPE = ''SM_INDEX''');
		EXECUTE('UPDATE ADS_KEY_VALUE_OBJECTS SET MODULE_KEY = ''com.ads.mm.permission.bgm'', OBJECT_LEVEL = 1 WHERE OBJECT_TYPE = ''BGM_TERM_CATALOG''');
		EXECUTE('UPDATE ADS_KEY_VALUE_OBJECTS SET MODULE_KEY = ''com.ads.mm.permission.bgm'', OBJECT_LEVEL = 1 WHERE OBJECT_TYPE = ''BGM_POLICY_CATALOG''');
		EXECUTE('UPDATE ADS_KEY_VALUE_OBJECTS SET MODULE_KEY = ''com.ads.mm.permission.bgm'', OBJECT_LEVEL = 1 WHERE OBJECT_TYPE = ''BGM_RULE_CATALOG''');
		EXECUTE('UPDATE ADS_KEY_VALUE_OBJECTS SET MODULE_KEY = ''com.ads.mm.permission.generic'', OBJECT_LEVEL = 1 WHERE OBJECT_TYPE = ''AMM_LICENSE''');
		EXECUTE('UPDATE ADS_KEY_VALUE_OBJECTS SET MODULE_KEY = ''com.ads.mm.permission.generic'', OBJECT_LEVEL = 1 WHERE OBJECT_TYPE = ''FORM''');
		EXECUTE('UPDATE ADS_KEY_VALUE_OBJECTS SET MODULE_KEY = ''com.ads.mm.permission.workflow'', OBJECT_LEVEL = 1 WHERE OBJECT_TYPE = ''ADS_WORKFLOW_STAGE''');
		EXECUTE('UPDATE ADS_KEY_VALUE_OBJECTS SET MODULE_KEY = ''com.ads.mm.permission.workflow'', OBJECT_LEVEL = 1 WHERE OBJECT_TYPE = ''ADS_WORKFLOW_FOLDER''');
		EXECUTE('UPDATE ADS_KEY_VALUE_OBJECTS SET MODULE_KEY = ''com.ads.mm.permission.workflow'', OBJECT_PARENT_TYPE = ''ADS_WORKFLOW'', OBJECT_PARENT_COLUMN_ID = ''WF_ID'', OBJECT_LEVEL = 3 WHERE OBJECT_TYPE = ''ADS_WORKFLOW_ASSIGNMENT''');
		EXECUTE('UPDATE ADS_KEY_VALUE_OBJECTS SET MODULE_KEY = ''com.ads.mm.permission.workflow'', OBJECT_PARENT_TYPE = ''ADS_WORKFLOW_FOLDER'', OBJECT_PARENT_COLUMN_ID = ''WFF_ID'', OBJECT_LEVEL = 2 WHERE OBJECT_TYPE = ''ADS_WORKFLOW''');
	END
GO

IF COL_LENGTH('ADS_KEY_VALUE', 'VALUE_OBJECT_REF') IS NULL
BEGIN
    EXECUTE('ALTER TABLE ADS_KEY_VALUE ADD VALUE_OBJECT_REF INT NULL');
    EXECUTE('ALTER TABLE ADS_KEY_VALUE ADD [CREATED_BY] [varchar](20) NULL');
    EXECUTE('ALTER TABLE ADS_KEY_VALUE ADD [CREATED_DATE_TIME] [datetime] NULL');
    EXECUTE('ALTER TABLE ADS_KEY_VALUE ADD [LAST_MODIFIED_BY] [varchar](20) NULL');
    EXECUTE('ALTER TABLE ADS_KEY_VALUE ADD [LAST_MODIFIED_DATE_TIME] [datetime] NULL');
END
GO
IF COL_LENGTH('ADS_KEY_VALUE', 'DESCRIPTION') IS NULL
BEGIN
    EXECUTE('ALTER TABLE ADS_KEY_VALUE ADD [DESCRIPTION] [varchar](max) NULL');
END
GO
IF COL_LENGTH('ADS_KEY_VALUE', 'IS_FORM_PROPERTY') IS NULL
BEGIN
    EXECUTE('ALTER TABLE ADS_KEY_VALUE ADD [IS_FORM_PROPERTY] TINYINT NULL DEFAULT 0');
    EXECUTE('ALTER TABLE ADS_KEY_VALUE ADD [IS_GRID_PROPERTY] TINYINT NULL DEFAULT 0');
    EXECUTE('ALTER TABLE ADS_KEY_VALUE ADD [IS_PIVOTABLE] TINYINT NULL DEFAULT 0');
    EXECUTE('UPDATE ADS_KEY_VALUE SET IS_FORM_PROPERTY = 0');
    EXECUTE('UPDATE ADS_KEY_VALUE SET IS_GRID_PROPERTY = 0');
    EXECUTE('UPDATE ADS_KEY_VALUE SET IS_PIVOTABLE = 0');
END
GO
GO
IF EXISTS (SELECT * FROM ADS_MM_VERSION WHERE VALUE < '9.4')
    BEGIN
    EXECUTE('UPDATE ADS_KEY_VALUE SET ISPUBLISHED = ''1'' WHERE OBJECT_TYPE_ID <> (SELECT OBJECT_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE = ''MT_DEFINITION'')');
    END
GO
IF COL_LENGTH('ADS_KEY_VALUE_OBJECTS', 'SYSTEM_BASED') IS NULL
BEGIN
   EXECUTE ('ALTER TABLE ADS_KEY_VALUE_OBJECTS ADD SYSTEM_BASED BIT DEFAULT 0 NOT NULL');
   EXECUTE ('UPDATE ADS_KEY_VALUE_OBJECTS SET SYSTEM_BASED = 1');
END
GO
IF NOT EXISTS (SELECT * FROM ADS_KEY_VALUE_OBJECTS WHERE  OBJECT_TYPE = 'RDM_OBJECT_VALUE')
    BEGIN
	INSERT INTO ADS_KEY_VALUE_OBJECTS (OBJECT_TYPE,OBJECT_TABLE,OBJECT_TABLE_COLUMN,OBJECT_PARENT_TYPE,OBJECT_PARENT_COLUMN_ID,OBJECT_LEVEL,MODULE_KEY)
        SELECT 'RDM_OBJECT_VALUE','RDM_REF_TAB_COL_VALUES','RDM_REF_TAB_COL_VALUE','','',3,'com.ads.mm.permission.rdm'
    END
GO
IF(OBJECTPROPERTY(OBJECT_ID('FN_GET_ADS_KEY_VALUE'), 'ISTABLEFUNCTION') = 1)
    BEGIN
        DROP FUNCTION FN_GET_ADS_KEY_VALUE;
END;
GO
CREATE FUNCTION FN_GET_ADS_KEY_VALUE
(@OBJECT_ID                   BIGINT,
 @OBJECT_TYPE_ID              BIGINT,
 @CHILD_CONFIG_OBJECT_TYPE_ID BIGINT
)
RETURNS @TEMPTABLE TABLE
(ROW_ID                  BIGINT IDENTITY(1, 1) NOT NULL,
 KV_ID                   BIGINT,
 KEY_NAME                VARCHAR(max),
 KEY_VALUE               VARCHAR(max),
 OBJECT_TYPE_ID          BIGINT,
 OBJECT_ID               VARCHAR(200),
 DATATYPE_ID             BIGINT,
 KV_TYPE                 VARCHAR(50),
 LABEL_WIDTH             VARCHAR(50),
 CONTROL_WIDTH           VARCHAR(50),
 KV_ORDER                VARCHAR(50),
 COMPONENT               NVARCHAR(MAX),
 DEFAULTVALUE            VARCHAR(MAX),
 ISPUBLISHED             INT,
 ISSYSTEMBASED           INT,
 DISPLAY_POLICY          INT,
 REGEX                   VARCHAR(100),
 MANDATORY               TINYINT,
 ENABLED                 TINYINT,
 FIELD_LENGTH            INT,
 PROCESSING_ORDER        INT,
 VISIBLE                 TINYINT,
 LOAD_ON_STARTUP         TINYINT,
 VALUE_OBJECT_REF        INT,
 CREATED_BY              VARCHAR(20),
 CREATED_DATE_TIME       DATETIME,
 LAST_MODIFIED_BY        VARCHAR(20),
 LAST_MODIFIED_DATE_TIME DATETIME,
 DESCRIPTION             VARCHAR(MAX),
  IS_FORM_PROPERTY        TINYINT,
 IS_GRID_PROPERTY        TINYINT,
 IS_PIVOTABLE            TINYINT,
 P_KV_ID                 BIGINT,
 OBJECT_LEVEL            INT,
 IS_KEY_FROM_PARENT      TINYINT,
 IS_KEY_FROM_CHILD       TINYINT
)
AS
     BEGIN
          IF @OBJECT_ID<-1 OR  @OBJECT_TYPE_ID<-1 OR  @CHILD_CONFIG_OBJECT_TYPE_ID <-1
            RETURN;
         DECLARE @SYSTEM_BASED BIT;
         DECLARE @TEMP_OBJECT_ID BIGINT;
         DECLARE @TEMP_OBJECT_TYPE_ID BIGINT;
         DECLARE @TEMP_OBJECT_TYPE VARCHAR(max);
         DECLARE @CHILD_CONFIG_OBJECT_TYPE VARCHAR(max);
         DECLARE @KEY_VALUE_OBJECT_TYPE_ID BIGINT;
         DECLARE @KEY_VALUE_OBJECT_TYPE VARCHAR(max);
         DECLARE @OBJECT_MODULE_ID VARCHAR(512);
         DECLARE @OBJECT_LEVEL VARCHAR(512);
         DECLARE @TBL_REF_COUNT INT= 0;
         DECLARE @TBL_REF_IND INT= 0;
         DECLARE @CURRENT_TABLE_NAME VARCHAR(MAX);
         DECLARE @CURRENT_PARENT_COLUMN_NAME VARCHAR(MAX);
         DECLARE @CURRENT_COLUMN_NAME VARCHAR(MAX);
         DECLARE @PREVIOUS_OBJECT_ID BIGINT;
         DECLARE @CURRENT_OBJECT_ID VARCHAR(MAX);
         DECLARE @CURRENT_OBJECT_TYPE_ID VARCHAR(MAX);
         DECLARE @CURRENT_OBJECT_TYPE VARCHAR(MAX);
         DECLARE @CURRENT_OBJECT_PARENT_TYPE VARCHAR(max);
         DECLARE @CURRENT_OBJECT_LEVEL INT;
         DECLARE @PREVIOUS_OBJECT_LEVEL INT;
         DECLARE @PARENT_OBJECT_TYPE_ID VARCHAR(MAX);
         DECLARE @PARENT_OBJECT_ID VARCHAR(MAX);
         DECLARE @OBJECT_KEY_ID BIGINT;
         DECLARE @OBJECT_KEY VARCHAR(max);
         DECLARE @MAP_ID BIGINT;
         DECLARE @SUBJECT_ID BIGINT;
         DECLARE @PROJECT_ID BIGINT;
         DECLARE @STCM_ID BIGINT;
         DECLARE @STM_ID BIGINT;
         DECLARE @SCE_DATABASE_TYPE VARCHAR(64);
         DECLARE @SCE_ID BIGINT;
         DECLARE @SYSTEM_ID BIGINT;
		 DECLARE @OBJECT_PARENT_TYPE VARCHAR(MAX);
		 DECLARE @MASTER_TYPE_ID INT;
		 DECLARE @OBJECT_KEY_ID_TBL TABLE
		 (
		  KV_ID			BIGINT
		 );
         DECLARE @TT_OBJECT_PARENT_TBL_REF TABLE
         (OBJECT_TYPE_ID          BIGINT,
          OBJECT_TYPE             VARCHAR(max),
          OBJECT_TABLE            VARCHAR(512),
          OBJECT_TABLE_COLUMN     VARCHAR(512),
          OBJECT_PARENT_TYPE      VARCHAR(max),
          OBJECT_PARENT_COLUMN_ID VARCHAR(512),
          OBJECT_LEVEL            INT,
          OBJECT_REF_KEY          VARCHAR(max)
         );
         DECLARE @TT_OBJECT_PARENT_IDS TABLE
         (OBJECT_ID   BIGINT,
          OBJECT_TYPE VARCHAR(max)
         );
         DECLARE @TT_OBJECT_PARENT_DETAILS TABLE
         (OBJECT_ID      BIGINT,
          OBJECT_TYPE_ID BIGINT,
          OBJECT_TYPE    VARCHAR(max),
          OBJECT_REF_KEY VARCHAR(max),
          OBJECT_LEVEL   INT
         );
         DECLARE @TT_ADS_KEY_VALUE_H TABLE
         (KV_ID                   BIGINT,
          KEY_NAME                VARCHAR(max),
          KEY_VALUE               VARCHAR(max),
          OBJECT_TYPE_ID          BIGINT,
          OBJECT_ID               VARCHAR(200),
          DATATYPE_ID             BIGINT,
          KV_TYPE                 VARCHAR(50),
          LABEL_WIDTH             VARCHAR(50),
          CONTROL_WIDTH           VARCHAR(50),
          KV_ORDER                VARCHAR(50),
          COMPONENT               NVARCHAR(MAX),
          DEFAULTVALUE            VARCHAR(MAX),
          ISPUBLISHED             INT,
          ISSYSTEMBASED           INT,
          DISPLAY_POLICY          INT,
          REGEX                   VARCHAR(100),
          MANDATORY               TINYINT,
          ENABLED                 TINYINT,
          FIELD_LENGTH            INT,
          PROCESSING_ORDER        INT,
          VISIBLE                 TINYINT,
          LOAD_ON_STARTUP         TINYINT,
          VALUE_OBJECT_REF        INT,
          CREATED_BY              VARCHAR(20),
          CREATED_DATE_TIME       DATETIME,
          LAST_MODIFIED_BY        VARCHAR(20),
          LAST_MODIFIED_DATE_TIME DATETIME,
          DESCRIPTION             VARCHAR(MAX),
	  IS_FORM_PROPERTY        TINYINT,
          IS_GRID_PROPERTY        TINYINT,
          IS_PIVOTABLE            TINYINT,
          P_KV_ID                 BIGINT,
          OBJECT_LEVEL            INT,
          IS_KEY_FROM_PARENT      TINYINT,
          IS_KEY_FROM_CHILD       TINYINT
         );
         DECLARE @TT_ADS_KEY_VALUE TABLE
         (KV_ID                   BIGINT,
          KEY_NAME                VARCHAR(max),
          KEY_VALUE               VARCHAR(max),
          OBJECT_TYPE_ID          BIGINT,
          OBJECT_ID               VARCHAR(200),
          DATATYPE_ID             BIGINT,
          KV_TYPE                 VARCHAR(50),
          LABEL_WIDTH             VARCHAR(50),
          CONTROL_WIDTH           VARCHAR(50),
          KV_ORDER                VARCHAR(50),
          COMPONENT               NVARCHAR(MAX),
          DEFAULTVALUE            VARCHAR(MAX),
          ISPUBLISHED             INT,
          ISSYSTEMBASED           INT,
          DISPLAY_POLICY          INT,
          REGEX                   VARCHAR(100),
          MANDATORY               TINYINT,
          ENABLED                 TINYINT,
          FIELD_LENGTH            INT,
          PROCESSING_ORDER        INT,
          VISIBLE                 TINYINT,
          LOAD_ON_STARTUP         TINYINT,
          VALUE_OBJECT_REF        INT,
          CREATED_BY              VARCHAR(20),
          CREATED_DATE_TIME       DATETIME,
          LAST_MODIFIED_BY        VARCHAR(20),
          LAST_MODIFIED_DATE_TIME DATETIME,
          DESCRIPTION             VARCHAR(MAX),
	  IS_FORM_PROPERTY        TINYINT,
          IS_GRID_PROPERTY        TINYINT,
          IS_PIVOTABLE            TINYINT,
          P_KV_ID                 BIGINT,
          OBJECT_LEVEL            INT,
          IS_KEY_FROM_PARENT      TINYINT,
          IS_KEY_FROM_CHILD       TINYINT
         );
         SELECT @KEY_VALUE_OBJECT_TYPE_ID = OBJECT_TYPE_ID
         FROM ADS_KEY_VALUE_OBJECTS
         WHERE OBJECT_TYPE = 'ADS_KEY_VALUE';
         SELECT @CHILD_CONFIG_OBJECT_TYPE = OBJECT_TYPE
         FROM ADS_KEY_VALUE_OBJECTS
         WHERE OBJECT_TYPE_ID = @CHILD_CONFIG_OBJECT_TYPE_ID;
         SELECT @KEY_VALUE_OBJECT_TYPE = OBJECT_TYPE,
                @OBJECT_MODULE_ID = MODULE_KEY,
                @OBJECT_LEVEL = OBJECT_LEVEL,
				@OBJECT_PARENT_TYPE = OBJECT_PARENT_TYPE
         FROM ADS_KEY_VALUE_OBJECTS
         WHERE OBJECT_TYPE_ID = @OBJECT_TYPE_ID;

		 IF @OBJECT_PARENT_TYPE = 'RELATIONSHIP_MASTER' BEGIN
			SELECT @MASTER_TYPE_ID = OBJECT_TYPE_ID
			FROM ADS_KEY_VALUE_OBJECTS
			WHERE OBJECT_TYPE = @OBJECT_PARENT_TYPE;
		END;

        SELECT @SYSTEM_BASED = SYSTEM_BASED FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE_ID = @OBJECT_TYPE_ID;
         SET @TEMP_OBJECT_ID = @OBJECT_ID;
         SET @TEMP_OBJECT_TYPE_ID = @OBJECT_TYPE_ID;
         SET @TEMP_OBJECT_TYPE = @KEY_VALUE_OBJECT_TYPE;
         IF @CHILD_CONFIG_OBJECT_TYPE_ID IS NOT NULL
            AND @CHILD_CONFIG_OBJECT_TYPE_ID > 0
             BEGIN
                SET @TEMP_OBJECT_ID = ISNULL((SELECT KV_ID
					FROM ADS_KEY_VALUE
					WHERE OBJECT_ID = @OBJECT_ID
						AND OBJECT_TYPE_ID = @OBJECT_TYPE_ID
						AND KEY_NAME = @KEY_VALUE_OBJECT_TYPE + '#' + @CHILD_CONFIG_OBJECT_TYPE), -1);
                SET @TEMP_OBJECT_TYPE_ID = @KEY_VALUE_OBJECT_TYPE_ID;
                SET @TEMP_OBJECT_TYPE = @CHILD_CONFIG_OBJECT_TYPE;
         END;
         WITH PARENTS
              AS (SELECT *
                  FROM ADS_KEY_VALUE_OBJECTS
                  WHERE OBJECT_TYPE = @KEY_VALUE_OBJECT_TYPE
                  UNION ALL
                  SELECT ADS_KEY_VALUE_OBJECTS.*
                  FROM ADS_KEY_VALUE_OBJECTS
                       JOIN PARENTS ON ADS_KEY_VALUE_OBJECTS.OBJECT_TYPE = PARENTS.OBJECT_PARENT_TYPE)
              INSERT INTO @TT_OBJECT_PARENT_TBL_REF
                     SELECT P.OBJECT_TYPE_ID,
                            P.OBJECT_TYPE,
                            P.OBJECT_TABLE,
                            P.OBJECT_TABLE_COLUMN,
                            P.OBJECT_PARENT_TYPE,
                            P.OBJECT_PARENT_COLUMN_ID,
                            P.OBJECT_LEVEL,
                            P.OBJECT_TYPE + '#' + @TEMP_OBJECT_TYPE OBJECT_REF_KEY
                     FROM PARENTS P;
         SELECT @TBL_REF_COUNT =
         (
             SELECT @@ROWCOUNT
         );
         SET @TBL_REF_IND = 1;
         SET @PREVIOUS_OBJECT_ID = @OBJECT_ID;
         WHILE(@TBL_REF_IND <= @TBL_REF_COUNT)
             BEGIN
                 SELECT @CURRENT_TABLE_NAME = OBJECT_TABLE,
                        @CURRENT_PARENT_COLUMN_NAME = OBJECT_PARENT_COLUMN_ID,
                        @CURRENT_OBJECT_TYPE_ID = OBJECT_TYPE_ID,
                        @CURRENT_COLUMN_NAME = OBJECT_TABLE_COLUMN,
                        @CURRENT_OBJECT_LEVEL = OBJECT_LEVEL,
                        @CURRENT_OBJECT_TYPE = OBJECT_TYPE,
                        @CURRENT_OBJECT_PARENT_TYPE = OBJECT_PARENT_TYPE
                 FROM
                 (
                     SELECT ROW_NUMBER() OVER(ORDER BY OBJECT_LEVEL DESC) RN,
                            *
                     FROM @TT_OBJECT_PARENT_TBL_REF
                 ) TBL_REF
                 WHERE RN >= @TBL_REF_IND
                       AND RN <= @TBL_REF_IND;
                 IF @CURRENT_PARENT_COLUMN_NAME <> ''
                     BEGIN
                         IF @OBJECT_MODULE_ID = 'com.ads.mm.permission.mm'
                             BEGIN
                                 IF @CURRENT_OBJECT_TYPE = 'MM_MAPPING_ROW'
                                     BEGIN
                                         SELECT @MAP_ID = MAP_ID
                                         FROM MAPPING_SPECIFICATION
                                         WHERE MAP_SEQ_ID = @PREVIOUS_OBJECT_ID;
                                         SET @PREVIOUS_OBJECT_ID = @MAP_ID;
                                         INSERT INTO @TT_OBJECT_PARENT_IDS
                                         VALUES
                                         (@MAP_ID,
                                          @CURRENT_OBJECT_PARENT_TYPE
                                         );
                                 END;
                                     ELSE
                                     IF @CURRENT_OBJECT_TYPE = 'MM_MAPPING'
                                         BEGIN
                                             SELECT @SUBJECT_ID = SUBJECT_ID,
                                                    @PROJECT_ID = PROJECT_ID
                                             FROM MAPPING_DETAILS
                                             WHERE MAP_ID = @PREVIOUS_OBJECT_ID;
                                             SET @PREVIOUS_OBJECT_ID = @SUBJECT_ID;
                                             IF @SUBJECT_ID <> -1
                                                 BEGIN
                                                     INSERT INTO @TT_OBJECT_PARENT_IDS
                                                     VALUES
                                                     (@SUBJECT_ID,
                                                      @CURRENT_OBJECT_PARENT_TYPE
                                                     );
                                             END;
                                             INSERT INTO @TT_OBJECT_PARENT_IDS
                                             VALUES
                                             (@PROJECT_ID,
                                              'MM_PROJECT'
                                             );
                                     END;
                                         ELSE
                                         IF @CURRENT_OBJECT_TYPE = 'MM_SUBJECT'
                                            AND (@SUBJECT_ID <> -1
                                                 OR @CURRENT_OBJECT_TYPE_ID = @OBJECT_TYPE_ID)
                                             BEGIN
                                                 WITH object_hir_v
                                                      AS (SELECT SD.subject_id,
                                                                 SD.parent_subject_id
                                                          FROM subject_details SD
                                                          WHERE SUBJECT_ID = @PREVIOUS_OBJECT_ID
                                                          UNION ALL
                                                          SELECT T.subject_id,
                                                                 T.parent_subject_id
                                                          FROM subject_details AS T
                                                               JOIN object_hir_v cte ON T.subject_id = cte.parent_subject_id
                                                                                        AND cte.PARENT_SUBJECT_ID <> T.PARENT_SUBJECT_ID)
                                                      INSERT INTO @TT_OBJECT_PARENT_IDS
                                                             SELECT SUBJECT_ID,
                                                                    @CURRENT_OBJECT_TYPE
                                                             FROM object_hir_v
                                                             WHERE SUBJECT_ID <> @PREVIOUS_OBJECT_ID;
                                                 IF @KEY_VALUE_OBJECT_TYPE = 'MM_SUBJECT'
                                                     BEGIN
                                                         INSERT INTO @TT_OBJECT_PARENT_IDS
                                                         VALUES
                                                         (
                                                         (
                                                             SELECT PROJECT_ID
                                                             FROM SUBJECT_DETAILS
                                                             WHERE SUBJECT_ID = @PREVIOUS_OBJECT_ID
                                                         ),
                                                         'MM_PROJECT'
                                                         );
                                                 END;
                                         END;;
                         END;
                             ELSE
                             IF @OBJECT_MODULE_ID = 'com.ads.mm.permission.sm'
                                 BEGIN
                                     IF @CURRENT_OBJECT_TYPE = 'SM_COLUMN'
                                         BEGIN
                                             SELECT @STM_ID = STM_ID
                                             FROM SYSTEM_TABLE_COLUMNS_METADATA
                                             WHERE STCM_ID = @PREVIOUS_OBJECT_ID;
                                             SET @PREVIOUS_OBJECT_ID = @STM_ID;
                                             INSERT INTO @TT_OBJECT_PARENT_IDS
                                             VALUES
                                             (@STM_ID,
                                              @CURRENT_OBJECT_PARENT_TYPE
                                             );
                                     END;
                                         ELSE
                                         IF @CURRENT_OBJECT_TYPE = 'SM_TABLE'
                                             BEGIN
                                                 SELECT @SCE_ID = SCE_ID
                                                 FROM SYSTEM_TABLE_METADATA
                                                 WHERE STM_ID = @PREVIOUS_OBJECT_ID;
                                                 SELECT @SCE_DATABASE_TYPE = DATABASE_TYPE
                                                 FROM SYS_CON_ENVIRONMENTS
                                                 WHERE SCE_ID = @SCE_ID;
                                                 SET @PREVIOUS_OBJECT_ID = @SCE_ID;
                                                 INSERT INTO @TT_OBJECT_PARENT_IDS
                                                 VALUES
                                                 (@SCE_ID,
                                                  @CURRENT_OBJECT_PARENT_TYPE
                                                 );
                                         END;
                                             ELSE
                                             IF @CURRENT_OBJECT_TYPE = 'SM_ENVIRONMENT'
                                                 BEGIN
                                                     SELECT @SYSTEM_ID = SYSTEM_ID
                                                     FROM SYS_CON_ENVIRONMENTS
                                                     WHERE SCE_ID = @PREVIOUS_OBJECT_ID;
                                                     SET @PREVIOUS_OBJECT_ID = @SYSTEM_ID;
                                                     INSERT INTO @TT_OBJECT_PARENT_IDS
                                                     VALUES
                                                     (@SYSTEM_ID,
                                                      @CURRENT_OBJECT_PARENT_TYPE
                                                     );
                                             END;
                                                 ELSE
                                                 IF @CURRENT_OBJECT_TYPE = 'SM_SYSTEM'
                                                     BEGIN
                                                         INSERT INTO @TT_OBJECT_PARENT_IDS
                                                         VALUES
                                                         (-1,
                                                          @CURRENT_OBJECT_PARENT_TYPE
                                                         );
                                                 END;;;
                             END;
                 END;
                 SET @TBL_REF_IND = @TBL_REF_IND + 1;
             END;

         INSERT INTO @TT_OBJECT_PARENT_DETAILS
                SELECT PARENT_IDS.OBJECT_ID,
                       TBL_REF.OBJECT_TYPE_ID,
                       TBL_REF.OBJECT_TYPE,
                       TBL_REF.OBJECT_REF_KEY,
                       TBL_REF.OBJECT_LEVEL
                FROM @TT_OBJECT_PARENT_TBL_REF TBL_REF
                     JOIN @TT_OBJECT_PARENT_IDS PARENT_IDS ON TBL_REF.OBJECT_TYPE = PARENT_IDS.OBJECT_TYPE;

		 IF @OBJECT_MODULE_ID = 'com.ads.mm.permission.bgm' AND NOT EXISTS (SELECT * FROM @TT_OBJECT_PARENT_DETAILS) AND @OBJECT_ID <> -1 BEGIN
			INSERT INTO @TT_OBJECT_PARENT_DETAILS
			SELECT PARENT_IDS.OBJECT_ID,
					TBL_REF.OBJECT_TYPE_ID,
					TBL_REF.OBJECT_TYPE,
					TBL_REF.OBJECT_REF_KEY,
					TBL_REF.OBJECT_LEVEL
			FROM @TT_OBJECT_PARENT_TBL_REF TBL_REF
					JOIN (SELECT -1 OBJECT_ID, OBJECT_TYPE FROM @TT_OBJECT_PARENT_TBL_REF WHERE OBJECT_LEVEL = 0) AS PARENT_IDS ON TBL_REF.OBJECT_TYPE = PARENT_IDS.OBJECT_TYPE;
		 END;

		 IF @OBJECT_MODULE_ID = 'com.ads.mm.permission.generic.relationship' AND @OBJECT_ID <> -1 BEGIN
			INSERT INTO @TT_OBJECT_PARENT_DETAILS
			SELECT (SELECT rd.RM_ID FROM ADS_ASSOCIATIONS assc, RELATIONSHIP_DETAILS rd WHERE assc.ID = @OBJECT_ID AND assc.RELATIONSHIP_DETAIL_ID = rd.RD_ID) OBJECT_ID,
								TBL_REF.OBJECT_TYPE_ID,
								TBL_REF.OBJECT_TYPE,
								TBL_REF.OBJECT_REF_KEY,
								TBL_REF.OBJECT_LEVEL
						FROM @TT_OBJECT_PARENT_TBL_REF TBL_REF
						WHERE OBJECT_LEVEL = 0
		 END;

		IF @KEY_VALUE_OBJECT_TYPE = 'RELATIONSHIP_MASTER' BEGIN
			INSERT INTO @TT_ADS_KEY_VALUE
				SELECT *,
					NULL AS P_KV_ID,
					-1 AS OBJECT_LEVEL,
					0 IS_KEY_FROM_PARENT,
					0 IS_KEY_FROM_CHILD
				FROM ADS_KEY_VALUE
				WHERE OBJECT_TYPE_ID = @TEMP_OBJECT_TYPE_ID
					AND OBJECT_ID = @TEMP_OBJECT_ID;
		END;
		ELSE
		BEGIN
			WITH OBJECT_CHILDS
				AS (SELECT OBJECT_TYPE
					FROM ADS_KEY_VALUE_OBJECTS
					WHERE OBJECT_TYPE = @KEY_VALUE_OBJECT_TYPE
					UNION ALL
					SELECT ADS_KEY_VALUE_OBJECTS.OBJECT_TYPE
					FROM ADS_KEY_VALUE_OBJECTS
						JOIN OBJECT_CHILDS ON ADS_KEY_VALUE_OBJECTS.OBJECT_PARENT_TYPE = OBJECT_CHILDS.OBJECT_TYPE)
				INSERT INTO @TT_ADS_KEY_VALUE
						SELECT *,
							NULL AS P_KV_ID,
							-1 AS OBJECT_LEVEL,
							0 IS_KEY_FROM_PARENT,
							1 IS_KEY_FROM_CHILD
						FROM ADS_KEY_VALUE
						WHERE OBJECT_TYPE_ID = @TEMP_OBJECT_TYPE_ID
							AND OBJECT_ID = @TEMP_OBJECT_ID
							AND KEY_NAME NOT IN
						(
							SELECT @KEY_VALUE_OBJECT_TYPE + '#' + OBJECT_TYPE
							FROM OBJECT_CHILDS
						);
		END;

	IF @KEY_VALUE_OBJECT_TYPE = 'RELATIONSHIP_DETAILS' BEGIN
		IF
         (
             SELECT COUNT(*)
             FROM @TT_OBJECT_PARENT_DETAILS
         ) > 0
             BEGIN
                 SELECT TOP 1 @CURRENT_OBJECT_ID = OBJECT_ID,
                              @CURRENT_OBJECT_TYPE_ID = OBJECT_TYPE_ID,
                              @OBJECT_KEY = OBJECT_REF_KEY,
                              @CURRENT_OBJECT_LEVEL = OBJECT_LEVEL
                 FROM @TT_OBJECT_PARENT_DETAILS;

                 INSERT INTO @OBJECT_KEY_ID_TBL
                     SELECT KV_ID
                     FROM ADS_KEY_VALUE
                     WHERE OBJECT_TYPE_ID = @CURRENT_OBJECT_TYPE_ID
                           AND OBJECT_ID = @CURRENT_OBJECT_ID
                
                 WHILE
				 (
					 SELECT COUNT(*)
					 FROM @OBJECT_KEY_ID_TBL
				 ) > 0
                     BEGIN
						 SELECT TOP 1 @OBJECT_KEY_ID = KV_ID
						 FROM @OBJECT_KEY_ID_TBL;

                         DELETE FROM @TT_ADS_KEY_VALUE_H;
                         WITH GLOBALKVS
                              AS (SELECT *,
                                         KV_ID AS P_KV_ID,
                                         @CURRENT_OBJECT_LEVEL AS OBJECT_LEVEL,
                                         1 AS IS_KEY_FROM_PARENT,
                                         0 AS IS_KEY_FROM_CHILD
                                  FROM ADS_KEY_VALUE
                                  WHERE KV_ID = @OBJECT_KEY_ID),
                              LOCALKVS
                              AS (SELECT *
                                  FROM @TT_ADS_KEY_VALUE)
                              INSERT INTO @TT_ADS_KEY_VALUE_H
                                     SELECT LV.KV_ID,
                                            GV.KEY_NAME,
                                            LV.KEY_VALUE,
                                            GV.OBJECT_TYPE_ID,
                                            GV.OBJECT_ID,
                                            GV.DATATYPE_ID,
                                            GV.KV_TYPE,
                                            GV.LABEL_WIDTH,
                                            GV.CONTROL_WIDTH,
                                            GV.KV_ORDER,
                                            GV.COMPONENT,
                                            LV.DEFAULTVALUE,
                                            GV.ISPUBLISHED,
                                            GV.ISSYSTEMBASED,
                                            GV.DISPLAY_POLICY,
                                            GV.REGEX,
                                            GV.MANDATORY,
                                            GV.ENABLED,
                                            GV.FIELD_LENGTH,
                                            GV.PROCESSING_ORDER,
                                            GV.VISIBLE,
                                            GV.LOAD_ON_STARTUP,
                                            GV.VALUE_OBJECT_REF,
                                            GV.CREATED_BY,
                                            GV.CREATED_DATE_TIME,
                                            LV.LAST_MODIFIED_BY,
                                            LV.LAST_MODIFIED_DATE_TIME,
                                            GV.DESCRIPTION,
                                            LV.IS_FORM_PROPERTY,
                                            LV.IS_GRID_PROPERTY,
                                            LV.IS_PIVOTABLE,
                                            GV.KV_ID P_KV_ID,
                                            GV.OBJECT_LEVEL,
                                            1 IS_KEY_FROM_PARENT,
                                            LV.IS_KEY_FROM_CHILD
                                     FROM LOCALKVS LV
                                          JOIN GLOBALKVS GV ON LV.KEY_NAME = GV.KEY_NAME
                                     UNION
                                     SELECT LV.*
                                     FROM LOCALKVS LV
                                          LEFT JOIN GLOBALKVS GV ON LV.KEY_NAME = GV.KEY_NAME
                                     WHERE GV.KV_ID IS NULL
                                     UNION
                                     SELECT GV.*
                                     FROM GLOBALKVS GV
                                          LEFT JOIN LOCALKVS LV ON GV.KEY_NAME = LV.KEY_NAME
                                     WHERE LV.KV_ID IS NULL;
                         
						 DELETE FROM @TT_ADS_KEY_VALUE;
                         INSERT INTO @TT_ADS_KEY_VALUE
                                SELECT *
                                FROM @TT_ADS_KEY_VALUE_H;
								
                         DELETE FROM @TT_ADS_KEY_VALUE_H;
						 
						 
						 DELETE FROM @OBJECT_KEY_ID_TBL
							WHERE KV_ID = @OBJECT_KEY_ID;
                 END;
                 DELETE @TT_OBJECT_PARENT_DETAILS
                 WHERE OBJECT_TYPE_ID = @CURRENT_OBJECT_TYPE_ID;
             END;
		 INSERT INTO @TEMPTABLE
                SELECT *
                FROM @TT_ADS_KEY_VALUE
                WHERE OBJECT_LEVEL <> @OBJECT_LEVEL
                ORDER BY KEY_NAME;
         INSERT INTO @TEMPTABLE
                SELECT *
                FROM @TT_ADS_KEY_VALUE
                WHERE OBJECT_LEVEL = @OBJECT_LEVEL
                ORDER BY KEY_NAME;
         RETURN;
	  END;
	ELSE
	BEGIN
         WHILE
         (
             SELECT COUNT(*)
             FROM @TT_OBJECT_PARENT_DETAILS
         ) > 0
             BEGIN
                 SELECT TOP 1 @CURRENT_OBJECT_ID = OBJECT_ID,
                              @CURRENT_OBJECT_TYPE_ID = OBJECT_TYPE_ID,
                              @OBJECT_KEY = OBJECT_REF_KEY,
                              @CURRENT_OBJECT_LEVEL = OBJECT_LEVEL
                 FROM @TT_OBJECT_PARENT_DETAILS;
                 SET @OBJECT_KEY_ID =
                 (
                     SELECT KV_ID
                     FROM ADS_KEY_VALUE
                     WHERE KEY_NAME = @OBJECT_KEY
                           AND OBJECT_TYPE_ID = @CURRENT_OBJECT_TYPE_ID
                           AND OBJECT_ID = @CURRENT_OBJECT_ID
                           AND VISIBLE = 0
                 );
                 IF @OBJECT_KEY_ID <> ''
                     BEGIN
                         DELETE FROM @TT_ADS_KEY_VALUE_H;
                         WITH GLOBALKVS
                              AS (SELECT *,
                                         KV_ID AS P_KV_ID,
                                         @CURRENT_OBJECT_LEVEL AS OBJECT_LEVEL,
                                         1 AS IS_KEY_FROM_PARENT,
                                         0 AS IS_KEY_FROM_CHILD
                                  FROM ADS_KEY_VALUE
                                  WHERE OBJECT_TYPE_ID = @KEY_VALUE_OBJECT_TYPE_ID
                                        AND OBJECT_ID = @OBJECT_KEY_ID),
                              LOCALKVS
                              AS (SELECT *
                                  FROM @TT_ADS_KEY_VALUE)
                              INSERT INTO @TT_ADS_KEY_VALUE_H
                                     SELECT LV.KV_ID,
                                            GV.KEY_NAME,
                                            LV.KEY_VALUE,
                                            GV.OBJECT_TYPE_ID,
                                            GV.OBJECT_ID,
                                            GV.DATATYPE_ID,
                                            GV.KV_TYPE,
                                            GV.LABEL_WIDTH,
                                            GV.CONTROL_WIDTH,
                                            GV.KV_ORDER,
                                            GV.COMPONENT,
                                            LV.DEFAULTVALUE,
                                            GV.ISPUBLISHED,
                                            GV.ISSYSTEMBASED,
                                            GV.DISPLAY_POLICY,
                                            GV.REGEX,
                                            GV.MANDATORY,
                                            GV.ENABLED,
                                            GV.FIELD_LENGTH,
                                            GV.PROCESSING_ORDER,
                                            LV.VISIBLE,
                                            GV.LOAD_ON_STARTUP,
                                            GV.VALUE_OBJECT_REF,
                                            GV.CREATED_BY,
                                            GV.CREATED_DATE_TIME,
                                            LV.LAST_MODIFIED_BY,
                                            LV.LAST_MODIFIED_DATE_TIME,
                                            GV.DESCRIPTION,
                                            GV.IS_FORM_PROPERTY,
                                            GV.IS_GRID_PROPERTY,
                                            LV.IS_PIVOTABLE,
                                            GV.KV_ID P_KV_ID,
                                            GV.OBJECT_LEVEL,
                                            1 IS_KEY_FROM_PARENT,
                                            LV.IS_KEY_FROM_CHILD
                                     FROM LOCALKVS LV
                                          JOIN GLOBALKVS GV ON LV.KEY_NAME = GV.KEY_NAME
                                     UNION
                                     SELECT LV.*
                                     FROM LOCALKVS LV
                                          LEFT JOIN GLOBALKVS GV ON LV.KEY_NAME = GV.KEY_NAME
                                     WHERE GV.KV_ID IS NULL
                                     UNION
                                     SELECT GV.*
                                     FROM GLOBALKVS GV
                                          LEFT JOIN LOCALKVS LV ON GV.KEY_NAME = LV.KEY_NAME
                                     WHERE LV.KV_ID IS NULL;
                         DELETE FROM @TT_ADS_KEY_VALUE;
                         INSERT INTO @TT_ADS_KEY_VALUE
                                SELECT *
                                FROM @TT_ADS_KEY_VALUE_H;
                         DELETE FROM @TT_ADS_KEY_VALUE_H;
                 END;
                 DELETE @TT_OBJECT_PARENT_DETAILS
                 WHERE OBJECT_TYPE_ID = @CURRENT_OBJECT_TYPE_ID;
             END;
         INSERT INTO @TEMPTABLE
                SELECT *
                FROM @TT_ADS_KEY_VALUE
                WHERE OBJECT_LEVEL <> @OBJECT_LEVEL
                ORDER BY KEY_NAME;
         INSERT INTO @TEMPTABLE
                SELECT *
                FROM @TT_ADS_KEY_VALUE
                WHERE OBJECT_LEVEL = @OBJECT_LEVEL
                ORDER BY KEY_NAME;
         RETURN;
     END;
	 RETURN;
  END;
GO

IF COL_LENGTH('USERS', 'USER_PASSWORD')  <= 50
BEGIN
    EXECUTE('ALTER TABLE USERS ALTER COLUMN USER_PASSWORD VARCHAR(250) NOT NULL');
END
GO
IF NOT EXISTS(SELECT * FROM SYS.VIEWS WHERE NAME = 'ADS_WORKFLOW_NODE_V')
BEGIN
   EXEC ('CREATE VIEW [ADS_WORKFLOW_NODE_V]
	AS
	  SELECT * FROM ADS_WORKFLOW_NODE WHERE VALID = 1');
END
GO
IF NOT EXISTS (SELECT * FROM ADS_KEY_VALUE_OBJECTS WHERE  OBJECT_TYPE = 'RM_PROJECT')
    BEGIN
	INSERT INTO ADS_KEY_VALUE_OBJECTS (OBJECT_TYPE,OBJECT_TABLE,OBJECT_TABLE_COLUMN,OBJECT_PARENT_TYPE,OBJECT_PARENT_COLUMN_ID, MODULE_KEY,OBJECT_LEVEL)
        SELECT 'RM_PROJECT','RM_PROJECT','PROJECTID','','','com.ads.mm.permission.rm', 1
    END
GO
IF NOT EXISTS (SELECT * FROM ADS_KEY_VALUE_OBJECTS WHERE  OBJECT_TYPE = 'RM_RELEASE')
    BEGIN
	INSERT INTO ADS_KEY_VALUE_OBJECTS (OBJECT_TYPE,OBJECT_TABLE,OBJECT_TABLE_COLUMN,OBJECT_PARENT_TYPE,OBJECT_PARENT_COLUMN_ID, MODULE_KEY,OBJECT_LEVEL)
        SELECT 'RM_RELEASE','RM_RELEASE','RELEASEID','RM_PROJECT','PROJECTID','com.ads.mm.permission.rm', 2
    END
GO
IF NOT EXISTS (SELECT * FROM ADS_KEY_VALUE_OBJECTS WHERE  OBJECT_TYPE = 'RM_MIGRATION_DOCUMENT')
    BEGIN
	INSERT INTO ADS_KEY_VALUE_OBJECTS (OBJECT_TYPE,OBJECT_TABLE,OBJECT_TABLE_COLUMN,OBJECT_PARENT_TYPE,OBJECT_PARENT_COLUMN_ID, MODULE_KEY,OBJECT_LEVEL)
        SELECT 'RM_MIGRATION_DOCUMENT','RM_MIGRATIONDOCUMENT','MIGRATIONDOCUMENTID','','','com.ads.mm.permission.rm', 1
    END
GO
IF NOT EXISTS (SELECT * FROM ADS_KEY_VALUE_OBJECTS WHERE  OBJECT_TYPE = 'RM_HISTORY')
    BEGIN
	INSERT INTO ADS_KEY_VALUE_OBJECTS (OBJECT_TYPE,OBJECT_TABLE,OBJECT_TABLE_COLUMN,OBJECT_PARENT_TYPE,OBJECT_PARENT_COLUMN_ID, MODULE_KEY,OBJECT_LEVEL)
        SELECT 'RM_HISTORY','RM_HISTORY','HISTORYID','','','com.ads.mm.permission.rm', 1
    END
GO
IF NOT EXISTS (SELECT * FROM ADS_KEY_VALUE_OBJECTS WHERE  OBJECT_TYPE = 'RM_ENVIRONMENT')
    BEGIN
	INSERT INTO ADS_KEY_VALUE_OBJECTS (OBJECT_TYPE,OBJECT_TABLE,OBJECT_TABLE_COLUMN,OBJECT_PARENT_TYPE,OBJECT_PARENT_COLUMN_ID, MODULE_KEY,OBJECT_LEVEL)
        SELECT 'RM_ENVIRONMENT','RM_ENVIRONMENT','ENVIRONMENTID','',' ','com.ads.mm.permission.rm', 1
    END
GO
IF NOT EXISTS (SELECT * FROM ADS_KEY_VALUE_OBJECTS WHERE  OBJECT_TYPE = 'RM_MIGRATION_OBJECT')
    BEGIN
	INSERT INTO ADS_KEY_VALUE_OBJECTS (OBJECT_TYPE,OBJECT_TABLE,OBJECT_TABLE_COLUMN,OBJECT_PARENT_TYPE,OBJECT_PARENT_COLUMN_ID, MODULE_KEY,OBJECT_LEVEL)
        SELECT 'RM_MIGRATION_OBJECT','RM_MIGRATIONOBJECT','MIGRATIONOBJECTID','RM_RELEASE','RELEASEID','com.ads.mm.permission.rm', 3
    END
GO
IF NOT EXISTS (SELECT * FROM ADS_KEY_VALUE_OBJECTS WHERE  OBJECT_TYPE = 'RM_MIGRATION_STATUS')
    BEGIN
	INSERT INTO ADS_KEY_VALUE_OBJECTS (OBJECT_TYPE,OBJECT_TABLE,OBJECT_TABLE_COLUMN,OBJECT_PARENT_TYPE,OBJECT_PARENT_COLUMN_ID, MODULE_KEY,OBJECT_LEVEL)
        SELECT 'RM_MIGRATION_STATUS','RM_MIGRATIONSTATUS','MIGRATIONSTATUSID','','','com.ads.mm.permission.rm', 1
    END
GO
IF NOT EXISTS (SELECT * FROM ADS_KEY_VALUE_OBJECTS WHERE  OBJECT_TYPE = 'RM_SYSTEM_SETTINGS')
    BEGIN
	INSERT INTO ADS_KEY_VALUE_OBJECTS (OBJECT_TYPE,OBJECT_TABLE,OBJECT_TABLE_COLUMN,OBJECT_PARENT_TYPE,OBJECT_PARENT_COLUMN_ID, MODULE_KEY,OBJECT_LEVEL)
        SELECT 'RM_SYSTEM_SETTINGS','RM_SYSTEMSETTINGS','MIGRATIONSTATUSID','','','com.ads.mm.permission.rm', 1
    END
GO
IF NOT EXISTS (SELECT * FROM ADS_KEY_VALUE_OBJECTS WHERE  OBJECT_TYPE = 'RM_MIGRATION_OBJECT_TYPE')
    BEGIN
	INSERT INTO ADS_KEY_VALUE_OBJECTS (OBJECT_TYPE,OBJECT_TABLE,OBJECT_TABLE_COLUMN,OBJECT_PARENT_TYPE,OBJECT_PARENT_COLUMN_ID, MODULE_KEY,OBJECT_LEVEL)
        SELECT 'RM_MIGRATION_OBJECT_TYPE','RM_MIGRATIONOBJECTTYPE','MIGRATIONOBJECTTYPEID','','','com.ads.mm.permission.rm', 1
    END
GO
IF EXISTS (SELECT * FROM ADS_MM_VERSION WHERE VALUE < '8.3')
    BEGIN
		EXECUTE('UPDATE RM_HISTORY SET OBJECTTYPEID = (select OBJECT_TYPE_ID from ADS_KEY_VALUE_OBJECTS where OBJECT_TYPE = ''RM_SYSTEM_SETTINGS'') WHERE OBJECTTYPEID = 13 AND HISTORYTYPEID <> 6');
		EXECUTE('UPDATE RM_HISTORY SET OBJECTTYPEID = (select OBJECT_TYPE_ID from ADS_KEY_VALUE_OBJECTS where OBJECT_TYPE = ''RM_MIGRATION_STATUS'') WHERE OBJECTTYPEID = 12 AND HISTORYTYPEID <> 6');
		EXECUTE('UPDATE RM_HISTORY SET OBJECTTYPEID = (select OBJECT_TYPE_ID from ADS_KEY_VALUE_OBJECTS where OBJECT_TYPE = ''RM_HISTORY'') WHERE OBJECTTYPEID = 11 AND HISTORYTYPEID <> 6');
		EXECUTE('UPDATE RM_HISTORY SET OBJECTTYPEID = (select OBJECT_TYPE_ID from ADS_KEY_VALUE_OBJECTS where OBJECT_TYPE = ''RM_MIGRATION_OBJECT_TYPE'') WHERE OBJECTTYPEID = 9 AND HISTORYTYPEID <> 6');
		EXECUTE('UPDATE RM_HISTORY SET OBJECTTYPEID = (select OBJECT_TYPE_ID from ADS_KEY_VALUE_OBJECTS where OBJECT_TYPE = ''RM_ENVIRONMENT'') WHERE OBJECTTYPEID = 7 AND HISTORYTYPEID <> 6');
		EXECUTE('UPDATE RM_HISTORY SET OBJECTTYPEID = (select OBJECT_TYPE_ID from ADS_KEY_VALUE_OBJECTS where OBJECT_TYPE = ''RM_MIGRATION_OBJECT'') WHERE OBJECTTYPEID = 4 AND HISTORYTYPEID <> 6');
		EXECUTE('UPDATE RM_HISTORY SET OBJECTTYPEID = (select OBJECT_TYPE_ID from ADS_KEY_VALUE_OBJECTS where OBJECT_TYPE = ''RM_RELEASE'') WHERE OBJECTTYPEID = 3 AND HISTORYTYPEID <> 6');
		EXECUTE('UPDATE RM_HISTORY SET OBJECTTYPEID = (select OBJECT_TYPE_ID from ADS_KEY_VALUE_OBJECTS where OBJECT_TYPE = ''RM_PROJECT'') WHERE OBJECTTYPEID = 2 AND HISTORYTYPEID <> 6');
		EXECUTE('UPDATE RM_HISTORY SET OBJECTTYPEID = (select OBJECT_TYPE_ID from ADS_KEY_VALUE_OBJECTS where OBJECT_TYPE = ''RM_MIGRATION_DOCUMENT'') WHERE OBJECTTYPEID = 1 AND HISTORYTYPEID <> 6');
    END
GO
IF EXISTS (SELECT * FROM ADS_MM_VERSION WHERE VALUE < '8.3')
	IF COL_LENGTH('USERS', 'ISLDAP_USER') IS NOT NULL
	BEGIN
		UPDATE USERS SET ISLDAP_USER = 'D' WHERE ISLDAP_USER = 'N'
		UPDATE USERS SET ISLDAP_USER = 'L' WHERE ISLDAP_USER = 'Y'
	END
GO
IF EXISTS (SELECT * FROM ADS_MM_VERSION WHERE VALUE < '8.3')
	IF COL_LENGTH('USERS', 'EXTERNAL_USER') IS NULL
	BEGIN
		EXECUTE SYS.SP_RENAME @OBJNAME = N'[USERS].[ISLDAP_USER]', @NEWNAME = N'EXTERNAL_USER', @OBJTYPE = 'COLUMN'
	END
GO
IF NOT EXISTS(SELECT * FROM SYS.VIEWS WHERE NAME = 'ADS_WORKFLOW_ASSIGNMENT_V')
BEGIN
   EXEC ('CREATE VIEW [ADS_WORKFLOW_ASSIGNMENT_V]
	AS SELECT * FROM ADS_WORKFLOW_ASSIGNMENT WHERE VALID = 1');
END
GO
IF EXISTS (SELECT * FROM ADS_MM_VERSION WHERE VALUE < '8.3')
    BEGIN
        UPDATE ADS_PROFILES_DETAILS SET PROFILE_DETAILS_VALUE = PROFILE_DETAILS_VALUE + ',wfLogView' WHERE PROFILE_DETAILS_NAME = 'TABS_TO_DISPLAY' AND PROFILE_DETAILS_VALUE NOT LIKE '%wfLogView%';
    END
GO

IF NOT EXISTS (SELECT *
	       FROM   SYSOBJECTS
	       WHERE  ID = OBJECT_ID(N'AMM_MASTER_CONFIGURATION')
		      AND TYPE = 'U')
  BEGIN
      EXECUTE ('CREATE TABLE AMM_MASTER_CONFIGURATION (
        MC_ID BIGINT NOT NULL IDENTITY (1,1),
	OBJECT_ID BIGINT NOT NULL,
        OBJECT_TYPE_ID BIGINT NOT NULL,
        OPTIONS varchar(4000) NULL,
	CONSTRAINT PK_AMM_MASTER_CONFIG_MC_ID PRIMARY KEY(MC_ID))');
  END
GO

IF NOT EXISTS (SELECT *
	       FROM   SYSOBJECTS
	       WHERE  ID = OBJECT_ID(N'AMM_PROTOCOLS')
		      AND TYPE = 'U')
  BEGIN
      EXECUTE ('CREATE TABLE AMM_PROTOCOLS(
	PC_ID BIGINT NOT NULL IDENTITY(1,1),
	SHORT_NAME varchar(50) NOT NULL,
	LONG_NAME varchar(255) NOT NULL,
	DESCRIPTION varchar(255) NULL,
	HANDLER_PATH varchar(255) NOT NULL,
	CONSTRAINT PK_AMM_PROTOCOLS_PC_ID PRIMARY KEY(PC_ID),
        CONSTRAINT UK_AMM_PROTOCOLS_SHORT_NAME UNIQUE (SHORT_NAME))');
  END
GO
IF (SELECT COUNT(PC_ID) FROM AMM_PROTOCOLS) = 0
    BEGIN
      EXECUTE ('INSERT INTO AMM_PROTOCOLS([SHORT_NAME],[LONG_NAME],[DESCRIPTION],[HANDLER_PATH]) VALUES (''rdm'',''Reference Data Manager'',''Protocol handler to manage and serve RDM connectors'',''/protocols/rdm/rdm.cat'')');
    END
GO
IF COL_LENGTH('SYSTEM_TABLE_COLUMNS_METADATA', 'STORAGE_TYPE') IS NULL
BEGIN
    ALTER TABLE SYSTEM_TABLE_COLUMNS_METADATA ADD STORAGE_TYPE varchar(10) NULL
END
GO
IF COL_LENGTH('SYS_CON_ENVIRONMENTS', 'SCAN_OPTIONS') IS NULL
    BEGIN
        EXECUTE('ALTER TABLE SYS_CON_ENVIRONMENTS ADD SCAN_OPTIONS VARCHAR(4000) NULL');
    END
GO
BEGIN
   EXEC ('ALTER VIEW ACTIVE_SYS_CON_ENVIRONMENTS
 AS
   SELECT * FROM SYS_CON_ENVIRONMENTS WHERE  STATUS = ''ACTIVE''
   ');
END
GO
IF COL_LENGTH('AMM_PROTOCOLS', 'CONNECTOR_CLASS') IS NULL
BEGIN
    EXECUTE('ALTER TABLE AMM_PROTOCOLS ADD CONNECTOR_CLASS VARCHAR(250) NULL');
    EXECUTE('ALTER TABLE AMM_PROTOCOLS ADD THUMBNAIL_PATH VARCHAR(250) NULL');
    EXECUTE('UPDATE AMM_PROTOCOLS SET CONNECTOR_CLASS = ''com.ads.keyvalues.protocol.RDMProtocol''');
    EXECUTE('UPDATE AMM_PROTOCOLS SET THUMBNAIL_PATH = ''./images/slider_icons/RDM_Full.jpg''');
END
GO
IF COL_LENGTH('SYSTEM_TABLE_METADATA', 'EXPANDED_LOGICAL_NAME') IS NULL
BEGIN
   ALTER TABLE SYSTEM_TABLE_METADATA ADD EXPANDED_LOGICAL_NAME VARCHAR(4000) NULL;
END
ELSE
BEGIN
   ALTER TABLE SYSTEM_TABLE_METADATA ALTER COLUMN EXPANDED_LOGICAL_NAME VARCHAR(4000) NULL
END
GO
IF COL_LENGTH('SYSTEM_TABLE_COLUMNS_METADATA', 'EXPANDED_LOGICAL_NAME') IS NULL
BEGIN
   ALTER TABLE SYSTEM_TABLE_COLUMNS_METADATA ADD EXPANDED_LOGICAL_NAME VARCHAR(4000) NULL;
END
ELSE
BEGIN
   ALTER TABLE SYSTEM_TABLE_COLUMNS_METADATA ALTER COLUMN EXPANDED_LOGICAL_NAME VARCHAR(4000) NULL;
END
GO
IF COL_LENGTH('SYSTEM_TABLE_METADATA', 'EXPAND_ELN') IS NULL
BEGIN
   EXECUTE('ALTER TABLE SYSTEM_TABLE_METADATA ADD EXPAND_ELN BIT NULL DEFAULT 1');
   EXECUTE('UPDATE SYSTEM_TABLE_METADATA SET EXPAND_ELN = 1');
END
GO
IF COL_LENGTH('SYSTEM_TABLE_COLUMNS_METADATA', 'EXPAND_ELN') IS NULL
BEGIN
   EXECUTE('ALTER TABLE SYSTEM_TABLE_COLUMNS_METADATA ADD EXPAND_ELN BIT NULL DEFAULT 1');
   EXECUTE('UPDATE SYSTEM_TABLE_COLUMNS_METADATA SET EXPAND_ELN = 1');
END
GO
ALTER VIEW [VALID_SYS_TBL_COL_METADATA]
 AS
   SELECT STCM.* FROM   SYSTEM_TABLE_COLUMNS_METADATA STCM JOIN ACTIVE_SYS_CON_ENVIRONMENTS SCS ON STCM.SCE_ID = SCS.SCE_ID WHERE  STCM.VALID = 1 OR STCM.VALID IS NULL
GO
ALTER VIEW [VALID_SYSTEM_TABLE_METADATA]
 AS
   SELECT STM.* FROM   SYSTEM_TABLE_METADATA STM JOIN ACTIVE_SYS_CON_ENVIRONMENTS SCS ON STM.SCE_ID = SCS.SCE_ID WHERE STM.VALID = 1 OR STM.VALID IS NULL
GO
IF EXISTS (SELECT * FROM ADS_MM_VERSION WHERE VALUE < '9.0')
    BEGIN
        EXECUTE('ALTER TABLE SYSTEM_TABLE_METADATA DROP CONSTRAINT UK_SYSID_ENV_TAB_NAME')
    END
GO
IF EXISTS (SELECT * FROM ADS_MM_VERSION WHERE VALUE < '9.0')
    BEGIN
        EXECUTE('ALTER TABLE SYSTEM_TABLE_COLUMNS_METADATA DROP CONSTRAINT UK_SYS_ID_ENV_TAB_COL')
    END
GO
IF NOT EXISTS (SELECT * FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE = 'SM_METADATA')
BEGIN
INSERT INTO ADS_KEY_VALUE_OBJECTS (OBJECT_TYPE,OBJECT_TABLE,OBJECT_TABLE_COLUMN,OBJECT_PARENT_TYPE,OBJECT_PARENT_COLUMN_ID)
VALUES('SM_METADATA','','','','')
END
GO
IF(SELECT COUNT(*) FROM AMM_SDLR_JOB_DETAILS where JOB_GROUP = 'SM_ENVIRONMENT') > 0
    BEGIN
        UPDATE AMM_SDLR_JOB_DETAILS SET JOB_CLASS_NAME = 'com.ads.scheduler.jobs.MetadataScanJob' WHERE JOB_GROUP = 'SM_ENVIRONMENT';
    END
GO
IF EXISTS (SELECT * FROM ADS_MM_VERSION WHERE VALUE < '9.0')
    BEGIN
       DELETE FROM PROJECT_RESOURCES WHERE ROLE_ID IN ('com.ads.roles.DQAnalyst','com.ads.roles.LeadDQAnalyst','com.ads.roles.SubjectMatterExpert', 'com.ads.roles.Business','com.ads.roles.Custodian', 'com.ads.roles.Steward','com.ads.roles.Governance');
       DELETE FROM user_assigned_roles WHERE ROLE_ID IN ('com.ads.roles.DQAnalyst','com.ads.roles.LeadDQAnalyst','com.ads.roles.SubjectMatterExpert', 'com.ads.roles.Business','com.ads.roles.Custodian', 'com.ads.roles.Steward','com.ads.roles.Governance');
       DELETE FROM SECURITY_ROLES WHERE ROLE_ID IN ('com.ads.roles.DQAnalyst','com.ads.roles.LeadDQAnalyst','com.ads.roles.SubjectMatterExpert','com.ads.roles.Business','com.ads.roles.Custodian', 'com.ads.roles.Steward','com.ads.roles.Governance');
    END
GO
IF EXISTS (SELECT * FROM ADS_MM_VERSION WHERE VALUE < '9.0')
    BEGIN
        UPDATE USERS SET USER_COMPANY = 'erwin, Inc.'  WHERE CREATED_BY = 'System';
    END
GO
IF EXISTS (SELECT * FROM ADS_MM_VERSION WHERE VALUE < '9.0')
    BEGIN
         UPDATE CAT_TEMPLATES SET CREATED_BY = 'erwin, Inc.', LAST_MODIFIED_BY = 'erwin, Inc.' WHERE CAT_SYSTEM_BASED = '1';
    END
GO
IF EXISTS (SELECT * FROM ADS_MM_VERSION WHERE VALUE < '9.0')
    BEGIN
        UPDATE APP_PREFERENCES SET PREFERENCE_VALUE = '' WHERE PREFERENCE_NAME = 'FROM_EMAIL' AND PREFERENCE_VALUE = 'MM-Admin@analytixds.com';
        UPDATE APP_PREFERENCES SET PREFERENCE_VALUE = '' WHERE PREFERENCE_NAME = 'ADMIN_EMAIL_USER_NAME' AND PREFERENCE_VALUE = 'MM-Admin@analytixds.com';
        UPDATE APP_PREFERENCES SET PREFERENCE_VALUE = '' WHERE PREFERENCE_NAME = 'HOST' AND PREFERENCE_VALUE = 'mail.analytixds.com';
    END
GO
IF EXISTS(SELECT * FROM SYS.VIEWS WHERE NAME = 'V_SYS_TBL_COL_MTDT_SIMPLE')
BEGIN
   DROP VIEW V_SYS_TBL_COL_MTDT_SIMPLE
END
GO
IF NOT EXISTS(SELECT * FROM SYS.VIEWS WHERE NAME = 'V_SYS_TBL_COL_MTDT_SIMPLE')
BEGIN
   EXEC ('CREATE VIEW [V_SYS_TBL_COL_MTDT_SIMPLE]
	AS
	  SELECT SYSCOL.TABLE_NAME, SYSCOL.COLUMN_NAME, SYSCOL.COL_DATATYPE,ASCE.SYSTEM_NAME, SYSCOL.SYSTEM_ENV_NAME, ISNULL(SYSCOL.[COL_LENGTH],'''') AS [COL_LENGTH], ISNULL(SYSCOL.COL_PRECISION,'''') AS COL_PRECISION, ISNULL(SYSCOL.COL_SCALE,'''') AS COL_SCALE
	  FROM   SYSTEM_TABLE_COLUMNS_METADATA AS SYSCOL WITH(NOLOCK)
	  JOIN ACTIVE_SYS_CON_ENVIRONMENTS AS ASCE WITH(NOLOCK)
	  ON ASCE.SCE_ID = SYSCOL.SCE_ID
	  WHERE (VALID = 1 OR VALID IS NULL)');
END
GO
 IF EXISTS (SELECT * FROM SYS.OBJECTS WHERE OBJECT_ID = OBJECT_ID(N'[FN_GETMAPP_SPECIFIC_DETAILS]') AND TYPE IN (N'FN', N'IF', N'TF', N'FS', N'FT'))
 BEGIN
    DROP FUNCTION [FN_GETMAPP_SPECIFIC_DETAILS]
 END
 GO

-- NEED TO HAVE DBO IN FRONT, (SCHEMA SPECIFIC) - GP
CREATE FUNCTION FN_GETMAPP_SPECIFIC_DETAILS
(
   @MAPIDS VARCHAR(MAX)
)
RETURNS

@TEMPTABLE TABLE(MAP_ID INT,MAP_NAME VARCHAR(MAX),MAP_SEQ_ID VARCHAR(MAX),SRC_SYSTEM_NAME VARCHAR(MAX),SRC_SYSTEM_ENVIRONMENT_NAME VARCHAR(MAX),SRC_TABLE_NAME VARCHAR(MAX),SRC_COLUMN_NAME VARCHAR(MAX),SRC_COL_DATATYPE VARCHAR(MAX),
SRC_COL_LENGTH VARCHAR(100), SRC_COL_PRECISION VARCHAR(100), SRC_COL_SCALE VARCHAR(100),
TGT_SYSTEM_NAME VARCHAR(MAX),TGT_SYSTEM_ENVIRONMENT_NAME VARCHAR(MAX),TGT_TABLE_NAME VARCHAR(MAX),TGT_COLUMN_NAME VARCHAR(MAX),TGT_COL_DATATYPE VARCHAR(MAX),
TGT_COL_LENGTH VARCHAR(100), TGT_COL_PRECISION VARCHAR(100), TGT_COL_SCALE VARCHAR(100),
MATCH_SRC_SYSTEM_NAME VARCHAR(MAX), MATCH_SRC_SYS_ENV_NAME VARCHAR(MAX),MATCH_SRC_SYS_TBL_NAME VARCHAR(MAX),MATCH_SRC_SYS_COL_NAME VARCHAR(MAX),MATCH_SRC_SYS_COL_DTYPE VARCHAR(MAX),
MATCH_SRC_SYS_COL_LENGTH VARCHAR(100), MATCH_SRC_SYS_COL_PRECISION VARCHAR(100), MATCH_SRC_SYS_COL_SCALE VARCHAR(100),
MATCH_TGT_SYSTEM_NAME VARCHAR(MAX), MATCH_TGT_SYS_ENV_NAME VARCHAR(MAX),MATCH_TGT_SYS_TBL_NAME VARCHAR(MAX),MATCH_TGT_SYS_COL_NAME VARCHAR(MAX),MATCH_TGT_SYS_COL_DTYPE VARCHAR(MAX),
MATCH_TGT_SYS_COL_LENGTH VARCHAR(100), MATCH_TGT_SYS_COL_PRECISION VARCHAR(100), MATCH_TGT_SYS_COL_SCALE VARCHAR(100), ORPHAN_SRC SMALLINT, ORPHAN_TGT SMALLINT)
AS
BEGIN

    DECLARE @SRCTEMPTABLE TABLE(MAP_ID INT,SRC_SYSTEM_NAME VARCHAR(MAX),SRC_SYSTEM_ENVIRONMENT_NAME VARCHAR(MAX),SRC_TABLE_NAME VARCHAR(MAX),SRC_COLUMN_NAME VARCHAR(MAX),SRC_COL_DATATYPE VARCHAR(MAX),
    SRC_COL_LENGTH VARCHAR(100), SRC_COL_PRECISION VARCHAR(100), SRC_COL_SCALE VARCHAR(100),
    MATCH_SRC_SYSTEM_NAME VARCHAR(MAX), MATCH_SRC_SYS_ENV_NAME VARCHAR(MAX),MATCH_SRC_SYS_TBL_NAME VARCHAR(MAX),MATCH_SRC_SYS_COL_NAME VARCHAR(MAX),MATCH_SRC_SYS_COL_DTYPE VARCHAR(MAX),
    MATCH_SRC_SYS_COL_LENGTH VARCHAR(100), MATCH_SRC_SYS_COL_PRECISION VARCHAR(100), MATCH_SRC_SYS_COL_SCALE VARCHAR(100))

    DECLARE @TGTTEMPTABLE TABLE(MAP_ID INT,TGT_SYSTEM_NAME VARCHAR(MAX),TGT_SYSTEM_ENVIRONMENT_NAME VARCHAR(MAX),TGT_TABLE_NAME VARCHAR(MAX),TGT_COLUMN_NAME VARCHAR(MAX),TGT_COL_DATATYPE VARCHAR(MAX),
    TGT_COL_LENGTH VARCHAR(100), TGT_COL_PRECISION VARCHAR(100), TGT_COL_SCALE VARCHAR(100),
    MATCH_TGT_SYSTEM_NAME VARCHAR(MAX), MATCH_TGT_SYS_ENV_NAME VARCHAR(MAX),MATCH_TGT_SYS_TBL_NAME VARCHAR(MAX),MATCH_TGT_SYS_COL_NAME VARCHAR(MAX),MATCH_TGT_SYS_COL_DTYPE VARCHAR(MAX),
    MATCH_TGT_SYS_COL_LENGTH VARCHAR(100), MATCH_TGT_SYS_COL_PRECISION VARCHAR(100), MATCH_TGT_SYS_COL_SCALE VARCHAR(100))

		INSERT  INTO @TEMPTABLE
      SELECT  MAPPING_SPECIFICATION.MAP_ID, MAPPING_DETAILS.MAP_NAME, MIN(MAPPING_SPECIFICATION.MAP_SEQ_ID), [MAPPING_SPECIFICATION].[SRC_SYSTEM_NAME],
	[MAPPING_SPECIFICATION].[SRC_SYSTEM_ENVIRONMENT_NAME]
       ,[MAPPING_SPECIFICATION].[SRC_TABLE_NAME]
       ,[MAPPING_SPECIFICATION].[SRC_COLUMN_NAME]
       ,ISNULL([MAPPING_SPECIFICATION].[SRC_COL_DATATYPE], '') [SRC_COL_DATATYPE]
       ,ISNULL([MAPPING_SPECIFICATION].[SRC_COL_LENGTH], '') [SRC_COL_LENGTH]
       ,ISNULL([MAPPING_SPECIFICATION].[SRC_COL_PRECISION], '') [SRC_COL_PRECISION]
       ,ISNULL([MAPPING_SPECIFICATION].[SRC_COL_SCALE], '') [SRC_COL_SCALE]
       ,[MAPPING_SPECIFICATION].[TGT_SYSTEM_NAME]
       ,[MAPPING_SPECIFICATION].[TGT_SYSTEM_ENVIRONMENT_NAME]
       ,[MAPPING_SPECIFICATION].[TGT_TABLE_NAME]
       ,[MAPPING_SPECIFICATION].[TGT_COLUMN_NAME]
       ,ISNULL([MAPPING_SPECIFICATION].[TGT_COL_DATATYPE], '') [TGT_COL_DATATYPE]
       ,ISNULL([MAPPING_SPECIFICATION].[TGT_COL_LENGTH], '') [TGT_COL_LENGTH]
       ,ISNULL([MAPPING_SPECIFICATION].[TGT_COL_PRECISION], '') [TGT_COL_PRECISION]
       ,ISNULL([MAPPING_SPECIFICATION].[TGT_COL_SCALE], '') [TGT_COL_SCALE]
       ,NULL AS MATCH_SRC_SYSTEM_NAME
       ,NULL AS MATCH_SRC_SYS_ENV_NAME
       ,NULL AS MATCH_SRC_SYS_TBL_NAME
       ,NULL AS MATCH_SRC_SYS_COL_NAME
       ,NULL AS MATCH_SRC_SYS_COL_DTYPE
       ,NULL AS MATCH_SRC_SYS_COL_LENGTH
       ,NULL AS MATCH_SRC_SYS_COL_PRECISION
       ,NULL AS MATCH_SRC_SYS_COL_SCALE
       ,NULL AS MATCH_TGT_SYSTEM_NAME
       ,NULL AS MATCH_TGT_SYS_ENV_NAME
       ,NULL AS MATCH_TGT_SYS_TBL_NAME
       ,NULL AS MATCH_TGT_SYS_COL_NAME
       ,NULL AS MATCH_TGT_SYS_COL_DTYPE
       ,NULL AS MATCH_TGT_SYS_COL_LENGTH
       ,NULL AS MATCH_TGT_SYS_COL_PRECISION
       ,NULL AS MATCH_TGT_SYS_COL_SCALE
       ,CASE
            WHEN (NULLIF(SRC_SYSTEM_NAME, '')           IS NULL
            AND NULLIF(SRC_SYSTEM_ENVIRONMENT_NAME, '') IS NULL
            AND NULLIF(SRC_TABLE_NAME, '')              IS NULL
            AND NULLIF(SRC_COLUMN_NAME, '')             IS NULL
            AND NULLIF(SRC_COL_DATATYPE, '')            IS NULL
            AND NULLIF(SRC_COL_LENGTH, '')              IS NULL
            AND NULLIF(SRC_COL_PRECISION, '')           IS NULL
            AND NULLIF(SRC_COL_SCALE, '')               IS NULL)
            THEN 1
            ELSE 0
          END AS ORPHAN_SRC
       ,CASE
            WHEN (NULLIF(TGT_SYSTEM_NAME, '')           IS NULL
            AND NULLIF(TGT_SYSTEM_ENVIRONMENT_NAME, '') IS NULL
            AND NULLIF(TGT_TABLE_NAME, '')              IS NULL
            AND NULLIF(TGT_COLUMN_NAME, '')             IS NULL
            AND NULLIF(TGT_COL_DATATYPE, '')            IS NULL
            AND NULLIF(TGT_COL_LENGTH, '')              IS NULL
            AND NULLIF(TGT_COL_PRECISION, '')           IS NULL
            AND NULLIF(TGT_COL_SCALE, '')               IS NULL )
            THEN 1
            ELSE 0
          END AS ORPHAN_TGT
      FROM APPENDED_MAP_SPEC_RCRDS_V MAPPING_SPECIFICATION WITH(NOLOCK)
    INNER JOIN FN_SPLITTREENODEIDS(@MAPIDS,',') AS IDS ON MAPPING_SPECIFICATION.MAP_ID = IDS.TREENODEID
    LEFT JOIN MAPPING_DETAILS  WITH(NOLOCK) ON MAPPING_SPECIFICATION.MAP_ID = MAPPING_DETAILS.MAP_ID
      GROUP BY SRC_SYSTEM_NAME, SRC_SYSTEM_ENVIRONMENT_NAME, SRC_TABLE_NAME, SRC_COLUMN_NAME, SRC_COL_DATATYPE,
      SRC_COL_LENGTH, SRC_COL_PRECISION, SRC_COL_SCALE,
      TGT_SYSTEM_NAME, TGT_SYSTEM_ENVIRONMENT_NAME, TGT_TABLE_NAME, TGT_COLUMN_NAME, TGT_COL_DATATYPE,
      TGT_COL_LENGTH, TGT_COL_PRECISION, TGT_COL_SCALE, MAPPING_DETAILS.MAP_NAME, MAPPING_SPECIFICATION.MAP_ID OPTION (maxrecursion 32767)


    INSERT INTO @SRCTEMPTABLE
            SELECT MAP_ID INT,SRC_SYSTEM_NAME ,SRC_SYSTEM_ENVIRONMENT_NAME,SRC_TABLE_NAME,SRC_COLUMN_NAME,SRC_COL_DATATYPE,
            SRC_COL_LENGTH, SRC_COL_PRECISION, SRC_COL_SCALE,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL
                    FROM @TEMPTABLE WHERE ORPHAN_SRC = 0

    INSERT INTO @TGTTEMPTABLE
            SELECT MAP_ID INT,TGT_SYSTEM_NAME ,TGT_SYSTEM_ENVIRONMENT_NAME,TGT_TABLE_NAME,TGT_COLUMN_NAME,TGT_COL_DATATYPE,
            TGT_COL_LENGTH, TGT_COL_PRECISION, TGT_COL_SCALE,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL
                    FROM @TEMPTABLE WHERE ORPHAN_TGT = 0


    UPDATE @SRCTEMPTABLE
            SET MATCH_SRC_SYSTEM_NAME = SRC_SYS_TCMD.SYSTEM_NAME
            FROM @SRCTEMPTABLE
       INNER JOIN V_SYS_TBL_COL_MTDT_SIMPLE AS SRC_SYS_TCMD  WITH(NOLOCK) ON SRC_SYS_TCMD.SYSTEM_NAME = SRC_SYSTEM_NAME


    DELETE FROM @SRCTEMPTABLE WHERE MATCH_SRC_SYSTEM_NAME IS NULL

    UPDATE @SRCTEMPTABLE
            SET MATCH_SRC_SYS_ENV_NAME = SRC_SYS_TCMD.SYSTEM_ENV_NAME
     FROM @SRCTEMPTABLE
       INNER JOIN V_SYS_TBL_COL_MTDT_SIMPLE AS SRC_SYS_TCMD  WITH(NOLOCK)
      ON (SRC_SYS_TCMD.SYSTEM_NAME = SRC_SYSTEM_NAME
         AND SRC_SYS_TCMD.SYSTEM_ENV_NAME = SRC_SYSTEM_ENVIRONMENT_NAME)


          DELETE FROM @SRCTEMPTABLE WHERE MATCH_SRC_SYS_ENV_NAME IS NULL AND MATCH_SRC_SYSTEM_NAME IS NULL


    UPDATE @SRCTEMPTABLE
            SET MATCH_SRC_SYS_TBL_NAME = SRC_SYS_TBL_TCMD.TABLE_NAME
     FROM @SRCTEMPTABLE
            INNER JOIN V_SYS_TBL_COL_MTDT_SIMPLE AS SRC_SYS_TBL_TCMD  WITH(NOLOCK)
      ON (SRC_SYS_TBL_TCMD.SYSTEM_NAME = SRC_SYSTEM_NAME
    AND SRC_SYS_TBL_TCMD.SYSTEM_ENV_NAME = SRC_SYSTEM_ENVIRONMENT_NAME
                                              AND SRC_SYS_TBL_TCMD.TABLE_NAME = SRC_TABLE_NAME)

    DELETE FROM @SRCTEMPTABLE WHERE MATCH_SRC_SYS_TBL_NAME IS NULL AND MATCH_SRC_SYS_ENV_NAME IS NULL AND MATCH_SRC_SYSTEM_NAME IS NULL



    UPDATE @SRCTEMPTABLE
            SET MATCH_SRC_SYS_COL_NAME = SRC_SYS_TBL_COL_TCMD.COLUMN_NAME
     FROM @SRCTEMPTABLE
            INNER JOIN V_SYS_TBL_COL_MTDT_SIMPLE AS SRC_SYS_TBL_COL_TCMD  WITH(NOLOCK)
         ON (SRC_SYS_TBL_COL_TCMD.SYSTEM_NAME = SRC_SYSTEM_NAME
      AND SRC_SYS_TBL_COL_TCMD.SYSTEM_ENV_NAME = SRC_SYSTEM_ENVIRONMENT_NAME
                                                      AND SRC_SYS_TBL_COL_TCMD.TABLE_NAME = SRC_TABLE_NAME
                                                      AND SRC_SYS_TBL_COL_TCMD.COLUMN_NAME = SRC_COLUMN_NAME)

    DELETE FROM @SRCTEMPTABLE WHERE MATCH_SRC_SYS_TBL_NAME IS NULL AND MATCH_SRC_SYS_ENV_NAME IS NULL AND MATCH_SRC_SYS_COL_NAME IS NULL AND MATCH_SRC_SYSTEM_NAME IS NULL


    UPDATE @SRCTEMPTABLE
            SET MATCH_SRC_SYS_COL_DTYPE = SRC_SYS_TBL_COL_DT_TCMD.COL_DATATYPE
     FROM @SRCTEMPTABLE
            INNER JOIN V_SYS_TBL_COL_MTDT_SIMPLE AS SRC_SYS_TBL_COL_DT_TCMD  WITH(NOLOCK)
            ON (SRC_SYS_TBL_COL_DT_TCMD.SYSTEM_NAME = SRC_SYSTEM_NAME
                AND SRC_SYS_TBL_COL_DT_TCMD.SYSTEM_ENV_NAME = SRC_SYSTEM_ENVIRONMENT_NAME
                      AND SRC_SYS_TBL_COL_DT_TCMD.TABLE_NAME = SRC_TABLE_NAME
                      AND SRC_SYS_TBL_COL_DT_TCMD.COLUMN_NAME = SRC_COLUMN_NAME
                      AND SRC_SYS_TBL_COL_DT_TCMD.COL_DATATYPE = SRC_COL_DATATYPE)

    DELETE FROM @SRCTEMPTABLE WHERE MATCH_SRC_SYS_TBL_NAME IS NULL AND MATCH_SRC_SYS_ENV_NAME IS NULL AND MATCH_SRC_SYS_COL_NAME IS NULL AND MATCH_SRC_SYS_COL_DTYPE IS NULL AND MATCH_SRC_SYSTEM_NAME IS NULL

    UPDATE @SRCTEMPTABLE
    	SET MATCH_SRC_SYS_COL_LENGTH = SRC_SYS_TBL_COL_DT_TCMD.[COL_LENGTH]
     FROM @SRCTEMPTABLE
    	INNER JOIN V_SYS_TBL_COL_MTDT_SIMPLE AS SRC_SYS_TBL_COL_DT_TCMD  WITH(NOLOCK)
      ON (SRC_SYS_TBL_COL_DT_TCMD.SYSTEM_NAME = SRC_SYSTEM_NAME
                  AND SRC_SYS_TBL_COL_DT_TCMD.SYSTEM_ENV_NAME = SRC_SYSTEM_ENVIRONMENT_NAME
    						  AND SRC_SYS_TBL_COL_DT_TCMD.TABLE_NAME = SRC_TABLE_NAME
    						  AND SRC_SYS_TBL_COL_DT_TCMD.COLUMN_NAME = SRC_COLUMN_NAME
    						  AND SRC_SYS_TBL_COL_DT_TCMD.COL_DATATYPE = SRC_COL_DATATYPE
    						  AND SRC_SYS_TBL_COL_DT_TCMD.[COL_LENGTH] = SRC_COL_LENGTH)

    DELETE FROM @SRCTEMPTABLE WHERE MATCH_SRC_SYS_TBL_NAME IS NULL AND MATCH_SRC_SYS_ENV_NAME IS NULL AND MATCH_SRC_SYS_COL_NAME IS NULL AND MATCH_SRC_SYS_COL_DTYPE IS NULL AND MATCH_SRC_SYS_COL_LENGTH IS NULL AND MATCH_SRC_SYSTEM_NAME IS NULL

    UPDATE @SRCTEMPTABLE
    	SET MATCH_SRC_SYS_COL_PRECISION = SRC_SYS_TBL_COL_DT_TCMD.COL_PRECISION
     FROM @SRCTEMPTABLE
    	INNER JOIN V_SYS_TBL_COL_MTDT_SIMPLE AS SRC_SYS_TBL_COL_DT_TCMD  WITH(NOLOCK)
      ON (SRC_SYS_TBL_COL_DT_TCMD.SYSTEM_NAME = SRC_SYSTEM_NAME
                  AND SRC_SYS_TBL_COL_DT_TCMD.SYSTEM_ENV_NAME = SRC_SYSTEM_ENVIRONMENT_NAME
    						  AND SRC_SYS_TBL_COL_DT_TCMD.TABLE_NAME = SRC_TABLE_NAME
    						  AND SRC_SYS_TBL_COL_DT_TCMD.COLUMN_NAME = SRC_COLUMN_NAME
    						  AND SRC_SYS_TBL_COL_DT_TCMD.COL_DATATYPE = SRC_COL_DATATYPE
    						  AND SRC_SYS_TBL_COL_DT_TCMD.[COL_LENGTH] = SRC_COL_LENGTH
    						  AND SRC_SYS_TBL_COL_DT_TCMD.COL_PRECISION = SRC_COL_PRECISION)

    DELETE FROM @SRCTEMPTABLE WHERE MATCH_SRC_SYS_TBL_NAME IS NULL AND MATCH_SRC_SYS_ENV_NAME IS NULL AND MATCH_SRC_SYS_COL_NAME IS NULL AND MATCH_SRC_SYS_COL_DTYPE IS NULL AND MATCH_SRC_SYS_COL_LENGTH IS NULL AND MATCH_SRC_SYS_COL_PRECISION IS NULL AND MATCH_SRC_SYSTEM_NAME IS NULL

    UPDATE @SRCTEMPTABLE
    	SET MATCH_SRC_SYS_COL_SCALE = SRC_SYS_TBL_COL_DT_TCMD.COL_SCALE
     FROM @SRCTEMPTABLE
    	INNER JOIN V_SYS_TBL_COL_MTDT_SIMPLE AS SRC_SYS_TBL_COL_DT_TCMD  WITH(NOLOCK)
      ON (SRC_SYS_TBL_COL_DT_TCMD.SYSTEM_NAME = SRC_SYSTEM_NAME
                  AND SRC_SYS_TBL_COL_DT_TCMD.SYSTEM_ENV_NAME = SRC_SYSTEM_ENVIRONMENT_NAME
    						  AND SRC_SYS_TBL_COL_DT_TCMD.TABLE_NAME = SRC_TABLE_NAME
    						  AND SRC_SYS_TBL_COL_DT_TCMD.COLUMN_NAME = SRC_COLUMN_NAME
    						  AND SRC_SYS_TBL_COL_DT_TCMD.COL_DATATYPE = SRC_COL_DATATYPE
    						  AND SRC_SYS_TBL_COL_DT_TCMD.[COL_LENGTH] = SRC_COL_LENGTH
    						  AND SRC_SYS_TBL_COL_DT_TCMD.COL_PRECISION = SRC_COL_PRECISION
    						  AND SRC_SYS_TBL_COL_DT_TCMD.COL_SCALE = SRC_COL_SCALE)

    DELETE FROM @SRCTEMPTABLE WHERE MATCH_SRC_SYS_TBL_NAME IS NULL AND MATCH_SRC_SYS_ENV_NAME IS NULL AND MATCH_SRC_SYS_COL_NAME IS NULL AND MATCH_SRC_SYS_COL_DTYPE IS NULL AND MATCH_SRC_SYS_COL_LENGTH IS NULL AND MATCH_SRC_SYS_COL_PRECISION IS NULL AND MATCH_SRC_SYS_COL_SCALE IS NULL AND MATCH_SRC_SYSTEM_NAME IS NULL

      UPDATE @TGTTEMPTABLE
            SET MATCH_TGT_SYSTEM_NAME = TGT_SYS_TCMD.SYSTEM_NAME
      FROM @TGTTEMPTABLE
            INNER JOIN V_SYS_TBL_COL_MTDT_SIMPLE AS TGT_SYS_TCMD  WITH(NOLOCK)
            ON TGT_SYS_TCMD.SYSTEM_NAME = TGT_SYSTEM_NAME

      DELETE FROM @TGTTEMPTABLE WHERE MATCH_TGT_SYSTEM_NAME IS NULL


      UPDATE @TGTTEMPTABLE
            SET MATCH_TGT_SYS_ENV_NAME = TGT_SYS_TCMD.SYSTEM_ENV_NAME
      FROM @TGTTEMPTABLE
            INNER JOIN V_SYS_TBL_COL_MTDT_SIMPLE AS TGT_SYS_TCMD  WITH(NOLOCK)
      ON (TGT_SYS_TCMD.SYSTEM_NAME = TGT_SYSTEM_NAME
          AND TGT_SYS_TCMD.SYSTEM_ENV_NAME = TGT_SYSTEM_ENVIRONMENT_NAME)

      DELETE FROM @TGTTEMPTABLE WHERE MATCH_TGT_SYS_ENV_NAME IS NULL


      UPDATE @TGTTEMPTABLE
            SET MATCH_TGT_SYS_TBL_NAME = TGT_SYS_TBL_TCMD.TABLE_NAME
      FROM @TGTTEMPTABLE
            INNER JOIN V_SYS_TBL_COL_MTDT_SIMPLE AS TGT_SYS_TBL_TCMD  WITH(NOLOCK)
            ON (TGT_SYS_TBL_TCMD.SYSTEM_NAME = TGT_SYSTEM_NAME
                  AND TGT_SYS_TBL_TCMD.SYSTEM_ENV_NAME = TGT_SYSTEM_ENVIRONMENT_NAME
                                                      AND TGT_SYS_TBL_TCMD.TABLE_NAME = TGT_TABLE_NAME)

      DELETE FROM @TGTTEMPTABLE WHERE MATCH_TGT_SYS_TBL_NAME IS NULL AND MATCH_TGT_SYS_ENV_NAME IS NULL AND MATCH_TGT_SYSTEM_NAME IS NULL


      UPDATE @TGTTEMPTABLE
            SET MATCH_TGT_SYS_COL_NAME = TGT_SYS_TBL_COL_TCMD.COLUMN_NAME
      FROM @TGTTEMPTABLE
      INNER JOIN V_SYS_TBL_COL_MTDT_SIMPLE AS TGT_SYS_TBL_COL_TCMD WITH(NOLOCK)
      ON ( TGT_SYS_TBL_COL_TCMD.SYSTEM_NAME = TGT_SYSTEM_NAME
      AND TGT_SYS_TBL_COL_TCMD.SYSTEM_ENV_NAME = TGT_SYSTEM_ENVIRONMENT_NAME
                                              AND TGT_SYS_TBL_COL_TCMD.TABLE_NAME = TGT_TABLE_NAME
                                              AND TGT_SYS_TBL_COL_TCMD.COLUMN_NAME = TGT_COLUMN_NAME)


      DELETE FROM @TGTTEMPTABLE WHERE MATCH_TGT_SYS_TBL_NAME IS NULL AND MATCH_TGT_SYS_ENV_NAME IS NULL AND MATCH_TGT_SYS_COL_NAME IS NULL AND MATCH_TGT_SYSTEM_NAME IS NULL

      UPDATE @TGTTEMPTABLE
            SET MATCH_TGT_SYS_COL_DTYPE = TGT_SYS_TBL_COL_DT_TCMD.COL_DATATYPE
      FROM @TGTTEMPTABLE
      INNER JOIN V_SYS_TBL_COL_MTDT_SIMPLE AS TGT_SYS_TBL_COL_DT_TCMD  WITH(NOLOCK)
      ON (TGT_SYS_TBL_COL_DT_TCMD.SYSTEM_NAME = TGT_SYSTEM_NAME
      AND TGT_SYS_TBL_COL_DT_TCMD.SYSTEM_ENV_NAME = TGT_SYSTEM_ENVIRONMENT_NAME
                                              AND TGT_SYS_TBL_COL_DT_TCMD.TABLE_NAME = TGT_TABLE_NAME
                                              AND TGT_SYS_TBL_COL_DT_TCMD.COLUMN_NAME = TGT_COLUMN_NAME
                                              AND TGT_SYS_TBL_COL_DT_TCMD.COL_DATATYPE = TGT_COL_DATATYPE)


      DELETE FROM @TGTTEMPTABLE WHERE MATCH_TGT_SYS_TBL_NAME IS NULL AND MATCH_TGT_SYS_ENV_NAME IS NULL AND MATCH_TGT_SYS_COL_NAME IS NULL AND MATCH_TGT_SYS_COL_DTYPE IS NULL AND MATCH_TGT_SYSTEM_NAME IS NULL

UPDATE @TGTTEMPTABLE
	SET MATCH_TGT_SYS_COL_LENGTH = TGT_SYS_TBL_COL_DT_TCMD.[COL_LENGTH]
 FROM @TGTTEMPTABLE
INNER JOIN V_SYS_TBL_COL_MTDT_SIMPLE AS TGT_SYS_TBL_COL_DT_TCMD  WITH(NOLOCK)
ON (TGT_SYS_TBL_COL_DT_TCMD.SYSTEM_NAME = TGT_SYSTEM_NAME
            AND TGT_SYS_TBL_COL_DT_TCMD.SYSTEM_ENV_NAME = TGT_SYSTEM_ENVIRONMENT_NAME
					  AND TGT_SYS_TBL_COL_DT_TCMD.TABLE_NAME = TGT_TABLE_NAME
					  AND TGT_SYS_TBL_COL_DT_TCMD.COLUMN_NAME = TGT_COLUMN_NAME
					  AND TGT_SYS_TBL_COL_DT_TCMD.COL_DATATYPE = TGT_COL_DATATYPE
					  AND TGT_SYS_TBL_COL_DT_TCMD.[COL_LENGTH] = TGT_COL_LENGTH)


DELETE FROM @TGTTEMPTABLE WHERE MATCH_TGT_SYS_TBL_NAME IS NULL AND MATCH_TGT_SYS_ENV_NAME IS NULL AND MATCH_TGT_SYS_COL_NAME IS NULL AND MATCH_TGT_SYS_COL_DTYPE IS NULL AND MATCH_TGT_SYS_COL_LENGTH IS NULL AND MATCH_TGT_SYSTEM_NAME IS NULL

UPDATE @TGTTEMPTABLE
	SET MATCH_TGT_SYS_COL_PRECISION = TGT_SYS_TBL_COL_DT_TCMD.[COL_PRECISION]
 FROM @TGTTEMPTABLE
INNER JOIN V_SYS_TBL_COL_MTDT_SIMPLE AS TGT_SYS_TBL_COL_DT_TCMD  WITH(NOLOCK)
ON (TGT_SYS_TBL_COL_DT_TCMD.SYSTEM_NAME = TGT_SYSTEM_NAME
            AND TGT_SYS_TBL_COL_DT_TCMD.SYSTEM_ENV_NAME = TGT_SYSTEM_ENVIRONMENT_NAME
					  AND TGT_SYS_TBL_COL_DT_TCMD.TABLE_NAME = TGT_TABLE_NAME
					  AND TGT_SYS_TBL_COL_DT_TCMD.COLUMN_NAME = TGT_COLUMN_NAME
					  AND TGT_SYS_TBL_COL_DT_TCMD.COL_DATATYPE = TGT_COL_DATATYPE
					  AND TGT_SYS_TBL_COL_DT_TCMD.[COL_LENGTH] = TGT_COL_LENGTH
					  AND TGT_SYS_TBL_COL_DT_TCMD.COL_PRECISION = TGT_COL_PRECISION)


DELETE FROM @TGTTEMPTABLE WHERE MATCH_TGT_SYS_TBL_NAME IS NULL AND MATCH_TGT_SYS_ENV_NAME IS NULL AND MATCH_TGT_SYS_COL_NAME IS NULL AND MATCH_TGT_SYS_COL_DTYPE IS NULL AND MATCH_TGT_SYS_COL_LENGTH IS NULL AND MATCH_TGT_SYS_COL_PRECISION IS NULL AND MATCH_TGT_SYSTEM_NAME IS NULL

UPDATE @TGTTEMPTABLE
	SET MATCH_TGT_SYS_COL_SCALE = TGT_SYS_TBL_COL_DT_TCMD.[COL_SCALE]
 FROM @TGTTEMPTABLE
INNER JOIN V_SYS_TBL_COL_MTDT_SIMPLE AS TGT_SYS_TBL_COL_DT_TCMD  WITH(NOLOCK)
ON (TGT_SYS_TBL_COL_DT_TCMD.SYSTEM_NAME = TGT_SYSTEM_NAME
            AND TGT_SYS_TBL_COL_DT_TCMD.SYSTEM_ENV_NAME = TGT_SYSTEM_ENVIRONMENT_NAME
					  AND TGT_SYS_TBL_COL_DT_TCMD.TABLE_NAME = TGT_TABLE_NAME
					  AND TGT_SYS_TBL_COL_DT_TCMD.COLUMN_NAME = TGT_COLUMN_NAME
					  AND TGT_SYS_TBL_COL_DT_TCMD.COL_DATATYPE = TGT_COL_DATATYPE
					  AND TGT_SYS_TBL_COL_DT_TCMD.[COL_LENGTH] = TGT_COL_LENGTH
					  AND TGT_SYS_TBL_COL_DT_TCMD.COL_PRECISION = TGT_COL_PRECISION
					  AND TGT_SYS_TBL_COL_DT_TCMD.COL_SCALE = TGT_COL_SCALE)


DELETE FROM @TGTTEMPTABLE WHERE MATCH_TGT_SYS_TBL_NAME IS NULL AND MATCH_TGT_SYS_ENV_NAME IS NULL AND MATCH_TGT_SYS_COL_NAME IS NULL AND MATCH_TGT_SYS_COL_DTYPE IS NULL AND MATCH_TGT_SYS_COL_LENGTH IS NULL AND MATCH_TGT_SYS_COL_PRECISION IS NULL AND MATCH_TGT_SYS_COL_SCALE IS NULL AND MATCH_TGT_SYSTEM_NAME IS NULL

		UPDATE @TEMPTABLE
			SET MATCH_SRC_SYSTEM_NAME = SRC.MATCH_SRC_SYSTEM_NAME
		FROM @TEMPTABLE AS A
			INNER JOIN @SRCTEMPTABLE AS SRC ON A.MAP_ID = SRC.MAP_ID
			AND	A.SRC_SYSTEM_NAME = SRC.MATCH_SRC_SYSTEM_NAME

		UPDATE @TEMPTABLE
			SET MATCH_SRC_SYS_ENV_NAME = SRC.MATCH_SRC_SYS_ENV_NAME
		FROM @TEMPTABLE AS A
			INNER JOIN @SRCTEMPTABLE AS SRC ON A.MAP_ID = SRC.MAP_ID
			AND	A.SRC_SYSTEM_ENVIRONMENT_NAME = SRC.MATCH_SRC_SYS_ENV_NAME
      AND	A.SRC_SYSTEM_NAME = SRC.MATCH_SRC_SYSTEM_NAME

		UPDATE @TEMPTABLE
			SET MATCH_SRC_SYS_TBL_NAME = SRC.MATCH_SRC_SYS_TBL_NAME
		FROM @TEMPTABLE AS A
			INNER JOIN @SRCTEMPTABLE AS SRC ON A.MAP_ID = SRC.MAP_ID
			AND	A.SRC_TABLE_NAME = SRC.MATCH_SRC_SYS_TBL_NAME
			AND	A.SRC_SYSTEM_ENVIRONMENT_NAME = SRC.MATCH_SRC_SYS_ENV_NAME
      AND	A.SRC_SYSTEM_NAME = SRC.MATCH_SRC_SYSTEM_NAME

		UPDATE @TEMPTABLE
			SET MATCH_SRC_SYS_COL_NAME = SRC.MATCH_SRC_SYS_COL_NAME
		FROM @TEMPTABLE AS A
			INNER JOIN @SRCTEMPTABLE AS SRC ON A.MAP_ID = SRC.MAP_ID
			AND	A.SRC_COLUMN_NAME = SRC.MATCH_SRC_SYS_COL_NAME
			AND	A.SRC_TABLE_NAME = SRC.MATCH_SRC_SYS_TBL_NAME
			AND	A.SRC_SYSTEM_ENVIRONMENT_NAME = SRC.MATCH_SRC_SYS_ENV_NAME
      AND	A.SRC_SYSTEM_NAME = SRC.MATCH_SRC_SYSTEM_NAME

		UPDATE @TEMPTABLE
			SET MATCH_SRC_SYS_COL_DTYPE = SRC.MATCH_SRC_SYS_COL_DTYPE
		FROM @TEMPTABLE AS A
			INNER JOIN @SRCTEMPTABLE AS SRC ON A.MAP_ID = SRC.MAP_ID
			AND	A.SRC_COL_DATATYPE = SRC.MATCH_SRC_SYS_COL_DTYPE
			AND	A.SRC_COLUMN_NAME = SRC.MATCH_SRC_SYS_COL_NAME
			AND	A.SRC_TABLE_NAME = SRC.MATCH_SRC_SYS_TBL_NAME
			AND	A.SRC_SYSTEM_ENVIRONMENT_NAME = SRC.MATCH_SRC_SYS_ENV_NAME
      AND	A.SRC_SYSTEM_NAME = SRC.MATCH_SRC_SYSTEM_NAME

		UPDATE @TEMPTABLE
			SET MATCH_SRC_SYS_COL_LENGTH = SRC.MATCH_SRC_SYS_COL_LENGTH
		FROM @TEMPTABLE AS A
			INNER JOIN @SRCTEMPTABLE AS SRC ON A.MAP_ID = SRC.MAP_ID
			AND	A.SRC_COL_LENGTH = SRC.MATCH_SRC_SYS_COL_LENGTH
			AND	A.SRC_COL_DATATYPE = SRC.MATCH_SRC_SYS_COL_DTYPE
			AND	A.SRC_COLUMN_NAME = SRC.MATCH_SRC_SYS_COL_NAME
			AND	A.SRC_TABLE_NAME = SRC.MATCH_SRC_SYS_TBL_NAME
			AND	A.SRC_SYSTEM_ENVIRONMENT_NAME = SRC.MATCH_SRC_SYS_ENV_NAME
      AND	A.SRC_SYSTEM_NAME = SRC.MATCH_SRC_SYSTEM_NAME

		UPDATE @TEMPTABLE
			SET MATCH_SRC_SYS_COL_PRECISION = SRC.MATCH_SRC_SYS_COL_PRECISION
		FROM @TEMPTABLE AS A
			INNER JOIN @SRCTEMPTABLE AS SRC ON A.MAP_ID = SRC.MAP_ID
			AND	A.SRC_COL_PRECISION = SRC.MATCH_SRC_SYS_COL_PRECISION
			AND	A.SRC_COL_LENGTH = SRC.MATCH_SRC_SYS_COL_LENGTH
			AND	A.SRC_COL_DATATYPE = SRC.MATCH_SRC_SYS_COL_DTYPE
			AND	A.SRC_COLUMN_NAME = SRC.MATCH_SRC_SYS_COL_NAME
			AND	A.SRC_TABLE_NAME = SRC.MATCH_SRC_SYS_TBL_NAME
			AND	A.SRC_SYSTEM_ENVIRONMENT_NAME = SRC.MATCH_SRC_SYS_ENV_NAME
      AND	A.SRC_SYSTEM_NAME = SRC.MATCH_SRC_SYSTEM_NAME

		UPDATE @TEMPTABLE
			SET MATCH_SRC_SYS_COL_SCALE = SRC.MATCH_SRC_SYS_COL_SCALE
		FROM @TEMPTABLE AS A
			INNER JOIN @SRCTEMPTABLE AS SRC ON A.MAP_ID = SRC.MAP_ID
			AND	A.SRC_COL_SCALE = SRC.MATCH_SRC_SYS_COL_SCALE
			AND	A.SRC_COL_PRECISION = SRC.MATCH_SRC_SYS_COL_PRECISION
			AND	A.SRC_COL_LENGTH = SRC.MATCH_SRC_SYS_COL_LENGTH
			AND	A.SRC_COL_DATATYPE = SRC.MATCH_SRC_SYS_COL_DTYPE
			AND	A.SRC_COLUMN_NAME = SRC.MATCH_SRC_SYS_COL_NAME
			AND	A.SRC_TABLE_NAME = SRC.MATCH_SRC_SYS_TBL_NAME
			AND	A.SRC_SYSTEM_ENVIRONMENT_NAME = SRC.MATCH_SRC_SYS_ENV_NAME
      AND	A.SRC_SYSTEM_NAME = SRC.MATCH_SRC_SYSTEM_NAME

		UPDATE @TEMPTABLE
			SET MATCH_TGT_SYSTEM_NAME = SRC.MATCH_TGT_SYSTEM_NAME
		FROM @TEMPTABLE AS A
			INNER JOIN @TGTTEMPTABLE AS SRC ON A.MAP_ID = SRC.MAP_ID
			AND A.TGT_SYSTEM_NAME = SRC.MATCH_TGT_SYSTEM_NAME

    UPDATE @TEMPTABLE
			SET MATCH_TGT_SYS_ENV_NAME = SRC.MATCH_TGT_SYS_ENV_NAME
		FROM @TEMPTABLE AS A
			INNER JOIN @TGTTEMPTABLE AS SRC ON A.MAP_ID = SRC.MAP_ID
			AND A.TGT_SYSTEM_ENVIRONMENT_NAME = SRC.MATCH_TGT_SYS_ENV_NAME
      AND A.TGT_SYSTEM_NAME = SRC.MATCH_TGT_SYSTEM_NAME

		UPDATE @TEMPTABLE
			SET MATCH_TGT_SYS_TBL_NAME = SRC.MATCH_TGT_SYS_TBL_NAME
		FROM @TEMPTABLE AS A
			INNER JOIN @TGTTEMPTABLE AS SRC ON A.MAP_ID = SRC.MAP_ID
			AND	A.TGT_TABLE_NAME = SRC.MATCH_TGT_SYS_TBL_NAME
			AND A.TGT_SYSTEM_ENVIRONMENT_NAME = SRC.MATCH_TGT_SYS_ENV_NAME
      AND A.TGT_SYSTEM_NAME = SRC.MATCH_TGT_SYSTEM_NAME

		UPDATE @TEMPTABLE
			SET MATCH_TGT_SYS_COL_NAME = SRC.MATCH_TGT_SYS_COL_NAME
		FROM @TEMPTABLE AS A
			INNER JOIN @TGTTEMPTABLE AS SRC ON A.MAP_ID = SRC.MAP_ID
			AND	A.TGT_COLUMN_NAME = SRC.MATCH_TGT_SYS_COL_NAME
			AND	A.TGT_TABLE_NAME = SRC.MATCH_TGT_SYS_TBL_NAME
			AND A.TGT_SYSTEM_ENVIRONMENT_NAME = SRC.MATCH_TGT_SYS_ENV_NAME
      AND A.TGT_SYSTEM_NAME = SRC.MATCH_TGT_SYSTEM_NAME

		UPDATE @TEMPTABLE
			SET MATCH_TGT_SYS_COL_DTYPE = SRC.MATCH_TGT_SYS_COL_DTYPE
		FROM @TEMPTABLE AS A
			INNER JOIN @TGTTEMPTABLE AS SRC ON A.MAP_ID = SRC.MAP_ID
			AND	A.TGT_COL_DATATYPE = SRC.MATCH_TGT_SYS_COL_DTYPE
			AND	A.TGT_COLUMN_NAME = SRC.MATCH_TGT_SYS_COL_NAME
			AND	A.TGT_TABLE_NAME = SRC.MATCH_TGT_SYS_TBL_NAME
			AND A.TGT_SYSTEM_ENVIRONMENT_NAME = SRC.MATCH_TGT_SYS_ENV_NAME
      AND A.TGT_SYSTEM_NAME = SRC.MATCH_TGT_SYSTEM_NAME

		UPDATE @TEMPTABLE
			SET MATCH_TGT_SYS_COL_LENGTH = SRC.MATCH_TGT_SYS_COL_LENGTH
		FROM @TEMPTABLE AS A
			INNER JOIN @TGTTEMPTABLE AS SRC ON A.MAP_ID = SRC.MAP_ID
			AND	A.TGT_COL_LENGTH = SRC.MATCH_TGT_SYS_COL_LENGTH
			AND	A.TGT_COL_DATATYPE = SRC.MATCH_TGT_SYS_COL_DTYPE
			AND	A.TGT_COLUMN_NAME = SRC.MATCH_TGT_SYS_COL_NAME
			AND	A.TGT_TABLE_NAME = SRC.MATCH_TGT_SYS_TBL_NAME
			AND A.TGT_SYSTEM_ENVIRONMENT_NAME = SRC.MATCH_TGT_SYS_ENV_NAME
      AND A.TGT_SYSTEM_NAME = SRC.MATCH_TGT_SYSTEM_NAME

		UPDATE @TEMPTABLE
			SET MATCH_TGT_SYS_COL_PRECISION = SRC.MATCH_TGT_SYS_COL_PRECISION
		FROM @TEMPTABLE AS A
			INNER JOIN @TGTTEMPTABLE AS SRC ON A.MAP_ID = SRC.MAP_ID
			AND	A.TGT_COL_PRECISION = SRC.MATCH_TGT_SYS_COL_PRECISION
			AND	A.TGT_COL_LENGTH = SRC.MATCH_TGT_SYS_COL_LENGTH
			AND	A.TGT_COL_DATATYPE = SRC.MATCH_TGT_SYS_COL_DTYPE
			AND	A.TGT_COLUMN_NAME = SRC.MATCH_TGT_SYS_COL_NAME
			AND	A.TGT_TABLE_NAME = SRC.MATCH_TGT_SYS_TBL_NAME
			AND A.TGT_SYSTEM_ENVIRONMENT_NAME = SRC.MATCH_TGT_SYS_ENV_NAME
      AND A.TGT_SYSTEM_NAME = SRC.MATCH_TGT_SYSTEM_NAME

		UPDATE @TEMPTABLE
			SET MATCH_TGT_SYS_COL_SCALE = SRC.MATCH_TGT_SYS_COL_SCALE
		FROM @TEMPTABLE AS A
			INNER JOIN @TGTTEMPTABLE AS SRC ON A.MAP_ID = SRC.MAP_ID
			AND	A.TGT_COL_SCALE = SRC.MATCH_TGT_SYS_COL_SCALE
			AND	A.TGT_COL_PRECISION = SRC.MATCH_TGT_SYS_COL_PRECISION
			AND	A.TGT_COL_LENGTH = SRC.MATCH_TGT_SYS_COL_LENGTH
			AND	A.TGT_COL_DATATYPE = SRC.MATCH_TGT_SYS_COL_DTYPE
			AND	A.TGT_COLUMN_NAME = SRC.MATCH_TGT_SYS_COL_NAME
			AND	A.TGT_TABLE_NAME = SRC.MATCH_TGT_SYS_TBL_NAME
			AND A.TGT_SYSTEM_ENVIRONMENT_NAME = SRC.MATCH_TGT_SYS_ENV_NAME
      AND A.TGT_SYSTEM_NAME = SRC.MATCH_TGT_SYSTEM_NAME

	RETURN
END
GO
IF COL_LENGTH('SYSTEM_TABLE_METADATA', 'DECLARATION_PATH') IS NULL
BEGIN
    EXECUTE ('ALTER TABLE SYSTEM_TABLE_METADATA ADD DECLARATION_PATH VARCHAR(MAX) NULL');
    EXECUTE ('UPDATE SYSTEM_TABLE_METADATA SET DECLARATION_PATH = ''/'' + TABLE_NAME');
END
GO
IF COL_LENGTH('SYSTEM_TABLE_COLUMNS_METADATA', 'DECLARATION_PATH') IS NULL
BEGIN
    EXECUTE ('ALTER TABLE SYSTEM_TABLE_COLUMNS_METADATA ADD DECLARATION_PATH VARCHAR(MAX) NULL');
    EXECUTE ('UPDATE SYSTEM_TABLE_COLUMNS_METADATA SET DECLARATION_PATH = ''/'' + TABLE_NAME');
END
GO
IF COL_LENGTH('SYSTEM_TABLE_METADATA', 'PHYSICAL_TABLE_NAME') IS NULL
BEGIN
ALTER TABLE SYSTEM_TABLE_METADATA ADD PHYSICAL_TABLE_NAME VARCHAR(4000) NULL;
END
GO
IF COL_LENGTH('SYSTEM_TABLE_COLUMNS_METADATA', 'PHYSICAL_COLUMN_NAME ') IS NULL
BEGIN
ALTER TABLE SYSTEM_TABLE_COLUMNS_METADATA ADD PHYSICAL_COLUMN_NAME VARCHAR(4000) NULL;
END
GO
ALTER VIEW [VALID_SYSTEM_TABLE_METADATA]
AS
SELECT STM.* FROM SYSTEM_TABLE_METADATA STM JOIN ACTIVE_SYS_CON_ENVIRONMENTS SCS ON STM.SCE_ID = SCS.SCE_ID WHERE STM.VALID = 1 OR STM.VALID IS NULL
GO
ALTER VIEW [VALID_SYS_TBL_COL_METADATA]
AS
SELECT STCM.* FROM SYSTEM_TABLE_COLUMNS_METADATA STCM JOIN ACTIVE_SYS_CON_ENVIRONMENTS SCS ON STCM.SCE_ID = SCS.SCE_ID WHERE STCM.VALID = 1 OR STCM.VALID IS NULL
GO
IF COL_LENGTH('SYS_CON_ENVIRONMENTS', 'PUBLISH') IS NULL
    BEGIN
        EXECUTE('ALTER TABLE SYS_CON_ENVIRONMENTS ADD PUBLISH BIT NULL DEFAULT 0')
        EXECUTE('UPDATE SYS_CON_ENVIRONMENTS SET PUBLISH = 0')
    END
GO
IF NOT EXISTS (SELECT *
	       FROM   ADS_KEY_VALUE_OBJECTS
	       WHERE  OBJECT_PARENT_TYPE = 'SM_METADATA' and OBJECT_TYPE = 'SM_SYSTEM')
	BEGIN
            EXECUTE('UPDATE ADS_KEY_VALUE_OBJECTS SET OBJECT_PARENT_TYPE = ''SM_METADATA'' , OBJECT_PARENT_COLUMN_ID = ''SM_METADATA_ID'' WHERE OBJECT_TYPE = ''SM_SYSTEM''');
            EXECUTE('UPDATE ADS_KEY_VALUE_OBJECTS SET MODULE_KEY = ''com.ads.mm.permission.sm'' , OBJECT_LEVEL = 0 WHERE OBJECT_TYPE = ''SM_METADATA''');
	END
GO
IF(SELECT COUNT(*) FROM ADS_FORM WHERE FORM_NAME = 'Environment Properties - Metadata Manager') = 0
    BEGIN
        INSERT INTO ADS_FORM(FORM_NAME,DESCRIPTION,BASE_FORM_ID,SYSTEM_BASED)
            SELECT 'Environment Properties - Metadata Manager','Default template to configure environment field properties', 0,1
    END
GO
IF(select COUNT(OBJECT_ID) from ADS_OBJECT_TO_OBJECT_SCOPE WHERE OBJECT_ID =
    (SELECT F_ID FROM ADS_FORM where FORM_NAME = 'Environment Properties - Metadata Manager' AND SYSTEM_BASED = 1) AND SCOPE_OBJECT_TYPE_ID =
    (select Object_type_id from ADS_KEY_VALUE_OBJECTS where object_type = 'SM_SYSTEM')) = 0
    BEGIN
    declare @formObjectTypeId bigint
    declare @scopeObjectTypeId bigint
    declare @formId bigint

        set @formObjectTypeId = (select Object_type_id from ADS_KEY_VALUE_OBJECTS where object_type = 'FORM');
        set @scopeObjectTypeId = (select Object_type_id from ADS_KEY_VALUE_OBJECTS where object_type = 'SM_SYSTEM');

        set @formId = (select F_ID from ADS_FORM where FORM_NAME = 'Environment Properties - Metadata Manager' AND SYSTEM_BASED = 1);
        INSERT INTO ADS_OBJECT_TO_OBJECT_SCOPE(OBJECT_TYPE_ID,OBJECT_ID,SCOPE_OBJECT_TYPE_ID, SCOPE_OBJECT_ID)
        VALUES(@formObjectTypeId, @formId, @scopeObjectTypeId,-1);
    END
GO
IF COL_LENGTH('SYS_CON_ENVIRONMENTS', 'VISIBLE') IS NULL
    BEGIN
        EXECUTE('ALTER TABLE SYS_CON_ENVIRONMENTS ADD VISIBLE tinyint NULL DEFAULT 1');
	EXECUTE('UPDATE SYS_CON_ENVIRONMENTS SET VISIBLE = 1');
    END
GO
BEGIN
   EXEC ('ALTER VIEW ACTIVE_SYS_CON_ENVIRONMENTS
 AS
   SELECT *
   FROM   SYS_CON_ENVIRONMENTS
   WHERE  STATUS = ''ACTIVE''
   ');
END
GO
IF COL_LENGTH('ADS_MODULES', 'MODULE_ACTION') IS NULL
	BEGIN
	EXECUTE('ALTER TABLE ADS_MODULES ADD MODULE_ACTION varchar(250)');
	EXECUTE('UPDATE ADS_MODULES SET MODULE_ACTION = ''MappingManager.ads?action=mappingManager'' WHERE MODULE_FORWARD = ''mappingmanager''');
	EXECUTE('UPDATE ADS_MODULES SET MODULE_ACTION = ''SystemManager.ads?action=systemManager'' WHERE MODULE_FORWARD = ''systemmanager''');
	EXECUTE('UPDATE ADS_MODULES SET MODULE_ACTION = ''Project.ads?action=resourceManager'' WHERE MODULE_FORWARD = ''resourcemanager''');
        EXECUTE('UPDATE ADS_MODULES SET MODULE_ACTION = ''CodesetManager.ads?action=codesetManager'' WHERE MODULE_FORWARD = ''codesetmanager''');
	EXECUTE('UPDATE ADS_MODULES SET MODULE_ACTION = ''ProjectAction.ads?action=releaseManager'' WHERE MODULE_FORWARD = ''releasemanager''');
	EXECUTE('UPDATE ADS_MODULES SET MODULE_ACTION = ''ReferenceCategoryAction.ads?action=referenceDataset'' WHERE MODULE_FORWARD = ''referencedatamanager''');
	EXECUTE('UPDATE ADS_MODULES SET MODULE_ACTION = ''CATAction.ads?action=codeAutomationTemplate'' WHERE MODULE_FORWARD = ''codeautomationtemplate''');
	EXECUTE('UPDATE ADS_MODULES SET MODULE_ACTION = ''TestManager.ads?action=testManager'' WHERE MODULE_FORWARD = ''testmanager''');
	EXECUTE('UPDATE ADS_MODULES SET MODULE_ACTION = ''RequirementsManager.ads?action=requirementsManager'' WHERE MODULE_FORWARD = ''requirementsmanager''');
	EXECUTE('UPDATE ADS_MODULES SET MODULE_ACTION = ''REPMCategory.ads?action=reportingManager'' WHERE MODULE_FORWARD = ''reportingmanager''');
	EXECUTE('UPDATE ADS_MODULES SET MODULE_ACTION = ''BusinessGlossaryAction.ads?action=businessGlossaryManager'' WHERE MODULE_FORWARD = ''businessglossarymanager''');
	EXECUTE('UPDATE ADS_MODULES SET MODULE_ACTION = ''WorkFlowManagerAction.ads?action=workflowmanager'' WHERE MODULE_FORWARD = ''workflowmanager''');
     END
GO
UPDATE APP_PREFERENCES SET PREFERENCE_VALUE = ' Hello,<br><br>
 This is to notify you about status change for the following.<br><br>
 <b>@objectName@</b>
 </br><br>
 <table border = 1>
 <tr><th colspan = 2><b>Details</b></th></tr>
 <tr>
 <td>Object Name :</td>
 <td>@objectName@</td>
 </tr>
 <tr>
 <td>Object Parent : </td>
 <td>@objectParent@</td>
 </tr>
  <tr>
 <td>Link To Object :</td>
 <td>@clickHere@</td>
 </tr>
 <tr><th colspan = 2><b>Status Change</b></th></tr>
 <tr>
 <td>From :</td>
 <td>@fromStage@</td>
 </tr>
 <tr>
 <td>To :</td>
 <td>@toStage@</td>
 </tr>

 <tr><th colspan = 2><b>Audit Details</b></th></tr>
 <tr>
 <td>Created By :</td>
 <td>@createdBy@</td>
 </tr>
 <tr>
 <td>Created Date :</td>
 <td>@createdDate@</td>
 </tr>
 <tr>
 <td>Status Updated By :</td>
 <td>@statusUpdatedBy@</td>
 </tr>
 <tr>
 <td>Status Updated Date :</td>
 <td>@statusUpdatedDate@</td>
 </tr>
 </table>
 <BR><b>Comments:</b> @comments@
 <BR><BR><I><font color =red>Note</font>: This is an auto generated email notification and this mailbox is not monitored.<BR>Please do not reply to this email.</I>'
 WHERE PREFERENCE_NAME='SEND_EMAIL_ON_WORKFLOW_STATUS_UPDATE_MESSAGE'
GO
IF EXISTS (SELECT * FROM ADS_MM_VERSION WHERE VALUE < '9.2')
    BEGIN
        WITH CTE AS (SELECT KV_ID, OBJECT_TYPE_ID, OBJECT_ID, ROW_NUMBER() OVER(PARTITION BY OBJECT_TYPE_ID, OBJECT_ID ORDER BY CAST(KV_ORDER AS DECIMAL)) AS KV_ORDER  FROM ADS_KEY_VALUE  WHERE KEY_NAME NOT LIKE ('SM_METADATA#%') AND KEY_NAME NOT LIKE ('SM_SYSTEM#%') AND KEY_NAME NOT LIKE ('SM_ENVIRONMENT#%') AND KEY_NAME NOT LIKE ( 'SM_TABLE#%') AND KEY_NAME NOT LIKE ('MM_PROJECT#%') AND KEY_NAME NOT LIKE ('MM_SUBJECT#%') AND KEY_NAME NOT LIKE ('MM_MAPPING#%')) UPDATE MS SET MS.KV_ORDER  = CTE.KV_ORDER FROM ADS_KEY_VALUE MS JOIN CTE ON MS.KV_ID =  CTE.KV_ID;
    END
GO
IF  EXISTS(SELECT * FROM SYS.VIEWS WHERE NAME = 'SYSTEMDATADICTIONARYSUMMARY')
BEGIN
   EXEC ('ALTER  VIEW [SYSTEMDATADICTIONARYSUMMARY] AS
            WITH TABLE_DETAILS AS
            (SELECT SDD.SYSTEM_ID SYSTEM_ID,
            SCE.SYSTEM_ENVIRONMENT_NAME,
            COUNT(STM.TABLE_NAME) COUNT_TABLES
            FROM SYSTEM_DEFINITION_DETAILS SDD
            JOIN SYS_CON_ENVIRONMENTS SCE ON SDD.SYSTEM_ID = SCE.SYSTEM_ID
            JOIN VALID_SYSTEM_TABLE_METADATA STM ON STM.SYSTEM_ID = SDD.SYSTEM_ID
            AND STM.SYSTEM_ENV_NAME = SCE.SYSTEM_ENVIRONMENT_NAME
            GROUP BY SDD.SYSTEM_ID,
            SCE.SYSTEM_ENVIRONMENT_NAME),
            COLUMN_DETAILS AS(
            SELECT SDD.SYSTEM_ID SYSTEM_ID,
            SCE.SYSTEM_ENVIRONMENT_NAME,
            COUNT(STCM.COLUMN_NAME) COUNT_COLUMNS
            FROM SYSTEM_DEFINITION_DETAILS SDD
            JOIN SYS_CON_ENVIRONMENTS SCE ON SDD.SYSTEM_ID = SCE.SYSTEM_ID
            JOIN VALID_SYSTEM_TABLE_METADATA STM ON STM.SYSTEM_ID = SDD.SYSTEM_ID
            AND STM.SYSTEM_ENV_NAME = SCE.SYSTEM_ENVIRONMENT_NAME
            JOIN VALID_SYS_TBL_COL_METADATA STCM ON STCM.SYSTEM_ID = SDD.SYSTEM_ID
            AND STCM.SYSTEM_ENV_NAME = SCE.SYSTEM_ENVIRONMENT_NAME
            AND STCM.TABLE_NAME = STM.TABLE_NAME
            WHERE STCM.type <> ''ENTITY'' OR STCM.type IS NULL
            GROUP BY SDD.SYSTEM_ID,
            SCE.SYSTEM_ENVIRONMENT_NAME)
            SELECT CD.SYSTEM_ID, CD.SYSTEM_ENVIRONMENT_NAME, TD.COUNT_TABLES, CD.COUNT_COLUMNS
            FROM COLUMN_DETAILS CD JOIN TABLE_DETAILS TD ON
            CD.SYSTEM_ID = TD.SYSTEM_ID
            AND CD.SYSTEM_ENVIRONMENT_NAME = TD.SYSTEM_ENVIRONMENT_NAME');
END
GO
IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE COLUMN_NAME = 'OBJECT_TITLE' AND TABLE_NAME = 'ADS_KEY_VALUE_OBJECTS' )
BEGIN

	ALTER TABLE ADS_KEY_VALUE_OBJECTS ADD OBJECT_TITLE varchar(255) NULL;

	EXECUTE('INSERT INTO ADS_KEY_VALUE_OBJECTS (OBJECT_TYPE,OBJECT_TABLE,OBJECT_TABLE_COLUMN,OBJECT_PARENT_TYPE,OBJECT_PARENT_COLUMN_ID,OBJECT_LEVEL,MODULE_KEY,OBJECT_TITLE) VALUES(''MM_PROJECTS'','''','''','''','''',0,''com.ads.mm.permission.mm'',''Projects'')');

	EXECUTE('INSERT INTO ADS_KEY_VALUE_OBJECTS (OBJECT_TYPE,OBJECT_TABLE,OBJECT_TABLE_COLUMN,OBJECT_PARENT_TYPE,OBJECT_PARENT_COLUMN_ID,OBJECT_LEVEL,MODULE_KEY,OBJECT_TITLE) VALUES(''BGM_TERM_CATALOGS'','''','''','''','''',0,''com.ads.mm.permission.bgm'',''Business Terms'')');

	EXECUTE('UPDATE ADS_KEY_VALUE_OBJECTS SET OBJECT_PARENT_TYPE = ''MM_PROJECTS'', OBJECT_PARENT_COLUMN_ID = ''MM_PROJECTS_ID'' WHERE OBJECT_TYPE = ''MM_PROJECT''');

	EXECUTE('UPDATE ADS_KEY_VALUE_OBJECTS SET OBJECT_PARENT_COLUMN_ID = ''SUBJECT_ID'' WHERE OBJECT_TYPE = ''MM_MAPPING''');
	EXECUTE('UPDATE ADS_KEY_VALUE_OBJECTS SET OBJECT_PARENT_COLUMN_ID = ''MAP_ID'' WHERE OBJECT_TYPE = ''MM_MAPPING_ROW''');
	EXECUTE('UPDATE ADS_KEY_VALUE_OBJECTS SET OBJECT_PARENT_TYPE = ''BGM_TERM_CATALOG'' WHERE OBJECT_TYPE = ''BGM_TERM''');
	EXECUTE('UPDATE ADS_KEY_VALUE_OBJECTS SET OBJECT_PARENT_TYPE = ''BGM_TERM_CATALOGS'', OBJECT_PARENT_COLUMN_ID = ''BGM_TERM_CATALOGS_ID'' WHERE OBJECT_TYPE = ''BGM_TERM_CATALOG''');
	EXECUTE('UPDATE ADS_KEY_VALUE_OBJECTS SET OBJECT_TITLE = ''System'' WHERE OBJECT_TYPE = ''SM_SYSTEM''');
	EXECUTE('UPDATE ADS_KEY_VALUE_OBJECTS SET OBJECT_TITLE = ''Environment'' WHERE OBJECT_TYPE = ''SM_ENVIRONMENT''');
	EXECUTE('UPDATE ADS_KEY_VALUE_OBJECTS SET OBJECT_TITLE = ''Table'' WHERE OBJECT_TYPE = ''SM_TABLE''');
	EXECUTE('UPDATE ADS_KEY_VALUE_OBJECTS SET OBJECT_TITLE = ''Column'' WHERE OBJECT_TYPE = ''SM_COLUMN''');
	EXECUTE('UPDATE ADS_KEY_VALUE_OBJECTS SET OBJECT_TITLE = '''' WHERE OBJECT_TYPE = ''SM_COMPONENT''');

	EXECUTE('UPDATE ADS_KEY_VALUE_OBJECTS SET OBJECT_TITLE = ''Project'' WHERE OBJECT_TYPE = ''MM_PROJECT''');
	EXECUTE('UPDATE ADS_KEY_VALUE_OBJECTS SET OBJECT_TITLE = ''Subject'' WHERE OBJECT_TYPE = ''MM_SUBJECT''');
	EXECUTE('UPDATE ADS_KEY_VALUE_OBJECTS SET OBJECT_TITLE = ''Mapping'' WHERE OBJECT_TYPE = ''MM_MAPPING''');
	EXECUTE('UPDATE ADS_KEY_VALUE_OBJECTS SET OBJECT_TITLE = ''Mapping Specification'' WHERE OBJECT_TYPE = ''MM_MAPPING_ROW''');

	EXECUTE('UPDATE ADS_KEY_VALUE_OBJECTS SET OBJECT_TITLE = '''' WHERE OBJECT_TYPE = ''MT_DEFINITION''');
	EXECUTE('UPDATE ADS_KEY_VALUE_OBJECTS SET OBJECT_TITLE = '''' WHERE OBJECT_TYPE = ''MT_DEFINITION_VALUE''');
	EXECUTE('UPDATE ADS_KEY_VALUE_OBJECTS SET OBJECT_TITLE = '''' WHERE OBJECT_TYPE = ''ADS_KEY_VALUE''');

	EXECUTE('UPDATE ADS_KEY_VALUE_OBJECTS SET OBJECT_TITLE = ''Project'' WHERE OBJECT_TYPE = ''REQM_PROJECT''');
	EXECUTE('UPDATE ADS_KEY_VALUE_OBJECTS SET OBJECT_TITLE = ''Subject'' WHERE OBJECT_TYPE = ''REQM_SUBJECT''');
	EXECUTE('UPDATE ADS_KEY_VALUE_OBJECTS SET OBJECT_TITLE = ''Specification'' WHERE OBJECT_TYPE = ''REQM_SPECIFICATION''');
	EXECUTE('UPDATE ADS_KEY_VALUE_OBJECTS SET OBJECT_TITLE = ''Specification Template'' WHERE OBJECT_TYPE = ''REQM_SPECIFICATION_TEMPLATE''');
	EXECUTE('UPDATE ADS_KEY_VALUE_OBJECTS SET OBJECT_TITLE = ''Artifact'' WHERE OBJECT_TYPE = ''REQM_ARTIFACT''');
	EXECUTE('UPDATE ADS_KEY_VALUE_OBJECTS SET OBJECT_TITLE = ''Specification Artifact'' WHERE OBJECT_TYPE = ''REQM_SPECIFICATION_ARTIFACT''');

	EXECUTE('UPDATE ADS_KEY_VALUE_OBJECTS SET OBJECT_TITLE = '''' WHERE OBJECT_TYPE = ''MM_GRAPHICAL_PROPERTIES''');

	EXECUTE('UPDATE ADS_KEY_VALUE_OBJECTS SET OBJECT_TITLE = ''Report'' WHERE OBJECT_TYPE = ''REPM_REPORT''');
	EXECUTE('UPDATE ADS_KEY_VALUE_OBJECTS SET OBJECT_TITLE = ''Chart'' WHERE OBJECT_TYPE = ''REPM_CHART''');

	EXECUTE('UPDATE ADS_KEY_VALUE_OBJECTS SET OBJECT_TITLE = ''User'' WHERE OBJECT_TYPE = ''ADS_USER''');
	EXECUTE('UPDATE ADS_KEY_VALUE_OBJECTS SET OBJECT_TITLE = ''Profile'' WHERE OBJECT_TYPE = ''ADS_PROFILE''');

	EXECUTE('UPDATE ADS_KEY_VALUE_OBJECTS SET OBJECT_TITLE = ''Category'' WHERE OBJECT_TYPE = ''REPM_CATEGORY''');
	EXECUTE('UPDATE ADS_KEY_VALUE_OBJECTS SET OBJECT_TITLE = ''Dashboard'' WHERE OBJECT_TYPE = ''REPM_DASHBOARD''');

	EXECUTE('UPDATE ADS_KEY_VALUE_OBJECTS SET OBJECT_TITLE = ''Category'' WHERE OBJECT_TYPE = ''BGM_CATEGORY''');
	EXECUTE('UPDATE ADS_KEY_VALUE_OBJECTS SET OBJECT_TITLE = ''Business Term'' WHERE OBJECT_TYPE = ''BGM_TERM''');

	EXECUTE('UPDATE ADS_KEY_VALUE_OBJECTS SET OBJECT_TITLE = '''' WHERE OBJECT_TYPE = ''SM_DATABASE_OPTIONS''');

	EXECUTE('UPDATE ADS_KEY_VALUE_OBJECTS SET OBJECT_TITLE = ''Email Template'' WHERE OBJECT_TYPE = ''REQM_EMAIL_TEMPLATE''');

	EXECUTE('UPDATE ADS_KEY_VALUE_OBJECTS SET OBJECT_TITLE = '''' WHERE OBJECT_TYPE = ''ADS_MAIL_CMD''');

	EXECUTE('UPDATE ADS_KEY_VALUE_OBJECTS SET OBJECT_TITLE = ''Test Case'' WHERE OBJECT_TYPE = ''TESTCASE_PLAN''');

	EXECUTE('UPDATE ADS_KEY_VALUE_OBJECTS SET OBJECT_TITLE = ''Cat'' WHERE OBJECT_TYPE = ''CAT''');
	EXECUTE('UPDATE ADS_KEY_VALUE_OBJECTS SET OBJECT_TITLE = ''Workflow'' WHERE OBJECT_TYPE = ''CATFX_WORKFLOW''');

	EXECUTE('UPDATE ADS_KEY_VALUE_OBJECTS SET OBJECT_TITLE = ''Business Rule'' WHERE OBJECT_TYPE = ''BGM_RULE''');
	EXECUTE('UPDATE ADS_KEY_VALUE_OBJECTS SET OBJECT_TITLE = ''Business Policy'' WHERE OBJECT_TYPE = ''BGM_POLICY''');

	EXECUTE('UPDATE ADS_KEY_VALUE_OBJECTS SET OBJECT_TITLE = ''Tag'' WHERE OBJECT_TYPE = ''TAG''');

	EXECUTE('UPDATE ADS_KEY_VALUE_OBJECTS SET OBJECT_TITLE = '''' WHERE OBJECT_TYPE = ''BGM_STEWARDSHIP_GOALS''');

	EXECUTE('UPDATE ADS_KEY_VALUE_OBJECTS SET OBJECT_TITLE = ''Code Value'' WHERE OBJECT_TYPE = ''CSM_CODE_VALUE''');

	EXECUTE('UPDATE ADS_KEY_VALUE_OBJECTS SET OBJECT_TITLE = ''Index'' WHERE OBJECT_TYPE = ''SM_INDEX''');

	EXECUTE('UPDATE ADS_KEY_VALUE_OBJECTS SET OBJECT_TITLE = ''Category'' WHERE OBJECT_TYPE = ''BGM_TERM_CATALOG''');
	EXECUTE('UPDATE ADS_KEY_VALUE_OBJECTS SET OBJECT_TITLE = ''Category'' WHERE OBJECT_TYPE = ''BGM_POLICY_CATALOG''');
	EXECUTE('UPDATE ADS_KEY_VALUE_OBJECTS SET OBJECT_TITLE = ''Category'' WHERE OBJECT_TYPE = ''BGM_RULE_CATALOG''')
	;
	EXECUTE('UPDATE ADS_KEY_VALUE_OBJECTS SET OBJECT_TITLE = '''' WHERE OBJECT_TYPE = ''AMM_LICENSE''');
	EXECUTE('UPDATE ADS_KEY_VALUE_OBJECTS SET OBJECT_TITLE = ''Form'' WHERE OBJECT_TYPE = ''FORM''');

	EXECUTE('UPDATE ADS_KEY_VALUE_OBJECTS SET OBJECT_TITLE = '''' WHERE OBJECT_TYPE = ''RDM_OBJECT_VALUE''');
	EXECUTE('UPDATE ADS_KEY_VALUE_OBJECTS SET OBJECT_TITLE = ''Project'' WHERE OBJECT_TYPE = ''RM_PROJECT''');
	EXECUTE('UPDATE ADS_KEY_VALUE_OBJECTS SET OBJECT_TITLE = ''Release'' WHERE OBJECT_TYPE = ''RM_RELEASE''');
	EXECUTE('UPDATE ADS_KEY_VALUE_OBJECTS SET OBJECT_TITLE = ''Migration Document'' WHERE OBJECT_TYPE = ''RM_MIGRATION_DOCUMENT''');
	EXECUTE('UPDATE ADS_KEY_VALUE_OBJECTS SET OBJECT_TITLE = ''History'' WHERE OBJECT_TYPE = ''RM_HISTORY''');
	EXECUTE('UPDATE ADS_KEY_VALUE_OBJECTS SET OBJECT_TITLE = ''Environment'' WHERE OBJECT_TYPE = ''RM_ENVIRONMENT''');
	EXECUTE('UPDATE ADS_KEY_VALUE_OBJECTS SET OBJECT_TITLE = ''Migration Object'' WHERE OBJECT_TYPE = ''RM_MIGRATION_OBJECT''');
	EXECUTE('UPDATE ADS_KEY_VALUE_OBJECTS SET OBJECT_TITLE = ''Migration Status'' WHERE OBJECT_TYPE = ''RM_MIGRATION_STATUS''');
	EXECUTE('UPDATE ADS_KEY_VALUE_OBJECTS SET OBJECT_TITLE = ''Settings'' WHERE OBJECT_TYPE = ''RM_SYSTEM_SETTINGS''');
	EXECUTE('UPDATE ADS_KEY_VALUE_OBJECTS SET OBJECT_TITLE = ''Migration Object Type'' WHERE OBJECT_TYPE = ''RM_MIGRATION_OBJECT_TYPE''');

	EXECUTE('UPDATE ADS_KEY_VALUE_OBJECTS SET OBJECT_TITLE = ''Metadata'' WHERE OBJECT_TYPE = ''SM_METADATA''');

	EXECUTE('UPDATE ADS_KEY_VALUE_OBJECTS SET OBJECT_TITLE = ''Stage'' WHERE OBJECT_TYPE = ''ADS_WORKFLOW_STAGE''');
	EXECUTE('UPDATE ADS_KEY_VALUE_OBJECTS SET OBJECT_TITLE = ''Folder'' WHERE OBJECT_TYPE = ''ADS_WORKFLOW_FOLDER''');
	EXECUTE('UPDATE ADS_KEY_VALUE_OBJECTS SET OBJECT_TITLE = ''Workflow Assignment'' WHERE OBJECT_TYPE = ''ADS_WORKFLOW_ASSIGNMENT''');
	EXECUTE('UPDATE ADS_KEY_VALUE_OBJECTS SET OBJECT_TITLE = ''Workflow'' WHERE OBJECT_TYPE = ''ADS_WORKFLOW''');
END
GO
IF NOT EXISTS (SELECT *
 	       FROM   SYSOBJECTS
 	       WHERE  ID = OBJECT_ID(N'ADS_WORKFLOW_TRIGGER_ACTION')
 		      AND TYPE = 'U')

   BEGIN
   DECLARE @ENV_OBJECT_TYPE_ID BIGINT;
   DECLARE @TABLE_OBJECT_TYPE_ID BIGINT;
   DECLARE @COLUMN_OBJECT_TYPE_ID BIGINT;
   DECLARE @MAPPING_OBJECT_TYPE_ID BIGINT;
   DECLARE @BGM_TERM_OBJECT_TYPE_ID BIGINT;

    SELECT @ENV_OBJECT_TYPE_ID = (SELECT TOP(1) OBJECT_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE='SM_ENVIRONMENT');
    SELECT @TABLE_OBJECT_TYPE_ID = (SELECT TOP(1) OBJECT_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE='SM_TABLE');
    SELECT @COLUMN_OBJECT_TYPE_ID = (SELECT TOP(1) OBJECT_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE='SM_COLUMN');
    SELECT @MAPPING_OBJECT_TYPE_ID = (SELECT TOP(1) OBJECT_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE='MM_MAPPING');
    SELECT @BGM_TERM_OBJECT_TYPE_ID = (SELECT TOP(1) OBJECT_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE='BGM_TERM');

      EXECUTE ('CREATE TABLE ADS_WORKFLOW_TRIGGER_ACTION(
		WFTA_ID BIGINT NOT NULL IDENTITY(1,1),
		NAME VARCHAR(255) NOT NULL,
		TITLE VARCHAR(255) NOT NULL,
		DESCRIPTION VARCHAR(MAX) NULL,
		STATUS_TITLE VARCHAR(50) NULL,
		OBJECT_TYPE_ID BIGINT NOT NULL,
		FILENAME VARCHAR(255) NULL,
		METHOD VARCHAR(255) NULL,
		NODE_TYPE VARCHAR(1) NOT NULL,
		CONSTRAINT PK_WF_TRIGGER_ACTION PRIMARY KEY(WFTA_ID),
		CONSTRAINT FK_WF_T_A_OTYPE_ID FOREIGN KEY(OBJECT_TYPE_ID) REFERENCES ADS_KEY_VALUE_OBJECTS(OBJECT_TYPE_ID))');
		INSERT INTO ADS_WORKFLOW_TRIGGER_ACTION  ([NAME],[TITLE],[DESCRIPTION],[STATUS_TITLE],[OBJECT_TYPE_ID],[FILENAME],[METHOD],[NODE_TYPE]) VALUES('ON_CREATE','On Create','Env On Create','Draft',@ENV_OBJECT_TYPE_ID,'SM_Triggers.js','onEnvCreate','T');
		INSERT INTO ADS_WORKFLOW_TRIGGER_ACTION  ([NAME],[TITLE],[DESCRIPTION],[STATUS_TITLE],[OBJECT_TYPE_ID],[FILENAME],[METHOD],[NODE_TYPE]) VALUES('ON_CREATE','On Create','Tab On Create','Draft',@TABLE_OBJECT_TYPE_ID,'SM_Triggers.js','onTabCreate','T');
		INSERT INTO ADS_WORKFLOW_TRIGGER_ACTION  ([NAME],[TITLE],[DESCRIPTION],[STATUS_TITLE],[OBJECT_TYPE_ID],[FILENAME],[METHOD],[NODE_TYPE]) VALUES('ON_CREATE','On Create','Col On Create','Draft',@COLUMN_OBJECT_TYPE_ID,'SM_Triggers.js','onColCreate','T');
		INSERT INTO ADS_WORKFLOW_TRIGGER_ACTION  ([NAME],[TITLE],[DESCRIPTION],[STATUS_TITLE],[OBJECT_TYPE_ID],[FILENAME],[METHOD],[NODE_TYPE]) VALUES('ON_CREATE','On Create','On Create','Draft',@MAPPING_OBJECT_TYPE_ID,'MM_Triggers.js','onMapCreate','T');
		INSERT INTO ADS_WORKFLOW_TRIGGER_ACTION  ([NAME],[TITLE],[DESCRIPTION],[STATUS_TITLE],[OBJECT_TYPE_ID],[FILENAME],[METHOD],[NODE_TYPE]) VALUES('ON_CREATE','On Create','On Create','Draft',@BGM_TERM_OBJECT_TYPE_ID,'BGM_Triggers.js','onTermCreate','T');
		INSERT INTO ADS_WORKFLOW_TRIGGER_ACTION  ([NAME],[TITLE],[DESCRIPTION],[STATUS_TITLE],[OBJECT_TYPE_ID],[FILENAME],[METHOD],[NODE_TYPE]) VALUES('PUBLISH','Publish','Publish','Published',@ENV_OBJECT_TYPE_ID,'SM_Actions.js','onPublish','A');
		INSERT INTO ADS_WORKFLOW_TRIGGER_ACTION  ([NAME],[TITLE],[DESCRIPTION],[STATUS_TITLE],[OBJECT_TYPE_ID],[FILENAME],[METHOD],[NODE_TYPE]) VALUES('PUBLISH','Publish','Publish','Published',@TABLE_OBJECT_TYPE_ID,'SM_Actions.js','onPublish','A');
		INSERT INTO ADS_WORKFLOW_TRIGGER_ACTION  ([NAME],[TITLE],[DESCRIPTION],[STATUS_TITLE],[OBJECT_TYPE_ID],[FILENAME],[METHOD],[NODE_TYPE]) VALUES('PUBLISH','Publish','Publish','Published',@COLUMN_OBJECT_TYPE_ID,'SM_Actions.js','onPublish','A');
		INSERT INTO ADS_WORKFLOW_TRIGGER_ACTION  ([NAME],[TITLE],[DESCRIPTION],[STATUS_TITLE],[OBJECT_TYPE_ID],[FILENAME],[METHOD],[NODE_TYPE]) VALUES('PUBLISH','Publish','Publish','Published',@MAPPING_OBJECT_TYPE_ID,'MM_Actions.js','onMapPublish','A');
		INSERT INTO ADS_WORKFLOW_TRIGGER_ACTION  ([NAME],[TITLE],[DESCRIPTION],[STATUS_TITLE],[OBJECT_TYPE_ID],[FILENAME],[METHOD],[NODE_TYPE]) VALUES('PUBLISH','Publish','Publish','Published',@BGM_TERM_OBJECT_TYPE_ID,'BGM_Actions.js','onBusinessTermPublish','A');

   END
GO


IF COL_LENGTH('ADS_WORKFLOW', 'WFTA_ID') IS NULL
    BEGIN
        ALTER TABLE ADS_WORKFLOW ADD WFTA_ID BIGINT NULL;
		ALTER TABLE ADS_WORKFLOW ADD CONSTRAINT FK_ADS_WF_WFTA_ID FOREIGN KEY (WFTA_ID) REFERENCES ADS_WORKFLOW_TRIGGER_ACTION(WFTA_ID) ON DELETE CASCADE;
    END
GO

IF COL_LENGTH('ADS_WORKFLOW_STATUS', 'WFG_ID') IS NULL
    BEGIN
        ALTER TABLE ADS_WORKFLOW_STATUS ADD WFG_ID BIGINT NULL;
		ALTER TABLE ADS_WORKFLOW_STATUS DROP CONSTRAINT FK_ADS_WF_STATUS_OBJ_TYPE_ID;
		ALTER TABLE ADS_WORKFLOW_STATUS ADD CONSTRAINT FK_ADS_WF_STATUS_OBJ_TYPE_ID FOREIGN KEY(OBJECT_TYPE_ID) REFERENCES ADS_KEY_VALUE_OBJECTS (OBJECT_TYPE_ID);
		ALTER TABLE ADS_WORKFLOW_STATUS DROP CONSTRAINT FK_ADS_WF_STATUS_WFN_ID;
		ALTER TABLE ADS_WORKFLOW_STATUS ADD CONSTRAINT FK_ADS_WF_STATUS_WFN_ID FOREIGN KEY(WFN_ID) REFERENCES ADS_WORKFLOW_NODE (WFN_ID);
		ALTER TABLE ADS_WORKFLOW_STATUS ADD CONSTRAINT FK_ADS_WF_WFG_ID FOREIGN KEY (WFG_ID) REFERENCES ADS_WORKFLOW_ASSIGNMENT(WFG_ID) ON DELETE CASCADE;
    END
GO

IF NOT EXISTS(SELECT * FROM sys.indexes WHERE name = 'RM_HIST_OBJECTID_IDX' AND object_id = OBJECT_ID('RM_HISTORY'))
	BEGIN
		EXECUTE('CREATE INDEX RM_HIST_OBJECTID_IDX ON RM_HISTORY (OBJECTID)');
	END
GO
IF NOT EXISTS(SELECT * FROM sys.indexes WHERE name = 'RM_HIST_OBJECTTYPEID_IDX' AND object_id = OBJECT_ID('RM_HISTORY'))
	BEGIN
		EXECUTE('CREATE INDEX RM_HIST_OBJECTTYPEID_IDX ON RM_HISTORY (OBJECTTYPEID)');
	END
GO
IF NOT EXISTS(SELECT * FROM sys.indexes WHERE name = 'WF_STATUS_OBJECT_TYPE_ID_IDX' AND object_id = OBJECT_ID('ADS_WORKFLOW_STATUS'))
	BEGIN
		EXECUTE('CREATE INDEX WF_STATUS_OBJECT_TYPE_ID_IDX ON ADS_WORKFLOW_STATUS (OBJECT_TYPE_ID)');
	END
GO
IF NOT EXISTS(SELECT * FROM sys.indexes WHERE name = 'WF_STATUS_WFN_ID_IDX' AND object_id = OBJECT_ID('ADS_WORKFLOW_STATUS'))
	BEGIN
		EXECUTE('CREATE INDEX WF_STATUS_WFN_ID_IDX ON ADS_WORKFLOW_STATUS (WFN_ID)');
	END
GO
IF NOT EXISTS(SELECT * FROM sys.indexes WHERE name = 'WF_STATUS_WFG_ID_IDX' AND object_id = OBJECT_ID('ADS_WORKFLOW_STATUS'))
	BEGIN
		EXECUTE('CREATE INDEX WF_STATUS_WFG_ID_IDX ON ADS_WORKFLOW_STATUS (WFG_ID)');
	END
GO

IF EXISTS(SELECT * FROM SYS.VIEWS WHERE NAME = 'ADS_WORKFLOW_STATUS_V')
	BEGIN
            DROP VIEW ADS_WORKFLOW_STATUS_V;
	END
GO

CREATE VIEW ADS_WORKFLOW_STATUS_V
 AS
   WITH objectstatus
     AS (SELECT AWN.node_id,
                AWN.node_type,
                awn.wfn_id,
                object_id, wf_id,
                AWS.object_type_id,
				AWS.WFG_ID
         FROM   ads_workflow_node AWN
                JOIN ads_workflow_status AWS
                  ON AWN.wfn_id = AWS.wfn_id
        )

SELECT CASE
         WHEN node_type = 'A' THEN (SELECT status_title
                                    FROM   ads_workflow_trigger_action
                                    WHERE  wfta_id = objectstatus.node_id)
         WHEN node_type = 'S' THEN (SELECT status_title
                                    FROM   ads_workflow_stage
                                    WHERE  wfs_id = objectstatus.node_id)
         WHEN node_type = 'T' THEN (SELECT status_title
                                    FROM   ads_workflow_trigger_action
                                    WHERE  wfta_id = objectstatus.node_id)
         ELSE ''
       END AS STATUS_TITLE ,
	   object_id,
	   objectstatus.object_type_id,node_id,objectstatus.WF_ID,aw.WORKFLOW_NAME, objectstatus.wfn_id,objectstatus.node_type, objectstatus.WFG_ID
FROM   objectstatus join ADS_WORKFLOW aw on objectstatus.WF_ID = aw.WF_ID;
GO

IF EXISTS (SELECT * FROM SYS.OBJECTS WHERE OBJECT_ID = OBJECT_ID(N'FN_GET_OBJECT_HIR') AND TYPE IN (N'FN', N'IF', N'TF', N'FS', N'FT'))
	BEGIN
		DROP FUNCTION FN_GET_OBJECT_HIR;
	END
GO
CREATE FUNCTION FN_GET_OBJECT_HIR(@OBJECT_ID BIGINT, @OBJECT_TYPE_ID BIGINT, @CHILD_CONFIG_OBJECT_TYPE_ID BIGINT)
RETURNS @TT_OBJECT_PARENT_DETAILS TABLE(OBJECT_ID BIGINT, OBJECT_TYPE_ID BIGINT, OBJECT_TYPE VARCHAR(64), OBJECT_REF_KEY VARCHAR(1024), OBJECT_NAME VARCHAR(MAX), OBJECT_ORDER BIGINT, OBJECT_LEVEL INT) AS
BEGIN

	DECLARE @SYSTEM_BASED BIT;
	DECLARE @TEMP_OBJECT_ID BIGINT;
	DECLARE @TEMP_OBJECT_TYPE_ID BIGINT;
	DECLARE @TEMP_OBJECT_TYPE VARCHAR(255);
	DECLARE @CHILD_CONFIG_OBJECT_TYPE VARCHAR(255);
	DECLARE @KEY_VALUE_OBJECT_TYPE_ID BIGINT;
	DECLARE @KEY_VALUE_OBJECT_TYPE VARCHAR(255);
	DECLARE @OBJECT_MODULE_ID VARCHAR(512);
	DECLARE @OBJECT_LEVEL VARCHAR(512);
	DECLARE @TBL_REF_COUNT INT = 0;
	DECLARE @TBL_REF_IND INT = 0;
	DECLARE @CURRENT_TABLE_NAME VARCHAR(MAX);
	DECLARE @CURRENT_PARENT_COLUMN_NAME VARCHAR(MAX);
	DECLARE @CURRENT_COLUMN_NAME VARCHAR(MAX);
	DECLARE @PREVIOUS_OBJECT_ID BIGINT;
	DECLARE @CURRENT_OBJECT_ID VARCHAR(MAX);
	DECLARE @CURRENT_OBJECT_TYPE_ID VARCHAR(MAX);
	DECLARE @CURRENT_OBJECT_TYPE VARCHAR(MAX);
	DECLARE @CURRENT_OBJECT_PARENT_TYPE VARCHAR(256);
	DECLARE @CURRENT_OBJECT_LEVEL INT;
	DECLARE @CURRENT_OBJECT_NAME VARCHAR(MAX);
	DECLARE @CURRENT_OBJECT_PARENT_NAME VARCHAR(MAX);


	DECLARE @MAP_ID BIGINT;
	DECLARE @SUBJECT_ID BIGINT;
	DECLARE @PROJECT_ID BIGINT;

	DECLARE @STCM_ID BIGINT;
	DECLARE @STM_ID BIGINT;
	DECLARE @SCE_DATABASE_TYPE VARCHAR(64);
	DECLARE @SCE_ID BIGINT;
	DECLARE @SYSTEM_ID BIGINT;

	DECLARE @CATEGORY_ID BIGINT;
	DECLARE @R_CATEGORY_ID BIGINT;


	DECLARE @TT_OBJECT_PARENT_TBL_REF TABLE (OBJECT_TYPE_ID BIGINT, OBJECT_TYPE VARCHAR(512), OBJECT_TABLE VARCHAR(512), OBJECT_TABLE_COLUMN VARCHAR(512), OBJECT_PARENT_TYPE VARCHAR(512), OBJECT_PARENT_COLUMN_ID VARCHAR(512), OBJECT_LEVEL INT, OBJECT_REF_KEY VARCHAR(1024));
	DECLARE @TT_OBJECT_PARENT_IDS TABLE (ROW_ID BIGINT IDENTITY(1,1), OBJECT_ID BIGINT, OBJECT_TYPE VARCHAR(64), OBJECT_NAME VARCHAR(MAX));

	SELECT @KEY_VALUE_OBJECT_TYPE_ID = OBJECT_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE = 'ADS_KEY_VALUE';
	SELECT @CHILD_CONFIG_OBJECT_TYPE = OBJECT_TYPE FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE_ID = @CHILD_CONFIG_OBJECT_TYPE_ID;
	SELECT @KEY_VALUE_OBJECT_TYPE = OBJECT_TYPE, @OBJECT_MODULE_ID = MODULE_KEY, @OBJECT_LEVEL = OBJECT_LEVEL, @SYSTEM_BASED = SYSTEM_BASED FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE_ID = @OBJECT_TYPE_ID;

	SET @TEMP_OBJECT_ID = @OBJECT_ID;
	SET @TEMP_OBJECT_TYPE_ID = @OBJECT_TYPE_ID;
	SET @TEMP_OBJECT_TYPE = @KEY_VALUE_OBJECT_TYPE;
	IF @CHILD_CONFIG_OBJECT_TYPE_ID IS NOT NULL AND @CHILD_CONFIG_OBJECT_TYPE_ID > 0 BEGIN
		SELECT @TEMP_OBJECT_ID = KV_ID FROM ADS_KEY_VALUE WHERE OBJECT_ID = @OBJECT_ID AND OBJECT_TYPE_ID = @OBJECT_TYPE_ID AND KEY_NAME = @KEY_VALUE_OBJECT_TYPE + '#' + @CHILD_CONFIG_OBJECT_TYPE;
		SET @TEMP_OBJECT_TYPE_ID = @KEY_VALUE_OBJECT_TYPE_ID;
		SET @TEMP_OBJECT_TYPE = @CHILD_CONFIG_OBJECT_TYPE;
	END;

	WITH PARENTS AS
	  (SELECT *
	   FROM ADS_KEY_VALUE_OBJECTS
	   WHERE OBJECT_TYPE = @KEY_VALUE_OBJECT_TYPE
	   UNION ALL SELECT ADS_KEY_VALUE_OBJECTS.*
	   FROM ADS_KEY_VALUE_OBJECTS
	   JOIN PARENTS ON ADS_KEY_VALUE_OBJECTS.OBJECT_TYPE = PARENTS.OBJECT_PARENT_TYPE)
	INSERT INTO @TT_OBJECT_PARENT_TBL_REF
	SELECT P.OBJECT_TYPE_ID,
		   P.OBJECT_TYPE,
		   P.OBJECT_TABLE,
		   P.OBJECT_TABLE_COLUMN,
		   P.OBJECT_PARENT_TYPE,
		   P.OBJECT_PARENT_COLUMN_ID,
		   P.OBJECT_LEVEL,
		   P.OBJECT_TYPE + '#' + @TEMP_OBJECT_TYPE OBJECT_REF_KEY
	FROM PARENTS P;

	SELECT @TBL_REF_COUNT = (SELECT @@ROWCOUNT);
	SET @TBL_REF_IND = 1;
	SET @PREVIOUS_OBJECT_ID = @OBJECT_ID;
	WHILE (@TBL_REF_IND <= @TBL_REF_COUNT)
	BEGIN
		SELECT @CURRENT_TABLE_NAME = OBJECT_TABLE,
			   @CURRENT_PARENT_COLUMN_NAME = OBJECT_PARENT_COLUMN_ID,
			   @CURRENT_OBJECT_TYPE_ID = OBJECT_TYPE_ID,
			   @CURRENT_COLUMN_NAME = OBJECT_TABLE_COLUMN,
			   @CURRENT_OBJECT_LEVEL = OBJECT_LEVEL,
			   @CURRENT_OBJECT_TYPE = OBJECT_TYPE,
			   @CURRENT_OBJECT_PARENT_TYPE = OBJECT_PARENT_TYPE
		FROM (SELECT ROW_NUMBER() OVER (ORDER BY OBJECT_LEVEL DESC) RN, * FROM @TT_OBJECT_PARENT_TBL_REF) TBL_REF
		WHERE RN >= @TBL_REF_IND AND RN<=@TBL_REF_IND;

		IF @CURRENT_PARENT_COLUMN_NAME <> '' BEGIN
			IF @OBJECT_MODULE_ID = 'com.ads.mm.permission.mm' BEGIN
				IF @CURRENT_OBJECT_TYPE = 'MM_MAPPING_ROW' BEGIN
					SELECT @MAP_ID = MD.MAP_ID, @CURRENT_OBJECT_NAME = MD.MAP_NAME FROM MAPPING_SPECIFICATION (NOLOCK) MS JOIN MAPPING_DETAILS (NOLOCK) MD
					ON MD.MAP_ID = MS.MAP_ID WHERE MAP_SEQ_ID = @PREVIOUS_OBJECT_ID;
					SET @PREVIOUS_OBJECT_ID = @MAP_ID;
					INSERT INTO @TT_OBJECT_PARENT_IDS (OBJECT_ID, OBJECT_TYPE, OBJECT_NAME) VALUES (@MAP_ID, @CURRENT_OBJECT_PARENT_TYPE, @CURRENT_OBJECT_NAME);
				END
				ELSE IF @CURRENT_OBJECT_TYPE = 'MM_MAPPING' BEGIN
					SELECT @SUBJECT_ID = MD.SUBJECT_ID, @PROJECT_ID = MD.PROJECT_ID, @CURRENT_OBJECT_NAME = SD.SUBJECT_NAME, @CURRENT_OBJECT_PARENT_NAME = P.PROJ_NAME
					FROM MAPPING_DETAILS (NOLOCK) MD
					JOIN PROJECT (NOLOCK) P ON
					P.PROJ_ID = MD.PROJECT_ID
					LEFT JOIN SUBJECT_DETAILS (NOLOCK) SD
					ON SD.SUBJECT_ID = MD.SUBJECT_ID
					 WHERE MAP_ID = @PREVIOUS_OBJECT_ID;
					IF @SUBJECT_ID <> -1
						BEGIN
							SET @PREVIOUS_OBJECT_ID = @SUBJECT_ID;
							INSERT INTO @TT_OBJECT_PARENT_IDS (OBJECT_ID, OBJECT_TYPE, OBJECT_NAME) VALUES(@SUBJECT_ID, @CURRENT_OBJECT_PARENT_TYPE, @CURRENT_OBJECT_NAME);
						END
				END
				ELSE IF @CURRENT_OBJECT_TYPE = 'MM_SUBJECT' BEGIN
					IF(@SUBJECT_ID <> -1 OR @CURRENT_OBJECT_TYPE_ID = @OBJECT_TYPE_ID) BEGIN
						with object_hir_v AS
							(SELECT SD.subject_id,
									SD.parent_subject_id,
									SD.SUBJECT_NAME
							FROM subject_details (NOLOCK) SD
							WHERE SUBJECT_ID = @PREVIOUS_OBJECT_ID
							UNION ALL SELECT T.subject_id,
											T.parent_subject_id,
											T.SUBJECT_NAME
							FROM subject_details (NOLOCK) AS T
							JOIN object_hir_v cte ON T.subject_id = cte.parent_subject_id AND cte.PARENT_SUBJECT_ID <> T.PARENT_SUBJECT_ID)
							INSERT INTO @TT_OBJECT_PARENT_IDS (OBJECT_ID, OBJECT_TYPE, OBJECT_NAME)
							select SUBJECT_ID, @CURRENT_OBJECT_TYPE, SUBJECT_NAME from object_hir_v where SUBJECT_ID <> @PREVIOUS_OBJECT_ID;

							SELECT @PROJECT_ID = PROJECT_ID, @CURRENT_OBJECT_NAME = P.PROJ_NAME FROM SUBJECT_DETAILS (NOLOCK) SD
							JOIN PROJECT (NOLOCK) P ON
							P.PROJ_ID = SD.PROJECT_ID
							WHERE SUBJECT_ID = @PREVIOUS_OBJECT_ID;
							INSERT INTO @TT_OBJECT_PARENT_IDS (OBJECT_ID, OBJECT_TYPE, OBJECT_NAME) VALUES (@PROJECT_ID, 'MM_PROJECT', @CURRENT_OBJECT_NAME);
						END
						ELSE BEGIN
							SELECT @PROJECT_ID = PROJ_ID, @CURRENT_OBJECT_NAME = P.PROJ_NAME
							FROM PROJECT (NOLOCK) P
							JOIN MAPPING_DETAILS (NOLOCK) MD
							ON P.PROJ_ID = MD.PROJECT_ID WHERE MD.MAP_ID = @PREVIOUS_OBJECT_ID;
							INSERT INTO @TT_OBJECT_PARENT_IDS (OBJECT_ID, OBJECT_TYPE, OBJECT_NAME) VALUES (@PROJECT_ID, 'MM_PROJECT', @CURRENT_OBJECT_NAME);
						END
				END
				ELSE IF @CURRENT_OBJECT_TYPE = 'MM_PROJECT' BEGIN
					INSERT INTO @TT_OBJECT_PARENT_IDS VALUES(-1, @CURRENT_OBJECT_PARENT_TYPE, 'MAPPINGS')
				END
			END
			ELSE IF @OBJECT_MODULE_ID = 'com.ads.mm.permission.sm' BEGIN
				IF @CURRENT_OBJECT_TYPE = 'SM_COLUMN' BEGIN
					SELECT @STM_ID = STM_ID, @CURRENT_OBJECT_NAME = TABLE_NAME FROM SYSTEM_TABLE_COLUMNS_METADATA (NOLOCK) WHERE STCM_ID = @PREVIOUS_OBJECT_ID;
					SET @PREVIOUS_OBJECT_ID = @STM_ID;
					INSERT INTO @TT_OBJECT_PARENT_IDS (OBJECT_ID, OBJECT_TYPE, OBJECT_NAME) VALUES (@STM_ID, @CURRENT_OBJECT_PARENT_TYPE, @CURRENT_OBJECT_NAME);
				END
				ELSE IF @CURRENT_OBJECT_TYPE = 'SM_TABLE' BEGIN
					SELECT @SCE_ID = SCE_ID FROM SYSTEM_TABLE_METADATA (NOLOCK) WHERE STM_ID = @PREVIOUS_OBJECT_ID;
					SELECT @SCE_DATABASE_TYPE = DATABASE_TYPE,  @CURRENT_OBJECT_NAME = SYSTEM_ENVIRONMENT_NAME FROM SYS_CON_ENVIRONMENTS (NOLOCK) WHERE SCE_ID = @SCE_ID;
					IF @SCE_DATABASE_TYPE = 'XSD' OR @SCE_DATABASE_TYPE = 'JSON' BEGIN
						WITH ENV_OBJECTS AS (
							SELECT STM_ID, STCM_ID, TABLE_NAME, COLUMN_NAME FROM SYSTEM_TABLE_COLUMNS_METADATA (NOLOCK) WHERE SCE_ID = @SCE_ID
						), OBJ_HIR_V AS (
							SELECT STM_ID, TABLE_NAME, COLUMN_NAME
							FROM ENV_OBJECTS
							WHERE STM_ID = @PREVIOUS_OBJECT_ID
							UNION ALL
							SELECT EO.STM_ID, EO.TABLE_NAME, EO.COLUMN_NAME
							FROM ENV_OBJECTS EO
							JOIN OBJ_HIR_V CTE ON EO.COLUMN_NAME = CTE.TABLE_NAME AND CTE.TABLE_NAME <> EO.TABLE_NAME
						)
						INSERT INTO @TT_OBJECT_PARENT_IDS  (OBJECT_ID, OBJECT_TYPE, OBJECT_NAME)
						SELECT DISTINCT STM_ID, @CURRENT_OBJECT_TYPE, TABLE_NAME FROM OBJ_HIR_V WHERE STM_ID <> @PREVIOUS_OBJECT_ID
					END
					SET @PREVIOUS_OBJECT_ID = @SCE_ID;
					INSERT INTO @TT_OBJECT_PARENT_IDS (OBJECT_ID, OBJECT_TYPE, OBJECT_NAME) VALUES (@SCE_ID, @CURRENT_OBJECT_PARENT_TYPE, @CURRENT_OBJECT_NAME);
				END
				ELSE IF @CURRENT_OBJECT_TYPE = 'SM_ENVIRONMENT' BEGIN
					SELECT @SYSTEM_ID = SYSTEM_ID, @CURRENT_OBJECT_NAME = SYSTEM_NAME FROM SYS_CON_ENVIRONMENTS (NOLOCK) WHERE SCE_ID = @PREVIOUS_OBJECT_ID;
					SET @PREVIOUS_OBJECT_ID = @SYSTEM_ID;
					INSERT INTO @TT_OBJECT_PARENT_IDS (OBJECT_ID, OBJECT_TYPE, OBJECT_NAME) VALUES (@SYSTEM_ID, @CURRENT_OBJECT_PARENT_TYPE, @CURRENT_OBJECT_NAME)
				END
                ELSE IF @CURRENT_OBJECT_TYPE = 'SM_SYSTEM' BEGIN
					INSERT INTO @TT_OBJECT_PARENT_IDS (OBJECT_ID, OBJECT_TYPE, OBJECT_NAME) VALUES (-1, @CURRENT_OBJECT_PARENT_TYPE, 'METADATA')
				END
			END
			ELSE IF @OBJECT_MODULE_ID = 'com.ads.mm.permission.bgm' BEGIN

				IF @SYSTEM_BASED = 1 BEGIN

				IF @CURRENT_OBJECT_TYPE = 'BGM_TERM' BEGIN
					SELECT @CATEGORY_ID = BGC.CATEGORY_ID, @CURRENT_OBJECT_NAME = BGC.CATEGORY_NAME
					FROM BUSINESS_TERMS (NOLOCK) BT
					JOIN BG_CATEGORIES (NOLOCK) BGC ON BGC.CATEGORY_ID = BT.CATEGORY_ID
					WHERE BUS_TERM_ID = @PREVIOUS_OBJECT_ID;
					SET @PREVIOUS_OBJECT_ID = @CATEGORY_ID;
					INSERT INTO @TT_OBJECT_PARENT_IDS (OBJECT_ID, OBJECT_TYPE, OBJECT_NAME) VALUES (@CATEGORY_ID, @CURRENT_OBJECT_PARENT_TYPE, @CURRENT_OBJECT_NAME);
				END
					IF @CURRENT_OBJECT_TYPE = 'BGM_RULE' BEGIN
						SELECT @CATEGORY_ID = BGC.CATEGORY_ID, @CURRENT_OBJECT_NAME = BGC.CATEGORY_NAME
						FROM BG_BUSINESS_RULES (NOLOCK) BR
						JOIN BG_CATEGORIES (NOLOCK) BGC ON BGC.CATEGORY_ID = BR.CATALOG_ID
						WHERE BR.ID = @PREVIOUS_OBJECT_ID;
						SET @PREVIOUS_OBJECT_ID = @CATEGORY_ID;
						INSERT INTO @TT_OBJECT_PARENT_IDS (OBJECT_ID, OBJECT_TYPE, OBJECT_NAME) VALUES (@CATEGORY_ID, @CURRENT_OBJECT_PARENT_TYPE, @CURRENT_OBJECT_NAME);
					END
					IF @CURRENT_OBJECT_TYPE = 'BGM_POLICY' BEGIN
						SELECT @CATEGORY_ID = BGC.CATEGORY_ID, @CURRENT_OBJECT_NAME = BGC.CATEGORY_NAME
						FROM BG_POLICIES (NOLOCK) BP
						JOIN BG_CATEGORIES (NOLOCK) BGC ON BGC.CATEGORY_ID = BP.CATALOG_ID
						WHERE BP.ID = @PREVIOUS_OBJECT_ID;
						SET @PREVIOUS_OBJECT_ID = @CATEGORY_ID;
						INSERT INTO @TT_OBJECT_PARENT_IDS (OBJECT_ID, OBJECT_TYPE, OBJECT_NAME) VALUES (@CATEGORY_ID, @CURRENT_OBJECT_PARENT_TYPE, @CURRENT_OBJECT_NAME);
					END
					ELSE IF @CURRENT_OBJECT_TYPE IN ('BGM_TERM_CATALOG', 'BGM_RULE_CATALOG', 'BGM_POLICY_CATALOG') BEGIN
					with object_hir_v AS
					(SELECT BGC.CATEGORY_ID,
							BGC.PARENT_CATEGORY_ID,
							BGC.CATEGORY_NAME
					FROM BG_CATEGORIES (NOLOCK) BGC
					WHERE CATEGORY_ID = @PREVIOUS_OBJECT_ID
					UNION ALL SELECT BGC.CATEGORY_ID,
							BGC.PARENT_CATEGORY_ID,
							BGC.CATEGORY_NAME
					FROM BG_CATEGORIES (NOLOCK) BGC
					JOIN object_hir_v cte ON BGC.CATEGORY_ID = cte.PARENT_CATEGORY_ID AND cte.PARENT_CATEGORY_ID <> BGC.PARENT_CATEGORY_ID)
					INSERT INTO @TT_OBJECT_PARENT_IDS (OBJECT_ID, OBJECT_TYPE, OBJECT_NAME)
					select CATEGORY_ID, @CURRENT_OBJECT_TYPE, CATEGORY_NAME from object_hir_v where CATEGORY_ID <> @PREVIOUS_OBJECT_ID;

					INSERT INTO @TT_OBJECT_PARENT_IDS VALUES(-1, @CURRENT_OBJECT_PARENT_TYPE, 'CATALOGS')
				END
			END
				ELSE BEGIN
					IF @CURRENT_OBJECT_LEVEL = 2 BEGIN
						SELECT @CATEGORY_ID = BGC.CATEGORY_ID, @CURRENT_OBJECT_NAME = BGC.CATEGORY_NAME
						FROM BG_CUSTOM_OBJECTS (NOLOCK) BGCUO
						JOIN BG_CATEGORIES (NOLOCK) BGC ON BGC.CATEGORY_ID = BGCUO.CATEGORY_ID
						WHERE BGCUO.ID = @PREVIOUS_OBJECT_ID;
						SET @PREVIOUS_OBJECT_ID = @CATEGORY_ID;
						INSERT INTO @TT_OBJECT_PARENT_IDS (OBJECT_ID, OBJECT_TYPE, OBJECT_NAME) VALUES (@CATEGORY_ID, @CURRENT_OBJECT_PARENT_TYPE, @CURRENT_OBJECT_NAME);
                                        END
					ELSE IF @CURRENT_OBJECT_LEVEL = 1 BEGIN
						with object_hir_v AS
						(SELECT BGC.CATEGORY_ID,
								BGC.PARENT_CATEGORY_ID,
								BGC.CATEGORY_NAME
						FROM BG_CATEGORIES (NOLOCK) BGC
						WHERE CATEGORY_ID = @PREVIOUS_OBJECT_ID
						UNION ALL SELECT BGC.CATEGORY_ID,
								BGC.PARENT_CATEGORY_ID,
								BGC.CATEGORY_NAME
						FROM BG_CATEGORIES (NOLOCK) BGC
						JOIN object_hir_v cte ON BGC.CATEGORY_ID = cte.PARENT_CATEGORY_ID AND cte.PARENT_CATEGORY_ID <> BGC.PARENT_CATEGORY_ID)
						INSERT INTO @TT_OBJECT_PARENT_IDS (OBJECT_ID, OBJECT_TYPE, OBJECT_NAME)
						select CATEGORY_ID, @CURRENT_OBJECT_TYPE, CATEGORY_NAME from object_hir_v where CATEGORY_ID <> @PREVIOUS_OBJECT_ID;

						INSERT INTO @TT_OBJECT_PARENT_IDS VALUES(-1, @CURRENT_OBJECT_PARENT_TYPE, 'CATALOGS')
					END
				END

			END
		END
		SET @TBL_REF_IND = @TBL_REF_IND + 1;
	END
	INSERT INTO @TT_OBJECT_PARENT_DETAILS
	SELECT PARENT_IDS.OBJECT_ID,
		   TBL_REF.OBJECT_TYPE_ID,
		   TBL_REF.OBJECT_TYPE,
		   TBL_REF.OBJECT_REF_KEY,
		   PARENT_IDS.OBJECT_NAME,
		   PARENT_IDS.ROW_ID,
		   TBL_REF.OBJECT_LEVEL
	FROM @TT_OBJECT_PARENT_TBL_REF TBL_REF
	JOIN @TT_OBJECT_PARENT_IDS PARENT_IDS ON TBL_REF.OBJECT_TYPE = PARENT_IDS.OBJECT_TYPE;
	RETURN;
END
GO

IF EXISTS (SELECT * FROM SYS.OBJECTS WHERE OBJECT_ID = OBJECT_ID(N'FN_GET_OBJECT_NAME') AND TYPE IN (N'FN', N'IF', N'TF', N'FS', N'FT'))
	BEGIN
		DROP FUNCTION FN_GET_OBJECT_NAME;
	END
GO
CREATE FUNCTION FN_GET_OBJECT_NAME(@OBJECT_ID BIGINT, @OBJECT_TYPE_ID BIGINT)
RETURNS VARCHAR(MAX) AS
BEGIN
	DECLARE @CURRENT_OBJECT_MODULE VARCHAR(MAX);
	DECLARE @SYSTEM_BASED BIT;
	DECLARE @CURRENT_OBJECT_LEVEL INT;
	DECLARE @CURRENT_OBJECT_TITLE VARCHAR(255);
	DECLARE @CURRENT_OBJECT_TYPE_ID VARCHAR(MAX);
	DECLARE @CURRENT_OBJECT_TYPE VARCHAR(MAX);
	DECLARE @CURRENT_OBJECT_NAME VARCHAR(MAX);
	DECLARE @CURRENT_OBJECT_PATH VARCHAR(MAX) = NULL;
	DECLARE @CURRENT_OBJECT_PARENT_NAME VARCHAR(MAX);
	DECLARE @CURRENT_OBJECT_PARENT_PATH VARCHAR(MAX);



	SELECT @CURRENT_OBJECT_TYPE_ID = OBJECT_TYPE_ID, @CURRENT_OBJECT_TYPE = OBJECT_TYPE, @CURRENT_OBJECT_TITLE = OBJECT_TITLE,
		@CURRENT_OBJECT_MODULE = MODULE_KEY, @SYSTEM_BASED = SYSTEM_BASED, @CURRENT_OBJECT_LEVEL = OBJECT_LEVEL
		FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE_ID = @OBJECT_TYPE_ID;

	IF @CURRENT_OBJECT_TYPE = 'SM_METADATA' BEGIN
		SET @CURRENT_OBJECT_NAME = 'Metadata';
	END
	ELSE IF @CURRENT_OBJECT_TYPE = 'SM_SYSTEM' BEGIN
		SELECT @CURRENT_OBJECT_NAME = SYSTEM_NAME FROM SYSTEM_DEFINITION_DETAILS (NOLOCK) WHERE SYSTEM_ID = @OBJECT_ID;
	END
	ELSE IF @CURRENT_OBJECT_TYPE = 'SM_ENVIRONMENT' BEGIN
		SELECT @CURRENT_OBJECT_NAME = SYSTEM_ENVIRONMENT_NAME FROM SYS_CON_ENVIRONMENTS (NOLOCK) WHERE SCE_ID = @OBJECT_ID;
	END
	ELSE IF @CURRENT_OBJECT_TYPE = 'SM_TABLE' BEGIN
		SELECT @CURRENT_OBJECT_NAME = TABLE_NAME FROM SYSTEM_TABLE_METADATA (NOLOCK) WHERE STM_ID = @OBJECT_ID;
	END
	ELSE IF @CURRENT_OBJECT_TYPE = 'SM_COLUMN' BEGIN
		SELECT @CURRENT_OBJECT_NAME = COLUMN_NAME FROM SYSTEM_TABLE_COLUMNS_METADATA (NOLOCK) WHERE STCM_ID = @OBJECT_ID;
	END
	ELSE IF @CURRENT_OBJECT_TYPE = 'MM_PROJECTS' BEGIN
		SET @CURRENT_OBJECT_NAME = 'Projects';
	END
	ELSE IF @CURRENT_OBJECT_TYPE = 'MM_PROJECT' BEGIN
		SELECT @CURRENT_OBJECT_NAME = PROJ_NAME FROM PROJECT (NOLOCK) WHERE PROJ_ID = @OBJECT_ID;
	END
	ELSE IF @CURRENT_OBJECT_TYPE = 'MM_SUBJECT' BEGIN
		SELECT @CURRENT_OBJECT_NAME = SUBJECT_NAME FROM SUBJECT_DETAILS (NOLOCK) WHERE SUBJECT_ID = @OBJECT_ID;
	END
	ELSE IF @CURRENT_OBJECT_TYPE = 'MM_MAPPING' BEGIN
		SELECT @CURRENT_OBJECT_NAME = MAP_NAME FROM MAPPING_DETAILS (NOLOCK) WHERE MAP_ID = @OBJECT_ID;
	END
	ELSE IF @CURRENT_OBJECT_TYPE IN ('BGM_TERM_CATALOGS', 'BGM_RULE_CATALOGS', 'BGM_POLICY_CATALOGS') BEGIN
		SET @CURRENT_OBJECT_NAME = @CURRENT_OBJECT_TITLE;
	END
	ELSE IF @CURRENT_OBJECT_TYPE IN ('BGM_TERM_CATALOG', 'BGM_RULE_CATALOG', 'BGM_POLICY_CATALOG') BEGIN
		SELECT @CURRENT_OBJECT_NAME = CATEGORY_NAME FROM BG_CATEGORIES (NOLOCK) WHERE CATEGORY_ID = @OBJECT_ID;
	END
	ELSE IF @CURRENT_OBJECT_TYPE = 'BGM_TERM' BEGIN
		SELECT @CURRENT_OBJECT_NAME = BUS_TERM_NAME FROM BUSINESS_TERMS (NOLOCK) WHERE BUS_TERM_ID = @OBJECT_ID;
	END
	ELSE IF @CURRENT_OBJECT_TYPE = 'BGM_RULE' BEGIN
		SELECT @CURRENT_OBJECT_NAME = NAME FROM BG_BUSINESS_RULES (NOLOCK) WHERE ID = @OBJECT_ID;
	END
	ELSE IF @CURRENT_OBJECT_TYPE = 'BGM_POLICY' BEGIN
		SELECT @CURRENT_OBJECT_NAME = NAME FROM BG_POLICIES (NOLOCK) WHERE ID = @OBJECT_ID;
	END
	ELSE IF @CURRENT_OBJECT_MODULE = 'com.ads.mm.permission.bgm' AND @SYSTEM_BASED = 0 BEGIN
		IF @CURRENT_OBJECT_LEVEL = 0 BEGIN
			SET @CURRENT_OBJECT_NAME = @CURRENT_OBJECT_TITLE;
		END;
		ELSE IF @CURRENT_OBJECT_LEVEL = 1 BEGIN
			SELECT @CURRENT_OBJECT_NAME = CATEGORY_NAME FROM BG_CATEGORIES (NOLOCK) WHERE CATEGORY_ID = @OBJECT_ID;
		END;
		ELSE IF @CURRENT_OBJECT_LEVEL = 2 BEGIN
			SELECT @CURRENT_OBJECT_NAME = NAME FROM BG_CUSTOM_OBJECTS (NOLOCK) WHERE ID = @OBJECT_ID;
		END;
	END

	SET @CURRENT_OBJECT_PARENT_PATH = REPLACE(SUBSTRING((SELECT '/' + OBJECT_NAME AS 'data()' FROM dbo.FN_GET_OBJECT_HIR(@OBJECT_ID, @OBJECT_TYPE_ID, null) WHERE OBJECT_ID <> -1  ORDER BY OBJECT_ORDER DESC
        FOR XML PATH('') ), 2, 99999), ' /', '/') + '/' + @CURRENT_OBJECT_NAME

	RETURN CASE WHEN @CURRENT_OBJECT_PARENT_PATH IS NOT NULL THEN @CURRENT_OBJECT_PARENT_PATH ELSE @CURRENT_OBJECT_NAME END;
END
GO

IF EXISTS (SELECT * FROM SYS.OBJECTS WHERE OBJECT_ID = OBJECT_ID(N'FN_GET_WF_OBJECTS_STATUS') AND TYPE IN (N'FN', N'IF', N'TF', N'FS', N'FT'))
	BEGIN
		DROP FUNCTION FN_GET_WF_OBJECTS_STATUS;
	END
GO

CREATE FUNCTION [FN_GET_WF_OBJECTS_STATUS]
   (@WFG_ID BIGINT, @TGT_OBJECT_ID BIGINT, @TGT_OBJECT_TYPE_ID BIGINT)
   RETURNS @WF_OBJECTS_STATUS TABLE(OBJECT_ID BIGINT, OBJECT_TYPE_ID BIGINT, WFN_ID BIGINT) AS
   BEGIN
		DECLARE @TRIGGER_OBJECT_MODULE VARCHAR(512);
		DECLARE @TRIGGER_TYPE_ID BIGINT;
		DECLARE @TRIGGER_OBJECT_TYPE VARCHAR(500);
		DECLARE @TRIGGER_OBJECT_TYPE_ID BIGINT;
		DECLARE @TRIGGER_OBJECT_LEVEL INT;
		DECLARE @TRIGGER_OBJECT_SYSTEM_BASED INT;

		DECLARE @TGT_OBJECT_TYPE VARCHAR(500);
		DECLARE @TGT_OBJECT_LEVEL INT;



		declare @object_ids table(object_id bigint);

		SELECT @TRIGGER_TYPE_ID = AWTA.WFTA_ID,
		 @TRIGGER_OBJECT_TYPE_ID = AWTA.OBJECT_TYPE_ID
		FROM ADS_WORKFLOW_ASSIGNMENT AWA
		JOIN ADS_WORKFLOW AW
		ON AW.WF_ID = AWA.WF_ID
		JOIN ADS_WORKFLOW_TRIGGER_ACTION AWTA
		ON AWTA.WFTA_ID = AW.WFTA_ID
		WHERE AWA.WFG_ID = @WFG_ID;

		SELECT @TGT_OBJECT_TYPE = OBJECT_TYPE, @TGT_OBJECT_LEVEL = OBJECT_LEVEL FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE_ID = @TGT_OBJECT_TYPE_ID;

		SELECT @TRIGGER_OBJECT_TYPE = OBJECT_TYPE,
			   @TRIGGER_OBJECT_LEVEL = OBJECT_LEVEL,
			   @TRIGGER_OBJECT_MODULE = MODULE_KEY,
			   @TRIGGER_OBJECT_SYSTEM_BASED = SYSTEM_BASED
			   FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE_ID = @TRIGGER_OBJECT_TYPE_ID;

		IF @TRIGGER_OBJECT_SYSTEM_BASED = 0 BEGIN
			IF @TRIGGER_OBJECT_MODULE = 'com.ads.mm.permission.bgm' BEGIN
				IF @TRIGGER_OBJECT_LEVEL = 2 BEGIN
					IF @TGT_OBJECT_LEVEL = 1 BEGIN

						with CTE_OBJECT_HIR AS
							(SELECT BGC.CATEGORY_ID,
									BGC.PARENT_CATEGORY_ID,
									BGC.CATEGORY_NAME
							FROM BG_CATEGORIES (NOLOCK) BGC
							WHERE CATEGORY_ID = @TGT_OBJECT_ID
							UNION ALL SELECT BGC.CATEGORY_ID,
									BGC.PARENT_CATEGORY_ID,
									BGC.CATEGORY_NAME
							FROM BG_CATEGORIES (NOLOCK) BGC
							JOIN CTE_OBJECT_HIR cte ON BGC.PARENT_CATEGORY_ID = cte.CATEGORY_ID AND cte.PARENT_CATEGORY_ID <> BGC.PARENT_CATEGORY_ID)
							insert into @object_ids (object_id)
							select BGCO.ID from BG_CUSTOM_OBJECTS (NOLOCK) BGCO
							JOIN CTE_OBJECT_HIR COH
							ON COH.CATEGORY_ID = BGCO.CATEGORY_ID;

					END;

					ELSE IF @TGT_OBJECT_LEVEL = 0 BEGIN
						insert into @object_ids (object_id)
						select BCO.ID from BG_CUSTOM_OBJECTS (NOLOCK) BCO WHERE BCO.OBJECT_TYPE_ID = @TRIGGER_OBJECT_TYPE_ID;
					END;
				END;
			END;
		END;

		ELSE IF @TRIGGER_OBJECT_TYPE = 'SM_COLUMN' BEGIN
			IF @TGT_OBJECT_TYPE = 'SM_TABLE' BEGIN

				WITH ENV_OBJECTS AS (
					SELECT STM_ID, STCM_ID, TABLE_NAME, COLUMN_NAME FROM SYSTEM_TABLE_COLUMNS_METADATA (NOLOCK) STCM
					WHERE STCM.VALID = 1 AND SCE_ID = (SELECT SCE_ID FROM SYSTEM_TABLE_METADATA (NOLOCK) WHERE STM_ID = @TGT_OBJECT_ID)
				), OBJ_HIR_V AS (
					SELECT STM_ID, TABLE_NAME, COLUMN_NAME
					FROM ENV_OBJECTS
					WHERE STM_ID = @TGT_OBJECT_ID
					UNION ALL
					SELECT EO.STM_ID, EO.TABLE_NAME, EO.COLUMN_NAME
					FROM ENV_OBJECTS EO
					JOIN OBJ_HIR_V CTE ON EO.TABLE_NAME = CTE.COLUMN_NAME AND CTE.TABLE_NAME <> EO.TABLE_NAME
				)
				insert into @object_ids (object_id)
				SELECT DISTINCT STCM.STCM_ID
				FROM OBJ_HIR_V OV
				JOIN SYSTEM_TABLE_COLUMNS_METADATA (NOLOCK) STCM
				ON STCM.STM_ID = OV.STM_ID
				WHERE (STCM.TYPE <> 'ENTITY' OR STCM.TYPE IS NULL);
			END;
			ELSE IF @TGT_OBJECT_TYPE = 'SM_ENVIRONMENT' BEGIN
				insert into @object_ids (object_id)
				SELECT DISTINCT STCM.STCM_ID
				FROM SYSTEM_TABLE_COLUMNS_METADATA (NOLOCK) STCM
				WHERE STCM.VALID = 1 AND STCM.SCE_ID = @TGT_OBJECT_ID AND (STCM.TYPE <> 'ENTITY' OR STCM.TYPE IS NULL);
			END;
			ELSE IF @TGT_OBJECT_TYPE = 'SM_SYSTEM' BEGIN
				insert into @object_ids (object_id)
				SELECT DISTINCT STCM.STCM_ID
				FROM SYSTEM_TABLE_COLUMNS_METADATA (NOLOCK) STCM
				WHERE STCM.VALID = 1 AND STCM.SCE_ID IN (SELECT SCE_ID FROM ACTIVE_SYS_CON_ENVIRONMENTS WHERE SYSTEM_ID = @TGT_OBJECT_ID) AND (STCM.TYPE <> 'ENTITY' OR STCM.TYPE IS NULL);
			END;
			ELSE IF @TGT_OBJECT_TYPE = 'SM_METADATA' BEGIN
				insert into @object_ids (object_id)
				SELECT DISTINCT STCM.STCM_ID
				FROM SYSTEM_TABLE_COLUMNS_METADATA (NOLOCK) STCM
				JOIN ACTIVE_SYS_CON_ENVIRONMENTS ASCE
				ON ASCE.SCE_ID = STCM.SCE_ID
				WHERE STCM.VALID = 1 AND (STCM.TYPE <> 'ENTITY' OR STCM.TYPE IS NULL);
			END;
		END;

		ELSE IF @TRIGGER_OBJECT_TYPE = 'SM_TABLE' BEGIN
			IF @TGT_OBJECT_TYPE = 'SM_ENVIRONMENT' BEGIN
				insert into @object_ids (object_id)
				SELECT DISTINCT STM.STM_ID
				FROM SYSTEM_TABLE_METADATA (NOLOCK) STM
				WHERE STM.VALID = 1 AND STM.SCE_ID = @TGT_OBJECT_ID;
			END;
			ELSE IF @TGT_OBJECT_TYPE = 'SM_SYSTEM' BEGIN
				insert into @object_ids (object_id)
				SELECT DISTINCT STM.STM_ID
				FROM SYSTEM_TABLE_METADATA (NOLOCK) STM
				WHERE STM.VALID = 1 AND STM.SCE_ID IN (SELECT SCE_ID FROM ACTIVE_SYS_CON_ENVIRONMENTS WHERE SYSTEM_ID = @TGT_OBJECT_ID);
			END;
			ELSE IF @TGT_OBJECT_TYPE = 'SM_METADATA' BEGIN
				insert into @object_ids (object_id)
				SELECT DISTINCT STM.STM_ID
				FROM SYSTEM_TABLE_METADATA (NOLOCK) STM
				JOIN ACTIVE_SYS_CON_ENVIRONMENTS ASCE
				ON ASCE.SCE_ID = STM.SCE_ID
				WHERE STM.VALID = 1;
			END;
		END;

		ELSE IF @TRIGGER_OBJECT_TYPE = 'SM_ENVIRONMENT' BEGIN
			IF @TGT_OBJECT_TYPE = 'SM_SYSTEM' BEGIN
				insert into @object_ids (object_id)
				SELECT DISTINCT SCE.SCE_ID
				FROM ACTIVE_SYS_CON_ENVIRONMENTS SCE WHERE SCE.SYSTEM_ID = @TGT_OBJECT_ID;
			END;
			ELSE IF @TGT_OBJECT_TYPE = 'SM_METADATA' BEGIN
				insert into @object_ids (object_id)
				SELECT DISTINCT SCE.SCE_ID
				FROM ACTIVE_SYS_CON_ENVIRONMENTS SCE;
			END;
		END;

		ELSE IF @TRIGGER_OBJECT_TYPE = 'MM_MAPPING' BEGIN
			IF @TGT_OBJECT_TYPE = 'MM_SUBJECT' BEGIN

				with CTE_OBJECT_HIR AS
				(SELECT SD.subject_id,
						SD.parent_subject_id,
						SD.SUBJECT_NAME
				FROM subject_details (NOLOCK) SD
				WHERE SUBJECT_ID = @TGT_OBJECT_ID
				UNION ALL SELECT T.subject_id,
								T.parent_subject_id,
								T.SUBJECT_NAME
				FROM subject_details (NOLOCK) AS T
				JOIN CTE_OBJECT_HIR cte ON T.parent_subject_id = cte.subject_id AND cte.PARENT_SUBJECT_ID <> T.PARENT_SUBJECT_ID)
				insert into @object_ids (object_id)
				select MD.MAP_ID
				from MAPPING_DETAILS (NOLOCK) MD
				JOIN CTE_OBJECT_HIR COH
				ON COH.SUBJECT_ID = MD.SUBJECT_ID
				where MD.STATUS = 'Active';
			END;
			ELSE IF @TGT_OBJECT_TYPE = 'MM_PROJECT' BEGIN
				insert into @object_ids (object_id)
				SELECT DISTINCT MD.MAP_ID
				FROM MAPPING_DETAILS (NOLOCK) MD
				WHERE MD.PROJECT_ID = @TGT_OBJECT_ID AND MD.STATUS = 'Active';
			END;
			ELSE IF @TGT_OBJECT_TYPE = 'MM_PROJECTS' BEGIN
				insert into @object_ids (object_id)
				SELECT DISTINCT MD.MAP_ID
				FROM MAPPING_DETAILS (NOLOCK) MD WHERE MD.STATUS = 'Active';
			END;
		END;

		ELSE IF @TRIGGER_OBJECT_TYPE = 'BGM_TERM' BEGIN
			IF @TGT_OBJECT_TYPE = 'BGM_TERM_CATALOG' BEGIN

				with CTE_OBJECT_HIR AS
					(SELECT BGC.CATEGORY_ID,
							BGC.PARENT_CATEGORY_ID,
							BGC.CATEGORY_NAME
					FROM BG_CATEGORIES (NOLOCK) BGC
					WHERE CATEGORY_ID = @TGT_OBJECT_ID
					UNION ALL SELECT BGC.CATEGORY_ID,
							BGC.PARENT_CATEGORY_ID,
							BGC.CATEGORY_NAME
					FROM BG_CATEGORIES (NOLOCK) BGC
					JOIN CTE_OBJECT_HIR cte ON BGC.PARENT_CATEGORY_ID = cte.CATEGORY_ID AND cte.PARENT_CATEGORY_ID <> BGC.PARENT_CATEGORY_ID)
					insert into @object_ids (object_id)
					select BT.BUS_TERM_ID from BUSINESS_TERMS (NOLOCK) BT
					JOIN CTE_OBJECT_HIR COH
					ON COH.CATEGORY_ID = BT.CATEGORY_ID;

			END;
			ELSE IF @TGT_OBJECT_TYPE = 'BGM_TERM_CATALOGS' BEGIN
				insert into @object_ids (object_id)
				select BT.BUS_TERM_ID from BUSINESS_TERMS (NOLOCK) BT;
			END;
		END;

		ELSE IF @TRIGGER_OBJECT_TYPE = 'BGM_RULE' BEGIN
			IF @TGT_OBJECT_TYPE = 'BGM_RULE_CATALOG' BEGIN

				with CTE_OBJECT_HIR AS
					(SELECT BGC.CATEGORY_ID,
							BGC.PARENT_CATEGORY_ID,
							BGC.CATEGORY_NAME
					FROM BG_CATEGORIES (NOLOCK) BGC
					WHERE CATEGORY_ID = @TGT_OBJECT_ID
					UNION ALL SELECT BGC.CATEGORY_ID,
							BGC.PARENT_CATEGORY_ID,
							BGC.CATEGORY_NAME
					FROM BG_CATEGORIES (NOLOCK) BGC
					JOIN CTE_OBJECT_HIR cte ON BGC.PARENT_CATEGORY_ID = cte.CATEGORY_ID AND cte.PARENT_CATEGORY_ID <> BGC.PARENT_CATEGORY_ID)
					insert into @object_ids (object_id)
					select BR.ID from BG_BUSINESS_RULES (NOLOCK) BR
					JOIN CTE_OBJECT_HIR COH
					ON COH.CATEGORY_ID = BR.CATALOG_ID;

			END;
			ELSE IF @TGT_OBJECT_TYPE = 'BGM_RULE_CATALOGS' BEGIN
				insert into @object_ids (object_id)
				select BR.ID from BG_BUSINESS_RULES (NOLOCK) BR;
			END;
		END;

		ELSE IF @TRIGGER_OBJECT_TYPE = 'BGM_POLICY' BEGIN
			IF @TGT_OBJECT_TYPE = 'BGM_POLICY_CATALOG' BEGIN

				with CTE_OBJECT_HIR AS
					(SELECT BGC.CATEGORY_ID,
							BGC.PARENT_CATEGORY_ID,
							BGC.CATEGORY_NAME
					FROM BG_CATEGORIES (NOLOCK) BGC
					WHERE CATEGORY_ID = @TGT_OBJECT_ID
					UNION ALL SELECT BGC.CATEGORY_ID,
							BGC.PARENT_CATEGORY_ID,
							BGC.CATEGORY_NAME
					FROM BG_CATEGORIES (NOLOCK) BGC
					JOIN CTE_OBJECT_HIR cte ON BGC.PARENT_CATEGORY_ID = cte.CATEGORY_ID AND cte.PARENT_CATEGORY_ID <> BGC.PARENT_CATEGORY_ID)
					insert into @object_ids (object_id)
					select BP.ID from BG_POLICIES (NOLOCK) BP
					JOIN CTE_OBJECT_HIR COH
					ON COH.CATEGORY_ID = BP.CATALOG_ID;

			END;
			ELSE IF @TGT_OBJECT_TYPE = 'BGM_POLICY_CATALOGS' BEGIN
				insert into @object_ids (object_id)
				select BT.BUS_TERM_ID from BUSINESS_TERMS (NOLOCK) BT;
			END;
		END;

		INSERT INTO @WF_OBJECTS_STATUS(OBJECT_ID, OBJECT_TYPE_ID, WFN_ID)
		select oids.object_id, @TRIGGER_OBJECT_TYPE_ID, WFN_ID from @object_ids oids
		join ADS_WORKFLOW_STATUS (NOLOCK) aws
		on aws.OBJECT_ID = oids.object_id
		and aws.OBJECT_TYPE_ID = @TRIGGER_OBJECT_TYPE_ID and aws.WFG_ID = @WFG_ID;


      RETURN;
   END
GO

IF EXISTS (SELECT * FROM SYS.OBJECTS WHERE OBJECT_ID = OBJECT_ID(N'FN_GET_WFG_STATUS_NODES') AND TYPE IN (N'FN', N'IF', N'TF', N'FS', N'FT'))
	BEGIN
		DROP FUNCTION FN_GET_WFG_STATUS_NODES;
	END
GO

CREATE FUNCTION FN_GET_WFG_STATUS_NODES(@OBJECT_ID BIGINT, @OBJECT_TYPE_ID BIGINT, @TRIGGER_ID BIGINT, @FORCE_CHECK SMALLINT)
RETURNS @STATUS_NODES TABLE(WFN_ID BIGINT, WFG_ID BIGINT, P_WFG_ID BIGINT) AS
BEGIN

	DECLARE @OBJECT_PARENTS TABLE(OBJECT_ID BIGINT, OBJECT_TYPE_ID BIGINT, OBJECT_ORDER BIGINT);

	DECLARE @PARENTS_COUNT BIGINT;
	DECLARE @OBJECT_PARENT_ROW_ID BIGINT;
	DECLARE @CURRENT_OBJECT_ID VARCHAR(MAX);
	DECLARE @CURRENT_OBJECT_TYPE_ID VARCHAR(MAX);
	DECLARE @EXISTED_WFG_ID BIGINT;
	DECLARE @EXISTED_PARENT_WFG_ID BIGINT;
	DECLARE @STATUS_NODES_CNT BIGINT;

	--TODO WITH ENVIRONMENT VERSION
	SELECT @EXISTED_WFG_ID = AWA.WFG_ID
		FROM ADS_WORKFLOW_ASSIGNMENT AWA
		JOIN ADS_WORKFLOW AW ON AW.WF_ID = AWA.WF_ID
		WHERE AWA.OBJECT_ID = @OBJECT_ID AND AWA.OBJECT_TYPE_ID = @OBJECT_TYPE_ID AND AW.WFTA_ID = @TRIGGER_ID;


	IF @EXISTED_WFG_ID IS NULL OR (@EXISTED_WFG_ID IS NOT NULL AND @FORCE_CHECK = 1) BEGIN

		INSERT INTO @OBJECT_PARENTS
		SELECT OBJECT_ID, OBJECT_TYPE_ID, OBJECT_ORDER FROM dbo.FN_GET_OBJECT_HIR(@OBJECT_ID, @OBJECT_TYPE_ID, NULL) ORDER BY OBJECT_ORDER ASC;
		SELECT @PARENTS_COUNT = (SELECT @@ROWCOUNT);
		SET @OBJECT_PARENT_ROW_ID = 1;
		WHILE (@OBJECT_PARENT_ROW_ID <= @PARENTS_COUNT)
		BEGIN

			SELECT @CURRENT_OBJECT_TYPE_ID = OBJECT_TYPE_ID,
			   @CURRENT_OBJECT_ID = OBJECT_ID
			FROM @OBJECT_PARENTS TBL_REF
			WHERE OBJECT_ORDER = @OBJECT_PARENT_ROW_ID;

			--TODO WITH ENVIRONMENT VERSION
			SELECT @EXISTED_PARENT_WFG_ID = AWA.WFG_ID
			FROM ADS_WORKFLOW_ASSIGNMENT AWA
			JOIN ADS_WORKFLOW AW ON AW.WF_ID = AWA.WF_ID
			WHERE AWA.OBJECT_ID = @CURRENT_OBJECT_ID AND AWA.OBJECT_TYPE_ID = @CURRENT_OBJECT_TYPE_ID AND AW.WFTA_ID = @TRIGGER_ID;

			IF @EXISTED_PARENT_WFG_ID IS NOT NULL BEGIN
				BREAK;
			END;
			SET @OBJECT_PARENT_ROW_ID = @OBJECT_PARENT_ROW_ID + 1;
		END;

	END;

	IF @EXISTED_WFG_ID IS NOT NULL
		BEGIN
			INSERT INTO @STATUS_NODES
			SELECT DISTINCT WFN_ID, WFG_ID, @EXISTED_PARENT_WFG_ID
			FROM ADS_WORKFLOW_STATUS
			WHERE WFG_ID =  @EXISTED_WFG_ID;
		END;
	ELSE IF @FORCE_CHECK = 1
		BEGIN
			SET @EXISTED_PARENT_WFG_ID = NULL;
		END;
	ELSE
		BEGIN
			INSERT INTO @STATUS_NODES
			SELECT DISTINCT WFN_ID, NULL, @EXISTED_PARENT_WFG_ID
			FROM dbo.FN_GET_WF_OBJECTS_STATUS(@EXISTED_PARENT_WFG_ID, @OBJECT_ID, @OBJECT_TYPE_ID);
		END;



	SELECT @STATUS_NODES_CNT = COUNT(*)  FROM @STATUS_NODES;

	--If there is no workflow statuses then we should return existed selected object assignment.
	IF @STATUS_NODES_CNT = 0 AND @EXISTED_WFG_ID IS NOT NULL
		BEGIN
			INSERT INTO @STATUS_NODES VALUES (NULL, @EXISTED_WFG_ID, NULL);
		END;

	RETURN;
END
GO

IF EXISTS (SELECT * FROM SYS.OBJECTS WHERE OBJECT_ID = OBJECT_ID(N'FN_GET_OBJECT_WORKFLOW') AND TYPE IN (N'FN', N'IF', N'TF', N'FS', N'FT'))
	BEGIN
		DROP FUNCTION FN_GET_OBJECT_WORKFLOW;
	END
GO

CREATE FUNCTION [FN_GET_OBJECT_WORKFLOW]
   (@OBJECT_ID BIGINT, @OBJECT_TYPE_ID BIGINT, @TRIGGER_TYPE_ID BIGINT)
   RETURNS @WF_DETAILS TABLE(ASSIGN_OBJECT_ID BIGINT, ASSIGN_OBJECT_TYPE_ID BIGINT, WF_ID BIGINT, WFG_ID BIGINT, TRIGGER_ID BIGINT) AS
   BEGIN
      DECLARE @WF_ID BIGINT = null;
	  DECLARE @WFN_ID BIGINT = null;
	  DECLARE @ROW_ID SMALLINT = 0;
	  DECLARE @TOTAL_ROWS SMALLINT;
	  DECLARE @CURRENT_OBJECT_ID BIGINT;
	  DECLARE @CURRENT_OBJECT_TYPE_ID BIGINT;

	  DECLARE @OBJECT_PARENTS TABLE(OBJECT_ID BIGINT, OBJECT_TYPE_ID BIGINT, OBJECT_ORDER BIGINT);

	  INSERT INTO @OBJECT_PARENTS
	  SELECT OBJECT_ID, OBJECT_TYPE_ID, OBJECT_ORDER
	  FROM dbo.FN_GET_OBJECT_HIR(@OBJECT_ID, @OBJECT_TYPE_ID, NULL)
	  UNION
	  SELECT @OBJECT_ID, @OBJECT_TYPE_ID, 0
	  ORDER BY OBJECT_ORDER ASC;

	  SELECT @TOTAL_ROWS = COUNT(*) FROM @OBJECT_PARENTS;

	  IF @TOTAL_ROWS > 0
		BEGIN

		  SELECT @ROW_ID = MIN(OBJECT_ORDER) FROM @OBJECT_PARENTS;

		  WHILE @ROW_ID <= @TOTAL_ROWS
			BEGIN
				SELECT @OBJECT_ID = OBJECT_ID, @OBJECT_TYPE_ID = OBJECT_TYPE_ID
				 FROM @OBJECT_PARENTS WHERE OBJECT_ORDER = @ROW_ID;
				 INSERT INTO @WF_DETAILS
				SELECT AWA.OBJECT_ID, AWA.OBJECT_TYPE_ID, AWA.WF_ID, AWA.WFG_ID, AW.WFTA_ID FROM ADS_WORKFLOW_ASSIGNMENT AWA
					JOIN ADS_WORKFLOW AW ON AW.WF_ID = AWA.WF_ID
					WHERE OBJECT_ID = @OBJECT_ID AND AWA.OBJECT_TYPE_ID = @OBJECT_TYPE_ID AND AW.WFTA_ID = @TRIGGER_TYPE_ID;
				IF EXISTS (SELECT * FROM @WF_DETAILS)
				   BEGIN
					  BREAK;
				   END
				SET @ROW_ID = @ROW_ID + 1;
			END
		END
      RETURN;
   END
GO

IF EXISTS (SELECT * FROM SYS.OBJECTS WHERE OBJECT_ID = OBJECT_ID(N'FN_GET_OBJECT_WFG_ID') AND TYPE IN (N'FN', N'IF', N'TF', N'FS', N'FT'))
	BEGIN
		DROP FUNCTION FN_GET_OBJECT_WFG_ID;
	END
GO

CREATE FUNCTION [FN_GET_OBJECT_WFG_ID]
   (@OBJECT_ID BIGINT, @OBJECT_TYPE_ID BIGINT, @TRIGGER_TYPE_ID BIGINT)
   RETURNS BIGINT AS
   BEGIN
      DECLARE @WFG_ID BIGINT = null;
	  SELECT @WFG_ID = WFG_ID FROM FN_GET_OBJECT_WORKFLOW(@OBJECT_ID, @OBJECT_TYPE_ID, @TRIGGER_TYPE_ID);
      RETURN @WFG_ID;
   END
GO

-- WORKFLOW MANAGER MIGRATION SCRIPT STARTS ---

IF (OBJECTPROPERTY(OBJECT_ID(N'[SP_COPY_WORKFLOW]'),N'IsProcedure') = 1)
	BEGIN
            DROP PROCEDURE SP_COPY_WORKFLOW;
	END
GO

IF EXISTS (SELECT * FROM ADS_MM_VERSION WHERE VALUE < '9.2')
      EXEC('
CREATE PROCEDURE [SP_COPY_WORKFLOW]
   @WF_ID BIGINT, @WF_NAME_NEW varchar(250), @TRIGGER_TYPE_ID BIGINT
   AS
        DECLARE @WF_ID_NEW BIGINT = null;
		DECLARE @WF_NAME_OLD VARCHAR(250);
		DECLARE @WFG_OBJECT_TYPE_ID BIGINT;
		DECLARE @WF_OBJECT_TYPE_ID BIGINT;
		DECLARE @TRIGGER_OBJECT_TYPE_ID BIGINT;
		--DECLARE @OBJECT_TITLE VARCHAR(1024) = null;
		SELECT @WF_NAME_OLD = WORKFLOW_NAME FROM ADS_WORKFLOW WHERE WF_ID = @WF_ID;

		IF @WF_ID IS NULL OR @WF_NAME_OLD IS NULL BEGIN
			RETURN @WF_ID_NEW;
		END;

		SELECT @WF_OBJECT_TYPE_ID = OBJECT_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE = ''ADS_WORKFLOW'';
		SELECT @WFG_OBJECT_TYPE_ID = OBJECT_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE = ''ADS_WORKFLOW_ASSIGNMENT'';

		IF @TRIGGER_TYPE_ID IS NULL OR @TRIGGER_TYPE_ID = 0
			BEGIN
				SELECT @TRIGGER_TYPE_ID = WFTA_ID FROM ADS_WORKFLOW WHERE WF_ID = @WF_ID;
			END;

		SELECT @TRIGGER_OBJECT_TYPE_ID = OBJECT_TYPE_ID FROM ADS_WORKFLOW_TRIGGER_ACTION WHERE WFTA_ID = @TRIGGER_TYPE_ID;

		INSERT INTO ADS_WORKFLOW (WORKFLOW_NAME, DESCRIPTION, WFF_ID, MODULE_ID, SYSTEMBASED, THUMBNAIL, VALID, WFTA_ID)
		SELECT @WF_NAME_NEW, DESCRIPTION, WFF_ID, MODULE_ID, SYSTEMBASED, THUMBNAIL, VALID, @TRIGGER_TYPE_ID FROM ADS_WORKFLOW WHERE WF_ID = @WF_ID;

		SET @WF_ID_NEW = @@IDENTITY;

		INSERT INTO ADS_WORKFLOW_NODE (WF_ID, NODE_TYPE, NODE_ID, UI_PROPERTIES, VALID)
		SELECT @WF_ID_NEW, NODE_TYPE, NODE_ID, UI_PROPERTIES, VALID FROM ADS_WORKFLOW_NODE WHERE WF_ID = @WF_ID;

		INSERT INTO ADS_WORKFLOW_ASSIGNMENT (WF_ID,OBJECT_ID,OBJECT_TYPE_ID,VALID)
		SELECT @WF_ID_NEW, AWA.OBJECT_ID, AWA.OBJECT_TYPE_ID, VALID
		FROM ADS_WORKFLOW_ASSIGNMENT AWA
		JOIN ADS_WORKFLOW_ASGMNT_TRIGGER AWAT
		ON AWAT.WFG_ID = AWA.WFG_ID
		AND AWAT.OBJECT_TYPE_ID = @TRIGGER_OBJECT_TYPE_ID
		WHERE WF_ID = @WF_ID;

		WITH OLD_WF_NODE AS (
			SELECT *
			FROM ADS_WORKFLOW_NODE AWN
			WHERE AWN.WF_ID = @WF_ID
		), NEW_WF_NODE AS (
			SELECT *
			FROM ADS_WORKFLOW_NODE AWN
			WHERE AWN.WF_ID = @WF_ID_NEW
		),
		OLD_WF_NODE_CON AS (
			SELECT DISTINCT AWNC.SOURCE_WFN_ID, AWNC.TARGET_WFN_ID, AWNC.UI_PROPERTIES
			FROM OLD_WF_NODE AWN
			JOIN ADS_WORKFLOW_NODE_CON AWNC
			ON AWNC.SOURCE_WFN_ID = AWN.WFN_ID OR AWNC.TARGET_WFN_ID = AWN.WFN_ID
		),
		NEW_WF_NODE_SRC_CON AS (
			SELECT DISTINCT AWN.WFN_ID, WNC.UI_PROPERTIES
				FROM NEW_WF_NODE AWN
				JOIN (SELECT AWN_I.NODE_ID, AWN_I.NODE_TYPE, OWNC.UI_PROPERTIES
					FROM OLD_WF_NODE_CON OWNC
					JOIN OLD_WF_NODE AWN_I
					ON AWN_I.WFN_ID = OWNC.SOURCE_WFN_ID
				) WNC
				ON AWN.NODE_ID = WNC.NODE_ID AND AWN.NODE_TYPE = WNC.NODE_TYPE
		),
		NEW_WF_NODE_TGT_CON AS (
			SELECT DISTINCT AWN.WFN_ID, WNC.UI_PROPERTIES
				FROM NEW_WF_NODE AWN
				JOIN (SELECT AWN_I.NODE_ID, AWN_I.NODE_TYPE, OWNC.UI_PROPERTIES
					FROM OLD_WF_NODE_CON OWNC
					JOIN OLD_WF_NODE AWN_I
					ON AWN_I.WFN_ID = OWNC.TARGET_WFN_ID
				) WNC
				ON AWN.NODE_ID = WNC.NODE_ID AND AWN.NODE_TYPE = WNC.NODE_TYPE
		)
		INSERT INTO ADS_WORKFLOW_NODE_CON
		SELECT NWNSC.WFN_ID, NWNTC.WFN_ID, NWNTC.UI_PROPERTIES
		FROM NEW_WF_NODE_SRC_CON NWNSC
		JOIN NEW_WF_NODE_TGT_CON NWNTC
		ON NWNTC.UI_PROPERTIES = NWNSC.UI_PROPERTIES;


		INSERT INTO ADS_WORKFLOW_NODE_ROLE
		SELECT DISTINCT AWN.WFN_ID, WNR.ROLE_ID
		FROM ADS_WORKFLOW_NODE AWN
		JOIN (SELECT AWN_I.NODE_ID, AWN_I.NODE_TYPE, WNR.ROLE_ID
			FROM ADS_WORKFLOW_NODE_ROLE WNR
			JOIN ADS_WORKFLOW_NODE AWN_I
			ON AWN_I.WFN_ID = WNR.WFN_ID
			WHERE AWN_I.WF_ID = @WF_ID
		) WNR
		ON AWN.NODE_ID = WNR.NODE_ID AND AWN.NODE_TYPE = WNR.NODE_TYPE
		WHERE AWN.WF_ID = @WF_ID_NEW;


		WITH OLD_WF_NODE_CONF AS (
			SELECT DISTINCT I_AWA.WFG_ID, I_AWA.OBJECT_ID, I_AWA.OBJECT_TYPE_ID, I_AWANC.WFN_ID, I_AWN.NODE_ID, I_AWN.NODE_TYPE, I_AWANC.CONFIG_TYPE, I_AWANC.CONFIG_VALUE
			FROM ADS_WORKFLOW_ASSIGNMENT I_AWA
			JOIN ADS_WORKFLOW_ASGN_NODE_CONFIG I_AWANC
			ON I_AWANC.WFG_ID = I_AWA.WFG_ID
			JOIN ADS_WORKFLOW_NODE I_AWN
			ON I_AWN.WFN_ID = I_AWANC.WFN_ID
			WHERE I_AWA.WF_ID = @WF_ID
		), NEW_WF_NODE AS (
			SELECT *
			FROM ADS_WORKFLOW_NODE AWN
			WHERE AWN.WF_ID = @WF_ID_NEW
		)
		INSERT INTO ADS_WORKFLOW_ASGN_NODE_CONFIG
		SELECT DISTINCT AWA.WFG_ID, AWN.WFN_ID, AWANC.CONFIG_TYPE, AWANC.CONFIG_VALUE
			FROM NEW_WF_NODE AWN
			JOIN OLD_WF_NODE_CONF AWANC
			ON AWN.NODE_ID = AWANC.NODE_ID AND AWN.NODE_TYPE = AWANC.NODE_TYPE
			JOIN ADS_WORKFLOW_ASSIGNMENT AWA
			ON AWA.OBJECT_ID = AWANC.OBJECT_ID AND AWA.OBJECT_TYPE_ID = AWANC.OBJECT_TYPE_ID
			WHERE AWA.WF_ID = @WF_ID_NEW;

		INSERT INTO RM_HISTORY
		SELECT RH.HISTORYTYPEID,
		REPLACE(REPLACE(RH.HISTORYDESC, ''"Id": "'' + CAST(RH.OBJECTID AS varchar(MAX)), ''"Id": "'' + CAST(@WF_ID_NEW AS VARCHAR(MAX))), ''"Name": "'' + @WF_NAME_OLD, ''"Name": "'' + @WF_NAME_NEW),
		@WF_ID_NEW, RH.OBJECTTYPEID, RH.HISTORYDATESTAMP, RH.USER_ID, RH.FROM_ENV, RH.TO_ENV, RH.FROM_MAPID, RH.TO_MAPID
		FROM RM_HISTORY RH WHERE RH.OBJECTID = @WF_ID AND RH.OBJECTTYPEID = @WF_OBJECT_TYPE_ID;

		INSERT INTO RM_HISTORY
		SELECT WFARH.HISTORYTYPEID,
		REPLACE(REPLACE(WFARH.HISTORYDESC, ''Workflow Name: '' + @WF_NAME_OLD, ''Workflow Name: '' + @WF_NAME_NEW), ''Assignment Id: '' + CAST(WFARH.OBJECTID AS varchar), ''Assignment Id: '' + CAST(AWA.WFG_ID AS varchar)),
		AWA.WFG_ID, WFARH.OBJECTTYPEID, WFARH.HISTORYDATESTAMP, WFARH.USER_ID, WFARH.FROM_ENV, WFARH.TO_ENV, WFARH.FROM_MAPID, WFARH.TO_MAPID
		FROM ADS_WORKFLOW_ASSIGNMENT AWA
		JOIN (SELECT I_AWA.OBJECT_ID, I_AWA.OBJECT_TYPE_ID, RH.*
		FROM ADS_WORKFLOW_ASSIGNMENT I_AWA
		JOIN RM_HISTORY RH
		ON RH.OBJECTID = I_AWA.WFG_ID
		AND RH.OBJECTTYPEID = @WFG_OBJECT_TYPE_ID
		WHERE I_AWA.WF_ID = @WF_ID) WFARH
		ON WFARH.OBJECT_ID = AWA.OBJECT_ID AND WFARH.OBJECT_TYPE_ID = AWA.OBJECT_TYPE_ID
		WHERE AWA.WF_ID = @WF_ID_NEW;

		RETURN @WF_ID_NEW');

GO
IF(SELECT COUNT(*) FROM [SYS].[TRIGGERS] AS TRIG INNER JOIN SYS.TABLES AS TAB ON TRIG.PARENT_ID = TAB.OBJECT_ID WHERE TAB.NAME = 'ADS_WORKFLOW_STATUS' AND TRIG.NAME='ADS_WF_STATUS_MIG_I_TRIG') > 0
	BEGIN
		DROP TRIGGER ADS_WF_STATUS_MIG_I_TRIG;
	END
GO

IF EXISTS (SELECT * FROM ADS_MM_VERSION WHERE VALUE <= '9.0')
	BEGIN
		EXEC ('CREATE TRIGGER ADS_WF_STATUS_MIG_I_TRIG
			ON ADS_WORKFLOW_STATUS
			AFTER INSERT
		AS BEGIN
			INSERT INTO RM_HISTORY ([HISTORYTYPEID], [HISTORYDESC], [OBJECTID], [OBJECTTYPEID], [HISTORYDATESTAMP], [USER_ID])
			SELECT
			 6,
			 ''{"WFId":'' + CAST(AWA.WF_ID AS VARCHAR(128)) + '', "wfgId":'' + CAST(CURR.WFG_ID AS VARCHAR(128)) + '', "toWFNId":'' + CAST(CURR.WFN_ID AS VARCHAR(128)) + '', "fromWFNId":-1, "comments":"Object created and moved to draft", "archive":{"fromStatus":"", "toStatus":"Draft", "fromNode":"", "toNode":"ON_CREATE"}}'',
			 CURR.OBJECT_ID,
			 CURR.OBJECT_TYPE_ID,
			 CURRENT_TIMESTAMP,
			 ''Administrator''
			 FROM INSERTED CURR
			 JOIN ADS_WORKFLOW_ASSIGNMENT AWA
			 ON AWA.WFG_ID = CURR.WFG_ID;
		END');
	END
GO

IF(SELECT COUNT(*) FROM [SYS].[TRIGGERS] AS TRIG INNER JOIN SYS.TABLES AS TAB ON TRIG.PARENT_ID = TAB.OBJECT_ID WHERE TAB.NAME = 'ADS_WORKFLOW_STATUS' AND TRIG.NAME='ADS_WF_STATUS_MIG_U_TRIG') > 0
	BEGIN
		DROP TRIGGER ADS_WF_STATUS_MIG_U_TRIG;
	END
GO

IF EXISTS (SELECT * FROM ADS_MM_VERSION WHERE VALUE <= '9.0')
	BEGIN

		EXEC ('CREATE TRIGGER ADS_WF_STATUS_MIG_U_TRIG
			ON ADS_WORKFLOW_STATUS
			AFTER UPDATE
		AS
		BEGIN
			DECLARE @CUR_OBJECT_ID BIGINT;
			DECLARE @CUR_OBJECT_TYPE_ID BIGINT;
			DECLARE @CUR_WFG_ID BIGINT;
			SELECT @CUR_OBJECT_ID = CURR.OBJECT_ID, @CUR_OBJECT_TYPE_ID = CURR.OBJECT_TYPE_ID, @CUR_WFG_ID = CURR.WFG_ID
			FROM inserted CURR;
			IF @CUR_WFG_ID IS NOT NULL AND @CUR_WFG_ID > 0
				BEGIN
					UPDATE RH SET [HISTORYDESC] = ''{"wfgId":'' + CAST(curr.wfg_id AS VARCHAR(128)) + '', '' + SUBSTRING(RH.[HISTORYDESC], 2, len(RH.[HISTORYDESC]))
					FROM RM_HISTORY RH
					JOIN inserted curr
					ON curr.OBJECT_ID = RH.OBJECTID AND curr.OBJECT_TYPE_ID = RH.OBJECTTYPEID
					WHERE RH.[HISTORYTYPEID] = 6;
				END
		END');
	END
GO

IF EXISTS (SELECT * FROM ADS_MM_VERSION WHERE VALUE <= '9.0')
	BEGIN

	EXECUTE('DECLARE @MM_MODULE_ID BIGINT = 1;
		DECLARE @MD_MODULE_ID BIGINT = 2;
		DECLARE @BG_MODULE_ID BIGINT = 13;

		DECLARE @ENV_OBJECT_TYPE_ID BIGINT;
		DECLARE @TBL_OBJECT_TYPE_ID BIGINT;
		DECLARE @COL_OBJECT_TYPE_ID BIGINT;
		DECLARE @PROJ_OBJECT_TYPE_ID BIGINT;
		DECLARE @MAP_OBJECT_TYPE_ID BIGINT;
		DECLARE @BGC_OBJECT_TYPE_ID BIGINT;
		DECLARE @BGT_OBJECT_TYPE_ID BIGINT;

		DECLARE @MD_ROOT_OBJECT_TYPE_ID BIGINT;
		DECLARE @MM_ROOT_OBJECT_TYPE_ID BIGINT;
		DECLARE @BG_ROOT_OBJECT_TYPE_ID BIGINT;

		DECLARE @WF_OBJECT_TYPE_ID BIGINT;
		DECLARE @WFG_OBJECT_TYPE_ID BIGINT;
		DECLARE @WFF_OBJECT_TYPE_ID BIGINT;
		DECLARE @WFS_OBJECT_TYPE_ID BIGINT;

		DECLARE @MD_ACTION_ID_OLD BIGINT;
		DECLARE @MM_ACTION_ID_OLD BIGINT;
		DECLARE @BG_ACTION_ID_OLD BIGINT;

		DECLARE @DEFAULT_TRIGGER_ID BIGINT;

		DECLARE @TBL_TRIGGER_ID_NEW BIGINT;
		DECLARE @COL_TRIGGER_ID_NEW BIGINT;
		DECLARE @MAP_TRIGGER_ID_NEW BIGINT;
		DECLARE @BGT_TRIGGER_ID_NEW BIGINT;

		DECLARE @TBL_ACTION_ID_NEW BIGINT;
		DECLARE @COL_ACTION_ID_NEW BIGINT;
		DECLARE @MAP_ACTION_ID_NEW BIGINT;
		DECLARE @BGT_ACTION_ID_NEW BIGINT;
		DECLARE @C_WF_ID BIGINT;
		DECLARE @C_WF_NAME VARCHAR(250);
		DECLARE @N_WF_ID BIGINT;

		DECLARE @CP_O_WF_ID BIGINT;
		DECLARE @CP_O_WFN_ID BIGINT;
		DECLARE @CP_N_WF_ID BIGINT;
		DECLARE @CP_N_WFN_ID BIGINT;

		DECLARE @COL_DEF_WFG_ID BIGINT;
		DECLARE @TBL_DEF_WFG_ID BIGINT;
		DECLARE @MAP_DEF_WFG_ID BIGINT;
		DECLARE @BGT_DEF_WFG_ID BIGINT;

		DECLARE @DEFAULT_WF_CREATED_ON DATETIME;

		DECLARE @CP_WF_DETAILS TABLE (FROM_WF_ID BIGINT, NEW_WF_ID BIGINT);
		DECLARE @CP_WFN_DETAILS TABLE(OLD_WF_ID BIGINT, OLD_WFN_ID BIGINT, NEW_WF_ID BIGINT, NEW_WFN_ID BIGINT);


		SELECT @ENV_OBJECT_TYPE_ID = OBJECT_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE = ''SM_ENVIRONMENT'';
		SELECT @TBL_OBJECT_TYPE_ID = OBJECT_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE = ''SM_TABLE'';
		SELECT @COL_OBJECT_TYPE_ID = OBJECT_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE = ''SM_COLUMN'';
		SELECT @PROJ_OBJECT_TYPE_ID = OBJECT_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE = ''MM_PROJECT'';
		SELECT @MAP_OBJECT_TYPE_ID = OBJECT_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE = ''MM_MAPPING'';
		SELECT @BGC_OBJECT_TYPE_ID = OBJECT_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE = ''BGM_TERM_CATALOG'';
		SELECT @BGT_OBJECT_TYPE_ID = OBJECT_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE = ''BGM_TERM'';


		SELECT @MD_ROOT_OBJECT_TYPE_ID = OBJECT_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE = ''SM_METADATA'';
		SELECT @MM_ROOT_OBJECT_TYPE_ID = OBJECT_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE = ''MM_PROJECTS'';
		SELECT @BG_ROOT_OBJECT_TYPE_ID = OBJECT_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE = ''BGM_TERM_CATALOGS'';

		SELECT @WF_OBJECT_TYPE_ID = OBJECT_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE = ''ADS_WORKFLOW'';
		SELECT @WFG_OBJECT_TYPE_ID = OBJECT_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE = ''ADS_WORKFLOW_ASSIGNMENT'';
		SELECT @WFF_OBJECT_TYPE_ID = OBJECT_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE = ''ADS_WORKFLOW_FOLDER'';
		SELECT @WFS_OBJECT_TYPE_ID = OBJECT_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE = ''ADS_WORKFLOW_STAGE'';

		SELECT @DEFAULT_WF_CREATED_ON = MIN(HISTORYDATESTAMP) FROM RM_HISTORY WHERE OBJECTTYPEID = @WF_OBJECT_TYPE_ID;

		SELECT @DEFAULT_TRIGGER_ID = WFT_ID FROM ADS_WORKFLOW_TRIGGER WHERE TRIGGER_NAME = ''ON_CREATE'';

		SELECT @MD_ACTION_ID_OLD = WFA_ID FROM ADS_WORKFLOW_ACTION WHERE MODULE_ID = @MD_MODULE_ID;
		SELECT @MM_ACTION_ID_OLD = WFA_ID FROM ADS_WORKFLOW_ACTION WHERE MODULE_ID = @MM_MODULE_ID;
		SELECT @BG_ACTION_ID_OLD = WFA_ID FROM ADS_WORKFLOW_ACTION WHERE MODULE_ID = @BG_MODULE_ID;

		SELECT @TBL_TRIGGER_ID_NEW = WFTA_ID FROM ADS_WORKFLOW_TRIGGER_ACTION WHERE OBJECT_TYPE_ID = @TBL_OBJECT_TYPE_ID AND NAME = ''ON_CREATE'' AND NODE_TYPE = ''T'';
		SELECT @COL_TRIGGER_ID_NEW = WFTA_ID FROM ADS_WORKFLOW_TRIGGER_ACTION WHERE OBJECT_TYPE_ID = @COL_OBJECT_TYPE_ID AND NAME = ''ON_CREATE'' AND NODE_TYPE = ''T'';
		SELECT @MAP_TRIGGER_ID_NEW = WFTA_ID FROM ADS_WORKFLOW_TRIGGER_ACTION WHERE OBJECT_TYPE_ID = @MAP_OBJECT_TYPE_ID AND NAME = ''ON_CREATE'' AND NODE_TYPE = ''T'';
		SELECT @BGT_TRIGGER_ID_NEW = WFTA_ID FROM ADS_WORKFLOW_TRIGGER_ACTION WHERE OBJECT_TYPE_ID = @BGT_OBJECT_TYPE_ID AND NAME = ''ON_CREATE'' AND NODE_TYPE = ''T'';

		SELECT @TBL_ACTION_ID_NEW = WFTA_ID FROM ADS_WORKFLOW_TRIGGER_ACTION WHERE OBJECT_TYPE_ID = @TBL_OBJECT_TYPE_ID AND NAME = ''PUBLISH'' AND NODE_TYPE = ''A'';
		SELECT @COL_ACTION_ID_NEW = WFTA_ID FROM ADS_WORKFLOW_TRIGGER_ACTION WHERE OBJECT_TYPE_ID = @COL_OBJECT_TYPE_ID AND NAME = ''PUBLISH'' AND NODE_TYPE = ''A'';
		SELECT @MAP_ACTION_ID_NEW = WFTA_ID FROM ADS_WORKFLOW_TRIGGER_ACTION WHERE OBJECT_TYPE_ID = @MAP_OBJECT_TYPE_ID AND NAME = ''PUBLISH'' AND NODE_TYPE = ''A'';
		SELECT @BGT_ACTION_ID_NEW = WFTA_ID FROM ADS_WORKFLOW_TRIGGER_ACTION WHERE OBJECT_TYPE_ID = @BGT_OBJECT_TYPE_ID AND NAME = ''PUBLISH'' AND NODE_TYPE = ''A'';


		DECLARE WF_CURSOR CURSOR FOR
		SELECT AWT.WF_ID
		FROM (SELECT DISTINCT AWA.WF_ID, COUNT(distinct AWAT.OBJECT_TYPE_ID) CNT
			FROM ADS_WORKFLOW_ASSIGNMENT AWA
			JOIN ADS_WORKFLOW_ASGMNT_TRIGGER AWAT
			ON AWAT.WFG_ID = AWA.WFG_ID
			GROUP BY AWA.WF_ID) AWT
		WHERE AWT.CNT >= 2;

		OPEN WF_CURSOR
		FETCH NEXT FROM WF_CURSOR INTO @C_WF_ID;

			WHILE @@FETCH_STATUS = 0
			BEGIN
				SET @N_WF_ID = NULL;
				SELECT @C_WF_NAME = WORKFLOW_NAME FROM ADS_WORKFLOW WHERE WF_ID = @C_WF_ID;
				SET @C_WF_NAME = @C_WF_NAME + ''_1'';
				EXEC @N_WF_ID = SP_COPY_WORKFLOW @C_WF_ID, @C_WF_NAME, @TBL_TRIGGER_ID_NEW;

				INSERT INTO @CP_WF_DETAILS(FROM_WF_ID, NEW_WF_ID) VALUES (@C_WF_ID, @N_WF_ID);
				FETCH NEXT FROM WF_CURSOR INTO @C_WF_ID;
			END;

		CLOSE WF_CURSOR;
		DEALLOCATE WF_CURSOR;

		/*Update WFTA_ID for existed workflows*/
		/*TODO Clasify Column Trigger Id and Table Trigger Id*/
		UPDATE ADS_WORKFLOW SET WFTA_ID = @MAP_TRIGGER_ID_NEW WHERE WFTA_ID IS NULL AND MODULE_ID = @MM_MODULE_ID;
		UPDATE ADS_WORKFLOW SET WFTA_ID = @COL_TRIGGER_ID_NEW WHERE WFTA_ID IS NULL AND MODULE_ID = @MD_MODULE_ID AND WF_ID IN (SELECT FROM_WF_ID FROM @CP_WF_DETAILS);
		UPDATE ADS_WORKFLOW SET WFTA_ID = @COL_TRIGGER_ID_NEW
			WHERE WFTA_ID IS NULL AND MODULE_ID = @MD_MODULE_ID
			AND WF_ID IN (SELECT AWT.WF_ID
				FROM (SELECT DISTINCT AWA.WF_ID
					FROM ADS_WORKFLOW_ASSIGNMENT AWA
					JOIN ADS_WORKFLOW_ASGMNT_TRIGGER AWAT
					ON AWAT.WFG_ID = AWA.WFG_ID
					WHERE AWAT.OBJECT_TYPE_ID = @COL_OBJECT_TYPE_ID) AWT
				WHERE AWT.WF_ID NOT IN (SELECT FROM_WF_ID FROM @CP_WF_DETAILS));
		UPDATE ADS_WORKFLOW SET WFTA_ID = @TBL_TRIGGER_ID_NEW
			WHERE WFTA_ID IS NULL AND MODULE_ID = @MD_MODULE_ID
			AND WF_ID IN (SELECT AWT.WF_ID
				FROM (SELECT DISTINCT AWA.WF_ID
					FROM ADS_WORKFLOW_ASSIGNMENT AWA
					JOIN ADS_WORKFLOW_ASGMNT_TRIGGER AWAT
					ON AWAT.WFG_ID = AWA.WFG_ID
					WHERE AWAT.OBJECT_TYPE_ID = @TBL_OBJECT_TYPE_ID) AWT
				WHERE AWT.WF_ID NOT IN (SELECT FROM_WF_ID FROM @CP_WF_DETAILS));
		UPDATE ADS_WORKFLOW SET WFTA_ID = @BGT_TRIGGER_ID_NEW WHERE WFTA_ID IS NULL AND MODULE_ID = @BG_MODULE_ID;

		/*Delete Table Triggers for copied workflows*/
		DELETE FROM ADS_WORKFLOW_ASSIGNMENT WHERE WFG_ID IN
			(SELECT AWAG.WFG_ID
				FROM (SELECT AWA_I.WFG_ID, COUNT(*) CNT
					FROM ADS_WORKFLOW_ASSIGNMENT AWA_I
					JOIN ADS_WORKFLOW_ASGMNT_TRIGGER AWAT_I
					ON AWAT_I.WFG_ID = AWA_I.WFG_ID
					WHERE AWA_I.WF_ID IN (SELECT FROM_WF_ID FROM @CP_WF_DETAILS)
					GROUP BY AWA_I.WFG_ID
			) AWAG
			JOIN ADS_WORKFLOW_ASSIGNMENT AWA
			ON AWA.WFG_ID = AWAG.WFG_ID
			JOIN ADS_WORKFLOW_ASGMNT_TRIGGER AWAT
			ON AWAT.WFG_ID = AWA.WFG_ID
			WHERE CNT = 1 AND AWAT.OBJECT_TYPE_ID = @TBL_OBJECT_TYPE_ID);

		/*Update Root Object Type Id*/
		UPDATE ADS_WORKFLOW_ASSIGNMENT SET OBJECT_TYPE_ID = @MM_ROOT_OBJECT_TYPE_ID WHERE OBJECT_ID = -1 AND OBJECT_TYPE_ID = @PROJ_OBJECT_TYPE_ID;
		UPDATE ADS_WORKFLOW_ASSIGNMENT SET OBJECT_TYPE_ID = @MD_ROOT_OBJECT_TYPE_ID WHERE OBJECT_ID = -1 AND OBJECT_TYPE_ID = @ENV_OBJECT_TYPE_ID;
		UPDATE ADS_WORKFLOW_ASSIGNMENT SET OBJECT_TYPE_ID = @BG_ROOT_OBJECT_TYPE_ID WHERE OBJECT_ID = -1 AND OBJECT_TYPE_ID = @BGC_OBJECT_TYPE_ID;

                /*Update RM History Description for published nodes*/
                MERGE INTO RM_HISTORY RH
                USING (select RH.HISTORYID, ''{"WFId":''+ cast(AWN.WF_ID as varchar(10)) + '', "toWFNId":'' + cast(AWN.WFN_ID as varchar(10)) + '', "fromWFNId":-1, "comments":"Published", "archive":{"fromStatus":"", "toStatus":"Publish", "fromNode":"", "toNode":"PUBLISH" }}''  HISTORYDESC
                        from ADS_WORKFLOW_STATUS AWS
                        JOIN ADS_WORKFLOW_NODE AWN
                        ON AWS.WFN_ID = AWN.WFN_ID
                        JOIN RM_HISTORY RH
                        on RH.OBJECTID = AWS.OBJECT_ID and RH.OBJECTTYPEID = AWS.OBJECT_TYPE_ID
                        where HISTORYTYPEID = 6 and HISTORYDESC = ''Published'') RHG
                ON RHG.HISTORYID = RH.HISTORYID
                WHEN MATCHED THEN UPDATE SET RH.HISTORYDESC = RHG.HISTORYDESC;

		DECLARE WF_STATUS_CURSOR CURSOR FOR
			SELECT FROM_WF_ID
			FROM @CP_WF_DETAILS;

		OPEN WF_STATUS_CURSOR
		FETCH NEXT FROM WF_STATUS_CURSOR INTO @C_WF_ID;

			WHILE @@FETCH_STATUS = 0
			BEGIN

				SET @N_WF_ID = NULL;
				SELECT @N_WF_ID = NEW_WF_ID FROM @CP_WF_DETAILS WHERE FROM_WF_ID = @C_WF_ID;

				WITH OLD_WF_NODE AS (
					SELECT *
					FROM ADS_WORKFLOW_NODE AWN
					WHERE AWN.WF_ID = @C_WF_ID
				), NEW_WF_NODE AS (
					SELECT *
					FROM ADS_WORKFLOW_NODE AWN
					WHERE AWN.WF_ID = @N_WF_ID
				)
				INSERT INTO ADS_WORKFLOW_STATUS (WFN_ID, OBJECT_ID, OBJECT_TYPE_ID)
				SELECT DISTINCT AWN.WFN_ID, AWS.OBJECT_ID, AWS.OBJECT_TYPE_ID
					FROM NEW_WF_NODE AWN
					JOIN (SELECT AWN_I.WFN_ID, AWS_I.OBJECT_ID, AWS_I.OBJECT_TYPE_ID, AWN_I.NODE_ID, AWN_I.NODE_TYPE
					FROM ADS_WORKFLOW_STATUS AWS_I
					JOIN OLD_WF_NODE AWN_I
					ON AWN_I.WFN_ID = AWS_I.WFN_ID
					WHERE AWS_I.OBJECT_TYPE_ID = @TBL_OBJECT_TYPE_ID) AWS
					ON AWS.NODE_ID = AWN.NODE_ID AND AWS.NODE_TYPE = AWN.NODE_TYPE;

				DELETE FROM ADS_WORKFLOW_STATUS WHERE WFN_ID IN (SELECT WFN_ID FROM ADS_WORKFLOW_NODE WHERE WF_ID = @C_WF_ID) AND OBJECT_TYPE_ID = @TBL_OBJECT_TYPE_ID;

				DELETE FROM @CP_WFN_DETAILS;

				WITH OLD_WF_NODE AS (
					SELECT *
					FROM ADS_WORKFLOW_NODE AWN
					WHERE AWN.WF_ID = @C_WF_ID
				), NEW_WF_NODE AS (
					SELECT *
					FROM ADS_WORKFLOW_NODE AWN
					WHERE AWN.WF_ID = @N_WF_ID
				)
				INSERT INTO @CP_WFN_DETAILS (OLD_WF_ID, OLD_WFN_ID, NEW_WF_ID, NEW_WFN_ID)
				SELECT DISTINCT OWN.WF_ID OLD_WF_ID, OWN.WFN_ID OLD_WFN_ID, NWN.WF_ID, NWN.WFN_ID
				FROM OLD_WF_NODE OWN
				JOIN NEW_WF_NODE NWN
				ON NWN.NODE_ID = OWN.NODE_ID
				AND NWN.NODE_TYPE = OWN.NODE_TYPE;

					UPDATE RM_HISTORY SET HISTORYDESC = REPLACE(HISTORYDESC, ''"WFId":'' + cast(@C_WF_ID as varchar(max)) + '','', ''"WFId":'' + cast(@N_WF_ID as varchar(max))  + '','')
					WHERE HISTORYTYPEID = 6 AND OBJECTTYPEID = @TBL_OBJECT_TYPE_ID AND HISTORYDESC LIKE ''%"WFId":'' + cast(@C_WF_ID as varchar(max)) + '',%'';

                                        UPDATE RM_HISTORY SET HISTORYDESC = REPLACE(HISTORYDESC, ''"WFId":"'' + cast(@C_WF_ID as varchar(max)) + ''",'', ''"WFId":"'' + cast(@N_WF_ID as varchar(max))  + ''",'')
					WHERE HISTORYTYPEID = 6 AND OBJECTTYPEID = @TBL_OBJECT_TYPE_ID AND HISTORYDESC LIKE ''%"WFId":"'' + cast(@C_WF_ID as varchar(max)) + ''",%'';
				--	SELECT REPLACE(HISTORYDESC, ''"WFId":'' + cast(@C_WF_ID as varchar(max)) + '','', ''"WFId":'' + cast(@N_WF_ID as varchar(max))  + '','')
				--	FROM RM_HISTORY WHERE HISTORYTYPEID = 6 AND OBJECTTYPEID = @TBL_OBJECT_TYPE_ID AND HISTORYDESC LIKE ''%"WFId":'' + cast(@C_WF_ID as varchar(max)) + '',%'';

				WHILE EXISTS(SELECT * FROM @CP_WFN_DETAILS) BEGIN
					SELECT TOP(1) @CP_O_WFN_ID = OLD_WFN_ID, @CP_O_WF_ID = OLD_WF_ID, @CP_N_WFN_ID = NEW_WFN_ID, @CP_N_WF_ID = NEW_WFN_ID FROM @CP_WFN_DETAILS;
					DELETE FROM @CP_WFN_DETAILS WHERE (OLD_WFN_ID = @CP_O_WFN_ID);

					UPDATE RM_HISTORY SET HISTORYDESC = REPLACE(HISTORYDESC, ''WFNId":'' + cast(@CP_O_WFN_ID as varchar(max)) + '','', ''WFNId":'' + cast(@CP_N_WFN_ID as varchar(max))  + '','')
					WHERE HISTORYTYPEID = 6 AND OBJECTTYPEID = @TBL_OBJECT_TYPE_ID AND HISTORYDESC LIKE ''%WFNId":'' + cast(@CP_O_WFN_ID as varchar(max)) + '',%'';

					UPDATE RM_HISTORY SET HISTORYDESC = REPLACE(HISTORYDESC, ''WFNId":"'' + cast(@CP_O_WFN_ID as varchar(max)) + ''",'', ''WFNId":"'' + cast(@CP_N_WFN_ID as varchar(max))  + ''",'')
					WHERE HISTORYTYPEID = 6 AND OBJECTTYPEID = @TBL_OBJECT_TYPE_ID AND HISTORYDESC LIKE ''%WFNId":"'' + cast(@CP_O_WFN_ID as varchar(max)) + ''",%'';
				--	SELECT REPLACE(HISTORYDESC, ''WFNId":'' + cast(@CP_O_WFN_ID as varchar(max)) + '','', ''WFNId":'' + cast(@CP_N_WFN_ID as varchar(max))  + '','')
				--	FROM RM_HISTORY WHERE HISTORYTYPEID = 6 AND OBJECTTYPEID = @TBL_OBJECT_TYPE_ID AND HISTORYDESC LIKE ''%WFNId":'' + cast(@CP_O_WFN_ID as varchar(max)) + '',%'';
				END

				FETCH NEXT FROM WF_STATUS_CURSOR INTO @C_WF_ID;

			END;

		CLOSE WF_STATUS_CURSOR;
		DEALLOCATE WF_STATUS_CURSOR;

		/*Update Workflow Node ids triggers with new trigger ids*/
		UPDATE ADS_WORKFLOW_NODE SET NODE_ID = @COL_TRIGGER_ID_NEW
		WHERE NODE_ID = @DEFAULT_TRIGGER_ID AND NODE_TYPE = ''T'' AND WF_ID IN (SELECT WF_ID FROM ADS_WORKFLOW WHERE MODULE_ID = @MD_MODULE_ID AND WFTA_ID = @COL_TRIGGER_ID_NEW);

		UPDATE ADS_WORKFLOW_NODE SET NODE_ID = @TBL_TRIGGER_ID_NEW
		WHERE NODE_ID = @DEFAULT_TRIGGER_ID AND NODE_TYPE = ''T'' AND WF_ID IN (SELECT WF_ID FROM ADS_WORKFLOW WHERE MODULE_ID = @MD_MODULE_ID AND WFTA_ID = @TBL_TRIGGER_ID_NEW);

		UPDATE ADS_WORKFLOW_NODE SET NODE_ID = @MAP_TRIGGER_ID_NEW
		WHERE NODE_ID = @DEFAULT_TRIGGER_ID AND NODE_TYPE = ''T'' AND WF_ID IN (SELECT WF_ID FROM ADS_WORKFLOW WHERE MODULE_ID = @MM_MODULE_ID AND WFTA_ID = @MAP_TRIGGER_ID_NEW);

		UPDATE ADS_WORKFLOW_NODE SET NODE_ID = @BGT_TRIGGER_ID_NEW
		WHERE NODE_ID = @DEFAULT_TRIGGER_ID AND NODE_TYPE = ''T'' AND WF_ID IN (SELECT WF_ID FROM ADS_WORKFLOW WHERE MODULE_ID = @BG_MODULE_ID AND WFTA_ID = @BGT_TRIGGER_ID_NEW);

		/*Update Workflow Node ids actions with new action ids*/
		UPDATE ADS_WORKFLOW_NODE SET NODE_ID = @COL_ACTION_ID_NEW
		WHERE NODE_ID = @MD_ACTION_ID_OLD AND NODE_TYPE = ''A'' AND WF_ID IN (SELECT WF_ID FROM ADS_WORKFLOW WHERE MODULE_ID = @MD_MODULE_ID AND WFTA_ID = @COL_TRIGGER_ID_NEW);

		UPDATE ADS_WORKFLOW_NODE SET NODE_ID = @TBL_ACTION_ID_NEW
		WHERE NODE_ID = @MD_ACTION_ID_OLD AND NODE_TYPE = ''A'' AND WF_ID IN (SELECT WF_ID FROM ADS_WORKFLOW WHERE MODULE_ID = @MD_MODULE_ID AND WFTA_ID = @TBL_TRIGGER_ID_NEW);

		UPDATE ADS_WORKFLOW_NODE SET NODE_ID = @MAP_ACTION_ID_NEW
		WHERE NODE_ID = @MM_ACTION_ID_OLD AND NODE_TYPE = ''A'' AND WF_ID IN (SELECT WF_ID FROM ADS_WORKFLOW WHERE MODULE_ID = @MM_MODULE_ID AND WFTA_ID = @MAP_TRIGGER_ID_NEW);

		UPDATE ADS_WORKFLOW_NODE SET NODE_ID = @BGT_ACTION_ID_NEW
		WHERE NODE_ID = @BG_ACTION_ID_OLD AND NODE_TYPE = ''A'' AND WF_ID IN (SELECT WF_ID FROM ADS_WORKFLOW WHERE MODULE_ID = @BG_MODULE_ID AND WFTA_ID = @BGT_TRIGGER_ID_NEW);

		/*Identify WFG_ID for existed statuses and update records*/
		MERGE INTO ADS_WORKFLOW_STATUS AWS
			USING (SELECT DISTINCT AWS.OBJECT_ID, AWS.OBJECT_TYPE_ID, AWS.WFN_ID, AWA.WFG_ID
				FROM ADS_WORKFLOW_STATUS AWS
				JOIN ADS_WORKFLOW_NODE AWN
				ON AWN.WFN_ID = AWS.WFN_ID
				JOIN ADS_WORKFLOW_ASSIGNMENT AWA
				ON AWA.WF_ID = AWN.WF_ID AND AWA.OBJECT_TYPE_ID = @ENV_OBJECT_TYPE_ID
				JOIN SYSTEM_TABLE_COLUMNS_METADATA STCM
				ON AWA.OBJECT_ID = STCM.SCE_ID AND AWS.OBJECT_ID = STCM.STCM_ID AND AWS.OBJECT_TYPE_ID = @COL_OBJECT_TYPE_ID) AWSG
			ON AWSG.OBJECT_ID = AWS.OBJECT_ID AND AWSG.OBJECT_TYPE_ID = AWS.OBJECT_TYPE_ID
			WHEN MATCHED THEN UPDATE SET AWS.WFG_ID = AWSG.WFG_ID;

		MERGE INTO ADS_WORKFLOW_STATUS AWS
			USING (SELECT DISTINCT AWS.OBJECT_ID, AWS.OBJECT_TYPE_ID, AWS.WFN_ID, AWA.WFG_ID
				FROM ADS_WORKFLOW_STATUS AWS
				JOIN ADS_WORKFLOW_NODE AWN
				ON AWN.WFN_ID = AWS.WFN_ID
				JOIN ADS_WORKFLOW_ASSIGNMENT AWA
				ON AWA.WF_ID = AWN.WF_ID AND AWA.OBJECT_TYPE_ID = @ENV_OBJECT_TYPE_ID
				JOIN SYSTEM_TABLE_METADATA STM
				ON AWA.OBJECT_ID = STM.SCE_ID AND AWS.OBJECT_ID = STM.STM_ID AND AWS.OBJECT_TYPE_ID = @TBL_OBJECT_TYPE_ID) AWSG
			ON AWSG.OBJECT_ID = AWS.OBJECT_ID AND AWSG.OBJECT_TYPE_ID = AWS.OBJECT_TYPE_ID
			WHEN MATCHED THEN UPDATE SET AWS.WFG_ID = AWSG.WFG_ID;


		MERGE INTO ADS_WORKFLOW_STATUS AWS
			USING (SELECT DISTINCT AWS.OBJECT_ID, AWS.OBJECT_TYPE_ID, AWS.WFN_ID, AWA.WFG_ID
				FROM ADS_WORKFLOW_STATUS AWS
				JOIN ADS_WORKFLOW_NODE AWN
				ON AWN.WFN_ID = AWS.WFN_ID
				JOIN ADS_WORKFLOW_ASSIGNMENT AWA
				ON AWA.WF_ID = AWN.WF_ID AND AWA.OBJECT_TYPE_ID = @PROJ_OBJECT_TYPE_ID
				JOIN MAPPING_DETAILS MD
				ON AWA.OBJECT_ID = MD.PROJECT_ID AND AWS.OBJECT_ID = MD.MAP_ID AND AWS.OBJECT_TYPE_ID = @MAP_OBJECT_TYPE_ID) AWSG
			ON AWSG.OBJECT_ID = AWS.OBJECT_ID AND AWSG.OBJECT_TYPE_ID = AWS.OBJECT_TYPE_ID
			WHEN MATCHED THEN UPDATE SET AWS.WFG_ID = AWSG.WFG_ID;


		MERGE INTO ADS_WORKFLOW_STATUS AWS
			USING (SELECT DISTINCT AWS.OBJECT_ID, AWS.OBJECT_TYPE_ID, AWS.WFN_ID, AWA.WFG_ID
				FROM ADS_WORKFLOW_STATUS AWS
				JOIN ADS_WORKFLOW_NODE AWN
				ON AWN.WFN_ID = AWS.WFN_ID
				JOIN ADS_WORKFLOW_ASSIGNMENT AWA
				ON AWA.WF_ID = AWN.WF_ID AND AWA.OBJECT_TYPE_ID = @BGC_OBJECT_TYPE_ID
				JOIN BUSINESS_TERMS BGT
				ON AWA.OBJECT_ID = BGT.CATEGORY_ID AND AWS.OBJECT_ID = BGT.BUS_TERM_ID AND AWS.OBJECT_TYPE_ID = @BGT_OBJECT_TYPE_ID) AWSG
			ON AWSG.OBJECT_ID = AWS.OBJECT_ID AND AWSG.OBJECT_TYPE_ID = AWS.OBJECT_TYPE_ID
			WHEN MATCHED THEN UPDATE SET AWS.WFG_ID = AWSG.WFG_ID;

		/*Identify Default WF WFG_ID for existed statuses and update records*/
		SELECT @COL_DEF_WFG_ID = WFG_ID FROM ADS_WORKFLOW_ASSIGNMENT WHERE WF_ID IN (SELECT WF_ID FROM ADS_WORKFLOW WHERE WFTA_ID = @COL_TRIGGER_ID_NEW) AND OBJECT_ID = -1 AND OBJECT_TYPE_ID = @MD_ROOT_OBJECT_TYPE_ID;
		SELECT @TBL_DEF_WFG_ID = WFG_ID FROM ADS_WORKFLOW_ASSIGNMENT WHERE WF_ID IN (SELECT WF_ID FROM ADS_WORKFLOW WHERE WFTA_ID = @TBL_TRIGGER_ID_NEW) AND OBJECT_ID = -1 AND OBJECT_TYPE_ID = @MD_ROOT_OBJECT_TYPE_ID;
		SELECT @MAP_DEF_WFG_ID = WFG_ID FROM ADS_WORKFLOW_ASSIGNMENT WHERE WF_ID IN (SELECT WF_ID FROM ADS_WORKFLOW WHERE WFTA_ID = @MAP_TRIGGER_ID_NEW) AND OBJECT_ID = -1 AND OBJECT_TYPE_ID = @MM_ROOT_OBJECT_TYPE_ID;
		SELECT @BGT_DEF_WFG_ID = WFG_ID FROM ADS_WORKFLOW_ASSIGNMENT WHERE WF_ID IN (SELECT WF_ID FROM ADS_WORKFLOW WHERE WFTA_ID = @BGT_TRIGGER_ID_NEW) AND OBJECT_ID = -1 AND OBJECT_TYPE_ID = @BG_ROOT_OBJECT_TYPE_ID;

		UPDATE ADS_WORKFLOW_STATUS SET WFG_ID = @COL_DEF_WFG_ID WHERE WFG_ID IS NULL AND OBJECT_TYPE_ID = @COL_OBJECT_TYPE_ID;
		UPDATE ADS_WORKFLOW_STATUS SET WFG_ID = @TBL_DEF_WFG_ID WHERE WFG_ID IS NULL AND OBJECT_TYPE_ID = @TBL_OBJECT_TYPE_ID;
		UPDATE ADS_WORKFLOW_STATUS SET WFG_ID = @MAP_DEF_WFG_ID WHERE WFG_ID IS NULL AND OBJECT_TYPE_ID = @MAP_OBJECT_TYPE_ID;
		UPDATE ADS_WORKFLOW_STATUS SET WFG_ID = @BGT_DEF_WFG_ID WHERE WFG_ID IS NULL AND OBJECT_TYPE_ID = @BGT_OBJECT_TYPE_ID;


		/*Insert trigger nodes to wokflow statuses*/

		WITH ADS_WF_ASSGN_TRIGGER_NODES AS
			(SELECT DISTINCT WFG_ID,
							WFN_ID,
							AWA.OBJECT_ID,
							AWA.OBJECT_TYPE_ID
			FROM ADS_WORKFLOW_ASSIGNMENT AWA
			JOIN ADS_WORKFLOW AW ON AW.WF_ID = AWA.WF_ID
			JOIN ADS_WORKFLOW_NODE AWN ON AWN.WF_ID = AWA.WF_ID
			WHERE AW.WFTA_ID = @COL_TRIGGER_ID_NEW
				AND AWN.NODE_TYPE = ''T''),
				ADS_WF_ASSIGNED_TRIGGER_OBJS AS
			(SELECT STCM.STCM_ID, AWFATN.WFN_ID, AWFATN.WFG_ID
			FROM SYSTEM_TABLE_COLUMNS_METADATA STCM
			JOIN ACTIVE_SYS_CON_ENVIRONMENTS ASCE
			ON ASCE.SCE_ID = STCM.SCE_ID
			JOIN ADS_WF_ASSGN_TRIGGER_NODES AWFATN ON AWFATN.OBJECT_ID = STCM.SCE_ID
			LEFT JOIN ADS_WORKFLOW_STATUS AWS ON AWS.OBJECT_ID = STCM.STCM_ID
			AND AWS.OBJECT_TYPE_ID = @COL_OBJECT_TYPE_ID
			WHERE STCM.VALID = 1
				AND AWS.OBJECT_ID IS NULL
				AND AWFATN.OBJECT_ID <> -1
				AND (STCM.TYPE <> ''ENTITY'' OR STCM.TYPE IS NULL)
				AND STCM.CREATED_DATETIME > @DEFAULT_WF_CREATED_ON
			UNION
			SELECT STCM.STCM_ID, AWFATN.WFN_ID, AWFATN.WFG_ID
			FROM SYSTEM_TABLE_COLUMNS_METADATA STCM
			JOIN ACTIVE_SYS_CON_ENVIRONMENTS ASCE
			ON ASCE.SCE_ID = STCM.SCE_ID
			JOIN ADS_WF_ASSGN_TRIGGER_NODES AWFATN ON AWFATN.OBJECT_ID = -1
			LEFT JOIN ADS_WORKFLOW_STATUS AWS ON AWS.OBJECT_ID = STCM.STCM_ID
			AND AWS.OBJECT_TYPE_ID = @COL_OBJECT_TYPE_ID
			WHERE STCM.VALID = 1
				AND AWS.OBJECT_ID IS NULL
				AND STCM.SCE_ID NOT IN
				(SELECT OBJECT_ID
				FROM ADS_WF_ASSGN_TRIGGER_NODES
				WHERE OBJECT_ID <> -1)
				AND (STCM.TYPE <> ''ENTITY'' OR STCM.TYPE IS NULL)
				AND STCM.CREATED_DATETIME > @DEFAULT_WF_CREATED_ON
				)
			INSERT INTO ADS_WORKFLOW_STATUS (OBJECT_TYPE_ID, OBJECT_ID, WFN_ID, WFG_ID)
			SELECT @COL_OBJECT_TYPE_ID OBJECT_TYPE_ID, STCM_ID, WFN_ID, WFG_ID
			FROM ADS_WF_ASSIGNED_TRIGGER_OBJS;

		WITH ADS_WF_ASSGN_TRIGGER_NODES AS
			(SELECT DISTINCT WFG_ID,
							WFN_ID,
							AWA.OBJECT_ID,
							AWA.OBJECT_TYPE_ID
			FROM ADS_WORKFLOW_ASSIGNMENT AWA
			JOIN ADS_WORKFLOW AW ON AW.WF_ID = AWA.WF_ID
			JOIN ADS_WORKFLOW_NODE AWN ON AWN.WF_ID = AWA.WF_ID
			WHERE AW.WFTA_ID = @TBL_TRIGGER_ID_NEW
				AND AWN.NODE_TYPE = ''T''),
				ADS_WF_ASSIGNED_TRIGGER_OBJS AS
			(SELECT STM.STM_ID, AWFATN.WFN_ID, AWFATN.WFG_ID
			FROM SYSTEM_TABLE_METADATA STM
			JOIN ACTIVE_SYS_CON_ENVIRONMENTS ASCE
			ON ASCE.SCE_ID = STM.SCE_ID
			JOIN ADS_WF_ASSGN_TRIGGER_NODES AWFATN ON AWFATN.OBJECT_ID = STM.SCE_ID
			LEFT JOIN ADS_WORKFLOW_STATUS AWS ON AWS.OBJECT_ID = STM.STM_ID
			AND AWS.OBJECT_TYPE_ID = @TBL_OBJECT_TYPE_ID
			WHERE STM.VALID = 1
				AND AWS.OBJECT_ID IS NULL
				AND AWFATN.OBJECT_ID <> -1
				AND STM.CREATED_DATETIME > @DEFAULT_WF_CREATED_ON
			UNION
			SELECT STM.STM_ID, AWFATN.WFN_ID, AWFATN.WFG_ID
			FROM SYSTEM_TABLE_METADATA STM
			JOIN ACTIVE_SYS_CON_ENVIRONMENTS ASCE
			ON ASCE.SCE_ID = STM.SCE_ID
			JOIN ADS_WF_ASSGN_TRIGGER_NODES AWFATN ON AWFATN.OBJECT_ID = -1
			LEFT JOIN ADS_WORKFLOW_STATUS AWS ON AWS.OBJECT_ID = STM.STM_ID
			AND AWS.OBJECT_TYPE_ID = @TBL_OBJECT_TYPE_ID
			WHERE STM.VALID = 1
				AND AWS.OBJECT_ID IS NULL
				AND STM.SCE_ID NOT IN
				(SELECT OBJECT_ID
				FROM ADS_WF_ASSGN_TRIGGER_NODES
				WHERE OBJECT_ID <> -1)
				AND STM.CREATED_DATETIME > @DEFAULT_WF_CREATED_ON
				)
			INSERT INTO ADS_WORKFLOW_STATUS (OBJECT_TYPE_ID, OBJECT_ID, WFN_ID, WFG_ID)
			SELECT @TBL_OBJECT_TYPE_ID OBJECT_TYPE_ID, STM_ID, WFN_ID, WFG_ID
			FROM ADS_WF_ASSIGNED_TRIGGER_OBJS;


		WITH ADS_WF_ASSGN_TRIGGER_NODES AS
			(SELECT DISTINCT WFG_ID,
							WFN_ID,
							AWA.OBJECT_ID,
							AWA.OBJECT_TYPE_ID
			FROM ADS_WORKFLOW_ASSIGNMENT AWA
			JOIN ADS_WORKFLOW AW ON AW.WF_ID = AWA.WF_ID
			JOIN ADS_WORKFLOW_NODE AWN ON AWN.WF_ID = AWA.WF_ID
			WHERE AW.WFTA_ID = @MAP_TRIGGER_ID_NEW
				AND AWN.NODE_TYPE = ''T''),
				ADS_WF_ASSIGNED_TRIGGER_OBJS AS
			(SELECT MD.MAP_ID, AWFATN.WFN_ID, AWFATN.WFG_ID
			FROM MAPPING_DETAILS MD
			JOIN ADS_WF_ASSGN_TRIGGER_NODES AWFATN ON MD.PROJECT_ID = AWFATN.OBJECT_ID
			LEFT JOIN ADS_WORKFLOW_STATUS AWS ON AWS.OBJECT_ID = MD.MAP_ID
			AND AWS.OBJECT_TYPE_ID = @MAP_OBJECT_TYPE_ID
			WHERE AWS.OBJECT_ID IS NULL
				AND AWFATN.OBJECT_ID <> -1
				AND MD.CREATED_DATE_TIME > @DEFAULT_WF_CREATED_ON
			UNION
			SELECT MD.MAP_ID, AWFATN.WFN_ID, AWFATN.WFG_ID
			FROM MAPPING_DETAILS MD
			JOIN ADS_WF_ASSGN_TRIGGER_NODES AWFATN ON AWFATN.OBJECT_ID = -1
			LEFT JOIN ADS_WORKFLOW_STATUS AWS ON AWS.OBJECT_ID = MD.MAP_ID
			AND AWS.OBJECT_TYPE_ID = @MAP_OBJECT_TYPE_ID
			WHERE AWS.OBJECT_ID IS NULL
				AND MD.PROJECT_ID NOT IN
				(SELECT OBJECT_ID
				FROM ADS_WF_ASSGN_TRIGGER_NODES
				WHERE OBJECT_ID <> -1)
				AND MD.CREATED_DATE_TIME > @DEFAULT_WF_CREATED_ON)
			INSERT INTO ADS_WORKFLOW_STATUS (OBJECT_TYPE_ID, OBJECT_ID, WFN_ID, WFG_ID)
			SELECT @MAP_OBJECT_TYPE_ID OBJECT_TYPE_ID, MAP_ID, WFN_ID, WFG_ID
			FROM ADS_WF_ASSIGNED_TRIGGER_OBJS;


		WITH ADS_WF_ASSGN_TRIGGER_NODES AS
		(SELECT DISTINCT AWA.WFG_ID,
                            WFN_ID,
                            AWOG.OBJECT_ID
		FROM (
			SELECT CATEGORY_ID OBJECT_ID, dbo.FN_GET_OBJECT_WFG_ID(CATEGORY_ID, @BGC_OBJECT_TYPE_ID, @BGT_TRIGGER_ID_NEW) WFG_ID
			FROM BG_CATEGORIES
		) AWOG
		JOIN ADS_WORKFLOW_ASSIGNMENT AWA ON AWA.WFG_ID = AWOG.WFG_ID
		JOIN ADS_WORKFLOW AW ON AW.WF_ID = AWA.WF_ID
		JOIN ADS_WORKFLOW_NODE AWN ON AWN.WF_ID = AWA.WF_ID
		WHERE AW.WFTA_ID = @BGT_TRIGGER_ID_NEW
			AND AWN.NODE_TYPE = ''T''),
				ADS_WF_ASSIGNED_TRIGGER_OBJS AS
			(SELECT BT.BUS_TERM_ID, AWFATN.WFN_ID, AWFATN.WFG_ID
			FROM BUSINESS_TERMS BT
			JOIN RM_HISTORY RH ON RH.OBJECTID = BT.BUS_TERM_ID
			AND RH.OBJECTTYPEID = @BGT_OBJECT_TYPE_ID
			AND RH.HISTORYTYPEID = 1
			JOIN ADS_WF_ASSGN_TRIGGER_NODES AWFATN ON BT.CATEGORY_ID = AWFATN.OBJECT_ID
			LEFT JOIN ADS_WORKFLOW_STATUS AWS ON AWS.OBJECT_ID = BT.BUS_TERM_ID
			AND AWS.OBJECT_TYPE_ID = @BGT_OBJECT_TYPE_ID
			WHERE AWS.OBJECT_ID IS NULL
			AND RH.HISTORYDATESTAMP > @DEFAULT_WF_CREATED_ON)
		INSERT INTO ADS_WORKFLOW_STATUS (OBJECT_TYPE_ID, OBJECT_ID, WFN_ID, WFG_ID)
		SELECT @BGT_OBJECT_TYPE_ID OBJECT_TYPE_ID, BUS_TERM_ID, WFN_ID, WFG_ID
		FROM ADS_WF_ASSIGNED_TRIGGER_OBJS;

		DELETE FROM ADS_WORKFLOW_STATUS WHERE WFN_ID IN (SELECT WFN_ID FROM ADS_WORKFLOW_NODE WHERE NODE_TYPE = ''A'');

		INSERT INTO ADS_WORKFLOW_NODE_ROLE
		SELECT WFN_ID, ''com.ads.roles.Administrator''
		FROM ADS_WORKFLOW_NODE WHERE NODE_TYPE = ''T'' OR NODE_TYPE = ''A'';

		DROP TABLE ADS_WORKFLOW_ASGMNT_TRIGGER;
		DROP TABLE ADS_WORKFLOW_TRIGGER;
		DROP TABLE ADS_WORKFLOW_ACTION;');

	END
GO

IF (OBJECTPROPERTY(OBJECT_ID(N'[SP_COPY_WORKFLOW]'),N'IsProcedure') = 1)
	BEGIN
            DROP PROCEDURE SP_COPY_WORKFLOW;
	END
GO

IF(SELECT COUNT(*) FROM [SYS].[TRIGGERS] AS TRIG INNER JOIN SYS.TABLES AS TAB ON TRIG.PARENT_ID = TAB.OBJECT_ID WHERE TAB.NAME = 'ADS_WORKFLOW_STATUS' AND TRIG.NAME='ADS_WF_STATUS_MIG_I_TRIG') > 0
	BEGIN
		DROP TRIGGER ADS_WF_STATUS_MIG_I_TRIG;
	END;
GO

IF(SELECT COUNT(*) FROM [SYS].[TRIGGERS] AS TRIG INNER JOIN SYS.TABLES AS TAB ON TRIG.PARENT_ID = TAB.OBJECT_ID WHERE TAB.NAME = 'ADS_WORKFLOW_STATUS' AND TRIG.NAME='ADS_WF_STATUS_MIG_U_TRIG') > 0
	BEGIN
		DROP TRIGGER ADS_WF_STATUS_MIG_U_TRIG;
	END;
GO

-- WORKFLOW MANAGER MIGRATION SCRIPT ENDS ---

IF NOT EXISTS (SELECT *
	       FROM   SYSOBJECTS
	       WHERE  ID = OBJECT_ID(N'BUP_DETAILS')
		      AND TYPE = 'U')
  BEGIN
      EXECUTE ('CREATE TABLE BUP_DETAILS(ID BIGINT NOT NULL IDENTITY(1,1),NAME varchar(255) NOT NULL,  URL varchar(4000) NOT NULL,DESCRIPTION varchar(4000) NULL)');
  END
GO
IF NOT EXISTS (SELECT * FROM ADS_KEY_VALUE_OBJECTS WHERE  OBJECT_TYPE = 'BUP_DETAILS')
    BEGIN
	INSERT INTO ADS_KEY_VALUE_OBJECTS (OBJECT_TYPE,OBJECT_TABLE,OBJECT_TABLE_COLUMN,OBJECT_PARENT_TYPE,OBJECT_PARENT_COLUMN_ID, MODULE_KEY,OBJECT_LEVEL)
        SELECT 'BUP_DETAILS','BUP_DETAILS','ID','','','com.ads.mm.permission.settgs.miscsettg.bupregistrations', 1
    END
GO
IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'SYS_CON_ENVIRONMENTS' AND COLUMN_NAME = 'SYSTEM_ENVIRONMENT_NAME' AND CHARACTER_MAXIMUM_LENGTH = '50')
    BEGIN
        ALTER TABLE SYS_CON_ENVIRONMENTS ALTER COLUMN SYSTEM_ENVIRONMENT_NAME VARCHAR(200) NOT NULL;
        ALTER TABLE SYS_CON_ENVIRONMENTS ALTER COLUMN PROD_ENVIRONMENT_NAME VARCHAR(200) NULL;
        ALTER TABLE SYSTEM_TABLE_METADATA ALTER COLUMN SYSTEM_ENV_NAME VARCHAR(200) NULL;
        ALTER TABLE SYSTEM_TABLE_COLUMNS_METADATA ALTER COLUMN SYSTEM_ENV_NAME VARCHAR(200) NULL;
    END
GO
IF EXISTS (SELECT * FROM ADS_MM_VERSION WHERE VALUE <= '9.0')
    BEGIN
        UPDATE ADS_WORKFLOW SET SYSTEMBASED = 0;
    END
GO
IF EXISTS (SELECT * FROM SYS.OBJECTS WHERE OBJECT_ID = OBJECT_ID(N'FN_GET_OBJECT_TYPE_HIR') AND TYPE IN (N'FN', N'IF', N'TF', N'FS', N'FT'))
	BEGIN
		DROP FUNCTION FN_GET_OBJECT_TYPE_HIR;
	END
GO
CREATE FUNCTION [FN_GET_OBJECT_TYPE_HIR]
   (@OBJECT_TYPE_ID BIGINT, @CHILD_CONFIG_OBJECT_TYPE_ID BIGINT)
   RETURNS @OBJECT_TYPE_HIR TABLE(OBJECT_TYPE_ID BIGINT,OBJECT_TYPE VARCHAR(512), OBJECT_TABLE VARCHAR(512), OBJECT_TABLE_COLUMN VARCHAR(512), OBJECT_PARENT_TYPE VARCHAR(512), OBJECT_PARENT_COLUMN_ID VARCHAR(512), OBJECT_LEVEL INT, OBJECT_REF_KEY VARCHAR(1024)) AS
   BEGIN
		DECLARE @TEMP_OBJECT_TYPE         VARCHAR(255);
		DECLARE @CHILD_CONFIG_OBJECT_TYPE VARCHAR(255);
		DECLARE @KEY_VALUE_OBJECT_TYPE    VARCHAR(512) = NULL;

		SELECT @KEY_VALUE_OBJECT_TYPE = OBJECT_TYPE
		FROM ADS_KEY_VALUE_OBJECTS
		WHERE OBJECT_TYPE_ID            = @OBJECT_TYPE_ID;
		SET @TEMP_OBJECT_TYPE           = @KEY_VALUE_OBJECT_TYPE;

		SELECT @CHILD_CONFIG_OBJECT_TYPE = OBJECT_TYPE
		FROM ADS_KEY_VALUE_OBJECTS
		WHERE OBJECT_TYPE_ID = @CHILD_CONFIG_OBJECT_TYPE_ID;

            IF @CHILD_CONFIG_OBJECT_TYPE_ID IS NOT NULL AND @CHILD_CONFIG_OBJECT_TYPE_ID > 0
            BEGIN
                SET @TEMP_OBJECT_TYPE = @CHILD_CONFIG_OBJECT_TYPE;
            END;

            WITH PARENTS AS
            (SELECT *
                    FROM ADS_KEY_VALUE_OBJECTS
                    WHERE OBJECT_TYPE = @KEY_VALUE_OBJECT_TYPE
                    UNION ALL
                    SELECT ADS_KEY_VALUE_OBJECTS.*
                    FROM ADS_KEY_VALUE_OBJECTS
                    JOIN PARENTS
                    ON ADS_KEY_VALUE_OBJECTS.OBJECT_TYPE = PARENTS.OBJECT_PARENT_TYPE)
            INSERT INTO @OBJECT_TYPE_HIR
            SELECT P.OBJECT_TYPE_ID,
                       P.OBJECT_TYPE,
                       P.OBJECT_TABLE,
                       P.OBJECT_TABLE_COLUMN,
                       P.OBJECT_PARENT_TYPE,
                       P.OBJECT_PARENT_COLUMN_ID,
                       P.OBJECT_LEVEL,
                       P.OBJECT_TYPE + '#' + @TEMP_OBJECT_TYPE OBJECT_REF_KEY
            FROM PARENTS P;

            RETURN;
	END
GO
IF NOT EXISTS (SELECT *
	       FROM   SYSOBJECTS
	       WHERE  ID = OBJECT_ID(N'SM_COLUMN_DATA_PROFILE')
		      AND TYPE = 'U')
  BEGIN
      EXECUTE ('CREATE TABLE SM_COLUMN_DATA_PROFILE(
	ID BIGINT NOT NULL IDENTITY(1,1),
	STCM_ID BIGINT NOT NULL,
	TOTAL_ROWS BIGINT NULL,
	UNIQUE_VALUES BIGINT NULL,
	NULL_VALUES BIGINT NULL,
	REPEATED_VALUES BIGINT NULL,
	MIN_VALUE NVARCHAR(MAX) NULL,
	MAX_VALUE NVARCHAR(MAX) NULL,
	MOST_FREQUENT_VALUE NVARCHAR(MAX) NULL,
	LEAST_FREQUENT_VALUE NVARCHAR(MAX) NULL,
	CONSTRAINT PK_SM_COL_DQ_ASS_ID PRIMARY KEY(ID),
        CONSTRAINT FK_SM_COL_DP_ASS_STCM_ID FOREIGN KEY(STCM_ID) REFERENCES SYSTEM_TABLE_COLUMNS_METADATA(STCM_ID) ON DELETE CASCADE)');
  END
GO
IF NOT EXISTS (SELECT *
	       FROM   SYSOBJECTS
	       WHERE  ID = OBJECT_ID(N'SM_COLUMN_DATA_PROFILE_PATTERN')
		      AND TYPE = 'U')
  BEGIN
      EXECUTE ('CREATE TABLE SM_COLUMN_DATA_PROFILE_PATTERN(
	ID BIGINT NOT NULL IDENTITY(1,1),
	STCM_ID BIGINT NOT NULL,
	OBJECT_TYPE SMALLINT NULL,
	PATTERN VARCHAR(MAX) NULL,
        [COUNT] BIGINT NULL,
        [ORDER] BIGINT NULL,
	CONSTRAINT PK_SM_COL_DP_PTN_ID PRIMARY KEY(ID),
        CONSTRAINT FK_SM_COL_DP_PTN_STCM_ID FOREIGN KEY(STCM_ID) REFERENCES SYSTEM_TABLE_COLUMNS_METADATA(STCM_ID) ON DELETE CASCADE)');
  END
GO
IF COL_LENGTH('SYSTEM_TABLE_COLUMNS_METADATA', 'INCLUDE_IN_DATA_PROFILE') IS NULL
BEGIN
   ALTER TABLE SYSTEM_TABLE_COLUMNS_METADATA ADD INCLUDE_IN_DATA_PROFILE char(1) NULL;
   ALTER TABLE SYSTEM_TABLE_COLUMNS_METADATA ADD DATA_PROFILE_JOB_STATE VARCHAR(10) NULL;
   ALTER TABLE SYSTEM_TABLE_COLUMNS_METADATA ADD DATA_PROFILE_JOB_FAIL_REASON VARCHAR(4000) NULL;
   ALTER TABLE SYSTEM_TABLE_COLUMNS_METADATA ADD DATA_PROFILE_START_DATE DATETIME NULL;
   ALTER TABLE SYSTEM_TABLE_COLUMNS_METADATA ADD DATA_PROFILE_END_DATE DATETIME NULL;
END
GO
IF (SELECT COUNT(*) FROM APP_PREFERENCES WHERE PREFERENCE_NAME = 'DATA_PROFILE_EMAIL_SUBJECT') = 0
BEGIN
    INSERT INTO APP_PREFERENCES( PREFERENCE_NAME, PREFERENCE_VALUE) VALUES('DATA_PROFILE_EMAIL_SUBJECT','Data Profile Assessment Job Details @jobname@/@systemname@/@envname@/@tablename@');
    INSERT INTO APP_PREFERENCES( PREFERENCE_NAME, PREFERENCE_VALUE) VALUES('DATA_PROFILE_EMAIL_BODY','Hi,<br><br><center> <h2> Data Profile Assessment Job Details</h2><br> </center> <b>System Name :</b> @systemname@<br> <b>Environment Name :</b> @envname@<br> <b>Table Name :</b> @tablename@<br><b>Job Owner :</b> @jobOwner@<br><b>Job Start Date Time :</b> @jobStartedDateTime@<br><b>Job Completion Date Time :</b> @jobExecutedDateTime@<br><b>Total Duration :</b> @jobExecutedDuration@<br><br>@datagrid@<BR><BR><I><font color =red>Note</font>: This is an auto generated email. Do not reply to this email.</I>');
    INSERT INTO APP_PREFERENCES(PREFERENCE_NAME,PREFERENCE_VALUE) VALUES ('SEND_EMAIL_ON_DATA_PROFILE','true');
    INSERT INTO APP_PREFERENCES(PREFERENCE_NAME,PREFERENCE_VALUE) VALUES ('DATA_PROFILE_MOST_FREQUENT_PATTERNS','15');
    INSERT INTO APP_PREFERENCES(PREFERENCE_NAME,PREFERENCE_VALUE) VALUES ('DATA_PROFILE_LEAST_FREQUENT_PATTERNS','15');
    INSERT INTO APP_PREFERENCES(PREFERENCE_NAME,PREFERENCE_VALUE) VALUES ('DATA_PROFILE_IS_CHARACTER_DATA','true');
END;
GO
IF COL_LENGTH('SYSTEM_DEFINITION_DETAILS', 'DATA_PROFILE_SCORE') IS NULL
BEGIN
    ALTER TABLE SYSTEM_DEFINITION_DETAILS ADD DATA_PROFILE_SCORE bigint NULL
END
GO
IF COL_LENGTH('SYS_CON_ENVIRONMENTS', 'DATA_PROFILE_SCORE') IS NULL
BEGIN
    ALTER TABLE SYS_CON_ENVIRONMENTS ADD DATA_PROFILE_SCORE bigint NULL
END
GO
IF COL_LENGTH('SYSTEM_TABLE_METADATA', 'DATA_PROFILE_SCORE') IS NULL
BEGIN
    ALTER TABLE SYSTEM_TABLE_METADATA ADD DATA_PROFILE_SCORE bigint NULL
END
GO
IF COL_LENGTH('SYSTEM_TABLE_COLUMNS_METADATA', 'DATA_PROFILE_SCORE') IS NULL
BEGIN
    ALTER TABLE SYSTEM_TABLE_COLUMNS_METADATA ADD DATA_PROFILE_SCORE bigint NULL
END
GO
BEGIN
   EXEC ('ALTER VIEW ACTIVE_SYS_CON_ENVIRONMENTS
 AS
   SELECT *
   FROM   SYS_CON_ENVIRONMENTS
   WHERE  STATUS = ''ACTIVE''
   ');
END
GO
ALTER VIEW [VALID_SYSTEM_TABLE_METADATA]
AS
SELECT STM.* FROM SYSTEM_TABLE_METADATA STM JOIN ACTIVE_SYS_CON_ENVIRONMENTS SCS ON STM.SCE_ID = SCS.SCE_ID WHERE STM.VALID = 1 OR STM.VALID IS NULL
GO
ALTER VIEW [VALID_SYS_TBL_COL_METADATA]
AS
SELECT STCM.* FROM SYSTEM_TABLE_COLUMNS_METADATA STCM JOIN ACTIVE_SYS_CON_ENVIRONMENTS SCS ON STCM.SCE_ID = SCS.SCE_ID WHERE STCM.VALID = 1 OR STCM.VALID IS NULL
GO
IF NOT EXISTS (SELECT * FROM SM_CLASSIFICATION_SDI)
BEGIN
 INSERT INTO SM_CLASSIFICATION_SDI(SDI_CLASS_NAME,SDI_CLASS_DESCRIPTION, CREATED_BY,CREATED_DATE,LAST_MODIFIED_BY,LAST_MODIFIED_DATE)
 SELECT 'Confidential','Confidential', 'System',Getdate(),'System',Getdate() UNION ALL
 SELECT 'PII','Personally Identifiable Information', 'System',Getdate(),'System',Getdate() UNION ALL
 SELECT 'Public','Public', 'System',Getdate(),'System',Getdate() UNION ALL
 SELECT 'Restricted','Restricted', 'System',Getdate(),'System',Getdate() UNION ALL
 SELECT 'Secret','Secret', 'System',Getdate(),'System',Getdate() UNION ALL
 SELECT 'SPI','Sensitive Personal Information', 'System',Getdate(),'System',Getdate()
END
GO
IF NOT EXISTS (SELECT * FROM MT_DEFINITION WHERE  MTD_NAME = 'SM_DQ_SCORE_TYPE')
    BEGIN
        INSERT INTO MT_DEFINITION (MTD_NAME,MTD_DESC,ADS_MODULE)
        SELECT 'SM_DQ_SCORE_TYPE','SM_DQ_SCORE_TYPE','SM'
    END
GO
IF EXISTS (SELECT SCE_ID FROM SYS_CON_ENVIRONMENTS WHERE DATABASE_DRIVER='org.gjt.mm.mysql.Driver')
    UPDATE SYS_CON_ENVIRONMENTS SET DATABASE_DRIVER='com.mysql.jdbc.Driver' WHERE DATABASE_DRIVER='org.gjt.mm.mysql.Driver';
GO
IF (SELECT COUNT(*) FROM APP_PREFERENCES WHERE PREFERENCE_NAME = 'SETTINGS_ENFORCE_LOGIN_FOR_DATA_PREVIEW') < 1
BEGIN
    INSERT INTO APP_PREFERENCES( PREFERENCE_NAME, PREFERENCE_VALUE) VALUES('SETTINGS_ENFORCE_LOGIN_FOR_DATA_PREVIEW','true');
END;
GO
IF NOT EXISTS (SELECT *
	       FROM   SYSOBJECTS
	       WHERE  ID = OBJECT_ID(N'BUP_VISIBILITY')
		      AND TYPE = 'U')
BEGIN
    EXECUTE ('CREATE TABLE BUP_VISIBILITY(
      OBJECT_ID BIGINT NOT NULL,
      OBJECT_TYPE_ID BIGINT NOT NULL,
      ENABLED CHAR(1) DEFAULT 1,
      CONSTRAINT BUP_VISIBILITY_PK PRIMARY KEY(OBJECT_ID, OBJECT_TYPE_ID))');
END
GO
DECLARE @OBJECT_TYPE_ID INT, @OBJECT_ID INT ;
SELECT @OBJECT_TYPE_ID =  OBJECT_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE='SM_DATABASE_OPTIONS';
SELECT @OBJECT_ID =  MTD_ID FROM MT_DEFINITION WHERE  MTD_NAME = 'SM_DATABASE_OPTIONS' AND ADS_MODULE = 'SM';
IF EXISTS( SELECT @OBJECT_TYPE_ID) AND EXISTS( SELECT @OBJECT_ID) AND NOT EXISTS( SELECT * FROM ADS_KEY_VALUE WHERE OBJECT_TYPE_ID  = @OBJECT_TYPE_ID AND OBJECT_ID = @OBJECT_ID AND KEY_NAME = 'IncludeSynonyms')
    BEGIN
	INSERT INTO ADS_KEY_VALUE(KEY_NAME,KEY_VALUE,OBJECT_TYPE_ID,OBJECT_ID,DATATYPE_ID,KV_TYPE,LABEL_WIDTH,CONTROL_WIDTH,KV_ORDER,COMPONENT,DEFAULTVALUE,ISSYSTEMBASED)      VALUES('IncludeSynonyms','Include Synonyms (Only Oracle)',@OBJECT_TYPE_ID,@OBJECT_ID,'1','Check Box','','','5','','false',0)
    END
GO
IF NOT EXISTS (SELECT *
	       FROM   SYSOBJECTS
	       WHERE  ID = OBJECT_ID(N'BUP_MODULES')
		      AND TYPE = 'U')
  BEGIN
      EXECUTE ('
    CREATE TABLE BUP_MODULES(
    MODULE_ID      INT NOT NULL,
    MODULE_NAME    VARCHAR(255) NOT NULL,
    MODULE_KEY     VARCHAR(255) NOT NULL UNIQUE,
    PARENT_KEY     VARCHAR(255) NULL,
    MODULE_ORDER   INT NOT NULL,
    MODULE_FORWARD VARCHAR(50) NOT NULL UNIQUE,
    MODULE_VISIBILITY BIT NOT NULL,
    CONSTRAINT PK_BUP_MODULE_MODULE_ID PRIMARY KEY(MODULE_ID))')
  END
GO
IF (SELECT COUNT(*) FROM BUP_MODULES) = 0
BEGIN
    INSERT INTO BUP_MODULES(MODULE_ID, MODULE_NAME, MODULE_KEY, PARENT_KEY, MODULE_ORDER, MODULE_FORWARD,MODULE_VISIBILITY)
    SELECT 1, 'Dashboard', 'com.erwin.bup.dashboard', null, 1 , 'dashboard',1
    UNION ALL
    SELECT 2, 'Datacatalog', 'com.erwin.bup.datacatalougue', null,  2 , 'datacatalog',1
    UNION ALL
    SELECT 3, 'Metadata', 'com.erwin.bup.metadata', null, 3 ,'metadata',1
    UNION ALL
    SELECT 4, 'Mappings', 'com.erwin.bup.mappings',  null, 4 , 'mappings',1
    UNION ALL
    SELECT 5, 'Data Governance', 'com.erwin.bup.datagovernance', null,  5 , 'glossary',1
    UNION ALL
    SELECT 6, 'Business Terms', 'com.erwin.bup.datagovernance.businessterms', 'com.erwin.bup.datagovernance', 6 , 'businessterms',1
    UNION ALL
    SELECT 7, 'Business Policies', 'com.erwin.bup.datagovernance.businesspolicies', 'com.erwin.bup.datagovernance', 7 , 'businesspolicies',1
    UNION ALL
    SELECT 8, 'Business Rules', 'com.erwin.bup.datagovernance.businessrules', 'com.erwin.bup.datagovernance', 8 , 'businessrules',1
    UNION ALL
    SELECT 9, 'Reference Data', 'com.erwin.bup.referencedata', null, 9 , 'referencedata',1
    UNION ALL
    SELECT 10, 'Releases', 'com.erwin.bup.releases',  null, 10 , 'releases',1
    UNION ALL
    SELECT 11, 'Requirements', 'com.erwin.bup.requirements', null, 11 , 'requirements',1
    UNION ALL
    SELECT 12, 'Reports', 'com.erwin.bup.reports', null, 12, 'reports',1
END
GO
IF COL_LENGTH('SYS_CON_ENVIRONMENTS', 'DRAFT') IS NULL
    BEGIN
        EXECUTE('ALTER TABLE SYS_CON_ENVIRONMENTS ADD DRAFT tinyint NULL DEFAULT 0');
		EXECUTE('UPDATE SYS_CON_ENVIRONMENTS SET DRAFT = 0');
    END
GO
BEGIN
   EXEC ('ALTER VIEW ACTIVE_SYS_CON_ENVIRONMENTS
 AS
   SELECT * FROM   SYS_CON_ENVIRONMENTS WHERE  STATUS = ''ACTIVE''');
END
GO
IF NOT EXISTS (SELECT *
	       FROM   SYSOBJECTS
	       WHERE  ID = OBJECT_ID(N'BG_CUSTOM_TYPES')
		      AND TYPE = 'U')
    BEGIN
    EXECUTE ('CREATE TABLE BG_CUSTOM_TYPES   ( ID  BIGINT IDENTITY(1, 1) ,
      OBJECT_TYPE_ID BIGINT NOT NULL,
	  CATALOG_TYPE_ID BIGINT NOT NULL,
	  CATALOGS_TYPE_ID BIGINT NOT NULL,
      NAME              VARCHAR(300) NOT NULL,
	  ENTITY_TITLE VARCHAR(100) NOT NULL,
      DESCRIPTION VARCHAR(4000) NULL,
      THUMBNAIL_ICON image NULL,
      DOCS_REQUIRED BIT DEFAULT 0 NOT NULL,
	  ENABLE BIT DEFAULT 0 NOT NULL,
	  DISPLAY_ORDER FLOAT DEFAULT 0.0 NOT NULL,
	  SYSTEM_BASED BIT DEFAULT 0 NOT NULL,
      CONSTRAINT UK_BG_CUST_CIDRN UNIQUE(OBJECT_TYPE_ID,NAME),
      CONSTRAINT FK_BG_CUST_OBJ_ID FOREIGN KEY(OBJECT_TYPE_ID) REFERENCES ADS_KEY_VALUE_OBJECTS(OBJECT_TYPE_ID) ON DELETE CASCADE,
      CONSTRAINT PK_BG_CUST_RID PRIMARY KEY(ID))');
  END
GO
IF NOT EXISTS (SELECT *
	       FROM   SYSOBJECTS
	       WHERE  ID = OBJECT_ID(N'BG_CUSTOM_OBJECTS')
		      AND TYPE = 'U')
    BEGIN
    EXECUTE ('CREATE TABLE BG_CUSTOM_OBJECTS   ( ID  BIGINT IDENTITY(1, 1) ,
		CATEGORY_ID  BIgINT NOT NULL,
		OBJECT_TYPE_ID BIGINT NOT NULL,
		NAME              VARCHAR(300) NOT NULL,
		DESCRIPTION VARCHAR(4000) NULL,
		CONSTRAINT UK_BG_CUST_OBJS_ID UNIQUE(CATEGORY_ID,OBJECT_TYPE_ID,NAME),
		CONSTRAINT FK_BG_CUST_CAT_ID FOREIGN KEY(CATEGORY_ID) REFERENCES BG_CATEGORIES(CATEGORY_ID) ON DELETE CASCADE,
		CONSTRAINT FK_BG_CUST_OBJS_ID FOREIGN KEY(OBJECT_TYPE_ID) REFERENCES ADS_KEY_VALUE_OBJECTS(OBJECT_TYPE_ID) ON DELETE CASCADE,
		CONSTRAINT PK_BG_CUST_OBJS_ID PRIMARY KEY(ID))');
  END
GO
IF NOT EXISTS (SELECT * FROM ADS_KEY_VALUE_OBJECTS WHERE  OBJECT_TYPE = 'BGM_POLICY_CATALOGS')
	BEGIN
		EXECUTE('INSERT INTO ADS_KEY_VALUE_OBJECTS (OBJECT_TYPE,OBJECT_TABLE,OBJECT_TABLE_COLUMN,OBJECT_PARENT_TYPE,OBJECT_PARENT_COLUMN_ID,OBJECT_LEVEL,MODULE_KEY,OBJECT_TITLE, SYSTEM_BASED) VALUES(''BGM_POLICY_CATALOGS'','''','''','''','''',0,''com.ads.mm.permission.bgm'',''Business Policies'', 1)');

		EXECUTE('INSERT INTO ADS_KEY_VALUE_OBJECTS (OBJECT_TYPE,OBJECT_TABLE,OBJECT_TABLE_COLUMN,OBJECT_PARENT_TYPE,OBJECT_PARENT_COLUMN_ID,OBJECT_LEVEL,MODULE_KEY,OBJECT_TITLE, SYSTEM_BASED) VALUES(''BGM_RULE_CATALOGS'','''','''','''','''',0,''com.ads.mm.permission.bgm'',''Business Rules'', 1)');

		EXECUTE('UPDATE ADS_KEY_VALUE_OBJECTS SET OBJECT_PARENT_TYPE = ''BGM_POLICY_CATALOGS'', OBJECT_PARENT_COLUMN_ID = ''BGM_POLICY_CATALOGS_ID'' WHERE OBJECT_TYPE = ''BGM_POLICY_CATALOG''');

		EXECUTE('UPDATE ADS_KEY_VALUE_OBJECTS SET OBJECT_PARENT_TYPE = ''BGM_RULE_CATALOGS'', OBJECT_PARENT_COLUMN_ID = ''BGM_RULE_CATALOGS_ID'' WHERE OBJECT_TYPE = ''BGM_RULE_CATALOG''');

		EXECUTE('UPDATE ADS_KEY_VALUE_OBJECTS SET OBJECT_PARENT_TYPE = ''BGM_POLICY_CATALOG'' WHERE OBJECT_TYPE = ''BGM_POLICY''');

		EXECUTE('UPDATE ADS_KEY_VALUE_OBJECTS SET OBJECT_PARENT_TYPE = ''BGM_RULE_CATALOG'' WHERE OBJECT_TYPE = ''BGM_RULE''');
	END
GO
DECLARE @BUSINESS_RULE_OBJECT_TYPE_ID INT, @BUSINESS_POLICY_OBJECT_TYPE_ID INT ;
SELECT @BUSINESS_RULE_OBJECT_TYPE_ID =  OBJECT_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE='BGM_RULE';
SELECT @BUSINESS_POLICY_OBJECT_TYPE_ID =  OBJECT_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE='BGM_POLICY';
IF EXISTS( SELECT @BUSINESS_RULE_OBJECT_TYPE_ID) AND EXISTS( SELECT @BUSINESS_POLICY_OBJECT_TYPE_ID) AND NOT EXISTS( SELECT * FROM ADS_WORKFLOW_TRIGGER_ACTION WHERE OBJECT_TYPE_ID  = @BUSINESS_RULE_OBJECT_TYPE_ID OR OBJECT_TYPE_ID = @BUSINESS_POLICY_OBJECT_TYPE_ID )
    BEGIN
        INSERT INTO ADS_WORKFLOW_TRIGGER_ACTION ([NAME], [TITLE], [DESCRIPTION], [STATUS_TITLE], [OBJECT_TYPE_ID], [FILENAME], [METHOD], [NODE_TYPE])
        SELECT 'ON_CREATE','On Create','On Create','Draft', @BUSINESS_RULE_OBJECT_TYPE_ID, 'BGM_Triggers.js','onBusinessRuleCreate','T'
        UNION
        SELECT 'ON_CREATE','On Create','On Create','Draft', @BUSINESS_POLICY_OBJECT_TYPE_ID, 'BGM_Triggers.js','onBusinessPolicyCreate','T'
        UNION
        SELECT 'PUBLISH','Publish','Publish','Published',@BUSINESS_RULE_OBJECT_TYPE_ID, 'BGM_Actions.js','onBusinessRulePublish','A'
        UNION
        SELECT 'PUBLISH','Publish','Publish','Published',@BUSINESS_POLICY_OBJECT_TYPE_ID, 'BGM_Actions.js','onBusinessPolicyPublish','A';
    END
GO
DECLARE @OBJECT_TYPE_ID INT, @CATALOGS_TYPE_ID INT, @CATALOG_TYPE_ID INT ;
SELECT @OBJECT_TYPE_ID =  OBJECT_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE='BGM_TERM';
SELECT @CATALOG_TYPE_ID =  OBJECT_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE='BGM_TERM_CATALOG';
SELECT @CATALOGS_TYPE_ID =  OBJECT_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE='BGM_TERM_CATALOGS';

IF EXISTS( SELECT @OBJECT_TYPE_ID) AND EXISTS( SELECT @CATALOG_TYPE_ID) AND EXISTS( SELECT @CATALOGS_TYPE_ID) AND NOT EXISTS( SELECT * FROM BG_CUSTOM_TYPES WHERE OBJECT_TYPE_ID  = @OBJECT_TYPE_ID AND CATALOG_TYPE_ID = @CATALOG_TYPE_ID AND NAME = 'Business Terms')
    BEGIN
	Insert into  BG_CUSTOM_TYPES(OBJECT_TYPE_ID,CATALOG_TYPE_ID,CATALOGS_TYPE_ID,NAME,ENTITY_TITLE, DESCRIPTION,THUMBNAIL_ICON,DOCS_REQUIRED, ENABLE,SYSTEM_BASED) values(@OBJECT_TYPE_ID,@CATALOG_TYPE_ID,@CATALOGS_TYPE_ID,'Business Terms','Business Term','Business Terms Description',null,1,1,1)
    END
GO
DECLARE @OBJECT_TYPE_ID INT, @CATALOGS_TYPE_ID INT, @CATALOG_TYPE_ID INT ;
SELECT @OBJECT_TYPE_ID =  OBJECT_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE='BGM_POLICY';
SELECT @CATALOG_TYPE_ID =  OBJECT_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE='BGM_POLICY_CATALOG';
SELECT @CATALOGS_TYPE_ID =  OBJECT_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE='BGM_POLICY_CATALOGS';

IF EXISTS( SELECT @OBJECT_TYPE_ID) AND EXISTS( SELECT @CATALOG_TYPE_ID) AND EXISTS( SELECT @CATALOGS_TYPE_ID) AND NOT EXISTS( SELECT * FROM BG_CUSTOM_TYPES WHERE OBJECT_TYPE_ID  = @OBJECT_TYPE_ID AND CATALOG_TYPE_ID = @CATALOG_TYPE_ID AND NAME = 'Business Policies')
    BEGIN
	Insert into  BG_CUSTOM_TYPES(OBJECT_TYPE_ID,CATALOG_TYPE_ID,CATALOGS_TYPE_ID,NAME,ENTITY_TITLE, DESCRIPTION,THUMBNAIL_ICON,DOCS_REQUIRED, ENABLE,SYSTEM_BASED) values(@OBJECT_TYPE_ID,@CATALOG_TYPE_ID,@CATALOGS_TYPE_ID,'Business Policies','Business Policy','Business Policies Description',null,1,1,1)
    END
GO
DECLARE @OBJECT_TYPE_ID INT, @CATALOGS_TYPE_ID INT, @CATALOG_TYPE_ID INT ;
    SELECT @OBJECT_TYPE_ID =  OBJECT_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE='BGM_RULE';
    SELECT @CATALOG_TYPE_ID =  OBJECT_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE='BGM_RULE_CATALOG';
    SELECT @CATALOGS_TYPE_ID =  OBJECT_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE='BGM_RULE_CATALOGS';

    IF EXISTS( SELECT @OBJECT_TYPE_ID) AND EXISTS( SELECT @CATALOG_TYPE_ID) AND EXISTS( SELECT @CATALOGS_TYPE_ID) AND NOT EXISTS( SELECT * FROM BG_CUSTOM_TYPES WHERE OBJECT_TYPE_ID  = @OBJECT_TYPE_ID AND CATALOG_TYPE_ID = @CATALOG_TYPE_ID AND NAME = 'Business Rules')
        BEGIN
            Insert into  BG_CUSTOM_TYPES(OBJECT_TYPE_ID,CATALOG_TYPE_ID,CATALOGS_TYPE_ID,NAME,ENTITY_TITLE, DESCRIPTION,THUMBNAIL_ICON,DOCS_REQUIRED, ENABLE,SYSTEM_BASED) values(@OBJECT_TYPE_ID,@CATALOG_TYPE_ID,@CATALOGS_TYPE_ID,'Business Rules','Business Rule','Business Rules Description',null,1,1,1)
        END
GO
DECLARE @OBJECT_TYPE_ID INT, @OBJECT_ID INT ;
SELECT @OBJECT_TYPE_ID =  OBJECT_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE='SM_DATABASE_OPTIONS';
SELECT @OBJECT_ID =  MTD_ID FROM MT_DEFINITION WHERE  MTD_NAME = 'SM_DATABASE_OPTIONS' AND ADS_MODULE = 'SM';
    IF EXISTS( SELECT @OBJECT_TYPE_ID) AND EXISTS( SELECT @OBJECT_ID) AND NOT EXISTS( SELECT * FROM ADS_KEY_VALUE WHERE OBJECT_TYPE_ID  = @OBJECT_TYPE_ID AND OBJECT_ID = @OBJECT_ID AND KEY_NAME = 'scanNestedRefSynonyms')
        BEGIN
            INSERT INTO ADS_KEY_VALUE(KEY_NAME,KEY_VALUE,OBJECT_TYPE_ID,OBJECT_ID,DATATYPE_ID,KV_TYPE,LABEL_WIDTH,CONTROL_WIDTH,KV_ORDER,COMPONENT,DEFAULTVALUE,ISSYSTEMBASED) VALUES('scanNestedRefSynonyms','Scan Nested Synonyms',@OBJECT_TYPE_ID,@OBJECT_ID,'1','Check Box','','','6','','false',0)
        END
GO
IF NOT EXISTS (SELECT * FROM APP_PREFERENCES WHERE PREFERENCE_NAME = 'EMAIL_USE_AUTHENTICATION')
   BEGIN
INSERT INTO APP_PREFERENCES(PREFERENCE_NAME,PREFERENCE_VALUE) VALUES ('EMAIL_USE_AUTHENTICATION','0')
   END
GO
DECLARE @OBJECT_TYPE_ID INT,@OBJECT_ID INT;
SELECT @OBJECT_TYPE_ID =  OBJECT_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE='MT_DEFINITION';
SELECT @OBJECT_ID =  MTD_ID FROM MT_DEFINITION WHERE  MTD_NAME = 'SM_DQ_SCORE_TYPE' AND ADS_MODULE = 'SM';
IF NOT EXISTS (SELECT * FROM ADS_KEY_VALUE WHERE  KEY_NAME = 'Very High (9-10)' and OBJECT_TYPE_ID = @OBJECT_TYPE_ID)
    BEGIN
	INSERT INTO ADS_KEY_VALUE(KEY_NAME,KEY_VALUE,OBJECT_TYPE_ID,OBJECT_ID,DATATYPE_ID,KV_ORDER,ISPUBLISHED)
	VALUES('Very High (9-10)','Very High (9-10)',@OBJECT_TYPE_ID,@OBJECT_ID,'1','1','1')
	INSERT INTO ADS_KEY_VALUE(KEY_NAME,KEY_VALUE,OBJECT_TYPE_ID,OBJECT_ID,DATATYPE_ID,KV_ORDER,ISPUBLISHED)
	VALUES('High (7-8)','High (7-8)',@OBJECT_TYPE_ID,@OBJECT_ID,'1','2','1')
	INSERT INTO ADS_KEY_VALUE(KEY_NAME,KEY_VALUE,OBJECT_TYPE_ID,OBJECT_ID,DATATYPE_ID,KV_ORDER,ISPUBLISHED)
	VALUES('Medium (5-6)','Medium (5-6)',@OBJECT_TYPE_ID,@OBJECT_ID,'1','3','1')
	INSERT INTO ADS_KEY_VALUE(KEY_NAME,KEY_VALUE,OBJECT_TYPE_ID,OBJECT_ID,DATATYPE_ID,KV_ORDER,ISPUBLISHED)
	VALUES('Low (2-4)','Low (2-4)',@OBJECT_TYPE_ID,@OBJECT_ID,'1','4','1')
	INSERT INTO ADS_KEY_VALUE(KEY_NAME,KEY_VALUE,OBJECT_TYPE_ID,OBJECT_ID,DATATYPE_ID,KV_ORDER,ISPUBLISHED)
	VALUES('Very Low (0-2)','Very Low (0-2)',@OBJECT_TYPE_ID,@OBJECT_ID,'1','5','1')
    END
GO
IF EXISTS (SELECT * FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE = 'BGM_TERM_CATALOG' AND OBJECT_TITLE ='Category' )
BEGIN
EXECUTE('UPDATE ADS_KEY_VALUE_OBJECTS SET OBJECT_TITLE = ''Catalog'' WHERE OBJECT_TYPE = ''BGM_CATEGORY''');
EXECUTE('UPDATE ADS_KEY_VALUE_OBJECTS SET OBJECT_TITLE = ''Catalog'' WHERE OBJECT_TYPE = ''BGM_TERM_CATALOG''');
EXECUTE('UPDATE ADS_KEY_VALUE_OBJECTS SET OBJECT_TITLE = ''Catalog'' WHERE OBJECT_TYPE = ''BGM_POLICY_CATALOG''');
EXECUTE('UPDATE ADS_KEY_VALUE_OBJECTS SET OBJECT_TITLE = ''Catalog'' WHERE OBJECT_TYPE = ''BGM_RULE_CATALOG''');
END
GO
GO
IF (OBJECTPROPERTY(OBJECT_ID(N'[PROC_DELETE_KEY_VALUES]'),N'ISPROCEDURE') = 1)
BEGIN
	DROP PROCEDURE PROC_DELETE_KEY_VALUES
END
GO
CREATE
PROCEDURE PROC_DELETE_KEY_VALUES
  @ID      VARCHAR(MAX),
  @ID_TYPE      VARCHAR(MAX)
AS
    BEGIN
		WITH CTE AS (SELECT A.*,      CAST('' AS VARCHAR(MAX)) AS PARENTNAME FROM   ADS_KEY_VALUE A WHERE  A.KV_ID IN (SELECT KV_ID FROM ADS_KEY_VALUE WHERE OBJECT_TYPE_ID = @ID_TYPE AND OBJECT_ID = @ID) UNION ALL SELECT T.*, CTE.PARENTNAME + '/' + CTE.KEY_NAME FROM   ADS_KEY_VALUE AS T INNER JOIN CTE ON CAST(CTE.KV_ID AS VARCHAR) = T.OBJECT_ID   AND T.OBJECT_TYPE_ID = (SELECT OBJECT_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE = 'ADS_KEY_VALUE'))   DELETE  FROM AMM_MASTER_CONFIGURATION  WHERE OBJECT_ID IN (SELECT KV_ID FROM CTE);

		WITH CTE AS (SELECT A.*,      CAST('' AS VARCHAR(MAX)) AS PARENTNAME FROM   ADS_KEY_VALUE A WHERE  A.KV_ID IN (SELECT KV_ID FROM ADS_KEY_VALUE WHERE OBJECT_TYPE_ID = @ID_TYPE AND OBJECT_ID = @ID) UNION ALL SELECT T.*, CTE.PARENTNAME + '/' + CTE.KEY_NAME FROM   ADS_KEY_VALUE AS T INNER JOIN CTE ON CAST(CTE.KV_ID AS VARCHAR) = T.OBJECT_ID   AND T.OBJECT_TYPE_ID = (SELECT OBJECT_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE = 'ADS_KEY_VALUE'))  DELETE  FROM ADS_KEY_VALUE  WHERE KV_ID IN (SELECT KV_ID FROM CTE );
  END;
GO
IF NOT EXISTS (SELECT * FROM ADS_KEY_VALUE_OBJECTS WHERE  OBJECT_TYPE = 'BGM_CUSTOM_TYPES')
    BEGIN
	INSERT INTO ADS_KEY_VALUE_OBJECTS (OBJECT_TYPE,OBJECT_TABLE,OBJECT_TABLE_COLUMN,OBJECT_PARENT_TYPE,OBJECT_PARENT_COLUMN_ID, MODULE_KEY,OBJECT_LEVEL)
        SELECT 'BGM_CUSTOM_TYPES','BG_CUSTOM_TYPES','ID','','','com.ads.mm.permission.bgm', 1
    END
GO
IF EXISTS (SELECT * FROM SYS.OBJECTS WHERE OBJECT_ID = OBJECT_ID(N'ISINT') AND TYPE IN (N'FN', N'IF', N'TF', N'FS', N'FT'))
    BEGIN
            DROP FUNCTION ISINT;
    END
GO
CREATE FUNCTION ISINT(@number VARCHAR(20))
RETURNS BIT AS
BEGIN
   RETURN ISNUMERIC(@number) & ISNUMERIC(Replace(Replace(Replace(@number,' ','A'),'+','A'),'-','A') + '.0e0');
END
GO
IF EXISTS (SELECT * FROM SYS.OBJECTS WHERE OBJECT_ID = OBJECT_ID(N'FN_RESOLVE_SUB_KV_VALUE') AND TYPE IN (N'FN', N'IF', N'TF', N'FS', N'FT'))
    BEGIN
            DROP FUNCTION FN_RESOLVE_SUB_KV_VALUE;
    END
GO

CREATE FUNCTION FN_RESOLVE_SUB_KV_VALUE(@VALUE VARCHAR(4000), @DELIMITER CHAR, @PARENT_ID VARCHAR(200), @PARENT_OBJECT_TYPE_ID BIGINT)
RETURNS VARCHAR(MAX) AS
BEGIN
    DECLARE @RESOLVED_VALUE VARCHAR(MAX);

    SET @RESOLVED_VALUE = STUFF((SELECT @DELIMITER + SKV.KEY_NAME FROM ADS_KEY_VALUE SKV
                    WHERE SKV.KEY_VALUE IN (SELECT [value] FROM SPLIT(@DELIMITER, @VALUE))
                    AND SKV.OBJECT_ID = @PARENT_ID AND SKV.OBJECT_TYPE_ID = @PARENT_OBJECT_TYPE_ID FOR XML PATH('') ), 1, 1, '');
    RETURN CASE WHEN @RESOLVED_VALUE IS NOT NULL THEN @RESOLVED_VALUE ELSE '' END;
END
GO
IF EXISTS (SELECT * FROM SYS.OBJECTS WHERE OBJECT_ID = OBJECT_ID(N'FN_RESOLVE_RDM_KV_VALUE') AND TYPE IN (N'FN', N'IF', N'TF', N'FS', N'FT'))
    BEGIN
            DROP FUNCTION FN_RESOLVE_RDM_KV_VALUE;
    END
GO
CREATE FUNCTION FN_RESOLVE_RDM_KV_VALUE(@VALUE VARCHAR(4000), @DELIMITER CHAR)
RETURNS VARCHAR(MAX) AS
BEGIN
    DECLARE @RESOLVED_VALUE VARCHAR(MAX);

    SET @RESOLVED_VALUE = STUFF((SELECT @DELIMITER + RCV.RDM_REF_TAB_COL_VALUE FROM RDM_REF_TAB_COL_VALUES RCV
                    WHERE RCV.RDM_REF_TAB_COL_VALUE_ID IN (SELECT [value] FROM SPLIT(@DELIMITER, @VALUE) where dbo.ISINT([value]) = 1) FOR XML PATH('') ), 1, 1, '');
    RETURN CASE WHEN @RESOLVED_VALUE IS NOT NULL THEN @RESOLVED_VALUE ELSE '' END;
END
GO
IF COL_LENGTH('BG_POLICIES', 'PUBLISH') IS NULL
    BEGIN
        EXECUTE('ALTER TABLE BG_POLICIES ADD PUBLISH varchar(1) NOT NULL DEFAULT ''N''');
        EXECUTE('UPDATE BG_POLICIES SET PUBLISH = ''N''');
        EXECUTE('ALTER TABLE BG_BUSINESS_RULES ADD PUBLISH varchar(1) NOT NULL DEFAULT ''N''');
        EXECUTE('UPDATE BG_BUSINESS_RULES SET PUBLISH = ''N''');
        EXECUTE('ALTER TABLE BG_CUSTOM_OBJECTS ADD PUBLISH varchar(1) NOT NULL DEFAULT ''N''');
        EXECUTE('UPDATE BG_CUSTOM_OBJECTS SET PUBLISH = ''N''');
    END
GO
DECLARE @OBJECT_TYPE_ID INT, @OBJECT_ID INT ;
SELECT @OBJECT_TYPE_ID =  OBJECT_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE='SM_DATABASE_OPTIONS';
SELECT @OBJECT_ID =  MTD_ID FROM MT_DEFINITION WHERE  MTD_NAME = 'SM_DATABASE_OPTIONS' AND ADS_MODULE = 'SM';
IF EXISTS( SELECT @OBJECT_TYPE_ID) AND EXISTS( SELECT @OBJECT_ID) AND NOT EXISTS( SELECT * FROM ADS_KEY_VALUE WHERE OBJECT_TYPE_ID  = @OBJECT_TYPE_ID AND OBJECT_ID = @OBJECT_ID AND KEY_NAME = 'QueryBatchLimit')
    BEGIN
	INSERT INTO ADS_KEY_VALUE(KEY_NAME,KEY_VALUE,OBJECT_TYPE_ID,OBJECT_ID,DATATYPE_ID,KV_TYPE,LABEL_WIDTH,CONTROL_WIDTH,KV_ORDER,COMPONENT,DEFAULTVALUE)      VALUES('QueryBatchLimit','Query Batch Limit',@OBJECT_TYPE_ID,@OBJECT_ID,'1','Number','','','6','','999')
    END
GO
IF (OBJECTPROPERTY(OBJECT_ID(N'[PRO_UPDATE_DQSCORE]'),N'IsProcedure') = 1)
BEGIN
	DROP PROCEDURE PRO_UPDATE_DQSCORE
END
GO
CREATE
PROCEDURE PRO_UPDATE_DQSCORE
  @objectId    VARCHAR(50),
  @dataProfileScoreId VARCHAR(50),
  @allTables VARCHAR(50),
  @allCols VARCHAR(50),
  @objectLevel VARCHAR(50)
AS
BEGIN
  IF @objectLevel = 'SM_ENVIRONMENT'
    BEGIN
        UPDATE SYS_CON_ENVIRONMENTS SET DATA_PROFILE_SCORE = @dataProfileScoreId WHERE SCE_ID = @objectId;
		IF @allTables = 'true'
		BEGIN
		UPDATE SYSTEM_TABLE_METADATA SET DATA_PROFILE_SCORE = @dataProfileScoreId WHERE SCE_ID = @objectId;
		END
		IF @allCols = 'true'
		BEGIN
		UPDATE SYSTEM_TABLE_COLUMNS_METADATA SET DATA_PROFILE_SCORE = @dataProfileScoreId WHERE SCE_ID = @objectId;
		END

  END;
ELSE
  IF @objectLevel = 'SM_TABLE'
    BEGIN
        UPDATE SYSTEM_TABLE_METADATA SET DATA_PROFILE_SCORE = @dataProfileScoreId WHERE STM_ID= @objectId;
		IF @allCols = 'true'
		BEGIN
		UPDATE SYSTEM_TABLE_COLUMNS_METADATA SET DATA_PROFILE_SCORE = @dataProfileScoreId WHERE STM_ID = @objectId
		END
    END
  END
GO
IF NOT EXISTS (SELECT * FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE = 'RELATIONSHIP_MASTER')
    BEGIN
	INSERT INTO ADS_KEY_VALUE_OBJECTS (OBJECT_TYPE,OBJECT_TABLE,OBJECT_TABLE_COLUMN,OBJECT_PARENT_TYPE,OBJECT_PARENT_COLUMN_ID, MODULE_KEY,OBJECT_LEVEL,SYSTEM_BASED)
        SELECT 'RELATIONSHIP_MASTER','RELATIONSHIP_MASTER','RM_ID','','','com.ads.mm.permission.generic.relationship', 0,1
    END
GO
IF NOT EXISTS (SELECT *
	       FROM   SYSOBJECTS
	       WHERE  ID = OBJECT_ID(N'RELATIONSHIP_MASTER')
		      AND TYPE = 'U')
    BEGIN
    EXECUTE ('CREATE TABLE RELATIONSHIP_MASTER
		(
		RM_ID BIGINT IDENTITY(1,1),
		FROM_OBJECT_TYPE_ID BIGINT NOT NULL,
		TO_OBJECT_TYPE_ID BIGINT NOT NULL,
		DEFINED_BY CHAR(1) NOT NULL,
		DESCRIPTION VARCHAR(4000) NULL,
		CONSTRAINT UK_REL_MSTR_OBJ_IDS UNIQUE(FROM_OBJECT_TYPE_ID,TO_OBJECT_TYPE_ID,DEFINED_BY),
		CONSTRAINT FK_RM_FROM_OBJECT_TYPE_ID FOREIGN KEY(FROM_OBJECT_TYPE_ID) REFERENCES ADS_KEY_VALUE_OBJECTS(OBJECT_TYPE_ID),
		CONSTRAINT FK_RM_TO_OBJECT_TYPE_ID FOREIGN KEY(TO_OBJECT_TYPE_ID) REFERENCES ADS_KEY_VALUE_OBJECTS(OBJECT_TYPE_ID),
		CONSTRAINT PK_DIS_RM_ID PRIMARY KEY(RM_ID)
		)');
    DECLARE @RELATIONSHIP_MASTER_ID INT, @HISTORYDESC_ID INT, @HISTORYDESC_FROM_OBJECT_TYPE_ID INT, @HISTORYDESC_TO_OBJECT_TYPE_ID INT;
    SET @RELATIONSHIP_MASTER_ID = (SELECT OBJECT_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE='RELATIONSHIP_MASTER');
-- SET 1
    SET @HISTORYDESC_FROM_OBJECT_TYPE_ID = (SELECT OBJECT_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE='BGM_TERM');
    SET @HISTORYDESC_TO_OBJECT_TYPE_ID = (SELECT OBJECT_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE='BGM_TERM');
    INSERT INTO RELATIONSHIP_MASTER (FROM_OBJECT_TYPE_ID, TO_OBJECT_TYPE_ID,DEFINED_BY,DESCRIPTION) SELECT @HISTORYDESC_FROM_OBJECT_TYPE_ID AS FROM_OBJECT_TYPE_ID, @HISTORYDESC_TO_OBJECT_TYPE_ID AS TO_OBJECT_TYPE_ID,'U',''
    SET @HISTORYDESC_ID = SCOPE_IDENTITY();
    INSERT INTO RM_HISTORY
           (HISTORYTYPEID ,HISTORYDESC ,OBJECTID ,OBJECTTYPEID ,HISTORYDATESTAMP ,USER_ID)
    	VALUES
	   (
        1
       , '{"id": '+CAST(@HISTORYDESC_ID AS VARCHAR)+', "fromObjectTypeId": '+CAST(@HISTORYDESC_FROM_OBJECT_TYPE_ID AS VARCHAR)+', "toObjectTypeId": "'+CAST(@HISTORYDESC_TO_OBJECT_TYPE_ID AS VARCHAR)+'", "fromObjectTypeTitle": "'+CAST(@HISTORYDESC_FROM_OBJECT_TYPE_ID AS VARCHAR)+'","toObjectTypeTitle": "'+CAST(@HISTORYDESC_TO_OBJECT_TYPE_ID AS VARCHAR)+'"}'
	   , @HISTORYDESC_ID
	   , @RELATIONSHIP_MASTER_ID
	   , CURRENT_TIMESTAMP
       ,'Administrator'
	   );

    INSERT INTO RELATIONSHIP_MASTER (FROM_OBJECT_TYPE_ID, TO_OBJECT_TYPE_ID,DEFINED_BY,DESCRIPTION) SELECT @HISTORYDESC_TO_OBJECT_TYPE_ID AS FROM_OBJECT_TYPE_ID,@HISTORYDESC_FROM_OBJECT_TYPE_ID AS TO_OBJECT_TYPE_ID,'S',''
    SET @HISTORYDESC_ID = SCOPE_IDENTITY();
    INSERT INTO RM_HISTORY
           (HISTORYTYPEID ,HISTORYDESC ,OBJECTID ,OBJECTTYPEID ,HISTORYDATESTAMP ,USER_ID)
    	VALUES
	   (
        1
       , '{"id": '+CAST(@HISTORYDESC_ID AS VARCHAR)+', "fromObjectTypeId": '+CAST(@HISTORYDESC_TO_OBJECT_TYPE_ID AS VARCHAR)+', "toObjectTypeId": "'+CAST(@HISTORYDESC_FROM_OBJECT_TYPE_ID AS VARCHAR)+'", "fromObjectTypeTitle": "","toObjectTypeTitle": "","definedBy": "S"}'
	   , @HISTORYDESC_ID
	   , @RELATIONSHIP_MASTER_ID
	   , CURRENT_TIMESTAMP
       ,'Administrator'
	   );
-- SET 2
    SET @HISTORYDESC_FROM_OBJECT_TYPE_ID = (SELECT OBJECT_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE='BGM_TERM');
    SET @HISTORYDESC_TO_OBJECT_TYPE_ID = (SELECT OBJECT_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE='BGM_POLICY');
    INSERT INTO RELATIONSHIP_MASTER (FROM_OBJECT_TYPE_ID,TO_OBJECT_TYPE_ID,DEFINED_BY,DESCRIPTION) SELECT @HISTORYDESC_FROM_OBJECT_TYPE_ID AS FROM_OBJECT_TYPE_ID, @HISTORYDESC_TO_OBJECT_TYPE_ID AS TO_OBJECT_TYPE_ID,'U',''
    SET @HISTORYDESC_ID = SCOPE_IDENTITY();
    INSERT INTO RM_HISTORY
           (HISTORYTYPEID ,HISTORYDESC ,OBJECTID ,OBJECTTYPEID ,HISTORYDATESTAMP ,USER_ID)
    	VALUES
	   (
        1
       , '{"id": '+CAST(@HISTORYDESC_ID AS VARCHAR)+', "fromObjectTypeId": '+CAST(@HISTORYDESC_FROM_OBJECT_TYPE_ID AS VARCHAR)+', "toObjectTypeId": "'+CAST(@HISTORYDESC_TO_OBJECT_TYPE_ID AS VARCHAR)+'", "fromObjectTypeTitle": "'+CAST(@HISTORYDESC_FROM_OBJECT_TYPE_ID AS VARCHAR)+'","toObjectTypeTitle": "'+CAST(@HISTORYDESC_TO_OBJECT_TYPE_ID AS VARCHAR)+'"}'
	   , @HISTORYDESC_ID
	   , @RELATIONSHIP_MASTER_ID
	   , CURRENT_TIMESTAMP
       ,'Administrator'
	   );

    INSERT INTO RELATIONSHIP_MASTER (FROM_OBJECT_TYPE_ID, TO_OBJECT_TYPE_ID,DEFINED_BY,DESCRIPTION) SELECT @HISTORYDESC_TO_OBJECT_TYPE_ID AS FROM_OBJECT_TYPE_ID,@HISTORYDESC_FROM_OBJECT_TYPE_ID AS TO_OBJECT_TYPE_ID,'S',''
    SET @HISTORYDESC_ID = SCOPE_IDENTITY();
    INSERT INTO RM_HISTORY
           (HISTORYTYPEID ,HISTORYDESC ,OBJECTID ,OBJECTTYPEID ,HISTORYDATESTAMP ,USER_ID)
    	VALUES
	   (
        1
       , '{"id": '+CAST(@HISTORYDESC_ID AS VARCHAR)+', "fromObjectTypeId": '+CAST(@HISTORYDESC_TO_OBJECT_TYPE_ID AS VARCHAR)+', "toObjectTypeId": "'+CAST(@HISTORYDESC_FROM_OBJECT_TYPE_ID AS VARCHAR)+'", "fromObjectTypeTitle": "","toObjectTypeTitle": "","definedBy": "S"}'
	   , @HISTORYDESC_ID
	   , @RELATIONSHIP_MASTER_ID
	   , CURRENT_TIMESTAMP
       ,'Administrator'
	   );
-- SET 3
    SET @HISTORYDESC_FROM_OBJECT_TYPE_ID = (SELECT OBJECT_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE='BGM_TERM');
    SET @HISTORYDESC_TO_OBJECT_TYPE_ID = (SELECT OBJECT_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE='SM_COLUMN');
    INSERT INTO RELATIONSHIP_MASTER (FROM_OBJECT_TYPE_ID,TO_OBJECT_TYPE_ID,DEFINED_BY,DESCRIPTION) SELECT @HISTORYDESC_FROM_OBJECT_TYPE_ID AS FROM_OBJECT_TYPE_ID, @HISTORYDESC_TO_OBJECT_TYPE_ID AS TO_OBJECT_TYPE_ID,'U',''
    SET @HISTORYDESC_ID = SCOPE_IDENTITY();
    INSERT INTO RM_HISTORY
           (HISTORYTYPEID ,HISTORYDESC ,OBJECTID ,OBJECTTYPEID ,HISTORYDATESTAMP ,USER_ID)
    	VALUES
	   (
        1
       , '{"id": '+CAST(@HISTORYDESC_ID AS VARCHAR)+', "fromObjectTypeId": '+CAST(@HISTORYDESC_FROM_OBJECT_TYPE_ID AS VARCHAR)+', "toObjectTypeId": "'+CAST(@HISTORYDESC_TO_OBJECT_TYPE_ID AS VARCHAR)+'", "fromObjectTypeTitle": "'+CAST(@HISTORYDESC_FROM_OBJECT_TYPE_ID AS VARCHAR)+'","toObjectTypeTitle": "'+CAST(@HISTORYDESC_TO_OBJECT_TYPE_ID AS VARCHAR)+'"}'
	   , @HISTORYDESC_ID
	   , @RELATIONSHIP_MASTER_ID
	   , CURRENT_TIMESTAMP
       ,'Administrator'
	   );

    INSERT INTO RELATIONSHIP_MASTER (FROM_OBJECT_TYPE_ID, TO_OBJECT_TYPE_ID,DEFINED_BY,DESCRIPTION) SELECT @HISTORYDESC_TO_OBJECT_TYPE_ID AS FROM_OBJECT_TYPE_ID, @HISTORYDESC_FROM_OBJECT_TYPE_ID AS TO_OBJECT_TYPE_ID,'S',''
    SET @HISTORYDESC_ID = SCOPE_IDENTITY();
    INSERT INTO RM_HISTORY
           (HISTORYTYPEID ,HISTORYDESC ,OBJECTID ,OBJECTTYPEID ,HISTORYDATESTAMP ,USER_ID)
    	VALUES
	   (
        1
       , '{"id": '+CAST(@HISTORYDESC_ID AS VARCHAR)+', "fromObjectTypeId": '+CAST(@HISTORYDESC_TO_OBJECT_TYPE_ID AS VARCHAR)+', "toObjectTypeId": "'+CAST(@HISTORYDESC_FROM_OBJECT_TYPE_ID AS VARCHAR)+'", "fromObjectTypeTitle": "","toObjectTypeTitle": "","definedBy": "S"}'
	   , @HISTORYDESC_ID
	   , @RELATIONSHIP_MASTER_ID
	   , CURRENT_TIMESTAMP
       ,'Administrator'
	   );
-- SET 4
    SET @HISTORYDESC_FROM_OBJECT_TYPE_ID = (SELECT OBJECT_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE='BGM_TERM');
    SET @HISTORYDESC_TO_OBJECT_TYPE_ID = (SELECT OBJECT_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE='SM_TABLE');
    INSERT INTO RELATIONSHIP_MASTER (FROM_OBJECT_TYPE_ID,TO_OBJECT_TYPE_ID,DEFINED_BY,DESCRIPTION) SELECT @HISTORYDESC_FROM_OBJECT_TYPE_ID AS FROM_OBJECT_TYPE_ID, @HISTORYDESC_TO_OBJECT_TYPE_ID AS TO_OBJECT_TYPE_ID,'U',''
    SET @HISTORYDESC_ID = SCOPE_IDENTITY();
    INSERT INTO RM_HISTORY
           (HISTORYTYPEID ,HISTORYDESC ,OBJECTID ,OBJECTTYPEID ,HISTORYDATESTAMP ,USER_ID)
    	VALUES
	   (
        1
       , '{"id": '+CAST(@HISTORYDESC_ID AS VARCHAR)+', "fromObjectTypeId": '+CAST(@HISTORYDESC_FROM_OBJECT_TYPE_ID AS VARCHAR)+', "toObjectTypeId": "'+CAST(@HISTORYDESC_TO_OBJECT_TYPE_ID AS VARCHAR)+'", "fromObjectTypeTitle": "'+CAST(@HISTORYDESC_FROM_OBJECT_TYPE_ID AS VARCHAR)+'","toObjectTypeTitle": "'+CAST(@HISTORYDESC_TO_OBJECT_TYPE_ID AS VARCHAR)+'"}'
	   , @HISTORYDESC_ID
	   , @RELATIONSHIP_MASTER_ID
	   , CURRENT_TIMESTAMP
       ,'Administrator'
	   );

    INSERT INTO RELATIONSHIP_MASTER (FROM_OBJECT_TYPE_ID, TO_OBJECT_TYPE_ID,DEFINED_BY,DESCRIPTION) SELECT @HISTORYDESC_TO_OBJECT_TYPE_ID AS FROM_OBJECT_TYPE_ID,@HISTORYDESC_FROM_OBJECT_TYPE_ID AS TO_OBJECT_TYPE_ID,'S',''
    SET @HISTORYDESC_ID = SCOPE_IDENTITY();
    INSERT INTO RM_HISTORY
           (HISTORYTYPEID ,HISTORYDESC ,OBJECTID ,OBJECTTYPEID ,HISTORYDATESTAMP ,USER_ID)
    	VALUES
	   (
        1
       , '{"id": '+CAST(@HISTORYDESC_ID AS VARCHAR)+', "fromObjectTypeId": '+CAST(@HISTORYDESC_TO_OBJECT_TYPE_ID AS VARCHAR)+', "toObjectTypeId": "'+CAST(@HISTORYDESC_FROM_OBJECT_TYPE_ID AS VARCHAR)+'", "fromObjectTypeTitle": "'+CAST(@HISTORYDESC_TO_OBJECT_TYPE_ID AS VARCHAR)+'","toObjectTypeTitle": "'+CAST(@HISTORYDESC_FROM_OBJECT_TYPE_ID AS VARCHAR)+'","definedBy": "S"}'
	   , @HISTORYDESC_ID
	   , @RELATIONSHIP_MASTER_ID
	   , CURRENT_TIMESTAMP
       ,'Administrator'
	   );
-- SET 5
    SET @HISTORYDESC_FROM_OBJECT_TYPE_ID = (SELECT OBJECT_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE='BGM_TERM');
    SET @HISTORYDESC_TO_OBJECT_TYPE_ID = (SELECT OBJECT_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE='SM_ENVIRONMENT');
    INSERT INTO RELATIONSHIP_MASTER (FROM_OBJECT_TYPE_ID,TO_OBJECT_TYPE_ID,DEFINED_BY,DESCRIPTION) SELECT @HISTORYDESC_FROM_OBJECT_TYPE_ID AS FROM_OBJECT_TYPE_ID, @HISTORYDESC_TO_OBJECT_TYPE_ID AS TO_OBJECT_TYPE_ID,'U',''
    SET @HISTORYDESC_ID = SCOPE_IDENTITY();
    INSERT INTO RM_HISTORY
           (HISTORYTYPEID ,HISTORYDESC ,OBJECTID ,OBJECTTYPEID ,HISTORYDATESTAMP ,USER_ID)
    	VALUES
	   (
        1
       , '{"id": '+CAST(@HISTORYDESC_ID AS VARCHAR)+', "fromObjectTypeId": '+CAST(@HISTORYDESC_FROM_OBJECT_TYPE_ID AS VARCHAR)+', "toObjectTypeId": "'+CAST(@HISTORYDESC_TO_OBJECT_TYPE_ID AS VARCHAR)+'", "fromObjectTypeTitle": "'+CAST(@HISTORYDESC_FROM_OBJECT_TYPE_ID AS VARCHAR)+'","toObjectTypeTitle": "'+CAST(@HISTORYDESC_TO_OBJECT_TYPE_ID AS VARCHAR)+'"}'
	   , @HISTORYDESC_ID
	   , @RELATIONSHIP_MASTER_ID
	   , CURRENT_TIMESTAMP
       ,'Administrator'
	   );

    INSERT INTO RELATIONSHIP_MASTER (FROM_OBJECT_TYPE_ID, TO_OBJECT_TYPE_ID,DEFINED_BY,DESCRIPTION) SELECT @HISTORYDESC_TO_OBJECT_TYPE_ID AS FROM_OBJECT_TYPE_ID,@HISTORYDESC_FROM_OBJECT_TYPE_ID AS TO_OBJECT_TYPE_ID,'S',''
    SET @HISTORYDESC_ID = SCOPE_IDENTITY();
    INSERT INTO RM_HISTORY
           (HISTORYTYPEID ,HISTORYDESC ,OBJECTID ,OBJECTTYPEID ,HISTORYDATESTAMP ,USER_ID)
    	VALUES
	   (
        1
       , '{"id": '+CAST(@HISTORYDESC_ID AS VARCHAR)+', "fromObjectTypeId": '+CAST(@HISTORYDESC_TO_OBJECT_TYPE_ID AS VARCHAR)+', "toObjectTypeId": "'+CAST(@HISTORYDESC_FROM_OBJECT_TYPE_ID AS VARCHAR)+'", "fromObjectTypeTitle": "","toObjectTypeTitle": "","definedBy": "S"}'
	   , @HISTORYDESC_ID
	   , @RELATIONSHIP_MASTER_ID
	   , CURRENT_TIMESTAMP
       ,'Administrator'
	   );
-- SET 6
    SET @HISTORYDESC_FROM_OBJECT_TYPE_ID = (SELECT OBJECT_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE='BGM_POLICY');
    SET @HISTORYDESC_TO_OBJECT_TYPE_ID = (SELECT OBJECT_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE='SM_COLUMN');
    INSERT INTO RELATIONSHIP_MASTER (FROM_OBJECT_TYPE_ID,TO_OBJECT_TYPE_ID,DEFINED_BY,DESCRIPTION) SELECT @HISTORYDESC_FROM_OBJECT_TYPE_ID AS FROM_OBJECT_TYPE_ID, @HISTORYDESC_TO_OBJECT_TYPE_ID AS TO_OBJECT_TYPE_ID,'U',''
    SET @HISTORYDESC_ID = SCOPE_IDENTITY();
    INSERT INTO RM_HISTORY
           (HISTORYTYPEID ,HISTORYDESC ,OBJECTID ,OBJECTTYPEID ,HISTORYDATESTAMP ,USER_ID)
    	VALUES
	   (
        1
       , '{"id": '+CAST(@HISTORYDESC_ID AS VARCHAR)+', "fromObjectTypeId": '+CAST(@HISTORYDESC_FROM_OBJECT_TYPE_ID AS VARCHAR)+', "toObjectTypeId": "'+CAST(@HISTORYDESC_TO_OBJECT_TYPE_ID AS VARCHAR)+'", "fromObjectTypeTitle": "'+CAST(@HISTORYDESC_FROM_OBJECT_TYPE_ID AS VARCHAR)+'","toObjectTypeTitle": "'+CAST(@HISTORYDESC_TO_OBJECT_TYPE_ID AS VARCHAR)+'"}'
	   , @HISTORYDESC_ID
	   , @RELATIONSHIP_MASTER_ID
	   , CURRENT_TIMESTAMP
       ,'Administrator'
	   );

    INSERT INTO RELATIONSHIP_MASTER (FROM_OBJECT_TYPE_ID, TO_OBJECT_TYPE_ID,DEFINED_BY,DESCRIPTION) SELECT @HISTORYDESC_TO_OBJECT_TYPE_ID AS FROM_OBJECT_TYPE_ID,@HISTORYDESC_FROM_OBJECT_TYPE_ID AS TO_OBJECT_TYPE_ID,'S',''
    SET @HISTORYDESC_ID = SCOPE_IDENTITY();
    INSERT INTO RM_HISTORY
           (HISTORYTYPEID ,HISTORYDESC ,OBJECTID ,OBJECTTYPEID ,HISTORYDATESTAMP ,USER_ID)
    	VALUES
	   (
        1
       , '{"id": '+CAST(@HISTORYDESC_ID AS VARCHAR)+', "fromObjectTypeId": '+CAST(@HISTORYDESC_TO_OBJECT_TYPE_ID AS VARCHAR)+', "toObjectTypeId": "'+CAST(@HISTORYDESC_FROM_OBJECT_TYPE_ID AS VARCHAR)+'", "fromObjectTypeTitle": "","toObjectTypeTitle": "","definedBy": "S"}'
	   , @HISTORYDESC_ID
	   , @RELATIONSHIP_MASTER_ID
	   , CURRENT_TIMESTAMP
       ,'Administrator'
	   );
-- SET 7
    SET @HISTORYDESC_FROM_OBJECT_TYPE_ID = (SELECT OBJECT_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE='BGM_POLICY');
    SET @HISTORYDESC_TO_OBJECT_TYPE_ID = (SELECT OBJECT_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE='BGM_RULE');
    INSERT INTO RELATIONSHIP_MASTER (FROM_OBJECT_TYPE_ID,TO_OBJECT_TYPE_ID,DEFINED_BY,DESCRIPTION) SELECT @HISTORYDESC_FROM_OBJECT_TYPE_ID AS FROM_OBJECT_TYPE_ID, @HISTORYDESC_TO_OBJECT_TYPE_ID AS TO_OBJECT_TYPE_ID,'U',''
    SET @HISTORYDESC_ID = SCOPE_IDENTITY();
    INSERT INTO RM_HISTORY
           (HISTORYTYPEID ,HISTORYDESC ,OBJECTID ,OBJECTTYPEID ,HISTORYDATESTAMP ,USER_ID)
    	VALUES
	   (
        1
       , '{"id": '+CAST(@HISTORYDESC_ID AS VARCHAR)+', "fromObjectTypeId": '+CAST(@HISTORYDESC_FROM_OBJECT_TYPE_ID AS VARCHAR)+', "toObjectTypeId": "'+CAST(@HISTORYDESC_TO_OBJECT_TYPE_ID AS VARCHAR)+'", "fromObjectTypeTitle": "'+CAST(@HISTORYDESC_FROM_OBJECT_TYPE_ID AS VARCHAR)+'","toObjectTypeTitle": "'+CAST(@HISTORYDESC_TO_OBJECT_TYPE_ID AS VARCHAR)+'"}'
	   , @HISTORYDESC_ID
	   , @RELATIONSHIP_MASTER_ID
	   , CURRENT_TIMESTAMP
       ,'Administrator'
	   );

    INSERT INTO RELATIONSHIP_MASTER (FROM_OBJECT_TYPE_ID, TO_OBJECT_TYPE_ID,DEFINED_BY,DESCRIPTION) SELECT @HISTORYDESC_TO_OBJECT_TYPE_ID AS FROM_OBJECT_TYPE_ID,@HISTORYDESC_FROM_OBJECT_TYPE_ID AS TO_OBJECT_TYPE_ID,'S',''
    SET @HISTORYDESC_ID = SCOPE_IDENTITY();
    INSERT INTO RM_HISTORY
           (HISTORYTYPEID ,HISTORYDESC ,OBJECTID ,OBJECTTYPEID ,HISTORYDATESTAMP ,USER_ID)
    	VALUES
	   (
        1
       , '{"id": '+CAST(@HISTORYDESC_ID AS VARCHAR)+', "fromObjectTypeId": '+CAST(@HISTORYDESC_TO_OBJECT_TYPE_ID AS VARCHAR)+', "toObjectTypeId": "'+CAST(@HISTORYDESC_FROM_OBJECT_TYPE_ID AS VARCHAR)+'", "fromObjectTypeTitle": "'+CAST(@HISTORYDESC_TO_OBJECT_TYPE_ID AS VARCHAR)+'","toObjectTypeTitle": "'+CAST(@HISTORYDESC_FROM_OBJECT_TYPE_ID AS VARCHAR)+'","definedBy": "S"}'
	   , @HISTORYDESC_ID
	   , @RELATIONSHIP_MASTER_ID
	   , CURRENT_TIMESTAMP
       ,'Administrator'
	   );
-- SET 8
SET @HISTORYDESC_FROM_OBJECT_TYPE_ID = (SELECT OBJECT_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE='BGM_TERM');
    SET @HISTORYDESC_TO_OBJECT_TYPE_ID = (SELECT OBJECT_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE='SM_SYSTEM');
    INSERT INTO RELATIONSHIP_MASTER (FROM_OBJECT_TYPE_ID,TO_OBJECT_TYPE_ID,DEFINED_BY,DESCRIPTION) SELECT @HISTORYDESC_FROM_OBJECT_TYPE_ID AS FROM_OBJECT_TYPE_ID, @HISTORYDESC_TO_OBJECT_TYPE_ID AS TO_OBJECT_TYPE_ID,'U',''
    SET @HISTORYDESC_ID = SCOPE_IDENTITY();
    INSERT INTO RM_HISTORY
           (HISTORYTYPEID ,HISTORYDESC ,OBJECTID ,OBJECTTYPEID ,HISTORYDATESTAMP ,USER_ID)
    	VALUES
	   (
        1
       , '{"id": '+CAST(@HISTORYDESC_ID AS VARCHAR)+', "fromObjectTypeId": '+CAST(@HISTORYDESC_FROM_OBJECT_TYPE_ID AS VARCHAR)+', "toObjectTypeId": "'+CAST(@HISTORYDESC_TO_OBJECT_TYPE_ID AS VARCHAR)+'", "fromObjectTypeTitle": "'+CAST(@HISTORYDESC_FROM_OBJECT_TYPE_ID AS VARCHAR)+'","toObjectTypeTitle": "'+CAST(@HISTORYDESC_TO_OBJECT_TYPE_ID AS VARCHAR)+'"}'
	   , @HISTORYDESC_ID
	   , @RELATIONSHIP_MASTER_ID
	   , CURRENT_TIMESTAMP
       ,'Administrator'
	   );

    INSERT INTO RELATIONSHIP_MASTER (FROM_OBJECT_TYPE_ID, TO_OBJECT_TYPE_ID,DEFINED_BY,DESCRIPTION) SELECT @HISTORYDESC_TO_OBJECT_TYPE_ID AS FROM_OBJECT_TYPE_ID,@HISTORYDESC_FROM_OBJECT_TYPE_ID AS TO_OBJECT_TYPE_ID,'S',''
    SET @HISTORYDESC_ID = SCOPE_IDENTITY();
    INSERT INTO RM_HISTORY
           (HISTORYTYPEID ,HISTORYDESC ,OBJECTID ,OBJECTTYPEID ,HISTORYDATESTAMP ,USER_ID)
    	VALUES
	   (
        1
       , '{"id": '+CAST(@HISTORYDESC_ID AS VARCHAR)+', "fromObjectTypeId": '+CAST(@HISTORYDESC_TO_OBJECT_TYPE_ID AS VARCHAR)+', "toObjectTypeId": "'+CAST(@HISTORYDESC_FROM_OBJECT_TYPE_ID AS VARCHAR)+'", "fromObjectTypeTitle": "'+CAST(@HISTORYDESC_TO_OBJECT_TYPE_ID AS VARCHAR)+'","toObjectTypeTitle": "'+CAST(@HISTORYDESC_FROM_OBJECT_TYPE_ID AS VARCHAR)+'","definedBy": "S"}'
	   , @HISTORYDESC_ID
	   , @RELATIONSHIP_MASTER_ID
	   , CURRENT_TIMESTAMP
       ,'Administrator'
	   );
    END
GO
IF NOT EXISTS (SELECT * FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE = 'RELATIONSHIP_DETAILS')
    BEGIN
	INSERT INTO ADS_KEY_VALUE_OBJECTS (OBJECT_TYPE,OBJECT_TABLE,OBJECT_TABLE_COLUMN,OBJECT_PARENT_TYPE,OBJECT_PARENT_COLUMN_ID, MODULE_KEY,OBJECT_LEVEL,SYSTEM_BASED)
        SELECT 'RELATIONSHIP_DETAILS','RELATIONSHIP_DETAILS','RD_ID','RELATIONSHIP_MASTER','RM_ID','com.ads.mm.permission.generic.relationship', 1,1
    END
GO
IF NOT EXISTS (SELECT *
	       FROM   SYSOBJECTS
	       WHERE  ID = OBJECT_ID(N'RELATIONSHIP_DETAILS')
		      AND TYPE = 'U')
    BEGIN
    EXECUTE ('CREATE TABLE RELATIONSHIP_DETAILS
		(
		RD_ID BIGINT IDENTITY(1,1),
		RM_ID BIGINT NOT NULL,
		FORWARD_TITLE VARCHAR(250) NOT NULL,
		REVERSE_TITLE VARCHAR(250) NOT NULL,
		DESCRIPTION VARCHAR(4000) NULL,
		DEFINED_BY CHAR(1) NOT NULL,
        DISPLAY_COLOR VARCHAR(20) NULL DEFAULT ''#5C5D61'',
        DISPLAY_TYPE VARCHAR(100) NULL DEFAULT ''M0 0 L1 0'',
		CONSTRAINT UK_REL_DTLS_RMID_TTLS UNIQUE(RM_ID,FORWARD_TITLE,REVERSE_TITLE),
		CONSTRAINT FK_DIS_RM_ID FOREIGN KEY(RM_ID) REFERENCES RELATIONSHIP_MASTER(RM_ID)
		)');

    DECLARE @RELATIONSHIP_DETAILS_ID INT, @HISTORYDESC_ID INT, @HISTORYDESC_RM_ID INT;
    SET @RELATIONSHIP_DETAILS_ID = (SELECT OBJECT_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE='RELATIONSHIP_DETAILS');

-- SET 1
    SET @HISTORYDESC_RM_ID = (SELECT RM_ID FROM RELATIONSHIP_MASTER WHERE FROM_OBJECT_TYPE_ID IN (SELECT OBJECT_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE='BGM_TERM') AND TO_OBJECT_TYPE_ID IN (SELECT OBJECT_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE='BGM_TERM') AND DEFINED_BY = 'U');
    INSERT INTO RELATIONSHIP_DETAILS (RM_ID, FORWARD_TITLE, REVERSE_TITLE, DESCRIPTION, DEFINED_BY) SELECT @HISTORYDESC_RM_ID AS RM_ID,'Synonym','Synonym Of', '', 'U'
    SET @HISTORYDESC_ID = SCOPE_IDENTITY();
    INSERT INTO RM_HISTORY
           (HISTORYTYPEID ,HISTORYDESC ,OBJECTID ,OBJECTTYPEID ,HISTORYDATESTAMP ,USER_ID)
    	VALUES
	   (
        2
       , '{"id": '+CAST(@HISTORYDESC_ID AS VARCHAR)+', "rmId": '+CAST(@HISTORYDESC_RM_ID AS VARCHAR)+', "forwardTitle": "Synonym", "reverseTitle": "Synonym Of"}'
	   , @HISTORYDESC_ID
	   , @RELATIONSHIP_DETAILS_ID
	   , CURRENT_TIMESTAMP
       ,'Administrator'
	   );

    INSERT INTO RELATIONSHIP_DETAILS (RM_ID, FORWARD_TITLE, REVERSE_TITLE, DESCRIPTION, DEFINED_BY) SELECT @HISTORYDESC_RM_ID AS RM_ID,'is Part Of','Contained in', '', 'U'
    INSERT INTO RM_HISTORY
           (HISTORYTYPEID ,HISTORYDESC ,OBJECTID ,OBJECTTYPEID ,HISTORYDATESTAMP ,USER_ID)
    	VALUES
	   (
        2
       , '{"id": '+CAST(@HISTORYDESC_ID AS VARCHAR)+', "rmId": '+CAST(@HISTORYDESC_RM_ID AS VARCHAR)+', "forwardTitle": "is Part Of", "reverseTitle": "Contained in"}'
	   , @HISTORYDESC_ID
	   , @RELATIONSHIP_DETAILS_ID
	   , CURRENT_TIMESTAMP
       ,'Administrator'
	   );

-- SET 2
    SET @HISTORYDESC_RM_ID = (SELECT RM_ID FROM RELATIONSHIP_MASTER WHERE FROM_OBJECT_TYPE_ID IN (SELECT OBJECT_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE='BGM_TERM') AND TO_OBJECT_TYPE_ID IN (SELECT OBJECT_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE='BGM_POLICY') AND DEFINED_BY = 'U');
    INSERT INTO RELATIONSHIP_DETAILS (RM_ID, FORWARD_TITLE, REVERSE_TITLE, DESCRIPTION, DEFINED_BY) SELECT @HISTORYDESC_RM_ID AS RM_ID,'is Governed By','Governs', '', 'U'
    SET @HISTORYDESC_ID = SCOPE_IDENTITY();
    INSERT INTO RM_HISTORY
           (HISTORYTYPEID ,HISTORYDESC ,OBJECTID ,OBJECTTYPEID ,HISTORYDATESTAMP ,USER_ID)
    	VALUES
	   (
        2
       , '{"id": '+CAST(@HISTORYDESC_ID AS VARCHAR)+', "rmId": '+CAST(@HISTORYDESC_RM_ID AS VARCHAR)+', "forwardTitle": "is Governed By", "reverseTitle": "Governs"}'
	   , @HISTORYDESC_ID
	   , @RELATIONSHIP_DETAILS_ID
	   , CURRENT_TIMESTAMP
       ,'Administrator'
	   );
-- SET 3
    SET @HISTORYDESC_RM_ID = (SELECT RM_ID FROM RELATIONSHIP_MASTER WHERE FROM_OBJECT_TYPE_ID IN (SELECT OBJECT_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE='BGM_TERM') AND TO_OBJECT_TYPE_ID IN (SELECT OBJECT_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE='SM_COLUMN') AND DEFINED_BY = 'U');
    INSERT INTO RELATIONSHIP_DETAILS (RM_ID, FORWARD_TITLE, REVERSE_TITLE, DESCRIPTION, DEFINED_BY) SELECT @HISTORYDESC_RM_ID AS RM_ID,'Represents','is Represented By', '', 'U'
    SET @HISTORYDESC_ID = SCOPE_IDENTITY();
    INSERT INTO RM_HISTORY
           (HISTORYTYPEID ,HISTORYDESC ,OBJECTID ,OBJECTTYPEID ,HISTORYDATESTAMP ,USER_ID)
    	VALUES
	   (
        2
       , '{"id": '+CAST(@HISTORYDESC_ID AS VARCHAR)+', "rmId": '+CAST(@HISTORYDESC_RM_ID AS VARCHAR)+', "forwardTitle": "Represents", "reverseTitle": "is Represented By"}'
	   , @HISTORYDESC_ID
	   , @RELATIONSHIP_DETAILS_ID
	   , CURRENT_TIMESTAMP
       ,'Administrator'
	   );
-- SET 4
    SET @HISTORYDESC_RM_ID = (SELECT RM_ID FROM RELATIONSHIP_MASTER WHERE FROM_OBJECT_TYPE_ID IN (SELECT OBJECT_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE='BGM_TERM') AND TO_OBJECT_TYPE_ID IN (SELECT OBJECT_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE='SM_TABLE') AND DEFINED_BY = 'U');
    INSERT INTO RELATIONSHIP_DETAILS (RM_ID, FORWARD_TITLE, REVERSE_TITLE, DESCRIPTION, DEFINED_BY) SELECT @HISTORYDESC_RM_ID AS RM_ID,'Represents','is Represented By', '', 'U'
    SET @HISTORYDESC_ID = SCOPE_IDENTITY();
    INSERT INTO RM_HISTORY
           (HISTORYTYPEID ,HISTORYDESC ,OBJECTID ,OBJECTTYPEID ,HISTORYDATESTAMP ,USER_ID)
    	VALUES
	   (
        2
       , '{"id": '+CAST(@HISTORYDESC_ID AS VARCHAR)+', "rmId": '+CAST(@HISTORYDESC_RM_ID AS VARCHAR)+', "forwardTitle": "Represents", "reverseTitle": "is Represented By"}'
	   , @HISTORYDESC_ID
	   , @RELATIONSHIP_DETAILS_ID
	   , CURRENT_TIMESTAMP
       ,'Administrator'
	   );
-- SET 5
    SET @HISTORYDESC_RM_ID = (SELECT RM_ID FROM RELATIONSHIP_MASTER WHERE FROM_OBJECT_TYPE_ID IN (SELECT OBJECT_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE='BGM_TERM') AND TO_OBJECT_TYPE_ID IN (SELECT OBJECT_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE='SM_ENVIRONMENT') AND DEFINED_BY = 'U');
    INSERT INTO RELATIONSHIP_DETAILS (RM_ID, FORWARD_TITLE, REVERSE_TITLE, DESCRIPTION, DEFINED_BY) SELECT @HISTORYDESC_RM_ID AS RM_ID,'Golden Source','Golden Source for', '', 'U'
    SET @HISTORYDESC_ID = SCOPE_IDENTITY();
    INSERT INTO RM_HISTORY
           (HISTORYTYPEID ,HISTORYDESC ,OBJECTID ,OBJECTTYPEID ,HISTORYDATESTAMP ,USER_ID)
    	VALUES
	   (
        2
       , '{"id": '+CAST(@HISTORYDESC_ID AS VARCHAR)+', "rmId": '+CAST(@HISTORYDESC_RM_ID AS VARCHAR)+', "forwardTitle": "Golden Source", "reverseTitle": "Golden Source for"}'
	   , @HISTORYDESC_ID
	   , @RELATIONSHIP_DETAILS_ID
	   , CURRENT_TIMESTAMP
       ,'Administrator'
	   );
--SET 6
    SET @HISTORYDESC_RM_ID = (SELECT RM_ID FROM RELATIONSHIP_MASTER WHERE FROM_OBJECT_TYPE_ID IN (SELECT OBJECT_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE='BGM_POLICY') AND TO_OBJECT_TYPE_ID IN (SELECT OBJECT_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE='SM_COLUMN') AND DEFINED_BY = 'U');
    INSERT INTO RELATIONSHIP_DETAILS (RM_ID, FORWARD_TITLE, REVERSE_TITLE, DESCRIPTION, DEFINED_BY) SELECT @HISTORYDESC_RM_ID AS RM_ID,'Represents','is Represented By', '', 'U'
    SET @HISTORYDESC_ID = SCOPE_IDENTITY();
    INSERT INTO RM_HISTORY
           (HISTORYTYPEID ,HISTORYDESC ,OBJECTID ,OBJECTTYPEID ,HISTORYDATESTAMP ,USER_ID)
    	VALUES
	   (
        2
       , '{"id": '+CAST(@HISTORYDESC_ID AS VARCHAR)+', "rmId": '+CAST(@HISTORYDESC_RM_ID AS VARCHAR)+', "forwardTitle": "Represents", "reverseTitle": "is Represented By"}'
	   , @HISTORYDESC_ID
	   , @RELATIONSHIP_DETAILS_ID
	   , CURRENT_TIMESTAMP
       ,'Administrator'
	   );
-- SET 7
    SET @HISTORYDESC_RM_ID = (SELECT RM_ID FROM RELATIONSHIP_MASTER WHERE FROM_OBJECT_TYPE_ID IN (SELECT OBJECT_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE='BGM_POLICY') AND TO_OBJECT_TYPE_ID IN (SELECT OBJECT_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE='BGM_RULE') AND DEFINED_BY = 'U');
    INSERT INTO RELATIONSHIP_DETAILS (RM_ID, FORWARD_TITLE, REVERSE_TITLE, DESCRIPTION, DEFINED_BY) SELECT @HISTORYDESC_RM_ID AS RM_ID,'is Implemented By','Implements', '', 'U'
    SET @HISTORYDESC_ID = SCOPE_IDENTITY();
    INSERT INTO RM_HISTORY
           (HISTORYTYPEID ,HISTORYDESC ,OBJECTID ,OBJECTTYPEID ,HISTORYDATESTAMP ,USER_ID)
    	VALUES
	   (
        2
       , '{"id": '+CAST(@HISTORYDESC_ID AS VARCHAR)+', "rmId": '+CAST(@HISTORYDESC_RM_ID AS VARCHAR)+', "forwardTitle": "is Implemented By", "reverseTitle": "Implements"}'
	   , @HISTORYDESC_ID
	   , @RELATIONSHIP_DETAILS_ID
	   , CURRENT_TIMESTAMP
       ,'Administrator'
	   );
-- SET 8
    SET @HISTORYDESC_RM_ID = (SELECT RM_ID FROM RELATIONSHIP_MASTER WHERE FROM_OBJECT_TYPE_ID IN (SELECT OBJECT_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE='BGM_TERM') AND TO_OBJECT_TYPE_ID IN (SELECT OBJECT_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE='SM_SYSTEM') AND DEFINED_BY = 'U');
    INSERT INTO RELATIONSHIP_DETAILS (RM_ID, FORWARD_TITLE, REVERSE_TITLE, DESCRIPTION, DEFINED_BY) SELECT @HISTORYDESC_RM_ID AS RM_ID,'Golden Source','Golden Source for', '', 'U'
    SET @HISTORYDESC_ID = SCOPE_IDENTITY();
    INSERT INTO RM_HISTORY
           (HISTORYTYPEID ,HISTORYDESC ,OBJECTID ,OBJECTTYPEID ,HISTORYDATESTAMP ,USER_ID)
    	VALUES
	   (
        2
       , '{"id": '+CAST(@HISTORYDESC_ID AS VARCHAR)+', "rmId": '+CAST(@HISTORYDESC_RM_ID AS VARCHAR)+', "forwardTitle": "Golden Source", "reverseTitle": "Golden Source for"}'
	   , @HISTORYDESC_ID
	   , @RELATIONSHIP_DETAILS_ID
	   , CURRENT_TIMESTAMP
       ,'Administrator'
	   );
    END
GO
DECLARE @OBJECT_TYPE_ID INT, @OBJECT_ID INT ,@KV_ID INT,@KV_TYPE_ID INT;
SELECT @OBJECT_TYPE_ID =  OBJECT_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE='SM_DATABASE_OPTIONS';
SELECT @OBJECT_ID =  MTD_ID FROM MT_DEFINITION WHERE  MTD_NAME = 'SM_DATABASE_OPTIONS' AND ADS_MODULE = 'SM';
    IF EXISTS( SELECT @OBJECT_TYPE_ID) AND EXISTS( SELECT @OBJECT_ID) AND NOT EXISTS( SELECT * FROM ADS_KEY_VALUE WHERE OBJECT_TYPE_ID  = @OBJECT_TYPE_ID AND OBJECT_ID = @OBJECT_ID AND KEY_NAME = 'OracleEnableSSLConnection')
        BEGIN
            INSERT INTO ADS_KEY_VALUE(KEY_NAME,KEY_VALUE,OBJECT_TYPE_ID,OBJECT_ID,DATATYPE_ID,KV_TYPE,LABEL_WIDTH,CONTROL_WIDTH,KV_ORDER,COMPONENT,DEFAULTVALUE,ISSYSTEMBASED) VALUES('OracleEnableSSLConnection','Oracle Enable SSL Connection',@OBJECT_TYPE_ID,@OBJECT_ID,'1','Combo Box','','','7','','false',0);
            SELECT @KV_ID = KV_ID FROM ADS_KEY_VALUE WHERE OBJECT_TYPE_ID  = @OBJECT_TYPE_ID AND OBJECT_ID = @OBJECT_ID AND KEY_NAME = 'OracleEnableSSLConnection' AND KV_TYPE= 'Combo Box';
            SELECT @KV_TYPE_ID = OBJECT_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE='ADS_KEY_VALUE';
            INSERT INTO ADS_KEY_VALUE(KEY_NAME,KEY_VALUE,OBJECT_TYPE_ID,OBJECT_ID,DATATYPE_ID,KV_TYPE,LABEL_WIDTH,CONTROL_WIDTH,KV_ORDER,COMPONENT,DEFAULTVALUE)      VALUES('true','true',@KV_TYPE_ID,@KV_ID,'1','combovalues','','','0','','');
            INSERT INTO ADS_KEY_VALUE(KEY_NAME,KEY_VALUE,OBJECT_TYPE_ID,OBJECT_ID,DATATYPE_ID,KV_TYPE,LABEL_WIDTH,CONTROL_WIDTH,KV_ORDER,COMPONENT,DEFAULTVALUE)      VALUES('false','false',@KV_TYPE_ID,@KV_ID,'1','combovalues','','','1','','');
        END
GO
DECLARE @OBJECT_TYPE_ID INT, @OBJECT_ID INT ;
SELECT @OBJECT_TYPE_ID =  OBJECT_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE='SM_DATABASE_OPTIONS';
SELECT @OBJECT_ID =  MTD_ID FROM MT_DEFINITION WHERE  MTD_NAME = 'SM_DATABASE_OPTIONS' AND ADS_MODULE = 'SM';
    IF EXISTS( SELECT @OBJECT_TYPE_ID) AND EXISTS( SELECT @OBJECT_ID) AND NOT EXISTS( SELECT * FROM ADS_KEY_VALUE WHERE OBJECT_TYPE_ID  = @OBJECT_TYPE_ID AND OBJECT_ID = @OBJECT_ID AND KEY_NAME = 'oracleWalletLocation')
        BEGIN
            INSERT INTO ADS_KEY_VALUE(KEY_NAME,KEY_VALUE,OBJECT_TYPE_ID,OBJECT_ID,DATATYPE_ID,KV_TYPE,LABEL_WIDTH,CONTROL_WIDTH,KV_ORDER,COMPONENT,DEFAULTVALUE,ISSYSTEMBASED) VALUES('oracleWalletLocation','Oracle Wallet Location',@OBJECT_TYPE_ID,@OBJECT_ID,'1','Text Box','','','8','','false',0)
        END
GO
DECLARE @OBJECT_TYPE_ID INT, @OBJECT_ID INT ;
SELECT @OBJECT_TYPE_ID =  OBJECT_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE='SM_DATABASE_OPTIONS';
SELECT @OBJECT_ID =  MTD_ID FROM MT_DEFINITION WHERE  MTD_NAME = 'SM_DATABASE_OPTIONS' AND ADS_MODULE = 'SM';
    IF EXISTS( SELECT @OBJECT_TYPE_ID) AND EXISTS( SELECT @OBJECT_ID) AND NOT EXISTS( SELECT * FROM ADS_KEY_VALUE WHERE OBJECT_TYPE_ID  = @OBJECT_TYPE_ID AND OBJECT_ID = @OBJECT_ID AND KEY_NAME = 'OraclePKIProviderPosition')
        BEGIN
            INSERT INTO ADS_KEY_VALUE(KEY_NAME,KEY_VALUE,OBJECT_TYPE_ID,OBJECT_ID,DATATYPE_ID,KV_TYPE,LABEL_WIDTH,CONTROL_WIDTH,KV_ORDER,COMPONENT,DEFAULTVALUE,ISSYSTEMBASED) VALUES('OraclePKIProviderPosition','Oracle PKI Provider Position',@OBJECT_TYPE_ID,@OBJECT_ID,'1','Number','','','9','','3',0)
        END
GO
DECLARE @OBJECT_TYPE_ID INT, @OBJECT_ID INT ,@KV_ID INT,@KV_TYPE_ID INT;
SELECT @OBJECT_TYPE_ID =  OBJECT_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE='SM_DATABASE_OPTIONS';
SELECT @OBJECT_ID =  MTD_ID FROM MT_DEFINITION WHERE  MTD_NAME = 'SM_DATABASE_OPTIONS' AND ADS_MODULE = 'SM';
    IF EXISTS( SELECT @OBJECT_TYPE_ID) AND EXISTS( SELECT @OBJECT_ID) AND NOT EXISTS( SELECT * FROM ADS_KEY_VALUE WHERE OBJECT_TYPE_ID  = @OBJECT_TYPE_ID AND OBJECT_ID = @OBJECT_ID AND KEY_NAME = 'OracleSSLServerDNMatch')
        BEGIN
            INSERT INTO ADS_KEY_VALUE(KEY_NAME,KEY_VALUE,OBJECT_TYPE_ID,OBJECT_ID,DATATYPE_ID,KV_TYPE,LABEL_WIDTH,CONTROL_WIDTH,KV_ORDER,COMPONENT,DEFAULTVALUE,ISSYSTEMBASED) VALUES('OracleSSLServerDNMatch',' Oracle SSL Server DN Match',@OBJECT_TYPE_ID,@OBJECT_ID,'1','Combo Box','','','10','','false',0)
            SELECT @KV_ID = KV_ID FROM ADS_KEY_VALUE WHERE OBJECT_TYPE_ID  = @OBJECT_TYPE_ID AND OBJECT_ID = @OBJECT_ID AND KEY_NAME = 'OracleSSLServerDNMatch' AND KV_TYPE= 'Combo Box';
            SELECT @KV_TYPE_ID = OBJECT_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE='ADS_KEY_VALUE';
            INSERT INTO ADS_KEY_VALUE(KEY_NAME,KEY_VALUE,OBJECT_TYPE_ID,OBJECT_ID,DATATYPE_ID,KV_TYPE,LABEL_WIDTH,CONTROL_WIDTH,KV_ORDER,COMPONENT,DEFAULTVALUE)      VALUES('true','true',@KV_TYPE_ID,@KV_ID,'1','combovalues','','','0','','');
            INSERT INTO ADS_KEY_VALUE(KEY_NAME,KEY_VALUE,OBJECT_TYPE_ID,OBJECT_ID,DATATYPE_ID,KV_TYPE,LABEL_WIDTH,CONTROL_WIDTH,KV_ORDER,COMPONENT,DEFAULTVALUE)      VALUES('false','false',@KV_TYPE_ID,@KV_ID,'1','combovalues','','','1','','');
        END
GO
IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'BG_CUSTOM_TYPES' AND COLUMN_NAME = 'ENTITY_COLOR' )
    BEGIN
        EXECUTE ('ALTER TABLE BG_CUSTOM_TYPES ADD ENTITY_COLOR VARCHAR(20) NULL DEFAULT ''#F6C65B''');
        EXECUTE ('UPDATE BG_CUSTOM_TYPES SET ENTITY_COLOR = ''#F6C65B''');
        EXECUTE ('UPDATE BG_CUSTOM_TYPES SET ENTITY_COLOR = ''#1C5FAB''  WHERE NAME = ''Business Terms''' );
        EXECUTE ('UPDATE BG_CUSTOM_TYPES SET ENTITY_COLOR = ''#E9636E''  WHERE NAME = ''Business Policies''');
        EXECUTE ('UPDATE BG_CUSTOM_TYPES SET ENTITY_COLOR = ''#00A9A2''  WHERE NAME = ''Business Rules''');
    END;
GO
-- IF NOT EXISTS (SELECT * FROM APP_PREFERENCES WHERE  PREFERENCE_NAME = 'SYSTEM_OBJECT_COLOR')
-- BEGIN
--     EXECUTE ('INSERT INTO APP_PREFERENCES(PREFERENCE_NAME,PREFERENCE_VALUE) VALUES (''SYSTEM_OBJECT_COLOR'',''#26276D'')');
--     EXECUTE ('INSERT INTO APP_PREFERENCES(PREFERENCE_NAME,PREFERENCE_VALUE) VALUES (''ENVIRONMENT_OBJECT_COLOR'',''#F6C65B'')');
--     EXECUTE ('INSERT INTO APP_PREFERENCES(PREFERENCE_NAME,PREFERENCE_VALUE) VALUES (''TABLE_OBJECT_COLOR'',''#F79548'')');
--     EXECUTE ('INSERT INTO APP_PREFERENCES(PREFERENCE_NAME,PREFERENCE_VALUE) VALUES (''COLUMN_OBJECT_COLOR'',''#92d050'')');
-- END
-- GO
IF COL_LENGTH('ADS_ASSOCIATIONS', 'RELATIONSHIP_DETAIL_ID') IS NULL
BEGIN
    ALTER TABLE ADS_ASSOCIATIONS ADD RELATIONSHIP_DETAIL_ID bigint NOT NULL DEFAULT -1;
END
GO
IF COL_LENGTH('ADS_ASSOCIATIONS', 'RELATIONSHIP') IS NOT NULL

      BEGIN
        --OBJECT TYPE_IDS INITIALIZATION--
            DECLARE  @BG_TERM_OBJECT_TYPE_ID int = (SELECT OBJECT_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE='BGM_TERM');
            DECLARE  @BGM_POLICY_OBJECT_TYPE_ID int = (SELECT OBJECT_TYPE_ID  FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE ='BGM_POLICY');
            DECLARE  @BGM_RULE_OBJECT_TYPE_ID int= (SELECT OBJECT_TYPE_ID  FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE='BGM_RULE');
            DECLARE  @SM_ENV_OBJECT_TYPE_ID int= (SELECT OBJECT_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE='SM_ENVIRONMENT');
            DECLARE  @SM_TABLE_OBJECT_TYPE_ID int =(SELECT OBJECT_TYPE_ID  FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE='SM_TABLE');
            DECLARE  @SM_COLUMN_OBJECT_TYPE_ID int = ( SELECT OBJECT_TYPE_ID  FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE='SM_COLUMN');
            DECLARE  @SM_SYSTEM_OBJECT_TYPE_ID int =(SELECT OBJECT_TYPE_ID  FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE='SM_SYSTEM');

        DECLARE @RelationshipDetailId BIGINT;
--SET 1
        SELECT @RelationshipDetailId=RD_ID FROM RELATIONSHIP_DETAILS RD JOIN RELATIONSHIP_MASTER RM ON RD.RM_ID = RM.RM_ID WHERE RM.DEFINED_BY = 'U' AND RM.FROM_OBJECT_TYPE_ID =  @BG_TERM_OBJECT_TYPE_ID AND RM.TO_OBJECT_TYPE_ID = @BG_TERM_OBJECT_TYPE_ID AND RD.FORWARD_TITLE = 'Synonym' AND RD.REVERSE_TITLE = 'Synonym Of';
        IF @RelationshipDetailId IS NOT NULL
        BEGIN
            UPDATE ADS_ASSOCIATIONS SET RELATIONSHIP_DETAIL_ID = @RelationshipDetailId WHERE SOURCE_OBJECT_TYPE_ID = @BG_TERM_OBJECT_TYPE_ID and TARGET_OBJECT_TYPE_ID = @BG_TERM_OBJECT_TYPE_ID;
        END
--SET 2
        SELECT @RelationshipDetailId=RD_ID FROM RELATIONSHIP_DETAILS RD JOIN RELATIONSHIP_MASTER RM ON RD.RM_ID = RM.RM_ID WHERE RM.DEFINED_BY = 'U' AND RM.FROM_OBJECT_TYPE_ID =  @BG_TERM_OBJECT_TYPE_ID AND RM.TO_OBJECT_TYPE_ID = @BGM_POLICY_OBJECT_TYPE_ID AND RD.FORWARD_TITLE = 'is Governed By' AND RD.REVERSE_TITLE = 'Governs';
        IF @RelationshipDetailId IS NOT NULL
        BEGIN
            UPDATE ADS_ASSOCIATIONS SET RELATIONSHIP_DETAIL_ID = @RelationshipDetailId WHERE (SOURCE_OBJECT_TYPE_ID = @BG_TERM_OBJECT_TYPE_ID AND TARGET_OBJECT_TYPE_ID = @BGM_POLICY_OBJECT_TYPE_ID)OR (TARGET_OBJECT_TYPE_ID = @BG_TERM_OBJECT_TYPE_ID AND SOURCE_OBJECT_TYPE_ID = @BGM_POLICY_OBJECT_TYPE_ID);
        END
--SET 3
        SELECT @RelationshipDetailId=RD_ID FROM RELATIONSHIP_DETAILS RD JOIN RELATIONSHIP_MASTER RM ON RD.RM_ID = RM.RM_ID WHERE RM.DEFINED_BY = 'U' AND RM.FROM_OBJECT_TYPE_ID =  @BG_TERM_OBJECT_TYPE_ID AND RM.TO_OBJECT_TYPE_ID = @SM_COLUMN_OBJECT_TYPE_ID AND RD.FORWARD_TITLE = 'Represents' AND RD.REVERSE_TITLE = 'is Represented By';
        IF @RelationshipDetailId IS NOT NULL
        BEGIN
            UPDATE ADS_ASSOCIATIONS SET RELATIONSHIP_DETAIL_ID = @RelationshipDetailId WHERE (SOURCE_OBJECT_TYPE_ID = @BG_TERM_OBJECT_TYPE_ID AND TARGET_OBJECT_TYPE_ID = @SM_COLUMN_OBJECT_TYPE_ID)OR (SOURCE_OBJECT_TYPE_ID = @SM_COLUMN_OBJECT_TYPE_ID AND TARGET_OBJECT_TYPE_ID = @BG_TERM_OBJECT_TYPE_ID);
        END
--SET 4
        SELECT @RelationshipDetailId=RD_ID FROM RELATIONSHIP_DETAILS RD JOIN RELATIONSHIP_MASTER RM ON RD.RM_ID = RM.RM_ID WHERE RM.DEFINED_BY = 'U' AND RM.FROM_OBJECT_TYPE_ID =  @BG_TERM_OBJECT_TYPE_ID AND RM.TO_OBJECT_TYPE_ID = @SM_TABLE_OBJECT_TYPE_ID AND RD.FORWARD_TITLE = 'Represents' AND RD.REVERSE_TITLE = 'is Represented By';
        IF @RelationshipDetailId IS NOT NULL
        BEGIN
            UPDATE ADS_ASSOCIATIONS SET RELATIONSHIP_DETAIL_ID = @RelationshipDetailId WHERE (SOURCE_OBJECT_TYPE_ID = @BG_TERM_OBJECT_TYPE_ID AND TARGET_OBJECT_TYPE_ID = @SM_TABLE_OBJECT_TYPE_ID)OR (SOURCE_OBJECT_TYPE_ID = @SM_TABLE_OBJECT_TYPE_ID AND TARGET_OBJECT_TYPE_ID = @BG_TERM_OBJECT_TYPE_ID);
        END
--SET 5
      SELECT @RelationshipDetailId=RD_ID FROM RELATIONSHIP_DETAILS RD JOIN RELATIONSHIP_MASTER RM ON RD.RM_ID = RM.RM_ID WHERE RM.DEFINED_BY = 'U' AND RM.FROM_OBJECT_TYPE_ID =  @BG_TERM_OBJECT_TYPE_ID AND RM.TO_OBJECT_TYPE_ID = @SM_ENV_OBJECT_TYPE_ID AND RD.FORWARD_TITLE = 'Golden Source' AND RD.REVERSE_TITLE = 'Golden Source for';
        IF @RelationshipDetailId IS NOT NULL
        BEGIN
            UPDATE ADS_ASSOCIATIONS SET RELATIONSHIP_DETAIL_ID = @RelationshipDetailId WHERE (SOURCE_OBJECT_TYPE_ID = @BG_TERM_OBJECT_TYPE_ID AND TARGET_OBJECT_TYPE_ID = @SM_ENV_OBJECT_TYPE_ID)OR (SOURCE_OBJECT_TYPE_ID = @SM_ENV_OBJECT_TYPE_ID AND TARGET_OBJECT_TYPE_ID = @BG_TERM_OBJECT_TYPE_ID);
        END
--SET 6
        SELECT @RelationshipDetailId=RD_ID FROM RELATIONSHIP_DETAILS RD JOIN RELATIONSHIP_MASTER RM ON RD.RM_ID = RM.RM_ID WHERE RM.DEFINED_BY = 'U' AND RM.FROM_OBJECT_TYPE_ID =  @BGM_POLICY_OBJECT_TYPE_ID AND RM.TO_OBJECT_TYPE_ID = @SM_COLUMN_OBJECT_TYPE_ID AND RD.FORWARD_TITLE = 'Represents' AND RD.REVERSE_TITLE = 'is Represented By';
        IF @RelationshipDetailId IS NOT NULL
        BEGIN
            UPDATE ADS_ASSOCIATIONS SET RELATIONSHIP_DETAIL_ID = @RelationshipDetailId WHERE (SOURCE_OBJECT_TYPE_ID = @BGM_POLICY_OBJECT_TYPE_ID AND TARGET_OBJECT_TYPE_ID = @SM_COLUMN_OBJECT_TYPE_ID)OR (SOURCE_OBJECT_TYPE_ID = @SM_COLUMN_OBJECT_TYPE_ID AND TARGET_OBJECT_TYPE_ID = @BGM_POLICY_OBJECT_TYPE_ID);
        END
--SET 7
        SELECT @RelationshipDetailId=RD_ID FROM RELATIONSHIP_DETAILS RD JOIN RELATIONSHIP_MASTER RM ON RD.RM_ID = RM.RM_ID WHERE RM.DEFINED_BY = 'U' AND RM.FROM_OBJECT_TYPE_ID =  @BGM_POLICY_OBJECT_TYPE_ID AND RM.TO_OBJECT_TYPE_ID = @BGM_RULE_OBJECT_TYPE_ID AND RD.FORWARD_TITLE = 'is Implemented By' AND RD.REVERSE_TITLE = 'Implements';
        IF @RelationshipDetailId IS NOT NULL
        BEGIN
            UPDATE ADS_ASSOCIATIONS SET RELATIONSHIP_DETAIL_ID = @RelationshipDetailId WHERE (SOURCE_OBJECT_TYPE_ID = @BGM_POLICY_OBJECT_TYPE_ID AND TARGET_OBJECT_TYPE_ID = @BGM_RULE_OBJECT_TYPE_ID)OR (SOURCE_OBJECT_TYPE_ID = @BGM_RULE_OBJECT_TYPE_ID AND TARGET_OBJECT_TYPE_ID = @BGM_POLICY_OBJECT_TYPE_ID);
        END
--SET 8
        SELECT @RelationshipDetailId=RD_ID FROM RELATIONSHIP_DETAILS RD JOIN RELATIONSHIP_MASTER RM ON RD.RM_ID = RM.RM_ID WHERE RM.DEFINED_BY = 'U' AND RM.FROM_OBJECT_TYPE_ID =  @BG_TERM_OBJECT_TYPE_ID AND RM.TO_OBJECT_TYPE_ID = @SM_SYSTEM_OBJECT_TYPE_ID AND RD.FORWARD_TITLE = 'Golden Source' AND RD.REVERSE_TITLE = 'Golden Source for';
        IF @RelationshipDetailId IS NOT NULL
        BEGIN
            UPDATE ADS_ASSOCIATIONS SET RELATIONSHIP_DETAIL_ID = @RelationshipDetailId WHERE (SOURCE_OBJECT_TYPE_ID = @BG_TERM_OBJECT_TYPE_ID AND TARGET_OBJECT_TYPE_ID = @SM_SYSTEM_OBJECT_TYPE_ID)OR (SOURCE_OBJECT_TYPE_ID = @SM_SYSTEM_OBJECT_TYPE_ID AND TARGET_OBJECT_TYPE_ID = @BG_TERM_OBJECT_TYPE_ID);
        END
       
    ALTER TABLE ADS_ASSOCIATIONS DROP COLUMN RELATIONSHIP;
END
GO

IF NOT EXISTS(SELECT * FROM ADS_MODULES WHERE MODULE_ACTION = 'mappingManager.erwin')
	BEGIN
		EXECUTE('UPDATE ADS_MODULES SET MODULE_ACTION = ''mappingManager.erwin'' WHERE MODULE_FORWARD = ''mappingmanager''');
		EXECUTE('UPDATE ADS_MODULES SET MODULE_ACTION = ''systemManager.erwin'' WHERE MODULE_FORWARD = ''systemmanager''');
		EXECUTE('UPDATE ADS_MODULES SET MODULE_ACTION = ''resourceManager.erwin'' WHERE MODULE_FORWARD = ''resourcemanager''');
		EXECUTE('UPDATE ADS_MODULES SET MODULE_ACTION = ''codesetManager.erwin'' WHERE MODULE_FORWARD = ''codesetmanager''');
		EXECUTE('UPDATE ADS_MODULES SET MODULE_ACTION = ''releaseManager.erwin'' WHERE MODULE_FORWARD = ''releasemanager''');
		EXECUTE('UPDATE ADS_MODULES SET MODULE_ACTION = ''referenceDataset.erwin'' WHERE MODULE_FORWARD = ''referencedatamanager''');
		EXECUTE('UPDATE ADS_MODULES SET MODULE_ACTION = ''codeAutomationTemplate.erwin'' WHERE MODULE_FORWARD = ''codeautomationtemplate''');
		EXECUTE('UPDATE ADS_MODULES SET MODULE_ACTION = ''testManager.erwin'' WHERE MODULE_FORWARD = ''testmanager''');
		EXECUTE('UPDATE ADS_MODULES SET MODULE_ACTION = ''requirementsManager.erwin'' WHERE MODULE_FORWARD = ''requirementsmanager''');
		EXECUTE('UPDATE ADS_MODULES SET MODULE_ACTION = ''reportingManager.erwin'' WHERE MODULE_FORWARD = ''reportingmanager''');
		EXECUTE('UPDATE ADS_MODULES SET MODULE_ACTION = ''businessGlossaryManager.erwin'' WHERE MODULE_FORWARD = ''businessglossarymanager''');
		EXECUTE('UPDATE ADS_MODULES SET MODULE_ACTION = ''workflowmanager.erwin'' WHERE MODULE_FORWARD = ''workflowmanager''');
     END
GO


IF NOT EXISTS(SELECT * FROM CAT_TEMPLATES WHERE CAT_ACTION='exportToSSISDTSX.erwin&ssisExportOption=SSISDefaultXML')
BEGIN
	EXECUTE('UPDATE CAT_TEMPLATES SET CAT_ACTION=''exportToSSISDTSX.erwin&ssisExportOption=SSISDefaultXML'' WHERE CAT_NAME = ''Microsoft SSIS DTSX'' AND CAT_DESC=''SSIS Default XML''');
	EXECUTE('UPDATE CAT_TEMPLATES SET CAT_ACTION=''exportToSSISDTSX.erwin&ssisExportOption=SSISSQLXML'' WHERE CAT_NAME = ''Microsoft SSIS DTSX'' AND CAT_DESC=''SSIS Include SQL Expression''');
	EXECUTE('UPDATE CAT_TEMPLATES SET CAT_ACTION=''exportToDSTG.erwin&dstgVersionOption=DSTGVersion7.5&exportType=PARALLELJOB'' WHERE CAT_NAME = ''Parallel Job (v7.5)'' AND CAT_DESC=''Datastage 7.5 Parallel Job''');
	EXECUTE('UPDATE CAT_TEMPLATES SET CAT_ACTION=''exportToDSTG.erwin&dstgVersionOption=DSTGVersion7.5&exportType=SERVERJOB'' WHERE CAT_NAME = ''Server Job (v7.5)'' AND CAT_DESC=''Datastage 7.5 Server Job''');
	EXECUTE('UPDATE CAT_TEMPLATES SET CAT_ACTION=''exportToDSTG.erwin&dstgVersionOption=DSTGVersion8.x&exportType=PARALLELJOB&dstgExportOption=DSTGDefaultXML'' WHERE CAT_NAME = ''Parallel Job (v8.0 & above)'' AND CAT_DESC=''Datastage 8.0 Parallel Job''');
	EXECUTE('UPDATE CAT_TEMPLATES SET CAT_ACTION=''exportToDSTG.erwin&dstgVersionOption=DSTGVersion8.x&exportType=SERVERJOB&dstgExportOption=DSTGDefaultXML'' WHERE CAT_NAME = ''Server Job (v8.0 & above)'' AND CAT_DESC=''Datastage 8.0 Server Job''');
	EXECUTE('UPDATE CAT_TEMPLATES SET CAT_ACTION=''exportToDSTG.erwin&dstgVersionOption=DSTGVersion8.x&exportType=PARALLELJOB&dstgExportOption=DSTGSQLXML'' WHERE CAT_NAME = ''Parallel Job Include Sql Expression (v8.0 & above)'' AND CAT_DESC=''Parallel Job Include Sql Expression''');
	EXECUTE('UPDATE CAT_TEMPLATES SET CAT_ACTION=''exportToDSTG.erwin&dstgVersionOption=DSTGVersion8.x&exportType=SERVERJOB&dstgExportOption=DSTGSQLXML'' WHERE CAT_NAME = ''Server Job Include Sql Expression (v8.0 & above)'' AND CAT_DESC=''Server Job Include Sql Expression''');
	EXECUTE('UPDATE CAT_TEMPLATES SET CAT_ACTION=''exportXml.erwin'' WHERE CAT_NAME = ''Standard Informatica'' AND CAT_DESC=''Standard Informatica''');
	EXECUTE('UPDATE CAT_TEMPLATES SET CAT_ACTION=''exportAll.erwin&exportType=MappingManagerXML'' WHERE CAT_NAME = ''Mapping Manager XML'' AND CAT_DESC=''Mapping Manager XML''');
	EXECUTE('UPDATE CAT_TEMPLATES SET CAT_ACTION=''exportODIXML.erwin'' WHERE CAT_NAME = ''Standard ODI'' AND CAT_DESC=''This template creates a simple ETL job for the selected Mappings''');
END
GO


IF NOT EXISTS (SELECT * FROM SYSOBJECTS WHERE ID = OBJECT_ID(N'CUSTOM_VIEW_CRITERIA') AND TYPE = 'U')
BEGIN
EXECUTE ('
CREATE TABLE CUSTOM_VIEW_CRITERIA
(
CV_ID  BIGINT IDENTITY(1,1) NOT NULL
,OBJECT_TYPE_ID BIGINT NOT NULL
,NAME VARCHAR(80) NOT NULL
,DESCRIPTION VARCHAR(4000) NULL
,CRITERIA NVARCHAR(MAX) NOT NULL
,ICON VARCHAR(50) NULL
,COLOR VARCHAR(50) NULL
,VIEW_TYPE_ID BIGINT NOT NULL
,CONSTRAINT CUSTOM_VIEW_CRITERIA_PK PRIMARY KEY
  (
    CV_ID
  )
,CONSTRAINT FK_CUST_VIEW_OTID FOREIGN KEY(OBJECT_TYPE_ID) REFERENCES ADS_KEY_VALUE_OBJECTS(OBJECT_TYPE_ID)
,CONSTRAINT FK_CUST_VIEW_VTID FOREIGN KEY(VIEW_TYPE_ID) REFERENCES ADS_KEY_VALUE_OBJECTS(OBJECT_TYPE_ID)
);
')
END
GO
IF NOT EXISTS (SELECT * FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE = 'CUSTOM_VIEW')
BEGIN
INSERT INTO ADS_KEY_VALUE_OBJECTS (OBJECT_TYPE,OBJECT_TABLE,OBJECT_TABLE_COLUMN,OBJECT_PARENT_TYPE,OBJECT_PARENT_COLUMN_ID,OBJECT_LEVEL,SYSTEM_BASED,OBJECT_TITLE,MODULE_KEY)
VALUES('CUSTOM_VIEW','','','','',0,0,'Custom View','com.ads.mm.permission.mm')
END
GO
IF NOT EXISTS (SELECT * FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE = 'CV_GLOBAL_VIEW')
BEGIN
INSERT INTO ADS_KEY_VALUE_OBJECTS (OBJECT_TYPE,OBJECT_TABLE,OBJECT_TABLE_COLUMN,OBJECT_PARENT_TYPE,OBJECT_PARENT_COLUMN_ID,OBJECT_LEVEL,SYSTEM_BASED,OBJECT_TITLE,MODULE_KEY)
VALUES('CV_GLOBAL_VIEW','','','','',0,0,'Global View','com.ads.mm.permission.mm')
END
GO
IF NOT EXISTS (SELECT * FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE = 'CV_USER_VIEW')
BEGIN
INSERT INTO ADS_KEY_VALUE_OBJECTS (OBJECT_TYPE,OBJECT_TABLE,OBJECT_TABLE_COLUMN,OBJECT_PARENT_TYPE,OBJECT_PARENT_COLUMN_ID,OBJECT_LEVEL,SYSTEM_BASED,OBJECT_TITLE,MODULE_KEY)
VALUES('CV_USER_VIEW','','','','',0,0,'User View','com.ads.mm.permission.mm')
END
GO

IF EXISTS (SELECT * FROM SYS.OBJECTS WHERE OBJECT_ID = OBJECT_ID(N'[FN_WORKFLOW_STATUS]'))
BEGIN
    DROP FUNCTION [FN_WORKFLOW_STATUS]
END
GO
CREATE FUNCTION FN_WORKFLOW_STATUS (@OBJECTTYPEID BIGINT, @OBJECTID BIGINT, @HISTORYTYPEID BIGINT)
RETURNS VARCHAR(MAX)
BEGIN
	DECLARE @status_title varchar(max)
	DECLARE @T_WFN_ID BIGINT
	select @T_WFN_ID = SUBSTRING(history.HISTORYDESC, CHARINDEX('"toWFNId"', history.HISTORYDESC)+10 , CHARINDEX(', "fromWFNId"',history.HISTORYDESC) - (CHARINDEX('"toWFNId"', history.HISTORYDESC)+10)) from
		(SELECT
			   historydesc
		FROM   [rm_history]
		WHERE  historyid IN (SELECT Max(historyid)
							 FROM   [rm_history]
							 WHERE  objecttypeid = @OBJECTTYPEID
									AND objectid = @OBJECTID
									AND historytypeid = @HISTORYTYPEID)
		) as history
	DECLARE @T_NODE_ID BIGINT = (SELECT node_id
	   FROM   ads_workflow_node
	   WHERE  wfn_id = @T_WFN_ID)
	DECLARE @T_STAGE_TYPE VARCHAR = (SELECT node_type
	   FROM   ads_workflow_node
	   WHERE  wfn_id = @T_WFN_ID)
	set @status_title = (SELECT
		   Isnull((SELECT CASE
							WHEN @T_STAGE_TYPE = 'T' THEN (SELECT status_title
														   FROM
							ads_workflow_trigger_action
														   WHERE
							wfta_id = @T_NODE_ID)
							WHEN @T_STAGE_TYPE = 'A' THEN (SELECT status_title
														   FROM
							ads_workflow_trigger_action
														   WHERE
							wfta_id = @T_NODE_ID)
							WHEN @T_STAGE_TYPE = 'S' THEN
							(SELECT status_title
							 FROM   ads_workflow_stage
							 WHERE  wfs_id = @T_NODE_ID)
							ELSE ''
						  END AS TO_STATUS), ' '))
	return @status_title;
END
GO
IF NOT EXISTS (SELECT * FROM ADS_KEY_VALUE_OBJECTS WHERE  OBJECT_TYPE = 'MAPPING_LINEAGE_SYNC_SCHEDULE')
BEGIN
    INSERT INTO ADS_KEY_VALUE_OBJECTS (OBJECT_TYPE,OBJECT_TABLE,OBJECT_TABLE_COLUMN,OBJECT_PARENT_TYPE,OBJECT_PARENT_COLUMN_ID,OBJECT_LEVEL,MODULE_KEY,SYSTEM_BASED,OBJECT_TITLE)
    SELECT 'MAPPING_LINEAGE_SYNC_SCHEDULE','MAPPING_LINEAGE_SYNC_SCHEDULE','','','','1','com.ads.mm.permission.generic','1','MAPPING_LINEAGE_SYNC_SCHEDULE'
END
GO
IF NOT EXISTS(SELECT * FROM APP_PREFERENCES WHERE PREFERENCE_NAME = 'SEND_EMAIL_ON_MAPPING_LINEAGE_SYNC_SCHEDULE_JOB_EXECUTED')
BEGIN
    INSERT INTO APP_PREFERENCES(PREFERENCE_NAME,PREFERENCE_VALUE) VALUES ('SEND_EMAIL_ON_MAPPING_LINEAGE_SYNC_SCHEDULE_JOB_EXECUTED','true');
    INSERT INTO APP_PREFERENCES(PREFERENCE_NAME,PREFERENCE_VALUE) VALUES ('SEND_EMAIL_ON_MAPPING_LINEAGE_SYNC_SCHEDULE_JOB_EXECUTED_SUBJECT','@Name@ Job Execution Details - DO NOT REPLY')
    INSERT INTO APP_PREFERENCES(PREFERENCE_NAME,PREFERENCE_VALUE) VALUES ('SEND_EMAIL_ON_MAPPING_LINEAGE_SYNC_SCHEDULE_JOB_EXECUTED_MESSAGE','Hi,<br>This is a system generated email notification.<br><br><table border = 1><tr><th colspan = 2><b>Job Details</b></th></tr><tr><td>Job Name </td><td>@jobName@</td><tr><td>Job Owner  </td><td>@jobOwner@</td></tr><tr><td>Job Scheduled Date Time  </td><td>@scheduledDateTime@</td></tr><tr><td>Job Completed Date Time  </td><td>@jobExecutedDateTime@</td></tr><tr><td>Job Next Executed Date Time  </td><td>@jobNextExecutedDateTime@</td></tr></table><BR><BR><b>@executionMessage@</b><br><br><I><font color =red>Note</font> This is an auto generated email notification and this mailbox is not monitored.<BR>Please do not reply to this email.</I>');
END
GO
IF NOT EXISTS (SELECT *
	       FROM   SYSOBJECTS
	       WHERE  ID = OBJECT_ID(N'TABLE_RECORDS_COUNT')
		      AND TYPE = 'U')
    BEGIN
    EXECUTE ('CREATE TABLE TABLE_RECORDS_COUNT   (
				 RECORDS_COUNT INT NOT NULL
				,TABLE_NAME VARCHAR(MAX) NOT NULL
		)');
  END
GO
IF NOT EXISTS (SELECT * FROM APP_PREFERENCES WHERE  PREFERENCE_NAME = 'CRITICALITY')
    BEGIN
        INSERT INTO APP_PREFERENCES (PREFERENCE_NAME,PREFERENCE_VALUE)
        SELECT 'CRITICALITY','true'
        UNION ALL
        SELECT 'BGM_STEWARDSHIP_GOALS','true'
    END
GO
IF NOT EXISTS (SELECT * FROM APP_PREFERENCES WHERE  PREFERENCE_NAME = 'BGM_DATA_CLASSIFICATION_TYPE')
    BEGIN
        INSERT INTO APP_PREFERENCES (PREFERENCE_NAME,PREFERENCE_VALUE)
        SELECT 'BGM_DATA_CLASSIFICATION_TYPE','true'
    END
GO
IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'BG_CUSTOM_TYPES' AND COLUMN_NAME = 'DISPLAY_ORDER' AND DATA_TYPE = 'BIGINT')
    BEGIN 
        DECLARE @ConstraintName nvarchar(200)
        SELECT @ConstraintName = Name FROM SYS.DEFAULT_CONSTRAINTS WHERE PARENT_OBJECT_ID = OBJECT_ID('BG_CUSTOM_TYPES') AND PARENT_COLUMN_ID = (SELECT column_id FROM sys.columns WHERE NAME = N'DISPLAY_ORDER' AND object_id = OBJECT_ID(N'BG_CUSTOM_TYPES'))
        IF @ConstraintName IS NOT NULL
            EXEC('ALTER TABLE BG_CUSTOM_TYPES DROP CONSTRAINT ' + @ConstraintName);
        IF EXISTS (SELECT * FROM syscolumns WHERE id=object_id('BG_CUSTOM_TYPES') AND name='DISPLAY_ORDER') 
            BEGIN
                EXEC('ALTER TABLE BG_CUSTOM_TYPES DROP COLUMN DISPLAY_ORDER');
                EXEC('ALTER TABLE BG_CUSTOM_TYPES ADD DISPLAY_ORDER FLOAT NOT NULL DEFAULT 0.0');
            END
    END
GO
IF EXISTS (SELECT * FROM BG_CUSTOM_TYPES WHERE OBJECT_TYPE_ID = (SELECT OBJECT_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE = 'BGM_TERM') AND DISPLAY_ORDER = 0.0)
    BEGIN
        EXECUTE('WITH CTE AS (SELECT ID, NAME, ROW_NUMBER()OVER ( ORDER BY CASE DISPLAY_ORDER WHEN NULL THEN 0 WHEN 0 THEN 999999999 ELSE DISPLAY_ORDER END) AS DISPLAY_ORDER FROM   BG_CUSTOM_TYPES ) UPDATE MS SET    MS.DISPLAY_ORDER = CTE.DISPLAY_ORDER FROM   BG_CUSTOM_TYPES MS JOIN CTE ON MS.ID = CTE.ID AND MS.NAME = CTE.NAME');
    END
GO
IF COL_LENGTH('ADS_WORKFLOW_NODE', 'UI_PROPERTIES') IS NOT NULL
    BEGIN
        UPDATE ADS_WORKFLOW_NODE SET UI_PROPERTIES = '{"loc":"60.25332896155628 -98.50315449791634","fill":"#8FDD00"}' WHERE NODE_TYPE='T';
    END
GO
IF COL_LENGTH('SYSTEM_TABLE_COLUMNS_METADATA', 'REF_ID') IS NULL
BEGIN
    ALTER TABLE SYSTEM_TABLE_COLUMNS_METADATA ADD REF_ID BIGINT NULL
END
GO
IF (SELECT COUNT(*) FROM APP_PREFERENCES where PREFERENCE_NAME = 'SDLR_EVERY_DAY') = 0
BEGIN
INSERT INTO APP_PREFERENCES(PREFERENCE_NAME,PREFERENCE_VALUE)
    SELECT 'SDLR_EVERY_DAY','0 MM HH 1/1 * ? *'
    UNION ALL
    SELECT 'SDLR_EVERY_WEEK','0 MM HH ? * DOW *'
    UNION ALL
    SELECT 'SDLR_EVERY_MONTH','0 MM HH DAY 1/1 ? *'
END
GO
IF EXISTS (SELECT * FROM ADS_MM_VERSION WHERE VALUE <= '9.4')
BEGIN
    UPDATE CAT_TEMPLATES SET CAT_ENABLED = 0 WHERE CAT_NAME = 'Import Microsoft SSIS DTSX'
    UPDATE CAT_TEMPLATES SET CAT_ENABLED = 1 WHERE CAT_NAME = 'Pig & Sqoop Script';
END
GO
IF NOT EXISTS (SELECT * FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE = 'OBJECT_DOCUMENT')
BEGIN
    INSERT INTO ADS_KEY_VALUE_OBJECTS (OBJECT_TYPE,OBJECT_TABLE,OBJECT_TABLE_COLUMN,OBJECT_PARENT_TYPE,OBJECT_PARENT_COLUMN_ID,OBJECT_LEVEL,MODULE_KEY,SYSTEM_BASED,OBJECT_TITLE)
    SELECT 'OBJECT_DOCUMENT','OBJECT_DOCUMENT','OBJECT_DOC_ID','','','1','com.ads.mm.permission.generic','1','Object Document'
    UNION ALL
    SELECT 'TCM_TESTCASE_DOC','TCM_TESTCASE_DOCS','TESTCASE_DOC_ID','','','1','com.ads.mm.permission.generic','1','Testcase Document'
END
GO
IF NOT EXISTS (SELECT * FROM MT_DEFINITION WHERE MTD_NAME = 'UPLOAD_FILE_EXTENSION')
    BEGIN
        INSERT INTO MT_DEFINITION (MTD_NAME,MTD_DESC,ADS_MODULE)
        SELECT 'UPLOAD_FILE_EXTENSION','UPLOAD_FILE_EXTENSION','ALL';
    END
GO

DECLARE @OBJECT_TYPE_ID INT,@UFE_OBJECT_ID INT ;
SELECT @OBJECT_TYPE_ID =  OBJECT_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE='MT_DEFINITION';
SELECT @UFE_OBJECT_ID =  MTD_ID FROM MT_DEFINITION WHERE  MTD_NAME = 'UPLOAD_FILE_EXTENSION' AND ADS_MODULE = 'ALL';
IF NOT EXISTS (SELECT * FROM ADS_KEY_VALUE WHERE  OBJECT_TYPE_ID = @OBJECT_TYPE_ID and OBJECT_ID = @UFE_OBJECT_ID)
    BEGIN
		INSERT INTO ADS_KEY_VALUE (KEY_NAME, KEY_VALUE, OBJECT_TYPE_ID, OBJECT_ID, DATATYPE_ID, KV_TYPE, LABEL_WIDTH, CONTROL_WIDTH, KV_ORDER, COMPONENT, DEFAULTVALUE, ISPUBLISHED, ISSYSTEMBASED, DISPLAY_POLICY, REGEX, MANDATORY, ENABLED, FIELD_LENGTH, PROCESSING_ORDER, VISIBLE, LOAD_ON_STARTUP, VALUE_OBJECT_REF, CREATED_BY, CREATED_DATE_TIME, LAST_MODIFIED_BY, LAST_MODIFIED_DATE_TIME, DESCRIPTION, IS_FORM_PROPERTY, IS_GRID_PROPERTY, IS_PIVOTABLE) 
		SELECT 'exe', 'exe', @OBJECT_TYPE_ID, @UFE_OBJECT_ID, 1, 'Text Box', NULL, NULL, 1, NULL, NULL, 1, 0, 0, NULL, NULL, NULL, NULL, NULL, 1, NULL, NULL, 'SYSTEM', CURRENT_TIMESTAMP, NULL, NULL, '', 0, 0, 0
		UNION ALL
		SELECT 'msi', 'msi', @OBJECT_TYPE_ID, @UFE_OBJECT_ID, 1, 'Text Box', NULL, NULL, 1, NULL, NULL, 1, 0, 0, NULL, NULL, NULL, NULL, NULL, 1, NULL, NULL, 'SYSTEM', CURRENT_TIMESTAMP, NULL, NULL, '', 0, 0, 0
		UNION ALL
		SELECT 'cmd', 'cmd', @OBJECT_TYPE_ID, @UFE_OBJECT_ID, 1, 'Text Box', NULL, NULL, 1, NULL, NULL, 1, 0, 0, NULL, NULL, NULL, NULL, NULL, 1, NULL, NULL, 'SYSTEM', CURRENT_TIMESTAMP, NULL, NULL, '', 0, 0, 0
		UNION ALL
		SELECT 'bat', 'bat', @OBJECT_TYPE_ID, @UFE_OBJECT_ID, 1, 'Text Box', NULL, NULL, 1, NULL, NULL, 1, 0, 0, NULL, NULL, NULL, NULL, NULL, 1, NULL, NULL, 'SYSTEM', CURRENT_TIMESTAMP, NULL, NULL, '', 0, 0, 0;
    END
GO

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE COLUMN_NAME = 'ACCOUNT_STATUS' AND TABLE_NAME = 'USERS' )
    BEGIN
        EXECUTE('ALTER TABLE USERS ADD ACCOUNT_STATUS CHAR(1) NOT NULL DEFAULT ''E''');
    END
GO

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE COLUMN_NAME = 'FAILED_LOGIN_ATTEMPTS' AND TABLE_NAME = 'USERS' )
    BEGIN
        EXECUTE('ALTER TABLE USERS ADD FAILED_LOGIN_ATTEMPTS INT NOT NULL DEFAULT 0');
    END
GO

IF (SELECT COUNT(*) FROM RM_HISTORYTYPE WHERE HISTORYTYPENAME = 'FAILED LOGIN') = 0
    BEGIN
        INSERT INTO RM_HISTORYTYPE (HISTORYTYPENAME, HISTORYTYPEDESC)
        SELECT 'FAILED LOGIN', 'Failed login attempt'
        UNION ALL
        SELECT 'ACCOUNT LOCKED', 'User account locked'
        UNION ALL
        SELECT 'ACCOUNT ENABLED', 'User account enabled'
        UNION ALL
        SELECT 'ACCOUNT DISABLED', 'User account disabled'
        UNION ALL
        SELECT 'INVALID USER LOGIN', 'Invalid user login attempt';
    END
GO

IF (SELECT COUNT(*) FROM APP_PREFERENCES where PREFERENCE_NAME = 'MAX_INVALID_LOGIN_ATTEMPTS_ALLOWED') = 0
    BEGIN
        INSERT INTO APP_PREFERENCES(PREFERENCE_NAME,PREFERENCE_VALUE)
        SELECT 'MAX_INVALID_LOGIN_ATTEMPTS_ALLOWED', '5';
    END
GO


IF (SELECT COUNT(*) FROM APP_PREFERENCES where PREFERENCE_NAME = 'SETTINGS_ENFORCE_PASSWORD_POLICY') = 0
    BEGIN
        INSERT INTO APP_PREFERENCES(PREFERENCE_NAME,PREFERENCE_VALUE)
        SELECT 'SETTINGS_ENFORCE_PASSWORD_POLICY', 'false';
    END
GO

-- IF EXISTS (SELECT * FROM ADS_MM_VERSION WHERE VALUE <= '9.4')
-- BEGIN
--   DELETE FROM CAT_TEMPLATES WHERE CAT_TAB_ID IN (SELECT CAT_TAB_ID FROM CAT_TABS WHERE CAT_TAB_NAME IN ('com.ads.mm.stb.ssis','com.ads.mm.stb.talend','com.ads.mm.stb.etlengineering','com.ads.mm.stb.datastage','com.ads.mm.stb.informatica'))
--   DELETE FROM CAT_TABS WHERE CAT_TAB_NAME IN ('com.ads.mm.stb.ssis','com.ads.mm.stb.talend','com.ads.mm.stb.etlengineering','com.ads.mm.stb.datastage','com.ads.mm.stb.informatica')
-- END
-- GO
DECLARE @OBJECT_TYPE_ID INT, @OBJECT_ID INT, @KV_ID INT, @KV_TYPE_ID INT ;
SELECT @OBJECT_TYPE_ID =  OBJECT_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE='SM_DATABASE_OPTIONS';
SELECT @OBJECT_ID =  MTD_ID FROM MT_DEFINITION WHERE  MTD_NAME = 'SM_DATABASE_OPTIONS' AND ADS_MODULE = 'SM';
SELECT @KV_ID = KV_ID FROM ADS_KEY_VALUE WHERE OBJECT_TYPE_ID  = @OBJECT_TYPE_ID AND OBJECT_ID = @OBJECT_ID AND KEY_NAME = 'IsAutoCommit' AND KV_TYPE= 'Check Box';
IF EXISTS( SELECT @OBJECT_TYPE_ID) AND EXISTS( SELECT @OBJECT_ID) AND EXISTS(SELECT @KV_ID) AND @KV_ID IS NOT NULL
    BEGIN
        UPDATE ADS_KEY_VALUE SET KV_TYPE = 'Combo Box' WHERE KV_ID = @KV_ID;
	SELECT @KV_TYPE_ID = OBJECT_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE='ADS_KEY_VALUE';
        INSERT INTO ADS_KEY_VALUE(KEY_NAME,KEY_VALUE,OBJECT_TYPE_ID,OBJECT_ID,DATATYPE_ID,KV_TYPE,LABEL_WIDTH,CONTROL_WIDTH,KV_ORDER,COMPONENT,DEFAULTVALUE)      VALUES('true','true',@KV_TYPE_ID,@KV_ID,'1','combovalues','','','0','','');
	INSERT INTO ADS_KEY_VALUE(KEY_NAME,KEY_VALUE,OBJECT_TYPE_ID,OBJECT_ID,DATATYPE_ID,KV_TYPE,LABEL_WIDTH,CONTROL_WIDTH,KV_ORDER,COMPONENT,DEFAULTVALUE)      VALUES('false','false',@KV_TYPE_ID,@KV_ID,'1','combovalues','','','1','','');
	SELECT @KV_ID = KV_ID FROM ADS_KEY_VALUE WHERE OBJECT_TYPE_ID  = @OBJECT_TYPE_ID AND OBJECT_ID = @OBJECT_ID AND KEY_NAME = 'IsReadOnly' AND KV_TYPE= 'Check Box';
        UPDATE ADS_KEY_VALUE SET KV_TYPE = 'Combo Box' WHERE KV_ID = @KV_ID;
        INSERT INTO ADS_KEY_VALUE(KEY_NAME,KEY_VALUE,OBJECT_TYPE_ID,OBJECT_ID,DATATYPE_ID,KV_TYPE,LABEL_WIDTH,CONTROL_WIDTH,KV_ORDER,COMPONENT,DEFAULTVALUE)      VALUES('true','true',@KV_TYPE_ID,@KV_ID,'1','combovalues','','','0','','');
	INSERT INTO ADS_KEY_VALUE(KEY_NAME,KEY_VALUE,OBJECT_TYPE_ID,OBJECT_ID,DATATYPE_ID,KV_TYPE,LABEL_WIDTH,CONTROL_WIDTH,KV_ORDER,COMPONENT,DEFAULTVALUE)      VALUES('false','false',@KV_TYPE_ID,@KV_ID,'1','combovalues','','','1','','');
        SELECT @KV_ID = KV_ID FROM ADS_KEY_VALUE WHERE OBJECT_TYPE_ID  = @OBJECT_TYPE_ID AND OBJECT_ID = @OBJECT_ID AND KEY_NAME = 'IncludeSynonyms' AND KV_TYPE= 'Check Box';
        UPDATE ADS_KEY_VALUE SET KV_TYPE = 'Combo Box' WHERE KV_ID = @KV_ID;
        INSERT INTO ADS_KEY_VALUE(KEY_NAME,KEY_VALUE,OBJECT_TYPE_ID,OBJECT_ID,DATATYPE_ID,KV_TYPE,LABEL_WIDTH,CONTROL_WIDTH,KV_ORDER,COMPONENT,DEFAULTVALUE)      VALUES('true','true',@KV_TYPE_ID,@KV_ID,'1','combovalues','','','0','','');
	INSERT INTO ADS_KEY_VALUE(KEY_NAME,KEY_VALUE,OBJECT_TYPE_ID,OBJECT_ID,DATATYPE_ID,KV_TYPE,LABEL_WIDTH,CONTROL_WIDTH,KV_ORDER,COMPONENT,DEFAULTVALUE)      VALUES('false','false',@KV_TYPE_ID,@KV_ID,'1','combovalues','','','1','','');
        SELECT @KV_ID = KV_ID FROM ADS_KEY_VALUE WHERE OBJECT_TYPE_ID  = @OBJECT_TYPE_ID AND OBJECT_ID = @OBJECT_ID AND KEY_NAME = 'scanNestedRefSynonyms' AND KV_TYPE= 'Check Box';
        UPDATE ADS_KEY_VALUE SET KV_TYPE = 'Combo Box' WHERE KV_ID = @KV_ID;
        INSERT INTO ADS_KEY_VALUE(KEY_NAME,KEY_VALUE,OBJECT_TYPE_ID,OBJECT_ID,DATATYPE_ID,KV_TYPE,LABEL_WIDTH,CONTROL_WIDTH,KV_ORDER,COMPONENT,DEFAULTVALUE)      VALUES('true','true',@KV_TYPE_ID,@KV_ID,'1','combovalues','','','0','','');
	INSERT INTO ADS_KEY_VALUE(KEY_NAME,KEY_VALUE,OBJECT_TYPE_ID,OBJECT_ID,DATATYPE_ID,KV_TYPE,LABEL_WIDTH,CONTROL_WIDTH,KV_ORDER,COMPONENT,DEFAULTVALUE)      VALUES('false','false',@KV_TYPE_ID,@KV_ID,'1','combovalues','','','1','','');
    END
GO
IF (SELECT COUNT(*) FROM APP_PREFERENCES WHERE PREFERENCE_NAME = 'BGM_BUSINESS_TERM_DASHBOARD_VISIBILITY') < 1
BEGIN
    INSERT INTO APP_PREFERENCES( PREFERENCE_NAME, PREFERENCE_VALUE) VALUES('BGM_BUSINESS_TERM_DASHBOARD_VISIBILITY','true');
    INSERT INTO APP_PREFERENCES( PREFERENCE_NAME, PREFERENCE_VALUE) VALUES('BGM_BUSINESS_POLICY_DASHBOARD_VISIBILITY','true');
    INSERT INTO APP_PREFERENCES( PREFERENCE_NAME, PREFERENCE_VALUE) VALUES('BGM_BUSINESS_RULE_DASHBOARD_VISIBILITY','true');
END;
GO
IF NOT EXISTS(SELECT * FROM SYS.VIEWS WHERE NAME = 'ALLMAPPINGSTESTSTATUS')
BEGIN
   EXEC ('CREATE VIEW [ALLMAPPINGSTESTSTATUS]
	AS
	  SELECT Coalesce(NullIf(rtrim(TEST_DISPOSITION),''''),''U'')  TESTSTATUS,
		 COUNT(MAP_ID)                 MAPPINGSCOUNT,
		 PROJECT_ID,
		 PROJECT.PROJ_NAME             AS PROJECTNAME,
		 STATUS                        AS MAPPINGSTATUS
	  FROM   MAPPING_DETAILS
		 LEFT JOIN PROJECT
		   ON PROJECT.PROJ_ID = MAPPING_DETAILS.PROJECT_ID
	  GROUP  BY TEST_DISPOSITION,
		    PROJECT_ID,
		    PROJECT.PROJ_NAME,
		    STATUS');
END
ELSE
BEGIN
	EXEC ('ALTER VIEW [ALLMAPPINGSTESTSTATUS]
	AS
	  SELECT Coalesce(NullIf(rtrim(TEST_DISPOSITION),''''),''U'') TESTSTATUS,
		 COUNT(MAP_ID)                 MAPPINGSCOUNT,
		 PROJECT_ID,
		 PROJECT.PROJ_NAME             AS PROJECTNAME,
		 STATUS                        AS MAPPINGSTATUS
	  FROM   MAPPING_DETAILS
		 LEFT JOIN PROJECT
		   ON PROJECT.PROJ_ID = MAPPING_DETAILS.PROJECT_ID
	  GROUP  BY TEST_DISPOSITION,
		    PROJECT_ID,
		    PROJECT.PROJ_NAME,
		    STATUS
');
END
GO
IF (columnproperty(object_id('PROJECT'),'PROJ_ID','IsIdentity')=0)
BEGIN
	DECLARE @OBJECTS_COUNT_OLD BIGINT;
	DECLARE @OBJECTS_COUNT_NEW BIGINT;
	DECLARE @CURRENT_OBJ_SEQ_ID int;
	DECLARE @SQLSTATEMENT VARCHAR(max);
	SELECT  @OBJECTS_COUNT_OLD = (SELECT COUNT(1) FROM PROJECT);
	EXECUTE ('ALTER TABLE MM_HISTORY DROP CONSTRAINT FK_MM_HIST_PROJID');
	EXECUTE ('ALTER TABLE PROJECT_DOCUMENTS DROP CONSTRAINT R_10');
	EXECUTE ('ALTER TABLE PROJECT_RESOURCES DROP CONSTRAINT R_7');
	EXECUTE ('ALTER TABLE PROJECT DROP CONSTRAINT XPKPROJECT');
	SELECT @CURRENT_OBJ_SEQ_ID = MAX(PROJ_ID)+1 FROM PROJECT;
	IF(@CURRENT_OBJ_SEQ_ID IS NULL)
	 BEGIN
		set @CURRENT_OBJ_SEQ_ID = 1;
	 END
		SET @SQLSTATEMENT = 'CREATE TABLE PROJECT2(
		PROJ_ID int NOT NULL IDENTITY('+CONVERT(VARCHAR(4000),@CURRENT_OBJ_SEQ_ID)+',1),
		PROJ_NAME varchar(200) NOT NULL,
		PROJ_DESCR varchar(max) NULL,
		PROJ_COST_CENTER varchar(20) NULL,
		PROJ_IT_SPONSOR_FULL_NAME varchar(50) NULL,
		PROJ_BUS_SPONSOR_FULL_NAME varchar(50) NULL,
		PROJ_MGR_APP_OWNER_FULL_NAME varchar(50) NULL,
		CREATED_DATETIME datetime NOT NULL,
		LAST_MODIFIED_BY varchar(20) NULL,
		LAST_MODIFIED_DATE_TIME datetime NULL,
		CREATED_BY varchar(20) NOT NULL,
		SUBJECT_ORDER_BY varchar(100) NULL,
		ETL_TOOL varchar(100) NULL,
		ETL_SHOW_EMPTY_PSEUDOCODE varchar(1) NULL DEFAULT ''0'',
		CONSTRAINT XPKPROJECT PRIMARY KEY CLUSTERED (PROJ_ID ASC))';
		EXECUTE (@SQLSTATEMENT);
		SET IDENTITY_INSERT PROJECT2 ON;
			BEGIN TRY
			BEGIN TRANSACTION PROJECTS_MOVE;
				EXECUTE ('INSERT INTO PROJECT2(
					 PROJ_ID
					,PROJ_NAME
					,PROJ_DESCR
					,PROJ_COST_CENTER
					,PROJ_IT_SPONSOR_FULL_NAME
					,PROJ_BUS_SPONSOR_FULL_NAME
					,PROJ_MGR_APP_OWNER_FULL_NAME
					,CREATED_DATETIME
					,LAST_MODIFIED_BY
					,LAST_MODIFIED_DATE_TIME
					,CREATED_BY
					,SUBJECT_ORDER_BY
					,ETL_TOOL
					,ETL_SHOW_EMPTY_PSEUDOCODE) SELECT PROJ_ID
					,PROJ_NAME
					,PROJ_DESCR
					,PROJ_COST_CENTER
					,PROJ_IT_SPONSOR_FULL_NAME
					,PROJ_BUS_SPONSOR_FULL_NAME
					,PROJ_MGR_APP_OWNER_FULL_NAME
					,CREATED_DATETIME
					,LAST_MODIFIED_BY
					,LAST_MODIFIED_DATE_TIME
					,CREATED_BY
					,SUBJECT_ORDER_BY
					,ETL_TOOL
					,ETL_SHOW_EMPTY_PSEUDOCODE FROM PROJECT');
			COMMIT TRANSACTION PROJECTS_MOVE;
		SET IDENTITY_INSERT PROJECT2 off;
		SELECT @OBJECTS_COUNT_NEW = (SELECT COUNT(1) FROM PROJECT2);
		IF @OBJECTS_COUNT_NEW = @OBJECTS_COUNT_OLD
			BEGIN
				EXECUTE('DROP TABLE PROJECT');
				EXECUTE SP_RENAME 'PROJECT2' , 'PROJECT';
			end
		EXECUTE('ALTER TABLE MM_HISTORY ADD CONSTRAINT FK_MM_HIST_PROJID FOREIGN KEY(PROJECT_ID) REFERENCES PROJECT(PROJ_ID)');
		EXECUTE('ALTER TABLE PROJECT_DOCUMENTS ADD CONSTRAINT R_10 FOREIGN KEY (PROJ_ID) REFERENCES PROJECT(PROJ_ID)');
		EXECUTE('ALTER TABLE PROJECT_RESOURCES ADD CONSTRAINT R_7 FOREIGN KEY (PROJ_ID) REFERENCES PROJECT(PROJ_ID) ON DELETE CASCADE');
	END TRY
	BEGIN CATCH
		ROLLBACK TRANSACTION PROJECTS_MOVE;
		PRINT 'Error while migrating the PROJECTS FOR IDENTITY';
        PRINT ERROR_LINE();
        PRINT ERROR_MESSAGE ();
        END CATCH
END	
GO
IF (columnproperty(object_id('MAPPING_DETAILS'),'MAP_ID','IsIdentity')=0)
BEGIN
	DECLARE @OBJECTS_COUNT_OLD BIGINT;
	DECLARE @OBJECTS_COUNT_NEW BIGINT;
	DECLARE @CURRENT_OBJ_SEQ_ID int;
	DECLARE @SQLSTATEMENT VARCHAR(max);
	SELECT  @OBJECTS_COUNT_OLD = (SELECT COUNT(1) FROM MAPPING_DETAILS);
	EXECUTE ('ALTER TABLE [RM_MIGRATIONOBJECT] DROP  CONSTRAINT [fk_migobj_map_id]');
        EXECUTE ('ALTER TABLE MM_HISTORY DROP CONSTRAINT FK_MM_HIST_MAPID');
        EXECUTE ('ALTER TABLE MAPPING_DOCUMENTS DROP CONSTRAINT R_16');
        EXECUTE ('ALTER TABLE MAPPING_SPECIFICATION DROP CONSTRAINT R_17');
	
	EXECUTE ('ALTER TABLE MAPPING_DETAILS DROP CONSTRAINT XPKMAPPING_DETAILS');
	EXECUTE ('ALTER TABLE MAPPING_DETAILS DROP CONSTRAINT UK_MAP_DET_NAME_PSID');
	
	EXECUTE ('ALTER TABLE MAPPING_DETAILS DROP CONSTRAINT FK_MAP_DTLS_SUBSTATE_ID');
	EXECUTE ('ALTER TABLE MAPPING_DETAILS DROP CONSTRAINT FK_MAPPING_DTLS_STATE_ID');
	EXECUTE ('ALTER TABLE MAPPING_DETAILS DROP CONSTRAINT FK_RM_ENV_ENVIRONMENT_ID');
	
	SELECT @CURRENT_OBJ_SEQ_ID = MAX(MAP_ID)+1 FROM MAPPING_DETAILS;
	IF(@CURRENT_OBJ_SEQ_ID IS NULL)
	 BEGIN
		set @CURRENT_OBJ_SEQ_ID = 1;
	 END
	 SET @SQLSTATEMENT = 'CREATE TABLE MAPPING_DETAILS2(
	MAP_ID bigint NOT NULL IDENTITY('+CONVERT(VARCHAR(4000),@CURRENT_OBJ_SEQ_ID)+',1),
	MAP_NAME varchar(300) NULL,
	MAP_SPEC_VERSION decimal(18, 2) NULL,
	MAP_DESCRIPTION varchar(max) NULL,
	PROJECT_ID int NULL,
	SOURCE_EXTRACT_QUERY varchar(max) NULL,
	SOURCE_EXTRACT_DESCRIPTION varchar(max) NULL,
	TARGET_UPDATE_STRATEGY varchar(3) NULL,
	TRRGET_UPGATE_STRATEGY_NOTES varchar(max) NULL,
	TEST_DISPOSITION char(1) NULL,
	TESTING_NOTES varchar(max) NULL,
	CREATED_BY varchar(50) NULL,
	CREATED_DATE_TIME datetime NULL,
	LAST_MODIFIED_BY varchar(50) NULL,
	LAST_MODIFIED_DATE_TIME datetime NULL,
	STATUS varchar(50) NULL,
	VERSIONLABEL varchar(100) NULL,
	CHANGED_DESCRIPTION varchar(max) NULL,
	PLAN_DEVELOP_LOE varchar(50) NULL,
	PLAN_NOTES varchar(max) NULL,
	ACTUAL_DEVELOP_LOE varchar(50) NULL,
	ACTUAL_NOTES varchar(max) NULL,
	PLAN_MAPPING_EFFORT float NULL,
	PLAN_MAPPING_EFFORT_UNITS varchar(50) NULL,
	PLAN_ETL_EFFORT float NULL,
	PLAN_ETL_EFFORT_UNITS varchar(50) NULL,
	ACTUAL_MAPPING_EFFORT float NULL,
	ACTUAL_MAPPING_EFFORT_UNITS varchar(50) NULL,
	ACTUAL_ETL_EFFORT float NULL,
	ACTUAL_ETL_EFFORT_UNITS varchar(50) NULL,
	JOB_XREF varchar(255) NULL,
	UPDATE_SRC_METADATA char(1) NOT NULL DEFAULT ''N'',
	UPDATE_TGT_METADATA char(1) NOT NULL  DEFAULT ''N'',
	USER_DEFINED1 varchar(max) NULL,
	USER_DEFINED2 varchar(max) NULL,
	USER_DEFINED3 varchar(max) NULL,
	USER_DEFINED4 varchar(max) NULL,
	USER_DEFINED5 varchar(max) NULL,
	ISPUBLISHED char(1) NULL  DEFAULT ''N'',
	PUBLISH_NOTES varchar(max) NULL,
	EFFECTIVE_DATE datetime NULL,
	STATE_ID int NULL,
	SUBSTATE_ID int NULL,
	SUBJECT_ID int NOT NULL  DEFAULT -1,
	RM_ENVIRONMENT_ID int NULL,
	USER_DEFINED_FIELD1 varchar(max) NULL,
	USER_DEFINED_FIELD2 varchar(max) NULL,
	USER_DEFINED_FIELD3 varchar(max) NULL,
	USER_DEFINED_FIELD4 varchar(max) NULL,
	USER_DEFINED_FIELD5 varchar(max) NULL,
	USER_DEFINED_FIELD6 varchar(max) NULL,
	USER_DEFINED_FIELD7 varchar(max) NULL,
	USER_DEFINED_FIELD8 varchar(max) NULL,
	USER_DEFINED_FIELD9 varchar(max) NULL,
	USER_DEFINED_FIELD10 varchar(max) NULL,
	USER_DEFINED_FIELD11 varchar(max) NULL,
	USER_DEFINED_FIELD12 varchar(max) NULL,
	USER_DEFINED_FIELD13 varchar(max) NULL,
	USER_DEFINED_FIELD14 varchar(max) NULL,
	USER_DEFINED_FIELD15 varchar(max) NULL,
	USER_DEFINED_FIELD16 varchar(max) NULL,
	USER_DEFINED_FIELD17 varchar(max) NULL,
	USER_DEFINED_FIELD18 varchar(max) NULL,
	USER_DEFINED_FIELD19 varchar(max) NULL,
	USER_DEFINED_FIELD20 varchar(max) NULL,
	USER_DEFINED_FIELD21 varchar(max) NULL,
	USER_DEFINED_FIELD22 varchar(max) NULL,
	USER_DEFINED_FIELD23 varchar(max) NULL,
	USER_DEFINED_FIELD24 varchar(max) NULL,
	USER_DEFINED_FIELD25 varchar(max) NULL,
	USER_DEFINED_FIELD26 varchar(max) NULL,
	USER_DEFINED_FIELD27 varchar(max) NULL,
	USER_DEFINED_FIELD28 varchar(max) NULL,
	USER_DEFINED_FIELD29 varchar(max) NULL,
	USER_DEFINED_FIELD30 varchar(max) NULL,
	USER_DEFINED_FIELD31 varchar(max) NULL,
	USER_DEFINED_FIELD32 varchar(max) NULL,
	USER_DEFINED_FIELD33 varchar(max) NULL,
	USER_DEFINED_FIELD34 varchar(max) NULL,
	USER_DEFINED_FIELD35 varchar(max) NULL,
	USER_DEFINED_FIELD36 varchar(max) NULL,
	USER_DEFINED_FIELD37 varchar(max) NULL,
	USER_DEFINED_FIELD38 varchar(max) NULL,
	USER_DEFINED_FIELD39 varchar(max) NULL,
	USER_DEFINED_FIELD40 varchar(max) NULL,
	SPEC_ARTIFACTS_REFERENCE varchar(max) NULL,
	CONSTRAINT XPKMAPPING_DETAILS PRIMARY KEY CLUSTERED(MAP_ID ASC))';
   EXECUTE (@SQLSTATEMENT);
   EXECUTE ('ALTER TABLE MAPPING_DETAILS2  ADD CONSTRAINT UK_MAP_DET_NAME_PSID UNIQUE NONCLUSTERED( [PROJECT_ID] ASC,[SUBJECT_ID] ASC,[MAP_NAME] ASC,[MAP_SPEC_VERSION] ASC)'); 
   EXECUTE('ALTER TABLE MAPPING_DETAILS2 ADD CONSTRAINT FK_MAP_DTLS_SUBSTATE_ID FOREIGN KEY (SUBSTATE_ID) REFERENCES SUBSTATE_DETAILS (SUBSTATE_ID)');
   EXECUTE('ALTER TABLE MAPPING_DETAILS2 ADD CONSTRAINT FK_MAPPING_DTLS_STATE_ID FOREIGN KEY (STATE_ID) REFERENCES STATE_DETAILS (STATE_ID)');
   EXECUTE('ALTER TABLE MAPPING_DETAILS2 ADD CONSTRAINT [FK_RM_ENV_ENVIRONMENT_ID] FOREIGN KEY ([RM_ENVIRONMENT_ID]) REFERENCES [RM_ENVIRONMENT] ( [ENVIRONMENTID])');
   SET IDENTITY_INSERT MAPPING_DETAILS2 ON;
		BEGIN TRY
		BEGIN TRANSACTION MAPPINGS_MOVE;
		EXECUTE ('INSERT INTO MAPPING_DETAILS2(MAP_ID                     
			,MAP_NAME                   
			,MAP_SPEC_VERSION           
			,MAP_DESCRIPTION            
			,PROJECT_ID                 
			,TARGET_UPDATE_STRATEGY     
			,TRRGET_UPGATE_STRATEGY_NOTES
			,TEST_DISPOSITION           
			,TESTING_NOTES              
			,CREATED_BY                 
			,CREATED_DATE_TIME          
			,LAST_MODIFIED_BY           
			,LAST_MODIFIED_DATE_TIME    
			,STATUS                     
			,VERSIONLABEL               
			,CHANGED_DESCRIPTION        
			,PLAN_DEVELOP_LOE           
			,PLAN_NOTES                 
			,ACTUAL_DEVELOP_LOE         
			,ACTUAL_NOTES               
			,PLAN_MAPPING_EFFORT        
			,PLAN_MAPPING_EFFORT_UNITS  
			,PLAN_ETL_EFFORT            
			,PLAN_ETL_EFFORT_UNITS      
			,ACTUAL_MAPPING_EFFORT      
			,ACTUAL_MAPPING_EFFORT_UNITS
			,ACTUAL_ETL_EFFORT          
			,ACTUAL_ETL_EFFORT_UNITS       
			,JOB_XREF                   
			,UPDATE_SRC_METADATA        
			,UPDATE_TGT_METADATA        
			,USER_DEFINED1              
			,USER_DEFINED2              
			,USER_DEFINED3              
			,USER_DEFINED4              
			,USER_DEFINED5              
			,ISPUBLISHED                
			,PUBLISH_NOTES              
			,EFFECTIVE_DATE             
			,STATE_ID                   
			,SUBSTATE_ID                
			,SUBJECT_ID                 
			,RM_ENVIRONMENT_ID         
			,SOURCE_EXTRACT_QUERY      
			,SOURCE_EXTRACT_DESCRIPTION
			,USER_DEFINED_FIELD1       
			,USER_DEFINED_FIELD2       
			,USER_DEFINED_FIELD3       
			,USER_DEFINED_FIELD4       
			,USER_DEFINED_FIELD5       
			,USER_DEFINED_FIELD6       
			,USER_DEFINED_FIELD7       
			,USER_DEFINED_FIELD8       
			,USER_DEFINED_FIELD9       
			,USER_DEFINED_FIELD10      
			,USER_DEFINED_FIELD11      
			,USER_DEFINED_FIELD12      
			,USER_DEFINED_FIELD13      
			,USER_DEFINED_FIELD14      
			,USER_DEFINED_FIELD15      
			,USER_DEFINED_FIELD16      
			,USER_DEFINED_FIELD17      
			,USER_DEFINED_FIELD18      
			,USER_DEFINED_FIELD19      
			,USER_DEFINED_FIELD20      
			,USER_DEFINED_FIELD21      
			,USER_DEFINED_FIELD22      
			,USER_DEFINED_FIELD23      
			,USER_DEFINED_FIELD24      
			,USER_DEFINED_FIELD25      
			,USER_DEFINED_FIELD26      
			,USER_DEFINED_FIELD27      
			,USER_DEFINED_FIELD28      
			,USER_DEFINED_FIELD29      
			,USER_DEFINED_FIELD30      
			,USER_DEFINED_FIELD31      
			,USER_DEFINED_FIELD32      
			,USER_DEFINED_FIELD33      
			,USER_DEFINED_FIELD34      
			,USER_DEFINED_FIELD35      
			,USER_DEFINED_FIELD36      
			,USER_DEFINED_FIELD37      
			,USER_DEFINED_FIELD38      
			,USER_DEFINED_FIELD39      
			,USER_DEFINED_FIELD40      
			,SPEC_ARTIFACTS_REFERENCE) SELECT MAP_ID                     
			,MAP_NAME                   
			,MAP_SPEC_VERSION           
			,MAP_DESCRIPTION            
			,PROJECT_ID                 
			,TARGET_UPDATE_STRATEGY     
			,TRRGET_UPGATE_STRATEGY_NOTES
			,TEST_DISPOSITION           
			,TESTING_NOTES              
			,CREATED_BY                 
			,CREATED_DATE_TIME          
			,LAST_MODIFIED_BY           
			,LAST_MODIFIED_DATE_TIME    
			,STATUS                     
			,VERSIONLABEL               
			,CHANGED_DESCRIPTION        
			,PLAN_DEVELOP_LOE           
			,PLAN_NOTES                 
			,ACTUAL_DEVELOP_LOE         
			,ACTUAL_NOTES               
			,PLAN_MAPPING_EFFORT        
			,PLAN_MAPPING_EFFORT_UNITS  
			,PLAN_ETL_EFFORT            
			,PLAN_ETL_EFFORT_UNITS      
			,ACTUAL_MAPPING_EFFORT      
			,ACTUAL_MAPPING_EFFORT_UNITS
			,ACTUAL_ETL_EFFORT          
			,ACTUAL_ETL_EFFORT_UNITS       
			,JOB_XREF                   
			,UPDATE_SRC_METADATA        
			,UPDATE_TGT_METADATA        
			,USER_DEFINED1              
			,USER_DEFINED2              
			,USER_DEFINED3              
			,USER_DEFINED4              
			,USER_DEFINED5              
			,ISPUBLISHED                
			,PUBLISH_NOTES              
			,EFFECTIVE_DATE             
			,STATE_ID                   
			,SUBSTATE_ID                
			,SUBJECT_ID                 
			,RM_ENVIRONMENT_ID         
			,SOURCE_EXTRACT_QUERY      
			,SOURCE_EXTRACT_DESCRIPTION
			,USER_DEFINED_FIELD1       
			,USER_DEFINED_FIELD2       
			,USER_DEFINED_FIELD3       
			,USER_DEFINED_FIELD4       
			,USER_DEFINED_FIELD5       
			,USER_DEFINED_FIELD6       
			,USER_DEFINED_FIELD7       
			,USER_DEFINED_FIELD8       
			,USER_DEFINED_FIELD9       
			,USER_DEFINED_FIELD10      
			,USER_DEFINED_FIELD11      
			,USER_DEFINED_FIELD12      
			,USER_DEFINED_FIELD13      
			,USER_DEFINED_FIELD14      
			,USER_DEFINED_FIELD15      
			,USER_DEFINED_FIELD16      
			,USER_DEFINED_FIELD17      
			,USER_DEFINED_FIELD18      
			,USER_DEFINED_FIELD19      
			,USER_DEFINED_FIELD20      
			,USER_DEFINED_FIELD21      
			,USER_DEFINED_FIELD22      
			,USER_DEFINED_FIELD23      
			,USER_DEFINED_FIELD24      
			,USER_DEFINED_FIELD25      
			,USER_DEFINED_FIELD26      
			,USER_DEFINED_FIELD27      
			,USER_DEFINED_FIELD28      
			,USER_DEFINED_FIELD29      
			,USER_DEFINED_FIELD30      
			,USER_DEFINED_FIELD31      
			,USER_DEFINED_FIELD32      
			,USER_DEFINED_FIELD33      
			,USER_DEFINED_FIELD34      
			,USER_DEFINED_FIELD35      
			,USER_DEFINED_FIELD36      
			,USER_DEFINED_FIELD37      
			,USER_DEFINED_FIELD38      
			,USER_DEFINED_FIELD39      
			,USER_DEFINED_FIELD40      
			,SPEC_ARTIFACTS_REFERENCE  FROM MAPPING_DETAILS');
		COMMIT TRANSACTION MAPPINGS_MOVE;
		SET IDENTITY_INSERT MAPPING_DETAILS2 OFF;
		SELECT @OBJECTS_COUNT_NEW = (SELECT COUNT(1) FROM MAPPING_DETAILS2);
		IF @OBJECTS_COUNT_NEW = @OBJECTS_COUNT_OLD
			BEGIN
				EXECUTE('DROP TABLE MAPPING_DETAILS');
				EXECUTE SP_RENAME 'MAPPING_DETAILS2' , 'MAPPING_DETAILS';
			end
	   EXECUTE ('ALTER TABLE MM_HISTORY ADD CONSTRAINT FK_MM_HIST_MAPID FOREIGN KEY(MAP_ID) REFERENCES MAPPING_DETAILS(MAP_ID) ON DELETE CASCADE');
	   EXECUTE ('ALTER TABLE [RM_MIGRATIONOBJECT] ADD  CONSTRAINT [fk_migobj_map_id] FOREIGN KEY ([MAP_ID]) REFERENCES [MAPPING_DETAILS] ([MAP_ID])');
	   EXECUTE ('ALTER TABLE MAPPING_DOCUMENTS ADD CONSTRAINT R_16 FOREIGN KEY (MAP_ID) REFERENCES MAPPING_DETAILS(MAP_ID) ON DELETE CASCADE');
	   EXECUTE ('ALTER TABLE MAPPING_SPECIFICATION ADD CONSTRAINT R_17 FOREIGN KEY (MAP_ID) REFERENCES MAPPING_DETAILS(MAP_ID) ON DELETE CASCADE');
   END TRY
	BEGIN CATCH
        ROLLBACK TRANSACTION MAPPINGS_MOVE;
        PRINT 'Error while migrating the MAPPINGS FOR IDENTITY';
        PRINT ERROR_LINE();
        PRINT ERROR_MESSAGE ();
        END CATCH
END
GO
IF (columnproperty(object_id('MAPPING_SPECIFICATION'),'MAP_SEQ_ID','IsIdentity')=0)
BEGIN
	DECLARE @MAPPPING_COUNT_OLD BIGINT;
	DECLARE @MAPPPING_COUNT_NEW BIGINT;
	DECLARE @CURRENT_MAP_SEQ_ID int;
	DECLARE @SQLSTATEMENT VARCHAR(max);
	SELECT @MAPPPING_COUNT_OLD = (SELECT COUNT(1) FROM MAPPING_SPECIFICATION);
	EXECUTE ('ALTER TABLE MAPPING_SPECIFICATION DROP CONSTRAINT R_17');
	EXECUTE ('ALTER TABLE MAPPING_SPECIFICATION DROP CONSTRAINT XPKMAPPING_SPECIFICATION');
	SELECT @CURRENT_MAP_SEQ_ID = MAX(MAP_SEQ_ID)+1 FROM MAPPING_SPECIFICATION;
	IF(@CURRENT_MAP_SEQ_ID IS NULL)
	 BEGIN
		set @CURRENT_MAP_SEQ_ID = 1;
	 END
	SET @SQLSTATEMENT = 'CREATE TABLE MAPPING_SPECIFICATION2 (
	PROJ_ID int NOT NULL,
	MAP_ID bigint NOT NULL,
	MAP_SEQ_ID bigint NOT NULL IDENTITY('+CONVERT(VARCHAR(4000),@CURRENT_MAP_SEQ_ID)+',1),
	EXTENDED_BUS_RULE varchar(max) NULL,
	SRC_SYSTEM_ID int NULL,
	SRC_SYSTEM_NAME varchar(max) NULL,
	SRC_SYSTEM_ENVIRONMENT_NAME varchar(max) NULL,
	SRC_TABLE_NAME varchar(max) NULL,
	SRC_COLUMN_NAME varchar(max) NULL,
	SRC_COL_DATATYPE varchar(max) NOT NULL,
	SRC_COL_LENGTH varchar(4000) NULL,
	SRC_COL_PRECISION varchar(4000) NULL,
	SRC_COL_SCALE varchar(4000) NULL,
	SRC_COL_DB_DEFAULT_VALUE varchar(50) NULL,
	SRC_COL_DEF varchar(max) NULL,
	SRC_COL_IDENTITY_FLAG char(1) NULL,
	SRC_COL_NULLABLE_FLAG char(1) NULL,
	SRC_PERCENT_NULL_VALUE varchar(50) NULL,
	SRC_NATURAL_KEY_FLAG char(1) NULL,
	SRC_MIN_VALUE varchar(50) NULL,
	SRC_MAX_VALUE varchar(50) NULL,
	TGT_SYSTEM_ID int NULL,
	TGT_SYSTEM_NAME varchar(max) NULL,
	TGT_SYSTEM_ENVIRONMENT_NAME varchar(max) NULL,
	TGT_TABLE_NAME varchar(max) NULL,
	TGT_COLUMN_NAME varchar(max) NULL,
	TGT_COL_DATATYPE varchar(max) NOT NULL,
	TGT_COL_LENGTH varchar(4000) NULL,
	TGT_COL_PRECISION varchar(4000) NULL,
	TGT_COL_SCALE varchar(4000) NULL,
	TGT_COL_ETL_DEFAULT_VALUE varchar(50) NULL,
	TGT_COL_DEF varchar(max) NULL,
	TGT_NATURAL_KEY_FLAG char(1) NULL,
	TGT_PRIMARY_KEY_FLAG char(1) NULL,
	TRNSF_LOOKUP_CONDITION varchar(max) NULL,
	BUSINESS_RULE varchar(max) NULL,
	COL_MAP_COMPLETE_FLAG char(1) NULL,
	LAST_MODIFIED_BY varchar(50) NULL,
	LAST_MODIFIED_DATE_TIME datetime NULL,
	CREATED_BY varchar(50) NOT NULL,
	CREATED_DATETIME datetime NOT NULL,
	USER_DEFINATION1 varchar(max) NULL,
	USER_DEFINATION2 varchar(max) NULL,
	USER_DEFINATION3 varchar(max) NULL,
	USER_DEFINATION4 varchar(max) NULL,
	MAP_SPECROWCOMMENTS varchar(max) NULL,
	TGT_COL_NULLABLE_FLAG char(1) NULL,
	USER_DEFINATION6 varchar(max) NULL,
	USER_DEFINATION7 varchar(max) NULL,
	USER_DEFINATION8 varchar(max) NULL,
	USER_DEFINATION9 varchar(max) NULL,
	USER_DEFINATION10 varchar(max) NULL,
	USER_DEFINATION5 varchar(max) NULL,
	SRC_SDI_FLAG varchar(1) NULL,
	SRC_SDI_DESCRIPTION varchar(max) NULL,
	TGT_SDI_FLAG varchar(1) NULL,
	TGT_SDI_DESCRIPTION varchar(max) NULL,
	LOOKUP_ON varchar(max) NULL,
	TGT_LOGICAL_COLUMN_NAME varchar(max) NULL,
	SRC_LOGICAL_COLUMN_NAME varchar(max) NULL,
	TGT_COLUMN_COMMENTS varchar(max) NULL,
	SRC_COLUMN_COMMENTS varchar(max) NULL,
	ROW_ORDER float NULL DEFAULT 0,
	CSM_MAPPING_REFERENCE varchar(255) NULL,
	SRC_XPATH varchar(max) NULL,
	TGT_XPATH varchar(max) NULL,
	LOOKUP_COLUMN varchar(max) NULL,
	BASE_SRC_SYS_ENVIRONMENT_NAME varchar(max) NULL,
	BASE_SRC_SYSTEM_NAME varchar(max) NULL,
	BASE_TGT_SYS_ENVIRONMENT_NAME varchar(max) NULL,
	BASE_TGT_SYSTEM_NAME varchar(max) NULL,
	SRC_TABLE_CLASS varchar(255) NULL,
	TGT_TABLE_CLASS varchar(255) NULL,
	SRC_COLUMN_CLASS varchar(255) NULL,
	TGT_COLUMN_CLASS varchar(255) NULL,
	SRC_BUSINESS_KEY_FLAG char(1) NULL,
	TGT_BUSINESS_KEY_FLAG char(1) NULL,
	TGT_TABLE_ALIAS varchar(255) NULL,
	SRC_TABLE_ALIAS varchar(255) NULL,
	TGT_COLUMN_ALIAS varchar(255) NULL,
	SRC_COLUMN_ALIAS varchar(255) NULL,
	SRC_PRIMARY_KEY_FLAG char(1) NULL,
	USER_DEFINITION11 varchar(max) NULL,
	USER_DEFINITION12 varchar(max) NULL,
	USER_DEFINITION13 varchar(max) NULL,
	USER_DEFINITION14 varchar(max) NULL,
	USER_DEFINITION15 varchar(max) NULL,
	USER_DEFINITION16 varchar(max) NULL,
	USER_DEFINITION17 varchar(max) NULL,
	USER_DEFINITION18 varchar(max) NULL,
	USER_DEFINITION19 varchar(max) NULL,
	USER_DEFINITION20 varchar(max) NULL,
	USER_DEFINITION21 varchar(max) NULL,
	USER_DEFINITION22 varchar(max) NULL,
	USER_DEFINITION23 varchar(max) NULL,
	USER_DEFINITION24 varchar(max) NULL,
	USER_DEFINITION25 varchar(max) NULL,
	USER_DEFINITION26 varchar(max) NULL,
	USER_DEFINITION27 varchar(max) NULL,
	USER_DEFINITION28 varchar(max) NULL,
	USER_DEFINITION29 varchar(max) NULL,
	USER_DEFINITION30 varchar(max) NULL,
	USER_DEFINITION31 varchar(max) NULL,
	USER_DEFINITION32 varchar(max) NULL,
	USER_DEFINITION33 varchar(max) NULL,
	USER_DEFINITION34 varchar(max) NULL,
	USER_DEFINITION35 varchar(max) NULL,
	USER_DEFINITION36 varchar(max) NULL,
	USER_DEFINITION37 varchar(max) NULL,
	USER_DEFINITION38 varchar(max) NULL,
	USER_DEFINITION39 varchar(max) NULL,
	USER_DEFINITION40 varchar(max) NULL,
	USER_DEFINITION41 varchar(max) NULL,
	USER_DEFINITION42 varchar(max) NULL,
	USER_DEFINITION43 varchar(max) NULL,
	USER_DEFINITION44 varchar(max) NULL,
	USER_DEFINITION45 varchar(max) NULL,
	USER_DEFINITION46 varchar(max) NULL,
	USER_DEFINITION47 varchar(max) NULL,
	USER_DEFINITION48 varchar(max) NULL,
	USER_DEFINITION49 varchar(max) NULL,
	USER_DEFINITION50 varchar(max) NULL,
	SPEC_ARTIFACTS_REFERENCE varchar(max) NULL,
	REFERENCE_TABLE varchar(max) NULL,
        CONSTRAINT XPKMAPPING_SPECIFICATION PRIMARY KEY CLUSTERED 
       (PROJ_ID ASC,MAP_ID ASC,MAP_SEQ_ID ASC))';
       EXECUTE (@SQLSTATEMENT);
       EXECUTE ('ALTER TABLE MAPPING_SPECIFICATION2 ADD CONSTRAINT R_17 FOREIGN KEY (MAP_ID) REFERENCES MAPPING_DETAILS(MAP_ID) ON DELETE CASCADE');
	SET IDENTITY_INSERT MAPPING_SPECIFICATION2 ON;
	BEGIN TRY
		BEGIN TRANSACTION MAP_SPEC_MOVE;
			EXECUTE ('INSERT INTO MAPPING_SPECIFICATION2(PROJ_ID
			,MAP_ID
			,MAP_SEQ_ID
			,EXTENDED_BUS_RULE
			,SRC_SYSTEM_ID   
			,SRC_SYSTEM_NAME 
			,SRC_SYSTEM_ENVIRONMENT_NAME       
			,SRC_TABLE_NAME  
			,SRC_COLUMN_NAME 
			,SRC_COL_DATATYPE 
			,SRC_COL_LENGTH  
			,SRC_COL_PRECISION 
			,SRC_COL_SCALE   
			,SRC_COL_DB_DEFAULT_VALUE          
			,SRC_COL_DEF     
			,SRC_COL_IDENTITY_FLAG 
			,SRC_COL_NULLABLE_FLAG             
			,SRC_PERCENT_NULL_VALUE            
			,SRC_NATURAL_KEY_FLAG              
			,SRC_MIN_VALUE   
			,SRC_MAX_VALUE   
			,TGT_SYSTEM_ID   
			,TGT_SYSTEM_NAME 
			,TGT_SYSTEM_ENVIRONMENT_NAME       
			,TGT_TABLE_NAME  
			,TGT_COLUMN_NAME 
			,TGT_COL_DATATYPE 
			,TGT_COL_LENGTH  
			,TGT_COL_PRECISION                 
			,TGT_COL_SCALE   
			,TGT_COL_ETL_DEFAULT_VALUE         
			,TGT_COL_DEF     
			,TGT_NATURAL_KEY_FLAG              
			,TGT_PRIMARY_KEY_FLAG              
			,TRNSF_LOOKUP_CONDITION            
			,BUSINESS_RULE   
			,COL_MAP_COMPLETE_FLAG             
			,LAST_MODIFIED_BY 
			,LAST_MODIFIED_DATE_TIME           
			,CREATED_BY
			,CREATED_DATETIME
			,USER_DEFINATION1 
			,USER_DEFINATION2 
			,USER_DEFINATION3 
			,USER_DEFINATION4 
			,USER_DEFINATION5 
			,TGT_COL_NULLABLE_FLAG             
			,USER_DEFINATION6 
			,USER_DEFINATION7 
			,USER_DEFINATION8 
			,USER_DEFINATION9 
			,USER_DEFINATION10                 
			,MAP_SPECROWCOMMENTS               
			,SRC_SDI_FLAG    
			,SRC_SDI_DESCRIPTION               
			,TGT_SDI_FLAG    
			,TGT_SDI_DESCRIPTION               
			,LOOKUP_ON       
			,TGT_COLUMN_COMMENTS               
			,SRC_COLUMN_COMMENTS               
			,TGT_LOGICAL_COLUMN_NAME           
			,SRC_LOGICAL_COLUMN_NAME           
			,ROW_ORDER       
			,CSM_MAPPING_REFERENCE             
			,SRC_XPATH       
			,TGT_XPATH       
			,LOOKUP_COLUMN   
			,BASE_SRC_SYS_ENVIRONMENT_NAME     
			,BASE_SRC_SYSTEM_NAME              
			,BASE_TGT_SYS_ENVIRONMENT_NAME     
			,BASE_TGT_SYSTEM_NAME              
			,SRC_TABLE_CLASS 
			,TGT_TABLE_CLASS 
			,SRC_COLUMN_CLASS 
			,TGT_COLUMN_CLASS 
			,SRC_BUSINESS_KEY_FLAG             
			,TGT_BUSINESS_KEY_FLAG             
			,TGT_TABLE_ALIAS 
			,SRC_TABLE_ALIAS 
			,TGT_COLUMN_ALIAS 
			,SRC_COLUMN_ALIAS 
			,SRC_PRIMARY_KEY_FLAG              
			,USER_DEFINITION11                 
			,USER_DEFINITION12                 
			,USER_DEFINITION13                 
			,USER_DEFINITION14                 
			,USER_DEFINITION15                 
			,USER_DEFINITION16                 
			,USER_DEFINITION17                 
			,USER_DEFINITION18                 
			,USER_DEFINITION19                 
			,USER_DEFINITION20                 
			,USER_DEFINITION21                 
			,USER_DEFINITION22                 
			,USER_DEFINITION23                 
			,USER_DEFINITION24                 
			,USER_DEFINITION25                 
			,USER_DEFINITION26                 
			,USER_DEFINITION27                 
			,USER_DEFINITION28                 
			,USER_DEFINITION29                 
			,USER_DEFINITION30                 
			,USER_DEFINITION31                 
			,USER_DEFINITION32                 
			,USER_DEFINITION33                 
			,USER_DEFINITION34                 
			,USER_DEFINITION35                 
			,USER_DEFINITION36                 
			,USER_DEFINITION37                 
			,USER_DEFINITION38                 
			,USER_DEFINITION39                 
			,USER_DEFINITION40                 
			,USER_DEFINITION41                 
			,USER_DEFINITION42                 
			,USER_DEFINITION43                 
			,USER_DEFINITION44                 
			,USER_DEFINITION45                 
			,USER_DEFINITION46                 
			,USER_DEFINITION47                 
			,USER_DEFINITION48                 
			,USER_DEFINITION49                 
			,USER_DEFINITION50                 
			,SPEC_ARTIFACTS_REFERENCE          
			,REFERENCE_TABLE) SELECT PROJ_ID
			,MAP_ID
			,MAP_SEQ_ID
			,EXTENDED_BUS_RULE
			,SRC_SYSTEM_ID   
			,SRC_SYSTEM_NAME 
			,SRC_SYSTEM_ENVIRONMENT_NAME       
			,SRC_TABLE_NAME  
			,SRC_COLUMN_NAME 
			,SRC_COL_DATATYPE 
			,SRC_COL_LENGTH  
			,SRC_COL_PRECISION 
			,SRC_COL_SCALE   
			,SRC_COL_DB_DEFAULT_VALUE          
			,SRC_COL_DEF     
			,SRC_COL_IDENTITY_FLAG 
			,SRC_COL_NULLABLE_FLAG             
			,SRC_PERCENT_NULL_VALUE            
			,SRC_NATURAL_KEY_FLAG              
			,SRC_MIN_VALUE   
			,SRC_MAX_VALUE   
			,TGT_SYSTEM_ID   
			,TGT_SYSTEM_NAME 
			,TGT_SYSTEM_ENVIRONMENT_NAME       
			,TGT_TABLE_NAME  
			,TGT_COLUMN_NAME 
			,TGT_COL_DATATYPE 
			,TGT_COL_LENGTH  
			,TGT_COL_PRECISION                 
			,TGT_COL_SCALE   
			,TGT_COL_ETL_DEFAULT_VALUE         
			,TGT_COL_DEF     
			,TGT_NATURAL_KEY_FLAG              
			,TGT_PRIMARY_KEY_FLAG              
			,TRNSF_LOOKUP_CONDITION            
			,BUSINESS_RULE   
			,COL_MAP_COMPLETE_FLAG             
			,LAST_MODIFIED_BY 
			,LAST_MODIFIED_DATE_TIME           
			,CREATED_BY
			,CREATED_DATETIME
			,USER_DEFINATION1 
			,USER_DEFINATION2 
			,USER_DEFINATION3 
			,USER_DEFINATION4 
			,USER_DEFINATION5 
			,TGT_COL_NULLABLE_FLAG             
			,USER_DEFINATION6 
			,USER_DEFINATION7 
			,USER_DEFINATION8 
			,USER_DEFINATION9 
			,USER_DEFINATION10                 
			,MAP_SPECROWCOMMENTS               
			,SRC_SDI_FLAG    
			,SRC_SDI_DESCRIPTION               
			,TGT_SDI_FLAG    
			,TGT_SDI_DESCRIPTION               
			,LOOKUP_ON       
			,TGT_COLUMN_COMMENTS               
			,SRC_COLUMN_COMMENTS               
			,TGT_LOGICAL_COLUMN_NAME           
			,SRC_LOGICAL_COLUMN_NAME           
			,ROW_ORDER       
			,CSM_MAPPING_REFERENCE             
			,SRC_XPATH       
			,TGT_XPATH       
			,LOOKUP_COLUMN   
			,BASE_SRC_SYS_ENVIRONMENT_NAME     
			,BASE_SRC_SYSTEM_NAME              
			,BASE_TGT_SYS_ENVIRONMENT_NAME     
			,BASE_TGT_SYSTEM_NAME              
			,SRC_TABLE_CLASS 
			,TGT_TABLE_CLASS 
			,SRC_COLUMN_CLASS 
			,TGT_COLUMN_CLASS 
			,SRC_BUSINESS_KEY_FLAG             
			,TGT_BUSINESS_KEY_FLAG             
			,TGT_TABLE_ALIAS 
			,SRC_TABLE_ALIAS 
			,TGT_COLUMN_ALIAS 
			,SRC_COLUMN_ALIAS 
			,SRC_PRIMARY_KEY_FLAG              
			,USER_DEFINITION11                 
			,USER_DEFINITION12                 
			,USER_DEFINITION13                 
			,USER_DEFINITION14                 
			,USER_DEFINITION15                 
			,USER_DEFINITION16                 
			,USER_DEFINITION17                 
			,USER_DEFINITION18                 
			,USER_DEFINITION19                 
			,USER_DEFINITION20                 
			,USER_DEFINITION21                 
			,USER_DEFINITION22                 
			,USER_DEFINITION23                 
			,USER_DEFINITION24                 
			,USER_DEFINITION25                 
			,USER_DEFINITION26                 
			,USER_DEFINITION27                 
			,USER_DEFINITION28                 
			,USER_DEFINITION29                 
			,USER_DEFINITION30                 
			,USER_DEFINITION31                 
			,USER_DEFINITION32                 
			,USER_DEFINITION33                 
			,USER_DEFINITION34                 
			,USER_DEFINITION35                 
			,USER_DEFINITION36                 
			,USER_DEFINITION37                 
			,USER_DEFINITION38                 
			,USER_DEFINITION39                 
			,USER_DEFINITION40                 
			,USER_DEFINITION41                 
			,USER_DEFINITION42                 
			,USER_DEFINITION43                 
			,USER_DEFINITION44                 
			,USER_DEFINITION45                 
			,USER_DEFINITION46                 
			,USER_DEFINITION47                 
			,USER_DEFINITION48                 
			,USER_DEFINITION49                 
			,USER_DEFINITION50                 
			,SPEC_ARTIFACTS_REFERENCE          
			,REFERENCE_TABLE FROM MAPPING_SPECIFICATION');
			COMMIT TRANSACTION MAP_SPEC_MOVE;
		SET IDENTITY_INSERT MAPPING_SPECIFICATION2 off;
		SELECT @MAPPPING_COUNT_NEW = (SELECT COUNT(1) FROM MAPPING_SPECIFICATION2);
		IF @MAPPPING_COUNT_NEW = @MAPPPING_COUNT_OLD
			BEGIN
                            EXECUTE('DROP TABLE MAPPING_SPECIFICATION');
                            EXECUTE SP_RENAME 'MAPPING_SPECIFICATION2' , 'MAPPING_SPECIFICATION';
			END
	END TRY
	BEGIN CATCH
		ROLLBACK TRANSACTION MAP_SPEC_MOVE;
		PRINT 'Error while migrating the MAPPING_SPECIFICATION FOR IDENTITY';
        PRINT ERROR_LINE();
        PRINT ERROR_MESSAGE ();
        END CATCH
END
GO

IF EXISTS (SELECT *
	       FROM   SYSOBJECTS
	       WHERE  ID = OBJECT_ID(N'APPENDED_MAP_SPEC_RCRDS')
		      AND TYPE = 'U')
    BEGIN
    EXECUTE ('DROP TABLE APPENDED_MAP_SPEC_RCRDS');
    EXECUTE ('DROP TABLE MASTER_LINEAGE_GRAPH_V');
  END
GO

IF NOT EXISTS (SELECT *
	       FROM   SYSOBJECTS
	       WHERE  ID = OBJECT_ID(N'APPENDED_MAP_SPEC_RECORDS')
		      AND TYPE = 'U')
    BEGIN
    EXECUTE ('CREATE TABLE APPENDED_MAP_SPEC_RECORDS   (
				 SRC_SYSTEM_NAME VARCHAR(MAX) NULL
				,SRC_SYSTEM_ENVIRONMENT_NAME VARCHAR(MAX) NULL
				,SRC_TABLE_NAME VARCHAR(MAX) NULL
				,SRC_COLUMN_NAME VARCHAR(MAX) NULL
				,SRC_COL_DATATYPE VARCHAR(MAX) NULL
				,SRC_COL_LENGTH VARCHAR(MAX) NULL
				,SRC_COL_PRECISION VARCHAR(MAX) NULL
				,SRC_COL_SCALE VARCHAR(MAX) NULL
				,TGT_SYSTEM_NAME VARCHAR(MAX) NULL
				,TGT_SYSTEM_ENVIRONMENT_NAME VARCHAR(MAX) NULL
				,TGT_TABLE_NAME VARCHAR(MAX) NULL
				,TGT_COLUMN_NAME VARCHAR(MAX) NULL
				,TGT_COL_DATATYPE VARCHAR(MAX) NULL
				,TGT_COL_LENGTH VARCHAR(MAX) NULL
				,TGT_COL_PRECISION VARCHAR(MAX) NULL
				,TGT_COL_SCALE VARCHAR(MAX) NULL
				,MAP_ID BIGINT  NULL
				,MAP_SEQ_ID INT  NULL
				,PROJ_ID INT  NULL
				,BUSINESS_RULE VARCHAR(MAX) NULL
		)');
  END
GO


IF NOT EXISTS (SELECT * FROM SYSOBJECTS WHERE ID = OBJECT_ID(N'MASTER_LINEAGE_GRAPH') AND TYPE = 'U')
    BEGIN
    EXECUTE ('CREATE TABLE MASTER_LINEAGE_GRAPH ( 
     SRC_KEY                     VARCHAR(4000), 
     SRC_SYSTEM_NAME             VARCHAR(4000), 
     SRC_SYSTEM_ENVIRONMENT_NAME VARCHAR(4000), 
     SRC_TABLE_NAME              VARCHAR(4000), 
     SRC_COLUMN_NAME             VARCHAR(4000), 
     TGT_KEY                     VARCHAR(4000), 
     TGT_SYSTEM_NAME             VARCHAR(4000), 
     TGT_SYSTEM_ENVIRONMENT_NAME VARCHAR(4000), 
     TGT_TABLE_NAME              VARCHAR(4000), 
     TGT_COLUMN_NAME             VARCHAR(4000), 
     MAP_SEQ_ID                  VARCHAR(50),
     PROJ_ID                     VARCHAR(50), 
     RELATION                    VARCHAR(20) 
  ); ');
  END
GO

IF NOT EXISTS(SELECT * FROM sys.indexes WHERE name = 'IDX_MASTER_LINEAGE_GRAPH' AND object_id = OBJECT_ID('MASTER_LINEAGE_GRAPH'))
    BEGIN
            EXECUTE('CREATE INDEX IDX_MASTER_LINEAGE_GRAPH ON MASTER_LINEAGE_GRAPH (SRC_KEY,RELATION)');
    END
GO

IF NOT EXISTS (SELECT * FROM ADS_KEY_VALUE_OBJECTS WHERE  OBJECT_TYPE = 'LINEAGE_DATA')
BEGIN
    INSERT INTO ADS_KEY_VALUE_OBJECTS (OBJECT_TYPE,OBJECT_TABLE,OBJECT_TABLE_COLUMN,OBJECT_PARENT_TYPE,OBJECT_PARENT_COLUMN_ID,OBJECT_LEVEL,MODULE_KEY,SYSTEM_BASED,OBJECT_TITLE)
    SELECT 'LINEAGE_DATA','LINEAGE_DATA','','','','1','com.ads.mm.permission.generic','1','LINEAGE_DATA'
END
GO

 IF (SELECT COUNT(*) FROM RM_HISTORYTYPE WHERE HISTORYTYPENAME = 'RESET') = 0
    BEGIN
        INSERT INTO RM_HISTORYTYPE (HISTORYTYPENAME, HISTORYTYPEDESC)
        (SELECT 'RESET', 'Reset');
    END
GO


IF (OBJECTPROPERTY(OBJECT_ID('FN_GET_GEN_FORWARD_LINEAGE'),'ISTABLEFUNCTION') = 1)
BEGIN
	DROP FUNCTION FN_GET_GEN_FORWARD_LINEAGE
END
GO

CREATE FUNCTION FN_GET_GEN_FORWARD_LINEAGE (@SRC_KEY VARCHAR(4000), 
                                            @PROJ_IDS_IN VARCHAR(4000), 
                                            @TABLE_LIMIT INT) 
RETURNS @LINEAGE_RESULT_G_TBL TABLE (
    SRC_KEY                     VARCHAR(4000), 
    SRC_SYSTEM_NAME             VARCHAR(4000), 
    SRC_SYSTEM_ENVIRONMENT_NAME VARCHAR(4000), 
    SRC_TABLE_NAME              VARCHAR(4000), 
    SRC_COLUMN_NAME             VARCHAR(4000), 
    TGT_KEY                     VARCHAR(4000), 
    TGT_SYSTEM_NAME             VARCHAR(4000), 
    TGT_SYSTEM_ENVIRONMENT_NAME VARCHAR(4000), 
    TGT_TABLE_NAME              VARCHAR(4000), 
    TGT_COLUMN_NAME             VARCHAR(4000),
    MAP_SEQ_ID                  VARCHAR(50), 
    PROJ_ID                     VARCHAR(50))
AS   
BEGIN 
  DECLARE @LINEAGE_CYCLEIDS_G_TBL TABLE (ROWID INT IDENTITY(1, 1), NODE  VARCHAR(4000) NOT NULL);
  INSERT INTO @LINEAGE_CYCLEIDS_G_TBL VALUES (@SRC_KEY); 
  DECLARE   @CYCLEIDS_COUNT INT,
            @COUNTER    INT,
            @RESULTCOUNT    INT; 
  DECLARE @CURRENTVAL AS VARCHAR(4000); 
  SET @COUNTER = 1; 
  SET @CURRENTVAL = (@SRC_KEY);
  SELECT @CYCLEIDS_COUNT = COUNT(*) FROM @LINEAGE_CYCLEIDS_G_TBL;
   IF (@TABLE_LIMIT IS NULL)
        SELECT @TABLE_LIMIT = RECORDS_COUNT FROM TABLE_RECORDS_COUNT WHERE TABLE_NAME='APPENDED_MAP_SPEC_RECORDS';
  WHILE (@COUNTER <= @CYCLEIDS_COUNT) 
    BEGIN 
        SELECT @RESULTCOUNT = COUNT(*) FROM @LINEAGE_RESULT_G_TBL; 

        IF @RESULTCOUNT < @TABLE_LIMIT 
          BEGIN 
                IF @PROJ_IDS_IN IS NOT NULL 
                    BEGIN 
                    INSERT INTO @LINEAGE_CYCLEIDS_G_TBL SELECT DISTINCT TGT_KEY FROM MASTER_LINEAGE_GRAPH MS WHERE  MS.SRC_KEY = @CURRENTVAL AND RELATION = 'FORWARD' AND (MS.TGT_KEY NOT IN (SELECT NODE FROM @LINEAGE_CYCLEIDS_G_TBL)) AND PROJ_ID IN (SELECT SPLITDATA AS PROJIDS FROM FNSPLITSTRING(@PROJ_IDS_IN,','));

                    INSERT INTO @LINEAGE_RESULT_G_TBL(SRC_KEY,SRC_SYSTEM_NAME,SRC_SYSTEM_ENVIRONMENT_NAME,SRC_TABLE_NAME,SRC_COLUMN_NAME,TGT_KEY,TGT_SYSTEM_NAME,TGT_SYSTEM_ENVIRONMENT_NAME,TGT_TABLE_NAME,TGT_COLUMN_NAME,MAP_SEQ_ID,PROJ_ID)
                                      SELECT DISTINCT SRC_KEY,SRC_SYSTEM_NAME,SRC_SYSTEM_ENVIRONMENT_NAME,SRC_TABLE_NAME,SRC_COLUMN_NAME,TGT_KEY,TGT_SYSTEM_NAME,TGT_SYSTEM_ENVIRONMENT_NAME,TGT_TABLE_NAME,TGT_COLUMN_NAME,MAP_SEQ_ID,PROJ_ID FROM MASTER_LINEAGE_GRAPH MS WHERE  MS.SRC_KEY = @CURRENTVAL AND RELATION = 'FORWARD' AND PROJ_ID IN (SELECT SPLITDATA AS PROJIDS FROM FNSPLITSTRING(@PROJ_IDS_IN,','));
                    END 
                ELSE 
                    BEGIN 
                        INSERT INTO @LINEAGE_CYCLEIDS_G_TBL SELECT DISTINCT TGT_KEY FROM MASTER_LINEAGE_GRAPH MS WHERE  MS.SRC_KEY = @CURRENTVAL AND RELATION = 'FORWARD' AND (MS.TGT_KEY NOT IN (SELECT NODE FROM @LINEAGE_CYCLEIDS_G_TBL)); 

                        INSERT INTO @LINEAGE_RESULT_G_TBL(SRC_KEY,SRC_SYSTEM_NAME,SRC_SYSTEM_ENVIRONMENT_NAME,SRC_TABLE_NAME,SRC_COLUMN_NAME,TGT_KEY,TGT_SYSTEM_NAME,TGT_SYSTEM_ENVIRONMENT_NAME,TGT_TABLE_NAME,TGT_COLUMN_NAME,MAP_SEQ_ID,PROJ_ID) 
                                          SELECT DISTINCT SRC_KEY,SRC_SYSTEM_NAME,SRC_SYSTEM_ENVIRONMENT_NAME,SRC_TABLE_NAME,SRC_COLUMN_NAME,TGT_KEY,TGT_SYSTEM_NAME,TGT_SYSTEM_ENVIRONMENT_NAME,TGT_TABLE_NAME,TGT_COLUMN_NAME,MAP_SEQ_ID,PROJ_ID FROM MASTER_LINEAGE_GRAPH MS WHERE MS.SRC_KEY = @CURRENTVAL AND RELATION = 'FORWARD';
                    END
                SELECT @CYCLEIDS_COUNT = COUNT(*) FROM   @LINEAGE_CYCLEIDS_G_TBL;
                SET @COUNTER = @COUNTER + 1;
                SELECT @CURRENTVAL = NODE FROM   @LINEAGE_CYCLEIDS_G_TBL WHERE  ROWID = @COUNTER;
            END;
        ELSE
            BREAK;
    END;
      RETURN;
END;
GO

IF (OBJECTPROPERTY(OBJECT_ID('FN_GET_GEN_REVERSE_LINEAGE'),'ISTABLEFUNCTION') = 1)
BEGIN
	DROP FUNCTION FN_GET_GEN_REVERSE_LINEAGE
END
GO
CREATE FUNCTION FN_GET_GEN_REVERSE_LINEAGE (@SRC_KEY     VARCHAR(4000), 
                                            @PROJ_IDS_IN VARCHAR(4000), 
                                            @TABLE_LIMIT INT) 
RETURNS @LINEAGE_RESULT_G_TBL TABLE (
  SRC_KEY                     VARCHAR(4000), 
  SRC_SYSTEM_NAME             VARCHAR(4000), 
  SRC_SYSTEM_ENVIRONMENT_NAME VARCHAR(4000), 
  SRC_TABLE_NAME              VARCHAR(4000), 
  SRC_COLUMN_NAME             VARCHAR(4000), 
  TGT_KEY                     VARCHAR(4000), 
  TGT_SYSTEM_NAME             VARCHAR(4000), 
  TGT_SYSTEM_ENVIRONMENT_NAME VARCHAR(4000), 
  TGT_TABLE_NAME              VARCHAR(4000), 
  TGT_COLUMN_NAME             VARCHAR(4000), 
  MAP_SEQ_ID                  VARCHAR(100),
  PROJ_ID                     VARCHAR(100)) 
AS
  BEGIN 
      DECLARE @LINEAGE_CYCLEIDS_G_TBL TABLE 
        ( 
           ROWID INT IDENTITY(1, 1), 
           NODE  VARCHAR(4000) NOT NULL 
        ); 

      INSERT INTO @LINEAGE_CYCLEIDS_G_TBL       VALUES      (@SRC_KEY); 

      DECLARE @CYCLEIDS_COUNT INT, 
              @COUNTER        INT, 
              @RESULTCOUNT    INT; 
      DECLARE @CURRENTVAL AS VARCHAR(4000); 

      SET @COUNTER = 1; 
      SET @CURRENTVAL = ( @SRC_KEY ); 

      SELECT @CYCLEIDS_COUNT = COUNT(*) FROM @LINEAGE_CYCLEIDS_G_TBL;

      IF (@TABLE_LIMIT IS NULL)
        SELECT @TABLE_LIMIT = RECORDS_COUNT FROM TABLE_RECORDS_COUNT WHERE TABLE_NAME='APPENDED_MAP_SPEC_RECORDS';

      WHILE ( @COUNTER <= @CYCLEIDS_COUNT ) 
        BEGIN 
            SELECT @RESULTCOUNT = COUNT(*) FROM @LINEAGE_RESULT_G_TBL; 

            IF @RESULTCOUNT < @TABLE_LIMIT 
              BEGIN 
                  IF @PROJ_IDS_IN IS NOT NULL 
                    BEGIN 
                        INSERT INTO @LINEAGE_CYCLEIDS_G_TBL SELECT DISTINCT TGT_KEY FROM MASTER_LINEAGE_GRAPH MS WHERE  MS.SRC_KEY = @CURRENTVAL AND RELATION = 'REVERSE' AND (MS.TGT_KEY NOT IN (SELECT NODE FROM @LINEAGE_CYCLEIDS_G_TBL)) AND PROJ_ID IN (SELECT SPLITDATA AS PROJIDS FROM FNSPLITSTRING(@PROJ_IDS_IN,','));
                        
                        INSERT INTO @LINEAGE_RESULT_G_TBL (TGT_KEY,TGT_SYSTEM_NAME,TGT_SYSTEM_ENVIRONMENT_NAME,TGT_TABLE_NAME,TGT_COLUMN_NAME,SRC_KEY,SRC_SYSTEM_NAME,SRC_SYSTEM_ENVIRONMENT_NAME,SRC_TABLE_NAME,SRC_COLUMN_NAME,MAP_SEQ_ID,PROJ_ID) SELECT DISTINCT SRC_KEY,SRC_SYSTEM_NAME,SRC_SYSTEM_ENVIRONMENT_NAME,SRC_TABLE_NAME,SRC_COLUMN_NAME,TGT_KEY,TGT_SYSTEM_NAME,TGT_SYSTEM_ENVIRONMENT_NAME,TGT_TABLE_NAME,TGT_COLUMN_NAME,MAP_SEQ_ID,PROJ_ID FROM MASTER_LINEAGE_GRAPH MS WHERE MS.SRC_KEY = @CURRENTVAL AND RELATION = 'REVERSE' AND PROJ_ID IN (SELECT SPLITDATA AS PROJIDS FROM FNSPLITSTRING(@PROJ_IDS_IN,','));
                    END 
                  ELSE 
                    BEGIN 
                        INSERT INTO @LINEAGE_CYCLEIDS_G_TBL SELECT DISTINCT TGT_KEY FROM MASTER_LINEAGE_GRAPH MS WHERE MS.SRC_KEY = @CURRENTVAL AND RELATION = 'REVERSE' AND (MS.TGT_KEY NOT IN (SELECT NODE FROM @LINEAGE_CYCLEIDS_G_TBL));
						
			INSERT INTO @LINEAGE_RESULT_G_TBL (TGT_KEY,TGT_SYSTEM_NAME,TGT_SYSTEM_ENVIRONMENT_NAME,TGT_TABLE_NAME,TGT_COLUMN_NAME,SRC_KEY,SRC_SYSTEM_NAME,SRC_SYSTEM_ENVIRONMENT_NAME,SRC_TABLE_NAME,SRC_COLUMN_NAME,MAP_SEQ_ID,PROJ_ID) SELECT DISTINCT SRC_KEY,SRC_SYSTEM_NAME,SRC_SYSTEM_ENVIRONMENT_NAME,SRC_TABLE_NAME,SRC_COLUMN_NAME,TGT_KEY,TGT_SYSTEM_NAME,TGT_SYSTEM_ENVIRONMENT_NAME,TGT_TABLE_NAME,TGT_COLUMN_NAME,MAP_SEQ_ID,PROJ_ID FROM MASTER_LINEAGE_GRAPH MS WHERE  MS.SRC_KEY = @CURRENTVAL AND RELATION = 'REVERSE'; 
                    END 
                  SELECT @CYCLEIDS_COUNT = COUNT(*) FROM @LINEAGE_CYCLEIDS_G_TBL;
                  SET @COUNTER = @COUNTER + 1;
                  SELECT @CURRENTVAL = NODE FROM @LINEAGE_CYCLEIDS_G_TBL WHERE  ROWID = @COUNTER;
              END;
            ELSE
              BREAK;
        END;
      RETURN;
  END;
GO

IF NOT EXISTS(SELECT * FROM APP_PREFERENCES WHERE PREFERENCE_NAME = 'LAST_MAPPING_LINEAGE_SYNC_TIME')
BEGIN 
    INSERT INTO APP_PREFERENCES(PREFERENCE_NAME,PREFERENCE_VALUE) VALUES ('LAST_MAPPING_LINEAGE_SYNC_TIME','1990-01-01 00:00:00.001');
END
GO

IF EXISTS (SELECT * FROM SYS.OBJECTS WHERE OBJECT_ID = OBJECT_ID(N'[fn_APPENDED_MAP_SPEC_RCRDS]') AND TYPE IN (N'FN', N'IF', N'TF', N'FS', N'FT'))
 BEGIN
    DROP FUNCTION fn_APPENDED_MAP_SPEC_RCRDS
 END
 GO

CREATE FUNCTION fn_APPENDED_MAP_SPEC_RCRDS(@MAP_IDs NVARCHAR(MAX))
RETURNS TABLE
AS
RETURN(
		WITH CTE AS (
	SELECT CAST(1 AS INT) AS scn_srt, CHARINDEX(CHAR(10), SRC_COLUMN_NAME) AS scn_stp, SRC_COLUMN_NAME
			 , CAST(1 AS INT) AS stn_srt, CHARINDEX(CHAR(10), SRC_TABLE_NAME) AS stn_stp, SRC_TABLE_NAME
			 , CAST(1 AS INT) AS sen_srt, CHARINDEX(CHAR(10), SRC_SYSTEM_ENVIRONMENT_NAME) AS sen_stp, SRC_SYSTEM_ENVIRONMENT_NAME
			 , CAST(1 AS INT) AS ssn_srt, CHARINDEX(CHAR(10), SRC_SYSTEM_NAME) AS ssn_stp, SRC_SYSTEM_NAME
			 , CAST(1 AS INT) AS scd_srt, CHARINDEX(CHAR(10), SRC_COL_DATATYPE) AS scd_stp, SRC_COL_DATATYPE
			 , CAST(1 AS INT) AS scl_srt, CHARINDEX(CHAR(10), SRC_COL_LENGTH) AS scl_stp, SRC_COL_LENGTH
			 , CAST(1 AS INT) AS scp_srt, CHARINDEX(CHAR(10), SRC_COL_PRECISION) AS scp_stp, SRC_COL_PRECISION
			 , CAST(1 AS INT) AS scs_srt, CHARINDEX(CHAR(10), SRC_COL_SCALE) AS scs_stp, SRC_COL_SCALE
			 , MAP_SEQ_ID AS SRC_MAP_SEQ_ID

			 , CAST(1 AS INT) AS tcn_srt, CHARINDEX(CHAR(10), TGT_COLUMN_NAME) AS tcn_stp, TGT_COLUMN_NAME
			 , CAST(1 AS INT) AS ttn_srt, CHARINDEX(CHAR(10), TGT_TABLE_NAME) AS ttn_stp, TGT_TABLE_NAME
			 , CAST(1 AS INT) AS ten_srt, CHARINDEX(CHAR(10), TGT_SYSTEM_ENVIRONMENT_NAME) AS ten_stp, TGT_SYSTEM_ENVIRONMENT_NAME
			 , CAST(1 AS INT) AS tsn_srt, CHARINDEX(CHAR(10), TGT_SYSTEM_NAME) AS tsn_stp, TGT_SYSTEM_NAME
			 , CAST(1 AS INT) AS tcd_srt, CHARINDEX(CHAR(10), TGT_COL_DATATYPE) AS tcd_stp, TGT_COL_DATATYPE
			 , CAST(1 AS INT) AS tcl_srt, CHARINDEX(CHAR(10), TGT_COL_LENGTH) AS tcl_stp, TGT_COL_LENGTH
			 , CAST(1 AS INT) AS tcp_srt, CHARINDEX(CHAR(10), TGT_COL_PRECISION) AS tcp_stp, TGT_COL_PRECISION
			 , CAST(1 AS INT) AS tcs_srt, CHARINDEX(CHAR(10), TGT_COL_SCALE) AS tcs_stp, TGT_COL_SCALE
			 , MAP_ID, MAP_SEQ_ID, PROJ_ID, BUSINESS_RULE, LAST_MODIFIED_DATE_TIME
		  FROM MAPPING_SPECIFICATION (nolock) MS
		  LEFT JOIN dbo.fnSplitString(@MAP_IDs, ',') fn
			ON MS.MAP_ID = fn.splitdata
		 WHERE @MAP_IDs IS NULL
			OR MS.MAP_ID = fn.splitdata
		 UNION ALL
		SELECT CAST(scn_stp + 1 AS INT), CHARINDEX(CHAR(10), SRC_COLUMN_NAME, scn_stp + 1), SRC_COLUMN_NAME
			 , CAST(stn_stp + 1 AS INT), CHARINDEX(CHAR(10), SRC_TABLE_NAME, stn_stp + 1), SRC_TABLE_NAME
			 , CAST(sen_stp + 1 AS INT), CHARINDEX(CHAR(10), SRC_SYSTEM_ENVIRONMENT_NAME, sen_stp + 1), SRC_SYSTEM_ENVIRONMENT_NAME
			 , CAST(ssn_stp + 1 AS INT), CHARINDEX(CHAR(10), SRC_SYSTEM_NAME, ssn_stp + 1), SRC_SYSTEM_NAME
			 , CAST(scd_stp + 1 AS INT), CHARINDEX(CHAR(10), SRC_COL_DATATYPE, scd_stp + 1), SRC_COL_DATATYPE
			 , CAST(scl_stp + 1 AS INT), CHARINDEX(CHAR(10), SRC_COL_LENGTH, scl_stp + 1), SRC_COL_LENGTH
			 , CAST(scp_stp + 1 AS INT), CHARINDEX(CHAR(10), SRC_COL_PRECISION, scp_stp + 1), SRC_COL_PRECISION
			 , CAST(scs_stp + 1 AS INT), CHARINDEX(CHAR(10), SRC_COL_SCALE, scs_stp + 1), SRC_COL_SCALE
			 , CASE WHEN scn_stp = 0 THEN NULL ELSE SRC_MAP_SEQ_ID END AS SRC_MAP_SEQ_ID

			 , CAST(tcn_stp + 1 AS INT), CHARINDEX(CHAR(10), TGT_COLUMN_NAME, tcn_stp + 1), TGT_COLUMN_NAME
			 , CAST(ttn_stp + 1 AS INT), CHARINDEX(CHAR(10), TGT_TABLE_NAME, ttn_stp + 1), TGT_TABLE_NAME
			 , CAST(ten_stp + 1 AS INT), CHARINDEX(CHAR(10), TGT_SYSTEM_ENVIRONMENT_NAME, ten_stp + 1), TGT_SYSTEM_ENVIRONMENT_NAME
			 , CAST(tsn_stp + 1 AS INT), CHARINDEX(CHAR(10), TGT_SYSTEM_NAME, tsn_stp + 1), TGT_SYSTEM_NAME
			 , CAST(tcd_stp + 1 AS INT), CHARINDEX(CHAR(10), TGT_COL_DATATYPE, tcd_stp + 1), TGT_COL_DATATYPE
			 , CAST(tcl_stp + 1 AS INT), CHARINDEX(CHAR(10), TGT_COL_LENGTH, tcl_stp + 1), TGT_COL_LENGTH
			 , CAST(tcp_stp + 1 AS INT), CHARINDEX(CHAR(10), TGT_COL_PRECISION, tcp_stp + 1), TGT_COL_PRECISION
			 , CAST(tcs_stp + 1 AS INT), CHARINDEX(CHAR(10), TGT_COL_SCALE, tcs_stp + 1), TGT_COL_SCALE
			 , MAP_ID, CASE WHEN tcn_stp = 0 THEN NULL ELSE MAP_SEQ_ID END AS MAP_SEQ_ID, PROJ_ID, BUSINESS_RULE, LAST_MODIFIED_DATE_TIME
		  FROM CTE
		 WHERE scn_stp > 0 OR stn_stp > 0 OR sen_stp > 0 OR ssn_stp > 0 OR tcn_stp > 0 OR ttn_stp > 0 OR ten_stp > 0 OR tsn_stp > 0)
		SELECT SUBSTRING(TGT.TGT_COLUMN_NAME, TGT.tcn_srt, CASE WHEN TGT.tcn_stp > 0 THEN TGT.tcn_stp-TGT.tcn_srt ELSE 512 END) AS TGT_COLUMN_NAME
			 , SUBSTRING(TGT.TGT_SYSTEM_ENVIRONMENT_NAME, TGT.ten_srt, CASE WHEN TGT.ten_stp > 0 THEN TGT.ten_stp-TGT.ten_srt ELSE 512 END) AS TGT_SYSTEM_ENVIRONMENT_NAME
			 , SUBSTRING(TGT.TGT_TABLE_NAME, TGT.ttn_srt, CASE WHEN TGT.ttn_stp > 0 THEN TGT.ttn_stp-TGT.ttn_srt ELSE 512 END) AS TGT_TABLE_NAME
			 , SUBSTRING(TGT.TGT_SYSTEM_NAME, TGT.tsn_srt, CASE WHEN TGT.tsn_stp > 0 THEN TGT.tsn_stp-TGT.tsn_srt ELSE 512 END) AS TGT_SYSTEM_NAME
			 , SUBSTRING(TGT.TGT_COL_DATATYPE, TGT.tcd_srt, CASE WHEN TGT.tcd_stp > 0 THEN TGT.tcd_stp-TGT.tcd_srt ELSE 512 END) AS TGT_COL_DATATYPE
			 , SUBSTRING(TGT.TGT_COL_LENGTH, TGT.tcl_srt, CASE WHEN TGT.tcl_stp > 0 THEN TGT.tcl_stp-TGT.tcl_srt ELSE 512 END) AS TGT_COL_LENGTH
			 , SUBSTRING(TGT.TGT_COL_PRECISION, TGT.tcp_srt, CASE WHEN TGT.tcp_stp > 0 THEN TGT.tcp_stp-TGT.tcp_srt ELSE 512 END) AS TGT_COL_PRECISION
			 , SUBSTRING(TGT.TGT_COL_SCALE, TGT.tcs_srt, CASE WHEN TGT.tcs_stp > 0 THEN TGT.tcs_stp-TGT.tcs_srt ELSE 512 END) AS TGT_COL_SCALE
			 , TGT.BUSINESS_RULE
			 , SUBSTRING(SRC.SRC_COLUMN_NAME, SRC.scn_srt, CASE WHEN SRC.scn_stp > 0 THEN SRC.scn_stp-SRC.scn_srt ELSE 512 END) AS SRC_COLUMN_NAME
			 , SUBSTRING(SRC.SRC_TABLE_NAME, SRC.stn_srt, CASE WHEN SRC.stn_stp > 0 THEN SRC.stn_stp-SRC.stn_srt ELSE 512 END) AS SRC_TABLE_NAME
			 , SUBSTRING(SRC.SRC_SYSTEM_ENVIRONMENT_NAME, SRC.sen_srt, CASE WHEN SRC.sen_stp > 0 THEN SRC.sen_stp-SRC.sen_srt ELSE 512 END) AS SRC_SYSTEM_ENVIRONMENT_NAME
			 , SUBSTRING(SRC.SRC_SYSTEM_NAME, SRC.ssn_srt, CASE WHEN SRC.ssn_stp > 0 THEN SRC.ssn_stp-SRC.ssn_srt ELSE 512 END) AS SRC_SYSTEM_NAME
			 , SUBSTRING(SRC.SRC_COL_DATATYPE, SRC.scd_srt, CASE WHEN SRC.scd_stp > 0 THEN SRC.scd_stp-SRC.scd_srt ELSE 512 END) AS SRC_COL_DATATYPE
			 , SUBSTRING(SRC.SRC_COL_LENGTH, SRC.scl_srt, CASE WHEN SRC.scl_stp > 0 THEN SRC.scl_stp-SRC.scl_srt ELSE 512 END) AS SRC_COL_LENGTH
			 , SUBSTRING(SRC.SRC_COL_PRECISION, SRC.scp_srt, CASE WHEN SRC.scp_stp > 0 THEN SRC.scp_stp-SRC.scp_srt ELSE 512 END) AS SRC_COL_PRECISION
			 , SUBSTRING(SRC.SRC_COL_SCALE, SRC.scs_srt, CASE WHEN SRC.scs_stp > 0 THEN SRC.scs_stp-SRC.scs_srt ELSE 512 END) AS SRC_COL_SCALE
			 , TGT.MAP_SEQ_ID, TGT.MAP_ID, TGT.PROJ_ID, tgt.LAST_MODIFIED_DATE_TIME
		 FROM CTE SRC
		 JOIN CTE TGT
		   ON SRC.SRC_MAP_SEQ_ID = TGT.MAP_SEQ_ID
)
GO


IF NOT EXISTS (SELECT * FROM   SYSOBJECTS  WHERE  ID = OBJECT_ID(N'OBJECT_OPERATIONS') AND TYPE = 'U')
    BEGIN
		EXECUTE ('CREATE TABLE OBJECT_OPERATIONS
			(
			ID BIGINT IDENTITY(1,1) NOT NULL,
			OBJECT_ID BIGINT NOT NULL,
			OBJECT_TYPE_ID BIGINT NOT NULL,
			OPERATION VARCHAR(50) NOT NULL,		
			)'
		);
	END
GO

IF EXISTS (SELECT * FROM ADS_MM_VERSION WHERE VALUE <= '9.4')
	BEGIN
		EXEC ('CREATE TRIGGER 
			MAPPING_SPEC_DELETE_TRIG
			ON 
			MAPPING_SPECIFICATION
			AFTER DELETE
			AS 
				BEGIN
					INSERT INTO OBJECT_OPERATIONS(OBJECT_ID, OBJECT_TYPE_ID, OPERATION) 
					SELECT D.MAP_SEQ_ID, (SELECT OBJECT_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE = ''MM_MAPPING_ROW''), ''DELETE''  FROM DELETED D
				END');
	END
GO
-- APPENDED_MAP_SPEC_RECORDS table is refreshed for every sync(Delta sync) and the same table is being used in Lineage queries. Hence we are taking another table called MAPPING_SPEC_RECORDS_TO_SYNC that contains 
-- appended map spec records whose last modified date time is greater than last sync time
IF NOT EXISTS (SELECT *
	       FROM   SYSOBJECTS
	       WHERE  ID = OBJECT_ID(N'MAPPING_SPEC_RECORDS_TO_SYNC')
		      AND TYPE = 'U')
    BEGIN
    EXECUTE ('CREATE TABLE MAPPING_SPEC_RECORDS_TO_SYNC   (
				 SRC_SYSTEM_NAME VARCHAR(MAX) NULL
				,SRC_SYSTEM_ENVIRONMENT_NAME VARCHAR(MAX) NULL
				,SRC_TABLE_NAME VARCHAR(MAX) NULL
				,SRC_COLUMN_NAME VARCHAR(MAX) NULL
				,SRC_COL_DATATYPE VARCHAR(MAX) NULL
				,SRC_COL_LENGTH VARCHAR(MAX) NULL
				,SRC_COL_PRECISION VARCHAR(MAX) NULL
				,SRC_COL_SCALE VARCHAR(MAX) NULL
				,TGT_SYSTEM_NAME VARCHAR(MAX) NULL
				,TGT_SYSTEM_ENVIRONMENT_NAME VARCHAR(MAX) NULL
				,TGT_TABLE_NAME VARCHAR(MAX) NULL
				,TGT_COLUMN_NAME VARCHAR(MAX) NULL
				,TGT_COL_DATATYPE VARCHAR(MAX) NULL
				,TGT_COL_LENGTH VARCHAR(MAX) NULL
				,TGT_COL_PRECISION VARCHAR(MAX) NULL
				,TGT_COL_SCALE VARCHAR(MAX) NULL
				,MAP_ID BIGINT  NULL
				,MAP_SEQ_ID INT  NULL
				,PROJ_ID INT  NULL
				,BUSINESS_RULE VARCHAR(MAX) NULL
		)');
  END
GO

IF COL_LENGTH('APPENDED_MAP_SPEC_RECORDS' ,'SRC_XPATH') IS NULL
BEGIN
        EXECUTE('ALTER TABLE APPENDED_MAP_SPEC_RECORDS ADD  SRC_XPATH VARCHAR(MAX) NULL');
	EXECUTE('ALTER TABLE APPENDED_MAP_SPEC_RECORDS ADD  TGT_XPATH VARCHAR(MAX) NULL');
	EXECUTE('ALTER TABLE MAPPING_SPEC_RECORDS_TO_SYNC ADD  SRC_XPATH VARCHAR(MAX) NULL');
	EXECUTE('ALTER TABLE MAPPING_SPEC_RECORDS_TO_SYNC ADD  TGT_XPATH VARCHAR(MAX) NULL');
END
GO

IF EXISTS (SELECT * FROM SYS.OBJECTS WHERE OBJECT_ID = OBJECT_ID(N'[FN_GET_DECLPATH_FROM_XPATH]') AND TYPE IN (N'FN', N'IF', N'TF', N'FS', N'FT'))
BEGIN
    DROP FUNCTION [FN_GET_DECLPATH_FROM_XPATH]
END
GO

CREATE FUNCTION [FN_GET_DECLPATH_FROM_XPATH] (
	@P_XPATH VARCHAR(MAX),
	@P_TABLE_NAME VARCHAR(MAX),
	@P_COLUMN_NAME VARCHAR(MAX),	
	@P_KEY_TYPE VARCHAR(20)	
) RETURNS VARCHAR(MAX) AS
BEGIN
	DECLARE @V_DECL_PATH VARCHAR(MAX) = REPLACE(LTRIM(RTRIM(@P_TABLE_NAME)), '.', '/');
	DECLARE @V_COLUMN_NAME VARCHAR(MAX);	
	DECLARE @P_POS INT;
	IF ISNULL(@P_XPATH, '') <> '' OR SUBSTRING(@P_XPATH, 3, LEN(@P_XPATH)) <> ''
	BEGIN		
		SET @P_XPATH = (SELECT SUBSTRING(@P_XPATH, 3, LEN(@P_XPATH)));
		SET @P_XPATH = (SELECT REPLACE(LTRIM(RTRIM(@P_XPATH)), '.', '/'));
		SET @P_POS = (SELECT PATINDEX('%' + @P_COLUMN_NAME, @P_XPATH));
		IF @P_POS > 0 
		BEGIN
				SET @V_DECL_PATH = (SELECT SUBSTRING(@P_XPATH, 1, @P_POS - 1 ));
				IF SUBSTRING(@V_DECL_PATH, LEN(@V_DECL_PATH), 1) = '@'
					BEGIN
						SET @V_DECL_PATH = (SELECT SUBSTRING(@V_DECL_PATH, 1,  len(@V_DECL_PATH) - 2));
						SET @P_COLUMN_NAME = '@'+@P_COLUMN_NAME;
					END
				ELSE
					BEGIN
						IF SUBSTRING(@V_DECL_PATH, len(@V_DECL_PATH), 1) = '/'
						BEGIN
							SET @V_DECL_PATH = (SELECT SUBSTRING(@V_DECL_PATH, 1,  len(@V_DECL_PATH) - 1));
						END
					END
				--SET @V_DECL_PATH = (SELECT RIGHT(@V_DECL_PATH, LEN(@V_DECL_PATH)));
		END
	END
RETURN 
	CASE
		WHEN @P_KEY_TYPE = 'TABLE' THEN
			UPPER(@V_DECL_PATH)
		ELSE
			UPPER(@V_DECL_PATH + ':' + @P_COLUMN_NAME)
	END
END
GO

IF (OBJECTPROPERTY(OBJECT_ID(N'[SP_SYNC_MAPPING_SPECS]'),N'IsProcedure') = 1)
BEGIN
    DROP PROCEDURE SP_SYNC_MAPPING_SPECS
END
GO
-- unlike oracle we are splitting the appended records in syn procedure itself due to technical limitation.
CREATE PROCEDURE SP_SYNC_MAPPING_SPECS
	@hardreset  int ,
	@exceptionstatus int = 0 output
	AS 	
	BEGIN
		DECLARE @SYNC_TIME DATETIME;
		DECLARE @msCount INT;
		DECLARE @map_row_type BIGINT;
		DECLARE @mapping_type BIGINT;
		DECLARE @UPD_SYNC_TIME DATETIME;
		DECLARE @T_MAP_SEQ_ID_COUNT BIGINT;
		SELECT  @exceptionstatus = 0;
		BEGIN TRAN
		SELECT @map_row_type = (SELECT OBJECT_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE = 'MM_MAPPING_ROW');
		SELECT @mapping_type = (SELECT OBJECT_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE = 'MM_MAPPING');
			IF @hardreset =  1
				BEGIN 
					TRUNCATE TABLE APPENDED_MAP_SPEC_RECORDS;
					TRUNCATE TABLE MAPPING_SPEC_RECORDS_TO_SYNC;
					TRUNCATE TABLE MASTER_LINEAGE_GRAPH; 
					TRUNCATE TABLE TABLE_RECORDS_COUNT;
					SELECT @SYNC_TIME = (SELECT CONVERT(DATETIME,'1990-01-01 00:00:00.001'))
				
				END
			ELSE
				BEGIN
					TRUNCATE TABLE MAPPING_SPEC_RECORDS_TO_SYNC;
					TRUNCATE TABLE TABLE_RECORDS_COUNT;
					SELECT @SYNC_TIME = (SELECT  CONVERT(DATETIME,PREFERENCE_VALUE) FROM APP_PREFERENCES WHERE PREFERENCE_NAME = 'LAST_MAPPING_LINEAGE_SYNC_TIME');
				END
			BEGIN TRY
				
				SELECT @UPD_SYNC_TIME = (SELECT MAX(c) FROM (VALUES ((SELECT MAX(LAST_MODIFIED_DATE_TIME) FROM MAPPING_SPECIFICATION)),((SELECT MAX(LAST_MODIFIED_DATE_TIME) FROM MAPPING_DETAILS)), (@SYNC_TIME)) t(c));
				IF OBJECT_ID('tempdb..#MAP_SEQ_IDS_TOSYNC') IS NOT NULL
					DROP TABLE #MAP_SEQ_IDS_TOSYNC;
				CREATE TABLE #MAP_SEQ_IDS_TOSYNC(T_MAP_SEQ_ID BIGINT NOT NULL)
				INSERT INTO #MAP_SEQ_IDS_TOSYNC(T_MAP_SEQ_ID) SELECT  DISTINCT MAP_SEQ_ID    FROM       MAPPING_SPECIFICATION (NOLOCK) MS       JOIN          MAPPING_DETAILS (NOLOCK) MD          ON MS.MAP_ID = MD.MAP_ID          AND          (             UPPER(MD.STATUS) = 'ACTIVE'             OR UPPER(MD.ISPUBLISHED) = 'Y'          )          AND          (             MS.LAST_MODIFIED_DATE_TIME > @SYNC_TIME             OR MD.LAST_MODIFIED_DATE_TIME > @SYNC_TIME          )     OPTION (maxrecursion 32767);
				SELECT @T_MAP_SEQ_ID_COUNT = (SELECT COUNT(T_MAP_SEQ_ID) FROM #MAP_SEQ_IDS_TOSYNC);
				
				IF  @T_MAP_SEQ_ID_COUNT > 0
				BEGIN
					WITH CTE AS 
					(
							SELECT CAST(1 AS INT) AS scn_srt, CHARINDEX(CHAR(10), SRC_COLUMN_NAME) AS scn_stp, SRC_COLUMN_NAME
								 , CAST(1 AS INT) AS stn_srt, CHARINDEX(CHAR(10), SRC_TABLE_NAME) AS stn_stp, SRC_TABLE_NAME
								 , CAST(1 AS INT) AS sen_srt, CHARINDEX(CHAR(10), SRC_SYSTEM_ENVIRONMENT_NAME) AS sen_stp, SRC_SYSTEM_ENVIRONMENT_NAME
								 , CAST(1 AS INT) AS ssn_srt, CHARINDEX(CHAR(10), SRC_SYSTEM_NAME) AS ssn_stp, SRC_SYSTEM_NAME
								 , CAST(1 AS INT) AS scd_srt, CHARINDEX(CHAR(10), SRC_COL_DATATYPE) AS scd_stp, SRC_COL_DATATYPE
								 , CAST(1 AS INT) AS scl_srt, CHARINDEX(CHAR(10), SRC_COL_LENGTH) AS scl_stp, SRC_COL_LENGTH
								 , CAST(1 AS INT) AS scp_srt, CHARINDEX(CHAR(10), SRC_COL_PRECISION) AS scp_stp, SRC_COL_PRECISION
								 , CAST(1 AS INT) AS scs_srt, CHARINDEX(CHAR(10), SRC_COL_SCALE) AS scs_stp, SRC_COL_SCALE
								 , CAST(1 AS INT) AS sxp_srt, CHARINDEX(CHAR(10), SRC_XPATH) AS sxp_stp, SRC_XPATH
								 , MAP_SEQ_ID AS SRC_MAP_SEQ_ID

								 , CAST(1 AS INT) AS tcn_srt, CHARINDEX(CHAR(10), TGT_COLUMN_NAME) AS tcn_stp, TGT_COLUMN_NAME
								 , CAST(1 AS INT) AS ttn_srt, CHARINDEX(CHAR(10), TGT_TABLE_NAME) AS ttn_stp, TGT_TABLE_NAME
								 , CAST(1 AS INT) AS ten_srt, CHARINDEX(CHAR(10), TGT_SYSTEM_ENVIRONMENT_NAME) AS ten_stp, TGT_SYSTEM_ENVIRONMENT_NAME
								 , CAST(1 AS INT) AS tsn_srt, CHARINDEX(CHAR(10), TGT_SYSTEM_NAME) AS tsn_stp, TGT_SYSTEM_NAME
								 , CAST(1 AS INT) AS tcd_srt, CHARINDEX(CHAR(10), TGT_COL_DATATYPE) AS tcd_stp, TGT_COL_DATATYPE
								 , CAST(1 AS INT) AS tcl_srt, CHARINDEX(CHAR(10), TGT_COL_LENGTH) AS tcl_stp, TGT_COL_LENGTH
								 , CAST(1 AS INT) AS tcp_srt, CHARINDEX(CHAR(10), TGT_COL_PRECISION) AS tcp_stp, TGT_COL_PRECISION
								 , CAST(1 AS INT) AS tcs_srt, CHARINDEX(CHAR(10), TGT_COL_SCALE) AS tcs_stp, TGT_COL_SCALE
								 , CAST(1 AS INT) AS txp_srt, CHARINDEX(CHAR(10), TGT_XPATH) AS txp_stp, TGT_XPATH
								 , MAP_ID, MAP_SEQ_ID, PROJ_ID, BUSINESS_RULE
						   FROM
							  MAPPING_SPECIFICATION (NOLOCK) MS 
							  LEFT JOIN
								 #MAP_SEQ_IDS_TOSYNC fn 
								 ON MS.MAP_SEQ_ID = fn.T_MAP_SEQ_ID 
						   WHERE
							 MS.MAP_SEQ_ID = fn.T_MAP_SEQ_ID 
						   UNION ALL
						   SELECT CAST(scn_stp + 1 AS INT), CHARINDEX(CHAR(10), SRC_COLUMN_NAME, scn_stp + 1), SRC_COLUMN_NAME
								 , CAST(stn_stp + 1 AS INT), CHARINDEX(CHAR(10), SRC_TABLE_NAME, stn_stp + 1), SRC_TABLE_NAME
								 , CAST(sen_stp + 1 AS INT), CHARINDEX(CHAR(10), SRC_SYSTEM_ENVIRONMENT_NAME, sen_stp + 1), SRC_SYSTEM_ENVIRONMENT_NAME
								 , CAST(ssn_stp + 1 AS INT), CHARINDEX(CHAR(10), SRC_SYSTEM_NAME, ssn_stp + 1), SRC_SYSTEM_NAME
								 , CAST(scd_stp + 1 AS INT), CHARINDEX(CHAR(10), SRC_COL_DATATYPE, scd_stp + 1), SRC_COL_DATATYPE
								 , CAST(scl_stp + 1 AS INT), CHARINDEX(CHAR(10), SRC_COL_LENGTH, scl_stp + 1), SRC_COL_LENGTH
								 , CAST(scp_stp + 1 AS INT), CHARINDEX(CHAR(10), SRC_COL_PRECISION, scp_stp + 1), SRC_COL_PRECISION
								 , CAST(scs_stp + 1 AS INT), CHARINDEX(CHAR(10), SRC_COL_SCALE, scs_stp + 1), SRC_COL_SCALE
								 , CAST(sxp_stp + 1 AS INT), CHARINDEX(CHAR(10), SRC_XPATH, sxp_stp + 1), SRC_XPATH
								 , CASE WHEN scn_stp = 0 THEN NULL ELSE SRC_MAP_SEQ_ID END AS SRC_MAP_SEQ_ID


								 , CAST(tcn_stp + 1 AS INT), CHARINDEX(CHAR(10), TGT_COLUMN_NAME, tcn_stp + 1), TGT_COLUMN_NAME
								 , CAST(ttn_stp + 1 AS INT), CHARINDEX(CHAR(10), TGT_TABLE_NAME, ttn_stp + 1), TGT_TABLE_NAME
								 , CAST(ten_stp + 1 AS INT), CHARINDEX(CHAR(10), TGT_SYSTEM_ENVIRONMENT_NAME, ten_stp + 1), TGT_SYSTEM_ENVIRONMENT_NAME
								 , CAST(tsn_stp + 1 AS INT), CHARINDEX(CHAR(10), TGT_SYSTEM_NAME, tsn_stp + 1), TGT_SYSTEM_NAME
								 , CAST(tcd_stp + 1 AS INT), CHARINDEX(CHAR(10), TGT_COL_DATATYPE, tcd_stp + 1), TGT_COL_DATATYPE
								 , CAST(tcl_stp + 1 AS INT), CHARINDEX(CHAR(10), TGT_COL_LENGTH, tcl_stp + 1), TGT_COL_LENGTH
								 , CAST(tcp_stp + 1 AS INT), CHARINDEX(CHAR(10), TGT_COL_PRECISION, tcp_stp + 1), TGT_COL_PRECISION
								 , CAST(tcs_stp + 1 AS INT), CHARINDEX(CHAR(10), TGT_COL_SCALE, tcs_stp + 1), TGT_COL_SCALE
								 , CAST(txp_stp + 1 AS INT), CHARINDEX(CHAR(10), TGT_XPATH, txp_stp + 1), TGT_XPATH
								 , MAP_ID, CASE WHEN tcn_stp = 0 THEN NULL ELSE MAP_SEQ_ID END AS MAP_SEQ_ID, PROJ_ID, BUSINESS_RULE
							FROM CTE
							 WHERE scn_stp > 0 OR stn_stp > 0 OR sen_stp > 0 OR ssn_stp > 0 OR tcn_stp > 0 OR ttn_stp > 0 OR ten_stp > 0 OR tsn_stp > 0
					)
					INSERT INTO MAPPING_SPEC_RECORDS_TO_SYNC(TGT_COLUMN_NAME, TGT_SYSTEM_ENVIRONMENT_NAME, TGT_TABLE_NAME, TGT_SYSTEM_NAME, TGT_COL_DATATYPE, TGT_COL_LENGTH, TGT_COL_PRECISION, TGT_COL_SCALE, TGT_XPATH, BUSINESS_RULE, SRC_COLUMN_NAME, SRC_TABLE_NAME, SRC_SYSTEM_ENVIRONMENT_NAME, SRC_SYSTEM_NAME, SRC_COL_DATATYPE, SRC_COL_LENGTH, SRC_COL_PRECISION, SRC_COL_SCALE, SRC_XPATH, MAP_SEQ_ID, MAP_ID, PROJ_ID )
					SELECT SUBSTRING(TGT.TGT_COLUMN_NAME, TGT.tcn_srt, CASE WHEN TGT.tcn_stp > 0 THEN TGT.tcn_stp-TGT.tcn_srt ELSE 512 END) AS TGT_COLUMN_NAME
					 , SUBSTRING(TGT.TGT_SYSTEM_ENVIRONMENT_NAME, TGT.ten_srt, CASE WHEN TGT.ten_stp > 0 THEN TGT.ten_stp-TGT.ten_srt ELSE 512 END) AS TGT_SYSTEM_ENVIRONMENT_NAME
					 , SUBSTRING(TGT.TGT_TABLE_NAME, TGT.ttn_srt, CASE WHEN TGT.ttn_stp > 0 THEN TGT.ttn_stp-TGT.ttn_srt ELSE 512 END) AS TGT_TABLE_NAME
					 , SUBSTRING(TGT.TGT_SYSTEM_NAME, TGT.tsn_srt, CASE WHEN TGT.tsn_stp > 0 THEN TGT.tsn_stp-TGT.tsn_srt ELSE 512 END) AS TGT_SYSTEM_NAME
					 , SUBSTRING(TGT.TGT_COL_DATATYPE, TGT.tcd_srt, CASE WHEN TGT.tcd_stp > 0 THEN TGT.tcd_stp-TGT.tcd_srt ELSE 512 END) AS TGT_COL_DATATYPE
					 , SUBSTRING(TGT.TGT_COL_LENGTH, TGT.tcl_srt, CASE WHEN TGT.tcl_stp > 0 THEN TGT.tcl_stp-TGT.tcl_srt ELSE 512 END) AS TGT_COL_LENGTH
					 , SUBSTRING(TGT.TGT_COL_PRECISION, TGT.tcp_srt, CASE WHEN TGT.tcp_stp > 0 THEN TGT.tcp_stp-TGT.tcp_srt ELSE 512 END) AS TGT_COL_PRECISION
					 , SUBSTRING(TGT.TGT_COL_SCALE, TGT.tcs_srt, CASE WHEN TGT.tcs_stp > 0 THEN TGT.tcs_stp-TGT.tcs_srt ELSE 512 END) AS TGT_COL_SCALE
					 , SUBSTRING(TGT.TGT_XPATH, TGT.txp_srt, CASE WHEN TGT.txp_stp > 0 THEN TGT.txp_stp-TGT.txp_srt ELSE LEN(TGT.TGT_XPATH) + 1 END) AS TGT_XPATH
					 , TGT.BUSINESS_RULE
					 , SUBSTRING(SRC.SRC_COLUMN_NAME, SRC.scn_srt, CASE WHEN SRC.scn_stp > 0 THEN SRC.scn_stp-SRC.scn_srt ELSE 512 END) AS SRC_COLUMN_NAME
					 , SUBSTRING(SRC.SRC_TABLE_NAME, SRC.stn_srt, CASE WHEN SRC.stn_stp > 0 THEN SRC.stn_stp-SRC.stn_srt ELSE 512 END) AS SRC_TABLE_NAME
					 , SUBSTRING(SRC.SRC_SYSTEM_ENVIRONMENT_NAME, SRC.sen_srt, CASE WHEN SRC.sen_stp > 0 THEN SRC.sen_stp-SRC.sen_srt ELSE 512 END) AS SRC_SYSTEM_ENVIRONMENT_NAME
					 , SUBSTRING(SRC.SRC_SYSTEM_NAME, SRC.ssn_srt, CASE WHEN SRC.ssn_stp > 0 THEN SRC.ssn_stp-SRC.ssn_srt ELSE 512 END) AS SRC_SYSTEM_NAME
					 , SUBSTRING(SRC.SRC_COL_DATATYPE, SRC.scd_srt, CASE WHEN SRC.scd_stp > 0 THEN SRC.scd_stp-SRC.scd_srt ELSE 512 END) AS SRC_COL_DATATYPE
					 , SUBSTRING(SRC.SRC_COL_LENGTH, SRC.scl_srt, CASE WHEN SRC.scl_stp > 0 THEN SRC.scl_stp-SRC.scl_srt ELSE 512 END) AS SRC_COL_LENGTH
					 , SUBSTRING(SRC.SRC_COL_PRECISION, SRC.scp_srt, CASE WHEN SRC.scp_stp > 0 THEN SRC.scp_stp-SRC.scp_srt ELSE 512 END) AS SRC_COL_PRECISION
					 , SUBSTRING(SRC.SRC_COL_SCALE, SRC.scs_srt, CASE WHEN SRC.scs_stp > 0 THEN SRC.scs_stp-SRC.scs_srt ELSE 512 END) AS SRC_COL_SCALE
					 , SUBSTRING(SRC.SRC_XPATH, SRC.sxp_srt, CASE WHEN SRC.sxp_stp > 0 THEN SRC.sxp_stp-SRC.sxp_srt ELSE LEN(SRC.SRC_XPATH) + 1 END) AS SRC_XPATH
					 , TGT.MAP_SEQ_ID
					 , TGT.MAP_ID
					 , TGT.PROJ_ID  
					 FROM    CTE SRC    JOIN       CTE TGT       ON SRC.SRC_MAP_SEQ_ID = TGT.MAP_SEQ_ID OPTION (maxrecursion 32767);
				END
				
				IF EXISTS(SELECT COUNT(*) FROM OBJECT_OPERATIONS)
						BEGIN
							DELETE FROM MASTER_LINEAGE_GRAPH WHERE MAP_SEQ_ID IN (SELECT OBJECT_ID FROM OBJECT_OPERATIONS WHERE OBJECT_TYPE_ID = @map_row_type AND OPERATION= 'DELETE') OR  MAP_SEQ_ID IN (SELECT MAP_SEQ_ID FROM MAPPING_SPECIFICATION WHERE MAP_ID IN (SELECT OBJECT_ID FROM OBJECT_OPERATIONS WHERE OBJECT_TYPE_ID = @mapping_type AND UPPER(OPERATION) = 'DELETE'));
							DELETE FROM APPENDED_MAP_SPEC_RECORDS WHERE MAP_SEQ_ID IN (SELECT OBJECT_ID FROM OBJECT_OPERATIONS WHERE OBJECT_TYPE_ID = @map_row_type AND OPERATION= 'DELETE') OR  MAP_SEQ_ID IN (SELECT MAP_SEQ_ID FROM MAPPING_SPECIFICATION WHERE MAP_ID IN (SELECT OBJECT_ID FROM OBJECT_OPERATIONS WHERE OBJECT_TYPE_ID = @mapping_type AND UPPER(OPERATION) = 'DELETE'));
							DELETE FROM OBJECT_OPERATIONS WHERE OBJECT_TYPE_ID IN (@map_row_type , @mapping_type) AND OPERATION= 'DELETE';
						END
				SELECT @msCount = (SELECT COUNT(*) FROM MAPPING_SPEC_RECORDS_TO_SYNC)
				IF  @msCount > 0
					BEGIN
						DELETE FROM MASTER_LINEAGE_GRAPH WHERE MAP_SEQ_ID IN (SELECT MAP_SEQ_ID FROM MAPPING_SPEC_RECORDS_TO_SYNC) ;
						IF @exceptionstatus = 0
							SET @exceptionstatus = @@ERROR
						DELETE FROM APPENDED_MAP_SPEC_RECORDS WHERE MAP_SEQ_ID IN (SELECT MAP_SEQ_ID FROM MAPPING_SPEC_RECORDS_TO_SYNC) ;
						IF @exceptionstatus = 0
							SET @exceptionstatus = @@ERROR
						INSERT INTO APPENDED_MAP_SPEC_RECORDS (SRC_SYSTEM_NAME ,SRC_SYSTEM_ENVIRONMENT_NAME ,SRC_TABLE_NAME ,SRC_COLUMN_NAME ,SRC_COL_DATATYPE ,SRC_COL_LENGTH ,SRC_COL_PRECISION ,SRC_COL_SCALE , SRC_XPATH, TGT_SYSTEM_NAME ,TGT_SYSTEM_ENVIRONMENT_NAME ,TGT_TABLE_NAME ,TGT_COLUMN_NAME ,TGT_COL_DATATYPE ,TGT_COL_LENGTH ,TGT_COL_PRECISION ,TGT_COL_SCALE , TGT_XPATH, MAP_ID ,MAP_SEQ_ID ,PROJ_ID ,BUSINESS_RULE )  SELECT MS.SRC_SYSTEM_NAME ,MS.SRC_SYSTEM_ENVIRONMENT_NAME ,MS.SRC_TABLE_NAME ,MS.SRC_COLUMN_NAME ,MS.SRC_COL_DATATYPE ,MS.SRC_COL_LENGTH ,MS.SRC_COL_PRECISION ,MS.SRC_COL_SCALE , MS.SRC_XPATH, MS.TGT_SYSTEM_NAME ,MS.TGT_SYSTEM_ENVIRONMENT_NAME ,MS.TGT_TABLE_NAME ,MS.TGT_COLUMN_NAME ,MS.TGT_COL_DATATYPE ,MS.TGT_COL_LENGTH ,MS.TGT_COL_PRECISION ,MS.TGT_COL_SCALE , MS.TGT_XPATH, MS.MAP_ID ,MS.MAP_SEQ_ID ,MS.PROJ_ID ,MS.BUSINESS_RULE FROM MAPPING_SPEC_RECORDS_TO_SYNC MS  WHERE       SRC_SYSTEM_NAME <> ''       AND TGT_SYSTEM_NAME <> ''       AND SRC_SYSTEM_ENVIRONMENT_NAME <> ''       AND TGT_SYSTEM_ENVIRONMENT_NAME <> ''       AND SRC_TABLE_NAME <> ''       AND TGT_TABLE_NAME <> ''       AND SRC_COLUMN_NAME <> ''       AND TGT_COLUMN_NAME <> '';
						IF @exceptionstatus = 0
							SET @exceptionstatus = @@ERROR
						INSERT INTO MASTER_LINEAGE_GRAPH (SRC_KEY,SRC_SYSTEM_NAME,TGT_KEY,TGT_SYSTEM_NAME,MAP_SEQ_ID ,PROJ_ID,RELATION) SELECT DISTINCT SRC_SYSTEM_NAME,SRC_SYSTEM_NAME,TGT_SYSTEM_NAME,TGT_SYSTEM_NAME,MAP_SEQ_ID,PROJ_ID,'FORWARD' FROM MAPPING_SPEC_RECORDS_TO_SYNC WHERE SRC_SYSTEM_NAME <> '' AND TGT_SYSTEM_NAME <> ''  AND SRC_SYSTEM_ENVIRONMENT_NAME <> '' AND TGT_SYSTEM_ENVIRONMENT_NAME<> '' AND SRC_TABLE_NAME<>'' AND TGT_TABLE_NAME<>'' AND SRC_COLUMN_NAME<> '' AND TGT_COLUMN_NAME <> ''   ;
						IF @exceptionstatus = 0
							SET @exceptionstatus = @@ERROR
						INSERT INTO MASTER_LINEAGE_GRAPH (TGT_KEY,TGT_SYSTEM_NAME,SRC_KEY,SRC_SYSTEM_NAME,MAP_SEQ_ID ,PROJ_ID,RELATION) SELECT DISTINCT SRC_SYSTEM_NAME,SRC_SYSTEM_NAME,TGT_SYSTEM_NAME,TGT_SYSTEM_NAME,MAP_SEQ_ID,PROJ_ID,'REVERSE' FROM MAPPING_SPEC_RECORDS_TO_SYNC WHERE SRC_SYSTEM_NAME <> '' AND TGT_SYSTEM_NAME <> ''  AND SRC_SYSTEM_ENVIRONMENT_NAME <> '' AND TGT_SYSTEM_ENVIRONMENT_NAME<> '' AND SRC_TABLE_NAME<>'' AND TGT_TABLE_NAME<>'' AND SRC_COLUMN_NAME<> '' AND TGT_COLUMN_NAME <> ''   ;     
						IF @exceptionstatus = 0
							SET @exceptionstatus = @@ERROR
						INSERT INTO MASTER_LINEAGE_GRAPH (SRC_KEY,SRC_SYSTEM_NAME,SRC_SYSTEM_ENVIRONMENT_NAME,TGT_KEY,TGT_SYSTEM_NAME,TGT_SYSTEM_ENVIRONMENT_NAME,MAP_SEQ_ID ,PROJ_ID,RELATION) SELECT DISTINCT CONCAT(SRC_SYSTEM_NAME,':',SRC_SYSTEM_ENVIRONMENT_NAME),SRC_SYSTEM_NAME,SRC_SYSTEM_ENVIRONMENT_NAME,CONCAT(TGT_SYSTEM_NAME,':',TGT_SYSTEM_ENVIRONMENT_NAME),TGT_SYSTEM_NAME,TGT_SYSTEM_ENVIRONMENT_NAME,MAP_SEQ_ID,PROJ_ID,'FORWARD' FROM MAPPING_SPEC_RECORDS_TO_SYNC WHERE SRC_SYSTEM_NAME <> '' AND TGT_SYSTEM_NAME <> ''  AND SRC_SYSTEM_ENVIRONMENT_NAME <> '' AND TGT_SYSTEM_ENVIRONMENT_NAME<> '' AND SRC_TABLE_NAME<>'' AND TGT_TABLE_NAME<>'' AND SRC_COLUMN_NAME<> '' AND TGT_COLUMN_NAME <> ''   ;   
						IF @exceptionstatus = 0
							SET @exceptionstatus = @@ERROR
						INSERT INTO MASTER_LINEAGE_GRAPH (TGT_KEY,TGT_SYSTEM_NAME,TGT_SYSTEM_ENVIRONMENT_NAME,SRC_KEY,SRC_SYSTEM_NAME,SRC_SYSTEM_ENVIRONMENT_NAME,MAP_SEQ_ID ,PROJ_ID,RELATION) SELECT DISTINCT CONCAT(SRC_SYSTEM_NAME,':',SRC_SYSTEM_ENVIRONMENT_NAME),SRC_SYSTEM_NAME,SRC_SYSTEM_ENVIRONMENT_NAME,CONCAT(TGT_SYSTEM_NAME,':',TGT_SYSTEM_ENVIRONMENT_NAME),TGT_SYSTEM_NAME,TGT_SYSTEM_ENVIRONMENT_NAME,MAP_SEQ_ID,PROJ_ID,'REVERSE' FROM MAPPING_SPEC_RECORDS_TO_SYNC WHERE SRC_SYSTEM_NAME <> '' AND TGT_SYSTEM_NAME <> ''  AND SRC_SYSTEM_ENVIRONMENT_NAME <> '' AND TGT_SYSTEM_ENVIRONMENT_NAME<> '' AND SRC_TABLE_NAME<>'' AND TGT_TABLE_NAME<>'' AND SRC_COLUMN_NAME<> '' AND TGT_COLUMN_NAME <> ''   ; 
						IF @exceptionstatus = 0
							SET @exceptionstatus = @@ERROR
						INSERT INTO MASTER_LINEAGE_GRAPH (SRC_KEY,SRC_SYSTEM_NAME,SRC_SYSTEM_ENVIRONMENT_NAME,SRC_TABLE_NAME,TGT_KEY,TGT_SYSTEM_NAME,TGT_SYSTEM_ENVIRONMENT_NAME,TGT_TABLE_NAME,MAP_SEQ_ID ,PROJ_ID,RELATION) 
							SELECT DISTINCT CONCAT(SRC_SYSTEM_NAME,':',SRC_SYSTEM_ENVIRONMENT_NAME,':',dbo.FN_GET_DECLPATH_FROM_XPATH(SRC_XPATH, SRC_TABLE_NAME, SRC_COLUMN_NAME, 'TABLE')) ,SRC_SYSTEM_NAME,SRC_SYSTEM_ENVIRONMENT_NAME,SRC_TABLE_NAME,CONCAT(TGT_SYSTEM_NAME,':',TGT_SYSTEM_ENVIRONMENT_NAME,':',dbo.FN_GET_DECLPATH_FROM_XPATH(TGT_XPATH, TGT_TABLE_NAME, TGT_COLUMN_NAME, 'TABLE')) ,TGT_SYSTEM_NAME,TGT_SYSTEM_ENVIRONMENT_NAME,TGT_TABLE_NAME,MAP_SEQ_ID,PROJ_ID,'FORWARD' FROM MAPPING_SPEC_RECORDS_TO_SYNC WHERE SRC_SYSTEM_NAME <> '' AND TGT_SYSTEM_NAME <> ''  AND SRC_SYSTEM_ENVIRONMENT_NAME <> '' AND TGT_SYSTEM_ENVIRONMENT_NAME<> '' AND SRC_TABLE_NAME<>'' AND TGT_TABLE_NAME<>'' AND SRC_COLUMN_NAME<> '' AND TGT_COLUMN_NAME <> '' ;
						IF @exceptionstatus = 0
							SET @exceptionstatus = @@ERROR
						INSERT INTO MASTER_LINEAGE_GRAPH (TGT_KEY,TGT_SYSTEM_NAME,TGT_SYSTEM_ENVIRONMENT_NAME,TGT_TABLE_NAME,SRC_KEY,SRC_SYSTEM_NAME,SRC_SYSTEM_ENVIRONMENT_NAME,SRC_TABLE_NAME,MAP_SEQ_ID ,PROJ_ID,RELATION) SELECT DISTINCT CONCAT(SRC_SYSTEM_NAME,':',SRC_SYSTEM_ENVIRONMENT_NAME,':',dbo.FN_GET_DECLPATH_FROM_XPATH(SRC_XPATH, SRC_TABLE_NAME, SRC_COLUMN_NAME, 'TABLE')) ,SRC_SYSTEM_NAME,SRC_SYSTEM_ENVIRONMENT_NAME,SRC_TABLE_NAME,CONCAT(TGT_SYSTEM_NAME,':',TGT_SYSTEM_ENVIRONMENT_NAME,':',dbo.FN_GET_DECLPATH_FROM_XPATH(TGT_XPATH, TGT_TABLE_NAME, TGT_COLUMN_NAME, 'TABLE')),TGT_SYSTEM_NAME,TGT_SYSTEM_ENVIRONMENT_NAME,TGT_TABLE_NAME,MAP_SEQ_ID,PROJ_ID,'REVERSE' FROM MAPPING_SPEC_RECORDS_TO_SYNC WHERE SRC_SYSTEM_NAME <> '' AND TGT_SYSTEM_NAME <> ''  AND SRC_SYSTEM_ENVIRONMENT_NAME <> '' AND TGT_SYSTEM_ENVIRONMENT_NAME<> '' AND SRC_TABLE_NAME<>'' AND TGT_TABLE_NAME<>'' AND SRC_COLUMN_NAME<> '' AND TGT_COLUMN_NAME <> ''  ;
						IF @exceptionstatus = 0
							SET @exceptionstatus = @@ERROR
						INSERT INTO MASTER_LINEAGE_GRAPH (SRC_KEY,SRC_SYSTEM_NAME,SRC_SYSTEM_ENVIRONMENT_NAME,SRC_TABLE_NAME,SRC_COLUMN_NAME,TGT_KEY,TGT_SYSTEM_NAME,TGT_SYSTEM_ENVIRONMENT_NAME,TGT_TABLE_NAME,TGT_COLUMN_NAME,MAP_SEQ_ID ,PROJ_ID,RELATION) SELECT DISTINCT CONCAT(SRC_SYSTEM_NAME,':',SRC_SYSTEM_ENVIRONMENT_NAME,':',dbo.FN_GET_DECLPATH_FROM_XPATH(SRC_XPATH, SRC_TABLE_NAME, SRC_COLUMN_NAME, 'COLUMN')),SRC_SYSTEM_NAME,SRC_SYSTEM_ENVIRONMENT_NAME,SRC_TABLE_NAME,SRC_COLUMN_NAME,CONCAT(TGT_SYSTEM_NAME,':',TGT_SYSTEM_ENVIRONMENT_NAME,':',dbo.FN_GET_DECLPATH_FROM_XPATH(TGT_XPATH, TGT_TABLE_NAME, TGT_COLUMN_NAME, 'COLUMN')),TGT_SYSTEM_NAME,TGT_SYSTEM_ENVIRONMENT_NAME,TGT_TABLE_NAME,TGT_COLUMN_NAME,MAP_SEQ_ID,PROJ_ID,'FORWARD' FROM MAPPING_SPEC_RECORDS_TO_SYNC WHERE SRC_SYSTEM_NAME <> '' AND TGT_SYSTEM_NAME <> ''  AND SRC_SYSTEM_ENVIRONMENT_NAME <> '' AND TGT_SYSTEM_ENVIRONMENT_NAME<> '' AND SRC_TABLE_NAME<>'' AND TGT_TABLE_NAME<>'' AND SRC_COLUMN_NAME<> '' AND TGT_COLUMN_NAME <> '' ;
						IF @exceptionstatus = 0
							SET @exceptionstatus = @@ERROR
						INSERT INTO MASTER_LINEAGE_GRAPH (TGT_KEY,TGT_SYSTEM_NAME,TGT_SYSTEM_ENVIRONMENT_NAME,TGT_TABLE_NAME,TGT_COLUMN_NAME,SRC_KEY,SRC_SYSTEM_NAME,SRC_SYSTEM_ENVIRONMENT_NAME,SRC_TABLE_NAME,SRC_COLUMN_NAME,MAP_SEQ_ID ,PROJ_ID,RELATION) SELECT DISTINCT CONCAT(SRC_SYSTEM_NAME,':',SRC_SYSTEM_ENVIRONMENT_NAME,':',dbo.FN_GET_DECLPATH_FROM_XPATH(SRC_XPATH, SRC_TABLE_NAME, SRC_COLUMN_NAME, 'COLUMN')),SRC_SYSTEM_NAME,SRC_SYSTEM_ENVIRONMENT_NAME,SRC_TABLE_NAME,SRC_COLUMN_NAME,CONCAT(TGT_SYSTEM_NAME,':',TGT_SYSTEM_ENVIRONMENT_NAME,':',dbo.FN_GET_DECLPATH_FROM_XPATH(TGT_XPATH, TGT_TABLE_NAME, TGT_COLUMN_NAME, 'COLUMN')),TGT_SYSTEM_NAME,TGT_SYSTEM_ENVIRONMENT_NAME,TGT_TABLE_NAME,TGT_COLUMN_NAME,MAP_SEQ_ID,PROJ_ID,'REVERSE' FROM MAPPING_SPEC_RECORDS_TO_SYNC WHERE SRC_SYSTEM_NAME <> '' AND TGT_SYSTEM_NAME <> ''  AND SRC_SYSTEM_ENVIRONMENT_NAME <> '' AND TGT_SYSTEM_ENVIRONMENT_NAME<> '' AND SRC_TABLE_NAME<>'' AND TGT_TABLE_NAME<>'' AND SRC_COLUMN_NAME<> '' AND TGT_COLUMN_NAME <> '' ;    
						IF @exceptionstatus = 0
							SET @exceptionstatus = @@ERROR
						UPDATE APP_PREFERENCES SET PREFERENCE_VALUE = (SELECT  CONVERT(VARCHAR, @UPD_SYNC_TIME ,121)) WHERE PREFERENCE_NAME='LAST_MAPPING_LINEAGE_SYNC_TIME' ;
						IF @exceptionstatus = 0
							SET @exceptionstatus = @@ERROR
					END;
					INSERT INTO TABLE_RECORDS_COUNT (TABLE_NAME,RECORDS_COUNT) VALUES('APPENDED_MAP_SPEC_RECORDS',(SELECT COUNT(*) FROM MASTER_LINEAGE_GRAPH)) ;
						IF @exceptionstatus = 0
							SET @exceptionstatus = @@ERROR
			END TRY
			BEGIN CATCH
				IF @@TRANCOUNT > 0 OR @exceptionstatus <> 0
					BEGIN
                                                PRINT ERROR_MESSAGE ();
						DROP TABLE #MAP_SEQ_IDS_TOSYNC;
						ROLLBACK TRAN
						IF @exceptionstatus = 0
							SET @exceptionstatus = @@ERROR
					END
			END CATCH
		IF @exceptionstatus <> 0  
			BEGIN  
                                PRINT ERROR_MESSAGE ();
				ROLLBACK  
				PRINT 'Transaction rolled back'
			END  
		ELSE  
			BEGIN  
				COMMIT 
				DROP TABLE #MAP_SEQ_IDS_TOSYNC;
				PRINT 'Transaction committed' 
			END;
		return @exceptionstatus;
	END
GO

IF NOT EXISTS(SELECT * FROM sys.indexes WHERE name = 'ADS_ASSOCIATIONS_SOURCE_OBJECT_ID_INDX' AND object_id = OBJECT_ID('ADS_ASSOCIATIONS'))
BEGIN
EXECUTE('CREATE INDEX ADS_ASSOCIATIONS_SOURCE_OBJECT_ID_INDX ON ADS_ASSOCIATIONS (SOURCE_OBJECT_ID)');
END
GO
IF NOT EXISTS(SELECT * FROM sys.indexes WHERE name = 'ADS_ASSOCIATIONS_SOURCE_OBJECT_TYPE_ID_INDX' AND object_id = OBJECT_ID('ADS_ASSOCIATIONS'))
BEGIN
EXECUTE('CREATE INDEX ADS_ASSOCIATIONS_SOURCE_OBJECT_TYPE_ID_INDX ON ADS_ASSOCIATIONS (SOURCE_OBJECT_TYPE_ID)');
END
GO
IF NOT EXISTS(SELECT * FROM sys.indexes WHERE name = 'ADS_ASSOCIATIONS_TARGET_OBJECT_TYPE_ID_INDX' AND object_id = OBJECT_ID('ADS_ASSOCIATIONS'))
BEGIN
EXECUTE('CREATE INDEX ADS_ASSOCIATIONS_TARGET_OBJECT_TYPE_ID_INDX ON ADS_ASSOCIATIONS (TARGET_OBJECT_TYPE_ID)');
END
GO
IF NOT EXISTS(SELECT * FROM sys.indexes WHERE name = 'ADS_ASSOCIATIONS_TARGET_OBJECT_ID_INDX' AND object_id = OBJECT_ID('ADS_ASSOCIATIONS'))
BEGIN
EXECUTE('CREATE INDEX ADS_ASSOCIATIONS_TARGET_OBJECT_ID_INDX ON ADS_ASSOCIATIONS (TARGET_OBJECT_ID)');
END
GO
IF NOT EXISTS(SELECT * FROM sys.indexes WHERE name = 'ADS_ASSOCIATIONS_RELATIONSHIP_DETAIL_ID_INDX' AND object_id = OBJECT_ID('ADS_ASSOCIATIONS'))
BEGIN
EXECUTE('CREATE INDEX ADS_ASSOCIATIONS_RELATIONSHIP_DETAIL_ID_INDX ON ADS_ASSOCIATIONS (RELATIONSHIP_DETAIL_ID)');
END
GO
IF NOT EXISTS(SELECT * FROM sys.indexes WHERE name = 'ADS_KEY_VALUE_OBJECT_ID_INDX' AND object_id = OBJECT_ID('ADS_KEY_VALUE'))
BEGIN
EXECUTE('CREATE INDEX ADS_KEY_VALUE_OBJECT_ID_INDX ON ADS_KEY_VALUE (OBJECT_ID)');
END
GO
IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'SYSTEM_TABLE_METADATA' AND COLUMN_NAME = 'DECLARATION_PATH' AND DATA_TYPE = 'varchar' and CHARACTER_MAXIMUM_LENGTH = -1)
    BEGIN 
        EXEC('ALTER TABLE SYSTEM_TABLE_METADATA ALTER COLUMN DECLARATION_PATH varchar(4000)');
        EXEC('CREATE INDEX STM_SCE_ID_DECLA_PATH_INDX ON SYSTEM_TABLE_METADATA(SCE_ID, DECLARATION_PATH)');
    END
GO
IF NOT EXISTS(SELECT * FROM sys.indexes WHERE name = 'SYSTEM_TABLE_COLUMNS_METADATA_SCE_ID_VALID' AND object_id = OBJECT_ID('SYSTEM_TABLE_COLUMNS_METADATA'))
BEGIN
EXECUTE('CREATE INDEX SYSTEM_TABLE_COLUMNS_METADATA_SCE_ID_VALID ON SYSTEM_TABLE_COLUMNS_METADATA (SCE_ID ASC, VALID ASC)');
END
GO
IF NOT EXISTS(SELECT * FROM sys.indexes WHERE name = 'SYSTEM_TABLE_COLUMNS_METADATA_SCE_ID_VALID_SYSTEM_ID' AND object_id = OBJECT_ID('SYSTEM_TABLE_COLUMNS_METADATA'))
BEGIN
EXECUTE('CREATE INDEX SYSTEM_TABLE_COLUMNS_METADATA_SCE_ID_VALID_SYSTEM_ID ON SYSTEM_TABLE_COLUMNS_METADATA (SCE_ID ASC, VALID ASC, SYSTEM_ID ASC)');
END
GO
IF NOT EXISTS(SELECT * FROM sys.indexes WHERE name = 'PK_DIS_RD_ID' AND object_id = OBJECT_ID('RELATIONSHIP_DETAILS'))
BEGIN
EXECUTE('ALTER TABLE RELATIONSHIP_DETAILS ADD CONSTRAINT PK_DIS_RD_ID PRIMARY KEY (RD_ID)');
END
GO
IF NOT EXISTS(SELECT * FROM sys.indexes WHERE name = 'BG_CATEGORIES_PARENT_ID_INDX' AND object_id = OBJECT_ID('BG_CATEGORIES'))
BEGIN
EXECUTE('CREATE INDEX BG_CATEGORIES_PARENT_ID_INDX ON BG_CATEGORIES (PARENT_CATEGORY_ID)');
END
GO
IF NOT EXISTS (SELECT * FROM ADS_KEY_VALUE_OBJECTS WHERE  OBJECT_TYPE = 'BGM_METADATA_AI_MATCH_SCHEDULE')
BEGIN
    INSERT INTO ADS_KEY_VALUE_OBJECTS (OBJECT_TYPE,OBJECT_TABLE,OBJECT_TABLE_COLUMN,OBJECT_PARENT_TYPE,OBJECT_PARENT_COLUMN_ID,OBJECT_LEVEL,MODULE_KEY,SYSTEM_BASED,OBJECT_TITLE)
    SELECT 'BGM_METADATA_AI_MATCH_SCHEDULE','BGM_METADATA_AI_MATCH_SCHEDULE','','','','1','com.ads.mm.permission.generic','1','BGM_METADATA_AI_MATCH_SCHEDULE'
END
GO
IF NOT EXISTS(SELECT * FROM APP_PREFERENCES WHERE PREFERENCE_NAME = 'SEND_EMAIL_ON_BGM_METADATA_AI_MATCH_SCHEDULE_JOB_EXECUTED')
BEGIN
    INSERT INTO APP_PREFERENCES(PREFERENCE_NAME,PREFERENCE_VALUE) VALUES ('SEND_EMAIL_ON_BGM_METADATA_AI_MATCH_SCHEDULE_JOB_EXECUTED','true');
    INSERT INTO APP_PREFERENCES(PREFERENCE_NAME,PREFERENCE_VALUE) VALUES ('SEND_EMAIL_ON_BGM_METADATA_AI_MATCH_SCHEDULE_JOB_EXECUTED_SUBJECT','@Name@ Job Execution Details - DO NOT REPLY')
    INSERT INTO APP_PREFERENCES(PREFERENCE_NAME,PREFERENCE_VALUE) VALUES ('SEND_EMAIL_ON_BGM_METADATA_AI_MATCH_SCHEDULE_JOB_EXECUTED_MESSAGE','Hi,<br>This is a system generated email notification.<br> <br> <b>@executionMessage@</b><br><br><I><font color =red>Note</font> This is an auto generated email notification and this mailbox is not monitored.<BR>Please do not reply to this email.</I>');
END
GO
IF NOT EXISTS (SELECT *  FROM   SYSOBJECTS WHERE  ID = OBJECT_ID(N'BGM_METADATA_AI_MATCH_CONFIG') AND TYPE = 'U')
  BEGIN
      EXECUTE ('
   CREATE TABLE BGM_METADATA_AI_MATCH_CONFIG
   (MATCH_CONFIG_ID BIGINT  IDENTITY(1,1) NOT NULL,
    SOURCE_OBJECT_ID bigint NOT NULL,
    SOURCE_OBJECT_TYPE_ID bigint NOT NULL,
    TARGET_OBJECT_ID bigint NOT NULL,
    TARGET_OBJECT_TYPE_ID bigint NOT NULL,
    SCOPE_TYPE CHAR(1) NOT NULL,
    CONSTRAINT PK_BGM_METADATA_AI_MATCH_CONFIG_ID PRIMARY KEY(MATCH_CONFIG_ID))'
    );
END
GO
IF NOT EXISTS (SELECT *  FROM   SYSOBJECTS WHERE  ID = OBJECT_ID(N'BGM_METADATA_AI_MATCH_RESULT') AND TYPE = 'U')
  BEGIN
      EXECUTE ('
   CREATE TABLE BGM_METADATA_AI_MATCH_RESULT
   (MATCH_RESULT_ID BIGINT  IDENTITY(1,1) NOT NULL,
    SOURCE_OBJECT_ID bigint NOT NULL ,
    SOURCE_OBJECT_TYPE_ID bigint NOT NULL ,
    TARGET_OBJECT_ID bigint NOT NULL ,
    TARGET_OBJECT_TYPE_ID bigint NOT NULL ,
    CONSTRAINT PK_BGM_METADATA_AI_MATCH_RESULT_ID PRIMARY KEY(MATCH_RESULT_ID))'
    );
END
GO
IF COL_LENGTH('BUSINESS_TERMS' ,'AI_METADATA_MATCH_STATUS') IS NULL
BEGIN
    EXECUTE('ALTER TABLE BUSINESS_TERMS ADD  AI_METADATA_MATCH_STATUS INT DEFAULT 0 NULL');
    EXECUTE('UPDATE BUSINESS_TERMS SET AI_METADATA_MATCH_STATUS = ''0'' WHERE AI_METADATA_MATCH_STATUS IS NULL');
END
GO
IF EXISTS (SELECT * FROM MAPPING_STATUS WHERE STATUS = 'InProgress' AND RESPONSIABLES = 'Mapping Designer')
    BEGIN
        EXECUTE('UPDATE MAPPING_STATUS SET STATUS = ''In Progress'' WHERE STATUS = ''InProgress'' AND RESPONSIABLES = ''Mapping Designer''');
    END
GO
IF EXISTS (SELECT * FROM ADS_MM_VERSION WHERE VALUE <= '9.4')
BEGIN
    EXECUTE('ALTER TABLE ADS_MM_VERSION ADD TEMP_VALUE FLOAT NULL');
    EXECUTE('ALTER TABLE ADS_MM_VERSION DROP COLUMN VALUE');
    EXECUTE SYS.SP_RENAME @OBJNAME = N'[ADS_MM_VERSION].[TEMP_VALUE]', @NEWNAME = N'VALUE', @OBJTYPE = 'COLUMN'
    EXECUTE('UPDATE ADS_MM_VERSION SET VALUE = 10.0');
END
GO
IF COL_LENGTH('BUSINESS_TERMS', 'SDI_FLAG') IS NULL
BEGIN
    EXECUTE('ALTER TABLE BG_POLICIES ADD SDI_FLAG char(1) NULL DEFAULT ''N''');
    EXECUTE('ALTER TABLE BG_POLICIES ADD SDI_DESCRIPTION varchar(max) NULL');
    EXECUTE('ALTER TABLE BG_POLICIES ADD SDI_CLASS_ID bigint NULL');
    EXECUTE('ALTER TABLE BUSINESS_TERMS ADD SDI_FLAG char(1) NULL DEFAULT ''N''');
    EXECUTE('ALTER TABLE BUSINESS_TERMS ADD SDI_DESCRIPTION varchar(max) NULL');
    EXECUTE('ALTER TABLE BUSINESS_TERMS ADD SDI_CLASS_ID bigint NULL');
    EXECUTE('ALTER TABLE BG_BUSINESS_RULES ADD SDI_FLAG char(1) NULL DEFAULT ''N''');
    EXECUTE('ALTER TABLE BG_BUSINESS_RULES ADD SDI_DESCRIPTION varchar(max) NULL');
    EXECUTE('ALTER TABLE BG_BUSINESS_RULES ADD SDI_CLASS_ID bigint NULL');
    EXECUTE('ALTER TABLE BG_CUSTOM_OBJECTS ADD DEFINITION varchar(max) NULL');
    EXECUTE('ALTER TABLE BG_CUSTOM_OBJECTS ADD SDI_FLAG char(1) NULL DEFAULT ''N''');
    EXECUTE('ALTER TABLE BG_CUSTOM_OBJECTS ADD SDI_DESCRIPTION varchar(max) NULL');
    EXECUTE('ALTER TABLE BG_CUSTOM_OBJECTS ADD SDI_CLASS_ID bigint NULL');
    EXECUTE('ALTER TABLE BG_CUSTOM_TYPES ADD DEFINITION_ENABLED char(1) NOT NULL DEFAULT 1');
    EXECUTE('ALTER TABLE BG_CUSTOM_TYPES ADD SDI_ENABLED char(1)  NULL DEFAULT 0');
    EXECUTE('UPDATE BG_CUSTOM_TYPES SET SDI_ENABLED = 1 WHERE OBJECT_TYPE_ID IN (SELECT OBJECT_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE = ''BGM_TERM'')');
    EXECUTE ('ALTER TABLE BG_CUSTOM_TYPES ADD CUSTOM_TYPE BIT DEFAULT 1 NOT NULL');
    EXECUTE ('UPDATE BG_CUSTOM_TYPES SET CUSTOM_TYPE = 0 WHERE SYSTEM_BASED = 1');
END
GO
IF COL_LENGTH('SYSTEM_TABLE_METADATA', 'SDI_FLAG') IS NULL
BEGIN
    EXECUTE('ALTER TABLE SYSTEM_TABLE_METADATA ADD SDI_FLAG char(1) NULL DEFAULT ''N''');
    EXECUTE('ALTER TABLE SYSTEM_TABLE_METADATA ADD SDI_DESCRIPTION varchar(max) NULL');
    EXECUTE('ALTER TABLE SYSTEM_TABLE_METADATA ADD SDI_CLASS_ID bigint NULL');
    EXECUTE('ALTER TABLE SYS_CON_ENVIRONMENTS ADD SDI_FLAG char(1) NULL DEFAULT ''N''');
    EXECUTE('ALTER TABLE SYS_CON_ENVIRONMENTS ADD SDI_DESCRIPTION varchar(max) NULL');
    EXECUTE('ALTER TABLE SYS_CON_ENVIRONMENTS ADD SDI_CLASS_ID bigint NULL');
    EXECUTE('ALTER TABLE SYSTEM_DEFINITION_DETAILS ADD SDI_FLAG char(1) NULL DEFAULT ''N''');
    EXECUTE('ALTER TABLE SYSTEM_DEFINITION_DETAILS ADD SDI_DESCRIPTION varchar(max) NULL');
    EXECUTE('ALTER TABLE SYSTEM_DEFINITION_DETAILS ADD SDI_CLASS_ID bigint NULL');
END
GO
BEGIN
   EXEC ('ALTER VIEW ACTIVE_SYS_CON_ENVIRONMENTS
 AS
   SELECT * FROM   SYS_CON_ENVIRONMENTS WHERE  STATUS = ''ACTIVE''');
END
GO
ALTER VIEW [VALID_SYSTEM_TABLE_METADATA]
AS
SELECT STM.* FROM SYSTEM_TABLE_METADATA STM JOIN ACTIVE_SYS_CON_ENVIRONMENTS SCS ON STM.SCE_ID = SCS.SCE_ID WHERE STM.VALID = 1 OR STM.VALID IS NULL
GO
IF EXISTS(SELECT * FROM APP_PREFERENCES WHERE PREFERENCE_NAME = 'SYSTEM_OBJECT_COLOR')
    BEGIN
        UPDATE APP_PREFERENCES SET PREFERENCE_NAME = 'SM_SYSTEM_PREFERENCE',PREFERENCE_VALUE=(SELECT PREFERENCE_VALUE+'`'+'Systems' FROM APP_PREFERENCES WHERE PREFERENCE_NAME = 'SYSTEM_OBJECT_COLOR') WHERE PREFERENCE_NAME = 'SYSTEM_OBJECT_COLOR';
        UPDATE APP_PREFERENCES SET PREFERENCE_NAME = 'SM_ENVIRONMENT_PREFERENCE',PREFERENCE_VALUE=(SELECT PREFERENCE_VALUE+'`'+'Environments' FROM APP_PREFERENCES WHERE PREFERENCE_NAME = 'ENVIRONMENT_OBJECT_COLOR') WHERE PREFERENCE_NAME = 'ENVIRONMENT_OBJECT_COLOR';
        UPDATE APP_PREFERENCES SET PREFERENCE_NAME = 'SM_TABLE_PREFERENCE',PREFERENCE_VALUE=(SELECT PREFERENCE_VALUE+'`'+'Tables' FROM APP_PREFERENCES WHERE PREFERENCE_NAME = 'TABLE_OBJECT_COLOR') WHERE PREFERENCE_NAME = 'TABLE_OBJECT_COLOR';
        UPDATE APP_PREFERENCES SET PREFERENCE_NAME = 'SM_COLUMN_PREFERENCE',PREFERENCE_VALUE=(SELECT PREFERENCE_VALUE+'`'+'Columns' FROM APP_PREFERENCES WHERE PREFERENCE_NAME = 'COLUMN_OBJECT_COLOR') WHERE PREFERENCE_NAME = 'COLUMN_OBJECT_COLOR';
    END
GO
IF NOT EXISTS (SELECT * FROM APP_PREFERENCES WHERE  PREFERENCE_NAME = 'SM_SYSTEM_PREFERENCE')
BEGIN
    EXECUTE ('INSERT INTO APP_PREFERENCES(PREFERENCE_NAME,PREFERENCE_VALUE) VALUES (''SM_SYSTEM_PREFERENCE'',''#26276D`Systems'')');
    EXECUTE ('INSERT INTO APP_PREFERENCES(PREFERENCE_NAME,PREFERENCE_VALUE) VALUES (''SM_ENVIRONMENT_PREFERENCE'',''#F6C65B`Environments'')');
    EXECUTE ('INSERT INTO APP_PREFERENCES(PREFERENCE_NAME,PREFERENCE_VALUE) VALUES (''SM_TABLE_PREFERENCE'',''#F79548`Tables'')');
    EXECUTE ('INSERT INTO APP_PREFERENCES(PREFERENCE_NAME,PREFERENCE_VALUE) VALUES (''SM_COLUMN_PREFERENCE'',''#92d050`Columns'')');
END
GO
IF EXISTS (SELECT * FROM SYS.OBJECTS WHERE OBJECT_ID = OBJECT_ID(N'[FN_MINDMAP_OBJ_COUNT]') AND TYPE IN (N'FN', N'IF', N'TF', N'FS', N'FT'))
BEGIN
    DROP FUNCTION [FN_MINDMAP_OBJ_COUNT]
END
GO
CREATE FUNCTION [FN_MINDMAP_OBJ_COUNT](@SRC_OBJECT_ID BIGINT,
 @SRC_OBJECT_TYPE_ID BIGINT,
 @MASTER_ACCESS BIGINT,
 @USER_ID VARCHAR(20))
    RETURNS @Data TABLE(OBJ_COUNT BIGINT) AS
    BEGIN
        DECLARE @RET_OBJ_COUNT BIGINT = 0;
        DECLARE @USER_OBJ_TYPE_ID VARCHAR(20);
        DECLARE @ROLE_OBJ_TYPE_ID VARCHAR(20);
        DECLARE @SM_ENVIRONMENT_OBJ_TYPE_ID VARCHAR(20); 
        SET @USER_OBJ_TYPE_ID = (SELECT object_type_id FROM ads_key_value_objects WHERE object_type = 'ADS_USER'); 
        SET @ROLE_OBJ_TYPE_ID = (SELECT OBJECT_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE = 'ADS_SECURITY_ROLE'); 
        SET @SM_ENVIRONMENT_OBJ_TYPE_ID = (SELECT object_type_id FROM ads_key_value_objects WHERE object_type = 'SM_ENVIRONMENT');
        WITH bo_cte AS (SELECT category_id, parent_category_id, category_id root_category_id FROM bg_categories bc WHERE parent_category_id = -1 
        AND ( 1 = @MASTER_ACCESS OR EXISTS (SELECT 1 FROM ads_object_to_object_scope aotos WHERE aotos.object_id = bc.category_id AND 
        aotos.object_type_id = bc.object_type_id AND ((aotos.scope_object_type_id = @USER_OBJ_TYPE_ID AND aotos.scope_object_id = @USER_ID) 
        OR (aotos.scope_object_type_id = @ROLE_OBJ_TYPE_ID AND aotos.scope_object_id IN (SELECT ROLE_ID FROM USER_ASSIGNED_ROLES WHERE USER_ID = @USER_ID)))) ) 
        UNION ALL SELECT T.category_id, T.parent_category_id, bo_cte.root_category_id FROM bg_categories AS T INNER JOIN bo_cte 
        ON bo_cte.category_id = T.parent_category_id), bo as(SELECT 'BGM_TERM' OBJECT_TYPE, Count(*) BOJ_COUNT FROM ads_associations 
        JOIN business_terms ON bus_term_id = source_object_id WHERE source_object_type_id = (SELECT object_type_id FROM ads_key_value_objects 
        WHERE object_type = 'BGM_TERM') AND target_object_id = @SRC_OBJECT_ID AND target_object_type_id = @SRC_OBJECT_TYPE_ID AND category_id 
        IN (SELECT category_id FROM bo_cte) union all
        SELECT 'BGM_TERM' OBJECT_TYPE, Count(*) BOJ_COUNT FROM ads_associations JOIN business_terms ON bus_term_id = target_object_id WHERE target_object_type_id = (SELECT object_type_id FROM ads_key_value_objects WHERE object_type = 'BGM_TERM') AND source_object_id = @SRC_OBJECT_ID AND source_object_type_id = @SRC_OBJECT_TYPE_ID AND category_id IN (SELECT category_id FROM bo_cte) 
        union all
        SELECT 'SM_COLUMN' 
        OBJECT_TYPE, COUNT(*) BOJ_COUNT FROM ADS_ASSOCIATIONS JOIN VALID_SYS_TBL_COL_METADATA 
        ON TARGET_OBJECT_ID = STCM_ID WHERE TARGET_OBJECT_TYPE_ID = 
        (SELECT OBJECT_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE = 'SM_COLUMN')
        AND SOURCE_OBJECT_ID = @SRC_OBJECT_ID AND SOURCE_OBJECT_TYPE_ID = @SRC_OBJECT_TYPE_ID 
        AND ( 1 = @MASTER_ACCESS OR SCE_ID IN (SELECT AOTS.OBJECT_ID FROM ADS_OBJECT_TO_OBJECT_SCOPE 
        AOTS WHERE AOTS.OBJECT_TYPE_ID = @SM_ENVIRONMENT_OBJ_TYPE_ID AND 
        ((AOTS.SCOPE_OBJECT_TYPE_ID = @USER_OBJ_TYPE_ID AND AOTS.SCOPE_OBJECT_ID = @USER_ID) OR 
        (AOTS.SCOPE_OBJECT_TYPE_ID = @ROLE_OBJ_TYPE_ID AND AOTS.SCOPE_OBJECT_ID IN 
        (SELECT ROLE_ID FROM USER_ASSIGNED_ROLES WHERE USER_ID = @USER_ID)))) )
        UNION ALL SELECT 'SM_TABLE' OBJECT_TYPE, COUNT(*) BOJ_COUNT 
        FROM ADS_ASSOCIATIONS JOIN VALID_SYSTEM_TABLE_METADATA ON STM_ID = TARGET_OBJECT_ID
        WHERE TARGET_OBJECT_TYPE_ID = (SELECT OBJECT_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE  = 'SM_TABLE') AND SOURCE_OBJECT_ID = @SRC_OBJECT_ID AND SOURCE_OBJECT_TYPE_ID = @SRC_OBJECT_TYPE_ID AND ( 1 = @MASTER_ACCESS OR SCE_ID IN 
        (SELECT AOTS.OBJECT_ID FROM ADS_OBJECT_TO_OBJECT_SCOPE AOTS WHERE AOTS.OBJECT_TYPE_ID = @SM_ENVIRONMENT_OBJ_TYPE_ID AND ((AOTS.SCOPE_OBJECT_TYPE_ID = @USER_OBJ_TYPE_ID AND
        AOTS.SCOPE_OBJECT_ID = @USER_ID) OR (AOTS.SCOPE_OBJECT_TYPE_ID = @ROLE_OBJ_TYPE_ID AND AOTS.SCOPE_OBJECT_ID IN (SELECT ROLE_ID FROM USER_ASSIGNED_ROLES WHERE USER_ID = @USER_ID)))) )
        UNION ALL
        SELECT 'SM_ENVIRONMENT' OBJECT_TYPE, COUNT(*) BOJ_COUNT FROM ADS_ASSOCIATIONS JOIN ACTIVE_SYS_CON_ENVIRONMENTS ON SCE_ID = TARGET_OBJECT_ID WHERE TARGET_OBJECT_TYPE_ID = (SELECT OBJECT_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE = 'SM_ENVIRONMENT') AND SOURCE_OBJECT_ID = @SRC_OBJECT_ID AND SOURCE_OBJECT_TYPE_ID = @SRC_OBJECT_TYPE_ID AND
        ( 1 = @MASTER_ACCESS OR TARGET_OBJECT_ID IN (SELECT AOTS.OBJECT_ID FROM ADS_OBJECT_TO_OBJECT_SCOPE AOTS WHERE AOTS.OBJECT_TYPE_ID = @SM_ENVIRONMENT_OBJ_TYPE_ID AND ((AOTS.SCOPE_OBJECT_TYPE_ID = @USER_OBJ_TYPE_ID AND AOTS.SCOPE_OBJECT_ID = @USER_ID) OR (AOTS.SCOPE_OBJECT_TYPE_ID = @ROLE_OBJ_TYPE_ID AND AOTS.SCOPE_OBJECT_ID IN (SELECT ROLE_ID FROM USER_ASSIGNED_ROLES WHERE USER_ID = @USER_ID)))) )
        UNION ALL
        SELECT 'SM_SYSTEM' OBJECT_TYPE, COUNT(*) BOJ_COUNT FROM ADS_ASSOCIATIONS WHERE TARGET_OBJECT_TYPE_ID = (SELECT OBJECT_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE = 'SM_SYSTEM') AND SOURCE_OBJECT_ID = @SRC_OBJECT_ID AND SOURCE_OBJECT_TYPE_ID = @SRC_OBJECT_TYPE_ID 
        UNION ALL
        SELECT 'BGM_POLICY' OBJECT_TYPE, COUNT(*) BOJ_COUNT FROM ADS_ASSOCIATIONS JOIN BG_POLICIES BP ON BP.ID = TARGET_OBJECT_ID WHERE TARGET_OBJECT_TYPE_ID = (SELECT OBJECT_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE = 'BGM_POLICY') AND SOURCE_OBJECT_ID = @SRC_OBJECT_ID AND SOURCE_OBJECT_TYPE_ID = @SRC_OBJECT_TYPE_ID AND CATALOG_ID IN (SELECT CATEGORY_ID FROM BO_CTE)
        UNION ALL
        SELECT 'BGM_RULE' OBJECT_TYPE, COUNT(*) BOJ_COUNT FROM ADS_ASSOCIATIONS JOIN BG_BUSINESS_RULES BBR ON BBR.ID = TARGET_OBJECT_ID WHERE TARGET_OBJECT_TYPE_ID = (SELECT OBJECT_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE = 'BGM_RULE') AND SOURCE_OBJECT_ID = @SRC_OBJECT_ID AND SOURCE_OBJECT_TYPE_ID = @SRC_OBJECT_TYPE_ID AND CATALOG_ID IN (SELECT CATEGORY_ID FROM BO_CTE)
        UNION ALL
        SELECT BCT.NAME OBJECT_TYPE, COUNT(*) BOJ_COUNT FROM ADS_ASSOCIATIONS AA JOIN BG_CUSTOM_TYPES BCT ON TARGET_OBJECT_TYPE_ID = BCT.OBJECT_TYPE_ID JOIN BG_CUSTOM_OBJECTS BCO ON BCO.ID = TARGET_OBJECT_ID WHERE SOURCE_OBJECT_ID = @SRC_OBJECT_ID AND SOURCE_OBJECT_TYPE_ID = @SRC_OBJECT_TYPE_ID AND CUSTOM_TYPE = 1 AND BCO.CATEGORY_ID IN (SELECT CATEGORY_ID FROM BO_CTE) GROUP BY BCT.NAME
        UNION ALL
        SELECT 'SM_COLUMN' OBJECT_TYPE, COUNT(*) BOJ_COUNT FROM ADS_ASSOCIATIONS JOIN VALID_SYS_TBL_COL_METADATA ON STCM_ID = SOURCE_OBJECT_ID WHERE SOURCE_OBJECT_TYPE_ID = (SELECT OBJECT_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE = 'SM_COLUMN') AND TARGET_OBJECT_ID = @SRC_OBJECT_ID AND TARGET_OBJECT_TYPE_ID = @SRC_OBJECT_TYPE_ID AND ( 1 = @MASTER_ACCESS OR SCE_ID IN (SELECT AOTS.OBJECT_ID FROM ADS_OBJECT_TO_OBJECT_SCOPE AOTS WHERE AOTS.OBJECT_TYPE_ID = @SM_ENVIRONMENT_OBJ_TYPE_ID AND ((AOTS.SCOPE_OBJECT_TYPE_ID = @USER_OBJ_TYPE_ID AND AOTS.SCOPE_OBJECT_ID = @USER_ID) OR (AOTS.SCOPE_OBJECT_TYPE_ID = @ROLE_OBJ_TYPE_ID AND AOTS.SCOPE_OBJECT_ID IN (SELECT ROLE_ID FROM USER_ASSIGNED_ROLES WHERE USER_ID = @USER_ID)))) )
        UNION ALL
        SELECT 'SM_TABLE' OBJECT_TYPE, COUNT(*) BOJ_COUNT FROM ADS_ASSOCIATIONS JOIN VALID_SYSTEM_TABLE_METADATA ON STM_ID = SOURCE_OBJECT_ID WHERE SOURCE_OBJECT_TYPE_ID = (SELECT OBJECT_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE = 'SM_TABLE') AND TARGET_OBJECT_ID = @SRC_OBJECT_ID AND TARGET_OBJECT_TYPE_ID = @SRC_OBJECT_TYPE_ID AND ( 1 = @MASTER_ACCESS OR SCE_ID IN (SELECT AOTS.OBJECT_ID FROM ADS_OBJECT_TO_OBJECT_SCOPE AOTS WHERE AOTS.OBJECT_TYPE_ID = @SM_ENVIRONMENT_OBJ_TYPE_ID AND ((AOTS.SCOPE_OBJECT_TYPE_ID = @USER_OBJ_TYPE_ID AND AOTS.SCOPE_OBJECT_ID = @USER_ID) OR (AOTS.SCOPE_OBJECT_TYPE_ID = @ROLE_OBJ_TYPE_ID AND AOTS.SCOPE_OBJECT_ID IN (SELECT ROLE_ID FROM USER_ASSIGNED_ROLES WHERE USER_ID = @USER_ID)))) )
        UNION ALL
        SELECT 'SM_ENVIRONMENT' OBJECT_TYPE, COUNT(*) BOJ_COUNT FROM ADS_ASSOCIATIONS JOIN ACTIVE_SYS_CON_ENVIRONMENTS ON SCE_ID = SOURCE_OBJECT_ID WHERE SOURCE_OBJECT_TYPE_ID = (SELECT OBJECT_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE = 'SM_ENVIRONMENT') AND TARGET_OBJECT_ID = @SRC_OBJECT_ID AND TARGET_OBJECT_TYPE_ID = @SRC_OBJECT_TYPE_ID AND ( 1 = @MASTER_ACCESS OR SOURCE_OBJECT_ID IN (SELECT AOTS.OBJECT_ID FROM ADS_OBJECT_TO_OBJECT_SCOPE AOTS WHERE AOTS.OBJECT_TYPE_ID = @SM_ENVIRONMENT_OBJ_TYPE_ID AND ((AOTS.SCOPE_OBJECT_TYPE_ID = @USER_OBJ_TYPE_ID AND AOTS.SCOPE_OBJECT_ID = @USER_ID) OR (AOTS.SCOPE_OBJECT_TYPE_ID = @ROLE_OBJ_TYPE_ID AND AOTS.SCOPE_OBJECT_ID IN (SELECT ROLE_ID FROM USER_ASSIGNED_ROLES WHERE USER_ID = @USER_ID)))) )
        UNION ALL
        SELECT 'SM_SYSTEM' OBJECT_TYPE, COUNT(*) BOJ_COUNT FROM ADS_ASSOCIATIONS WHERE SOURCE_OBJECT_TYPE_ID = (SELECT OBJECT_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE = 'SM_SYSTEM') AND TARGET_OBJECT_ID = @SRC_OBJECT_ID AND TARGET_OBJECT_TYPE_ID = @SRC_OBJECT_TYPE_ID 
        UNION ALL
        SELECT BCT.NAME OBJECT_TYPE, COUNT(*) BOJ_COUNT FROM ADS_ASSOCIATIONS AA JOIN BG_CUSTOM_TYPES BCT ON SOURCE_OBJECT_TYPE_ID = BCT.OBJECT_TYPE_ID JOIN BG_CUSTOM_OBJECTS BCO ON BCO.ID = SOURCE_OBJECT_ID WHERE TARGET_OBJECT_ID = @SRC_OBJECT_ID AND TARGET_OBJECT_TYPE_ID = @SRC_OBJECT_TYPE_ID AND CUSTOM_TYPE = 1 AND CATEGORY_ID IN (SELECT CATEGORY_ID FROM BO_CTE) GROUP BY BCT.NAME 
        UNION ALL
        SELECT 'BGM_POLICY' OBJECT_TYPE, COUNT(*) POLICY_COUNT FROM ADS_ASSOCIATIONS JOIN BG_POLICIES BP ON BP.ID = SOURCE_OBJECT_ID WHERE SOURCE_OBJECT_TYPE_ID = (SELECT OBJECT_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE = 'BGM_POLICY') AND TARGET_OBJECT_ID = @SRC_OBJECT_ID AND TARGET_OBJECT_TYPE_ID = @SRC_OBJECT_TYPE_ID AND CATALOG_ID IN (SELECT CATEGORY_ID FROM BO_CTE)
        UNION ALL
        SELECT 'BGM_RULE' OBJECT_TYPE, COUNT(*) RULE_COUNT FROM ADS_ASSOCIATIONS JOIN BG_BUSINESS_RULES BBR ON BBR.ID = SOURCE_OBJECT_ID WHERE SOURCE_OBJECT_TYPE_ID = (SELECT OBJECT_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE = 'BGM_RULE') AND TARGET_OBJECT_ID = @SRC_OBJECT_ID AND TARGET_OBJECT_TYPE_ID = @SRC_OBJECT_TYPE_ID AND CATALOG_ID IN (SELECT CATEGORY_ID FROM BO_CTE)
        )
        INSERT @Data(OBJ_COUNT)  select  SUM(bo.BOJ_COUNT) BOJ_COUNT from bo;
    RETURN
END
GO
IF (OBJECTPROPERTY(OBJECT_ID(N'[GET_RELATIONSHIP_MINDMAP_PROC]'),N'IsProcedure') = 1)
BEGIN
    DROP PROCEDURE GET_RELATIONSHIP_MINDMAP_PROC
END
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE type = 'P' AND name = 'GET_RELATIONSHIP_MINDMAP_PROC')
      exec('CREATE PROCEDURE [GET_RELATIONSHIP_MINDMAP_PROC](
            @OBJECT_TYPE_ID   BIGINT,
            @OBJECT_ID    BIGINT,
            @MASTER_ACCESS BIGINT,
            @USER_ID VARCHAR(20),
            @WITH_COUNT INT
            )
         AS
         BEGIN
	    DECLARE  @CO_OBJECT_TYPE_ID int = 0;
            DECLARE  @COUNTER BIGINT = 0;
            DECLARE @ID BIGINT;
            DECLARE @TYPEID BIGINT;
            DECLARE @ROWNUMBER BIGINT;

            DECLARE @USER_OBJ_TYPE_ID VARCHAR(20);
			DECLARE @ROLE_OBJ_TYPE_ID VARCHAR(20);
            SET @USER_OBJ_TYPE_ID = (SELECT OBJECT_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE = ''ADS_USER'');
			SET @ROLE_OBJ_TYPE_ID = (SELECT OBJECT_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE = ''ADS_SECURITY_ROLE'');
            IF EXISTS(SELECT OBJECT_TYPE_ID  FROM bg_custom_types WHERE OBJECT_TYPE_ID = @OBJECT_TYPE_ID)
            BEGIN
                SET @CO_OBJECT_TYPE_ID  = (SELECT OBJECT_TYPE_ID  FROM bg_custom_types WHERE OBJECT_TYPE_ID = @OBJECT_TYPE_ID);
            END
	--OBJECT TYPE_IDS INITIALIZATION--
            DECLARE  @BG_TERM_OBJECT_TYPE_ID int = (SELECT OBJECT_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE=''BGM_TERM'');
            DECLARE  @BGM_POLICY_OBJECT_TYPE_ID int = (SELECT OBJECT_TYPE_ID  FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE =''BGM_POLICY'');
            DECLARE  @BGM_RULE_OBJECT_TYPE_ID int= (SELECT OBJECT_TYPE_ID  FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE=''BGM_RULE'');
            DECLARE  @SM_SYSTEM_OBJECT_TYPE_ID int =(SELECT OBJECT_TYPE_ID  FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE=''SM_SYSTEM'');
            DECLARE  @SM_ENV_OBJECT_TYPE_ID int= (SELECT OBJECT_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE=''SM_ENVIRONMENT'');
            DECLARE  @SM_TABLE_OBJECT_TYPE_ID int =(SELECT OBJECT_TYPE_ID  FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE=''SM_TABLE'');
            DECLARE  @SM_COLUMN_OBJECT_TYPE_ID int = ( SELECT OBJECT_TYPE_ID  FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE=''SM_COLUMN'');
        --OBJECT TYPE_IDS INITIALIZATION--
		 SET NOCOUNT ON;
		IF OBJECT_ID(''tempdb..#tbl_mindmap'') IS NOT NULL
		DROP TABLE #tbl_mindmap;
                IF OBJECT_ID(''tempdb..#tbl_mindmap_objpaths'') IS NOT NULL
		DROP TABLE #tbl_mindmap_objpaths;
                IF OBJECT_ID(''tempdb..#tbl_mindmap_co'') IS NOT NULL
		DROP TABLE #tbl_mindmap_co;
                IF OBJECT_ID(''tempdb..#tbl_mindmap_count'') IS NOT NULL
		DROP TABLE #tbl_mindmap_count;
                CREATE TABLE #tbl_mindmap_count (OBJECT_ID bigint, OBJECT_TYPE_ID int, OBJ_COUNT bigint);
                CREATE TABLE #tbl_mindmap (OBJECT_ID bigint, object_type_id int, association_id bigint,
                OBJECT_NAME varchar(4000),FORWARD_TITLE varchar(4000),REVERSE_TITLE varchar(4000), RM_ID bigint, PARENT_PATH varchar(max),
                OBJECT_DEFINITION varchar(max), OBJECT_DESCRIPTION varchar(max),SDI_ENABLED int,
                SDI_FLAG varchar(10),SDI_DESCRIPTION varchar(4000), SDI_CLASS_ID bigint,
                SDI_CLASS_NAME varchar(4000), ENTITY_COLOR varchar(150), DISPLAY_COLOR varchar(100), DISPLAY_TYPE varchar(100),
                OBJECT_TITLE varchar(4000), root_cat_group bigint, OBJECT_LOGICAL_NAME varchar(4000), OBJECT_EXPANDED_LOGICAL_NAME varchar(4000));

         WITH businessterms AS
  (SELECT bc.category_id,
          bc.parent_category_id,
		  bc.category_id as root_cat_group,
          category_name,
          description,
          Cast((category_name) AS VARCHAR(MAX)) AS PATH,
          CAST((category_id) AS VARCHAR(MAX)) AS IDPATH
   FROM bg_categories bc
   WHERE parent_category_id = -1  AND ( 1=@MASTER_ACCESS OR EXISTS(SELECT 1 FROM ADS_OBJECT_TO_OBJECT_SCOPE aotos where 
		aotos.OBJECT_ID = bc.CATEGORY_ID   and aotos.OBJECT_TYPE_ID = bc.OBJECT_TYPE_ID
		and ((aotos.SCOPE_OBJECT_TYPE_ID = @USER_OBJ_TYPE_ID and aotos.SCOPE_OBJECT_ID = @USER_ID) OR (aotos.SCOPE_OBJECT_TYPE_ID = @ROLE_OBJ_TYPE_ID and aotos.SCOPE_OBJECT_ID IN (SELECT ROLE_ID FROM USER_ASSIGNED_ROLES WHERE USER_ID = @USER_ID)))))
   UNION ALL SELECT BRC.category_id,
                    BRC.parent_category_id,
					root_cat_group,
                    BRC.category_name,
                    BRC.description,
                    Cast((BR.path + ''->'' + BRC.category_name) AS VARCHAR(MAX)) AS PATH,
                    CAST(br.IDPATH + ''/'' + CAST(brc.CATEGORY_ID AS VARCHAR(MAX)) AS VARCHAR(MAX)) AS IdPath
   FROM bg_categories AS BRC
   JOIN businessterms AS BR ON BRC.parent_category_id = BR.category_id)
SELECT * INTO #tbl_mindmap_objpaths from businessterms;
with cte_custom_objs AS
  (SELECT bc.category_id,
          category_name,
          parent_category_id,
		  bc.category_id as root_cat_group,
          CAST ('''' AS VARCHAR (MAX)) AS parentnames
   FROM bg_categories bc
   WHERE parent_category_id = -1  AND ( 1=@MASTER_ACCESS OR EXISTS(SELECT 1 FROM ADS_OBJECT_TO_OBJECT_SCOPE aotos where 
		aotos.OBJECT_ID = bc.CATEGORY_ID   and aotos.OBJECT_TYPE_ID = bc.OBJECT_TYPE_ID
		and ((aotos.SCOPE_OBJECT_TYPE_ID = @USER_OBJ_TYPE_ID and aotos.SCOPE_OBJECT_ID = @USER_ID) OR (aotos.SCOPE_OBJECT_TYPE_ID = @ROLE_OBJ_TYPE_ID and aotos.SCOPE_OBJECT_ID IN (SELECT ROLE_ID FROM USER_ASSIGNED_ROLES WHERE USER_ID = @USER_ID)))))
   UNION ALL
    SELECT t.category_id,
                    t.category_name,
                    t.parent_category_id,
					cte_custom_objs.category_id as root_cat_group,
                    cte_custom_objs.parentnames + ''->'' + cte_custom_objs.category_name
   FROM bg_categories AS t
   INNER JOIN cte_custom_objs ON cte_custom_objs.category_id = t.parent_category_id)
SELECT * INTO #tbl_mindmap_co from cte_custom_objs;
--business terms forward
INSERT INTO #tbl_mindmap SELECT BGT.BUS_TERM_ID OBJECT_ID,
	   BGA.target_object_type_id object_type_id,
       BGA.id association_id,
	   BUS_TERM_NAME OBJECT_NAME,
	   RD.FORWARD_TITLE FORWARD_TITLE,
	   RD.REVERSE_TITLE REVERSE_TITLE,
           RD.RM_ID,
       PATH AS PARENT_PATH,
		ISNULL(DEFINITION, '''') OBJECT_DEFINITION,
		ISNULL(BGT.DESCRIPTION, '''') OBJECT_DESCRIPTION,
		BCT.SDI_ENABLED,BGT.SDI_FLAG,BGT.SDI_DESCRIPTION,BGT.SDI_CLASS_ID,SDI.SDI_CLASS_NAME,
		ENTITY_COLOR,
		  DISPLAY_COLOR,
		  DISPLAY_TYPE,
		  BCT.ENTITY_TITLE AS OBJECT_TITLE,tbl_mindmap_bt.root_cat_group,
		  cast('' '' as varchar(300)) OBJECT_LOGICAL_NAME,cast('' '' as varchar(4000)) OBJECT_EXPANDED_LOGICAL_NAME
FROM #tbl_mindmap_objpaths tbl_mindmap_bt
JOIN business_terms BGT ON tbl_mindmap_bt.category_id = BGT.category_id
JOIN ads_associations BGA ON BGT.bus_term_id = BGA.target_object_id
JOIN BG_CUSTOM_TYPES BCT ON BCT.OBJECT_TYPE_ID = @BG_TERM_OBJECT_TYPE_ID
LEFT JOIN relationship_details rd on BGA.RELATIONSHIP_DETAIL_ID = rd.rd_id
LEFT JOIN SM_CLASSIFICATION_SDI SDI ON SDI.SDI_CLASS_ID=BGT.SDI_CLASS_ID
WHERE source_object_id = @OBJECT_ID
  AND source_object_type_id = @OBJECT_TYPE_ID
  AND target_object_type_id = @BG_TERM_OBJECT_TYPE_ID
--   AND BGT.CATEGORY_ID IN (SELECT CATEGORY_ID FROM #tbl_mindmap_objpaths)

--BusinessTerm reverse
IF((SELECT COUNT(*) FROM #tbl_mindmap where object_type_id = @BG_TERM_OBJECT_TYPE_ID)=0 OR @OBJECT_TYPE_ID=@BG_TERM_OBJECT_TYPE_ID)
BEGIN
INSERT INTO #tbl_mindmap
SELECT BGT.BUS_TERM_ID [OBJECT_ID],
	   BGA.source_object_type_id object_type_id,
       BGA.id association_id,
	   BUS_TERM_NAME OBJECT_NAME,
	   RD.REVERSE_TITLE FORWARD_TITLE,
	   RD.FORWARD_TITLE REVERSE_TITLE,
           RD.RM_ID,
       PATH AS PARENT_PATH,
		ISNULL(DEFINITION, '''') OBJECT_DEFINITION,
		ISNULL(BGT.DESCRIPTION, '''') OBJECT_DESCRIPTION,
		BCT.SDI_ENABLED,BGT.SDI_FLAG,BGT.SDI_DESCRIPTION,BGT.SDI_CLASS_ID,SDI.SDI_CLASS_NAME,
		ENTITY_COLOR,
		  DISPLAY_COLOR,
		  DISPLAY_TYPE,BCT.ENTITY_TITLE AS OBJECT_TITLE,tbl_mindmap_bt.root_cat_group,
		  cast('' '' as varchar(300)) OBJECT_LOGICAL_NAME,cast('' '' as varchar(4000)) OBJECT_EXPANDED_LOGICAL_NAME
FROM #tbl_mindmap_objpaths tbl_mindmap_bt
JOIN business_terms BGT ON tbl_mindmap_bt.category_id = BGT.category_id
JOIN ads_associations BGA ON BGT.bus_term_id = BGA.source_object_id
JOIN BG_CUSTOM_TYPES BCT ON BCT.OBJECT_TYPE_ID = @BG_TERM_OBJECT_TYPE_ID
LEFT JOIN relationship_details rd on BGA.RELATIONSHIP_DETAIL_ID = rd.rd_id
LEFT JOIN SM_CLASSIFICATION_SDI SDI ON SDI.SDI_CLASS_ID=BGT.SDI_CLASS_ID
WHERE target_object_id = @OBJECT_ID
  AND target_object_type_id = @OBJECT_TYPE_ID
  AND source_object_type_id = @BG_TERM_OBJECT_TYPE_ID
--   AND BGT.CATEGORY_ID IN (SELECT CATEGORY_ID FROM #tbl_mindmap_objpaths)
END;
-- Coloumn Forward

	INSERT INTO #tbl_mindmap
	SELECT stcm.stcm_id AS object_id,
          assc.target_object_type_id AS object_type_id,
          assc.id association_id,
          stcm.column_name object_name,
		  RD.FORWARD_TITLE FORWARD_TITLE,
		  RD.REVERSE_TITLE REVERSE_TITLE,
                  RD.RM_ID,
		  cast((sce.system_name + ''->'' + sce.system_environment_name + ''->'' + stcm.table_name) AS VARCHAR(MAX)) as PARENT_PATH,
		  ISNULL(COL_DEF, '''') OBJECT_DEFINITION,
		  '''' OBJECT_DESCRIPTION,
		  1 as SDI_ENABLED, stcm.SDI_FLAG,stcm.SDI_DESCRIPTION,stcm.SDI_CLASS_ID,SDI.SDI_CLASS_NAME,
		  (SELECT VALUE FROM DBO.SPLIT(''`'',(SELECT PREFERENCE_VALUE FROM APP_PREFERENCES WHERE PREFERENCE_NAME = ''SM_COLUMN_PREFERENCE'')) WHERE RowID = 1) ENTITY_COLOR,
		  DISPLAY_COLOR,
		  DISPLAY_TYPE, 
                  (SELECT VALUE FROM DBO.SPLIT(''`'',(SELECT PREFERENCE_VALUE FROM APP_PREFERENCES WHERE PREFERENCE_NAME = ''SM_COLUMN_PREFERENCE'')) WHERE RowID = 2) OBJECT_TITLE, 
                  assc.target_object_type_id root_cat_group,ISNULL(stcm.LOGICAL_COLUMN_NAME, '' '') as OBJECT_LOGICAL_NAME,
		  ISNULL(stcm.EXPANDED_LOGICAL_NAME, '' '') as OBJECT_EXPANDED_LOGICAL_NAME
   FROM VALID_SYS_TBL_COL_METADATA stcm
   JOIN ads_associations assc ON stcm.stcm_id = assc.target_object_id
   JOIN ACTIVE_SYS_CON_ENVIRONMENTS sce ON sce.sce_id = stcm.sce_id
	LEFT JOIN relationship_details rd on assc.RELATIONSHIP_DETAIL_ID = rd.rd_id
	LEFT JOIN ADS_KEY_VALUE_OBJECTS KVB ON KVB.object_type_id = assc.target_object_type_id
	LEFT JOIN SM_CLASSIFICATION_SDI SDI ON SDI.SDI_CLASS_ID=stcm.SDI_CLASS_ID
   WHERE assc.source_object_id = @OBJECT_ID
    AND assc.source_object_type_id = @OBJECT_TYPE_ID
    AND assc.target_object_type_id = @SM_COLUMN_OBJECT_TYPE_ID
    AND  (1=@MASTER_ACCESS OR sce.sce_id IN (SELECT OBJECT_ID FROM ADS_OBJECT_TO_OBJECT_SCOPE WHERE OBJECT_TYPE_ID = (SELECT OBJECT_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE = ''SM_ENVIRONMENT'')
    AND ((SCOPE_OBJECT_TYPE_ID = @USER_OBJ_TYPE_ID and SCOPE_OBJECT_ID = @USER_ID) OR (SCOPE_OBJECT_TYPE_ID = @ROLE_OBJ_TYPE_ID and SCOPE_OBJECT_ID IN (SELECT ROLE_ID FROM USER_ASSIGNED_ROLES WHERE USER_ID = @USER_ID)))))
-- Table Forward
 INSERT INTO #tbl_mindmap
 SELECT stm.stm_id AS object_id,
          assc.target_object_type_id AS object_type_id,
          assc.id association_id,
          stm.table_name object_name,
		  RD.FORWARD_TITLE FORWARD_TITLE,
		  RD.REVERSE_TITLE REVERSE_TITLE,
                  RD.RM_ID,
		  cast((sce.system_name + ''->'' + sce.system_environment_name) AS VARCHAR(MAX)) as PARENT_PATH,
		  ISNULL(TABLE_DEF, '''') OBJECT_DEFINITION,
		  '''' OBJECT_DESCRIPTION,
		   1 as SDI_ENABLED, stm.SDI_FLAG,stm.SDI_DESCRIPTION,stm.SDI_CLASS_ID,SDI.SDI_CLASS_NAME,
		  (SELECT VALUE FROM DBO.SPLIT(''`'',(SELECT PREFERENCE_VALUE FROM APP_PREFERENCES WHERE PREFERENCE_NAME = ''SM_TABLE_PREFERENCE'')) WHERE RowID = 1) ENTITY_COLOR,
		  DISPLAY_COLOR,
		  DISPLAY_TYPE,
		  (SELECT VALUE FROM DBO.SPLIT(''`'',(SELECT PREFERENCE_VALUE FROM APP_PREFERENCES WHERE PREFERENCE_NAME = ''SM_TABLE_PREFERENCE'')) WHERE RowID = 2) OBJECT_TITLE,
                   assc.target_object_type_id root_cat_group,ISNULL(stm.LOGICAL_TABLE_NAME, '' '') as OBJECT_LOGICAL_NAME,
		  ISNULL(stm.EXPANDED_LOGICAL_NAME, '' '') as OBJECT_EXPANDED_LOGICAL_NAME
   FROM VALID_SYSTEM_TABLE_METADATA stm
   JOIN ads_associations assc ON stm.stm_id = assc.target_object_id
   JOIN ACTIVE_SYS_CON_ENVIRONMENTS sce ON sce.sce_id = stm.sce_id
	LEFT JOIN relationship_details rd on assc.RELATIONSHIP_DETAIL_ID  = rd.rd_id
-- 	LEFT JOIN ADS_KEY_VALUE_OBJECTS KVB ON KVB.object_type_id = assc.target_object_type_id
		LEFT JOIN SM_CLASSIFICATION_SDI SDI ON SDI.SDI_CLASS_ID=stm.SDI_CLASS_ID
	WHERE assc.source_object_id = @OBJECT_ID
        AND assc.source_object_type_id = @OBJECT_TYPE_ID
        AND assc.target_object_type_id =  @SM_TABLE_OBJECT_TYPE_ID
        AND  (1=@MASTER_ACCESS OR sce.sce_id IN (SELECT OBJECT_ID FROM ADS_OBJECT_TO_OBJECT_SCOPE WHERE OBJECT_TYPE_ID = (SELECT OBJECT_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE = ''SM_ENVIRONMENT'')
            AND ((SCOPE_OBJECT_TYPE_ID = @USER_OBJ_TYPE_ID and SCOPE_OBJECT_ID = @USER_ID) OR (SCOPE_OBJECT_TYPE_ID = @ROLE_OBJ_TYPE_ID and SCOPE_OBJECT_ID IN (SELECT ROLE_ID FROM USER_ASSIGNED_ROLES WHERE USER_ID = @USER_ID)))))
-- ENv Forward
INSERT INTO #tbl_mindmap
SELECT sce.sce_id AS object_id,
		  assc.target_object_type_id AS object_type_id,
          assc.id association_id,
          sce.system_environment_name AS object_name,
          RD.FORWARD_TITLE FORWARD_TITLE,
	      RD.REVERSE_TITLE REVERSE_TITLE,
          RD.RM_ID,
	cast((sce.system_name) AS VARCHAR(MAX)) as PARENT_PATH,
		  '''' OBJECT_DEFINITION,
		  ISNULL(ENV_INTENDED_USE_DESCR, '''') OBJECT_DESCRIPTION,
		   1 as SDI_ENABLED, sce.SDI_FLAG,sce.SDI_DESCRIPTION,sce.SDI_CLASS_ID,SDI.SDI_CLASS_NAME,
                  (SELECT VALUE FROM DBO.SPLIT(''`'',(SELECT PREFERENCE_VALUE FROM APP_PREFERENCES WHERE PREFERENCE_NAME = ''SM_ENVIRONMENT_PREFERENCE'')) WHERE RowID = 1) ENTITY_COLOR,
		  DISPLAY_COLOR,
		  DISPLAY_TYPE,
		  (SELECT VALUE FROM DBO.SPLIT(''`'',(SELECT PREFERENCE_VALUE FROM APP_PREFERENCES WHERE PREFERENCE_NAME = ''SM_ENVIRONMENT_PREFERENCE'')) WHERE RowID = 2) OBJECT_TITLE,
                  assc.target_object_type_id root_cat_group,
		  cast('' '' as varchar(300)) OBJECT_LOGICAL_NAME,cast('' '' as varchar(4000)) OBJECT_EXPANDED_LOGICAL_NAME
   FROM ACTIVE_SYS_CON_ENVIRONMENTS sce
   JOIN ads_associations assc ON sce.sce_id = assc.target_object_id
	LEFT JOIN relationship_details rd on assc.RELATIONSHIP_DETAIL_ID = rd.rd_id
-- 	LEFT JOIN ADS_KEY_VALUE_OBJECTS KVB ON KVB.object_type_id = assc.target_object_type_id
	LEFT JOIN SM_CLASSIFICATION_SDI SDI ON SDI.SDI_CLASS_ID=sce.SDI_CLASS_ID
   WHERE sce.status = ''ACTIVE''
        AND assc.source_object_id = @OBJECT_ID
        AND assc.source_object_type_id = @OBJECT_TYPE_ID
        AND assc.target_object_type_id = @SM_ENV_OBJECT_TYPE_ID
        AND  (1=@MASTER_ACCESS OR sce.sce_id IN (SELECT OBJECT_ID FROM ADS_OBJECT_TO_OBJECT_SCOPE WHERE OBJECT_TYPE_ID = (SELECT OBJECT_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE = ''SM_ENVIRONMENT'')
		AND ((SCOPE_OBJECT_TYPE_ID = @USER_OBJ_TYPE_ID and SCOPE_OBJECT_ID = @USER_ID) OR (SCOPE_OBJECT_TYPE_ID = @ROLE_OBJ_TYPE_ID and SCOPE_OBJECT_ID IN (SELECT ROLE_ID FROM USER_ASSIGNED_ROLES WHERE USER_ID = @USER_ID)))))

-- SM System Forward
INSERT INTO #tbl_mindmap
SELECT SDD.SYSTEM_ID AS object_id,
		  assc.target_object_type_id AS object_type_id,
          assc.id association_id,
          SDD.SYSTEM_NAME AS object_name,
          RD.FORWARD_TITLE FORWARD_TITLE,
	      RD.REVERSE_TITLE REVERSE_TITLE,
          RD.RM_ID,
		 '''' as PARENT_PATH,
		  '''' OBJECT_DEFINITION,
		  '''' OBJECT_DESCRIPTION,
		   1 as SDI_ENABLED, SDD.SDI_FLAG,SDD.SDI_DESCRIPTION,SDD.SDI_CLASS_ID,SDI.SDI_CLASS_NAME,
		  (SELECT VALUE FROM DBO.SPLIT(''`'',(SELECT PREFERENCE_VALUE FROM APP_PREFERENCES WHERE PREFERENCE_NAME = ''SM_SYSTEM_PREFERENCE'')) WHERE RowID = 1) ENTITY_COLOR,
		  DISPLAY_COLOR,
		  DISPLAY_TYPE,
                  (SELECT VALUE FROM DBO.SPLIT(''`'',(SELECT PREFERENCE_VALUE FROM APP_PREFERENCES WHERE PREFERENCE_NAME = ''SM_SYSTEM_PREFERENCE'')) WHERE RowID = 2) OBJECT_TITLE,
		  assc.target_object_type_id as root_cat_group,
		  cast('' '' as varchar(300)) OBJECT_LOGICAL_NAME,cast('' '' as varchar(4000)) OBJECT_EXPANDED_LOGICAL_NAME
   FROM SYSTEM_DEFINITION_DETAILS SDD
   JOIN ads_associations assc ON SDD.SYSTEM_ID = assc.target_object_id
	LEFT JOIN relationship_details rd on assc.RELATIONSHIP_DETAIL_ID = rd.rd_id
	--LEFT JOIN ADS_KEY_VALUE_OBJECTS KVB ON KVB.object_type_id = assc.target_object_type_id
	LEFT JOIN SM_CLASSIFICATION_SDI SDI ON SDI.SDI_CLASS_ID=SDD.SDI_CLASS_ID
   WHERE assc.source_object_id = @OBJECT_ID
     AND assc.source_object_type_id = @OBJECT_TYPE_ID
     AND assc.target_object_type_id =@SM_SYSTEM_OBJECT_TYPE_ID

--SM Column Reverse
IF ((SELECT COUNT(*) FROM #tbl_mindmap where object_type_id =  @SM_COLUMN_OBJECT_TYPE_ID) =0 OR @OBJECT_TYPE_ID=@SM_COLUMN_OBJECT_TYPE_ID)
BEGIN
INSERT INTO #tbl_mindmap
SELECT stcm.stcm_id AS object_id,
          assc.source_object_type_id AS object_type_id,
          assc.id association_id,
          stcm.column_name object_name,
		  RD.REVERSE_TITLE FORWARD_TITLE,
		  RD.FORWARD_TITLE REVERSE_TITLE,
          RD.RM_ID,
	  cast((sce.system_name + ''->'' + sce.system_environment_name + ''->'' + stcm.table_name) AS VARCHAR(MAX)) as PARENT_PATH,
		  ISNULL(COL_DEF, '''') OBJECT_DEFINITION,
		  '''' OBJECT_DESCRIPTION,
		  1 as SDI_ENABLED, stcm.SDI_FLAG,stcm.SDI_DESCRIPTION,stcm.SDI_CLASS_ID,SDI.SDI_CLASS_NAME,
                  (SELECT VALUE FROM DBO.SPLIT(''`'',(SELECT PREFERENCE_VALUE FROM APP_PREFERENCES WHERE PREFERENCE_NAME = ''SM_COLUMN_PREFERENCE'')) WHERE RowID = 1) ENTITY_COLOR,
		  DISPLAY_COLOR,
		  DISPLAY_TYPE,
                  (SELECT VALUE FROM DBO.SPLIT(''`'',(SELECT PREFERENCE_VALUE FROM APP_PREFERENCES WHERE PREFERENCE_NAME = ''SM_COLUMN_PREFERENCE'')) WHERE RowID = 2) OBJECT_TITLE,
		  assc.source_object_type_id as root_cat_group,isNull(stcm.LOGICAL_COLUMN_NAME,'' '') as OBJECT_LOGICAL_NAME,
		  isNull(stcm.EXPANDED_LOGICAL_NAME, '' '') as OBJECT_EXPANDED_LOGICAL_NAME
   FROM VALID_SYS_TBL_COL_METADATA stcm
   JOIN ads_associations assc ON stcm.stcm_id = assc.source_object_id
   JOIN ACTIVE_SYS_CON_ENVIRONMENTS sce ON sce.sce_id = stcm.sce_id
	LEFT JOIN relationship_details rd on assc.RELATIONSHIP_DETAIL_ID = rd.rd_id
	--LEFT JOIN ADS_KEY_VALUE_OBJECTS KVB ON KVB.object_type_id = assc.source_object_type_id
	LEFT JOIN SM_CLASSIFICATION_SDI SDI ON SDI.SDI_CLASS_ID=stcm.SDI_CLASS_ID
   WHERE  assc.target_object_id = @OBJECT_ID
    AND assc.target_object_type_id = @OBJECT_TYPE_ID
    AND assc.source_object_type_id =  @SM_COLUMN_OBJECT_TYPE_ID
    AND  (1=@MASTER_ACCESS OR sce.sce_id IN (SELECT OBJECT_ID FROM ADS_OBJECT_TO_OBJECT_SCOPE WHERE OBJECT_TYPE_ID = (SELECT OBJECT_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE = ''SM_ENVIRONMENT'')
    AND ((SCOPE_OBJECT_TYPE_ID = @USER_OBJ_TYPE_ID and SCOPE_OBJECT_ID = @USER_ID) OR (SCOPE_OBJECT_TYPE_ID = @ROLE_OBJ_TYPE_ID and SCOPE_OBJECT_ID IN (SELECT ROLE_ID FROM USER_ASSIGNED_ROLES WHERE USER_ID = @USER_ID)))))
END;
--SM Table Reverse
IF ((SELECT COUNT(*) FROM #tbl_mindmap where object_type_id =  @SM_TABLE_OBJECT_TYPE_ID ) = 0 OR @OBJECT_TYPE_ID=@SM_TABLE_OBJECT_TYPE_ID)
BEGIN
INSERT INTO #tbl_mindmap
SELECT stm.stm_id AS object_id,
          assc.source_object_type_id AS object_type_id,
          assc.id association_id,
          stm.table_name object_name,
		  RD.REVERSE_TITLE FORWARD_TITLE,
		  RD.FORWARD_TITLE REVERSE_TITLE,
                  RD.RM_ID,
		  cast((sce.system_name + ''->'' + sce.system_environment_name) AS VARCHAR(MAX)) as PARENT_PATH,
		  ISNULL(TABLE_DEF, '''') OBJECT_DEFINITION,
		  '''' OBJECT_DESCRIPTION,
		  1 as SDI_ENABLED, stm.SDI_FLAG, stm.SDI_DESCRIPTION,stm.SDI_CLASS_ID,SDI.SDI_CLASS_NAME,
                  (SELECT VALUE FROM DBO.SPLIT(''`'',(SELECT PREFERENCE_VALUE FROM APP_PREFERENCES WHERE PREFERENCE_NAME = ''SM_TABLE_PREFERENCE'')) WHERE RowID = 1) ENTITY_COLOR,
		  DISPLAY_COLOR,
		  DISPLAY_TYPE,
                  (SELECT VALUE FROM DBO.SPLIT(''`'',(SELECT PREFERENCE_VALUE FROM APP_PREFERENCES WHERE PREFERENCE_NAME = ''SM_TABLE_PREFERENCE'')) WHERE RowID = 2) OBJECT_TITLE,
		  assc.source_object_type_id as root_cat_group,isNull(stm.LOGICAL_TABLE_NAME, '' '') as OBJECT_LOGICAL_NAME,
		  isNull(stm.EXPANDED_LOGICAL_NAME, '' '') as OBJECT_EXPANDED_LOGICAL_NAME
   FROM VALID_SYSTEM_TABLE_METADATA stm
   JOIN ads_associations assc ON stm.stm_id = assc.source_object_id
   JOIN ACTIVE_SYS_CON_ENVIRONMENTS sce ON sce.sce_id = stm.sce_id
	LEFT JOIN relationship_details rd on assc.RELATIONSHIP_DETAIL_ID  = rd.rd_id
-- 	LEFT JOIN ADS_KEY_VALUE_OBJECTS KVB ON KVB.object_type_id = assc.source_object_type_id
	LEFT JOIN SM_CLASSIFICATION_SDI SDI ON SDI.SDI_CLASS_ID=stm.SDI_CLASS_ID
   WHERE  assc.target_object_id = @OBJECT_ID
        AND assc.target_object_type_id = @OBJECT_TYPE_ID
        AND assc.source_object_type_id =  @SM_TABLE_OBJECT_TYPE_ID
        AND  (1=@MASTER_ACCESS OR sce.sce_id IN (SELECT OBJECT_ID FROM ADS_OBJECT_TO_OBJECT_SCOPE WHERE OBJECT_TYPE_ID = (SELECT OBJECT_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE = ''SM_ENVIRONMENT'')
        AND ((SCOPE_OBJECT_TYPE_ID = @USER_OBJ_TYPE_ID and SCOPE_OBJECT_ID = @USER_ID) OR (SCOPE_OBJECT_TYPE_ID = @ROLE_OBJ_TYPE_ID and SCOPE_OBJECT_ID IN (SELECT ROLE_ID FROM USER_ASSIGNED_ROLES WHERE USER_ID = @USER_ID)))))
END;
--SM ENV Reverse
IF ((SELECT COUNT(*) FROM #tbl_mindmap where object_type_id = @SM_ENV_OBJECT_TYPE_ID) =0 OR @OBJECT_TYPE_ID=@SM_ENV_OBJECT_TYPE_ID)
BEGIN
INSERT INTO #tbl_mindmap
SELECT sce.sce_id AS object_id,
		  assc.source_object_type_id AS object_type_id,
          assc.id association_id,
          sce.system_environment_name AS object_name,
          RD.REVERSE_TITLE FORWARD_TITLE,
		  RD.FORWARD_TITLE REVERSE_TITLE,
          RD.RM_ID,
		  cast((sce.system_name) AS VARCHAR(MAX)) as PARENT_PATH,
		  '''' OBJECT_DEFINITION,
                  ISNULL(ENV_INTENDED_USE_DESCR, '''') OBJECT_DESCRIPTION,
		  1 as SDI_ENABLED, sce.SDI_FLAG, sce.SDI_DESCRIPTION,sce.SDI_CLASS_ID,SDI.SDI_CLASS_NAME,
                  (SELECT VALUE FROM DBO.SPLIT(''`'',(SELECT PREFERENCE_VALUE FROM APP_PREFERENCES WHERE PREFERENCE_NAME = ''SM_ENVIRONMENT_PREFERENCE'')) WHERE RowID = 1) ENTITY_COLOR,
		  DISPLAY_COLOR,
		  DISPLAY_TYPE,
                  (SELECT VALUE FROM DBO.SPLIT(''`'',(SELECT PREFERENCE_VALUE FROM APP_PREFERENCES WHERE PREFERENCE_NAME = ''SM_ENVIRONMENT_PREFERENCE'')) WHERE RowID = 2) OBJECT_TITLE,
		  assc.source_object_type_id as root_cat_group,
		  cast('' '' as varchar(300)) OBJECT_LOGICAL_NAME,cast('' '' as varchar(4000)) OBJECT_EXPANDED_LOGICAL_NAME
   FROM ACTIVE_SYS_CON_ENVIRONMENTS sce
   JOIN ads_associations assc ON sce.sce_id = assc.source_object_id
	LEFT JOIN relationship_details rd on assc.RELATIONSHIP_DETAIL_ID = rd.rd_id
	--LEFT JOIN ADS_KEY_VALUE_OBJECTS KVB ON KVB.object_type_id = assc.source_object_type_id
	LEFT JOIN SM_CLASSIFICATION_SDI SDI ON SDI.SDI_CLASS_ID=sce.SDI_CLASS_ID
   WHERE sce.status = ''ACTIVE''
        AND assc.target_object_id = @OBJECT_ID
        AND assc.target_object_type_id = @OBJECT_TYPE_ID
        AND assc.source_object_type_id = @SM_ENV_OBJECT_TYPE_ID
        AND  (1=@MASTER_ACCESS OR sce.sce_id IN (SELECT OBJECT_ID FROM ADS_OBJECT_TO_OBJECT_SCOPE WHERE OBJECT_TYPE_ID = (SELECT OBJECT_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE = ''SM_ENVIRONMENT'')
        AND ((SCOPE_OBJECT_TYPE_ID = @USER_OBJ_TYPE_ID and SCOPE_OBJECT_ID = @USER_ID) OR (SCOPE_OBJECT_TYPE_ID = @ROLE_OBJ_TYPE_ID and SCOPE_OBJECT_ID IN (SELECT ROLE_ID FROM USER_ASSIGNED_ROLES WHERE USER_ID = @USER_ID)))))
END;
-- SM System Reverse
IF ( (SELECT COUNT(*) FROM #tbl_mindmap where object_type_id = @SM_SYSTEM_OBJECT_TYPE_ID) = 0  OR @OBJECT_TYPE_ID = @SM_SYSTEM_OBJECT_TYPE_ID)
BEGIN
INSERT INTO #tbl_mindmap
SELECT SDD.SYSTEM_ID AS object_id,
		  assc.source_object_type_id AS object_type_id,
          assc.id association_id,
          SDD.SYSTEM_NAME AS object_name,
          RD.REVERSE_TITLE FORWARD_TITLE,
		  RD.FORWARD_TITLE REVERSE_TITLE,
          RD.RM_ID,
		  '''' as PARENT_PATH,
		  '''' OBJECT_DEFINITION,
		  '''' OBJECT_DESCRIPTION,
		  1 as SDI_ENABLED, SDD.SDI_FLAG, SDD.SDI_DESCRIPTION,SDD.SDI_CLASS_ID,SDI.SDI_CLASS_NAME,
                  (SELECT VALUE FROM DBO.SPLIT(''`'',(SELECT PREFERENCE_VALUE FROM APP_PREFERENCES WHERE PREFERENCE_NAME = ''SM_SYSTEM_PREFERENCE'')) WHERE RowID = 1) ENTITY_COLOR,
		  DISPLAY_COLOR,
		  DISPLAY_TYPE,
                  (SELECT VALUE FROM DBO.SPLIT(''`'',(SELECT PREFERENCE_VALUE FROM APP_PREFERENCES WHERE PREFERENCE_NAME = ''SM_SYSTEM_PREFERENCE'')) WHERE RowID = 2) OBJECT_TITLE,
		  assc.source_object_type_id as root_cat_group,
		  cast('' '' as varchar(300)) OBJECT_LOGICAL_NAME,cast('' '' as varchar(4000)) OBJECT_EXPANDED_LOGICAL_NAME
   FROM SYSTEM_DEFINITION_DETAILS SDD
   JOIN ads_associations assc ON SDD.SYSTEM_ID = assc.source_object_id
	LEFT JOIN relationship_details rd on assc.RELATIONSHIP_DETAIL_ID = rd.rd_id
-- 	LEFT JOIN ADS_KEY_VALUE_OBJECTS KVB ON KVB.object_type_id = assc.source_object_type_id
	LEFT JOIN SM_CLASSIFICATION_SDI SDI ON SDI.SDI_CLASS_ID=SDD.SDI_CLASS_ID
   WHERE assc.target_object_id = @OBJECT_ID
     AND assc.target_object_type_id = @OBJECT_TYPE_ID
     AND assc.source_object_type_id =@SM_SYSTEM_OBJECT_TYPE_ID
END;

--business policy forward
INSERT INTO #tbl_mindmap
SELECT
	bp.id [object_id],
	bga.target_object_type_id object_type_id,
    bga.id association_id,
	bp.name object_name,
	RD.FORWARD_TITLE FORWARD_TITLE,
	RD.REVERSE_TITLE REVERSE_TITLE,
        RD.RM_ID,
    path AS parent_path,
	DEFINITION OBJECT_DEFINITION,
	ISNULL(bp.DESCRIPTION, '''') OBJECT_DESCRIPTION,
	BCT.SDI_ENABLED,bp.SDI_FLAG,bp.SDI_DESCRIPTION,bp.SDI_CLASS_ID,SDI.SDI_CLASS_NAME,
	ENTITY_COLOR,
		  DISPLAY_COLOR,
		  DISPLAY_TYPE,BCT.ENTITY_TITLE AS OBJECT_TITLE, root_cat_group,
		  cast('' '' as varchar(300)) OBJECT_LOGICAL_NAME,cast('' '' as varchar(4000)) OBJECT_EXPANDED_LOGICAL_NAME
FROM
    #tbl_mindmap_objpaths tbl_mindmap_bp
    JOIN bg_policies        bp ON tbl_mindmap_bp.category_id = bp.catalog_id
    JOIN ads_associations   bga ON bp.id = bga.target_object_id
	JOIN BG_CUSTOM_TYPES BCT ON BCT.OBJECT_TYPE_ID =@BGM_POLICY_OBJECT_TYPE_ID
	LEFT JOIN relationship_details rd on BGA.RELATIONSHIP_DETAIL_ID = rd.rd_id
	LEFT JOIN SM_CLASSIFICATION_SDI SDI ON SDI.SDI_CLASS_ID=bp.SDI_CLASS_ID
WHERE
    source_object_id = @OBJECT_ID
    AND source_object_type_id = @OBJECT_TYPE_ID
    AND target_object_type_id = @BGM_POLICY_OBJECT_TYPE_ID
--     AND bp.CATALOG_ID IN (SELECT CATEGORY_ID FROM #tbl_mindmap_objpaths)

--busines policy reverse
IF((SELECT COUNT(*) FROM #tbl_mindmap where object_type_id = @BGM_POLICY_OBJECT_TYPE_ID) =0 OR @OBJECT_TYPE_ID =@BGM_POLICY_OBJECT_TYPE_ID)
BEGIN
INSERT INTO #tbl_mindmap
SELECT
	bp.id [object_id],
	bga.source_object_type_id object_type_id,
    bga.id association_id,
	bp.name object_name,
	RD.REVERSE_TITLE FORWARD_TITLE,
	RD.FORWARD_TITLE REVERSE_TITLE,
        RD.RM_ID,
    path AS parent_path,
	DEFINITION OBJECT_DEFINITION,
	ISNULL(bp.DESCRIPTION, '''') OBJECT_DESCRIPTION,
	BCT.SDI_ENABLED,bp.SDI_FLAG,bp.SDI_DESCRIPTION,bp.SDI_CLASS_ID,SDI.SDI_CLASS_NAME,
	ENTITY_COLOR,
		  DISPLAY_COLOR,
		  DISPLAY_TYPE,BCT.ENTITY_TITLE AS OBJECT_TITLE,root_cat_group,
		  cast('' '' as varchar(300)) OBJECT_LOGICAL_NAME,cast('' '' as varchar(4000)) OBJECT_EXPANDED_LOGICAL_NAME
FROM
    #tbl_mindmap_objpaths tbl_mindmap_bp
    JOIN bg_policies        bp ON tbl_mindmap_bp.category_id = bp.catalog_id
    JOIN ads_associations   bga ON bp.id = bga.source_object_id
	JOIN BG_CUSTOM_TYPES BCT ON BCT.OBJECT_TYPE_ID = @BGM_POLICY_OBJECT_TYPE_ID
	LEFT JOIN relationship_details rd on BGA.RELATIONSHIP_DETAIL_ID = rd.rd_id
	LEFT JOIN SM_CLASSIFICATION_SDI SDI ON SDI.SDI_CLASS_ID=bp.SDI_CLASS_ID
WHERE
    target_object_id = @OBJECT_ID
    AND target_object_type_id = @OBJECT_TYPE_ID
    AND source_object_type_id = @BGM_POLICY_OBJECT_TYPE_ID
--     AND bp.CATALOG_ID IN (SELECT CATEGORY_ID FROM #tbl_mindmap_objpaths)
END;

--rule forward
INSERT INTO #tbl_mindmap
SELECT bbr.id object_id,
		BGA.target_object_type_id object_type_id,
        BGA.id association_id,
        bbr.name object_name,
		rd.FORWARD_TITLE FORWARD_TITLE,
	    rd.REVERSE_TITLE REVERSE_TITLE,
                RD.RM_ID,
        PATH AS PARENT_PATH,
	DEFINITION OBJECT_DEFINITION,
	ISNULL(bbr.DESCRIPTION, '''') OBJECT_DESCRIPTION,
	BCT.SDI_ENABLED,bbr.SDI_FLAG,bbr.SDI_DESCRIPTION,bbr.SDI_CLASS_ID,SDI.SDI_CLASS_NAME,
	ENTITY_COLOR,
		  DISPLAY_COLOR,
		  DISPLAY_TYPE,BCT.ENTITY_TITLE AS OBJECT_TITLE,tbl_mindmap_br.root_cat_group,
		  cast('' '' as varchar(300)) OBJECT_LOGICAL_NAME,cast('' '' as varchar(4000)) OBJECT_EXPANDED_LOGICAL_NAME
   FROM #tbl_mindmap_objpaths tbl_mindmap_br
   JOIN bg_business_rules bbr ON tbl_mindmap_br.category_id = bbr.catalog_id
	JOIN ads_associations BGA ON bbr.id = BGA.target_object_id
	JOIN BG_CUSTOM_TYPES BCT ON BCT.OBJECT_TYPE_ID =  @BGM_RULE_OBJECT_TYPE_ID
	LEFT JOIN relationship_details rd on BGA.RELATIONSHIP_DETAIL_ID = rd.rd_id
	LEFT JOIN SM_CLASSIFICATION_SDI SDI ON SDI.SDI_CLASS_ID=bbr.SDI_CLASS_ID
	WHERE source_object_id = @OBJECT_ID
  AND source_object_type_id = @OBJECT_TYPE_ID
  AND target_object_type_id =  @BGM_RULE_OBJECT_TYPE_ID
--   AND bbr.CATALOG_ID IN (SELECT CATEGORY_ID FROM #tbl_mindmap_objpaths)

--business rule reverse
IF ((SELECT COUNT(*) FROM #tbl_mindmap where object_type_id =  @BGM_RULE_OBJECT_TYPE_ID)=0 OR @OBJECT_TYPE_ID=@BGM_RULE_OBJECT_TYPE_ID)
BEGIN
INSERT INTO #tbl_mindmap
SELECT bbr.id object_id,
		BGA.source_object_type_id object_type_id,
        BGA.id association_id,
        bbr.name object_name,
		rd.REVERSE_TITLE FORWARD_TITLE,
		rd.FORWARD_TITLE REVERSE_TITLE,
                RD.RM_ID,
        PATH AS PARENT_PATH,
	DEFINITION OBJECT_DEFINITION,
	ISNULL(bbr.DESCRIPTION, '''') OBJECT_DESCRIPTION,
	BCT.SDI_ENABLED,bbr.SDI_FLAG,bbr.SDI_DESCRIPTION,bbr.SDI_CLASS_ID,SDI.SDI_CLASS_NAME,
	ENTITY_COLOR,
		  DISPLAY_COLOR,
		  DISPLAY_TYPE,BCT.ENTITY_TITLE AS OBJECT_TITLE,tbl_mindmap_br.root_cat_group,
		  cast('' '' as varchar(300)) OBJECT_LOGICAL_NAME,cast('' '' as varchar(4000)) OBJECT_EXPANDED_LOGICAL_NAME
   FROM #tbl_mindmap_objpaths tbl_mindmap_br
   JOIN bg_business_rules bbr ON tbl_mindmap_br.category_id = bbr.catalog_id
	JOIN ads_associations BGA ON bbr.id = BGA.source_object_id
	JOIN BG_CUSTOM_TYPES BCT ON BCT.OBJECT_TYPE_ID =  @BGM_RULE_OBJECT_TYPE_ID
	LEFT JOIN relationship_details rd on BGA.RELATIONSHIP_DETAIL_ID = rd.rd_id
	LEFT JOIN SM_CLASSIFICATION_SDI SDI ON SDI.SDI_CLASS_ID=bbr.SDI_CLASS_ID
	WHERE target_object_id = @OBJECT_ID
  AND target_object_type_id = @OBJECT_TYPE_ID
  AND source_object_type_id =  @BGM_RULE_OBJECT_TYPE_ID
--   AND bbr.CATALOG_ID IN (SELECT CATEGORY_ID FROM #tbl_mindmap_objpaths)
END;

--CO forward
INSERT INTO #tbl_mindmap
SELECT bco.id object_id,
			target_object_type_id object_type_id,
            bga.id association_id,
			bco.[name] object_name,
			rd.FORWARD_TITLE FORWARD_TITLE,
	        rd.REVERSE_TITLE REVERSE_TITLE,
                        RD.RM_ID,
	Stuff(parentnames + ''->'' + category_name, 1, 2, '''') AS PARENT_PATH,
	'''' OBJECT_DEFINITION,
	ISNULL(bco.DESCRIPTION, '''') OBJECT_DESCRIPTION,
	BCT.SDI_ENABLED,bco.SDI_FLAG,bco.SDI_DESCRIPTION,bco.SDI_CLASS_ID,SDI.SDI_CLASS_NAME,
	ENTITY_COLOR,
		  DISPLAY_COLOR,
		  DISPLAY_TYPE,BCT.ENTITY_TITLE AS OBJECT_TITLE,root_cat_group,
		  cast('' '' as varchar(300)) OBJECT_LOGICAL_NAME,cast('' '' as varchar(4000)) OBJECT_EXPANDED_LOGICAL_NAME
   FROM bg_custom_objects bco
   JOIN #tbl_mindmap_co cte ON (bco.category_id = cte.category_id)
    JOIN ads_associations   bga ON bco.id = bga.target_object_id
	JOIN BG_CUSTOM_TYPES BCT ON BCT.OBJECT_TYPE_ID = bga.target_object_type_id
	LEFT JOIN relationship_details rd on BGA.RELATIONSHIP_DETAIL_ID = rd.rd_id
	LEFT JOIN SM_CLASSIFICATION_SDI SDI ON SDI.SDI_CLASS_ID=bco.SDI_CLASS_ID
	WHERE
        source_object_id = @OBJECT_ID
        AND source_object_type_id = @OBJECT_TYPE_ID
        AND target_object_type_id in (SELECT OBJECT_TYPE_ID FROM BG_CUSTOM_TYPES WHERE CUSTOM_TYPE = 1)
-- 		AND bco.CATEGORY_ID IN (SELECT CATEGORY_ID FROM #tbl_mindmap_objpaths)

--CO reverse
DECLARE @CO_OBJ_COUNT INT;
SET @CO_OBJ_COUNT = (SELECT COUNT(*) FROM #tbl_mindmap where object_type_id in (SELECT OBJECT_TYPE_ID FROM BG_CUSTOM_TYPES WHERE CUSTOM_TYPE = 1))
IF (@CO_OBJ_COUNT = 0 OR @OBJECT_TYPE_ID = @CO_OBJECT_TYPE_ID)
BEGIN
INSERT INTO #tbl_mindmap
SELECT bco.id object_id,
			source_object_type_id,
            bga.id association_id,
			bco.[name] object_name,
			rd.REVERSE_TITLE FORWARD_TITLE,
			rd.FORWARD_TITLE REVERSE_TITLE,
                        RD.RM_ID,
	Stuff(parentnames + ''->'' + category_name, 1, 2, '''') AS PARENT_PATH,
	'''' OBJECT_DEFINITION,
	ISNULL(bco.DESCRIPTION, '''') OBJECT_DESCRIPTION,
	BCT.SDI_ENABLED,bco.SDI_FLAG,bco.SDI_DESCRIPTION,bco.SDI_CLASS_ID,SDI.SDI_CLASS_NAME,
			ENTITY_COLOR,
		  DISPLAY_COLOR,
		  DISPLAY_TYPE,BCT.ENTITY_TITLE AS OBJECT_TITLE,root_cat_group,
		  cast('' '' as varchar(300)) OBJECT_LOGICAL_NAME,cast('' '' as varchar(4000)) OBJECT_EXPANDED_LOGICAL_NAME
   FROM bg_custom_objects bco
   JOIN #tbl_mindmap_co cte ON (bco.category_id = cte.category_id)
    JOIN ads_associations   bga ON bco.id = bga.source_object_id
	JOIN BG_CUSTOM_TYPES BCT ON BCT.OBJECT_TYPE_ID  = bga.source_object_type_id
	LEFT JOIN relationship_details rd on BGA.RELATIONSHIP_DETAIL_ID = rd.rd_id
	LEFT JOIN SM_CLASSIFICATION_SDI SDI ON SDI.SDI_CLASS_ID=bco.SDI_CLASS_ID
	WHERE
        target_object_id = @OBJECT_ID
        AND target_object_type_id = @OBJECT_TYPE_ID
        AND source_object_type_id in (SELECT OBJECT_TYPE_ID FROM BG_CUSTOM_TYPES WHERE CUSTOM_TYPE = 1)
-- 		AND bco.CATEGORY_ID IN (SELECT CATEGORY_ID FROM #tbl_mindmap_objpaths)
END;
IF (@WITH_COUNT = 1)
    BEGIN
        DECLARE COUNT_CURSOR CURSOR FOR SELECT OBJECT_ID,OBJECT_TYPE_ID FROM #tbl_mindmap;
        OPEN COUNT_CURSOR 
            SELECT @ROWNUMBER = (SELECT COUNT(*) FROM #tbl_mindmap)
            WHILE @ROWNUMBER > 0
                BEGIN
                    FETCH COUNT_CURSOR INTO @ID, @TYPEID
                    SET @COUNTER = (SELECT OBJ_COUNT FROM FN_MINDMAP_OBJ_COUNT(@ID,@TYPEID,@MASTER_ACCESS,@USER_ID));
                    INSERT INTO #tbl_mindmap_count VALUES(@ID,@TYPEID,@COUNTER);
                    SET @ROWNUMBER = @ROWNUMBER - 1;
                END;
            CLOSE COUNT_CURSOR;  
            DEALLOCATE COUNT_CURSOR;  
        SELECT DISTINCT ROOT_CAT_GROUP,CNT.OBJ_COUNT,CNT.OBJECT_ID,CNT.OBJECT_TYPE_ID,ASSOCIATION_ID,OBJECT_NAME,RM_ID,FORWARD_TITLE,REVERSE_TITLE,PARENT_PATH OBJECT_PATH,OBJECT_DEFINITION,OBJECT_DESCRIPTION,SDI_ENABLED,SDI_FLAG,SDI_DESCRIPTION,SDI_CLASS_ID,SDI_CLASS_NAME, ENTITY_COLOR,DISPLAY_COLOR,DISPLAY_TYPE,OBJECT_TITLE, OBJECT_LOGICAL_NAME, OBJECT_EXPANDED_LOGICAL_NAME FROM #tbl_mindmap LEFT JOIN #tbl_mindmap_count CNT ON CNT.OBJECT_ID = #tbl_mindmap.OBJECT_ID AND CNT.OBJECT_TYPE_ID = #tbl_mindmap.OBJECT_TYPE_ID;
    END
ELSE
    BEGIN
        SELECT ROOT_CAT_GROUP,OBJECT_ID,OBJECT_TYPE_ID,ASSOCIATION_ID,OBJECT_NAME,RM_ID,FORWARD_TITLE,REVERSE_TITLE,PARENT_PATH OBJECT_PATH,OBJECT_DEFINITION,OBJECT_DESCRIPTION,SDI_ENABLED,SDI_FLAG,SDI_DESCRIPTION,SDI_CLASS_ID,SDI_CLASS_NAME, ENTITY_COLOR,DISPLAY_COLOR,DISPLAY_TYPE,OBJECT_TITLE, OBJECT_LOGICAL_NAME, OBJECT_EXPANDED_LOGICAL_NAME FROM #tbl_mindmap;
    END
END');
GO
IF COL_LENGTH('SYSTEM_TABLE_METADATA', 'SCHEMA_NAME') IS NULL
BEGIN
    EXECUTE ('ALTER TABLE SYSTEM_TABLE_METADATA ADD SCHEMA_NAME varchar(250) NULL');
    EXECUTE ('MERGE INTO SYSTEM_TABLE_METADATA T USING
            (SELECT STM_ID,TABLE_NAME,
            CASE
                WHEN  TABLE_NAME LIKE ''.%''  THEN ''[No Schema]''
                WHEN  TABLE_NAME LIKE ''%.%'' THEN SUBSTRING(TABLE_NAME, 1, ABS(CHARINDEX(''.'', TABLE_NAME) - 1))
                ELSE ''[No Schema]''
            END
            AS SCHEMA_NAME,
            E.DATABASE_TYPE FROM SYSTEM_TABLE_METADATA STM JOIN SYS_CON_ENVIRONMENTS E ON E.SCE_ID = STM.SCE_ID
            AND (E.DATABASE_TYPE IN (''SqlServer'', ''Oracle'', ''MapR'', ''Hortonworks'', ''Cloudera'', ''DB2'', ''Greenplum'', ''SqlServerWindows'', ''Teradata'', ''Vertica'', ''Sybase'', ''Netezza'', ''AmazonRedshift''))) 
            S ON (T.STM_ID = S.STM_ID) 
            WHEN MATCHED THEN UPDATE SET T.SCHEMA_NAME = S.SCHEMA_NAME;');
    EXECUTE ('MERGE INTO SYSTEM_TABLE_METADATA T USING
            (SELECT STM_ID,TABLE_NAME,
                CASE
                    WHEN len(TABLE_NAME) - len(replace(TABLE_NAME,''.'','''')) = 2 THEN SUBSTRING(TABLE_NAME,0,CHARINDEX(''.'', TABLE_NAME, (CHARINDEX(''.'', TABLE_NAME, 1))+1))
                ELSE ''[No Schema]''
                END
            AS SCHEMA_NAME,
            E.DATABASE_TYPE FROM SYSTEM_TABLE_METADATA STM JOIN SYS_CON_ENVIRONMENTS E ON E.SCE_ID = STM.SCE_ID AND E.DATABASE_TYPE= ''Snowflake'') S ON (T.STM_ID = S.STM_ID)
            WHEN MATCHED THEN UPDATE SET T.SCHEMA_NAME = S.SCHEMA_NAME;');
END
GO
ALTER VIEW [VALID_SYSTEM_TABLE_METADATA]
AS
SELECT STM.* FROM SYSTEM_TABLE_METADATA STM JOIN ACTIVE_SYS_CON_ENVIRONMENTS SCS ON STM.SCE_ID = SCS.SCE_ID WHERE STM.VALID = 1 OR STM.VALID IS NULL
GO
IF EXISTS (SELECT * FROM SYS.OBJECTS WHERE OBJECT_ID = OBJECT_ID(N'FN_HAS_BGM_OBJECT_ACCESS') AND TYPE IN (N'FN', N'IF', N'TF', N'FS', N'FT'))
	BEGIN
		DROP FUNCTION [FN_HAS_BGM_OBJECT_ACCESS];
	END
GO

CREATE FUNCTION [FN_HAS_BGM_OBJECT_ACCESS]
   (@OBJECT_ID BIGINT, @OBJECT_TYPE_ID BIGINT, @USER_ID VARCHAR(200))
   RETURNS BIT AS
   BEGIN
      DECLARE @OBJECT_ACCESS BIT = 0;
	  DECLARE @ASSIGNED_OBJECT_ID BIGINT;
	  DECLARE @ASSIGNED_OBJECT_TYPE_ID BIGINT;
	  DECLARE @SCOPE_OBJECT_TYPE_ID BIGINT = (SELECT OBJECT_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE = 'ADS_USER');

	  SELECT TOP 1 @ASSIGNED_OBJECT_ID = OBJECT_ID, @ASSIGNED_OBJECT_TYPE_ID = OBJECT_TYPE_ID FROM FN_GET_OBJECT_HIR(@OBJECT_ID, @OBJECT_TYPE_ID, null) where OBJECT_ID <> -1 ORDER BY OBJECT_ORDER DESC;

	  IF @ASSIGNED_OBJECT_ID IS NULL
		BEGIN
			IF EXISTS (SELECT * FROM BG_CATEGORIES WHERE CATEGORY_ID = @OBJECT_ID AND OBJECT_TYPE_ID = @OBJECT_TYPE_ID AND PARENT_CATEGORY_ID = -1)
				BEGIN
					SET @ASSIGNED_OBJECT_ID = @OBJECT_ID;
					SET @ASSIGNED_OBJECT_TYPE_ID = @OBJECT_TYPE_ID;
				END;
		END;

	  IF @ASSIGNED_OBJECT_ID IS NOT NULL
		BEGIN
			IF EXISTS (SELECT * FROM ADS_OBJECT_TO_OBJECT_SCOPE WHERE OBJECT_ID = @ASSIGNED_OBJECT_ID AND OBJECT_TYPE_ID = @ASSIGNED_OBJECT_TYPE_ID AND SCOPE_OBJECT_ID = @USER_ID AND SCOPE_OBJECT_TYPE_ID = @SCOPE_OBJECT_TYPE_ID)
				BEGIN
					SET @OBJECT_ACCESS = 1;
				END;
		END;

      RETURN @OBJECT_ACCESS;
   END
GO
IF NOT EXISTS (SELECT * FROM ADS_KEY_VALUE_OBJECTS WHERE  OBJECT_TYPE = 'ADS_SECURITY_ROLE')
BEGIN
    INSERT INTO ADS_KEY_VALUE_OBJECTS (OBJECT_TYPE,OBJECT_TABLE,OBJECT_TABLE_COLUMN,OBJECT_PARENT_TYPE,OBJECT_PARENT_COLUMN_ID,OBJECT_LEVEL,MODULE_KEY,SYSTEM_BASED,OBJECT_TITLE)
    SELECT 'ADS_SECURITY_ROLE','SECURITY_ROLES','','','','1','com.ads.mm.permission.generic','1','Security Roles'
END
GO
IF NOT EXISTS (SELECT * FROM ADS_KEY_VALUE_OBJECTS WHERE  OBJECT_TYPE = 'BGM_CUSTOM')
BEGIN
    INSERT INTO ADS_KEY_VALUE_OBJECTS (OBJECT_TYPE,OBJECT_TABLE,OBJECT_TABLE_COLUMN,OBJECT_PARENT_TYPE,OBJECT_PARENT_COLUMN_ID,OBJECT_LEVEL,MODULE_KEY,SYSTEM_BASED,OBJECT_TITLE)
        SELECT 'BGM_CUSTOM_CATALOGS','','','','','0','com.ads.mm.permission.bgm','1','Custom Objects'
	UNION ALL
	SELECT 'BGM_CUSTOM_CATALOG','BG_CATEGORIES','OBJECT_TYPE_ID','BGM_CUSTOM_CATALOGS','','1','com.ads.mm.permission.bgm','1','Catalog'
	UNION ALL
	SELECT 'BGM_CUSTOM','BG_CUSTOM_OBJECTS','ID','BGM_CUSTOM_CATALOG','','2','com.ads.mm.permission.bgm','1','Custom Object'
END
GO
IF EXISTS (SELECT * FROM SYS.OBJECTS WHERE OBJECT_ID = OBJECT_ID(N'FN_GET_OBJECT_ROLES_BY_USER') AND TYPE IN (N'FN', N'IF', N'TF', N'FS', N'FT'))
	BEGIN
		DROP FUNCTION [FN_GET_OBJECT_ROLES_BY_USER];
	END
GO
CREATE FUNCTION [FN_GET_OBJECT_ROLES_BY_USER]
   (@OBJECT_ID BIGINT, @OBJECT_TYPE_ID BIGINT, @USER_ID VARCHAR(200))
   RETURNS @TT_OBJECT_ROLES_BY_USER TABLE(ROLE_ID VARCHAR(100)) AS
   BEGIN
      DECLARE @OBJECT_ACCESS BIT = 0;
	  DECLARE @ASSIGNED_OBJECT_ID BIGINT;
	  DECLARE @ASSIGNED_OBJECT_TYPE_ID BIGINT;
	  DECLARE @ASSIGNED_OBJECT_TYPE_MODULE VARCHAR(128) = (SELECT MODULE_KEY FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE_ID = @OBJECT_TYPE_ID);
	  DECLARE @OBJECT_TYPE VARCHAR(500) = (SELECT OBJECT_TYPE FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE_ID = @OBJECT_TYPE_ID);
	  DECLARE @USER_SCOPE_OBJECT_TYPE_ID BIGINT = (SELECT OBJECT_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE = 'ADS_USER');
	  DECLARE @ROLE_SCOPE_OBJECT_TYPE_ID BIGINT = (SELECT OBJECT_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE = 'ADS_SECURITY_ROLE');        
       
                IF @ASSIGNED_OBJECT_TYPE_MODULE = 'com.ads.mm.permission.tm'
		BEGIN
			SELECT TOP 1 @OBJECT_ID = OBJECT_ID , @OBJECT_TYPE_ID = OBJECT_TYPE_ID FROM TCM_OBJECT_TESTCASE where TESTCASE_ID = @OBJECT_ID;
                        set @ASSIGNED_OBJECT_TYPE_MODULE  = (SELECT MODULE_KEY FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE_ID = @OBJECT_TYPE_ID);
                        set @OBJECT_TYPE  = (SELECT OBJECT_TYPE FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE_ID = @OBJECT_TYPE_ID);
                END;
          
	        IF @ASSIGNED_OBJECT_TYPE_MODULE = 'com.ads.mm.permission.bgm'
		BEGIN
			SELECT TOP 1 @ASSIGNED_OBJECT_ID = OBJECT_ID, @ASSIGNED_OBJECT_TYPE_ID = OBJECT_TYPE_ID FROM FN_GET_OBJECT_HIR(@OBJECT_ID, @OBJECT_TYPE_ID, null) where OBJECT_ID <> -1 ORDER BY OBJECT_ORDER DESC;

			IF @ASSIGNED_OBJECT_ID IS NULL
			BEGIN

				IF EXISTS (SELECT * FROM BG_CATEGORIES WHERE CATEGORY_ID = @OBJECT_ID AND OBJECT_TYPE_ID = @OBJECT_TYPE_ID AND PARENT_CATEGORY_ID = -1)
				BEGIN
					SET @ASSIGNED_OBJECT_ID = @OBJECT_ID;
					SET @ASSIGNED_OBJECT_TYPE_ID = @OBJECT_TYPE_ID;
				END;
			END;
		END;
		ELSE IF @ASSIGNED_OBJECT_TYPE_MODULE = 'com.ads.mm.permission.sm'
		BEGIN

			IF @OBJECT_TYPE = 'SM_ENVIRONMENT'
				BEGIN
					SET @ASSIGNED_OBJECT_ID = @OBJECT_ID;
				END;
			ELSE IF @OBJECT_TYPE = 'SM_TABLE'
				BEGIN
					SET @ASSIGNED_OBJECT_ID = (SELECT SCE_ID FROM SYSTEM_TABLE_METADATA WHERE STM_ID = @OBJECT_ID);
				END;
			ELSE IF @OBJECT_TYPE = 'SM_COLUMN'
				BEGIN
					SET @ASSIGNED_OBJECT_ID = (SELECT SCE_ID FROM SYSTEM_TABLE_COLUMNS_METADATA WHERE STCM_ID = @OBJECT_ID);
				END;

			SET @ASSIGNED_OBJECT_TYPE_ID = (SELECT OBJECT_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE = 'SM_ENVIRONMENT');

		END;
		ELSE IF @ASSIGNED_OBJECT_TYPE_MODULE = 'com.ads.mm.permission.mm'
		BEGIN
			SELECT TOP 1 @ASSIGNED_OBJECT_ID = OBJECT_ID, @ASSIGNED_OBJECT_TYPE_ID = OBJECT_TYPE_ID FROM FN_GET_OBJECT_HIR(@OBJECT_ID, @OBJECT_TYPE_ID, null) where OBJECT_ID <> -1 ORDER BY OBJECT_ORDER DESC;

			IF @ASSIGNED_OBJECT_ID IS NULL
			BEGIN

				IF EXISTS (SELECT * FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE_ID = @OBJECT_TYPE_ID AND OBJECT_TYPE = 'MM_PROJECT')
				BEGIN
					SET @ASSIGNED_OBJECT_ID = @OBJECT_ID;
					SET @ASSIGNED_OBJECT_TYPE_ID = @OBJECT_TYPE_ID;
				END;
			END;
		END;

		IF @ASSIGNED_OBJECT_ID IS NOT NULL
		BEGIN
			IF @ASSIGNED_OBJECT_TYPE_MODULE = 'com.ads.mm.permission.bgm' OR @ASSIGNED_OBJECT_TYPE_MODULE = 'com.ads.mm.permission.sm'
			BEGIN
				IF EXISTS (SELECT * FROM ADS_OBJECT_TO_OBJECT_SCOPE WHERE OBJECT_ID = @ASSIGNED_OBJECT_ID AND OBJECT_TYPE_ID = @ASSIGNED_OBJECT_TYPE_ID AND SCOPE_OBJECT_ID = @USER_ID AND SCOPE_OBJECT_TYPE_ID = @USER_SCOPE_OBJECT_TYPE_ID)
				BEGIN
					INSERT INTO @TT_OBJECT_ROLES_BY_USER SELECT ROLE_ID FROM USER_ASSIGNED_ROLES WHERE USER_ID = @USER_ID;
				END;
				ELSE IF EXISTS (SELECT * FROM ADS_OBJECT_TO_OBJECT_SCOPE WHERE OBJECT_ID = @ASSIGNED_OBJECT_ID AND OBJECT_TYPE_ID = @ASSIGNED_OBJECT_TYPE_ID AND SCOPE_OBJECT_ID IN (SELECT ROLE_ID FROM USER_ASSIGNED_ROLES WHERE USER_ID = @USER_ID) AND SCOPE_OBJECT_TYPE_ID = @ROLE_SCOPE_OBJECT_TYPE_ID)
				BEGIN
					INSERT INTO @TT_OBJECT_ROLES_BY_USER SELECT SCOPE_OBJECT_ID FROM ADS_OBJECT_TO_OBJECT_SCOPE WHERE OBJECT_ID = @ASSIGNED_OBJECT_ID AND OBJECT_TYPE_ID = @ASSIGNED_OBJECT_TYPE_ID AND SCOPE_OBJECT_ID IN (SELECT ROLE_ID FROM USER_ASSIGNED_ROLES WHERE USER_ID = @USER_ID) AND SCOPE_OBJECT_TYPE_ID = @ROLE_SCOPE_OBJECT_TYPE_ID;
				END;
			END;
			ELSE IF @ASSIGNED_OBJECT_TYPE_MODULE = 'com.ads.mm.permission.mm'
			BEGIN
				IF EXISTS (SELECT * FROM PROJECT_RESOURCES WHERE PROJ_ID = @ASSIGNED_OBJECT_ID AND USER_ID = @USER_ID)
				BEGIN
					INSERT INTO @TT_OBJECT_ROLES_BY_USER SELECT ROLE_ID FROM USER_ASSIGNED_ROLES WHERE USER_ID = @USER_ID;
				END;
				ELSE IF EXISTS (SELECT * FROM ADS_OBJECT_TO_OBJECT_SCOPE WHERE OBJECT_ID = @ASSIGNED_OBJECT_ID AND OBJECT_TYPE_ID = @ASSIGNED_OBJECT_TYPE_ID AND SCOPE_OBJECT_ID IN (SELECT ROLE_ID FROM USER_ASSIGNED_ROLES WHERE USER_ID = @USER_ID) AND SCOPE_OBJECT_TYPE_ID = @ROLE_SCOPE_OBJECT_TYPE_ID)
				BEGIN
					INSERT INTO @TT_OBJECT_ROLES_BY_USER SELECT SCOPE_OBJECT_ID FROM ADS_OBJECT_TO_OBJECT_SCOPE WHERE OBJECT_ID = @ASSIGNED_OBJECT_ID AND OBJECT_TYPE_ID = @ASSIGNED_OBJECT_TYPE_ID AND SCOPE_OBJECT_ID IN (SELECT ROLE_ID FROM USER_ASSIGNED_ROLES WHERE USER_ID = @USER_ID) AND SCOPE_OBJECT_TYPE_ID = @ROLE_SCOPE_OBJECT_TYPE_ID;
				END;
			END;
		END;

      RETURN;
   END
GO

IF EXISTS(SELECT * FROM SYS.VIEWS WHERE NAME = 'PROJECT_ASSIGNMENTS_V')
	BEGIN
		DROP VIEW PROJECT_ASSIGNMENTS_V;
	END
GO

CREATE VIEW PROJECT_ASSIGNMENTS_V AS
SELECT OBJECT_ID, P.PROJ_NAME OBJECT_NAME, ASSIGNMENT_ID
FROM PROJECT P
JOIN (
SELECT PROJ_ID OBJECT_ID, USER_ID ASSIGNMENT_ID
FROM PROJECT_RESOURCES 
UNION
SELECT CAST(OBJECT_ID AS bigint), UAR.USER_ID ASSIGNMENT_ID
FROM ADS_OBJECT_TO_OBJECT_SCOPE AOTOS
JOIN USER_ASSIGNED_ROLES UAR
ON UAR.ROLE_ID = AOTOS.SCOPE_OBJECT_ID
WHERE AOTOS.OBJECT_TYPE_ID = (SELECT OBJECT_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE = 'MM_PROJECT')
AND AOTOS.SCOPE_OBJECT_TYPE_ID = (SELECT OBJECT_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE = 'ADS_SECURITY_ROLE')) PROJS
ON PROJS.OBJECT_ID = P.PROJ_ID;
GO

IF NOT EXISTS(SELECT * FROM APP_PREFERENCES WHERE PREFERENCE_NAME = 'SEND_EMAIL_ON_SDI_BULK_UPDATE_MESSAGE')
BEGIN
    INSERT INTO APP_PREFERENCES(PREFERENCE_NAME,PREFERENCE_VALUE) VALUES ('SEND_EMAIL_ON_SDI_BULK_UPDATE_SUBJECT','Sensitive Data Indicator Email Subject - DO NOT REPLY');
    INSERT INTO APP_PREFERENCES(PREFERENCE_NAME,PREFERENCE_VALUE) VALUES ('SEND_EMAIL_ON_SDI_BULK_UPDATE_MESSAGE','Hi,<br><br>This is a system generated email notification.<br><br><b>@executionMessage@</b></br>');
    INSERT INTO APP_PREFERENCES(PREFERENCE_NAME,PREFERENCE_VALUE) VALUES ('SEND_EMAIL_ON_SDI_BULK_UPDATE','true');
END
GO
IF NOT EXISTS(SELECT * FROM APP_PREFERENCES WHERE PREFERENCE_NAME = 'SEND_EMAIL_ON_IMPORT_BUSINESS_OBJECTS_MESSAGE')
BEGIN
    INSERT INTO APP_PREFERENCES(PREFERENCE_NAME,PREFERENCE_VALUE) VALUES ('SEND_EMAIL_ON_IMPORT_BUSINESS_OBJECTS_SUBJECT','IMPORTING BUSINESS OBJECTS Email Subject - DO NOT REPLY');
    INSERT INTO APP_PREFERENCES(PREFERENCE_NAME,PREFERENCE_VALUE) VALUES ('SEND_EMAIL_ON_IMPORT_BUSINESS_OBJECTS_MESSAGE','Hi,<br><br>This is a system generated email notification.<br><br><b>@executionMessage@</b></br>');
    INSERT INTO APP_PREFERENCES(PREFERENCE_NAME,PREFERENCE_VALUE) VALUES ('SEND_EMAIL_ON_IMPORT_BUSINESS_OBJECTS','true');
END
GO
IF (OBJECTPROPERTY(OBJECT_ID('GET_MINDMAP_ASSOCIATIONS'),'ISTABLEFUNCTION') = 1)
    BEGIN
        DROP FUNCTION GET_MINDMAP_ASSOCIATIONS
    END
GO
CREATE FUNCTION [GET_MINDMAP_ASSOCIATIONS]
(
 @OBJECT_ID BIGINT,
 @OBJECT_TYPE_ID BIGINT,
 @MASTER_ACCESS BIGINT,
 @USER_ID VARCHAR(20)
)
RETURNS @VALUETABLE TABLE (OBJECT_NAME varchar(max), 
    OBJECT_ID BIGINT,
    OBJECT_TYPE_ID INT,
    OBJECT_TYPE VARCHAR(100),
    OBJECT_TITLE  VARCHAR(300), 
    OBJECT_COLOR  VARCHAR(300), 
    OBJECT_PATH VARCHAR(MAX),SDI_FLAG [char](1),
    SDI_DESCRIPTION [VARCHAR](MAX) NULL,
    SDI_CLASS_ID INT , SDI_CLASS_NAME [VARCHAR](MAX),
    SDI_ENABLED [char](1),
    OBJECT_LOGICAL_NAME VARCHAR(300),
    OBJECT_EXPANDED_LOGICAL_NAME VARCHAR(4000),
    MD_OBJECT_COMMENTS VARCHAR(max),
    MD_OBJECT_DEFINITION VARCHAR(max))
AS
BEGIN
DECLARE @USER_OBJ_TYPE_ID varchar(20);
DECLARE @ROLE_OBJ_TYPE_ID varchar(20);
DECLARE @ROW_COUNT BIGINT;
DECLARE @CYCLEIDS_COUNT BIGINT;
DECLARE @COUNTER  BIGINT = 1;
DECLARE @RET_TABLE TABLE(id bigint identity, OBJECT_ID BIGINT, OBJECT_TYPE_ID BIGINT);
DECLARE @SCEID_TABLE TABLE(id bigint);
DECLARE @LOOP_TABLE TABLE(OBJECT_ID bigint, OBJECT_TYPE_ID bigint);
DECLARE @ALL_PERMITTED_OBJECTS TABLE(OBJECT_ID BIGINT, OBJECT_TYPE_ID BIGINT);
DECLARE @PERMITTED_OBJECTS TABLE(OBJECT_ID BIGINT, OBJECT_TYPE_ID BIGINT);
DECLARE @HIERARCHY TABLE(CATEGORY_ID BIGINT, PATH VARCHAR(1000));
SET @USER_OBJ_TYPE_ID = (SELECT OBJECT_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE = 'ADS_USER');
SET @ROLE_OBJ_TYPE_ID = (SELECT OBJECT_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE = 'ADS_SECURITY_ROLE');
declare @SM_SYSTEM_OBJ_TYPE_ID bigint = (SELECT OBJECT_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE = 'SM_SYSTEM');
declare @SM_ENVIRONMENT_OBJ_TYPE_ID bigint = (SELECT OBJECT_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE = 'SM_ENVIRONMENT');
declare @SM_TABLE_OBJ_TYPE_ID bigint = (SELECT OBJECT_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE = 'SM_TABLE');
declare @SM_COLUMN_OBJ_TYPE_ID bigint = (SELECT OBJECT_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE = 'SM_COLUMN');
declare @BGM_TERM_OBJ_TYPE_ID bigint = (SELECT OBJECT_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE = 'BGM_TERM');
declare @BGM_POLICY_OBJ_TYPE_ID bigint = (SELECT OBJECT_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE = 'BGM_POLICY');
declare @BGM_RULE_OBJ_TYPE_ID bigint = (SELECT OBJECT_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE = 'BGM_RULE');

WITH bgcats AS
  (SELECT   category_id,
            Cast((category_name) AS VARCHAR(MAX)) AS PATH
            FROM bg_categories bc
            WHERE parent_category_id = -1 
			AND ( 1=@MASTER_ACCESS OR EXISTS(SELECT 1 FROM ADS_OBJECT_TO_OBJECT_SCOPE aotos where 
                aotos.OBJECT_ID = bc.CATEGORY_ID   and aotos.OBJECT_TYPE_ID = bc.OBJECT_TYPE_ID
            and ((aotos.SCOPE_OBJECT_TYPE_ID = @USER_OBJ_TYPE_ID AND aotos.SCOPE_OBJECT_ID = @USER_ID)
			OR (aotos.SCOPE_OBJECT_TYPE_ID = @ROLE_OBJ_TYPE_ID AND aotos.SCOPE_OBJECT_ID IN (SELECT ROLE_ID FROM USER_ASSIGNED_ROLES WHERE USER_ID = @USER_ID)))))

            UNION ALL
            SELECT BRC.category_id,
            Cast((BR.path + '/' + BRC.category_name) AS VARCHAR(MAX)) AS PATH
            FROM bg_categories AS BRC
            JOIN bgcats AS BR ON BRC.parent_category_id = BR.category_id) INSERT INTO @HIERARCHY SELECT * FROM bgcats;
            
            INSERT INTO @SCEID_TABLE select SOURCE_OBJECT_ID  from 
                        ADS_ASSOCIATIONS where SOURCE_OBJECT_TYPE_ID = @SM_ENVIRONMENT_OBJ_TYPE_ID UNION ALL
                        SELECT TARGET_OBJECT_ID FROM 
                        ADS_ASSOCIATIONS WHERE TARGET_OBJECT_TYPE_ID = @SM_ENVIRONMENT_OBJ_TYPE_ID
                        UNION ALL
                        SELECT SCE_ID FROM 
                        system_table_metadata WHERE STM_ID IN(
                        select SOURCE_OBJECT_ID from 
                        ADS_ASSOCIATIONS where SOURCE_OBJECT_TYPE_ID = @SM_TABLE_OBJ_TYPE_ID  UNION ALL
                        SELECT TARGET_OBJECT_ID OBJECT_ID FROM 
                        ADS_ASSOCIATIONS WHERE TARGET_OBJECT_TYPE_ID = @SM_TABLE_OBJ_TYPE_ID)
                        UNION ALL
                        SELECT SCE_ID FROM 
                        system_table_columns_metadata WHERE STCM_ID IN(
                        select SOURCE_OBJECT_ID from 
                        ADS_ASSOCIATIONS where SOURCE_OBJECT_TYPE_ID = @SM_COLUMN_OBJ_TYPE_ID  UNION ALL
                        SELECT TARGET_OBJECT_ID FROM 
                        ADS_ASSOCIATIONS WHERE TARGET_OBJECT_TYPE_ID = @SM_COLUMN_OBJ_TYPE_ID);
			
            INSERT INTO @PERMITTED_OBJECTS SELECT SCE.SCE_ID OBJECT_ID, @SM_ENVIRONMENT_OBJ_TYPE_ID OBJECT_TYPE_ID 
                        FROM (SELECT SCE_ID FROM SYS_CON_ENVIRONMENTS SCE where SCE.SCE_ID IN (select ID FROM @SCEID_TABLE)) SCE
			where exists (select 1 from ADS_OBJECT_TO_OBJECT_SCOPE AOTS where AOTS.OBJECT_ID = SCE.SCE_ID
			AND AOTS.OBJECT_TYPE_ID = @SM_ENVIRONMENT_OBJ_TYPE_ID
			AND ((AOTS.SCOPE_OBJECT_TYPE_ID = @USER_OBJ_TYPE_ID AND AOTS.SCOPE_OBJECT_ID = @USER_ID) 
			OR (AOTS.SCOPE_OBJECT_TYPE_ID = @ROLE_OBJ_TYPE_ID AND AOTS.SCOPE_OBJECT_ID IN (SELECT ROLE_ID FROM USER_ASSIGNED_ROLES WHERE USER_ID = @USER_ID))))

			UNION ALL
			SELECT STM_ID, @SM_TABLE_OBJ_TYPE_ID FROM SYSTEM_TABLE_METADATA STM  
			WHERE SCE_ID IN (SELECT SCE_ID FROM ADS_OBJECT_TO_OBJECT_SCOPE AOTS JOIN SYS_CON_ENVIRONMENTS SCE ON AOTS.OBJECT_ID = SCE.SCE_ID
                        AND AOTS.OBJECT_TYPE_ID = @SM_ENVIRONMENT_OBJ_TYPE_ID
			AND ((AOTS.SCOPE_OBJECT_TYPE_ID = @USER_OBJ_TYPE_ID AND AOTS.SCOPE_OBJECT_ID = @USER_ID) 
			OR (AOTS.SCOPE_OBJECT_TYPE_ID = @ROLE_OBJ_TYPE_ID AND AOTS.SCOPE_OBJECT_ID IN (SELECT ROLE_ID FROM USER_ASSIGNED_ROLES WHERE USER_ID = @USER_ID))))
                       
                         AND SCE_ID IN (select ID FROM @SCEID_TABLE)

			UNION ALL
			SELECT STCM_ID, @SM_COLUMN_OBJ_TYPE_ID  FROM SYSTEM_TABLE_COLUMNS_METADATA STCM  
			WHERE SCE_ID IN (SELECT SCE_ID FROM ADS_OBJECT_TO_OBJECT_SCOPE AOTS JOIN SYS_CON_ENVIRONMENTS SCE ON AOTS.OBJECT_ID = SCE.SCE_ID
			AND AOTS.OBJECT_TYPE_ID = @SM_ENVIRONMENT_OBJ_TYPE_ID
                        AND ((AOTS.SCOPE_OBJECT_TYPE_ID = @USER_OBJ_TYPE_ID AND AOTS.SCOPE_OBJECT_ID = @USER_ID) 
			OR (AOTS.SCOPE_OBJECT_TYPE_ID = @ROLE_OBJ_TYPE_ID AND AOTS.SCOPE_OBJECT_ID IN (SELECT ROLE_ID FROM USER_ASSIGNED_ROLES WHERE USER_ID = @USER_ID))))

                         AND SCE_ID IN (select ID FROM @SCEID_TABLE)


			UNION ALL
			SELECT BUS_TERM_ID, @BGM_TERM_OBJ_TYPE_ID  FROM BUSINESS_TERMS BT 
				WHERE	CATEGORY_ID IN (SELECT CATEGORY_ID FROM @HIERARCHY) 
                         
                    
                         AND BUS_TERM_ID IN (SELECT SOURCE_OBJECT_ID FROM 
                        ADS_ASSOCIATIONS WHERE SOURCE_OBJECT_TYPE_ID = @BGM_TERM_OBJ_TYPE_ID UNION ALL
                       SELECT TARGET_OBJECT_ID FROM 
                        ADS_ASSOCIATIONS WHERE TARGET_OBJECT_TYPE_ID = @BGM_TERM_OBJ_TYPE_ID)

			UNION ALL
			SELECT ID, @BGM_POLICY_OBJ_TYPE_ID FROM BG_POLICIES BP
			WHERE CATALOG_ID IN (SELECT CATEGORY_ID FROM @HIERARCHY)
                         
                        AND ID IN (SELECT SOURCE_OBJECT_ID FROM 
                        ADS_ASSOCIATIONS WHERE SOURCE_OBJECT_TYPE_ID = @BGM_POLICY_OBJ_TYPE_ID UNION ALL
                        SELECT TARGET_OBJECT_ID FROM 
                        ADS_ASSOCIATIONS WHERE TARGET_OBJECT_TYPE_ID = @BGM_POLICY_OBJ_TYPE_ID)


			UNION ALL
			SELECT ID, @BGM_RULE_OBJ_TYPE_ID FROM BG_BUSINESS_RULES BR
			WHERE CATALOG_ID IN (SELECT CATEGORY_ID FROM @HIERARCHY) 

                        AND ID IN (SELECT SOURCE_OBJECT_ID FROM 
                        ADS_ASSOCIATIONS WHERE SOURCE_OBJECT_TYPE_ID = @BGM_RULE_OBJ_TYPE_ID UNION ALL
                        SELECT TARGET_OBJECT_ID FROM 
                        ADS_ASSOCIATIONS WHERE TARGET_OBJECT_TYPE_ID = @BGM_RULE_OBJ_TYPE_ID)

			UNION ALL
			SELECT ID, OBJECT_TYPE_ID FROM BG_CUSTOM_OBJECTS BCO
			WHERE CATEGORY_ID IN (SELECT CATEGORY_ID FROM @HIERARCHY)
                        
                        AND ID IN (SELECT SOURCE_OBJECT_ID FROM 
                        ADS_ASSOCIATIONS WHERE SOURCE_OBJECT_TYPE_ID = BCO.OBJECT_TYPE_ID UNION ALL
                        SELECT TARGET_OBJECT_ID FROM 
                        ADS_ASSOCIATIONS WHERE TARGET_OBJECT_TYPE_ID = BCO.OBJECT_TYPE_ID)

			UNION ALL
			SELECT SYSTEM_ID, @SM_SYSTEM_OBJ_TYPE_ID  FROM SYSTEM_DEFINITION_DETAILS;
            
            INSERT INTO @LOOP_TABLE
            SELECT ASS.TARGET_OBJECT_ID, ASS.TARGET_OBJECT_TYPE_ID FROM ADS_ASSOCIATIONS ASS 
            WHERE ASS.SOURCE_OBJECT_ID = @OBJECT_ID AND ASS.SOURCE_OBJECT_TYPE_ID = @OBJECT_TYPE_ID
            UNION
            SELECT ASS.SOURCE_OBJECT_ID, ASS.SOURCE_OBJECT_TYPE_ID FROM ADS_ASSOCIATIONS ASS 
            WHERE ASS.TARGET_OBJECT_ID = @OBJECT_ID AND ASS.TARGET_OBJECT_TYPE_ID = @OBJECT_TYPE_ID;
            
            INSERT INTO @RET_TABLE SELECT OBJECT_ID, OBJECT_TYPE_ID FROM @LOOP_TABLE LT 
            WHERE (1=@MASTER_ACCESS OR EXISTS(SELECT OBJECT_ID, OBJECT_TYPE_ID FROM @PERMITTED_OBJECTS PO
            WHERE LT.OBJECT_ID = PO.OBJECT_ID AND LT.OBJECT_TYPE_ID = PO.OBJECT_TYPE_ID));

            SELECT @ROW_COUNT = @@ROWCOUNT;
            WHILE (@COUNTER <= @ROW_COUNT ) 
		BEGIN 
                    SELECT @OBJECT_ID = OBJECT_ID, @OBJECT_TYPE_ID = OBJECT_TYPE_ID FROM @RET_TABLE WHERE ID = @COUNTER;
                    INSERT INTO @RET_TABLE
                    SELECT * FROM (
                    SELECT ASS.TARGET_OBJECT_ID OBJECT_ID, ASS.TARGET_OBJECT_TYPE_ID OBJECT_TYPE_ID FROM ADS_ASSOCIATIONS ASS 
                    WHERE ASS.SOURCE_OBJECT_ID = @OBJECT_ID AND ASS.SOURCE_OBJECT_TYPE_ID = @OBJECT_TYPE_ID
                    UNION
                    SELECT ASS.SOURCE_OBJECT_ID, ASS.SOURCE_OBJECT_TYPE_ID FROM ADS_ASSOCIATIONS ASS 
                    WHERE ASS.TARGET_OBJECT_ID = @OBJECT_ID AND ASS.TARGET_OBJECT_TYPE_ID = @OBJECT_TYPE_ID) ASSOC
                    WHERE NOT EXISTS (SELECT 1 FROM @RET_TABLE RT WHERE RT.OBJECT_ID = ASSOC.OBJECT_ID AND 
                        RT.OBJECT_TYPE_ID = ASSOC.OBJECT_TYPE_ID)
                    AND (1=@MASTER_ACCESS OR EXISTS(SELECT OBJECT_ID, OBJECT_TYPE_ID FROM @PERMITTED_OBJECTS PO
                        WHERE ASSOC.OBJECT_ID = PO.OBJECT_ID AND ASSOC.OBJECT_TYPE_ID = PO.OBJECT_TYPE_ID));
                    SET @ROW_COUNT = (SELECT MAX(ID) FROM @RET_TABLE);
                    SET @COUNTER = @COUNTER + 1;
		END;
                INSERT INTO @RET_TABLE SELECT @OBJECT_ID, @OBJECT_TYPE_ID;
                INSERT INTO @ALL_PERMITTED_OBJECTS SELECT distinct OBJECT_ID, OBJECT_TYPE_ID  FROM @RET_TABLE;

            INSERT INTO @VALUETABLE
            select  SD.SYSTEM_NAME OBJECT_NAME, AST.OBJECT_ID,AST.OBJECT_TYPE_ID, AKV.OBJECT_TYPE, 
            (SELECT VALUE FROM DBO.SPLIT('`',(SELECT PREFERENCE_VALUE FROM APP_PREFERENCES WHERE PREFERENCE_NAME = 'SM_SYSTEM_PREFERENCE')) WHERE RowID = 2) OBJECT_TITLE,
            (SELECT VALUE FROM DBO.SPLIT('`',(SELECT PREFERENCE_VALUE FROM APP_PREFERENCES WHERE PREFERENCE_NAME = 'SM_SYSTEM_PREFERENCE')) WHERE RowID = 1) OBJECT_COLOR,
            SD.SYSTEM_NAME OBJECT_PATH ,SD.SDI_FLAG, SD.SDI_DESCRIPTION, SD.SDI_CLASS_ID,SDI.SDI_CLASS_NAME, 1 as SDI_ENABLED,' ' OBJECT_LOGICAL_NAME,' ' OBJECT_EXPANDED_LOGICAL_NAME,' ' MD_OBJECT_COMMENTS,' ' MD_OBJECT_DEFINITION from @ALL_PERMITTED_OBJECTS AST JOIN SYSTEM_DEFINITION_DETAILS SD 
            ON AST.OBJECT_ID = SD.SYSTEM_ID LEFT JOIN SM_CLASSIFICATION_SDI SDI ON SDI.SDI_CLASS_ID = SD.SDI_CLASS_ID JOIN ADS_KEY_VALUE_OBJECTS AKV
            ON  AST.OBJECT_TYPE_ID = AKV.OBJECT_TYPE_ID AND AKV.OBJECT_TYPE ='SM_SYSTEM'

            INSERT INTO @VALUETABLE
            select  SCE.SYSTEM_ENVIRONMENT_NAME OBJECT_NAME, AST.OBJECT_ID,AST.OBJECT_TYPE_ID, AKV.OBJECT_TYPE,
            (SELECT VALUE FROM DBO.SPLIT('`',(SELECT PREFERENCE_VALUE FROM APP_PREFERENCES WHERE PREFERENCE_NAME = 'SM_ENVIRONMENT_PREFERENCE')) WHERE RowID = 2) OBJECT_TITLE,
            (SELECT VALUE FROM DBO.SPLIT('`',(SELECT PREFERENCE_VALUE FROM APP_PREFERENCES WHERE PREFERENCE_NAME = 'SM_ENVIRONMENT_PREFERENCE')) WHERE RowID = 1) OBJECT_COLOR,
            SCE.SYSTEM_NAME+'/'+SCE.SYSTEM_ENVIRONMENT_NAME OBJECT_PATH, SCE.SDI_FLAG, SCE.SDI_DESCRIPTION, SCE.SDI_CLASS_ID,SDI.SDI_CLASS_NAME, 1 as SDI_ENABLED,
			' ' OBJECT_LOGICAL_NAME,' ' OBJECT_EXPANDED_LOGICAL_NAME,' ' MD_OBJECT_COMMENTS,' ' MD_OBJECT_DEFINITION  from @ALL_PERMITTED_OBJECTS AST JOIN SYS_CON_ENVIRONMENTS SCE 
            ON AST.OBJECT_ID = SCE.SCE_ID LEFT JOIN SM_CLASSIFICATION_SDI SDI ON SDI.SDI_CLASS_ID = SCE.SDI_CLASS_ID  JOIN ADS_KEY_VALUE_OBJECTS AKV
            ON  AST.OBJECT_TYPE_ID = AKV.OBJECT_TYPE_ID AND AKV.OBJECT_TYPE ='SM_ENVIRONMENT'
            INSERT INTO @VALUETABLE
            SELECT VSTM.TABLE_NAME OBJECT_NAME, AST.OBJECT_ID,AST.OBJECT_TYPE_ID, AKV.OBJECT_TYPE, 
            (SELECT VALUE FROM DBO.SPLIT('`',(SELECT PREFERENCE_VALUE FROM APP_PREFERENCES WHERE PREFERENCE_NAME = 'SM_TABLE_PREFERENCE')) WHERE RowID = 2) OBJECT_TITLE,
            (SELECT VALUE FROM DBO.SPLIT('`',(SELECT PREFERENCE_VALUE FROM APP_PREFERENCES WHERE PREFERENCE_NAME = 'SM_TABLE_PREFERENCE')) WHERE RowID = 1) OBJECT_COLOR,
            SD.SYSTEM_NAME+'/'+VSTM.SYSTEM_ENV_NAME+'/'+VSTM.TABLE_NAME OBJECT_PATH ,VSTM.SDI_FLAG, VSTM.SDI_DESCRIPTION, VSTM.SDI_CLASS_ID,SDI.SDI_CLASS_NAME, 1 as SDI_ENABLED,ISNULL(VSTM.LOGICAL_TABLE_NAME, ' ') as OBJECT_LOGICAL_NAME,ISNULL(VSTM.EXPANDED_LOGICAL_NAME, ' ') as OBJECT_EXPANDED_LOGICAL_NAME,ISNULL(VSTM.TABLE_COMMENTS,' ') MD_OBJECT_COMMENTS,ISNULL(VSTM.TABLE_DEF,' ') MD_OBJECT_DEFINITION  FROM  @ALL_PERMITTED_OBJECTS AST JOIN VALID_SYSTEM_TABLE_METADATA VSTM
            ON AST.OBJECT_ID = VSTM.STM_ID LEFT JOIN SM_CLASSIFICATION_SDI SDI ON SDI.SDI_CLASS_ID = VSTM.SDI_CLASS_ID 
            JOIN ADS_KEY_VALUE_OBJECTS AKV
            ON  AST.OBJECT_TYPE_ID = AKV.OBJECT_TYPE_ID AND AKV.OBJECT_TYPE ='SM_TABLE'
            JOIN SYSTEM_DEFINITION_DETAILS SD ON VSTM.SYSTEM_ID = SD.SYSTEM_ID
            INSERT INTO @VALUETABLE
            SELECT VSTCM.COLUMN_NAME OBJECT_NAME, AST.OBJECT_ID,AST.OBJECT_TYPE_ID, AKV.OBJECT_TYPE,
            (SELECT VALUE FROM DBO.SPLIT('`',(SELECT PREFERENCE_VALUE FROM APP_PREFERENCES WHERE PREFERENCE_NAME = 'SM_COLUMN_PREFERENCE')) WHERE RowID = 2) OBJECT_TITLE,
            (SELECT VALUE FROM DBO.SPLIT('`',(SELECT PREFERENCE_VALUE FROM APP_PREFERENCES WHERE PREFERENCE_NAME = 'SM_COLUMN_PREFERENCE')) WHERE RowID = 1) OBJECT_COLOR,
            SD.SYSTEM_NAME+'/'+VSTCM.SYSTEM_ENV_NAME+'/'+VSTCM.TABLE_NAME OBJECT_PATH,VSTCM.SDI_FLAG, VSTCM.SDI_DESCRIPTION, VSTCM.SDI_CLASS_ID,SDI.SDI_CLASS_NAME, 1 as SDI_ENABLED ,ISNULL(VSTCM.LOGICAL_COLUMN_NAME, ' ') as OBJECT_LOGICAL_NAME,ISNULL(VSTCM.EXPANDED_LOGICAL_NAME, ' ') as OBJECT_EXPANDED_LOGICAL_NAME,ISNULL(VSTCM.COLUMN_COMMENTS,' ') MD_OBJECT_COMMENTS,ISNULL(VSTCM.COL_DEF,' ') MD_OBJECT_DEFINITION 
            FROM  @ALL_PERMITTED_OBJECTS AST JOIN VALID_SYS_TBL_COL_METADATA VSTCM
            ON AST.OBJECT_ID = VSTCM.STCM_ID LEFT JOIN SM_CLASSIFICATION_SDI SDI ON SDI.SDI_CLASS_ID = VSTCM.SDI_CLASS_ID 
            JOIN ADS_KEY_VALUE_OBJECTS AKV
            ON  AST.OBJECT_TYPE_ID = AKV.OBJECT_TYPE_ID AND AKV.OBJECT_TYPE ='SM_COLUMN'
            JOIN SYSTEM_DEFINITION_DETAILS SD ON VSTCM.SYSTEM_ID = SD.SYSTEM_ID
            INSERT INTO @VALUETABLE
            SELECT BT.BUS_TERM_NAME OBJECT_NAME, AST.OBJECT_ID,AST.OBJECT_TYPE_ID, 'BGM_TERM' OBJECT_TYPE,BCOT.ENTITY_TITLE,BCOT.ENTITY_COLOR, BCT.PATH OBJECT_PATH ,BT.SDI_FLAG, BT.SDI_DESCRIPTION, BT.SDI_CLASS_ID,SDI.SDI_CLASS_NAME,BCOT.SDI_ENABLED ,' ' OBJECT_LOGICAL_NAME,' ' OBJECT_EXPANDED_LOGICAL_NAME,' ' MD_OBJECT_COMMENTS,' ' MD_OBJECT_DEFINITION  
            FROM  @ALL_PERMITTED_OBJECTS AST JOIN BUSINESS_TERMS BT
            ON AST.OBJECT_ID = BT.BUS_TERM_ID LEFT JOIN SM_CLASSIFICATION_SDI SDI ON SDI.SDI_CLASS_ID = BT.SDI_CLASS_ID 
            JOIN BG_CUSTOM_TYPES BCOT
            ON  AST.OBJECT_TYPE_ID = BCOT.OBJECT_TYPE_ID AND BCOT.NAME ='Business Terms'
            JOIN @HIERARCHY BCT on BCT.category_id = BT.category_id WHERE BCOT.SDI_ENABLED = 1
            INSERT INTO @VALUETABLE
            SELECT BR.NAME OBJECT_NAME, AST.OBJECT_ID,AST.OBJECT_TYPE_ID, 'BGM_RULE' OBJECT_TYPE,BCOT.ENTITY_TITLE,BCOT.ENTITY_COLOR, BCT.PATH OBJECT_PATH ,BR.SDI_FLAG, BR.SDI_DESCRIPTION, BR.SDI_CLASS_ID,SDI.SDI_CLASS_NAME, BCOT.SDI_ENABLED ,' ' OBJECT_LOGICAL_NAME,' ' OBJECT_EXPANDED_LOGICAL_NAME,' ' MD_OBJECT_COMMENTS,' ' MD_OBJECT_DEFINITION 
            FROM  @ALL_PERMITTED_OBJECTS AST JOIN BG_BUSINESS_RULES BR
            ON AST.OBJECT_ID = BR.ID LEFT JOIN SM_CLASSIFICATION_SDI SDI ON SDI.SDI_CLASS_ID = BR.SDI_CLASS_ID 
            JOIN BG_CUSTOM_TYPES BCOT
            ON  AST.OBJECT_TYPE_ID = BCOT.OBJECT_TYPE_ID AND BCOT.NAME ='Business Rules'
            JOIN @HIERARCHY BCT on BCT.category_id = BR.CATALOG_ID WHERE BCOT.SDI_ENABLED = 1
            INSERT INTO @VALUETABLE
            SELECT BP.NAME OBJECT_NAME, AST.OBJECT_ID,AST.OBJECT_TYPE_ID, 'BGM_POLICY' OBJECT_TYPE,BCOT.ENTITY_TITLE,BCOT.ENTITY_COLOR, BCT.PATH OBJECT_PATH,BP.SDI_FLAG, BP.SDI_DESCRIPTION, BP.SDI_CLASS_ID,SDI.SDI_CLASS_NAME, BCOT.SDI_ENABLED,' ' OBJECT_LOGICAL_NAME,' ' OBJECT_EXPANDED_LOGICAL_NAME,' ' MD_OBJECT_COMMENTS,' ' MD_OBJECT_DEFINITION    
            FROM  @ALL_PERMITTED_OBJECTS AST JOIN BG_POLICIES BP
            ON AST.OBJECT_ID = BP.ID LEFT JOIN SM_CLASSIFICATION_SDI SDI ON SDI.SDI_CLASS_ID = BP.SDI_CLASS_ID 
            JOIN BG_CUSTOM_TYPES BCOT
            ON  AST.OBJECT_TYPE_ID = BCOT.OBJECT_TYPE_ID AND BCOT.NAME ='Business Policies'
            JOIN @HIERARCHY BCT on BCT.category_id = BP.CATALOG_ID WHERE BCOT.SDI_ENABLED = 1
            INSERT INTO @VALUETABLE
            SELECT CO.NAME OBJECT_NAME, AST.OBJECT_ID,AST.OBJECT_TYPE_ID, 'CUSTOM_OBJECT' OBJECT_TYPE,BCOT.ENTITY_TITLE,BCOT.ENTITY_COLOR, BCT.PATH OBJECT_PATH ,CO.SDI_FLAG, CO.SDI_DESCRIPTION, CO.SDI_CLASS_ID,SDI.SDI_CLASS_NAME, BCOT.SDI_ENABLED,' ' OBJECT_LOGICAL_NAME,' ' OBJECT_EXPANDED_LOGICAL_NAME  ,' ' MD_OBJECT_COMMENTS,' ' MD_OBJECT_DEFINITION 
            FROM  @ALL_PERMITTED_OBJECTS AST JOIN BG_CUSTOM_OBJECTS CO
            ON AST.OBJECT_ID = CO.ID LEFT JOIN SM_CLASSIFICATION_SDI SDI ON SDI.SDI_CLASS_ID = CO.SDI_CLASS_ID 
            JOIN BG_CUSTOM_TYPES BCOT
            ON  AST.OBJECT_TYPE_ID = BCOT.OBJECT_TYPE_ID AND BCOT.OBJECT_TYPE_ID NOT IN(SELECT OBJECT_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS WHERE 
            OBJECT_TYPE IN('BGM_TERM','BGM_POLICY','BGM_RULE'))
            JOIN @HIERARCHY BCT on BCT.category_id = co.CATEGORY_ID WHERE BCOT.SDI_ENABLED = 1
            return;
    END
GO
IF (OBJECTPROPERTY(OBJECT_ID(N'[PROC_MINDMAP_SDI_BLK_UPDATE]'),N'IsProcedure') = 1)
BEGIN
    DROP PROCEDURE PROC_MINDMAP_SDI_BLK_UPDATE;
END
GO
CREATE PROCEDURE [PROC_MINDMAP_SDI_BLK_UPDATE]
    @P_OBJECT_ID            BIGINT,
    @P_OBJECT_TYPE_ID       INT,
    @P_SDI_CLASS_ID         INT,
    @P_SDI_FLAG             CHAR,
    @P_SDI_DESCRIPTION      VARCHAR(MAX),
    @P_LAST_MODIFIED_BY     VARCHAR(50),
    @P_LAST_MODIFIED_DATE_TIME DATETIME,
    @P_IS_SYSTEM               CHAR,
    @P_IS_ENVIRONMENT          CHAR,
    @P_IS_TABLE                CHAR,
    @P_SDI_AUDIT_DESC          VARCHAR(MAX),
    @P_HISTORY_TYPE_ID         INT,
    @P_NOT_IN_IDS              VARCHAR(MAX),
    @P_DYNAMIC_WHERE           nVARCHAR(MAX),
    @P_OPTION_WHERE           nVARCHAR(MAX),
    @MASTER_ACCESS BIGINT
AS
BEGIN
    IF OBJECT_ID('tempdb..#MINDMAPASSOCIATIONSTMP') IS NOT NULL
    BEGIN
    DROP TABLE #MINDMAPASSOCIATIONSTMP;
    END
    IF OBJECT_ID('tempdb..#MINDMAPRELATIONS') IS NOT NULL 
    BEGIN
    DROP TABLE #MINDMAPRELATIONS;
    END
    CREATE TABLE #MINDMAPRELATIONS ( OBJECT_ID BIGINT, OBJECT_TYPE_ID INT,OBJECT_TYPE VARCHAR(400),ID_TYPE VARCHAR(400));
    DECLARE @SQL nVARCHAR(MAX);
    SET @SQL = N'SELECT OBJECT_ID,OBJECT_TYPE_ID,OBJECT_TYPE, CAST(OBJECT_ID as varchar(2000))+'':''+cast(OBJECT_TYPE_ID as varchar(100)) ID_TYPE FROM GET_MINDMAP_ASSOCIATIONS('+convert(nvarchar(2000),@P_OBJECT_ID)+','+convert(nvarchar(100),@P_OBJECT_TYPE_ID)+','+convert(nvarchar(100),@MASTER_ACCESS)+',convert(nvarchar(100),@P_LAST_MODIFIED_BY)) ' + convert(nvarchar(max),@P_DYNAMIC_WHERE);
    INSERT INTO #MINDMAPRELATIONS EXEC sp_executesql @SQL, N'@P_LAST_MODIFIED_BY varchar(50)', @P_LAST_MODIFIED_BY;
    SELECT OBJECT_ID,OBJECT_TYPE_ID,OBJECT_TYPE  INTO #MINDMAPASSOCIATIONSTMP FROM #MINDMAPRELATIONS MR  WHERE MR.ID_TYPE NOT IN (SELECT VALUE  FROM DBO.SPLIT(',',@P_NOT_IN_IDS));
    UPDATE SYSTEM_DEFINITION_DETAILS
    SET SDI_FLAG            = @P_SDI_FLAG,
    SDI_DESCRIPTION         = @P_SDI_DESCRIPTION,
    SDI_CLASS_ID            = @P_SDI_CLASS_ID,
    LAST_MODIFIED_BY        = @P_LAST_MODIFIED_BY,
    LAST_MODIFIED_DATE_TIME = @P_LAST_MODIFIED_DATE_TIME
    WHERE SYSTEM_ID IN (SELECT OBJECT_ID FROM #MINDMAPASSOCIATIONSTMP where OBJECT_TYPE = 'SM_SYSTEM');
	
    UPDATE SYS_CON_ENVIRONMENTS
    SET SDI_FLAG            = @P_SDI_FLAG,
    SDI_DESCRIPTION         = @P_SDI_DESCRIPTION,
    SDI_CLASS_ID            = @P_SDI_CLASS_ID,
    LAST_MODIFIED_BY        = @P_LAST_MODIFIED_BY,
    LAST_MODIFIED_DATE_TIME = @P_LAST_MODIFIED_DATE_TIME
    WHERE SCE_ID IN (SELECT OBJECT_ID FROM #MINDMAPASSOCIATIONSTMP where OBJECT_TYPE = 'SM_ENVIRONMENT');
	
    UPDATE SYSTEM_TABLE_METADATA
    SET SDI_FLAG            = @P_SDI_FLAG,
    SDI_DESCRIPTION         = @P_SDI_DESCRIPTION,
    SDI_CLASS_ID            = @P_SDI_CLASS_ID,
    LAST_MODIFIED_BY        = @P_LAST_MODIFIED_BY,
    LAST_MODIFIED_DATE_TIME = @P_LAST_MODIFIED_DATE_TIME
    WHERE STM_ID IN (SELECT OBJECT_ID FROM #MINDMAPASSOCIATIONSTMP where OBJECT_TYPE = 'SM_TABLE');
	
    UPDATE SYSTEM_TABLE_COLUMNS_METADATA
    SET SDI_FLAG            = @P_SDI_FLAG,
    SDI_DESCRIPTION         = @P_SDI_DESCRIPTION,
    SDI_CLASS_ID            = @P_SDI_CLASS_ID,
    LAST_MODIFIED_BY        = @P_LAST_MODIFIED_BY,
    LAST_MODIFIED_DATE_TIME = @P_LAST_MODIFIED_DATE_TIME
    WHERE STCM_ID IN (SELECT OBJECT_ID FROM #MINDMAPASSOCIATIONSTMP where OBJECT_TYPE = 'SM_COLUMN');
	

    UPDATE BUSINESS_TERMS
    SET SDI_FLAG            = @P_SDI_FLAG,
    SDI_DESCRIPTION         = @P_SDI_DESCRIPTION,
    SDI_CLASS_ID            = @P_SDI_CLASS_ID
    WHERE BUS_TERM_ID IN (SELECT OBJECT_ID FROM #MINDMAPASSOCIATIONSTMP where OBJECT_TYPE = 'BGM_TERM');
	
    UPDATE BG_BUSINESS_RULES
    SET SDI_FLAG            = @P_SDI_FLAG,
    SDI_DESCRIPTION         = @P_SDI_DESCRIPTION,
    SDI_CLASS_ID            = @P_SDI_CLASS_ID
    WHERE ID IN (SELECT OBJECT_ID FROM #MINDMAPASSOCIATIONSTMP where OBJECT_TYPE = 'BGM_RULE');
	
    UPDATE BG_POLICIES
    SET SDI_FLAG            = @P_SDI_FLAG,
    SDI_DESCRIPTION         = @P_SDI_DESCRIPTION,
    SDI_CLASS_ID            = @P_SDI_CLASS_ID
    WHERE ID IN (SELECT OBJECT_ID FROM #MINDMAPASSOCIATIONSTMP where OBJECT_TYPE = 'BGM_POLICY');

    UPDATE BG_CUSTOM_OBJECTS
    SET SDI_FLAG            = @P_SDI_FLAG,
    SDI_DESCRIPTION         = @P_SDI_DESCRIPTION,
    SDI_CLASS_ID            = @P_SDI_CLASS_ID
    WHERE ID IN (SELECT OBJECT_ID FROM #MINDMAPASSOCIATIONSTMP where OBJECT_TYPE = 'CUSTOM_OBJECT');
	
    -- BGM OBJECTS AUDIT INSERTION
    INSERT INTO rm_history (historytypeid, historydesc, objectid, objecttypeid, user_id, historydatestamp) 
    SELECT @P_HISTORY_TYPE_ID,@P_SDI_AUDIT_DESC, OBJ.OBJECT_ID,OBJ.OBJECT_TYPE_ID,@P_LAST_MODIFIED_BY,GETDATE() FROM #MINDMAPASSOCIATIONSTMP OBJ WHERE OBJ.OBJECT_TYPE NOT IN('SM_SYSTEM','SM_ENVIRONMENT','SM_TABLE','SM_COLUMN');
    
    -- Metadata Hierarchy Updation
    IF (@P_IS_SYSTEM = 'Y')
        BEGIN
            SET @SQL = N'UPDATE SYSTEM_DEFINITION_DETAILS SET SDI_FLAG = convert(nvarchar(1),@P_SDI_FLAG)
            ,SDI_DESCRIPTION = convert(nvarchar(4000),@P_SDI_DESCRIPTION),SDI_CLASS_ID = convert(nvarchar(100),@P_SDI_CLASS_ID)
            ,LAST_MODIFIED_BY = convert(nvarchar(100),@P_LAST_MODIFIED_BY),LAST_MODIFIED_DATE_TIME = convert(nvarchar(100),@P_LAST_MODIFIED_DATE_TIME)
            WHERE SYSTEM_ID IN (SELECT distinct SYSTEM_ID FROM  SYSTEM_TABLE_COLUMNS_METADATA where STCM_ID IN(SELECT OBJECT_ID FROM #MINDMAPASSOCIATIONSTMP where OBJECT_TYPE = ''SM_COLUMN''))'+convert(nvarchar(max),@P_OPTION_WHERE)+'
            or SYSTEM_ID IN (SELECT distinct SYSTEM_ID FROM  SYSTEM_TABLE_METADATA where STM_ID IN(SELECT OBJECT_ID FROM #MINDMAPASSOCIATIONSTMP where OBJECT_TYPE = ''SM_TABLE''))'+convert(nvarchar(max),@P_OPTION_WHERE)+'
            or SYSTEM_ID IN (SELECT distinct SYSTEM_ID FROM  SYS_CON_ENVIRONMENTS where SCE_ID IN(SELECT OBJECT_ID FROM #MINDMAPASSOCIATIONSTMP where OBJECT_TYPE = ''SM_ENVIRONMENT''))'+convert(nvarchar(max),@P_OPTION_WHERE)+'
			or SYSTEM_ID IN (SELECT OBJECT_ID FROM #MINDMAPASSOCIATIONSTMP where OBJECT_TYPE = ''SM_SYSTEM'') '+convert(nvarchar(max),@P_OPTION_WHERE);
            EXEC sp_executesql @SQL, N'@P_SDI_FLAG char(1), @P_SDI_DESCRIPTION VARCHAR(MAX), @P_SDI_CLASS_ID INT, @P_LAST_MODIFIED_BY VARCHAR(250),
                                      @P_LAST_MODIFIED_DATE_TIME DATETIME',
                                      @P_SDI_FLAG,@P_SDI_DESCRIPTION,@P_SDI_CLASS_ID,@P_LAST_MODIFIED_BY,@P_LAST_MODIFIED_DATE_TIME;
        END; 

    IF(@P_IS_ENVIRONMENT = 'Y')
        BEGIN
            SET @SQL = N'UPDATE SYS_CON_ENVIRONMENTS SET SDI_FLAG = convert(nvarchar(1),@P_SDI_FLAG)
            ,SDI_DESCRIPTION = convert(nvarchar(4000),@P_SDI_DESCRIPTION),SDI_CLASS_ID = convert(nvarchar(200),@P_SDI_CLASS_ID)
            ,LAST_MODIFIED_BY = convert(nvarchar(50),@P_LAST_MODIFIED_BY),LAST_MODIFIED_DATE_TIME =convert(nvarchar(200),@P_LAST_MODIFIED_DATE_TIME)
            WHERE SCE_ID IN (SELECT distinct SCE_ID FROM  SYSTEM_TABLE_COLUMNS_METADATA where STCM_ID IN(SELECT OBJECT_ID FROM #MINDMAPASSOCIATIONSTMP where OBJECT_TYPE = ''SM_COLUMN''))'+convert(nvarchar(max),@P_OPTION_WHERE)+'
            or SCE_ID IN (SELECT distinct SCE_ID FROM  SYSTEM_TABLE_METADATA where STM_ID IN(SELECT OBJECT_ID FROM #MINDMAPASSOCIATIONSTMP where OBJECT_TYPE = ''SM_TABLE''))'+convert(nvarchar(max),@P_OPTION_WHERE)+'
            or SCE_ID IN (SELECT OBJECT_ID FROM #MINDMAPASSOCIATIONSTMP where OBJECT_TYPE = ''SM_ENVIRONMENT'')'+ convert(nvarchar(max),@P_OPTION_WHERE);
            EXEC sp_executesql @SQL, N'@P_SDI_FLAG char(1), @P_SDI_DESCRIPTION VARCHAR(MAX), @P_SDI_CLASS_ID INT, @P_LAST_MODIFIED_BY VARCHAR(250),
                                      @P_LAST_MODIFIED_DATE_TIME DATETIME',
                                      @P_SDI_FLAG,@P_SDI_DESCRIPTION,@P_SDI_CLASS_ID,@P_LAST_MODIFIED_BY,@P_LAST_MODIFIED_DATE_TIME;
        END;

    IF (@P_IS_TABLE = 'Y')
        BEGIN
            SET @SQL = N'UPDATE SYSTEM_TABLE_METADATA SET SDI_FLAG = convert(nvarchar(1),@P_SDI_FLAG)
            ,SDI_DESCRIPTION = convert(nvarchar(4000),@P_SDI_DESCRIPTION),SDI_CLASS_ID =convert(nvarchar(200),@P_SDI_CLASS_ID)
            ,LAST_MODIFIED_BY = convert(nvarchar(50),@P_LAST_MODIFIED_BY),LAST_MODIFIED_DATE_TIME = convert(nvarchar(200),@P_LAST_MODIFIED_DATE_TIME)
            WHERE STM_ID IN (SELECT distinct STM_ID FROM  SYSTEM_TABLE_COLUMNS_METADATA where STCM_ID IN(SELECT OBJECT_ID FROM #MINDMAPASSOCIATIONSTMP where OBJECT_TYPE = ''SM_COLUMN''))'+convert(nvarchar(max),@P_OPTION_WHERE)+'
            or STM_ID IN (SELECT OBJECT_ID FROM #MINDMAPASSOCIATIONSTMP where OBJECT_TYPE = ''SM_TABLE'')'+convert(nvarchar(max),@P_OPTION_WHERE);
            EXEC sp_executesql @SQL, N'@P_SDI_FLAG char(1), @P_SDI_DESCRIPTION VARCHAR(MAX), @P_SDI_CLASS_ID INT, @P_LAST_MODIFIED_BY VARCHAR(250),
                                      @P_LAST_MODIFIED_DATE_TIME DATETIME',
                                      @P_SDI_FLAG,@P_SDI_DESCRIPTION,@P_SDI_CLASS_ID,@P_LAST_MODIFIED_BY,@P_LAST_MODIFIED_DATE_TIME;
        END;
END;
GO
IF EXISTS (SELECT * FROM ADS_MM_VERSION WHERE VALUE <= '10')
BEGIN
IF NOT EXISTS (SELECT * FROM ADS_KEY_VALUE_OBJECTS WHERE  OBJECT_TYPE = 'erwin DM NSM_CATALOGS')
    BEGIN
        INSERT INTO ADS_KEY_VALUE_OBJECTS (OBJECT_TYPE,OBJECT_TABLE,OBJECT_TABLE_COLUMN,OBJECT_PARENT_TYPE,OBJECT_PARENT_COLUMN_ID,OBJECT_LEVEL,MODULE_KEY,OBJECT_TITLE, SYSTEM_BASED)
        SELECT 'erwin DM NSM_CATALOGS','','','','','0','com.ads.mm.permission.bgm','erwin DM NSM',0;
        INSERT INTO ADS_KEY_VALUE_OBJECTS (OBJECT_TYPE,OBJECT_TABLE,OBJECT_TABLE_COLUMN,OBJECT_PARENT_TYPE,OBJECT_PARENT_COLUMN_ID,OBJECT_LEVEL,MODULE_KEY,OBJECT_TITLE, SYSTEM_BASED)
        SELECT 'erwin DM NSM_CATALOG','BG_CATEGORIES','OBJECT_TYPE_ID','erwin DM NSM_CATALOGS','erwin DM NSM_CATALOGS_ID','1','com.ads.mm.permission.bgm','Catalog',0;
        INSERT INTO ADS_KEY_VALUE_OBJECTS (OBJECT_TYPE,OBJECT_TABLE,OBJECT_TABLE_COLUMN,OBJECT_PARENT_TYPE,OBJECT_PARENT_COLUMN_ID,OBJECT_LEVEL,MODULE_KEY,OBJECT_TITLE, SYSTEM_BASED)
        SELECT 'erwin DM NSM','BG_CUSTOM_OBJECTS','ID','erwin DM NSM_CATALOG','CATEGORY_ID','2','com.ads.mm.permission.bgm','DM NSM Asset',0;
        DECLARE @OBJECT_TYPE_ID INT, @CATALOGS_TYPE_ID INT, @CATALOG_TYPE_ID INT ;
        SELECT @OBJECT_TYPE_ID =  OBJECT_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE='erwin DM NSM';
        SELECT @CATALOG_TYPE_ID =  OBJECT_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE='erwin DM NSM_CATALOG';
        SELECT @CATALOGS_TYPE_ID =  OBJECT_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE='erwin DM NSM_CATALOGS';
        Insert into  BG_CUSTOM_TYPES(OBJECT_TYPE_ID,CATALOG_TYPE_ID,CATALOGS_TYPE_ID,NAME,ENTITY_TITLE, DESCRIPTION,THUMBNAIL_ICON,DOCS_REQUIRED, ENABLE,DISPLAY_ORDER,SYSTEM_BASED,DEFINITION_ENABLED,SDI_ENABLED,CUSTOM_TYPE) 
	values(@OBJECT_TYPE_ID,@CATALOG_TYPE_ID,@CATALOGS_TYPE_ID,'erwin DM NSM','DM NSM Asset','To Share and reuse model objects within an organization, erwin DM uses Naming Standards for logical and physical objects in the model so that everyone in your organization uses the names consistently and correctly.  The entries in this list are used to expand the abbreviated (cryptic) table/column names to Expanded Logical Name in Metadata Manager.',null,0,0,3.5,0,1,0,1);
        INSERT INTO ADS_WORKFLOW_TRIGGER_ACTION (NAME, TITLE, DESCRIPTION, STATUS_TITLE, OBJECT_TYPE_ID, FILENAME, METHOD, NODE_TYPE)
        SELECT 'ON_CREATE',(SELECT TITLE FROM ADS_WORKFLOW_TRIGGER_ACTION WHERE METHOD = 'onTermCreate' AND NODE_TYPE='T'),'erwin DM NSM On Create',(SELECT STATUS_TITLE FROM ADS_WORKFLOW_TRIGGER_ACTION WHERE METHOD = 'onTermCreate' AND NODE_TYPE='T'), @OBJECT_TYPE_ID, 'BGM_Triggers.js','onCustomTypeCreate','T';
        INSERT INTO ADS_WORKFLOW_TRIGGER_ACTION (NAME, TITLE, DESCRIPTION, STATUS_TITLE, OBJECT_TYPE_ID, FILENAME, METHOD, NODE_TYPE)
        SELECT 'PUBLISH','Publish','Publish','Published',@OBJECT_TYPE_ID, 'BGM_Actions.js','onCustomTypePublish','A';
        EXECUTE('WITH CTE AS (SELECT ID, NAME, ROW_NUMBER()OVER ( ORDER BY CASE DISPLAY_ORDER WHEN NULL THEN 0 WHEN 0 THEN 999999999 ELSE DISPLAY_ORDER END) AS DISPLAY_ORDER FROM   BG_CUSTOM_TYPES ) UPDATE MS SET    MS.DISPLAY_ORDER = CTE.DISPLAY_ORDER FROM   BG_CUSTOM_TYPES MS JOIN CTE ON MS.ID = CTE.ID AND MS.NAME = CTE.NAME');
    END;
END;
GO
IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'RM_PROMOTE_SYS_CON_ENVS' AND COLUMN_NAME = 'PROMOTE_SYS_ENV_NAME')
BEGIN
	EXECUTE('ALTER TABLE RM_PROMOTE_SYS_CON_ENVS DROP CONSTRAINT RM_ENV_R_PK')
	EXECUTE('ALTER TABLE CSM_MAP_SYSTEM_ENVIRONMENTS ALTER COLUMN CSM_MAP_SYS_ENV_NAME VARCHAR(200) NULL')
	EXECUTE('ALTER TABLE RM_PROMOTE_SYS_CON_ENVS ALTER COLUMN PROMOTE_SYS_ENV_NAME VARCHAR(200) NULL')
	EXECUTE('ALTER TABLE RM_PROMOTE_SYS_CON_ENVS ALTER COLUMN SYSTEM_ENVIRONMENT_NAME VARCHAR(200) NOT NULL')
	EXECUTE('ALTER TABLE RM_PROMOTE_SYS_CON_ENVS ADD CONSTRAINT RM_ENV_R_PK PRIMARY KEY(SYSTEM_ID , SYSTEM_ENVIRONMENT_NAME,RM_ENVIRONMENT_ID)')
END
GO

DECLARE @OBJECT_TYPE_ID INT, @OBJECT_ID INT ,@KV_ID INT,@KV_TYPE_ID INT;
SELECT @OBJECT_TYPE_ID =  OBJECT_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE='SM_DATABASE_OPTIONS';
SELECT @OBJECT_ID =  MTD_ID FROM MT_DEFINITION WHERE  MTD_NAME = 'SM_DATABASE_OPTIONS' AND ADS_MODULE = 'SM';
    IF EXISTS( SELECT @OBJECT_TYPE_ID) AND EXISTS( SELECT @OBJECT_ID) AND NOT EXISTS( SELECT * FROM ADS_KEY_VALUE WHERE OBJECT_TYPE_ID  = @OBJECT_TYPE_ID AND OBJECT_ID = @OBJECT_ID AND KEY_NAME = 'HasAccessToDBA')
        BEGIN
            INSERT INTO ADS_KEY_VALUE(KEY_NAME,KEY_VALUE,OBJECT_TYPE_ID,OBJECT_ID,DATATYPE_ID,KV_TYPE,LABEL_WIDTH,CONTROL_WIDTH,KV_ORDER,COMPONENT,DEFAULTVALUE,ISSYSTEMBASED) VALUES('HasAccessToDBA',' Has Access To DBA',@OBJECT_TYPE_ID,@OBJECT_ID,'1','Combo Box','','','10','','false',0)
            SELECT @KV_ID = KV_ID FROM ADS_KEY_VALUE WHERE OBJECT_TYPE_ID  = @OBJECT_TYPE_ID AND OBJECT_ID = @OBJECT_ID AND KEY_NAME = 'HasAccessToDBA' AND KV_TYPE= 'Combo Box';
            SELECT @KV_TYPE_ID = OBJECT_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE='ADS_KEY_VALUE';
            INSERT INTO ADS_KEY_VALUE(KEY_NAME,KEY_VALUE,OBJECT_TYPE_ID,OBJECT_ID,DATATYPE_ID,KV_TYPE,LABEL_WIDTH,CONTROL_WIDTH,KV_ORDER,COMPONENT,DEFAULTVALUE)      VALUES('true','true',@KV_TYPE_ID,@KV_ID,'1','combovalues','','','0','','');
            INSERT INTO ADS_KEY_VALUE(KEY_NAME,KEY_VALUE,OBJECT_TYPE_ID,OBJECT_ID,DATATYPE_ID,KV_TYPE,LABEL_WIDTH,CONTROL_WIDTH,KV_ORDER,COMPONENT,DEFAULTVALUE)      VALUES('false','false',@KV_TYPE_ID,@KV_ID,'1','combovalues','','','1','','');
        END
GO

IF NOT EXISTS(SELECT * FROM sys.indexes WHERE name = 'STCM_COL_TAB_NAME_SCEID_INDX' AND object_id = OBJECT_ID('SYSTEM_TABLE_COLUMNS_METADATA'))
BEGIN
    EXECUTE('CREATE NONCLUSTERED INDEX STCM_COL_TAB_NAME_SCEID_INDX ON [SYSTEM_TABLE_COLUMNS_METADATA] (SCE_ID, TABLE_NAME, COLUMN_NAME)');
END
GO
IF NOT EXISTS(SELECT * FROM sys.indexes WHERE name = 'ADS_KV_OBJECTS_OBJ_TYPE_INDX' AND object_id = OBJECT_ID('ADS_KEY_VALUE_OBJECTS'))
BEGIN
    EXECUTE('CREATE INDEX ADS_KV_OBJECTS_OBJ_TYPE_INDX ON ADS_KEY_VALUE_OBJECTS (OBJECT_TYPE)');
END
GO

IF NOT EXISTS(SELECT * FROM sys.indexes WHERE name = 'SYS_TAB_MTDT_SYSTEM_ID_INDX' AND object_id = OBJECT_ID('SYSTEM_TABLE_METADATA'))
BEGIN
    EXECUTE('CREATE INDEX SYS_TAB_MTDT_SYSTEM_ID_INDX ON SYSTEM_TABLE_METADATA (SYSTEM_ID)');
END
GO
IF NOT EXISTS(SELECT * FROM sys.indexes WHERE name = 'SYS_TAB_COL_MTDT_SYS_ID_INDX' AND object_id = OBJECT_ID('SYSTEM_TABLE_COLUMNS_METADATA'))
BEGIN
    EXECUTE('CREATE INDEX SYS_TAB_COL_MTDT_SYS_ID_INDX ON SYSTEM_TABLE_COLUMNS_METADATA (SYSTEM_ID)');
END
GO

IF NOT EXISTS(SELECT * FROM sys.indexes WHERE name = 'SYS_DEF_DET_SDI_CLS_ID_INDX' AND object_id = OBJECT_ID('SYSTEM_DEFINITION_DETAILS'))
BEGIN
    EXECUTE('CREATE INDEX SYS_DEF_DET_SDI_CLS_ID_INDX ON SYSTEM_DEFINITION_DETAILS (SDI_CLASS_ID)');
END
GO
IF NOT EXISTS(SELECT * FROM sys.indexes WHERE name = 'SYS_CON_EN_SDI_CLASS_ID_INDX' AND object_id = OBJECT_ID('SYS_CON_ENVIRONMENTS'))
BEGIN
    EXECUTE('CREATE INDEX SYS_CON_EN_SDI_CLASS_ID_INDX ON SYS_CON_ENVIRONMENTS (SDI_CLASS_ID)');
END
GO
IF NOT EXISTS(SELECT * FROM sys.indexes WHERE name = 'SYS_TAB_MTDT_SDI_CLS_ID_INDX' AND object_id = OBJECT_ID('SYSTEM_TABLE_METADATA'))
BEGIN
    EXECUTE('CREATE INDEX SYS_TAB_MTDT_SDI_CLS_ID_INDX ON SYSTEM_TABLE_METADATA (SDI_CLASS_ID)');
END
GO
IF NOT EXISTS(SELECT * FROM sys.indexes WHERE name = 'SYS_TAB_COL_MTDT_CLS_ID_INDX' AND object_id = OBJECT_ID('SYSTEM_TABLE_COLUMNS_METADATA'))
BEGIN
    EXECUTE('CREATE INDEX SYS_TAB_COL_MTDT_CLS_ID_INDX ON SYSTEM_TABLE_COLUMNS_METADATA (SDI_CLASS_ID)');
END
GO
IF NOT EXISTS(SELECT * FROM sys.indexes WHERE name = 'BUS_TERMS_SDI_CLASS_ID_INDX' AND object_id = OBJECT_ID('BUSINESS_TERMS'))
BEGIN
    EXECUTE('CREATE INDEX BUS_TERMS_SDI_CLASS_ID_INDX ON BUSINESS_TERMS (SDI_CLASS_ID)');
END
GO
IF NOT EXISTS(SELECT * FROM sys.indexes WHERE name = 'BG_POLICIES_SDI_CLASS_ID_INDX' AND object_id = OBJECT_ID('BG_POLICIES'))
BEGIN
    EXECUTE('CREATE INDEX BG_POLICIES_SDI_CLASS_ID_INDX ON BG_POLICIES (SDI_CLASS_ID)');
END
GO
IF NOT EXISTS(SELECT * FROM sys.indexes WHERE name = 'BG_BUS_RULES_SDI_CLS_ID_INDX' AND object_id = OBJECT_ID('BG_BUSINESS_RULES'))
BEGIN
    EXECUTE('CREATE INDEX BG_BUS_RULES_SDI_CLS_ID_INDX ON BG_BUSINESS_RULES (SDI_CLASS_ID)');
END
GO
IF NOT EXISTS(SELECT * FROM sys.indexes WHERE name = 'BG_CUST_OBJS_SDI_CLS_ID_INDX' AND object_id = OBJECT_ID('BG_CUSTOM_OBJECTS'))
BEGIN
    EXECUTE('CREATE INDEX BG_CUST_OBJS_SDI_CLS_ID_INDX ON BG_CUSTOM_OBJECTS (SDI_CLASS_ID)');
END
GO
IF EXISTS (SELECT * FROM ADS_MM_VERSION WHERE VALUE <= '10')
BEGIN
    IF EXISTS (SELECT 1 FROM ADS_KEY_VALUE WHERE LEN(KEY_NAME) > 200)
	BEGIN
            EXECUTE('UPDATE ADS_KEY_VALUE SET KEY_NAME = SUBSTRING(KEY_NAME, 1, 200) WHERE LEN(KEY_NAME) > 200');
	END
END
GO
IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'ADS_KEY_VALUE' AND COLUMN_NAME = 'KEY_NAME' AND CHARACTER_MAXIMUM_LENGTH = '4000')
    BEGIN
        ALTER TABLE [ADS_KEY_VALUE] ALTER COLUMN [KEY_NAME] VARCHAR(200)
    END
GO
IF NOT EXISTS(SELECT * FROM sys.indexes WHERE name = 'ADS_KEY_VAL_KEYNAME_INDX' AND object_id = OBJECT_ID('ADS_KEY_VALUE'))
BEGIN
EXECUTE('CREATE INDEX ADS_KEY_VAL_KEYNAME_INDX ON ADS_KEY_VALUE (KEY_NAME)');
END
GO
IF NOT EXISTS(SELECT * FROM sys.indexes WHERE name = 'ADS_KEY_VAL_KNAME_OBTID_INDX' AND object_id = OBJECT_ID('ADS_KEY_VALUE'))
BEGIN
EXECUTE('CREATE INDEX ADS_KEY_VAL_KNAME_OBTID_INDX ON ADS_KEY_VALUE (KEY_NAME)  INCLUDE (OBJECT_ID, OBJECT_TYPE_ID)');
END
GO
IF EXISTS(SELECT * FROM ADS_WORKFLOW_STAGE WHERE SYSTEMBASED = '1')
BEGIN
	UPDATE ADS_WORKFLOW_STAGE SET SYSTEMBASED = '0' WHERE SYSTEMBASED='1';
        UPDATE ADS_WORKFLOW_TRIGGER_ACTION SET TITLE = 'Draft' WHERE NAME='ON_CREATE' AND NODE_TYPE='T';
END
GO
IF EXISTS (SELECT * FROM SYSOBJECTS WHERE  ID = OBJECT_ID(N'FK_RM_USER_ID') AND XTYPE = 'F')
BEGIN
    EXECUTE('ALTER TABLE RM_HISTORY DROP CONSTRAINT FK_RM_USER_ID');
END
GO
IF EXISTS (SELECT * FROM ADS_MM_VERSION WHERE VALUE <= 10)
BEGIN
	EXECUTE('INSERT INTO MMROLE_PERMISSIONS(MMROLE_ID, PERMISSION_ID, ENABLED)
	select MMROLE_ID, ''com.ads.mm.permission.sm.tabs.sysenv.columns.tabs.colprops.view'' PERMISSION_ID, ENABLED 
	from MMROLE_PERMISSIONS where permission_id = ''com.ads.mm.permission.sm.tabs.sysenv.columns.tabs.colprops''
	union
	select MMROLE_ID, ''com.ads.mm.permission.sm.tabs.sysenv.columns.tabs.colprops.edit'', ENABLED 
	from MMROLE_PERMISSIONS where permission_id = ''com.ads.mm.permission.sm.tabs.sysenv.columns.tabs.colprops''
	union
	select MMROLE_ID, ''com.ads.mm.permission.sm.tabs.sysenv.tables.tabs.tabprops.view'', ENABLED 
	from MMROLE_PERMISSIONS where permission_id = ''com.ads.mm.permission.sm.tabs.sysenv.tables.tabs.tabprops''
	union
	select MMROLE_ID, ''com.ads.mm.permission.sm.tabs.sysenv.tables.tabs.tabprops.edit'', ENABLED 
	from MMROLE_PERMISSIONS where permission_id = ''com.ads.mm.permission.sm.tabs.sysenv.tables.tabs.tabprops''');
END
GO
IF (SELECT COUNT(*) FROM APP_PREFERENCES WHERE PREFERENCE_NAME = 'DATA_LINEAGE_EXECUTION_WAIT_TIME') = 0
    BEGIN
        EXECUTE('INSERT INTO APP_PREFERENCES(PREFERENCE_NAME,PREFERENCE_VALUE) VALUES (''DATA_LINEAGE_EXECUTION_WAIT_TIME'',''60'')');
    END
GO
IF COL_LENGTH('BGM_METADATA_AI_MATCH_RESULT', 'AI_STATISTICS') IS NULL
BEGIN
    EXECUTE('ALTER TABLE BGM_METADATA_AI_MATCH_RESULT ADD AI_STATISTICS VARCHAR(500) DEFAULT ''{"calculatedRanking":100,"levinsteinDistance":0,"calculatedEditDistance":1}'' ');
    EXECUTE('UPDATE BGM_METADATA_AI_MATCH_RESULT SET AI_STATISTICS = ''{"calculatedRanking":100,"levinsteinDistance":0,"calculatedEditDistance":1}'' WHERE AI_STATISTICS IS NULL');
END
GO

IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'BUSINESS_TERMS' AND COLUMN_NAME = 'DESCRIPTION' AND CHARACTER_MAXIMUM_LENGTH != -1)
    BEGIN
        EXECUTE('ALTER TABLE BUSINESS_TERMS ALTER COLUMN DESCRIPTION VARCHAR(MAX)');
        EXECUTE('ALTER TABLE BUSINESS_TERMS ALTER COLUMN DEFINITION VARCHAR(MAX)');
        EXECUTE('ALTER TABLE BUSINESS_TERMS ALTER COLUMN NOTES VARCHAR(MAX)');
    END
GO

IF EXISTS (SELECT * FROM ADS_MM_VERSION WHERE VALUE <= 10.1)
    BEGIN
        EXECUTE('UPDATE ADS_KEY_VALUE_OBJECTS SET SYSTEM_BASED = 1 WHERE OBJECT_TYPE = ''BGM_TERM_CATALOGS''');
    END
GO
IF EXISTS (SELECT * FROM ADS_MM_VERSION WHERE VALUE <= 10.1) AND EXISTS (SELECT * FROM MMROLE_PERMISSIONS where PERMISSION_ID like 'com.ads.mm.permission.mm.mapgrid.edit.gridheader%')
BEGIN
    EXECUTE('delete from MMROLE_PERMISSIONS where PERMISSION_ID like ''com.ads.mm.permission.mm.mapgrid.edit.gridheader%''');
END
GO
IF EXISTS (SELECT * FROM ADS_MM_VERSION WHERE VALUE <= 10.1)
BEGIN
DECLARE @new_permission_id varchar(128);
DECLARE @old_permission_ids varchar(4000);
DECLARE KV_PERMISSION_CUR CURSOR FAST_FORWARD FOR
    SELECT 'com.ads.mm.permission.sm.extendprop', 'com.ads.mm.permission.sm.tabs.extendedproperties,com.ads.mm.permission.sm.tabs.sysenv.tables.tabs.extprops,com.ads.mm.permission.sm.tabs.sysenv.columns.tabs.extprops,com.ads.mm.permission.sm.tabs.sysenv.environmenttab.extendprop'
    UNION
    SELECT 'com.ads.mm.permission.sm.extendprop.view', 'com.ads.mm.permission.sm.tabs.extendedproperties.view,com.ads.mm.permission.sm.tabs.sysenv.tables.tabs.extprops.view,com.ads.mm.permission.sm.tabs.sysenv.columns.tabs.extprops.view,com.ads.mm.permission.sm.tabs.sysenv.environmenttab.extendprop.view'
    UNION
    SELECT 'com.ads.mm.permission.sm.extendprop.edit', 'com.ads.mm.permission.sm.tabs.extendedproperties.edit,com.ads.mm.permission.sm.tabs.sysenv.tables.tabs.extprops.edit,com.ads.mm.permission.sm.tabs.sysenv.columns.tabs.extprops.edit,com.ads.mm.permission.sm.tabs.sysenv.environmenttab.extendprop.edit'
    UNION
    SELECT 'com.ads.mm.permission.sm.extendprop.delete', 'com.ads.mm.permission.sm.tabs.extendedproperties.edit,com.ads.mm.permission.sm.tabs.sysenv.tables.tabs.extprops.edit,com.ads.mm.permission.sm.tabs.sysenv.columns.tabs.extprops.edit,com.ads.mm.permission.sm.tabs.sysenv.environmenttab.extendprop.edit'
    UNION
    SELECT 'com.ads.mm.permission.sm.configureextprop', 'com.ads.mm.permission.sm.tabs.sysenv.environmenttab.configureextprop'
    UNION
    SELECT 'com.ads.mm.permission.sm.configureextprop.view', 'com.ads.mm.permission.sm.tabs.sysenv.environmenttab.configureextprop.view'
    UNION
    SELECT 'com.ads.mm.permission.sm.configureextprop.edit', 'com.ads.mm.permission.sm.tabs.sysenv.environmenttab.configureextprop.edit'
    UNION
    SELECT 'com.ads.mm.permission.sm.configureextprop.delete', 'com.ads.mm.permission.sm.tabs.sysenv.environmenttab.configureextprop.edit'
    UNION
    SELECT 'com.ads.mm.permission.mm.extendprop', 'com.ads.mm.permission.mm.projects.projecttabs.extendedproperties,com.ads.mm.permission.mm.projects.subjectmap.subjectmaptabs.subextendedproperties,com.ads.mm.permission.mm.maptabs.userdefsix,com.ads.mm.permission.mm.mapgrid.extendprops'
    UNION
    SELECT 'com.ads.mm.permission.mm.extendprop.view', 'com.ads.mm.permission.mm.projects.extendedproperties.view,com.ads.mm.permission.mm.projects.subjectmap.subextendedproperties.view,com.ads.mm.permission.mm.maptabs.userdefsix.view,com.ads.mm.permission.mm.mapgrid.extendprops'
    UNION
    SELECT 'com.ads.mm.permission.mm.extendprop.edit', 'com.ads.mm.permission.mm.projects.extendedproperties.edit,com.ads.mm.permission.mm.projects.subjectmap.subextendedproperties.edit,com.ads.mm.permission.mm.maptabs.userdefsix.edit,com.ads.mm.permission.mm.mapgrid.extendprops'
    UNION
    SELECT 'com.ads.mm.permission.mm.extendprop.delete', 'com.ads.mm.permission.mm.projects.extendedproperties.edit,com.ads.mm.permission.mm.projects.subjectmap.subextendedproperties.edit,com.ads.mm.permission.mm.maptabs.userdefsix.edit,com.ads.mm.permission.mm.mapgrid.extendprops';
OPEN KV_PERMISSION_CUR
FETCH NEXT FROM KV_PERMISSION_CUR INTO @new_permission_id, @old_permission_ids;
WHILE @@FETCH_STATUS = 0
BEGIN
    EXECUTE('INSERT INTO MMROLE_PERMISSIONS(MMROLE_ID, PERMISSION_ID, ENABLED)
    select DISTINCT(MMROLE_ID), '''+@new_permission_id+''' PERMISSION_ID, ENABLED 
    from MMROLE_PERMISSIONS where permission_id IN (select value from dbo.SPLIT('','','''+@old_permission_ids+'''))');
    FETCH NEXT FROM KV_PERMISSION_CUR INTO @new_permission_id, @old_permission_ids;
END
CLOSE KV_PERMISSION_CUR
OPEN KV_PERMISSION_CUR
FETCH NEXT FROM KV_PERMISSION_CUR INTO @new_permission_id, @old_permission_ids;
WHILE @@FETCH_STATUS = 0
BEGIN
   EXECUTE('DELETE FROM MMROLE_PERMISSIONS WHERE PERMISSION_ID IN (select value from dbo.SPLIT('','','''+@old_permission_ids+'''))');
   FETCH NEXT FROM KV_PERMISSION_CUR INTO @new_permission_id, @old_permission_ids;
END
CLOSE KV_PERMISSION_CUR
DEALLOCATE KV_PERMISSION_CUR
    EXECUTE('INSERT INTO MMROLE_PERMISSIONS(MMROLE_ID, PERMISSION_ID, ENABLED) 
    select DISTINCT(MMROLE_ID), ''com.ads.mm.permission.mm.mdprops.extended.delete'' PERMISSION_ID, ENABLED 
    from MMROLE_PERMISSIONS where permission_id = ''com.ads.mm.permission.mm.mdprops.extended.edit''');
END
GO
IF NOT EXISTS (SELECT * FROM   SYSOBJECTS WHERE  ID = OBJECT_ID(N'ROLES_GROUPS') AND TYPE = 'U')
  BEGIN
      EXECUTE ('CREATE TABLE ROLES_GROUPS (
     RG_ID [bigint] IDENTITY(1,1) NOT NULL, 
     RG_NAME varchar(255) NOT NULL,
     DESCRIPTION varchar(255) NULL,
     ENABLE BIT NOT NULL,
     DISPLAY_ORDER FLOAT NOT NULL DEFAULT 0.0,
     SYSTEM_BASED BIT NOT NULL DEFAULT 0,
     VALID BIT NOT NULL DEFAULT 1,
     PRIMARY KEY (RG_ID) )');
  END
GO
IF NOT EXISTS (SELECT * FROM ADS_KEY_VALUE_OBJECTS WHERE  OBJECT_TYPE = 'ROLES_GROUPS')
    BEGIN
    INSERT INTO ADS_KEY_VALUE_OBJECTS (OBJECT_TYPE,OBJECT_TABLE,OBJECT_TABLE_COLUMN,OBJECT_PARENT_TYPE,OBJECT_PARENT_COLUMN_ID,OBJECT_LEVEL,MODULE_KEY,SYSTEM_BASED,OBJECT_TITLE)
    SELECT 'ROLES_GROUPS','ROLES_GROUPS','RG_ID','','','1','com.ads.mm.permission.rsm',1,'Roles groups';
END
GO
IF NOT EXISTS(SELECT * FROM SYS.VIEWS WHERE NAME = 'ROLES_GROUPS_V')
BEGIN
   EXEC ('CREATE VIEW ROLES_GROUPS_V AS SELECT * FROM ROLES_GROUPS WHERE ENABLE = 1 AND VALID = 1');
END
GO
IF COL_LENGTH('SECURITY_ROLES', 'RO_ID') IS NULL
    BEGIN
        EXECUTE('ALTER TABLE SECURITY_ROLES ADD RO_ID [bigint] IDENTITY(1,1)');
        EXECUTE('ALTER TABLE SECURITY_ROLES ADD UNIQUE (RO_ID)');
        EXECUTE('ALTER TABLE SECURITY_ROLES ADD BUSINESS_NAME VARCHAR(50)');
        EXECUTE('UPDATE SECURITY_ROLES SET BUSINESS_NAME = ROLE_NAME');
    END
GO
IF NOT EXISTS (SELECT * FROM   SYSOBJECTS WHERE  ID = OBJECT_ID(N'GROUP_ASSIGNED_ROLES') AND TYPE = 'U')
  BEGIN
      EXECUTE ('CREATE TABLE GROUP_ASSIGNED_ROLES (
         GAR_ID [bigint] IDENTITY(1,1) NOT NULL,
         RG_ID [bigint] NOT NULL,
         RO_ID [bigint] NOT NULL,
         FOREIGN KEY (RG_ID) REFERENCES ROLES_GROUPS(RG_ID),
         FOREIGN KEY (RO_ID) REFERENCES SECURITY_ROLES(RO_ID),
         PRIMARY KEY (GAR_ID) )');
      EXECUTE ('ALTER TABLE GROUP_ASSIGNED_ROLES ADD CONSTRAINT R_12 FOREIGN KEY (RG_ID) REFERENCES [ROLES_GROUPS] (RG_ID)');
  END
GO
IF NOT EXISTS (SELECT * FROM   SYSOBJECTS WHERE  ID = OBJECT_ID(N'OBJECT_ROLE_GROUP_USERS') AND TYPE = 'U')
  BEGIN
      EXECUTE ('CREATE TABLE OBJECT_ROLE_GROUP_USERS (
                ID [bigint] IDENTITY(1,1) NOT NULL,
                OBJECT_TYPE_ID [bigint]  NOT NULL,
                OBJECT_ID  [bigint] NOT NULL,
                RG_ID [bigint] NOT NULL,
                USER_ID [bigint] NOT NULL,
                FOREIGN KEY (RG_ID) REFERENCES ROLES_GROUPS(RG_ID),
                PRIMARY KEY (ID))');
  END
GO
IF NOT EXISTS (SELECT * FROM ADS_KEY_VALUE_OBJECTS WHERE  OBJECT_TYPE = 'RDM_REFERENCE_TABLE')
    BEGIN
        INSERT INTO ADS_KEY_VALUE_OBJECTS (OBJECT_TYPE,OBJECT_TABLE,OBJECT_TABLE_COLUMN,OBJECT_PARENT_TYPE,OBJECT_PARENT_COLUMN_ID,OBJECT_LEVEL,MODULE_KEY,SYSTEM_BASED,OBJECT_TITLE)
        SELECT 'RDM_REFERENCE_TABLE','RDM_REFERENCE_TABLE','RDM_REF_TABLE_ID','','','1','com.ads.mm.permission.rdm',1,'RDM TABLE';
    END
GO
IF COL_LENGTH('USERS', 'USER_ID')  < 50
    BEGIN
        EXECUTE('ALTER TABLE USER_ASSIGNED_ROLES DROP CONSTRAINT R_6');
        EXECUTE('ALTER TABLE OBJECT_USER DROP CONSTRAINT FK_OBJECT_USER_UID');
        EXECUTE('ALTER TABLE CHAT_THREAD DROP CONSTRAINT FK_CREATED_BY_CHAT_THREAD');
        EXECUTE('ALTER TABLE CHAT_THREAD_USER DROP CONSTRAINT FK_CHAT_THREAD_USER_USERS');
        EXECUTE('ALTER TABLE CHAT_MESSAGES DROP CONSTRAINT FK_CHAT_MESSAGES_USERS');
        EXECUTE('ALTER TABLE CHAT_USER_MESSAGES DROP CONSTRAINT FK_CHAT_USER_MESSAGES_USERS');
        EXECUTE('ALTER TABLE ADS_PROFILES DROP CONSTRAINT FK_ADS_PROFILES_OUID');
        EXECUTE('ALTER TABLE OBJECT_CONFIGURATIONS DROP CONSTRAINT FK_OBJECT_CONFIG_USERID');
        EXECUTE('ALTER TABLE CSM_CODESET_CAT_USERS DROP CONSTRAINT FK_CSM_CDST_USR_ID');
        EXECUTE('ALTER TABLE CSM_MAP_CAT_USERS DROP CONSTRAINT FK_CSM_MAP_USER_ID');
        EXECUTE('ALTER TABLE PROJECT_RESOURCES DROP CONSTRAINT R_9');
        EXECUTE('ALTER TABLE RDM_REF_TABLE_USERS DROP CONSTRAINT FK_RDM_TBL_USER_ID');

        EXECUTE('ALTER TABLE ADS_KEY_VALUE ALTER COLUMN CREATED_BY VARCHAR(50) NULL');
        EXECUTE('ALTER TABLE ADS_KEY_VALUE ALTER COLUMN LAST_MODIFIED_BY VARCHAR(50) NULL');
        EXECUTE('ALTER TABLE ADS_PROFILES ALTER COLUMN OWNER_USER_ID VARCHAR(50) NOT NULL');
        EXECUTE('ALTER TABLE USERS ALTER COLUMN USER_ID VARCHAR(50) NOT NULL');
        EXECUTE('ALTER TABLE USERS ALTER COLUMN CREATED_BY  VARCHAR(50) NOT NULL');
        EXECUTE('ALTER TABLE USERS ALTER COLUMN LAST_MODIFIED_BY  VARCHAR(50) NULL');
        EXECUTE('ALTER TABLE OBJECT_USER ALTER COLUMN USER_ID VARCHAR(50) NOT NULL');
        EXECUTE('ALTER TABLE CSM_MAP_CAT_USERS ALTER COLUMN USER_ID VARCHAR(50) NOT NULL');
        EXECUTE('ALTER TABLE CSM_CODESET_CAT_USERS ALTER COLUMN USER_ID VARCHAR(50) NOT NULL');
        EXECUTE('ALTER TABLE CHAT_USER_MESSAGES ALTER COLUMN USER_ID VARCHAR(50) NOT NULL');
        EXECUTE('ALTER TABLE CHAT_THREAD_USER ALTER COLUMN USER_ID VARCHAR(50) NOT NULL');
        EXECUTE('ALTER TABLE PROJECT_RESOURCES ALTER COLUMN USER_ID  VARCHAR(50) NOT NULL');
        EXECUTE('ALTER TABLE RDM_REF_TABLE_USERS ALTER COLUMN USER_ID VARCHAR(50) NOT NULL');
        EXECUTE('ALTER TABLE OBJECT_CONFIGURATIONS ALTER COLUMN CONFIGURATION_USER VARCHAR(50) NOT NULL');
        EXECUTE('ALTER TABLE CHAT_MESSAGES ALTER COLUMN CREATED_BY VARCHAR(50) NOT NULL');
        EXECUTE('ALTER TABLE CHAT_THREAD ALTER COLUMN CREATED_BY VARCHAR(50) NOT NULL');
        EXECUTE('ALTER TABLE CHAT_THREAD ALTER COLUMN MODIFIED_BY VARCHAR(50) NULL');
        EXECUTE('ALTER TABLE SYS_CON_ENVIRONMENTS ALTER COLUMN USER_ID VARCHAR(50) NULL');
        EXECUTE('ALTER TABLE SPECIFICATION_LOCK ALTER COLUMN USER_ID VARCHAR(50) NULL');
        EXECUTE('ALTER TABLE RM_HISTORY ALTER COLUMN USER_ID VARCHAR(50) NOT NULL');
        EXECUTE('ALTER TABLE RDM_REF_FOLDER_USERS ALTER COLUMN USER_ID VARCHAR(50) NOT NULL');
        EXECUTE('ALTER TABLE USER_ASSIGNED_ROLES ALTER COLUMN USER_ID VARCHAR(50) NOT NULL');
        EXECUTE('ALTER TABLE CATFX_DIALOG_COMPONENT ALTER COLUMN CREATED_BY VARCHAR(50) NOT NULL');
        EXECUTE('ALTER TABLE CATFX_DIALOG_COMPONENT ALTER COLUMN LAST_MODIFIED_BY VARCHAR(50) NULL');
        EXECUTE('ALTER TABLE CATFX_PROFILE_COMPONENT ALTER COLUMN CREATED_BY VARCHAR(50) NOT NULL');
        EXECUTE('ALTER TABLE CATFX_PROFILE_COMPONENT ALTER COLUMN LAST_MODIFIED_BY VARCHAR(50) NULL');
        EXECUTE('ALTER TABLE CATFX_SCRIPT ALTER COLUMN CREATED_BY VARCHAR(50) NOT NULL');
        EXECUTE('ALTER TABLE CATFX_WORKFLOW ALTER COLUMN CREATED_BY VARCHAR(50) NOT NULL');
        EXECUTE('ALTER TABLE CATFX_WORKFLOW ALTER COLUMN LAST_MODIFIED_BY VARCHAR(50) NULL');
        EXECUTE('ALTER TABLE CATFX_WORKFLOW_COMPONENT ALTER COLUMN CREATED_BY VARCHAR(50) NOT NULL');
        EXECUTE('ALTER TABLE CATFX_WORKFLOW_COMPONENT ALTER COLUMN LAST_MODIFIED_BY VARCHAR(50) NULL');
        EXECUTE('ALTER TABLE CATFX_WORKFLOW_CONNECTION ALTER COLUMN CREATED_BY VARCHAR(50) NOT NULL');
        EXECUTE('ALTER TABLE CATFX_WORKFLOW_CONNECTION ALTER COLUMN LAST_MODIFIED_BY VARCHAR(50) NULL');
        EXECUTE('ALTER TABLE CSM_CODE_VALUE ALTER COLUMN CREATED_BY VARCHAR(50) NULL');
        EXECUTE('ALTER TABLE CSM_CODE_VALUE ALTER COLUMN LAST_MODIFIED_BY VARCHAR(50) NULL');
        EXECUTE('ALTER TABLE CSM_CODESET ALTER COLUMN CREATED_BY VARCHAR(50) NOT NULL');
        EXECUTE('ALTER TABLE CSM_CODESET ALTER COLUMN LAST_MODIFIED_BY VARCHAR(50) NULL');
        EXECUTE('ALTER TABLE CSM_CODESET ALTER COLUMN CODESET_LOCKED_BY VARCHAR(50) NULL');
        EXECUTE('ALTER TABLE CSM_MAPPING_DETAILS ALTER COLUMN CSM_MAP_LOCKED_BY VARCHAR(50) NULL');
        EXECUTE('ALTER TABLE FORM_FIELD_DATA ALTER COLUMN CREATED_BY VARCHAR(50) NOT NULL');
        EXECUTE('ALTER TABLE FORM_FIELD_DATA ALTER COLUMN LAST_MODIFIED_BY VARCHAR(50) NULL');
        EXECUTE('ALTER TABLE MAPPING_DOCUMENTS ALTER COLUMN LAST_MODIFIED_BY VARCHAR(50) NULL');
        EXECUTE('ALTER TABLE MAPPING_DOCUMENTS ALTER COLUMN CREATED_BY VARCHAR(50) NOT NULL');
        EXECUTE('ALTER TABLE MAPPING_DOCUMENTS ALTER COLUMN APPROVED_BY VARCHAR(50) NULL');
        EXECUTE('ALTER TABLE OBJECT_DOCUMENT ALTER COLUMN CREATED_BY VARCHAR(50) NOT NULL');
        EXECUTE('ALTER TABLE OBJECT_DOCUMENT ALTER COLUMN LAST_MODIFIED_BY VARCHAR(50) NULL');
        EXECUTE('ALTER TABLE OBJECT_DOCUMENT ALTER COLUMN APPROVED_BY VARCHAR(50) NULL');
        EXECUTE('ALTER TABLE PLUGINS ALTER COLUMN CREATED_BY NVARCHAR(50) NOT NULL');
        EXECUTE('ALTER TABLE PLUGINS ALTER COLUMN LAST_MODIFIED_BY NVARCHAR(50) NULL');
        EXECUTE('ALTER TABLE PROJECT ALTER COLUMN CREATED_BY VARCHAR(50) NOT NULL');
        EXECUTE('ALTER TABLE PROJECT ALTER COLUMN LAST_MODIFIED_BY VARCHAR(50) NULL');
        EXECUTE('ALTER TABLE PROJECT_DOCUMENT_TEMPLATES ALTER COLUMN LAST_MODIFIED_BY VARCHAR(50) NULL');
        EXECUTE('ALTER TABLE PROJECT_DOCUMENT_TEMPLATES ALTER COLUMN CREATED_BY VARCHAR(50) NOT NULL');
        EXECUTE('ALTER TABLE PROJECT_DOCUMENTS ALTER COLUMN CREATED_BY VARCHAR(50) NOT NULL');
        EXECUTE('ALTER TABLE PROJECT_DOCUMENTS ALTER COLUMN LAST_MODIFIED_BY VARCHAR(50) NULL');
        EXECUTE('ALTER TABLE PROJECT_RESOURCES ALTER COLUMN CREATED_BY VARCHAR(50) NOT NULL');
        EXECUTE('ALTER TABLE PROJECT_RESOURCES ALTER COLUMN LAST_MODIFIED_BY VARCHAR(50) NULL');
        EXECUTE('ALTER TABLE SECURITY_ROLES ALTER COLUMN CREATED_BY VARCHAR(50) NOT NULL');
        EXECUTE('ALTER TABLE SECURITY_ROLES ALTER COLUMN LAST_MODIFIED_BY VARCHAR(50) NULL');        
        EXECUTE('ALTER TABLE SYSTEM_TABLE_METADATA ALTER COLUMN LAST_MODIFIED_BY  VARCHAR(50) NULL');
        EXECUTE('ALTER TABLE SYSTEM_TABLE_METADATA ALTER COLUMN CREATED_BY  VARCHAR(50) NOT NULL');
        EXECUTE('ALTER TABLE SYSTEM_TABLE_COLUMNS_METADATA ALTER COLUMN LAST_MODIFIED_BY  VARCHAR(50) NULL');
        EXECUTE('ALTER TABLE SYSTEM_TABLE_COLUMNS_METADATA ALTER COLUMN CREATED_BY  VARCHAR(50) NOT NULL');
        EXECUTE('ALTER TABLE SYSTEM_DOCUMENTS ALTER COLUMN LAST_MODIFIED_BY  VARCHAR(50) NULL');
        EXECUTE('ALTER TABLE SYSTEM_DOCUMENTS ALTER COLUMN CREATED_BY  VARCHAR(50) NOT NULL');
        EXECUTE('ALTER TABLE SYSTEM_DOCUMENTS ALTER COLUMN APPROVED_BY  VARCHAR(50) NULL');
        EXECUTE('ALTER TABLE SYSTEM_DEFINITION_DETAILS ALTER COLUMN CREATED_BY  VARCHAR(50) NOT NULL');
        EXECUTE('ALTER TABLE SYSTEM_DEFINITION_DETAILS ALTER COLUMN LAST_MODIFIED_BY  VARCHAR(50) NULL');
        EXECUTE('ALTER TABLE SYS_CON_ENVIRONMENTS ALTER COLUMN LAST_MODIFIED_BY  VARCHAR(50) NULL');
        EXECUTE('ALTER TABLE SYS_CON_ENVIRONMENTS ALTER COLUMN CREATED_BY  VARCHAR(50) NOT NULL');
        EXECUTE('ALTER TABLE SM_CLASSIFICATION_TABLE ALTER COLUMN CREATED_BY  VARCHAR(50) NULL');
        EXECUTE('ALTER TABLE SM_CLASSIFICATION_TABLE ALTER COLUMN LAST_MODIFIED_BY  VARCHAR(50) NULL');
        EXECUTE('ALTER TABLE SM_CLASSIFICATION_COLUMN ALTER COLUMN CREATED_BY  VARCHAR(50) NULL');
        EXECUTE('ALTER TABLE SM_CLASSIFICATION_COLUMN ALTER COLUMN LAST_MODIFIED_BY  VARCHAR(50) NULL');
        EXECUTE('ALTER TABLE TCM_TESTCASE_TYPE ALTER COLUMN MODIFIED_BY  VARCHAR(50) NULL');
        EXECUTE('ALTER TABLE TCM_TESTCASE_TYPE ALTER COLUMN CREATED_BY  VARCHAR(50) NULL');
        EXECUTE('ALTER TABLE TCM_TESTCASE_DOCS ALTER COLUMN LAST_MODIFIED_BY  VARCHAR(50) NULL');
        EXECUTE('ALTER TABLE TCM_TESTCASE_DOCS ALTER COLUMN CREATED_BY  VARCHAR(50) NOT NULL');
        EXECUTE('ALTER TABLE TCM_TESTCASE_DOCS ALTER COLUMN APPROVED_BY  VARCHAR(50) NULL');
        EXECUTE('ALTER TABLE TRANSFORMATIONS_HISTORY ALTER COLUMN LAST_MODIFIED_BY  VARCHAR(50) NULL');
        EXECUTE('ALTER TABLE TRANSFORMATIONS_HISTORY ALTER COLUMN CREATED_BY  VARCHAR(50) NULL');
        EXECUTE('ALTER TABLE TRANSFORMATIONS ALTER COLUMN LAST_MODIFIED_BY  VARCHAR(50) NULL');
        EXECUTE('ALTER TABLE TRANSFORMATIONS ALTER COLUMN CREATED_BY  VARCHAR(50) NOT NULL');

        EXECUTE('ALTER TABLE ADS_PROFILES ADD CONSTRAINT FK_ADS_PROFILES_OUID FOREIGN KEY (OWNER_USER_ID) REFERENCES USERS (USER_ID)');
        EXECUTE('ALTER TABLE OBJECT_CONFIGURATIONS ADD CONSTRAINT FK_OBJECT_CONFIG_USERID FOREIGN KEY (CONFIGURATION_USER) REFERENCES USERS (USER_ID)');
        EXECUTE('ALTER TABLE CSM_CODESET_CAT_USERS ADD CONSTRAINT FK_CSM_CDST_USR_ID FOREIGN KEY (USER_ID) REFERENCES USERS (USER_ID) ON DELETE CASCADE');
        EXECUTE('ALTER TABLE CSM_MAP_CAT_USERS ADD CONSTRAINT FK_CSM_MAP_USER_ID FOREIGN KEY (USER_ID) REFERENCES USERS (USER_ID) ON  DELETE CASCADE');
        EXECUTE('ALTER TABLE CHAT_USER_MESSAGES ADD CONSTRAINT FK_CHAT_USER_MESSAGES_USERS FOREIGN KEY (USER_ID) REFERENCES USERS (USER_ID)');
        EXECUTE('ALTER TABLE CHAT_MESSAGES ADD CONSTRAINT FK_CHAT_MESSAGES_USERS FOREIGN KEY (CREATED_BY) REFERENCES USERS (USER_ID)');
        EXECUTE('ALTER TABLE CHAT_THREAD_USER ADD CONSTRAINT FK_CHAT_THREAD_USER_USERS FOREIGN KEY (USER_ID) REFERENCES USERS (USER_ID)');
        EXECUTE('ALTER TABLE CHAT_THREAD ADD CONSTRAINT FK_CREATED_BY_CHAT_THREAD FOREIGN KEY (CREATED_BY) REFERENCES USERS (USER_ID)');
        EXECUTE('ALTER TABLE OBJECT_USER ADD CONSTRAINT FK_OBJECT_USER_UID FOREIGN KEY (USER_ID) REFERENCES USERS (USER_ID)');
        EXECUTE('ALTER TABLE USER_ASSIGNED_ROLES ADD CONSTRAINT R_6 FOREIGN KEY (USER_ID) REFERENCES USERS (USER_ID) ON DELETE CASCADE');
        EXECUTE('ALTER TABLE USER_ASSIGNED_ROLES CHECK CONSTRAINT R_6');
        EXECUTE('ALTER TABLE PROJECT_RESOURCES ADD CONSTRAINT R_9 FOREIGN KEY (USER_ID, ROLE_ID) REFERENCES USER_ASSIGNED_ROLES (USER_ID, ROLE_ID)');
        EXECUTE('ALTER TABLE RDM_REF_TABLE_USERS ADD CONSTRAINT FK_RDM_TBL_USER_ID FOREIGN KEY (USER_ID) REFERENCES USERS (USER_ID)');
    END
GO
IF EXISTS (SELECT * FROM ADS_MM_VERSION WHERE VALUE <= 10.1)
    BEGIN
    IF OBJECT_ID('tempdb..#TEMP_FORM_FIELD_DATA') IS NULL
        BEGIN
            WITH CTE1 AS (SELECT FIELD_DATA_ID, FIELD_ID, FIELD_DATA, LTRIM(RTRIM(SUBSTRING(FIELD_DATA, 1, 50))) "FIELD_DATA_NEW", FIELD_DESCRIPTION, IS_PUBLISHED, IS_SYSTEM_BASED, CREATED_BY, CREATED_DATE, LAST_MODIFIED_BY, LAST_MODIFIED_DATE FROM FORM_FIELD_DATA FFD) SELECT * INTO #TEMP_FORM_FIELD_DATA FROM CTE1
        END
    IF NOT EXISTS (SELECT 1 FROM ROLES_GROUPS WHERE RG_NAME = 'Data Steward')
        BEGIN
            EXECUTE('INSERT INTO ROLES_GROUPS(RG_NAME,DESCRIPTION,ENABLE,DISPLAY_ORDER,SYSTEM_BASED) VALUES (''Data Steward'','''',1,1.0,1)');
            EXECUTE('INSERT INTO ROLES_GROUPS(RG_NAME,DESCRIPTION,ENABLE,DISPLAY_ORDER,SYSTEM_BASED) VALUES (''Data Owner'','''',1,2.0,1)');
            EXECUTE('INSERT INTO ROLES_GROUPS(RG_NAME,DESCRIPTION,ENABLE,DISPLAY_ORDER,SYSTEM_BASED) VALUES (''Technical Data Steward'','''',1,3.0,1)');
            IF NOT EXISTS (SELECT 1 FROM SECURITY_ROLES WHERE ROLE_ID = 'com.ads.roles.LegacyDataSteward')
                BEGIN
                    EXECUTE('INSERT INTO SECURITY_ROLES(ROLE_NAME,ROLE_DESCR,CREATED_BY,CREATED_DATETIME,ROLE_ID,BUSINESS_NAME) VALUES(''Legacy Data Steward'',''This is the older data steward role that was supported till version 10.1. This is a default role that is being used to migrate the old data steward users to the new structure with version 10.2.'',''System'',GETDATE(),''com.ads.roles.LegacyDataSteward'',''Legacy Data Steward'')');
                END
            IF NOT EXISTS (SELECT 1 FROM GROUP_ASSIGNED_ROLES WHERE RG_ID = (SELECT RG_ID FROM ROLES_GROUPS WHERE RG_NAME = 'Data Steward'))
                BEGIN
                    EXECUTE('WITH CTE1 AS (SELECT FIELD_DATA_NEW, FIELD_DATA_NEW AS [USERNAME], ''Admin'' AS[DEFAULT_ROLE], '' '' AS[USER_PASSWORD], CREATED_BY, CREATED_DATE, LAST_MODIFIED_BY, LAST_MODIFIED_DATE, ''English_en_US'' AS[USER_LANGUAGE], ''com.ads.mm.permission.mm'' AS[LANEDE_MODULE], ''N'' AS[EXTERNAL_USER], ''E'' AS[ACCOUNT_STATUS], 0 AS [FAILED_LOGIN_ATTEMPTS] FROM #TEMP_FORM_FIELD_DATA WHERE FIELD_ID = (SELECT FIELD_ID FROM FORM_FIELD WHERE FIELD_NAME = ''DATASTEWARD'') AND NOT EXISTS(SELECT 1 FROM USERS WHERE USER_ID = FIELD_DATA_NEW OR USER_FULL_NAME = FIELD_DATA_NEW)), CTE2 AS (SELECT FIELD_DATA_NEW, FIELD_DATA_NEW AS [USERNAME], ''Admin'' AS[DEFAULT_ROLE], '' '' AS[USER_PASSWORD], FFD.CREATED_BY, FFD.CREATED_DATE, FFD.LAST_MODIFIED_BY, FFD.LAST_MODIFIED_DATE, ''English_en_US'' AS[USER_LANGUAGE], ''com.ads.mm.permission.mm'' AS[LANEDE_MODULE], ''N'' AS[EXTERNAL_USER], ''E'' AS[ACCOUNT_STATUS], 0 AS [FAILED_LOGIN_ATTEMPTS] FROM #TEMP_FORM_FIELD_DATA FFD JOIN USERS U ON U.USER_FULL_NAME = FFD.FIELD_DATA_NEW WHERE FIELD_ID = (SELECT FIELD_ID FROM FORM_FIELD WHERE FIELD_NAME = ''DATASTEWARD'') AND NOT EXISTS (SELECT 1 FROM USERS WHERE USER_ID = FIELD_DATA_NEW) GROUP BY FFD.FIELD_DATA_NEW, FFD.CREATED_BY, FFD.CREATED_DATE, FFD.LAST_MODIFIED_BY, FFD.LAST_MODIFIED_DATE HAVING Count(ID) > 1) INSERT INTO USERS (USER_ID, USER_FULL_NAME, DEFAULT_ROLE, USER_PASSWORD, CREATED_BY, CREATED_DATETIME, LAST_MODIFIED_BY, LAST_MODIFIED_DATE_TIME, USER_LANGUAGE, LANDED_MODULE, EXTERNAL_USER, ACCOUNT_STATUS, FAILED_LOGIN_ATTEMPTS) SELECT * FROM CTE1 UNION SELECT * FROM CTE2 ');
                    EXECUTE('INSERT INTO GROUP_ASSIGNED_ROLES(RG_ID,RO_ID) VALUES((SELECT RG_ID FROM ROLES_GROUPS WHERE RG_NAME = ''Data Steward''),(SELECT RO_ID FROM SECURITY_ROLES SR WHERE ROLE_ID = ''com.ads.roles.LegacyDataSteward''))');
                    EXECUTE('WITH ASSIGN_ROLE_CTE1 AS ( SELECT U.USER_ID AS [USER_ID] , ''com.ads.roles.LegacyDataSteward'' AS [ROLE_ID] , FFD.FIELD_DATA_NEW FROM #TEMP_FORM_FIELD_DATA FFD JOIN USERS U ON U.USER_ID = FFD.FIELD_DATA_NEW WHERE FFD.FIELD_ID = ( SELECT FIELD_ID FROM FORM_FIELD WHERE FIELD_NAME = ''DATASTEWARD'' ) GROUP BY U.USER_ID , FFD.FIELD_DATA_NEW ) ,ASSIGN_ROLE_CTE2 AS ( SELECT U.USER_ID AS [USER_ID] , ''com.ads.roles.LegacyDataSteward'' AS [ROLE_ID] , FFD.FIELD_DATA_NEW FROM #TEMP_FORM_FIELD_DATA FFD JOIN USERS U ON U.USER_FULL_NAME = FFD.FIELD_DATA_NEW WHERE FFD.FIELD_ID = ( SELECT FIELD_ID FROM FORM_FIELD WHERE FIELD_NAME = ''DATASTEWARD'' ) AND FFD.FIELD_DATA_NEW NOT IN ( SELECT FIELD_DATA_NEW FROM ASSIGN_ROLE_CTE1 ) GROUP BY U.USER_ID , FFD.FIELD_DATA_NEW ) ,ASSIGN_ROLE_CTE AS ( SELECT USER_ID , ROLE_ID FROM ASSIGN_ROLE_CTE1 UNION SELECT USER_ID , ROLE_ID FROM ASSIGN_ROLE_CTE2 ) INSERT INTO USER_ASSIGNED_ROLES ( USER_ID, ROLE_ID ) SELECT USER_ID , ROLE_ID FROM ASSIGN_ROLE_CTE CTE WHERE NOT EXISTS ( SELECT 1 FROM USER_ASSIGNED_ROLES T WHERE T.USER_ID = CTE.USER_ID AND T.ROLE_ID = CTE.ROLE_ID )');
                    EXECUTE('WITH ROOT_CAT_CTE AS(SELECT CATEGORY_ID,  PARENT_CATEGORY_ID,  CATEGORY_ID  AS[ROOT_CAT_ID]  FROM   BG_CATEGORIES BC  WHERE  BC.PARENT_CATEGORY_ID = -1  UNION ALL  SELECT BC.CATEGORY_ID,  BC.PARENT_CATEGORY_ID,  CTE.[ROOT_CAT_ID]  FROM   BG_CATEGORIES BC  JOIN ROOT_CAT_CTE CTE   ON BC.PARENT_CATEGORY_ID = CTE.CATEGORY_ID), DS_CTE AS(SELECT FFD.* FROM FORM_FIELD_DATA FFD JOIN FORM_FIELD FF ON FFD.FIELD_ID = FF.FIELD_ID WHERE FF.FIELD_NAME =''DATASTEWARD'' ),  BT_CTE  AS (SELECT (SELECT OBJECT_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE = ''BGM_TERM_CATALOG'')AS[OBJECT_TYPE_ID],BT.CATEGORY_ID AS[OBJECT_ID],(SELECT OBJECT_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE = ''ADS_SECURITY_ROLE'')AS [SCOPE_OBJECT_TYPE_ID],''com.ads.roles.LegacyDataSteward'' AS[SCOPE_OBJECT_ID] FROM BUSINESS_TERMS BT  JOIN DS_CTE DS ON DS.FIELD_DATA_ID = BT.DATA_STEWARD_NAME  GROUP BY CATEGORY_ID), BP_CTE AS (SELECT (SELECT OBJECT_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE = ''BGM_POLICY_CATALOG'')AS[OBJECT_TYPE_ID],BP.CATALOG_ID AS[OBJECT_ID],(SELECT OBJECT_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE = ''ADS_SECURITY_ROLE'')AS [SCOPE_OBJECT_TYPE_ID],''com.ads.roles.LegacyDataSteward'' AS[SCOPE_OBJECT_ID] FROM BG_POLICIES BP  JOIN DS_CTE DS ON DS.FIELD_DATA_ID = BP.DATA_STEWARD_ID  GROUP BY CATALOG_ID), BR_CTE AS (SELECT (SELECT OBJECT_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE = ''BGM_RULE_CATALOG'')AS[OBJECT_TYPE_ID],BR.CATALOG_ID AS[OBJECT_ID],(SELECT OBJECT_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE = ''ADS_SECURITY_ROLE'')AS [SCOPE_OBJECT_TYPE_ID],''com.ads.roles.LegacyDataSteward'' AS[SCOPE_OBJECT_ID] FROM BG_BUSINESS_RULES BR  JOIN DS_CTE DS ON DS.FIELD_DATA_ID = BR.DATA_STEWARD_ID  GROUP  BY CATALOG_ID), BGM_OBJECTS AS( SELECT * FROM BT_CTE BT WHERE NOT EXISTS (SELECT 1 FROM ADS_OBJECT_TO_OBJECT_SCOPE T WHERE T.OBJECT_ID = BT.OBJECT_ID AND T.OBJECT_TYPE_ID = BT.OBJECT_TYPE_ID    AND T.SCOPE_OBJECT_ID = BT.SCOPE_OBJECT_ID) UNION ALL SELECT * FROM BP_CTE BP WHERE NOT EXISTS (SELECT 1 FROM ADS_OBJECT_TO_OBJECT_SCOPE T WHERE T.OBJECT_ID = BP.OBJECT_ID AND T.OBJECT_TYPE_ID = BP.OBJECT_TYPE_ID    AND T.SCOPE_OBJECT_ID = BP.SCOPE_OBJECT_ID) UNION ALL SELECT * FROM BR_CTE BR WHERE NOT EXISTS (SELECT 1 FROM ADS_OBJECT_TO_OBJECT_SCOPE T WHERE T.OBJECT_ID = BR.OBJECT_ID AND T.OBJECT_TYPE_ID = BR.OBJECT_TYPE_ID    AND T.SCOPE_OBJECT_ID = BR.SCOPE_OBJECT_ID) )INSERT INTO ADS_OBJECT_TO_OBJECT_SCOPE(OBJECT_TYPE_ID,OBJECT_ID, SCOPE_OBJECT_TYPE_ID,SCOPE_OBJECT_ID) SELECT DISTINCT BO.OBJECT_TYPE_ID,RC.ROOT_CAT_ID,BO.SCOPE_OBJECT_TYPE_ID,BO.SCOPE_OBJECT_ID FROM BGM_OBJECTS BO JOIN ROOT_CAT_CTE RC ON BO.OBJECT_ID = RC.CATEGORY_ID');                
                    EXECUTE(' WITH TYPE_IDS_CTE AS( SELECT (SELECT RG_ID FROM ROLES_GROUPS WHERE RG_NAME=''Data Steward'') RG_ID, (SELECT OBJECT_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE = ''BGM_TERM'') AS TERM_ID, (SELECT OBJECT_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE = ''BGM_POLICY'') AS POLICY_ID, (SELECT OBJECT_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE = ''BGM_RULE'') AS RULE_ID ), CTE1 AS (SELECT FIELD_DATA_ID, FIELD_ID, FIELD_DATA, LTRIM(RTRIM(Substring(FIELD_DATA, 1, 50))) "FIELD_DATA_NEW" FROM FORM_FIELD_DATA FFD), USERnAMES AS ( SELECT user_full_name, MAX(id) as id FROM users GROUP BY user_full_name ) , CTE2 AS (SELECT CT1.*, U.USER_ID, U.USER_FULL_NAME, U.ID FROM CTE1 CT1 LEFT JOIN USERS U ON U.USER_ID = CT1.FIELD_DATA_NEW ), CTE3 AS ( SELECT CT1.*, us.USER_ID, U.USER_FULL_NAME, U.ID FROM CTE1 CT1 LEFT JOIN USERnAMES U ON U.user_full_name = CT1.FIELD_DATA_NEW join users us on us.id = u.id WHERE CT1.FIELD_DATA_ID IN (SELECT C2.FIELD_DATA_ID FROM CTE2 C2 WHERE USER_ID IS NULL) ), CT4 AS ( select * from cte2 WHERE USER_ID IS NOT NULL UNION select * from cte3 WHERE USER_ID IS NOT NULL ) INSERT INTO OBJECT_ROLE_GROUP_USERS ( OBJECT_TYPE_ID, OBJECT_ID, RG_ID, USER_ID ) SELECT IDS.TERM_ID OBJECT_TYPE_ID, BT.BUS_TERM_ID OBJECT_ID, IDS.RG_ID,C4.ID FROM BUSINESS_TERMS BT JOIN CT4 C4 ON BT.DATA_STEWARD_NAME = C4.FIELD_DATA_ID CROSS JOIN TYPE_IDS_CTE IDS UNION SELECT IDS.POLICY_ID OBJECT_TYPE_ID, BP.ID OBJECT_ID, IDS.RG_ID,C4.ID FROM BG_POLICIES BP JOIN CT4 C4 ON BP.DATA_STEWARD_ID = C4.FIELD_DATA_ID CROSS JOIN TYPE_IDS_CTE IDS UNION SELECT IDS.RULE_ID OBJECT_TYPE_ID, BR.ID OBJECT_ID, IDS.RG_ID,C4.ID FROM BG_BUSINESS_RULES BR JOIN CT4 C4 ON BR.DATA_STEWARD_ID = C4.FIELD_DATA_ID CROSS JOIN TYPE_IDS_CTE IDS');

                    IF OBJECT_ID('tempdb..#SM_DS_UPDATE') IS NULL
                        BEGIN
                            WITH CTE1 AS (SELECT FIELD_DATA_ID, FIELD_ID, FIELD_DATA, LTRIM(RTRIM(Substring(FIELD_DATA, 1, 50))) "FIELD_DATA_NEW" FROM FORM_FIELD_DATA FFD), USERnAMES AS ( SELECT user_full_name, MAX(id) as id FROM users GROUP BY user_full_name ) , CTE2 AS (SELECT CT1.*, U.USER_ID, U.USER_FULL_NAME, U.ID FROM CTE1 CT1 LEFT JOIN USERS U ON U.USER_ID = CT1.FIELD_DATA_NEW ), CTE3 AS ( SELECT CT1.*, us.USER_ID, U.USER_FULL_NAME, U.ID FROM CTE1 CT1 LEFT JOIN USERnAMES U ON U.user_full_name = CT1.FIELD_DATA_NEW join users us on us.id = u.id WHERE CT1.FIELD_DATA_ID IN (SELECT C2.FIELD_DATA_ID FROM CTE2 C2 WHERE USER_ID IS NULL) ), CT4 AS ( select * from cte2 WHERE USER_ID IS NOT NULL UNION select * from cte3 WHERE USER_ID IS NOT NULL ), CT5 AS ( SELECT * FROM CT4 C4 WHERE C4.FIELD_DATA_ID IN (SELECT MAX(FIELD_DATA_ID) FROM CT4 GROUP BY FIELD_DATA_NEW ) )SELECT * INTO #SM_DS_UPDATE FROM CT5
                        END
                    EXECUTE('UPDATE SYSTEM_DEFINITION_DETAILS SET DATA_STEWARD_NAME = SMU.USER_FULL_NAME FROM SYSTEM_DEFINITION_DETAILS JOIN #SM_DS_UPDATE SMU ON DATA_STEWARD_NAME = SMU.FIELD_DATA');
                    EXECUTE('UPDATE SYS_CON_ENVIRONMENTS SET DATA_STEWARD_NAME = SMU.USER_FULL_NAME FROM SYS_CON_ENVIRONMENTS JOIN #SM_DS_UPDATE SMU ON DATA_STEWARD_NAME = SMU.FIELD_DATA');
                    EXECUTE('UPDATE SYSTEM_TABLE_METADATA SET DATA_STEWARD_NAME = SMU.USER_FULL_NAME FROM SYSTEM_TABLE_METADATA JOIN #SM_DS_UPDATE SMU ON DATA_STEWARD_NAME = SMU.FIELD_DATA');
                    EXECUTE('UPDATE SYSTEM_TABLE_COLUMNS_METADATA SET DATA_STEWARD_NAME = SMU.USER_FULL_NAME FROM SYSTEM_TABLE_COLUMNS_METADATA JOIN #SM_DS_UPDATE SMU ON DATA_STEWARD_NAME = SMU.FIELD_DATA');
                    EXECUTE('UPDATE RDM_REFERENCE_TABLE SET RDM_REF_TAB_DATA_STEWARD = SMU.USER_FULL_NAME FROM RDM_REFERENCE_TABLE JOIN #SM_DS_UPDATE SMU ON RDM_REF_TAB_DATA_STEWARD = SMU.FIELD_DATA');
                END
        END
    END
GO
IF OBJECT_ID('tempdb..#TEMP_FORM_FIELD_DATA') IS NOT NULL
   BEGIN
    DROP TABLE #TEMP_FORM_FIELD_DATA;
   END
GO
IF OBJECT_ID('tempdb..#SM_DS_UPDATE') IS NOT NULL
   BEGIN
    DROP TABLE #SM_DS_UPDATE;
   END
GO
IF EXISTS (SELECT * FROM ADS_MM_VERSION WHERE VALUE <= 10.1)
BEGIN
DECLARE @new_permission_id varchar(128);
DECLARE @old_permission_ids varchar(4000);
DECLARE KV_PERMISSION_CUR CURSOR FAST_FORWARD FOR
    SELECT 'com.ads.mm.permission.sm.tabs.sysenv.list.assignusersorroles', 'com.ads.mm.permission.sm.tabs.sysenv.list.assignusers,com.ads.mm.permission.sm.tabs.sysenv.list.assignroles'
    UNION
    SELECT 'com.ads.mm.permission.bgm.businessterms.catalog.assignusersorroles', 'com.ads.mm.permission.bgm.businessterms.catalog.assignusers,com.ads.mm.permission.bgm.businessterms.catalog.assignroles'
    UNION
    SELECT 'com.ads.mm.permission.bgm.businesspolicies.catalog.assignusersorroles', 'com.ads.mm.permission.bgm.businesspolicies.catalog.assignusers,com.ads.mm.permission.bgm.businesspolicies.catalog.assignroles'
    UNION
    SELECT 'com.ads.mm.permission.bgm.businessrules.catalog.assignusersorroles', 'com.ads.mm.permission.bgm.businessrules.catalog.assignusers,com.ads.mm.permission.bgm.businessrules.catalog.assignroles'
    UNION
    SELECT 'com.ads.mm.permission.bgm.customobjects.catalog.assignusersorroles', 'com.ads.mm.permission.bgm.customobjects.catalog.assignusers,com.ads.mm.permission.bgm.customobjects.catalog.assignroles';
OPEN KV_PERMISSION_CUR
FETCH NEXT FROM KV_PERMISSION_CUR INTO @new_permission_id, @old_permission_ids;
WHILE @@FETCH_STATUS = 0
BEGIN
    EXECUTE('INSERT INTO MMROLE_PERMISSIONS(MMROLE_ID, PERMISSION_ID, ENABLED)
    select DISTINCT(MMROLE_ID), '''+@new_permission_id+''' PERMISSION_ID, ENABLED 
    from MMROLE_PERMISSIONS where permission_id IN (select value from dbo.SPLIT('','','''+@old_permission_ids+'''))');
    FETCH NEXT FROM KV_PERMISSION_CUR INTO @new_permission_id, @old_permission_ids;
END
CLOSE KV_PERMISSION_CUR
OPEN KV_PERMISSION_CUR
FETCH NEXT FROM KV_PERMISSION_CUR INTO @new_permission_id, @old_permission_ids;
WHILE @@FETCH_STATUS = 0
BEGIN
   EXECUTE('DELETE FROM MMROLE_PERMISSIONS WHERE PERMISSION_ID IN (select value from dbo.SPLIT('','','''+@old_permission_ids+'''))');
   FETCH NEXT FROM KV_PERMISSION_CUR INTO @new_permission_id, @old_permission_ids;
END
CLOSE KV_PERMISSION_CUR
DEALLOCATE KV_PERMISSION_CUR
END
GO
IF EXISTS (SELECT * FROM ADS_MM_VERSION WHERE VALUE <= 10.1)
    BEGIN
        IF EXISTS(select * from USER_PREFERENCES where USER_ID LIKE '%MIND%' and USER_ID not like 'MINDMAP_PAN_VIEW_%')
        BEGIN
            DECLARE @ROWNUMBER INT;
            DECLARE @ID varchar(MAX);
            DECLARE @VALUE varchar(MAX);
            DECLARE @UPD_VALUE varchar(MAX);
            DECLARE @USER_ID varchar(MAX);
            DECLARE UPGRADE_CURSOR CURSOR FOR SELECT USER_ID,COLUMN_PREFERENCES FROM USER_PREFERENCES where USER_ID LIKE '%MINDMAP_SHOW_RELATIONSHIPS_%';
            OPEN UPGRADE_CURSOR
            SELECT @ROWNUMBER = (SELECT COUNT(*) FROM USER_PREFERENCES where USER_ID LIKE '%MINDMAP_SHOW_RELATIONSHIPS_%')
            WHILE @ROWNUMBER > 0
                BEGIN
                    FETCH NEXT FROM UPGRADE_CURSOR INTO @ID, @VALUE
                    SET @USER_ID = REPLACE(@ID, 'MINDMAP_SHOW_RELATIONSHIPS_', '');
                    IF NOT EXISTS(select * from USER_PREFERENCES where USER_ID='MINDMAP_SETTINGS_'+@USER_ID)
                        BEGIN
                            IF NOT EXISTS(select * from USER_PREFERENCES where USER_ID='MINDMAP_SENSITIVITY_FIELDS_'+@USER_ID)
                                BEGIN
                                    INSERT INTO USER_PREFERENCES(USER_ID, COLUMN_PREFERENCES) VALUES('MINDMAP_SENSITIVITY_FIELDS_'+@USER_ID,'{"SDI_FLAG":1,"SDI_CLASS":0}');
                                END
                            IF NOT EXISTS(select * from USER_PREFERENCES where USER_ID='MINDMAP_OBJECT_LOGICAL_FIELDS_'+@USER_ID)
                                BEGIN
                                    INSERT INTO USER_PREFERENCES(USER_ID, COLUMN_PREFERENCES) VALUES('MINDMAP_OBJECT_LOGICAL_FIELDS_'+@USER_ID,'{"EXPANDED_LOGICAL_NAMES":0,"LOGICAL_NAMES":1}');
                                END
                            IF NOT EXISTS(select * from USER_PREFERENCES where USER_ID='MINDMAP_ASSERT_HIERARCHY_'+@USER_ID)
                                BEGIN
                                    INSERT INTO USER_PREFERENCES(USER_ID, COLUMN_PREFERENCES) VALUES('MINDMAP_ASSERT_HIERARCHY_'+@USER_ID,1);
                                END
                            DECLARE @SHWREL varchar(MAX);
                            DECLARE @CUSREL varchar(MAX);
                            DECLARE @SDI varchar(MAX);
                            DECLARE @LOGICAL varchar(MAX);
                            SET @SHWREL = (SELECT COLUMN_PREFERENCES FROM USER_PREFERENCES where USER_ID = 'MINDMAP_SHOW_RELATIONSHIPS_'+@USER_ID);
                            SET @CUSREL = (SELECT COLUMN_PREFERENCES FROM USER_PREFERENCES where USER_ID = 'MINDMAP_CUSTOM_RELATIONS_'+@USER_ID);
                            SET @SDI = (SELECT COLUMN_PREFERENCES FROM USER_PREFERENCES where USER_ID = 'MINDMAP_SENSITIVITY_FIELDS_'+@USER_ID);
                            SET @LOGICAL = (SELECT COLUMN_PREFERENCES FROM USER_PREFERENCES where USER_ID = 'MINDMAP_OBJECT_LOGICAL_FIELDS_'+@USER_ID);
                            SET @UPD_VALUE = '{"SHW_CNT":0,"DIAG_TYPE":"TREE","SHW_REL":'+@SHWREL+',"SHW_CUS_REL":'+@CUSREL+',"SDI":'+@SDI+',"LOGICAL":'+@LOGICAL+'}';
                            INSERT INTO USER_PREFERENCES(USER_ID, COLUMN_PREFERENCES) VALUES('MINDMAP_SETTINGS_'+@USER_ID,@UPD_VALUE);
                            SET @UPD_VALUE = '{"SHW_PNODES":1,"SHW_PNODE_BG":'+(SELECT COLUMN_PREFERENCES FROM USER_PREFERENCES where USER_ID = 'MINDMAP_ASSERT_HIERARCHY_'+@USER_ID)+'}';
                            INSERT INTO USER_PREFERENCES(USER_ID, COLUMN_PREFERENCES) VALUES('MINDMAP_TV_SETTINGS_'+@USER_ID,@UPD_VALUE);
                        END
                    SET @ROWNUMBER = @ROWNUMBER - 1;
                END;
            CLOSE UPGRADE_CURSOR;  
            DEALLOCATE UPGRADE_CURSOR;  
            DELETE FROM USER_PREFERENCES WHERE USER_ID LIKE '%MINDMAP_SHOW_RELATIONSHIPS%';
            DELETE FROM USER_PREFERENCES WHERE USER_ID LIKE '%MINDMAP_CUSTOM_RELATIONS%';
            DELETE FROM USER_PREFERENCES WHERE USER_ID LIKE '%MINDMAP_ASSERT_HIERARCHY%';
            DELETE FROM USER_PREFERENCES WHERE USER_ID LIKE '%MINDMAP_SENSITIVITY_FIELDS%';
            DELETE FROM USER_PREFERENCES WHERE USER_ID LIKE '%MINDMAP_OBJECT_LOGICAL_FIELDS%';
            DELETE FROM USER_PREFERENCES WHERE USER_ID LIKE '%MINDMAP_LAYOUT_TYPE%';
    END
END
GO
IF COL_LENGTH('ADS_WORKFLOW_STAGE_ROLE', 'OBJECT_ID') IS NULL
    BEGIN
        EXECUTE('DELETE FROM ADS_WORKFLOW_STAGE_ROLE WHERE ROLE_ID IS NULL OR ROLE_ID = ''''');
        EXECUTE('ALTER TABLE ADS_WORKFLOW_STAGE_ROLE DROP CONSTRAINT FK_ADS_WRKFLW_ROLE_ID');
        EXECUTE('ALTER TABLE ADS_WORKFLOW_STAGE_ROLE DROP CONSTRAINT UK_ADS_WF_STAGE_ROLE_ID');
        EXECUTE('ALTER TABLE ADS_WORKFLOW_STAGE_ROLE ADD OBJECT_TYPE_ID BIGINT');
        EXECUTE('ALTER TABLE ADS_WORKFLOW_STAGE_ROLE ADD OBJECT_ID BIGINT');
        EXECUTE('UPDATE AWSR SET OBJECT_ID = SR.RO_ID FROM ADS_WORKFLOW_STAGE_ROLE AWSR JOIN SECURITY_ROLES SR ON SR.ROLE_ID = AWSR.ROLE_ID');
        EXECUTE('UPDATE ADS_WORKFLOW_STAGE_ROLE SET OBJECT_TYPE_ID = (SELECT OBJECT_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE = ''ADS_SECURITY_ROLE'')');
        EXECUTE('ALTER TABLE ADS_WORKFLOW_STAGE_ROLE ALTER COLUMN OBJECT_TYPE_ID BIGINT NOT NULL');
        EXECUTE('ALTER TABLE ADS_WORKFLOW_STAGE_ROLE ALTER COLUMN OBJECT_ID BIGINT NOT NULL');
        EXECUTE('ALTER TABLE ADS_WORKFLOW_STAGE_ROLE DROP COLUMN ROLE_ID');
        EXECUTE('ALTER TABLE ADS_WORKFLOW_STAGE_ROLE ADD CONSTRAINT FK_ADS_WRKFLW_ROLE_ID FOREIGN KEY(OBJECT_ID) REFERENCES SECURITY_ROLES(RO_ID) ON DELETE CASCADE');
        EXECUTE('ALTER TABLE ADS_WORKFLOW_STAGE_ROLE ADD CONSTRAINT UK_ADS_WF_STAGE_ROLE_ID UNIQUE(WFS_ID,OBJECT_ID,OBJECT_TYPE_ID)');
    END
GO
IF COL_LENGTH('ADS_WORKFLOW_NODE_ROLE', 'OBJECT_ID') IS NULL
    BEGIN
        EXECUTE('DELETE FROM ADS_WORKFLOW_NODE_ROLE WHERE ROLE_ID IS NULL OR ROLE_ID = ''''');	
        EXECUTE('ALTER TABLE ADS_WORKFLOW_NODE_ROLE DROP CONSTRAINT FK_ADS_WF_NODE_ROLE_ID');
        EXECUTE('ALTER TABLE ADS_WORKFLOW_NODE_ROLE ADD OBJECT_TYPE_ID BIGINT');
        EXECUTE('ALTER TABLE ADS_WORKFLOW_NODE_ROLE ADD OBJECT_ID BIGINT');
        EXECUTE('UPDATE AWR SET OBJECT_ID = SR.RO_ID FROM ADS_WORKFLOW_NODE_ROLE AWR JOIN SECURITY_ROLES SR ON SR.ROLE_ID = AWR.ROLE_ID');
        EXECUTE('UPDATE ADS_WORKFLOW_NODE_ROLE SET OBJECT_TYPE_ID = (SELECT OBJECT_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE = ''ADS_SECURITY_ROLE'')');
        EXECUTE('ALTER TABLE ADS_WORKFLOW_NODE_ROLE ALTER COLUMN OBJECT_TYPE_ID BIGINT NOT NULL');
        EXECUTE('ALTER TABLE ADS_WORKFLOW_NODE_ROLE ALTER COLUMN OBJECT_ID BIGINT NOT NULL');
        EXECUTE('ALTER TABLE ADS_WORKFLOW_NODE_ROLE DROP COLUMN ROLE_ID');
        EXECUTE('ALTER TABLE ADS_WORKFLOW_NODE_ROLE ADD CONSTRAINT FK_ADS_WF_NODE_ROLE_ID FOREIGN KEY(OBJECT_ID) REFERENCES SECURITY_ROLES(RO_ID) ON DELETE CASCADE');
    END
GO
IF EXISTS (SELECT * FROM ADS_MM_VERSION WHERE VALUE <= 10.1)
    BEGIN
        EXECUTE('UPDATE AWANC SET CONFIG_VALUE = SR.RO_ID FROM ADS_WORKFLOW_ASGN_NODE_CONFIG AWANC JOIN SECURITY_ROLES SR ON SR.ROLE_ID = AWANC.CONFIG_VALUE WHERE CONFIG_TYPE = ''ROLE''');
    END
GO
IF EXISTS(SELECT * FROM SYS.VIEWS WHERE NAME = 'ROLES_AND_ROLE_GROUP_V')
    BEGIN
        DROP VIEW ROLES_AND_ROLE_GROUP_V;
    END
GO
CREATE VIEW ROLES_AND_ROLE_GROUP_V AS
SELECT SR.RO_ID AS OBJECT_ID,
SR.ROLE_NAME AS OBJECT_NAME,
(SELECT OBJECT_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE='ADS_SECURITY_ROLE') AS OBJECT_TYPE_ID,
'ROLE' OBJECT_TYPE
from SECURITY_ROLES SR
UNION ALL
SELECT RG.RG_ID,
RG.RG_NAME,
(SELECT OBJECT_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE='ROLES_GROUPS') AS OBJECT_TYPE_ID,
'ROLE_GROUP' OBJECT_TYPE
FROM ROLES_GROUPS_V RG;
GO
IF EXISTS(SELECT * FROM SYS.VIEWS WHERE NAME = 'ADS_WORKFLOW_NODE_ROLE_V')
    BEGIN
        DROP VIEW ADS_WORKFLOW_NODE_ROLE_V;
    END
GO

CREATE VIEW [ADS_WORKFLOW_NODE_ROLE_V]
AS
WITH WF_OBJECTS_WITH_NODES AS
  (SELECT AWN.WF_ID,
          AWN.WFN_ID,
          awn.NODE_TYPE,
          AWA.WFG_ID,
          AWA.OBJECT_ID,
          AWA.OBJECT_TYPE_ID,
          AWta.OBJECT_TYPE_ID DEPENDENT_OBJECT_TYPE_ID
   FROM ADS_WORKFLOW_NODE_V AWN
   JOIN ADS_WORKFLOW_ASSIGNMENT AWA ON AWA.WF_ID = AWN.WF_ID
   JOIN ADS_WORKFLOW AW ON AW.WF_ID = AWA.WF_ID
   JOIN ADS_WORKFLOW_TRIGGER_ACTION AWta ON AWta.WFTA_ID = AW.WFTA_ID),
            ASGN_OBJECTS_WITH_NODE_CONF AS
  (SELECT WFON.*,
          AWANC.R_RG_ID,
		  AWANC.R_TYPE
   FROM WF_OBJECTS_WITH_NODES WFON
   LEFT JOIN (SELECT CONVERT(BIGINT, RRGV.OBJECT_ID) R_RG_ID, RRGV.OBJECT_TYPE_ID R_TYPE, AWANCI.WFN_ID, AWANCI.WFG_ID 
   FROM ADS_WORKFLOW_ASGN_NODE_CONFIG AWANCI
   JOIN ROLES_AND_ROLE_GROUP_V RRGV ON RRGV.OBJECT_ID = AWANCI.CONFIG_VALUE AND RRGV.OBJECT_TYPE = AWANCI.CONFIG_TYPE
   WHERE ISNUMERIC(RRGV.OBJECT_ID) = 1 AND (AWANCI.CONFIG_TYPE = 'ROLE' OR AWANCI.CONFIG_TYPE = 'ROLE_GROUP')) AWANC ON AWANC.WFN_ID = WFON.WFN_ID AND AWANC.WFG_ID = WFON.WFG_ID),
            WF_NODE_ROLE AS
  (SELECT ASNR.WFN_ID,
          ASNR.OBJECT_ID,
		  ASNR.OBJECT_TYPE_ID
   FROM ADS_WORKFLOW_NODE_ROLE ASNR
   JOIN ROLES_AND_ROLE_GROUP_V RRGV ON ASNR.OBJECT_ID = RRGV.OBJECT_ID AND ASNR.OBJECT_TYPE_ID = RRGV.OBJECT_TYPE_ID),
            WF_NODE_ROLE_CONF AS
  (SELECT AWN.WFN_ID,
          ASR.OBJECT_ID,
		  ASR.OBJECT_TYPE_ID
   FROM ADS_WORKFLOW_STAGE_ROLE ASR
   JOIN ADS_WORKFLOW_NODE AWN ON ASR.WFS_ID = AWN.NODE_ID
   AND AWN.NODE_TYPE = 'S'
   JOIN ROLES_AND_ROLE_GROUP_V RRGV ON ASR.OBJECT_ID = RRGV.OBJECT_ID AND ASR.OBJECT_TYPE_ID = RRGV.OBJECT_TYPE_ID
   WHERE AWN.WFN_ID NOT IN
       (SELECT WFN_ID
        FROM WF_NODE_ROLE)
   UNION SELECT WNR.WFN_ID,
				WNR.OBJECT_ID,
				WNR.OBJECT_TYPE_ID
   FROM WF_NODE_ROLE WNR)
SELECT WFON.*,
       ASNR.OBJECT_ID R_RG_ID,
	   ASNR.OBJECT_TYPE_ID R_TYPE
FROM WF_OBJECTS_WITH_NODES WFON
JOIN WF_NODE_ROLE_CONF ASNR ON ASNR.WFN_ID = WFON.WFN_ID
JOIN ASGN_OBJECTS_WITH_NODE_CONF AONF ON AONF.WFG_ID = WFON.WFG_ID
AND AONF.WFN_ID = WFON.WFN_ID
AND AONF.OBJECT_ID = WFON.OBJECT_ID
AND AONF.OBJECT_TYPE_ID = WFON.OBJECT_TYPE_ID
AND AONF.DEPENDENT_OBJECT_TYPE_ID = WFON.DEPENDENT_OBJECT_TYPE_ID
AND AONF.R_RG_ID IS NULL
UNION
SELECT *
FROM ASGN_OBJECTS_WITH_NODE_CONF
WHERE R_RG_ID IS NOT NULL;
GO
IF (SELECT COUNT(*) FROM APP_PREFERENCES WHERE PREFERENCE_NAME = 'RM_MAPPING_PROMOTION') = 0
    BEGIN
        INSERT INTO APP_PREFERENCES(PREFERENCE_NAME, PREFERENCE_VALUE) VALUES('RM_MAPPING_PROMOTION','true');
    END;
GO
IF(SELECT COUNT(*) FROM APP_PREFERENCES WHERE PREFERENCE_NAME LIKE 'SETTINGS_TABLE_USER_DEFINED%') = 0
    BEGIN
        INSERT INTO APP_PREFERENCES(PREFERENCE_NAME, PREFERENCE_VALUE) VALUES ('SETTINGS_TABLE_USER_DEFINED1','true');
        INSERT INTO APP_PREFERENCES(PREFERENCE_NAME, PREFERENCE_VALUE) VALUES ('SETTINGS_TABLE_USER_DEFINED2','true');
        INSERT INTO APP_PREFERENCES(PREFERENCE_NAME, PREFERENCE_VALUE) VALUES ('SETTINGS_TABLE_USER_DEFINED3','true');
        INSERT INTO APP_PREFERENCES(PREFERENCE_NAME, PREFERENCE_VALUE) VALUES ('SETTINGS_TABLE_USER_DEFINED4','true');
        INSERT INTO APP_PREFERENCES(PREFERENCE_NAME, PREFERENCE_VALUE) VALUES ('SETTINGS_TABLE_USER_DEFINED5','true');
        INSERT INTO APP_PREFERENCES(PREFERENCE_NAME, PREFERENCE_VALUE) VALUES ('SETTINGS_TABLE_USER_DEFINED6','true');
        INSERT INTO APP_PREFERENCES(PREFERENCE_NAME, PREFERENCE_VALUE) VALUES ('SETTINGS_TABLE_USER_DEFINED7','true');
        INSERT INTO APP_PREFERENCES(PREFERENCE_NAME, PREFERENCE_VALUE) VALUES ('SETTINGS_TABLE_USER_DEFINED8','true');
        INSERT INTO APP_PREFERENCES(PREFERENCE_NAME, PREFERENCE_VALUE) VALUES ('SETTINGS_TABLE_USER_DEFINED9','true');
        INSERT INTO APP_PREFERENCES(PREFERENCE_NAME, PREFERENCE_VALUE) VALUES ('SETTINGS_TABLE_USER_DEFINED10','true');
    END;
GO
IF(SELECT COUNT(*) FROM APP_PREFERENCES WHERE PREFERENCE_NAME LIKE 'SETTINGS_COLUMN_USER_DEFINED%') = 0
    BEGIN
        INSERT INTO APP_PREFERENCES(PREFERENCE_NAME, PREFERENCE_VALUE) VALUES ('SETTINGS_COLUMN_USER_DEFINED1','true');
        INSERT INTO APP_PREFERENCES(PREFERENCE_NAME, PREFERENCE_VALUE) VALUES ('SETTINGS_COLUMN_USER_DEFINED2','true');
        INSERT INTO APP_PREFERENCES(PREFERENCE_NAME, PREFERENCE_VALUE) VALUES ('SETTINGS_COLUMN_USER_DEFINED3','true');
        INSERT INTO APP_PREFERENCES(PREFERENCE_NAME, PREFERENCE_VALUE) VALUES ('SETTINGS_COLUMN_USER_DEFINED4','true');
        INSERT INTO APP_PREFERENCES(PREFERENCE_NAME, PREFERENCE_VALUE) VALUES ('SETTINGS_COLUMN_USER_DEFINED5','true');
        INSERT INTO APP_PREFERENCES(PREFERENCE_NAME, PREFERENCE_VALUE) VALUES ('SETTINGS_COLUMN_USER_DEFINED6','true');
        INSERT INTO APP_PREFERENCES(PREFERENCE_NAME, PREFERENCE_VALUE) VALUES ('SETTINGS_COLUMN_USER_DEFINED7','true');
        INSERT INTO APP_PREFERENCES(PREFERENCE_NAME, PREFERENCE_VALUE) VALUES ('SETTINGS_COLUMN_USER_DEFINED8','true');
        INSERT INTO APP_PREFERENCES(PREFERENCE_NAME, PREFERENCE_VALUE) VALUES ('SETTINGS_COLUMN_USER_DEFINED9','true');
        INSERT INTO APP_PREFERENCES(PREFERENCE_NAME, PREFERENCE_VALUE) VALUES ('SETTINGS_COLUMN_USER_DEFINED10','true');
    END;
GO
IF(SELECT COUNT(*) FROM APP_PREFERENCES WHERE PREFERENCE_NAME = 'SETTINGS_ADDITIONAL_FIELDS') = 0
    BEGIN
        INSERT INTO APP_PREFERENCES(PREFERENCE_NAME, PREFERENCE_VALUE) VALUES ('SETTINGS_ADDITIONAL_FIELDS','true');
    END;
GO
IF(SELECT COUNT(*) FROM APP_PREFERENCES WHERE PREFERENCE_NAME = 'SETTINGS_SUBJECT_USER_DEFINED_FIELDS') = 0
    BEGIN
        INSERT INTO APP_PREFERENCES(PREFERENCE_NAME, PREFERENCE_VALUE) VALUES ('SETTINGS_SUBJECT_USER_DEFINED_FIELDS','true');
    END;
GO
IF EXISTS (SELECT * FROM ADS_MM_VERSION WHERE VALUE <= 10.1)
BEGIN
    EXECUTE('INSERT INTO MMROLE_PERMISSIONS(MMROLE_ID, PERMISSION_ID, ENABLED) 
    select DISTINCT(MMROLE_ID), ''com.ads.mm.permission.bgm.businessterms.catalog.businessterms.associations.edit'' PERMISSION_ID, ENABLED 
    from MMROLE_PERMISSIONS where permission_id = ''com.ads.mm.permission.bgm.businessterms.catalog.businessterms.associations.view''
    union
    select DISTINCT(MMROLE_ID), ''com.ads.mm.permission.bgm.businesspolicies.catalog.businesspolicies.associations.edit'' PERMISSION_ID, ENABLED 
    from MMROLE_PERMISSIONS where permission_id = ''com.ads.mm.permission.bgm.businesspolicies.catalog.businesspolicies.associations.view''
    union
    select DISTINCT(MMROLE_ID), ''com.ads.mm.permission.bgm.businessrules.catalog.businessrules.associations.edit'' PERMISSION_ID, ENABLED 
    from MMROLE_PERMISSIONS where permission_id = ''com.ads.mm.permission.bgm.businessrules.catalog.businessrules.associations.view''
    union
    select DISTINCT(MMROLE_ID), ''com.ads.mm.permission.bgm.customobjects.catalog.customobjects.associations.edit'' PERMISSION_ID, ENABLED 
    from MMROLE_PERMISSIONS where permission_id = ''com.ads.mm.permission.bgm.customobjects.catalog.customobjects.associations.view''');
END
GO
IF NOT EXISTS(SELECT * FROM sys.indexes WHERE name = 'STCM_STM_ID_STCM_ID_IDX' AND object_id = OBJECT_ID('SYSTEM_TABLE_COLUMNS_METADATA'))
 BEGIN
  EXECUTE('CREATE NONCLUSTERED INDEX [STCM_STM_ID_STCM_ID_IDX] ON [SYSTEM_TABLE_COLUMNS_METADATA] ([STM_ID]) INCLUDE ([STCM_ID])');
 END
GO
IF NOT EXISTS(SELECT * FROM sys.indexes WHERE name = 'ADS_WF_OTID_OID_WFG_ID_IDX' AND object_id = OBJECT_ID('ADS_WORKFLOW_STATUS'))
 BEGIN
  EXECUTE('CREATE NONCLUSTERED INDEX [ADS_WF_OTID_OID_WFG_ID_IDX] ON [ADS_WORKFLOW_STATUS] ([OBJECT_TYPE_ID],[OBJECT_ID]) INCLUDE ([WFN_ID],[WFG_ID])');
 END
GO
IF NOT EXISTS(SELECT * FROM sys.indexes WHERE name = 'MAPPING_DETAILS_MID_PID_INDX' AND object_id = OBJECT_ID('MAPPING_DETAILS'))
 BEGIN
  EXECUTE('CREATE INDEX MAPPING_DETAILS_MID_PID_INDX ON MAPPING_DETAILS (PROJECT_ID, STATUS)');
 END
GO
IF COL_LENGTH('BGM_METADATA_AI_MATCH_CONFIG', 'MATCH_TYPE') IS NULL
    BEGIN
        EXECUTE('ALTER TABLE BGM_METADATA_AI_MATCH_CONFIG ADD MATCH_TYPE SMALLINT DEFAULT 1')
        EXECUTE('UPDATE BGM_METADATA_AI_MATCH_CONFIG SET MATCH_TYPE = 1 WHERE MATCH_TYPE IS NULL')
    END
GO

IF COL_LENGTH('BGM_METADATA_AI_MATCH_RESULT', 'MATCH_TYPE') IS NULL
    BEGIN
        EXECUTE('ALTER TABLE BGM_METADATA_AI_MATCH_RESULT ADD MATCH_TYPE SMALLINT DEFAULT 1')
        EXECUTE('UPDATE BGM_METADATA_AI_MATCH_RESULT SET MATCH_TYPE = 1 WHERE MATCH_TYPE IS NULL')
    END
GO
IF (OBJECTPROPERTY(OBJECT_ID(N'[UPDATE_DECLARATION_PATH_PROC]'),N'IsProcedure') = 1)
BEGIN
    DROP PROCEDURE UPDATE_DECLARATION_PATH_PROC;
END
GO
CREATE PROCEDURE UPDATE_DECLARATION_PATH_PROC(@STM_ID BIGINT, @NEWTABLE_NAME VARCHAR(255), @OLD_TBL_PATH VARCHAR(MAX), @NEW_TBL_PATH VARCHAR(MAX)) AS
    BEGIN
    DECLARE @STCM_ID BIGINT;
    DECLARE @EXISTING_PATH VARCHAR(MAX);
    DECLARE @UPDATED_PATH VARCHAR(MAX);
    
    DECLARE STCM_CURSOR CURSOR FOR (SELECT DECLARATION_PATH,STCM_ID FROM SYSTEM_TABLE_COLUMNS_METADATA WHERE STM_ID = @STM_ID);
    OPEN STCM_CURSOR UPDATE SYSTEM_TABLE_COLUMNS_METADATA SET TABLE_NAME = @NEWTABLE_NAME WHERE STM_ID = @STM_ID;
    FETCH NEXT FROM STCM_CURSOR INTO  @EXISTING_PATH, @STCM_ID;
            WHILE @@FETCH_STATUS = 0
                        BEGIN
                            IF @EXISTING_PATH LIKE @OLD_TBL_PATH+'%'
                            BEGIN
                                SET @UPDATED_PATH = @NEW_TBL_PATH+SUBSTRING(@EXISTING_PATH,LEN(@OLD_TBL_PATH)+1,LEN(@EXISTING_PATH));
                                    UPDATE SYSTEM_TABLE_COLUMNS_METADATA SET DECLARATION_PATH = @UPDATED_PATH WHERE STCM_ID = @STCM_ID;
                                    SET @UPDATED_PATH = '';
                            END
                            FETCH NEXT FROM STCM_CURSOR INTO @EXISTING_PATH, @STCM_ID;
                        END
            CLOSE STCM_CURSOR;
            DEALLOCATE STCM_CURSOR;
            UPDATE SYSTEM_TABLE_COLUMNS_METADATA SET COLUMN_NAME = @NEWTABLE_NAME WHERE REF_ID = @STM_ID;
            UPDATE SYSTEM_TABLE_METADATA SET DECLARATION_PATH = CASE WHEN LEFT(DECLARATION_PATH, LEN(@OLD_TBL_PATH+'/')) = @OLD_TBL_PATH+'/'  THEN @NEW_TBL_PATH+'/' + SUBSTRING(DECLARATION_PATH, LEN(@OLD_TBL_PATH+'/')+1, LEN(DECLARATION_PATH)) ELSE DECLARATION_PATH END WHERE SCE_ID = (SELECT SCE_ID FROM SYSTEM_TABLE_METADATA WHERE STM_ID = @STM_ID);
            UPDATE SYSTEM_TABLE_COLUMNS_METADATA SET DECLARATION_PATH = CASE WHEN LEFT(DECLARATION_PATH, LEN(@OLD_TBL_PATH+'/')) = @OLD_TBL_PATH+'/'  THEN @NEW_TBL_PATH+'/' + SUBSTRING(DECLARATION_PATH, LEN(@OLD_TBL_PATH+'/')+1, LEN(DECLARATION_PATH)) ELSE DECLARATION_PATH END WHERE SCE_ID = (SELECT SCE_ID FROM SYSTEM_TABLE_METADATA WHERE STM_ID = @STM_ID);
END;
GO
IF EXISTS (SELECT * FROM SYS.OBJECTS WHERE OBJECT_ID = OBJECT_ID(N'[FN_MS_COLUMN_ID_ATTRIB_CHECK]') AND TYPE IN (N'FN', N'IF', N'TF', N'FS', N'FT'))
BEGIN
    DROP FUNCTION [FN_MS_COLUMN_ID_ATTRIB_CHECK]
END
GO
CREATE FUNCTION [FN_MS_COLUMN_ID_ATTRIB_CHECK](
@p_system_name varchar(max),
@p_environment_name varchar(max),
@p_table_name varchar(max),
@p_column_name varchar(max),
@p_column_type varchar(max),
@p_xpath varchar(max),
@p_old_system_name varchar(max),
@p_old_environment_name varchar(max),
@p_old_table_name varchar(max),
@p_old_column_name varchar(max),
@p_old_column_type varchar(max),
@p_old_xpath varchar(max),
@p_check_xpath int)
	RETURNS INT AS
BEGIN
	DECLARE @v_sys_space_count INT = LEN(@p_system_name) - LEN(REPLACE(@p_system_name, CHAR(10),''));
	DECLARE @v_environment_space_count INT = LEN(@p_environment_name) - LEN(REPLACE(@p_environment_name, CHAR(10),''));
	DECLARE @v_table_space_count INT = LEN(@p_table_name) - LEN(REPLACE(@p_table_name, CHAR(10),''));
	DECLARE @v_column_space_count INT = LEN(@p_column_name) - LEN(REPLACE(@p_column_name, CHAR(10),''));
	DECLARE @v_column_type_count INT = LEN(@p_column_type) - LEN(REPLACE(@p_column_type, CHAR(10),''));
	DECLARE @v_xpath_count INT = LEN(@p_xpath) - LEN(REPLACE(@p_xpath, CHAR(10),''));

	DECLARE @existedCnt INT = 0;

	DECLARE @v_current_system_name varchar(max);
	DECLARE @v_current_env_name varchar(max);
	DECLARE @v_current_table_name varchar(max);
	DECLARE @v_current_column_name varchar(max);
	DECLARE @v_current_column_type varchar(max);
	DECLARE @v_current_xpath varchar(max);


	IF (@v_sys_space_count = 0 AND @v_environment_space_count = 0 AND @v_table_space_count = 0 AND @v_column_space_count = 0 AND @v_column_type_count = 0 AND @v_xpath_count = 0)
		BEGIN
			IF (UPPER(@p_system_name) = UPPER(@p_old_system_name) AND UPPER(@p_environment_name) = UPPER(@p_old_environment_name) 
				AND UPPER(@p_table_name) = UPPER(@p_old_table_name) AND UPPER(@p_column_name) = UPPER(@p_old_column_name)
				AND UPPER(@p_column_type) = UPPER(@p_old_column_type) AND ((@p_check_xpath = 1 AND UPPER(@p_xpath) = UPPER(@p_old_xpath)) OR @p_check_xpath = 0))
			BEGIN
				set @existedCnt = @existedCnt + 1;
			END
		END
	ELSE
		BEGIN
			DECLARE @SYS_NAMES_TBL TABLE (ROW_N INT, NAME_VALUE VARCHAR(MAX)); 
			DECLARE @ENV_NAMES_TBL TABLE (ROW_N INT, NAME_VALUE VARCHAR(MAX)); 
			DECLARE @TBL_NAMES_TBL TABLE (ROW_N INT, NAME_VALUE VARCHAR(MAX));
			DECLARE @COL_NAMES_TBL TABLE (ROW_N INT, NAME_VALUE VARCHAR(MAX));
			DECLARE @COL_TYPES_TBL TABLE (ROW_N INT, NAME_VALUE VARCHAR(MAX));
			DECLARE @XPATHS_TBL TABLE (ROW_N INT, NAME_VALUE VARCHAR(MAX));
			insert into @SYS_NAMES_TBL select * from dbo.split(char(10), @p_system_name);
			insert into @ENV_NAMES_TBL select * from dbo.split(char(10), @p_environment_name);
			insert into @TBL_NAMES_TBL select * from dbo.split(char(10), @p_table_name);
			insert into @COL_NAMES_TBL select * from dbo.split(char(10), @p_column_name);
			insert into @COL_TYPES_TBL select * from dbo.split(char(10), @p_column_type);
			insert into @XPATHS_TBL select * from dbo.split(char(10), @p_xpath);
			
			DECLARE @cnt INT = 0;
			
			WHILE @cnt <= @v_column_space_count
				BEGIN
					SET @cnt = @cnt + 1;
					set @v_current_system_name = (SELECT NAME_VALUE FROM @SYS_NAMES_TBL WHERE ROW_N = @cnt);
					set @v_current_env_name = (SELECT NAME_VALUE FROM @ENV_NAMES_TBL WHERE ROW_N = @cnt);
					set @v_current_table_name = (SELECT NAME_VALUE FROM @TBL_NAMES_TBL WHERE ROW_N = @cnt);
					set @v_current_column_name = (SELECT NAME_VALUE FROM @COL_NAMES_TBL WHERE ROW_N = @cnt);
					set @v_current_column_type = ISNULL((SELECT NAME_VALUE FROM @COL_TYPES_TBL WHERE ROW_N = @cnt), '');
					set @v_current_xpath = ISNULL((SELECT NAME_VALUE FROM @XPATHS_TBL WHERE ROW_N = @cnt), '');
					IF UPPER(@v_current_column_name) = UPPER(@p_old_column_name) AND ((@p_check_xpath = 1 AND UPPER(@v_current_xpath) = UPPER(@p_old_xpath)) OR @p_check_xpath = 0) AND UPPER(@v_current_column_type) = UPPER(@p_old_column_type) AND UPPER(@v_current_table_name) = UPPER(@p_old_table_name) AND UPPER(@v_current_env_name) = UPPER(@p_old_environment_name) AND UPPER(@v_current_system_name) = UPPER(@p_old_system_name)
						BEGIN
							set @existedCnt = @existedCnt + 1;
						END
				END
		END
	return @existedCnt;
END
GO
IF EXISTS (SELECT * FROM SYS.OBJECTS WHERE OBJECT_ID = OBJECT_ID(N'[FN_REPLACE_MS_COLUMN_ID_ATRIB]') AND TYPE IN (N'FN', N'IF', N'TF', N'FS', N'FT'))
BEGIN
    DROP FUNCTION [FN_REPLACE_MS_COLUMN_ID_ATRIB]
END
GO
CREATE FUNCTION [FN_REPLACE_MS_COLUMN_ID_ATRIB](
@p_system_name varchar(max),
@p_environment_name varchar(max),
@p_table_name varchar(max),
@p_column_name varchar(max),
@p_column_type varchar(max),
@p_xpath varchar(max),
@p_old_system_name varchar(max),
@p_old_environment_name varchar(max),
@p_old_table_name varchar(max),
@p_old_column_name varchar(max),
@p_old_column_type varchar(max),
@p_old_xpath varchar(max),
@p_check_xpath int,
@p_new_column_name varchar(max),
@p_new_xpath varchar(max))
RETURNS @RETURN_TABLE TABLE(COLUMN_NAME VARCHAR(MAX), XPATH VARCHAR(MAX)) AS
	BEGIN
		DECLARE @v_sys_space_count INT = LEN(@p_system_name) - LEN(REPLACE(@p_system_name, CHAR(10),''));
		DECLARE @v_environment_space_count INT = LEN(@p_environment_name) - LEN(REPLACE(@p_environment_name, CHAR(10),''));
		DECLARE @v_table_space_count INT = LEN(@p_table_name) - LEN(REPLACE(@p_table_name, CHAR(10),''));
		DECLARE @v_column_space_count INT = LEN(@p_column_name) - LEN(REPLACE(@p_column_name, CHAR(10),''));
		DECLARE @v_column_type_count INT = LEN(@p_column_type) - LEN(REPLACE(@p_column_type, CHAR(10),''));
		DECLARE @v_xpath_count INT = LEN(@p_xpath) - LEN(REPLACE(@p_xpath, CHAR(10),''));

		DECLARE @v_temp_column_name varchar(max);
		DECLARE @v_temp_xpath varchar(max);

		DECLARE @v_current_system_name varchar(max);
		DECLARE @v_current_env_name varchar(max);
		DECLARE @v_current_table_name varchar(max);
		DECLARE @v_current_column_name varchar(max);
		DECLARE @v_current_column_type varchar(max);
		DECLARE @v_current_xpath varchar(max);


		IF (@v_sys_space_count = 0 AND @v_environment_space_count = 0 AND @v_table_space_count = 0 AND @v_column_space_count = 0 AND @v_column_type_count = 0 AND @v_xpath_count = 0)
			BEGIN
				IF (UPPER(@p_system_name) = UPPER(@p_old_system_name) AND UPPER(@p_environment_name) = UPPER(@p_old_environment_name) 
					AND UPPER(@p_table_name) = UPPER(@p_old_table_name) AND UPPER(@p_column_name) = UPPER(@p_old_column_name)
					AND UPPER(@p_column_type) = UPPER(@p_old_column_type) AND ((@p_check_xpath = 1 AND UPPER(@p_xpath) = UPPER(@p_old_xpath)) OR @p_check_xpath = 0))
				BEGIN
					set @v_temp_column_name = @p_new_column_name;
					set @v_temp_xpath = @p_xpath;
					
					IF @p_check_xpath = 1 AND ISNULL(@p_xpath, '') <> ''
						BEGIN
							set @v_temp_xpath = @p_new_xpath;
						END
				END
			END
		ELSE
			BEGIN
				DECLARE @SYS_NAMES_TBL TABLE (ROW_N INT, NAME_VALUE VARCHAR(MAX)); 
				DECLARE @ENV_NAMES_TBL TABLE (ROW_N INT, NAME_VALUE VARCHAR(MAX)); 
				DECLARE @TBL_NAMES_TBL TABLE (ROW_N INT, NAME_VALUE VARCHAR(MAX));
				DECLARE @COL_NAMES_TBL TABLE (ROW_N INT, NAME_VALUE VARCHAR(MAX));
				DECLARE @COL_TYPES_TBL TABLE (ROW_N INT, NAME_VALUE VARCHAR(MAX));
				DECLARE @XPATHS_TBL TABLE (ROW_N INT, NAME_VALUE VARCHAR(MAX));
				insert into @SYS_NAMES_TBL select * from dbo.split(char(10), @p_system_name);
				insert into @ENV_NAMES_TBL select * from dbo.split(char(10), @p_environment_name);
				insert into @TBL_NAMES_TBL select * from dbo.split(char(10), @p_table_name);
				insert into @COL_NAMES_TBL select * from dbo.split(char(10), @p_column_name);
				insert into @COL_TYPES_TBL select * from dbo.split(char(10), @p_column_type);
				insert into @XPATHS_TBL select * from dbo.split(char(10), @p_xpath);
				
				DECLARE @cnt INT = 0;
				DECLARE @transformed_xpath varchar(max);
				
				WHILE @cnt <= @v_column_space_count or @cnt <= @v_xpath_count
					BEGIN
						SET @cnt = @cnt + 1;
						set @v_current_system_name = (SELECT NAME_VALUE FROM @SYS_NAMES_TBL WHERE ROW_N = @cnt);
						set @v_current_env_name = (SELECT NAME_VALUE FROM @ENV_NAMES_TBL WHERE ROW_N = @cnt);
						set @v_current_table_name = (SELECT NAME_VALUE FROM @TBL_NAMES_TBL WHERE ROW_N = @cnt);
						set @v_current_column_name = ISNULL((SELECT NAME_VALUE FROM @COL_NAMES_TBL WHERE ROW_N = @cnt),'');
						set @v_current_column_type = ISNULL((SELECT NAME_VALUE FROM @COL_TYPES_TBL WHERE ROW_N = @cnt), '');
						set @v_current_xpath = ISNULL((SELECT NAME_VALUE FROM @XPATHS_TBL WHERE ROW_N = @cnt), '');
						IF UPPER(@v_current_column_name) = UPPER(@p_old_column_name) AND ((@p_check_xpath = 1 AND UPPER(@v_current_xpath) = UPPER(@p_old_xpath)) OR @p_check_xpath = 0) AND UPPER(@v_current_column_type) = UPPER(@p_old_column_type) AND UPPER(@v_current_table_name) = UPPER(@p_old_table_name) AND UPPER(@v_current_env_name) = UPPER(@p_old_environment_name) AND UPPER(@v_current_system_name) = UPPER(@p_old_system_name)
							BEGIN
								set @v_temp_column_name = case when @cnt = 1 then @p_new_column_name else @v_temp_column_name + char(10) + @p_new_column_name end;
								SET @transformed_xpath = @v_current_xpath;
								IF @p_check_xpath = 1  AND ISNULL(@v_current_xpath, '') <> ''
									BEGIN
										SET @transformed_xpath = @p_new_xpath;
									END
								set @v_temp_xpath = case when @cnt = 1 then @transformed_xpath else @v_temp_xpath + char(10) + @p_new_xpath end;
							END
						ELSE
							BEGIN
								set @v_temp_column_name = case when @cnt = 1 then @v_current_column_name else @v_temp_column_name + char(10) + @v_current_column_name end;
								set @v_temp_xpath = case when @cnt = 1 then @v_current_xpath else @v_temp_xpath + char(10) + @v_current_xpath end;
							END
					END
			END
		INSERT INTO @RETURN_TABLE VALUES (@v_temp_column_name, @v_temp_xpath);
	RETURN;
	END
GO
IF EXISTS (SELECT * FROM SYS.OBJECTS WHERE OBJECT_ID = OBJECT_ID(N'[FN_MS_TABLE_ID_ATTRIB_CHECK]') AND TYPE IN (N'FN', N'IF', N'TF', N'FS', N'FT'))
BEGIN
    DROP FUNCTION [FN_MS_TABLE_ID_ATTRIB_CHECK]
END
GO
CREATE FUNCTION [FN_MS_TABLE_ID_ATTRIB_CHECK](
@p_system_name varchar(max),
@p_environment_name varchar(max),
@p_table_name varchar(max),
@p_table_type varchar(max),
@p_xpath varchar(max),
@p_old_system_name varchar(max),
@p_old_environment_name varchar(max),
@p_old_table_name varchar(max),
@p_old_table_type varchar(max),
@p_old_xpath varchar(max),
@p_check_xpath int)
	RETURNS INT AS
BEGIN
	DECLARE @v_sys_space_count INT = LEN(@p_system_name) - LEN(REPLACE(@p_system_name, CHAR(10),''));
	DECLARE @v_environment_space_count INT = LEN(@p_environment_name) - LEN(REPLACE(@p_environment_name, CHAR(10),''));
	DECLARE @v_table_space_count INT = LEN(@p_table_name) - LEN(REPLACE(@p_table_name, CHAR(10),''));
	DECLARE @v_table_type_count INT = LEN(@p_table_type) - LEN(REPLACE(@p_table_type, CHAR(10),''));
	DECLARE @v_xpath_count INT = LEN(@p_xpath) - LEN(REPLACE(@p_xpath, CHAR(10),''));

	DECLARE @existedCnt INT = 0;

	DECLARE @v_current_system_name varchar(max);
	DECLARE @v_current_env_name varchar(max);
	DECLARE @v_current_table_name varchar(max);
	DECLARE @v_current_table_type varchar(max);
	DECLARE @v_current_xpath varchar(max);

	IF (@v_sys_space_count = 0 AND @v_environment_space_count = 0 AND @v_table_space_count = 0 AND @v_table_type_count = 0 AND @v_xpath_count = 0)
		BEGIN
			IF (UPPER(@p_system_name) = UPPER(@p_old_system_name) AND UPPER(@p_environment_name) = UPPER(@p_old_environment_name) 
				AND UPPER(@p_table_name) = UPPER(@p_old_table_name) AND UPPER(@p_table_type) = UPPER(@p_old_table_type) 
				AND ((@p_check_xpath = 1 AND charindex(UPPER(@p_old_xpath), UPPER(@p_xpath)) = 1) OR @p_check_xpath = 0))
			BEGIN
				set @existedCnt = @existedCnt + 1;
			END
		END
	ELSE
		BEGIN
			DECLARE @SYS_NAMES_TBL TABLE (ROW_N INT, NAME_VALUE VARCHAR(MAX)); 
			DECLARE @ENV_NAMES_TBL TABLE (ROW_N INT, NAME_VALUE VARCHAR(MAX)); 
			DECLARE @TBL_NAMES_TBL TABLE (ROW_N INT, NAME_VALUE VARCHAR(MAX));
			DECLARE @COL_TYPES_TBL TABLE (ROW_N INT, NAME_VALUE VARCHAR(MAX));
			DECLARE @XPATHS_TBL TABLE (ROW_N INT, NAME_VALUE VARCHAR(MAX));
			insert into @SYS_NAMES_TBL select * from dbo.split(char(10), @p_system_name);
			insert into @ENV_NAMES_TBL select * from dbo.split(char(10), @p_environment_name);
			insert into @TBL_NAMES_TBL select * from dbo.split(char(10), @p_table_name);
			insert into @COL_TYPES_TBL select * from dbo.split(char(10), @p_table_type);
			insert into @XPATHS_TBL select * from dbo.split(char(10), @p_xpath);
			
			DECLARE @cnt INT = 0;
			
			WHILE @cnt <= @v_table_space_count
				BEGIN
					SET @cnt = @cnt + 1;
					set @v_current_system_name = (SELECT NAME_VALUE FROM @SYS_NAMES_TBL WHERE ROW_N = @cnt);
					set @v_current_env_name = (SELECT NAME_VALUE FROM @ENV_NAMES_TBL WHERE ROW_N = @cnt);
					set @v_current_table_name = (SELECT NAME_VALUE FROM @TBL_NAMES_TBL WHERE ROW_N = @cnt);
					set @v_current_table_type = ISNULL((SELECT NAME_VALUE FROM @COL_TYPES_TBL WHERE ROW_N = @cnt), '');
					set @v_current_xpath = ISNULL((SELECT NAME_VALUE FROM @XPATHS_TBL WHERE ROW_N = @cnt), '');
					IF ((@p_check_xpath = 1 AND charindex(UPPER(@p_old_xpath), UPPER(@v_current_xpath)) = 1) or @p_check_xpath = 0) AND UPPER(@v_current_table_type) = UPPER(@p_old_table_type) AND UPPER(@v_current_table_name) = UPPER(@p_old_table_name) AND UPPER(@v_current_env_name) = UPPER(@p_old_environment_name) AND UPPER(@v_current_system_name) = UPPER(@p_old_system_name) AND ((@p_check_xpath = 1 AND charindex(UPPER(@p_old_xpath), UPPER(@p_xpath)) = 1) OR @p_check_xpath = 0)
						BEGIN
							set @existedCnt = @existedCnt + 1;
						END
				END
		END
	RETURN @existedCnt;
END
GO
IF EXISTS (SELECT * FROM SYS.OBJECTS WHERE OBJECT_ID = OBJECT_ID(N'[FN_REPLACE_MS_TABLE_ID_ATRIB]') AND TYPE IN (N'FN', N'IF', N'TF', N'FS', N'FT'))
BEGIN
    DROP FUNCTION [FN_REPLACE_MS_TABLE_ID_ATRIB]
END
GO
CREATE FUNCTION [FN_REPLACE_MS_TABLE_ID_ATRIB](
@p_system_name varchar(max),
@p_environment_name varchar(max),
@p_table_name varchar(max),
@p_table_type varchar(max),
@p_xpath varchar(max),
@p_old_system_name varchar(max),
@p_old_environment_name varchar(max),
@p_old_table_name varchar(max),
@p_old_table_type varchar(max),
@p_old_xpath varchar(max),
@p_check_xpath int,
@p_new_table_name varchar(max),
@p_new_xpath varchar(max))
RETURNS @RETURN_TABLE TABLE(COLUMN_NAME VARCHAR(MAX), XPATH VARCHAR(MAX)) AS
	BEGIN
		DECLARE @v_sys_space_count INT = LEN(@p_system_name) - LEN(REPLACE(@p_system_name, CHAR(10),''));
		DECLARE @v_environment_space_count INT = LEN(@p_environment_name) - LEN(REPLACE(@p_environment_name, CHAR(10),''));
		DECLARE @v_table_space_count INT = LEN(@p_table_name) - LEN(REPLACE(@p_table_name, CHAR(10),''));
		DECLARE @v_table_type_count INT = LEN(@p_table_type) - LEN(REPLACE(@p_table_type, CHAR(10),''));
		DECLARE @v_xpath_count INT = LEN(@p_xpath) - LEN(REPLACE(@p_xpath, CHAR(10),''));

		DECLARE @v_temp_table_name varchar(max);
		DECLARE @v_temp_xpath varchar(max);

		DECLARE @v_current_system_name varchar(max);
		DECLARE @v_current_env_name varchar(max);
		DECLARE @v_current_table_name varchar(max);
		DECLARE @v_current_table_type varchar(max);
		DECLARE @v_current_xpath varchar(max);

		DECLARE @v_current_replaced_xpath varchar(max);

		IF (@v_sys_space_count = 0 AND @v_environment_space_count = 0 AND @v_table_space_count = 0 AND @v_table_type_count = 0 AND @v_xpath_count = 0)
			BEGIN
				IF (UPPER(@p_system_name) = UPPER(@p_old_system_name) AND UPPER(@p_environment_name) = UPPER(@p_old_environment_name) 
					AND UPPER(@p_table_name) = UPPER(@p_old_table_name) AND UPPER(@p_table_type) = UPPER(@p_old_table_type) 
					AND ((@p_check_xpath = 1 AND charindex(UPPER(@p_old_xpath), UPPER(@p_xpath)) = 1) OR @p_check_xpath = 0))
				BEGIN
					set @v_temp_table_name = @p_new_table_name;
					set @v_temp_xpath = @p_xpath;
					IF @p_check_xpath = 1 AND ISNULL(@p_xpath, '') <> ''
						BEGIN
							set @v_temp_xpath = @p_new_xpath + SUBSTRING(@p_xpath, LEN(@p_old_xpath) + 1, LEN(@p_xpath));
						END
				END
			END
		ELSE
			BEGIN
				DECLARE @SYS_NAMES_TBL TABLE (ROW_N INT, NAME_VALUE VARCHAR(MAX)); 
				DECLARE @ENV_NAMES_TBL TABLE (ROW_N INT, NAME_VALUE VARCHAR(MAX)); 
				DECLARE @TBL_NAMES_TBL TABLE (ROW_N INT, NAME_VALUE VARCHAR(MAX));
				DECLARE @COL_TYPES_TBL TABLE (ROW_N INT, NAME_VALUE VARCHAR(MAX));
				DECLARE @XPATHS_TBL TABLE (ROW_N INT, NAME_VALUE VARCHAR(MAX));
				insert into @SYS_NAMES_TBL select * from dbo.split(char(10), @p_system_name);
				insert into @ENV_NAMES_TBL select * from dbo.split(char(10), @p_environment_name);
				insert into @TBL_NAMES_TBL select * from dbo.split(char(10), @p_table_name);
				insert into @COL_TYPES_TBL select * from dbo.split(char(10), @p_table_type);
				insert into @XPATHS_TBL select * from dbo.split(char(10), @p_xpath);
				
				DECLARE @cnt INT = 0;
				
				WHILE @cnt <= @v_table_space_count or @cnt <= @v_xpath_count
					BEGIN
						SET @cnt = @cnt + 1;
						set @v_current_system_name = (SELECT NAME_VALUE FROM @SYS_NAMES_TBL WHERE ROW_N = @cnt);
						set @v_current_env_name = (SELECT NAME_VALUE FROM @ENV_NAMES_TBL WHERE ROW_N = @cnt);
						set @v_current_table_name = ISNULL((SELECT NAME_VALUE FROM @TBL_NAMES_TBL WHERE ROW_N = @cnt),'');
						set @v_current_table_type = ISNULL((SELECT NAME_VALUE FROM @COL_TYPES_TBL WHERE ROW_N = @cnt), '');
						set @v_current_xpath = ISNULL((SELECT NAME_VALUE FROM @XPATHS_TBL WHERE ROW_N = @cnt), '');
						IF ((@p_check_xpath = 1 AND charindex(UPPER(@p_old_xpath), UPPER(@v_current_xpath)) = 1) or @p_check_xpath = 0) AND UPPER(@v_current_table_type) = UPPER(@p_old_table_type) AND UPPER(@v_current_table_name) = UPPER(@p_old_table_name) AND UPPER(@v_current_env_name) = UPPER(@p_old_environment_name) AND UPPER(@v_current_system_name) = UPPER(@p_old_system_name)
							BEGIN
								set @v_temp_table_name = case when @cnt = 1 then @p_new_table_name else @v_temp_table_name + char(10) + @p_new_table_name end;
								
								set @v_current_replaced_xpath = @v_current_xpath;
								IF @p_check_xpath = 1 AND ISNULL(@v_current_xpath, '') <> ''
									BEGIN
										set @v_current_replaced_xpath = @p_new_xpath + SUBSTRING(@v_current_xpath, LEN(@p_old_xpath) + 1, LEN(@v_current_xpath));
									END
								set @v_temp_xpath = case when @cnt = 1 then @v_current_replaced_xpath else @v_temp_xpath + char(10) + @v_current_replaced_xpath end;							
							END
						ELSE
							BEGIN
								set @v_temp_table_name = case when @cnt = 1 then @v_current_table_name else @v_temp_table_name + char(10) + @v_current_table_name end;
								set @v_temp_xpath = case when @cnt = 1 then @v_current_xpath else @v_temp_xpath + char(10) + @v_current_xpath end;
							END
					END
			END
		INSERT INTO @RETURN_TABLE VALUES (@v_temp_table_name, @v_temp_xpath);
	RETURN;
	END
GO
IF EXISTS (SELECT * FROM ADS_MM_VERSION WHERE VALUE <= 10.1)
BEGIN
UPDATE SYSTEM_TABLE_COLUMNS_METADATA SET DECLARATION_PATH = left(DECLARATION_PATH, len(DECLARATION_PATH) - charindex('/', reverse(LTRIM(RTRIM(DECLARATION_PATH))) + '/')) WHERE COLUMN_NAME = (REVERSE(SUBSTRING(REVERSE(DECLARATION_PATH),0,CHARINDEX('/',REVERSE(LTRIM(RTRIM(DECLARATION_PATH)))))))
AND TYPE <> 'ENTITY'
AND TABLE_NAME <> COLUMN_NAME;

UPDATE STM SET DECLARATION_PATH = SUBSTRING(SUBSTRING(DECLARATION_PATH, 2, DATALENGTH(DECLARATION_PATH)), CHARINDEX('/',SUBSTRING(DECLARATION_PATH, 2, DATALENGTH(DECLARATION_PATH))), DATALENGTH(SUBSTRING(DECLARATION_PATH, 2, DATALENGTH(DECLARATION_PATH)))) 
FROM SYSTEM_TABLE_METADATA STM JOIN SYS_CON_ENVIRONMENTS SCE
ON STM.SCE_ID = SCE.SCE_ID
WHERE CHARINDEX('/',SUBSTRING(DECLARATION_PATH, 2, DATALENGTH(DECLARATION_PATH))) > 0 AND 
DECLARATION_PATH IS NOT NULL AND (SUBSTRING(SUBSTRING(DECLARATION_PATH, 2, DATALENGTH(DECLARATION_PATH)), 1, CHARINDEX('/',SUBSTRING(DECLARATION_PATH, 2, DATALENGTH(DECLARATION_PATH)))-1)) NOT IN (SELECT TABLE_NAME FROM SYSTEM_TABLE_METADATA STTM WHERE STTM.SCE_ID = STM.SCE_ID)
AND SCE.DATABASE_TYPE = 'JSON';

UPDATE STCM SET DECLARATION_PATH = SUBSTRING(SUBSTRING(DECLARATION_PATH, 2, DATALENGTH(DECLARATION_PATH)), CHARINDEX('/',SUBSTRING(DECLARATION_PATH, 2, DATALENGTH(DECLARATION_PATH))), DATALENGTH(SUBSTRING(DECLARATION_PATH, 2, DATALENGTH(DECLARATION_PATH)))) 
FROM SYSTEM_TABLE_COLUMNS_METADATA STCM JOIN SYS_CON_ENVIRONMENTS SCE
ON STCM.SCE_ID = SCE.SCE_ID
WHERE CHARINDEX('/',SUBSTRING(DECLARATION_PATH, 2, DATALENGTH(DECLARATION_PATH))) > 0
AND (SUBSTRING(SUBSTRING(DECLARATION_PATH, 2, DATALENGTH(DECLARATION_PATH)), 1, CHARINDEX('/',SUBSTRING(DECLARATION_PATH, 2, DATALENGTH(DECLARATION_PATH)))-1)) NOT IN (SELECT TABLE_NAME FROM SYSTEM_TABLE_COLUMNS_METADATA STTM WHERE STTM.SCE_ID = STCM.SCE_ID)
AND SCE.DATABASE_TYPE = 'JSON';
END
GO
UPDATE SYSTEM_TABLE_METADATA SET DECLARATION_PATH = '/'+ TABLE_NAME WHERE DECLARATION_PATH IS NULL
GO
UPDATE SYSTEM_TABLE_COLUMNS_METADATA SET DECLARATION_PATH = '/'+ TABLE_NAME WHERE DECLARATION_PATH IS NULL
GO
UPDATE SYSTEM_TABLE_METADATA SET DECLARATION_PATH = '/'+ TABLE_NAME WHERE DECLARATION_PATH = ''
GO
UPDATE SYSTEM_TABLE_COLUMNS_METADATA SET DECLARATION_PATH = '/'+ TABLE_NAME WHERE DECLARATION_PATH = ''
GO
IF EXISTS (SELECT * FROM SYS.OBJECTS WHERE OBJECT_ID = OBJECT_ID(N'[FN_REPLACE_MS_XPATH_PRFX]') AND TYPE IN (N'FN', N'IF', N'TF', N'FS', N'FT'))
BEGIN
    DROP FUNCTION [FN_REPLACE_MS_XPATH_PRFX]
END
GO
CREATE FUNCTION [FN_REPLACE_MS_XPATH_PRFX](
@p_system_name varchar(max),
@p_environment_name varchar(max),
@p_table_type varchar(max),
@p_xpath varchar(max),
@p_old_system_name varchar(max),
@p_old_environment_name varchar(max),
@p_old_table_type varchar(max),
@p_old_xpath varchar(max), 
@p_check_xpath int,
@p_new_xpath varchar(max))
RETURNS VARCHAR(MAX) AS
	BEGIN
		DECLARE @v_sys_space_count INT = LEN(@p_system_name) - LEN(REPLACE(@p_system_name, CHAR(10),''));
		DECLARE @v_environment_space_count INT = LEN(@p_environment_name) - LEN(REPLACE(@p_environment_name, CHAR(10),''));
		DECLARE @v_table_type_count INT = LEN(@p_table_type) - LEN(REPLACE(@p_table_type, CHAR(10),''));
		DECLARE @v_xpath_count INT = LEN(@p_xpath) - LEN(REPLACE(@p_xpath, CHAR(10),''));

		DECLARE @v_temp_table_name varchar(max);
		DECLARE @v_temp_xpath varchar(max);

		DECLARE @v_current_system_name varchar(max);
		DECLARE @v_current_env_name varchar(max);
		DECLARE @v_current_table_type varchar(max);
		DECLARE @v_current_xpath varchar(max);

		DECLARE @v_current_replaced_xpath varchar(max);

		IF (@v_sys_space_count = 0 AND @v_environment_space_count = 0 AND @v_table_type_count = 0 AND @v_xpath_count = 0)
			BEGIN
				IF (UPPER(@p_system_name) = UPPER(@p_old_system_name) AND UPPER(@p_environment_name) = UPPER(@p_old_environment_name) AND UPPER(@p_table_type) = UPPER(@p_old_table_type) 
					AND ((@p_check_xpath = 1 AND charindex(UPPER(@p_old_xpath), UPPER(@p_xpath)) = 1) OR @p_check_xpath = 0))
				BEGIN
					set @v_temp_xpath = @p_xpath;
					IF @p_check_xpath = 1 AND ISNULL(@p_xpath, '') <> ''
						BEGIN
							set @v_temp_xpath = @p_new_xpath + SUBSTRING(@p_xpath, LEN(@p_old_xpath) + 1, LEN(@p_xpath));
						END
				END
			END
		ELSE
			BEGIN
				DECLARE @SYS_NAMES_TBL TABLE (ROW_N INT, NAME_VALUE VARCHAR(MAX)); 
				DECLARE @ENV_NAMES_TBL TABLE (ROW_N INT, NAME_VALUE VARCHAR(MAX)); 
				DECLARE @COL_TYPES_TBL TABLE (ROW_N INT, NAME_VALUE VARCHAR(MAX));
				DECLARE @XPATHS_TBL TABLE (ROW_N INT, NAME_VALUE VARCHAR(MAX));
				insert into @SYS_NAMES_TBL select * from dbo.split(char(10), @p_system_name);
				insert into @ENV_NAMES_TBL select * from dbo.split(char(10), @p_environment_name);
				insert into @COL_TYPES_TBL select * from dbo.split(char(10), @p_table_type);
				insert into @XPATHS_TBL select * from dbo.split(char(10), @p_xpath);
				
				DECLARE @cnt INT = 0;
				
				WHILE @cnt <= @v_xpath_count
					BEGIN
						SET @cnt = @cnt + 1;
						set @v_current_system_name = (SELECT NAME_VALUE FROM @SYS_NAMES_TBL WHERE ROW_N = @cnt);
						set @v_current_env_name = (SELECT NAME_VALUE FROM @ENV_NAMES_TBL WHERE ROW_N = @cnt);
						set @v_current_table_type = ISNULL((SELECT NAME_VALUE FROM @COL_TYPES_TBL WHERE ROW_N = @cnt), '');
						set @v_current_xpath = ISNULL((SELECT NAME_VALUE FROM @XPATHS_TBL WHERE ROW_N = @cnt), '');
						IF ((@p_check_xpath = 1 AND charindex(UPPER(@p_old_xpath), UPPER(@v_current_xpath)) = 1) or @p_check_xpath = 0) AND UPPER(@v_current_table_type) = UPPER(@p_old_table_type) AND UPPER(@v_current_env_name) = UPPER(@p_old_environment_name) AND UPPER(@v_current_system_name) = UPPER(@p_old_system_name)
							BEGIN
								set @v_current_replaced_xpath = @v_current_xpath;
								IF @p_check_xpath = 1 AND ISNULL(@v_current_xpath, '') <> ''
									BEGIN
										set @v_current_replaced_xpath = @p_new_xpath + SUBSTRING(@v_current_xpath, LEN(@p_old_xpath) + 1, LEN(@v_current_xpath));
									END
								set @v_temp_xpath = case when @cnt = 1 then @v_current_replaced_xpath else @v_temp_xpath + char(10) + @v_current_replaced_xpath end;							
							END
						ELSE
							BEGIN
								set @v_temp_xpath = case when @cnt = 1 then @v_current_xpath else @v_temp_xpath + char(10) + @v_current_xpath end;
							END
					END
			END
	RETURN @v_temp_xpath;
	END
GO
IF EXISTS (SELECT * FROM SYS.OBJECTS WHERE OBJECT_ID = OBJECT_ID(N'[FN_MS_XPATH_PRFX_ATTRIB_CHECK]') AND TYPE IN (N'FN', N'IF', N'TF', N'FS', N'FT'))
BEGIN
    DROP FUNCTION [FN_MS_XPATH_PRFX_ATTRIB_CHECK]
END
GO
CREATE FUNCTION [FN_MS_XPATH_PRFX_ATTRIB_CHECK](
@p_system_name varchar(max),
@p_environment_name varchar(max),
@p_table_type varchar(max),
@p_xpath varchar(max),
@p_old_system_name varchar(max),
@p_old_environment_name varchar(max),
@p_old_table_type varchar(max),
@p_old_xpath varchar(max),
@p_check_xpath int)
	RETURNS INT AS
BEGIN
	DECLARE @v_sys_space_count INT = LEN(@p_system_name) - LEN(REPLACE(@p_system_name, CHAR(10),''));
	DECLARE @v_environment_space_count INT = LEN(@p_environment_name) - LEN(REPLACE(@p_environment_name, CHAR(10),''));
	DECLARE @v_table_type_count INT = LEN(@p_table_type) - LEN(REPLACE(@p_table_type, CHAR(10),''));
	DECLARE @v_xpath_count INT = LEN(@p_xpath) - LEN(REPLACE(@p_xpath, CHAR(10),''));

	DECLARE @existedCnt INT = 0;

	DECLARE @v_current_system_name varchar(max);
	DECLARE @v_current_env_name varchar(max);
	DECLARE @v_current_table_type varchar(max);
	DECLARE @v_current_xpath varchar(max);

	IF (@v_sys_space_count = 0 AND @v_environment_space_count = 0 AND @v_table_type_count = 0 AND @v_xpath_count = 0)
		BEGIN
			IF (UPPER(@p_system_name) = UPPER(@p_old_system_name) AND UPPER(@p_environment_name) = UPPER(@p_old_environment_name) AND UPPER(@p_table_type) = UPPER(@p_old_table_type) 
				AND ((@p_check_xpath = 1 AND charindex(UPPER(@p_old_xpath), UPPER(@p_xpath)) = 1) OR @p_check_xpath = 0))
			BEGIN
				set @existedCnt = @existedCnt + 1;
			END
		END
	ELSE
		BEGIN
			DECLARE @SYS_NAMES_TBL TABLE (ROW_N INT, NAME_VALUE VARCHAR(MAX)); 
			DECLARE @ENV_NAMES_TBL TABLE (ROW_N INT, NAME_VALUE VARCHAR(MAX)); 
			DECLARE @COL_TYPES_TBL TABLE (ROW_N INT, NAME_VALUE VARCHAR(MAX));
			DECLARE @XPATHS_TBL TABLE (ROW_N INT, NAME_VALUE VARCHAR(MAX));
			insert into @SYS_NAMES_TBL select * from dbo.split(char(10), @p_system_name);
			insert into @ENV_NAMES_TBL select * from dbo.split(char(10), @p_environment_name);
			insert into @COL_TYPES_TBL select * from dbo.split(char(10), @p_table_type);
			insert into @XPATHS_TBL select * from dbo.split(char(10), @p_xpath);
			
			DECLARE @cnt INT = 0;
			
			WHILE @cnt <= @v_xpath_count
				BEGIN
					SET @cnt = @cnt + 1;
					set @v_current_system_name = (SELECT NAME_VALUE FROM @SYS_NAMES_TBL WHERE ROW_N = @cnt);
					set @v_current_env_name = (SELECT NAME_VALUE FROM @ENV_NAMES_TBL WHERE ROW_N = @cnt);
					set @v_current_table_type = ISNULL((SELECT NAME_VALUE FROM @COL_TYPES_TBL WHERE ROW_N = @cnt), '');
					set @v_current_xpath = ISNULL((SELECT NAME_VALUE FROM @XPATHS_TBL WHERE ROW_N = @cnt), '');
					IF ((@p_check_xpath = 1 AND charindex(UPPER(@p_old_xpath), UPPER(@v_current_xpath)) = 1) or @p_check_xpath = 0) AND UPPER(@v_current_table_type) = UPPER(@p_old_table_type) AND UPPER(@v_current_env_name) = UPPER(@p_old_environment_name) AND UPPER(@v_current_system_name) = UPPER(@p_old_system_name)
						BEGIN
							set @existedCnt = @existedCnt + 1;
						END
				END
		END
	RETURN @existedCnt;
END
GO
IF NOT EXISTS
  (SELECT *
   FROM SYS.VIEWS
   WHERE NAME = 'GET_DECRN_PATH_HIERCHY_DBS_V')
 BEGIN EXEC ('CREATE VIEW [GET_DECRN_PATH_HIERCHY_DBS_V]
AS
WITH SYSTBLCOLS AS (SELECT DISTINCT STM.STM_ID, STM.STM_ID REF_ID, stm.sce_id, CAST(''/'' + (stm.TABLE_NAME)
AS VARCHAR(MAX)) AS DECLARATION_PATH
FROM SYSTEM_TABLE_METADATA STM
WHERE STM.VALID =1
AND SCE_ID IN (SELECT SCE_ID FROM SYS_CON_ENVIRONMENTS WHERE DATABASE_TYPE IN (''JSON'',''XSD'', ''XMI'',''MapR'',''Cloudera'',''Hortonworks''))
UNION ALL SELECT TBLCOLS.STM_ID, TBLCOLS.REF_ID, TBLCOLS.sce_id,CAST((SYSCOLS.DECLARATION_PATH + ''/'' + TBLCOLS.COLUMN_NAME) AS VARCHAR(MAX)) AS DECLARATION_PATH
FROM SYSTEM_TABLE_COLUMNS_METADATA AS TBLCOLS
JOIN SYSTBLCOLS AS SYSCOLS ON TBLCOLS.STM_ID = SYSCOLS.REF_ID and TBLCOLS.SCE_ID = SYSCOLS.SCE_ID AND TBLCOLS.TYPE = ''ENTITY'' and TBLCOLS.VALID = 1),
results as (    SELECT       STCM.STM_ID,       STCM.TABLE_NAME,       (          SELECT             TOP 1 DECLARATION_PATH          FROM             SYSTBLCOLS          WHERE             REF_ID = STCM.STM_ID          ORDER BY             DATALENGTH(DECLARATION_PATH) DESC       )       DECLARATION_PATH    FROM SYSTEM_TABLE_METADATA STCM WHERE SCE_ID IN (SELECT SCE_ID FROM SYS_CON_ENVIRONMENTS WHERE DATABASE_TYPE IN (''JSON'',''XSD'', ''XMI'',''MapR'',''Cloudera'',''Hortonworks'')))
select * from results

');
END;
GO
IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'SYSTEM_TABLE_COLUMNS_METADATA' AND COLUMN_NAME = 'TYPE' AND CHARACTER_MAXIMUM_LENGTH = '500')
    BEGIN
        ALTER TABLE SYSTEM_TABLE_COLUMNS_METADATA ALTER COLUMN [TYPE] VARCHAR(500) NULL
    END
GO
IF NOT EXISTS(SELECT * FROM sys.indexes WHERE name = 'STM_SCEID_ENAME_TNAME_INDX' AND object_id = OBJECT_ID('system_table_metadata'))
BEGIN
EXECUTE('CREATE INDEX STM_SCEID_ENAME_TNAME_INDX ON system_table_metadata (SYSTEM_ID, SCE_ID, SYSTEM_ENV_NAME, TABLE_NAME)');
END
GO
IF NOT EXISTS(SELECT * FROM sys.indexes WHERE name = 'STCM_REFID_TYPE_VALID_INDX' AND object_id = OBJECT_ID('system_table_columns_metadata'))
BEGIN
EXECUTE('CREATE INDEX STCM_REFID_TYPE_VALID_INDX ON system_table_columns_metadata (REF_ID, TYPE, [VALID])');
END
GO
IF NOT EXISTS(SELECT * FROM SYS.INDEXES WHERE NAME = 'STCM_STM_ID_VALID_INDX' AND OBJECT_ID = OBJECT_ID('SYSTEM_TABLE_COLUMNS_METADATA'))
BEGIN
EXECUTE('CREATE INDEX STCM_STM_ID_VALID_INDX ON SYSTEM_TABLE_COLUMNS_METADATA (STM_ID,VALID)');
END
GO
IF EXISTS (SELECT * FROM ADS_MM_VERSION WHERE VALUE <= 10.1)
BEGIN
   EXECUTE('DELETE FROM MMROLE_PERMISSIONS WHERE PERMISSION_ID IN (''com.ads.mm.permission.mm.transformations.search'', ''com.ads.mm.permission.mm.transformations.search.transname'', ''com.ads.mm.permission.mm.transformations.search.createdby'', ''com.ads.mm.permission.mm.transformations.search.psuedocode'', ''com.ads.mm.permission.mm.transformations.search.intendedesc'', ''com.ads.mm.permission.mm.mapgrid.edit.extwindow.busrule'', ''com.ads.mm.permission.mm.mapgrid.edit.extwindow.extbusrule'', ''com.ads.mm.permission.mm.mapgrid.edit.extwindow.translookup'', ''com.ads.mm.permission.mm.mapgrid.edit.extwindow.userdefinitionfields'', ''com.ads.mm.permission.mm.mappings.search.mapname'', ''com.ads.mm.permission.mm.mappings.search.busrule'', ''com.ads.mm.permission.mm.mappings.search.srctable'', ''com.ads.mm.permission.mm.mappings.search.tgttable'')');
END
GO
IF EXISTS (SELECT * FROM ADS_MM_VERSION WHERE VALUE <= 10.1)
BEGIN
    EXECUTE('INSERT INTO MMROLE_PERMISSIONS(MMROLE_ID, PERMISSION_ID, ENABLED)
    select MMROLE_ID, ''com.ads.mm.permission.autom.scheduledjobs'' PERMISSION_ID, ENABLED 
    from MMROLE_PERMISSIONS where permission_id = ''com.ads.mm.permission.autom''
    union
    select MMROLE_ID, ''com.ads.mm.permission.autom.scheduledjobs.editjob'', ENABLED 
    from MMROLE_PERMISSIONS where permission_id = ''com.ads.mm.permission.autom''
    union
    select MMROLE_ID, ''com.ads.mm.permission.autom.scheduledjobs.deletejob'', ENABLED 
    from MMROLE_PERMISSIONS where permission_id = ''com.ads.mm.permission.autom''');
END
GO
IF EXISTS (SELECT * FROM ADS_MM_VERSION WHERE VALUE <= 10.1)
BEGIN
    IF EXISTS (SELECT * FROM SYS.OBJECTS WHERE OBJECT_ID = OBJECT_ID(N'[FN_APND_SYS_ENV_TAB_CHECK]') AND TYPE IN (N'FN', N'IF', N'TF', N'FS', N'FT'))
    BEGIN
        EXECUTE('DROP FUNCTION FN_APND_SYS_ENV_TAB_CHECK');
        EXECUTE('DROP FUNCTION FN_APND_SYS_ENV_TAB_COL_CHECK');
        EXECUTE('DROP FUNCTION FN_REPLACE_TABLE_NAME');
        EXECUTE('DROP FUNCTION FN_REPLACE_COLUMN_NAME');
    END;
END
GO
IF EXISTS (SELECT * FROM ADS_MM_VERSION WHERE VALUE <= 10.1)
BEGIN
    IF EXISTS (SELECT * FROM APP_PREFERENCES WHERE PREFERENCE_NAME = 'LAST_MAPPING_LINEAGE_SYNC_TIME')
    BEGIN
        EXECUTE('UPDATE APP_PREFERENCES SET PREFERENCE_VALUE = ''1990-01-01 00:00:00.001'' WHERE PREFERENCE_NAME = ''LAST_MAPPING_LINEAGE_SYNC_TIME''');
        EXECUTE('TRUNCATE TABLE APPENDED_MAP_SPEC_RECORDS');
        EXECUTE('TRUNCATE TABLE MASTER_LINEAGE_GRAPH');
    END;
END
GO
IF  EXISTS(SELECT * FROM ADS_MM_VERSION WHERE VALUE <= 10.1)
    BEGIN
        UPDATE USERS SET USER_FULL_NAME = USER_ID WHERE USER_FULL_NAME=''
        UPDATE system_table_columns_metadata SET PHYSICAL_COLUMN_NAME = COLUMN_NAME WHERE PHYSICAL_COLUMN_NAME IS NULL AND SCE_ID IN (SELECT SCE_ID FROM SYS_CON_ENVIRONMENTS WHERE DATABASE_TYPE = 'JSON') 
        UPDATE system_table_metadata SET PHYSICAL_TABLE_NAME = TABLE_NAME WHERE PHYSICAL_TABLE_NAME IS NULL AND SCE_ID IN (SELECT SCE_ID FROM SYS_CON_ENVIRONMENTS WHERE DATABASE_TYPE = 'JSON') 
    END
GO
IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'SYSTEM_TABLE_COLUMNS_METADATA' AND COLUMN_NAME = 'COL_DATATYPE' AND CHARACTER_MAXIMUM_LENGTH = '255')
    BEGIN
        ALTER TABLE SYSTEM_TABLE_COLUMNS_METADATA ALTER COLUMN [COL_DATATYPE] VARCHAR(255) NULL
    END
GO
UPDATE ADS_MM_VERSION SET VALUE = 10.2;
GO
