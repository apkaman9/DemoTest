SET DEFINE OFF;
/
SET SQLBLANKLINES ON;
/
DECLARE
   TABLECHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO TABLECHECKERFLAG FROM ALL_TABLES WHERE OWNER = sys_context( 'userenv', 'current_schema' ) AND TABLE_NAME = UPPER('APP_DEFAULTS');
   IF TABLECHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'CREATE TABLE  "APP_DEFAULTS"    (	"APPDEFAULTID" NUMBER(*,0) NOT NULL ENABLE, 	"APPDEFAULTNAME" VARCHAR2(150), 	"APPDEFAULTVALUE" VARCHAR2(2000)    )';
   END IF;
END;
/
DECLARE
   TABLECHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO TABLECHECKERFLAG FROM ALL_TABLES WHERE OWNER = sys_context( 'userenv', 'current_schema' ) AND TABLE_NAME = UPPER('MAPPING_DETAILS');
   IF TABLECHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'CREATE TABLE  "MAPPING_DETAILS"    (	"MAP_ID" NUMBER NOT NULL ENABLE, 	"MAP_NAME" VARCHAR2(50), 	"MAP_SPEC_VERSION" NUMBER(18,2), 	"MAP_DESCRIPTION" VARCHAR2(4000), 	"PROJECT_ID" NUMBER, 	"SOURCE_EXTRACT_QUERY" VARCHAR2(4000), 	"SOURCE_EXTRACT_DESCRIPTION" VARCHAR2(4000), 	"TARGET_UPDATE_STRATEGY" VARCHAR2(3), 	"TRRGET_UPGATE_STRATEGY_NOTES" VARCHAR2(4000),
 	"TEST_DISPOSITION" CHAR(1), 	"TESTING_NOTES" VARCHAR2(4000), 	"CREATED_BY" VARCHAR2(50), 	"CREATED_DATE_TIME" TIMESTAMP (6), 	"LAST_MODIFIED_BY" VARCHAR2(50), 	"LAST_MODIFIED_DATE_TIME" TIMESTAMP (6), 	"STATUS" VARCHAR2(50), 	"VERSIONLABEL" VARCHAR2(20), 	"CHANGED_DESCRIPTION" VARCHAR2(4000), 	"PLAN_DEVELOP_LOE" VARCHAR2(50), 	"PLAN_NOTES" VARCHAR2(4000), 	"ACTUAL_DEVELOP_LOE" VARCHAR2(50),
 	"ACTUAL_NOTES" VARCHAR2(4000), 	"PLAN_MAPPING_EFFORT" FLOAT(126), 	"PLAN_MAPPING_EFFORT_UNITS" VARCHAR2(50), 	"PLAN_ETL_EFFORT" FLOAT(126), 	"PLAN_ETL_EFFORT_UNITS" VARCHAR2(50), 	"ACTUAL_MAPPING_EFFORT" FLOAT(126), 	"ACTUAL_MAPPING_EFFORT_UNITS" VARCHAR2(50), 	"ACTUAL_ETL_EFFORT" FLOAT(126), 	"ACTUAL_ETL_EFFORT_UNITS" VARCHAR2(50), 	 CONSTRAINT "XPKMAPPING_DETAILS" PRIMARY KEY ("MAP_ID") ENABLE    )';
   END IF;
END;
/
DECLARE
   TABLECHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO TABLECHECKERFLAG FROM ALL_TABLES WHERE OWNER = sys_context( 'userenv', 'current_schema' ) AND TABLE_NAME = UPPER('MAPPING_DOCUMENTS');
   IF TABLECHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'CREATE TABLE  "MAPPING_DOCUMENTS"    (	"MAP_DOC_NAME" VARCHAR2(50), 	"MAP_DOC_TYPE" VARCHAR2(20), 	"MAP_DOC_INTEDED_USE_DESCR" VARCHAR2(4000), 	"MAP_DOC_OWNER" VARCHAR2(50), 	"MAP_ID" NUMBER NOT NULL ENABLE, 	"MAP_DOC_ID" NUMBER NOT NULL ENABLE, 	"CREATED_DATE_TIME" TIMESTAMP (6) NOT NULL ENABLE,
 	"LAST_MODIFIED_BY" VARCHAR2(20), 	"LAST_MODIFIED_DATE_TIME" TIMESTAMP (6), 	"CREATED_BY" VARCHAR2(20) NOT NULL ENABLE, 	"MAP_DOC_OBJECT" VARCHAR2(4000) NOT NULL ENABLE, 	"APPROVAL_REQD_FLAG" CHAR(1), 	"APPROVED_BY" VARCHAR2(20), 	"APROVAL_DATETIME" TIMESTAMP (6), 	"DOCUMENT_STATUS" VARCHAR2(20),
 	 CONSTRAINT "XPKMAPPING_DOCUMENTS" PRIMARY KEY ("MAP_ID", "MAP_DOC_ID") ENABLE, 	 CONSTRAINT "R_16" FOREIGN KEY ("MAP_ID") 	  REFERENCES  "MAPPING_DETAILS" ("MAP_ID") ON DELETE CASCADE ENABLE    )';
   END IF;
END;
/
DECLARE
   TABLECHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO TABLECHECKERFLAG FROM ALL_TABLES WHERE OWNER = sys_context( 'userenv', 'current_schema' ) AND TABLE_NAME = UPPER('MAPPING_SPECIFICATION');
   IF TABLECHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'CREATE TABLE  "MAPPING_SPECIFICATION"    (	"PROJ_ID" NUMBER NOT NULL ENABLE, 	"MAP_ID" NUMBER NOT NULL ENABLE, 	"MAP_SEQ_ID" NUMBER NOT NULL ENABLE, 	"EXTENDED_BUS_RULE" VARCHAR2(4000), 	"SRC_SYSTEM_ID" NUMBER, 	"SRC_SYSTEM_NAME" VARCHAR2(4000), 	"SRC_SYSTEM_ENVIRONMENT_NAME" VARCHAR2(4000), 	"SRC_TABLE_NAME" VARCHAR2(4000), 	"SRC_COLUMN_NAME" VARCHAR2(4000), 	"SRC_COL_DATATYPE" VARCHAR2(4000), 	"SRC_COL_LENGTH" VARCHAR2(50), 	"SRC_COL_PRECISION" VARCHAR2(50), 	"SRC_COL_SCALE" VARCHAR2(50), 	"SRC_COL_DB_DEFAULT_VALUE" VARCHAR2(50), 	"SRC_COL_DEF" VARCHAR2(4000), 	"SRC_COL_IDENTITY_FLAG" CHAR(1), 	"SRC_COL_NULLABLE_FLAG" CHAR(1), 	"SRC_PERCENT_NULL_VALUE" VARCHAR2(50), 	"SRC_NATURAL_KEY_FLAG" CHAR(1), 	"SRC_MIN_VALUE" VARCHAR2(50), 	"SRC_MAX_VALUE" VARCHAR2(50), 	"TGT_SYSTEM_ID" NUMBER, 	"TGT_SYSTEM_NAME" VARCHAR2(4000), 	"TGT_SYSTEM_ENVIRONMENT_NAME" VARCHAR2(4000), 	"TGT_TABLE_NAME" VARCHAR2(4000),
      "TGT_COLUMN_NAME" VARCHAR2(4000), 	"TGT_COL_DATATYPE" VARCHAR2(4000), 	"TGT_COL_LENGTH" VARCHAR2(50), 	"TGT_COL_PRECISION" VARCHAR2(50), 	"TGT_COL_SCALE" VARCHAR2(50), 	"TGT_COL_ETL_DEFAULT_VALUE" VARCHAR2(50), 	"TGT_COL_DEF" VARCHAR2(4000), 	"TGT_NATURAL_KEY_FLAG" CHAR(1), 	"TGT_PRIMARY_KEY_FLAG" CHAR(1), 	"TRNSF_LOOKUP_CONDITION" VARCHAR2(4000), 	"BUSINESS_RULE" VARCHAR2(4000), 	"COL_MAP_COMPLETE_FLAG" CHAR(1), 	"LAST_MODIFIED_BY" VARCHAR2(50), 	"LAST_MODIFIED_DATE_TIME" TIMESTAMP (6), 	"CREATED_BY" VARCHAR2(50) NOT NULL ENABLE, 	"CREATED_DATETIME" TIMESTAMP (6) NOT NULL ENABLE, 	"USER_DEFINATION1" VARCHAR2(4000), 	"USER_DEFINATION2" VARCHAR2(4000), 	"USER_DEFINATION3" VARCHAR2(4000), 	"USER_DEFINATION4" VARCHAR2(4000), 	"USER_DEFINATION5" VARCHAR2(4000), 	"TGT_COL_NULLABLE_FLAG" CHAR(1), 	"USER_DEFINATION6" VARCHAR2(4000), 	"USER_DEFINATION7" VARCHAR2(4000), 	"USER_DEFINATION8" VARCHAR2(4000), 	"USER_DEFINATION9" VARCHAR2(4000),
      "USER_DEFINATION10" VARCHAR2(4000),   "MAP_SPECROWCOMMENTS" VARCHAR2(4000), 	"SRC_SDI_FLAG" VARCHAR2(1), 	"SRC_SDI_DESCRIPTION" VARCHAR2(4000), 	"TGT_SDI_FLAG" VARCHAR2(1), 	"TGT_SDI_DESCRIPTION" VARCHAR2(4000), 	"LOOKUP_COLUMN" VARCHAR2(4000), 	"TGT_COLUMN_COMMENTS" VARCHAR2(4000), 	"SRC_COLUMN_COMMENTS" VARCHAR2(4000), 	"TGT_LOGICAL_COLUMN_NAME" VARCHAR2(4000), 	"SRC_LOGICAL_COLUMN_NAME" VARCHAR2(4000), 	"ROW_ORDER" NUMBER(*,2) DEFAULT 0,         "CSM_MAPPING_REFERENCE" VARCHAR2(255), 	 CONSTRAINT "XPKMAPPING_SPECIFICATION" PRIMARY KEY ("PROJ_ID", "MAP_ID", "MAP_SEQ_ID") ENABLE, 	 CONSTRAINT "R_17" FOREIGN KEY ("MAP_ID") 	  REFERENCES  "MAPPING_DETAILS" ("MAP_ID") ON DELETE CASCADE ENABLE    )';
   END IF;
END;
/

DECLARE
   TABLECHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO TABLECHECKERFLAG FROM ALL_TABLES WHERE OWNER = sys_context( 'userenv', 'current_schema' ) AND TABLE_NAME = UPPER('MAPPING_STATUS');
   IF TABLECHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'CREATE TABLE  "MAPPING_STATUS"    (	"MAP_ID" NUMBER NOT NULL ENABLE, 	"PROJ_ID" NUMBER NOT NULL ENABLE, 	"USER_ID" VARCHAR2(4000), 	"RESPONSIABLES" VARCHAR2(4000), 	"STATUS" VARCHAR2(4000), 	"LOGIN_USER" VARCHAR2(4000), 	"ASSIGNMENT_CHANGES" VARCHAR2(4000)    )';
   END IF;
END;
/
DECLARE
   TABLECHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO TABLECHECKERFLAG FROM ALL_TABLES WHERE OWNER = sys_context( 'userenv', 'current_schema' ) AND TABLE_NAME = UPPER('PROJECT');
   IF TABLECHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'CREATE TABLE  "PROJECT"    (	"PROJ_ID" NUMBER NOT NULL ENABLE, 	"PROJ_NAME" VARCHAR2(200) NOT NULL ENABLE, 	"PROJ_DESCR" VARCHAR2(4000), 	"PROJ_COST_CENTER" VARCHAR2(20),
	"PROJ_IT_SPONSOR_FULL_NAME" VARCHAR2(50), 	"PROJ_BUS_SPONSOR_FULL_NAME" VARCHAR2(50), 	"PROJ_MGR_APP_OWNER_FULL_NAME" VARCHAR2(50), 	"CREATED_DATETIME" TIMESTAMP (6) NOT NULL ENABLE, 	"LAST_MODIFIED_BY" VARCHAR2(20), 	"LAST_MODIFIED_DATE_TIME" TIMESTAMP (6), 	"CREATED_BY" VARCHAR2(20) NOT NULL ENABLE, 	 CONSTRAINT "XPKPROJECT" PRIMARY KEY ("PROJ_ID") ENABLE    )';
   END IF;
END;
/
DECLARE
   TABLECHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO TABLECHECKERFLAG FROM ALL_TABLES WHERE OWNER = sys_context( 'userenv', 'current_schema' ) AND TABLE_NAME = UPPER('PROJECTSUBJECTS');
   IF TABLECHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'CREATE TABLE  "PROJECTSUBJECTS"    (	"PROJECT_ID" NUMBER NOT NULL ENABLE, 	"SUBJECT_ID" NUMBER NOT NULL ENABLE, 	"PARENT_SUBJECT_ID" NUMBER NOT NULL ENABLE    )';
   END IF;
END;
/
DECLARE
   TABLECHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO TABLECHECKERFLAG FROM ALL_TABLES WHERE OWNER = sys_context( 'userenv', 'current_schema' ) AND TABLE_NAME = UPPER('PROJECT_DOCUMENTS');
   IF TABLECHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'CREATE TABLE  "PROJECT_DOCUMENTS"    (	"PROJ_DOC_NAME" VARCHAR2(50), 	"PROJ_DOC_TYPE" VARCHAR2(20), 	"PROJ_DOC_INTEDED_USE_DESCR" VARCHAR2(4000), 	"PROJECT_DOC_REFERENCE" VARCHAR2(50), 	"PROJ_DOC_REF_NUMBER" VARCHAR2(20),
 	"PROJ_DOC_OWNER" VARCHAR2(50), 	"PROJ_DOC_ID" NUMBER NOT NULL ENABLE, 	"PROJ_ID" NUMBER NOT NULL ENABLE, 	"CREATED_DATE_TIME" TIMESTAMP (6) NOT NULL ENABLE, 	"LAST_MODIFIED_BY" VARCHAR2(20), 	"LAST_MODIFIED_DATE_TIME" TIMESTAMP (6), 	"CREATED_BY" VARCHAR2(20) NOT NULL ENABLE,
	"PROJECT_DOC_OBJECT" VARCHAR2(4000) NOT NULL ENABLE, 	"APPROVAL_REQD_FLAG" VARCHAR2(1), 	"APPROVED_BY" VARCHAR2(50), 	"APROVAL_DATETIME" TIMESTAMP (6), 	"DOCUMENT_STATUS" VARCHAR2(20), 	 CONSTRAINT "XPKPROJECT_DOCUMENTS" PRIMARY KEY ("PROJ_DOC_ID", "PROJ_ID") ENABLE, 	 CONSTRAINT "R_10" FOREIGN KEY ("PROJ_ID") 	  REFERENCES  "PROJECT" ("PROJ_ID") ENABLE    )';
   END IF;
END;
/
DECLARE
   TABLECHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO TABLECHECKERFLAG FROM ALL_TABLES WHERE OWNER = sys_context( 'userenv', 'current_schema' ) AND TABLE_NAME = UPPER('PROJECT_DOCUMENT_TEMPLATES');
   IF TABLECHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'CREATE TABLE  "PROJECT_DOCUMENT_TEMPLATES"    (	"PROJ_DOC_ID" NUMBER NOT NULL ENABLE, 	"PROJ_DOC_NAME" VARCHAR2(20) NOT NULL ENABLE, 	"PROJ_DOC_INTEDED_USE_DESCR" VARCHAR2(4000), 	"PROJ_DOC_TYPE" VARCHAR2(20), 	"REQD_FLAG" VARCHAR2(1), 	"PROJ_DOC_REF_NUMBER" VARCHAR2(20),
	"PROJ_DOC_OWNER" VARCHAR2(50), 	"PROJECT_DOC_REFERENCE" VARCHAR2(4000), 	"ACTIVE_FLAG" VARCHAR2(1), 	"PROJECT_DOC_OBJECT" VARCHAR2(4000) NOT NULL ENABLE, 	"PROJ_DOC_NW_LOC" VARCHAR2(4000), 	"CREATED_DATETIME" TIMESTAMP (6) NOT NULL ENABLE, 	"LAST_MODIFIED_BY" VARCHAR2(20), 	"LAST_MODIFIED_DATE_TIME" TIMESTAMP (6),
 	"CREATED_BY" VARCHAR2(20) NOT NULL ENABLE, 	 CONSTRAINT "XPKPROJECT_DOCUMENT_TEMPLATES" PRIMARY KEY ("PROJ_DOC_ID") ENABLE    )';
   END IF;
END;
/
DECLARE
   TABLECHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO TABLECHECKERFLAG FROM ALL_TABLES WHERE OWNER = sys_context( 'userenv', 'current_schema' ) AND TABLE_NAME = UPPER('USERS');
   IF TABLECHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'CREATE TABLE  "USERS"    (	"USER_ID" VARCHAR2(20) NOT NULL ENABLE, 	"USER_FULL_NAME" VARCHAR2(50) NOT NULL ENABLE, 	"USER_EMAIL_ADDR" VARCHAR2(50), 	"USER_TEL" VARCHAR2(20),
	"USER_MOBILE" VARCHAR2(20), 	"USER_ALTERNATE_TEL" VARCHAR2(20), 	"DEFAULT_ROLE" VARCHAR2(20) NOT NULL ENABLE, 	"USER_PASSWORD" VARCHAR2(50) NOT NULL ENABLE, 	"USER_COMPANY_TITLE" VARCHAR2(50), 	"USER_COMPANY" VARCHAR2(255),
 	"USER_REPORTS_TO_MGR_NAME" VARCHAR2(50), 	"CREATED_BY" VARCHAR2(20) NOT NULL ENABLE, 	"CREATED_DATETIME" TIMESTAMP (6) NOT NULL ENABLE, 	"LAST_MODIFIED_DATE_TIME" TIMESTAMP (6), 	"LAST_MODIFIED_BY" VARCHAR2(20),
	"USER_READ_ONLY" VARCHAR2(1), 	"USER_LANGUAGE" VARCHAR2(100), 	 CONSTRAINT "XPKUSERS" PRIMARY KEY ("USER_ID") ENABLE    )';
   END IF;
END;
/
DECLARE
   TABLECHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO TABLECHECKERFLAG FROM ALL_TABLES WHERE OWNER = sys_context( 'userenv', 'current_schema' ) AND TABLE_NAME = UPPER('SECURITY_ROLES');
   IF TABLECHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'CREATE TABLE  "SECURITY_ROLES"    (	"ROLE_NAME" VARCHAR2(20) NOT NULL ENABLE, 	"ROLE_DESCR" VARCHAR2(4000), 	"ROLE_ID" NUMBER NOT NULL ENABLE, 	"CREATED_BY" VARCHAR2(20) NOT NULL ENABLE,
	"CREATED_DATETIME" TIMESTAMP (6) NOT NULL ENABLE, 	"LAST_MODIFIED_DATE_TIME" TIMESTAMP (6), 	"LAST_MODIFIED_BY" VARCHAR2(20), 	 CONSTRAINT "XPKSECURITY_ROLES" PRIMARY KEY ("ROLE_ID") ENABLE    )';
   END IF;
END;
/
DECLARE
   TABLECHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO TABLECHECKERFLAG FROM ALL_TABLES WHERE OWNER = sys_context( 'userenv', 'current_schema' ) AND TABLE_NAME = UPPER('USER_ASSIGNED_ROLES');
   IF TABLECHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'CREATE TABLE  "USER_ASSIGNED_ROLES"    (	"USER_ID" VARCHAR2(20) NOT NULL ENABLE, 	"ROLE_ID" NUMBER NOT NULL ENABLE, 	 CONSTRAINT "XPKUSER_ASSIGNED_ROLES" PRIMARY KEY ("USER_ID", "ROLE_ID") ENABLE,
	 CONSTRAINT "R_6" FOREIGN KEY ("USER_ID") 	  REFERENCES  "USERS" ("USER_ID") ON DELETE CASCADE ENABLE, 	 CONSTRAINT "R_5" FOREIGN KEY ("ROLE_ID") 	  REFERENCES  "SECURITY_ROLES" ("ROLE_ID") ENABLE    )';
   END IF;
END;
/
DECLARE
   TABLECHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO TABLECHECKERFLAG FROM ALL_TABLES WHERE OWNER = sys_context( 'userenv', 'current_schema' ) AND TABLE_NAME = UPPER('PROJECT_RESOURCES');
   IF TABLECHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'CREATE TABLE  "PROJECT_RESOURCES"    (	"ASSIGNED_ROLE" VARCHAR2(20) NOT NULL ENABLE, 	"ASSIGNED_RESPONSIBILITIES" VARCHAR2(4000), 	"PROJ_ID" NUMBER NOT NULL ENABLE, 	"USER_ID" VARCHAR2(20) NOT NULL ENABLE,
	"ROLE_ID" NUMBER NOT NULL ENABLE, 	"CREATED_BY" VARCHAR2(20) NOT NULL ENABLE, 	"CREATED_DATETIME" TIMESTAMP (6) NOT NULL ENABLE, 	"LAST_MODIFIED_DATE_TIME" TIMESTAMP (6), 	"LAST_MODIFIED_BY" VARCHAR2(20),
       CONSTRAINT "XPKPROJECT_RESOURCES" PRIMARY KEY ("PROJ_ID", "USER_ID", "ROLE_ID") ENABLE, 	 CONSTRAINT "R_9" FOREIGN KEY ("USER_ID", "ROLE_ID") 	  REFERENCES  "USER_ASSIGNED_ROLES" ("USER_ID", "ROLE_ID") ENABLE, 	 CONSTRAINT "R_7" FOREIGN KEY ("PROJ_ID")
	  REFERENCES  "PROJECT" ("PROJ_ID") ON DELETE CASCADE ENABLE    )';
   END IF;
END;
/
DECLARE
   TABLECHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO TABLECHECKERFLAG FROM ALL_TABLES WHERE OWNER = sys_context( 'userenv', 'current_schema' ) AND TABLE_NAME = UPPER('PROJECT_SYSTEMS');
   IF TABLECHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'CREATE TABLE  "PROJECT_SYSTEMS"    (	"PROJECT_ID" VARCHAR2(50), 	"TABLE_NAME" VARCHAR2(75), 	"TYPE" VARCHAR2(50), 	"SYSTEM_NAME" VARCHAR2(50), 	"ENV_NAME" VARCHAR2(50), 	"SYSTEM_ID" VARCHAR2(50)    )';
   END IF;
END;
/
DECLARE
   TABLECHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO TABLECHECKERFLAG FROM ALL_TABLES WHERE OWNER = sys_context( 'userenv', 'current_schema' ) AND TABLE_NAME = UPPER('QA_STATUS_CODE');
   IF TABLECHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'CREATE TABLE  "QA_STATUS_CODE"    (	"QA_STATUS_DESC" VARCHAR2(4000), 	"QA_STATUS_ID" NUMBER NOT NULL ENABLE, 	"QA_TEST_DISPOSITION_DESC" VARCHAR2(20), 	 CONSTRAINT "XPKQA_STATUS_CODE" PRIMARY KEY ("QA_STATUS_ID") ENABLE    )';
   END IF;
END;
/
DECLARE
   TABLECHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO TABLECHECKERFLAG FROM ALL_TABLES WHERE OWNER = sys_context( 'userenv', 'current_schema' ) AND TABLE_NAME = UPPER('SEQUENCE_KEY');
   IF TABLECHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'CREATE TABLE  "SEQUENCE_KEY"    (	"SEQUENCE_ID" NUMBER NOT NULL ENABLE    )';
   END IF;
END;
/
DECLARE
   TABLECHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO TABLECHECKERFLAG FROM ALL_TABLES WHERE OWNER = sys_context( 'userenv', 'current_schema' ) AND TABLE_NAME = UPPER('SPECIFICATION_LOCK');
   IF TABLECHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'CREATE TABLE  "SPECIFICATION_LOCK"    (	"ISSPECIFICATION_LOCK" CHAR(1), 	"PROJ_ID" NUMBER NOT NULL ENABLE, 	"MAP_ID" NUMBER NOT NULL ENABLE,
	"SESSION_ID" VARCHAR2(4000), 	"USER_ID" VARCHAR2(20), 	 CONSTRAINT "XPKSPECIFICATIONLOCK" PRIMARY KEY ("MAP_ID") ENABLE    )';
   END IF;
END;
/
DECLARE
   TABLECHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO TABLECHECKERFLAG FROM ALL_TABLES WHERE OWNER = sys_context( 'userenv', 'current_schema' ) AND TABLE_NAME = UPPER('SUBJECTMAPPINGS');
   IF TABLECHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'CREATE TABLE  "SUBJECTMAPPINGS"    (	"SUBJECT_ID" NUMBER NOT NULL ENABLE, 	"MAPPING_ID" NUMBER NOT NULL ENABLE    )';
   END IF;
END;
/
DECLARE
   TABLECHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO TABLECHECKERFLAG FROM ALL_TABLES WHERE OWNER = sys_context( 'userenv', 'current_schema' ) AND TABLE_NAME = UPPER('SUBJECT_DETAILS');
   IF TABLECHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'CREATE TABLE  "SUBJECT_DETAILS"    (	"SUBJECT_ID" NUMBER NOT NULL ENABLE, 	"SUBJECT_NAME" VARCHAR2(150) NOT NULL ENABLE, 	"SUBJECT_DESCRIPTION" VARCHAR2(250), 	"CHANGED_DESCRIPTION" VARCHAR2(250)    )';
   END IF;
END;
/
DECLARE
   TABLECHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO TABLECHECKERFLAG FROM ALL_TABLES WHERE OWNER = sys_context( 'userenv', 'current_schema' ) AND TABLE_NAME = UPPER('SYSTEM_DEFINITION_DETAILS');
   IF TABLECHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'CREATE TABLE  "SYSTEM_DEFINITION_DETAILS"    (	"SYSTEM_NAME" VARCHAR2(20) NOT NULL ENABLE, 	"SYSTEM_MOVE_TYPE_SRC_TGT" VARCHAR2(20), 	"SYSTEM_BUSINESS_PURPOSE_SHORT" VARCHAR2(4000), 	"SYSTEM_DESCRIPTION_LONG" VARCHAR2(4000),
 	"SERVER_PLATFORM" VARCHAR2(20), 	"SERVER_OS_VERSION" VARCHAR2(20), 	"DBMS_PLATFORM" VARCHAR2(20), 	"DBMS_VERSION" VARCHAR2(20), 	"FILE_MANAGMENT_SYSTEM_TYPE" VARCHAR2(20), 	"FILE_LOCATION" VARCHAR2(255), 	"ESB_PLATFORM_TYPE" VARCHAR2(20),
	"ESB_Q_MGR_NAME" VARCHAR2(20), 	"RELEASE" VARCHAR2(20), 	"TOTAL_NUM_TABLES" NUMBER, 	"TOTAL_DB_SIZE_GIGABYTES" VARCHAR2(20), 	"DEFINITION_OF_END_OF_DAY" VARCHAR2(4000), 	"DAILY_BATCH_EXTRACT_WINDOW" VARCHAR2(4000), 	"AVG_NUM_NAMED_USERS" VARCHAR2(20),
	"AVG_NUM_CONCURRENT_USERS" VARCHAR2(20), 	"SPECIAL_INSRUCTIONS_COMMENTS" VARCHAR2(4000), 	"SYSTEM_OWNER_FULL_NAME" VARCHAR2(255), 	"SYSTEM_OWNER_TEL" VARCHAR2(20), 	"SYSTEM_OWNER_EMAIL" VARCHAR2(255), 	"CREATED_BY" VARCHAR2(20) NOT NULL ENABLE, 	"CREATED_DATETIME" TIMESTAMP (6) NOT NULL ENABLE,
	"LAST_MODIFIED_BY" VARCHAR2(20), 	"LAST_MODIFIED_DATE_TIME" TIMESTAMP (6), 	"SYSTEM_ID" NUMBER NOT NULL ENABLE, 	 CONSTRAINT "XPKSYSTEM_DEFINITION_DETAILS" PRIMARY KEY ("SYSTEM_ID") ENABLE    )';
   END IF;
END;
/
DECLARE
   TABLECHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO TABLECHECKERFLAG FROM ALL_TABLES WHERE OWNER = sys_context( 'userenv', 'current_schema' ) AND TABLE_NAME = UPPER('SYSTEM_DOCUMENTS');
   IF TABLECHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'CREATE TABLE  "SYSTEM_DOCUMENTS"    (	"SYS_DOC_NAME" VARCHAR2(50), 	"SYS_DOC_TYPE" VARCHAR2(20), 	"SYS_DOC_INTEDED_USE_DESCR" VARCHAR2(4000), 	"PROJ_DOC_OWNER" VARCHAR2(50), 	"SYSTEM_DOC_ID" NUMBER NOT NULL ENABLE, 	"SYSTEM_ID" NUMBER NOT NULL ENABLE, 	"CREATED_DATE_TIME" TIMESTAMP (6) NOT NULL ENABLE,
	"LAST_MODIFIED_BY" VARCHAR2(20), 	"LAST_MODIFIED_DATE_TIME" TIMESTAMP (6), 	"CREATED_BY" VARCHAR2(20) NOT NULL ENABLE, 	"PROJECT_DOC_OBJECT" VARCHAR2(4000) NOT NULL ENABLE, 	"APPROVAL_REQD_FLAG" CHAR(1), 	"APPROVED_BY" VARCHAR2(20), 	"APROVAL_DATETIME" TIMESTAMP (6), 	"DOCUMENT_STATUS" VARCHAR2(20), 	 CONSTRAINT "XPKSYSTEM_DOCUMENTS" PRIMARY KEY ("SYSTEM_DOC_ID", "SYSTEM_ID") ENABLE,
 	 CONSTRAINT "R_15" FOREIGN KEY ("SYSTEM_ID") 	  REFERENCES  "SYSTEM_DEFINITION_DETAILS" ("SYSTEM_ID") ON DELETE CASCADE ENABLE    )';
   END IF;
END;
/
DECLARE
   TABLECHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO TABLECHECKERFLAG FROM ALL_TABLES WHERE OWNER = sys_context( 'userenv', 'current_schema' ) AND TABLE_NAME = UPPER('SYS_CON_ENVIRONMENTS');
   IF TABLECHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'CREATE TABLE  "SYS_CON_ENVIRONMENTS"    (	"SYSTEM_ENVIRONMENT_TYPE" VARCHAR2(50), 	"SYSTEM_ENVIRONMENT_NAME" VARCHAR2(50) NOT NULL ENABLE,
	"SYSTEM_ID" NUMBER NOT NULL ENABLE, 	"SYSTEM_NAME" VARCHAR2(50), 	"SERVER_PLATFORM" VARCHAR2(50), 	"SERVER_OS_VERSION" VARCHAR2(50), 	"SPECIAL_APP_CON_INSTS" VARCHAR2(4000),
	"CREATED_DATETIME" TIMESTAMP (6) NOT NULL ENABLE, 	"LAST_MODIFIED_BY" VARCHAR2(20), 	"LAST_MODIFIED_DATE_TIME" TIMESTAMP (6), 	"CREATED_BY" VARCHAR2(20) NOT NULL ENABLE, 	"IP_ADDRESS" VARCHAR2(50),
	"PORT" VARCHAR2(10), 	"DBMS_NAME" VARCHAR2(50), 	"DBMS_INSTANCE_SCHEMA" VARCHAR2(50), 	"ENV_INTENDED_USE_DESCR" VARCHAR2(4000), 	"ENVIRONMENT_NOTES" VARCHAR2(4000), 	"USER_NAME" VARCHAR2(50), 	"PASSWORD" VARCHAR2(50),
	"DATABASE_TYPE" VARCHAR2(50), 	"DATABASE_URL" VARCHAR2(255), 	"DATABASE_DRIVER" VARCHAR2(50), 	"LAST_LOADING_TIME" TIMESTAMP (6), 	"USER_ID" VARCHAR2(50), 	"DB_DOMAIN" varchar2(4000),
	 CONSTRAINT "XPKSYS_CON_ENVIRONMENTS" PRIMARY KEY ("SYSTEM_ID", "SYSTEM_ENVIRONMENT_NAME") ENABLE, 	 CONSTRAINT "R_11" FOREIGN KEY ("SYSTEM_ID") 	  REFERENCES  "SYSTEM_DEFINITION_DETAILS" ("SYSTEM_ID") ENABLE    )';
   END IF;
END;
/
DECLARE
   TABLECHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO TABLECHECKERFLAG FROM ALL_TABLES WHERE OWNER = sys_context( 'userenv', 'current_schema' ) AND TABLE_NAME = UPPER('SYSTEM_TABLE_METADATA');
   IF TABLECHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'CREATE TABLE  "SYSTEM_TABLE_METADATA"    (	"SYSTEM_ID" NUMBER NOT NULL ENABLE, 	"TABLE_NAME" VARCHAR2(255) NOT NULL ENABLE, 	"SYSTEM_ENV_NAME" VARCHAR2(50) NOT NULL ENABLE, 	"TABLE_DEF_COMMENTS" VARCHAR2(4000),
	"CREATED_DATETIME" TIMESTAMP (6) NOT NULL ENABLE, 	"LAST_MODIFIED_BY" VARCHAR2(20), 	"LAST_MODIFIED_DATE_TIME" TIMESTAMP (6), 	"CREATED_BY" VARCHAR2(20) NOT NULL ENABLE, 	"NUMBER_ROWS" NUMBER, 	"TYPE" VARCHAR2(20), 	"LOGICAL_TABLE_NAME" VARCHAR2(255),
 	"VALID" VARCHAR2(1), 	"ACTUAL_TABLE_NAME" VARCHAR2(100), 	"TABLE_REF_ID" VARCHAR2(255), 	 CONSTRAINT "XPKSYSTEM_TABLE_METADATA" PRIMARY KEY ("SYSTEM_ID", "SYSTEM_ENV_NAME", "TABLE_NAME") ENABLE, 	 CONSTRAINT "R_13" FOREIGN KEY ("SYSTEM_ID", "SYSTEM_ENV_NAME")
	  REFERENCES  "SYS_CON_ENVIRONMENTS" ("SYSTEM_ID", "SYSTEM_ENVIRONMENT_NAME") ON DELETE CASCADE ENABLE    )';
   END IF;
END;
/
DECLARE
   TABLECHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO TABLECHECKERFLAG FROM ALL_TABLES WHERE OWNER = sys_context( 'userenv', 'current_schema' ) AND TABLE_NAME = UPPER('SYSTEM_TABLE_COLUMNS_METADATA');
   IF TABLECHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'CREATE TABLE  "SYSTEM_TABLE_COLUMNS_METADATA"    (	"TABLE_NAME" VARCHAR2(75) NOT NULL ENABLE, 	"COLUMN_NAME" VARCHAR2(255) NOT NULL ENABLE,
 	"COL_DATATYPE" VARCHAR2(50), 	"COL_LENGTH" VARCHAR2(20), 	"COL_PRECISION" VARCHAR2(20), 	"COL_DB_DEFAULT_VALUE" VARCHAR2(50), 	"COL_ETL_DEFAULT_VALUE" VARCHAR2(50), 	"COL_IDENTITY_FLAG" VARCHAR2(1), 	"SYSTEM_ID" NUMBER NOT NULL ENABLE, 	"SYSTEM_ENV_NAME" VARCHAR2(50) NOT NULL ENABLE, 	"COL_DEF" VARCHAR2(4000),
 	"CREATED_DATETIME" TIMESTAMP (6) NOT NULL ENABLE, 	"LAST_MODIFIED_BY" VARCHAR2(20), 	"LAST_MODIFIED_DATE_TIME" TIMESTAMP (6), 	"CREATED_BY" VARCHAR2(20) NOT NULL ENABLE, 	"COL_NULLABLE_FLAG" VARCHAR2(1), 	"MIN_VALUE" VARCHAR2(20), 	"MAX_VALUE" VARCHAR2(20), 	"PERCENT_NULL_VALUE" VARCHAR2(20), 	"COL_SCALE" VARCHAR2(255),
	"PRIMARY_KEY_FLAG" VARCHAR2(1), 	"NATURAL_KEY_FLAG" VARCHAR2(1), 	"FOREIGN_KEY_FLAG" VARCHAR2(1), 	"FK_TABLE_NAME" VARCHAR2(50), 	"FK_COLUMN_NAME" VARCHAR2(255), 	"COL_DATA_DOMAIN" VARCHAR2(50), 	"LOGICAL_COLUMN_NAME" VARCHAR2(255), 	"SDI_FLAG" VARCHAR2(1), 	"SDI_DESCRIPTION" VARCHAR2(4000), 	"VALID" VARCHAR2(1),
 	"INSERT_ORDER" NUMBER, 	"COLUMN_COMMENTS" VARCHAR2(4000), 	"USER_DEFINATION1" VARCHAR2(4000), 	"USER_DEFINATION2" VARCHAR2(4000), 	"USER_DEFINATION3" VARCHAR2(4000), 	"USER_DEFINATION4" VARCHAR2(4000), 	"USER_DEFINATION5" VARCHAR2(4000), 	"COLUMN_REF_ID" VARCHAR2(255), 	 CONSTRAINT "XPKSYS_TAB_COL_METADATA" PRIMARY KEY ("SYSTEM_ID", "SYSTEM_ENV_NAME", "TABLE_NAME", "COLUMN_NAME") ENABLE, 	 CONSTRAINT "R_14" FOREIGN KEY ("SYSTEM_ID", "SYSTEM_ENV_NAME", "TABLE_NAME")
	  REFERENCES  "SYSTEM_TABLE_METADATA" ("SYSTEM_ID", "SYSTEM_ENV_NAME", "TABLE_NAME") ON DELETE CASCADE ENABLE    )';
   END IF;
END;
/
DECLARE
   TABLECHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO TABLECHECKERFLAG FROM ALL_TABLES WHERE OWNER = sys_context( 'userenv', 'current_schema' ) AND TABLE_NAME = UPPER('TRANSFORMATIONS');
   IF TABLECHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'CREATE TABLE  "TRANSFORMATIONS"    (	"TRANSF_NAME" VARCHAR2(50) NOT NULL ENABLE, 	"PSUEDO_CODE" VARCHAR2(4000), 	"TRANSF_USE_DESCR" VARCHAR2(4000),
	"CREATED_DATETIME" TIMESTAMP (6) NOT NULL ENABLE, 	"LAST_MODIFIED_BY" VARCHAR2(20), 	"LAST_MODIFIED_DATE_TIME" TIMESTAMP (6), 	"CREATED_BY" VARCHAR2(20) NOT NULL ENABLE, 	 CONSTRAINT "XPKTRANSFORMATIONS" PRIMARY KEY ("TRANSF_NAME") ENABLE    )';
   END IF;
END;
/
DECLARE
   TABLECHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO TABLECHECKERFLAG FROM ALL_TABLES WHERE OWNER = sys_context( 'userenv', 'current_schema' ) AND TABLE_NAME = UPPER('TRANSFORMATIONS_HISTORY');
   IF TABLECHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'CREATE TABLE  "TRANSFORMATIONS_HISTORY"    (	"TRANSF_NAME" VARCHAR2(50), 	"PSUEDO_CODE" VARCHAR2(4000), 	"TRANSF_USE_DESCR" VARCHAR2(4000), 	"CREATED_DATETIME" TIMESTAMP (6), 	"LAST_MODIFIED_BY" VARCHAR2(20), 	"LAST_MODIFIED_DATE_TIME" TIMESTAMP (6), 	"CREATED_BY" VARCHAR2(20)    )';
   END IF;
END;
/
DECLARE
   TABLECHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO TABLECHECKERFLAG FROM ALL_TABLES WHERE OWNER = sys_context( 'userenv', 'current_schema' ) AND TABLE_NAME = UPPER('USER_PREFERENCES');
   IF TABLECHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'CREATE TABLE  "USER_PREFERENCES"    (	"USER_ID" VARCHAR2(50) NOT NULL ENABLE, 	"COLUMN_PREFERENCES" VARCHAR2(4000) NOT NULL ENABLE    )';
   END IF;
END;
/
DECLARE
   SEQUENCECHECKERFLAG INT;
BEGIN
    SELECT COUNT(*) INTO SEQUENCECHECKERFLAG FROM ALL_SEQUENCES WHERE SEQUENCE_OWNER = sys_context('userenv', 'current_schema') AND SEQUENCE_NAME = UPPER('APPDEFAULTID_SEQ');
   IF SEQUENCECHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'CREATE SEQUENCE   "APPDEFAULTID_SEQ"  MINVALUE 1 MAXVALUE 999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE';
   END IF;
END;
/

DECLARE
  TRIGGERCHECKERFLAG INT;
BEGIN
  SELECT COUNT(*)
  INTO TRIGGERCHECKERFLAG
  FROM all_triggers
  WHERE OWNER = sys_context('userenv', 'current_schema') AND trigger_name = UPPER('APPDEFAULT_INSERT');
  IF TRIGGERCHECKERFLAG = 0 THEN
    EXECUTE IMMEDIATE 'CREATE OR REPLACE TRIGGER  "APPDEFAULT_INSERT" BEFORE INSERT ON APP_DEFAULTS FOR EACH ROW BEGIN SELECT APPDEFAULTID_SEQ.NEXTVAL INTO :new.APPDEFAULTID FROM DUAL; END;';
    EXECUTE IMMEDIATE 'ALTER TRIGGER  "APPDEFAULT_INSERT" ENABLE';
  END IF;
END;
/
DECLARE
   TABLECHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO TABLECHECKERFLAG FROM all_VIEWS WHERE OWNER = sys_context('userenv', 'current_schema') AND VIEW_NAME = UPPER('MAPPINGASSIGNEDBYUSER');
   IF TABLECHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'CREATE OR REPLACE FORCE VIEW  "MAPPINGASSIGNEDBYUSER" ("MAPPINGSASSIGNED", "USER_ID", "MAPPINGSTATUS") AS
                         SELECT COUNT(MAPPING_STATUS.MAP_ID) AS MAPPINGSASSIGNED,
                         USER_ID, MAPPING_DETAILS.STATUS AS MAPPINGSTATUS
                         FROM   MAPPING_STATUS LEFT JOIN MAPPING_DETAILS
                         ON MAPPING_DETAILS.MAP_ID = MAPPING_STATUS.MAP_ID
                         GROUP  BY USER_ID, MAPPING_DETAILS.STATUS';
   END IF;
END;
/
DECLARE
   TABLECHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO TABLECHECKERFLAG FROM all_VIEWS WHERE OWNER = sys_context('userenv', 'current_schema') AND VIEW_NAME = UPPER('MAPPINGSASSIGNEDBYPROJECT');
   IF TABLECHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'CREATE OR REPLACE FORCE VIEW  "MAPPINGSASSIGNEDBYPROJECT" ("MAPPINGSASSIGNED", "PROJECT_ID", "USER_ID", "MAPPINGSTATUS") AS
                         SELECT COUNT(MAPPING_DETAILS.MAP_ID) AS MAPPINGSASSIGNED,
                         MAPPING_DETAILS.PROJECT_ID,
                         PROJECT_RESOURCES.USER_ID,
                         MAPPING_DETAILS.STATUS AS MAPPINGSTATUS
                         FROM   MAPPING_DETAILS
                         LEFT OUTER JOIN PROJECT_RESOURCES
                         ON PROJECT_RESOURCES.PROJ_ID = MAPPING_DETAILS.PROJECT_ID
                         GROUP  BY MAPPING_DETAILS.PROJECT_ID,
                         PROJECT_RESOURCES.USER_ID, MAPPING_DETAILS.STATUS';
   END IF;
END;
/
DECLARE
   TABLECHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO TABLECHECKERFLAG FROM all_VIEWS WHERE OWNER = sys_context('userenv', 'current_schema') AND VIEW_NAME = UPPER('MAPPINGSASSIGNEDBYUSER');
   IF TABLECHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'CREATE OR REPLACE FORCE VIEW  "MAPPINGSASSIGNEDBYUSER" ("MAPPINGSASSIGNED", "USER_ID", "MAPPINGSTATUS") AS
                         SELECT COUNT(MAPPING_STATUS.MAP_ID) AS MAPPINGSASSIGNED,
                         USER_ID, MAPPING_DETAILS.STATUS AS MAPPINGSTATUS
                         FROM   MAPPING_STATUS LEFT JOIN MAPPING_DETAILS
                         ON MAPPING_DETAILS.MAP_ID = MAPPING_STATUS.MAP_ID
                         GROUP  BY USER_ID, MAPPING_DETAILS.STATUS';
   END IF;
END;
/
DECLARE
   TABLECHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO TABLECHECKERFLAG FROM all_VIEWS WHERE OWNER = sys_context('userenv', 'current_schema') AND VIEW_NAME = UPPER('MAPPINGTESTSTATUS');
   IF TABLECHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'CREATE OR REPLACE FORCE VIEW  "MAPPINGTESTSTATUS" ("TESTSTATUS", "MAP_ID", "MAP_NAME", "MAP_SPEC_VERSION", "TESTING_NOTES", "PROJECT_ID", "PROJECTNAME", "PROJECTDESCRIPTION", "MAPPINGSTATUS") AS
                        SELECT CASE
                        WHEN TEST_DISPOSITION = ''U'' THEN ''UNASSIGNED''
                        ELSE CASE
                        WHEN TEST_DISPOSITION = ''P'' THEN ''PASSED''
                        ELSE CASE
                        WHEN TEST_DISPOSITION = ''F'' THEN ''FAILED''
                        ELSE CASE
                        WHEN TEST_DISPOSITION = ''N'' THEN ''NEEDS ANALYSIS''
                        ELSE ''''
                        END
                        END
                        END
                        END   AS TESTSTATUS,
                        MAP_ID,
                        MAP_NAME,
                        MAP_SPEC_VERSION,
                        TESTING_NOTES,
                        PROJECT_ID,
                        PROJECT.PROJ_NAME  AS PROJECTNAME,
                        PROJECT.PROJ_DESCR AS PROJECTDESCRIPTION,
                        STATUS AS MAPPINGSTATUS
                        FROM   MAPPING_DETAILS
                        LEFT JOIN PROJECT
                        ON PROJECT.PROJ_ID = MAPPING_DETAILS.PROJECT_ID';
   END IF;
END;
/
DECLARE
   TABLECHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO TABLECHECKERFLAG FROM all_VIEWS WHERE OWNER = sys_context('userenv', 'current_schema') AND VIEW_NAME = UPPER('SYSTEMDATADICTIONARYSUMMARY');
   IF TABLECHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'CREATE OR REPLACE FORCE VIEW  "SYSTEMDATADICTIONARYSUMMARY" ("SYSTEM_ID", "SYSTEM_ENV_NAME", "TABLECOUNT", "COLUMNCOUNT") AS
                         SELECT SYSTEM_TABLE_COLUMNS_METADATA.SYSTEM_ID,
                         SYSTEM_TABLE_METADATA.SYSTEM_ENV_NAME,
                         COUNT(DISTINCT SYSTEM_TABLE_COLUMNS_METADATA.TABLE_NAME) TABLECOUNT,
                         COUNT(SYSTEM_TABLE_COLUMNS_METADATA.COLUMN_NAME) COLUMNCOUNT
                         FROM   SYSTEM_TABLE_COLUMNS_METADATA
                         LEFT JOIN SYSTEM_TABLE_METADATA
                         ON SYSTEM_TABLE_COLUMNS_METADATA.SYSTEM_ID =
                         SYSTEM_TABLE_METADATA.SYSTEM_ID
                         AND SYSTEM_TABLE_COLUMNS_METADATA.TABLE_NAME =
                         SYSTEM_TABLE_METADATA.TABLE_NAME
                         AND SYSTEM_TABLE_COLUMNS_METADATA.SYSTEM_ENV_NAME =
                         SYSTEM_TABLE_METADATA.SYSTEM_ENV_NAME
                         GROUP  BY SYSTEM_TABLE_COLUMNS_METADATA.SYSTEM_ID,
                         SYSTEM_TABLE_METADATA.SYSTEM_ENV_NAME';
   END IF;
END;
/
DECLARE
   TABLECHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO TABLECHECKERFLAG FROM all_VIEWS WHERE OWNER = sys_context('userenv', 'current_schema') AND VIEW_NAME = UPPER('TESTERMAPPINGS');
   IF TABLECHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'CREATE OR REPLACE FORCE VIEW  "TESTERMAPPINGS" ("MAP_ID", "PROJ_ID", "USER_ID", "RESPONSIABLES", "STATUS", "LOGIN_USER", "ASSIGNMENT_CHANGES") AS
                         SELECT "MAP_ID","PROJ_ID","USER_ID","RESPONSIABLES","STATUS","LOGIN_USER","ASSIGNMENT_CHANGES"
                         FROM   MAPPING_STATUS
                         WHERE  TO_CHAR(RESPONSIABLES) = ''MAPPING TESTER''';
   END IF;
END;
/
DECLARE
   TABLECHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO TABLECHECKERFLAG FROM all_VIEWS WHERE OWNER = sys_context('userenv', 'current_schema') AND VIEW_NAME = UPPER('TOTALMAPPINGSASSIGNED');
   IF TABLECHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'CREATE OR REPLACE FORCE VIEW  "TOTALMAPPINGSASSIGNED" ("MAPPINGSASSIGNED", "USER_ID", "MAPPINGSTATUS") AS
                         SELECT SUM(MAPPINGSASSIGNED) MAPPINGSASSIGNED,
                         USER_ID, MAPPINGSTATUS FROM   MAPPINGSASSIGNEDBYPROJECT
                         GROUP  BY USER_ID, MAPPINGSTATUS';
   END IF;
END;
/
DECLARE
   TABLECHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO TABLECHECKERFLAG FROM all_VIEWS WHERE OWNER = sys_context('userenv', 'current_schema') AND VIEW_NAME = UPPER('TOTALMAPPINGSBYPROJECT');
   IF TABLECHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'CREATE OR REPLACE FORCE VIEW  "TOTALMAPPINGSBYPROJECT" ("PROJECTID", "TOTALMAPPINGS", "PROJECTNAME", "MAPPINGSTATUS") AS
                         SELECT PROJECT.PROJ_ID PROJECTID,
                         COUNT(MAP_ID) TOTALMAPPINGS,
                         PROJ_NAME PROJECTNAME,
                         STATUS AS MAPPINGSTATUS
                         FROM MAPPING_DETAILS
                         LEFT JOIN PROJECT
                         ON PROJECT.PROJ_ID = MAPPING_DETAILS.PROJECT_ID
                         GROUP  BY PROJECT.PROJ_ID, PROJ_NAME, STATUS';
   END IF;
END;
/
DECLARE
   TABLECHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO TABLECHECKERFLAG FROM all_VIEWS WHERE OWNER = sys_context('userenv', 'current_schema') AND VIEW_NAME = UPPER('VALID_SYS_TBL_COL_METADATA');
   IF TABLECHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'CREATE OR REPLACE VIEW  "VALID_SYS_TBL_COL_METADATA" ("TABLE_NAME",
                         "COLUMN_NAME", "COL_DATATYPE", "COL_LENGTH", "COL_PRECISION",
                         "COL_DB_DEFAULT_VALUE", "COL_ETL_DEFAULT_VALUE", "COL_IDENTITY_FLAG",
                         "SYSTEM_ID", "SYSTEM_ENV_NAME", "COL_DEF", "COLUMN_COMMENTS", "CREATED_DATETIME",
                         "LAST_MODIFIED_BY", "LAST_MODIFIED_DATE_TIME", "CREATED_BY",
                         "COL_NULLABLE_FLAG", "MIN_VALUE", "MAX_VALUE", "PERCENT_NULL_VALUE",
                         "COL_SCALE", "PRIMARY_KEY_FLAG", "NATURAL_KEY_FLAG", "FOREIGN_KEY_FLAG",
                         "FK_TABLE_NAME", "FK_COLUMN_NAME", "COL_DATA_DOMAIN", "LOGICAL_COLUMN_NAME",
                         "SDI_FLAG", "SDI_DESCRIPTION",  "USER_DEFINATION1","USER_DEFINATION2", "USER_DEFINATION3","USER_DEFINATION4","USER_DEFINATION5", "VALID", "INSERT_ORDER") AS SELECT
                         TABLE_NAME, COLUMN_NAME, COL_DATATYPE,
                         COL_LENGTH, COL_PRECISION,  COL_DB_DEFAULT_VALUE,
                         COL_ETL_DEFAULT_VALUE, COL_IDENTITY_FLAG, SYSTEM_ID,
                         SYSTEM_ENV_NAME, COL_DEF, COLUMN_COMMENTS, CREATED_DATETIME,
                         LAST_MODIFIED_BY, LAST_MODIFIED_DATE_TIME, CREATED_BY,
                         COL_NULLABLE_FLAG, MIN_VALUE, MAX_VALUE,
                         PERCENT_NULL_VALUE,  COL_SCALE, PRIMARY_KEY_FLAG,
                         NATURAL_KEY_FLAG, FOREIGN_KEY_FLAG, FK_TABLE_NAME,
                         FK_COLUMN_NAME, COL_DATA_DOMAIN, LOGICAL_COLUMN_NAME,
                         SDI_FLAG, SDI_DESCRIPTION,  USER_DEFINATION1,
                         USER_DEFINATION2, USER_DEFINATION3, USER_DEFINATION4,
                         USER_DEFINATION5,  VALID, INSERT_ORDER FROM
                         SYSTEM_TABLE_COLUMNS_METADATA WHERE
                         VALID = 1 OR VALID IS NULL';
   END IF;
END;
/
DECLARE
   TABLECHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO TABLECHECKERFLAG FROM all_VIEWS WHERE OWNER = sys_context('userenv', 'current_schema') AND VIEW_NAME = UPPER('V_SYS_TBL_COL_MTDT_SIMPLE');
   IF TABLECHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'CREATE OR REPLACE FORCE VIEW  "V_SYS_TBL_COL_MTDT_SIMPLE" ("TABLE_NAME", "COLUMN_NAME", "COL_DATATYPE", "SYSTEM_ENV_NAME") AS
                         SELECT TABLE_NAME,  COLUMN_NAME, COL_DATATYPE, SYSTEM_ENV_NAME
                         FROM   SYSTEM_TABLE_COLUMNS_METADATA
                         WHERE  VALID = 1 OR VALID IS NULL';
   END IF;
END;
/
DECLARE
   TABLECHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO TABLECHECKERFLAG FROM "SECURITY_ROLES";
   IF TABLECHECKERFLAG = 0 THEN
INSERT INTO SECURITY_ROLES( ROLE_NAME, ROLE_DESCR, ROLE_ID, CREATED_BY, CREATED_DATETIME, LAST_MODIFIED_DATE_TIME, LAST_MODIFIED_BY)
(SELECT 'Administrator', 'Administers the mapping manager module and gains administration access to all modules' ,51, 'System', SYSDATE, SYSDATE, 'System' FROM DUAL
UNION
SELECT 'public', 'Gains the read only access to any part/module of mapping manager application' , 52, 'System', SYSDATE, SYSDATE, 'System' FROM DUAL
UNION
SELECT 'Project Admin', 'Administers Project Manager module to create new projects, assign users to projects and create and manage project documents' , 53, 'System', SYSDATE, SYSDATE, 'System' FROM DUAL
UNION
SELECT 'System Admin', 'Administers System Manager module to define new systems/environments and import and manage metadata for source and target systems' , 54, 'System', SYSDATE, SYSDATE, 'System' FROM DUAL
UNION
SELECT 'Mapping Admin', 'Administers Mapping Manager module to define, edit or delete any mapping in any project irrespective to project assignment', 55, 'System', SYSDATE, SYSDATE, 'System' FROM DUAL
UNION
SELECT 'Power User', 'Gains all roles defined for Project Admin, System Admin, Transformation Admin and Mapping Admin', 56, 'System', SYSDATE, SYSDATE, 'System' FROM DUAL
UNION
SELECT 'Transformation Admin', 'Administers all reusable transformations', 57, 'System', SYSDATE, SYSDATE, 'System' FROM DUAL
UNION
SELECT 'ETL Developer', 'Create, edit or delete any mapping defined in a project to which he is assigned (Role is currently identical to Mapping Designer role). This role is a place holder for further categorization of roles and responsibilities in future versions).', 58, 'System', SYSDATE, SYSDATE, 'System' FROM DUAL
UNION
SELECT 'Mapping Designer', 'Create, edit or delete any mapping defined in a project to which he is assigned (Role is currently identical to ETL Developer)', 59, 'System', SYSDATE, SYSDATE, 'System' FROM DUAL
UNION
SELECT 'Tester', 'Administers the testing notes tab of any mapping including archived mappings in a project to which he is assigned', 60, 'System', SYSDATE, SYSDATE, 'System' FROM DUAL
);
   END IF;
END;

/
DECLARE
   TABLECHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO TABLECHECKERFLAG FROM "USERS";
   IF TABLECHECKERFLAG = 0 THEN
INSERT INTO USERS (USER_ID, USER_FULL_NAME, USER_EMAIL_ADDR, USER_TEL, USER_MOBILE, USER_ALTERNATE_TEL, DEFAULT_ROLE, USER_PASSWORD, USER_COMPANY_TITLE, USER_COMPANY, USER_REPORTS_TO_MGR_NAME, CREATED_BY, CREATED_DATETIME, LAST_MODIFIED_DATE_TIME, LAST_MODIFIED_BY, USER_READ_ONLY)
(SELECT 'Administrator', 'Administrator - Default System User', 'abc@abc.com', 9999999999, 9999999999, 9999999999, 'Admin', 'B2hvbDhGKmqGWb+NooC1Dg==', 'Administrator', 'Analytix Data Services', NULL, 'System', SYSDATE, SYSDATE, 'System', 'N' FROM DUAL
UNION
SELECT 'public', 'public - Default System User', 'abc@abc.com', 9999999999, 9999999999, 9999999999, 'public', 'AyQ2KLpY37k=', 'Guest User', 'Analytix Data Services', NULL, 'System', SYSDATE, SYSDATE, 'System', 'Y' FROM DUAL
);
   END IF;
END;

/
DECLARE
   TABLECHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO TABLECHECKERFLAG FROM "USER_ASSIGNED_ROLES";
   IF TABLECHECKERFLAG = 0 THEN
INSERT INTO USER_ASSIGNED_ROLES (USER_ID, ROLE_ID)
(SELECT 'Administrator', 51 FROM DUAL
UNION
SELECT 'public', 52 FROM DUAL
);
   END IF;
END;

/
DECLARE
   TABLECHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO TABLECHECKERFLAG FROM "SEQUENCE_KEY";
   IF TABLECHECKERFLAG = 0 THEN
INSERT INTO SEQUENCE_KEY (SEQUENCE_ID) VALUES (100);
   END IF;
END;
/
-- DECLARE
--    TABLECHECKERFLAG INT;
-- BEGIN
--    SELECT COUNT(*) INTO TABLECHECKERFLAG FROM "TRANSFORMATIONS";
--    IF TABLECHECKERFLAG = 0 THEN
-- INSERT INTO TRANSFORMATIONS (TRANSF_NAME, PSUEDO_CODE, TRANSF_USE_DESCR, CREATED_DATETIME, LAST_MODIFIED_BY, LAST_MODIFIED_DATE_TIME, CREATED_BY)
-- 	(SELECT  '1-DataGov(HighDate:12/31/9999)', 'To_date(mm/dd/yyyy,12/31/9999)', 'DataGovernance rule - use on all projects', CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
-- 	FROM DUAL UNION
-- 	SELECT  '2-DataGov(LowDate01/01/0001)', ' To_date(mm/dd/yyyy, 01/01/0001)', ' DataGovernance rule - use on all projects',CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
-- 	FROM DUAL UNION
-- 	SELECT  '3-DataGov(AverageChurn)', ' Count(active customers)/(Count of Cancelled Customers for current month)', ' DataGovernance rule - use on all projects where financial reports are viewed and Churn KPIs are used.',CURRENT_TIMESTAMP, ' Administrator',CURRENT_TIMESTAMP, 'Administrator'
-- 	FROM DUAL UNION
-- 	SELECT  'ABORT', ' ABORT', ' ETL Built-In Transformation: Record handling and processing rule for all projects',CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
-- 	FROM DUAL UNION
-- 	SELECT  'ABS', ' ABS', ' ETL Built-In Transformation: Record handling and processing rule for all projects',CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
-- 	FROM DUAL UNION
-- 	SELECT  'ADD_TO_DATE', ' ADD_TO_DATE', ' ETL Built-In Transformation: Record handling and processing rule for all projects',CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
-- 	FROM DUAL UNION
-- 	SELECT  'AES_DECRYPT', ' AES_DECRYPT', ' ETL Built-In Transformation: Record handling and processing rule for all projects',CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
-- 	FROM DUAL UNION
-- 	SELECT  'ASCII', ' ASCII', ' ETL Built-In Transformation: Record handling and processing rule for all projects',CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
-- 	FROM DUAL UNION
-- 	SELECT  'AVG', ' AVG', ' ETL Built in transformation (Aggregation)',CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
-- 	FROM DUAL UNION
-- 	SELECT  'CEIL', ' CEIL', ' ETL Built-In Transformation: Record handling and processing rule for all projects',CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
-- 	FROM DUAL UNION
-- 	SELECT  'CHOOSE', ' CHOOSE', ' ETL Built-In Transformation: Record handling and processing rule for all projects',CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
-- 	FROM DUAL UNION
-- 	SELECT  'CHR', ' CHR', ' ETL Built-In Transformation: Record handling and processing rule for all projects',CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
-- 	FROM DUAL UNION
-- 	SELECT  'CHRCODE', ' CHRCODE', ' ETL Built-In Transformation: Record handling and processing rule for all projects',CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
-- 	FROM DUAL UNION
-- 	SELECT  'COMPRESS', ' COMPRESS', ' ETL Built-In Transformation: Record handling and processing rule for all projects',CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
-- 	FROM DUAL UNION
-- 	SELECT  'CONCAT', ' CONCAT', ' ETL Built-In Transformation: Record handling and processing rule for all projects',CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
-- 	FROM DUAL UNION
-- 	SELECT  'CONVERT_BASE', ' CONVERT_BASE', ' ETL Built-In Transformation: Record handling and processing rule for all projects',CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
-- 	FROM DUAL UNION
-- 	SELECT  'COS', ' COS', ' ETL Built-In Transformation: Record handling and processing rule for all projects',CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
-- 	FROM DUAL UNION
-- 	SELECT  'COSH', ' COSH', ' ETL Built-In Transformation: Record handling and processing rule for all projects',CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
-- 	FROM DUAL UNION
-- 	SELECT  'COUNT', ' COUNT', ' ETL Built in transformation (Aggregation)',CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
-- 	FROM DUAL UNION
-- 	SELECT  'CRC32', ' CRC32', ' ETL Built-In Transformation: Record handling and processing rule for all projects',CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
-- 	FROM DUAL UNION
-- 	SELECT  'CUME', ' CUME', ' ETL Built-In Transformation: Record handling and processing rule for all projects',CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
-- 	FROM DUAL UNION
-- 	SELECT  'DATE_COMPARE', ' DATE_COMPARE', ' ETL Built-In Transformation: Record handling and processing rule for all projects',CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
-- 	FROM DUAL UNION
-- 	SELECT  'DATE_DIFF', ' DATE_DIFF', ' ETL Built-In Transformation: Record handling and processing rule for all projects',CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
-- 	FROM DUAL UNION
-- 	SELECT  'DEC_BASE64', ' DEC_BASE64', ' ETL Built-In Transformation: Record handling and processing rule for all projects',CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
-- 	FROM DUAL UNION
-- 	SELECT  'DECODE', ' DECODE', ' ETL Built-In Transformation: Record handling and processing rule for all projects',CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
-- 	FROM DUAL UNION
-- 	SELECT  'DECOMPRESS', ' DECOMPRESS', ' ETL Built-In Transformation: Record handling and processing rule for all projects',CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
-- 	FROM DUAL UNION
-- 	SELECT  'ENC_BASE64', ' ENC_BASE64', ' ETL Built-In Transformation: Record handling and processing rule for all projects',CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
-- 	FROM DUAL UNION
-- 	SELECT  'ERROR', ' ERROR', ' ETL Built-In Transformation: Record handling and processing rule for all projects',CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
-- 	FROM DUAL UNION
-- 	SELECT  'EXP', ' EXP', ' ETL Built-In Transformation: Record handling and processing rule for all projects',CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
-- 	FROM DUAL UNION
-- 	SELECT  'FIRST', ' FIRST', ' ETL Built in transformation (Aggregation)',CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
-- 	FROM DUAL UNION
-- 	SELECT  'FLOOR', ' FLOOR', ' ETL Built-In Transformation: Record handling and processing rule for all projects',CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
-- 	FROM DUAL UNION
-- 	SELECT  'FV', ' FV', ' ETL Built-In Transformation: Record handling and processing rule for all projects',CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
-- 	FROM DUAL UNION
-- 	SELECT  'GET_DATE_PART', ' GET_DATE_PART', ' ETL Built-In Transformation: Record handling and processing rule for all projects',CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
-- 	FROM DUAL UNION
-- 	SELECT  'GREATEST', ' GREATEST', ' ETL Built-In Transformation: Record handling and processing rule for all projects',CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
-- 	FROM DUAL UNION
-- 	SELECT  'IIF', ' IIF', ' ETL Built-In Transformation: Record handling and processing rule for all projects',CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
-- 	FROM DUAL UNION
-- 	SELECT  'IN', ' IN', ' ETL Built-In Transformation: Record handling and processing rule for all projects',CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
-- 	FROM DUAL UNION
-- 	SELECT  'INDEXOF', ' INDEXOF', ' ETL Built-In Transformation: Record handling and processing rule for all projects',CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
-- 	FROM DUAL UNION
-- 	SELECT  'INITCAP', ' INITCAP', ' ETL Built-In Transformation: Record handling and processing rule for all projects',CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
-- 	FROM DUAL UNION
-- 	SELECT  'INSTR', ' INSTR', ' ETL Built-In Transformation: Record handling and processing rule for all projects',CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
-- 	FROM DUAL UNION
-- 	SELECT  'IS_DATE', ' IS_DATE', ' ETL Built-In Transformation: Record handling and processing rule for all projects',CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
-- 	FROM DUAL UNION
-- 	SELECT  'IS_NUMBER', ' IS_NUMBER', ' ETL Built-In Transformation: Record handling and processing rule for all projects',CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
-- 	FROM DUAL UNION
-- 	SELECT  'IS_SPACES', ' IS_SPACES', ' ETL Built-In Transformation: Record handling and processing rule for all projects',CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
-- 	FROM DUAL UNION
-- 	SELECT  'ISNULL', ' ISNULL', ' ETL Built-In Transformation: Record handling and processing rule for all projects',CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
-- 	FROM DUAL UNION
-- 	SELECT  'LAST', ' LAST', ' ETL Built in transformation (Aggregation)',CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
-- 	FROM DUAL UNION
-- 	SELECT  'LAST_DAY', ' LAST_DAY', ' ETL Built-In Transformation: Record handling and processing rule for all projects',CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
-- 	FROM DUAL UNION
-- 	SELECT  'LEAST', ' LEAST', ' ETL Built-In Transformation: Record handling and processing rule for all projects',CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
-- 	FROM DUAL UNION
-- 	SELECT  'LENGTH', ' LENGTH', ' ETL Built-In Transformation: Record handling and processing rule for all projects',CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
-- 	FROM DUAL UNION
-- 	SELECT  'LN', ' LN', ' ETL Built-In Transformation: Record handling and processing rule for all projects',CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
-- 	FROM DUAL UNION
-- 	SELECT  'LOG', ' LOG', ' ETL Built-In Transformation: Record handling and processing rule for all projects',CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
-- 	FROM DUAL UNION
-- 	SELECT  'LOOKUP', ' LOOKUP', ' ETL Built-In Transformation: Record handling and processing rule for all projects',CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
-- 	FROM DUAL UNION
-- 	SELECT  'LOWER', ' LOWER', ' ETL Built-In Transformation: Record handling and processing rule for all projects',CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
-- 	FROM DUAL UNION
-- 	SELECT  'LPAD', ' LPAD', ' ETL Built-In Transformation: Record handling and processing rule for all projects',CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
-- 	FROM DUAL UNION
-- 	SELECT  'LTRIM', ' LTRIM', ' ETL Built-In Transformation: Record handling and processing rule for all projects',CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
-- 	FROM DUAL UNION
-- 	SELECT  'MAKE_DATE_TIME', ' MAKE_DATE_TIME', ' ETL Built-In Transformation: Record handling and processing rule for all projects',CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
-- 	FROM DUAL UNION
-- 	SELECT  'MAX', ' MAX', ' ETL Built in transformation (Aggregation)',CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
-- 	FROM DUAL UNION
-- 	SELECT  'MD5', ' MD5', ' ETL Built-In Transformation: Record handling and processing rule for all projects',CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
-- 	FROM DUAL UNION
-- 	SELECT  'MEDIAN', ' MEDIAN', ' ETL Built in transformation (Aggregation)',CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
-- 	FROM DUAL UNION
-- 	SELECT  'METAPHONE', ' METAPHONE', ' ETL Built-In Transformation: Record handling and processing rule for all projects',CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
-- 	FROM DUAL UNION
-- 	SELECT  'MIN', ' MIN', ' ETL Built in transformation (Aggregation)',CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
-- 	FROM DUAL UNION
-- 	SELECT  'MOD', ' MOD', ' ETL Built-In Transformation: Record handling and processing rule for all projects',CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
-- 	FROM DUAL UNION
-- 	SELECT  'MOVINGAVG', ' MOVINGAVG', ' ETL Built-In Transformation: Record handling and processing rule for all projects',CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
-- 	FROM DUAL UNION
-- 	SELECT  'MOVINGSUM', ' MOVINGSUM', ' ETL Built-In Transformation: Record handling and processing rule for all projects',CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
-- 	FROM DUAL UNION
-- 	SELECT  'NPER', ' NPER', ' ETL Built-In Transformation: Record handling and processing rule for all projects',CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
-- 	FROM DUAL UNION
-- 	SELECT  'PERCENTILE', ' PERCENTILE', ' ETL Built in transformation (Aggregation)',CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
-- 	FROM DUAL UNION
-- 	SELECT  'PMT', ' PMT', ' ETL Built-In Transformation: Record handling and processing rule for all projects',CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
-- 	FROM DUAL UNION
-- 	SELECT  'POWER', ' POWER', ' ETL Built-In Transformation: Record handling and processing rule for all projects',CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
-- 	FROM DUAL UNION
-- 	SELECT  'PV', ' PV', ' ETL Built-In Transformation: Record handling and processing rule for all projects',CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
-- 	FROM DUAL UNION
-- 	SELECT  'RAND', ' RAND', ' ETL Built-In Transformation: Record handling and processing rule for all projects',CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
-- 	FROM DUAL UNION
-- 	SELECT  'RATE', ' RATE', ' ETL Built-In Transformation: Record handling and processing rule for all projects',CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
-- 	FROM DUAL UNION
-- 	SELECT  'REG_EXTRACT', ' REG_EXTRACT', ' ETL Built-In Transformation: Record handling and processing rule for all projects',CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
-- 	FROM DUAL UNION
-- 	SELECT  'REG_MATCH', ' REG_MATCH', ' ETL Built-In Transformation: Record handling and processing rule for all projects',CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
-- 	FROM DUAL UNION
-- 	SELECT  'REG_REPLACE', ' REG_REPLACE', ' ETL Built-In Transformation: Record handling and processing rule for all projects',CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
-- 	FROM DUAL UNION
-- 	SELECT  'REPLACECHR', ' REPLACECHR', ' ETL Built-In Transformation: Record handling and processing rule for all projects',CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
-- 	FROM DUAL UNION
-- 	SELECT  'REPLACESTR', ' REPLACESTR', ' ETL Built-In Transformation: Record handling and processing rule for all projects',CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
-- 	FROM DUAL UNION
-- 	SELECT  'REVERSE', ' REVERSE', ' ETL Built-In Transformation: Record handling and processing rule for all projects',CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
-- 	FROM DUAL UNION
-- 	SELECT  'ROUND', ' ROUND', ' ETL Built-In Transformation: Record handling and processing rule for all projects',CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
-- 	FROM DUAL UNION
-- 	SELECT  'RPAD', ' RPAD', ' ETL Built-In Transformation: Record handling and processing rule for all projects',CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
-- 	FROM DUAL UNION
-- 	SELECT  'RTRIM', ' RTRIM', ' ETL Built-In Transformation: Record handling and processing rule for all projects',CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
-- 	FROM DUAL UNION
-- 	SELECT  'SET_DATE_PART', ' SET_DATE_PART', ' ETL Built-In Transformation: Record handling and processing rule for all projects',CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
-- 	FROM DUAL UNION
-- 	SELECT  'SETCOUNTVARIABLE', ' SETCOUNTVARIABLE', ' ETL Built-In Transformation: Record handling and processing rule for all projects',CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
-- 	FROM DUAL UNION
-- 	SELECT  'SETMAXVARIABLE', ' SETMAXVARIABLE', ' ETL Built-In Transformation: Record handling and processing rule for all projects',CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
-- 	FROM DUAL UNION
-- 	SELECT  'SETMINVARIABLE', ' SETMINVARIABLE', ' ETL Built-In Transformation: Record handling and processing rule for all projects',CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
-- 	FROM DUAL UNION
-- 	SELECT  'SETVARIABLE', ' SETVARIABLE', ' ETL Built-In Transformation: Record handling and processing rule for all projects',CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
-- 	FROM DUAL UNION
-- 	SELECT  'SIGN', ' SIGN', ' ETL Built-In Transformation: Record handling and processing rule for all projects',CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
-- 	FROM DUAL UNION
-- 	SELECT  'SIN', ' SIN', ' ETL Built-In Transformation: Record handling and processing rule for all projects',CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
-- 	FROM DUAL UNION
-- 	SELECT  'SINH', ' SINH', ' ETL Built-In Transformation: Record handling and processing rule for all projects',CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
-- 	FROM DUAL UNION
-- 	SELECT  'SOUNDEX', ' SOUNDEX', ' ETL Built-In Transformation: Record handling and processing rule for all projects',CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
-- 	FROM DUAL UNION
-- 	SELECT  'SQRT', ' SQRT', ' ETL Built-In Transformation: Record handling and processing rule for all projects',CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
-- 	FROM DUAL UNION
-- 	SELECT  'STDDEV', ' STDDEV', ' ETL Built in transformation (Aggregation)',CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
-- 	FROM DUAL UNION
-- 	SELECT  'SUBSTR', ' SUBSTR', ' Record handling and processing rule for all projects',CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
-- 	FROM DUAL UNION
-- 	SELECT  'SUM', ' SUM', ' ETL Built in transformation (Aggregation)',CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
-- 	FROM DUAL UNION
-- 	SELECT  'SYSTIMESTAMP', ' SYSTIMESTAMP', ' ETL Built-In Transformation: Record handling and processing rule for all projects',CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
-- 	FROM DUAL UNION
-- 	SELECT  'TAN', ' TAN', ' ETL Built-In Transformation: Record handling and processing rule for all projects',CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
-- 	FROM DUAL UNION
-- 	SELECT  'TANH', ' TANH', ' ETL Built-In Transformation: Record handling and processing rule for all projects',CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
-- 	FROM DUAL UNION
-- 	SELECT  'TO_BIGINT', ' TO_BIGINT', ' ETL Built-In Transformation: Record handling and processing rule for all projects',CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
-- 	FROM DUAL UNION
-- 	SELECT  'TO_CHAR', ' TO_CHAR', ' ETL Built-In Transformation: Record handling and processing rule for all projects',CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
-- 	FROM DUAL UNION
-- 	SELECT  'TO_DATE', ' TO_DATE', ' ETL Built-In Transformation: Record handling and processing rule for all projects',CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
-- 	FROM DUAL UNION
-- 	SELECT  'TO_DECIMAL', ' TO_DECIMAL', ' ETL Built-In Transformation: Record handling and processing rule for all projects',CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
-- 	FROM DUAL UNION
-- 	SELECT  'TO_FLOAT', ' TO_FLOAT', ' ETL Built-In Transformation: Record handling and processing rule for all projects',CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
-- 	FROM DUAL UNION
-- 	SELECT  'TO_INTEGER', ' TO_INTEGER', ' ETL Built-In Transformation: Record handling and processing rule for all projects',CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
-- 	FROM DUAL UNION
-- 	SELECT  'TRUNC', ' TRUNC', ' ETL Built-In Transformation: Record handling and processing rule for all projects',CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
-- 	FROM DUAL UNION
-- 	SELECT  'UPPER', ' UPPER', ' ETL Built-In Transformation: Record handling and processing rule for all projects',CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
-- 	FROM DUAL UNION
-- 	SELECT  'VARIANCE', ' VARIANCE', ' ETL Built in transformation (Aggregation)',CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
--   FROM DUAL
--   );
-- END IF;
-- END;
-- /
DECLARE
   TABLECHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO TABLECHECKERFLAG FROM all_VIEWS WHERE OWNER = sys_context('userenv', 'current_schema') AND VIEW_NAME = UPPER('PROJ_MAP_INTG_STATUS_SUMMARY_V');
   IF TABLECHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'CREATE OR REPLACE FORCE VIEW  "PROJ_MAP_INTG_STATUS_SUMMARY_V" ("PROJECTID", "PROJECTNAME", "TOTALMAPPINGS", "MAPPCOMPLETECOUNT", "MAPPINPROGRESSCOUNT", "MAPPNOTSTARTEDCOUNT", "MAPPONHOLDCOUNT", "MDSGCOMPLETECOUNT", "MDSGINPROGRESSCOUNT", "MDSGNOTSTARTEDCOUNT", "MDSGONHOLDCOUNT", "METLDEVCOMPLETECOUNT", "METLDEVINPROGRESSCOUNT", "METLDEVNOTSTARTEDCOUNT", "METLDEVONHOLDCOUNT", "MTSTRCOMPLETECOUNT", "MTSTRINPROGRESSCOUNT", "MTSTRNOTSTARTEDCOUNT", "MTSTRONHOLDCOUNT") AS
                         select project.proj_id as ProjectId, proj_name as ProjectName,TotalMappings,
                         sum(case when (to_char(responsiables) =''Mapping Approver'' and mapping_status.status =''Complete'') then 1 else 0 end) as MAppCompleteCount,
                         sum(case when (to_char(responsiables) =''Mapping Approver'' and mapping_status.status =''In Progress'') then 1 else 0 end) as MAppInProgressCount,
                         sum(case when (to_char(responsiables) =''Mapping Approver'' and mapping_status.status =''Not Started'') then 1 else 0 end) as MAppNotStartedCount,
                         sum(case when (to_char(responsiables) =''Mapping Approver'' and mapping_status.status =''On Hold'') then 1 else 0 end) as MAppOnHoldCount,
                         sum(case when (to_char(responsiables) =''Mapping Designer'' and mapping_status.status =''Complete'') then 1 else 0 end) as MDsgCompleteCount,
                         sum(case when (to_char(responsiables) =''Mapping Designer'' and mapping_status.status =''In Progress'') then 1 else 0 end) as MDsgInProgressCount,
                         sum(case when (to_char(responsiables) =''Mapping Designer'' and mapping_status.status =''Not Started'') then 1 else 0 end) as MDsgNotStartedCount,
                         sum(case when (to_char(responsiables) =''Mapping Designer'' and mapping_status.status =''On Hold'') then 1 else 0 end) as MDsgOnHoldCount,
                         sum(case when (to_char(responsiables) =''Mapping ETL Developer'' and mapping_status.status =''Complete'') then 1 else 0 end) as METLDevCompleteCount,
                         sum(case when (to_char(responsiables) =''Mapping ETL Developer'' and mapping_status.status =''In Progress'') then 1 else 0 end) as METLDevInProgressCount,
                         sum(case when (to_char(responsiables) =''Mapping ETL Developer'' and mapping_status.status =''Not Started'') then 1 else 0 end) as METLDevNotStartedCount,
                         sum(case when (to_char(responsiables) =''Mapping ETL Developer'' and mapping_status.status =''On Hold'') then 1 else 0 end) as METLDevOnHoldCount,
                         sum(case when (to_char(responsiables) =''Mapping Tester'' and mapping_status.status =''Complete'') then 1 else 0 end) as MTstrCompleteCount,
                         sum(case when (to_char(responsiables) =''Mapping Tester'' and mapping_status.status =''In Progress'') then 1 else 0 end) as MTstrInProgressCount,
                         sum(case when (to_char(responsiables) =''Mapping Tester'' and mapping_status.status =''Not Started'') then 1 else 0 end) as MTstrNotStartedCount,
                         sum(case when (to_char(responsiables) =''Mapping Tester'' and mapping_status.status =''On Hold'') then 1 else 0 end) as MTstrOnHoldCount
                         from mapping_status
                         left join project on project.proj_id = mapping_status.proj_id
                         left join mapping_details on mapping_details.map_id = mapping_status.map_id
                         left join totalmappingsbyproject on totalmappingsbyproject.projectid = project.proj_id
                         where mapping_details.status =''Active''
                         and mapping_status.status !=''unassigned''
                         and totalmappingsbyproject.mappingstatus =''Active''
                         group by project.proj_id, proj_name, totalmappings';
   END IF;
END;
/
DECLARE
   TABLECHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO TABLECHECKERFLAG FROM all_VIEWS WHERE OWNER = sys_context('userenv', 'current_schema') AND VIEW_NAME = UPPER('IMPACT_ANALYSIS_SUMMARY_V');
   IF TABLECHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'CREATE OR REPLACE FORCE VIEW  "IMPACT_ANALYSIS_SUMMARY_V" ("MAPPINGSCOUNT", "PROJ_ID", "PROJ_NAME", "PROJ_DESCR", "STATUS") AS
                         select count(project.proj_id) as mappingscount,
                         project.proj_id, proj_name, to_char(proj_descr)proj_descr, mapping_Details.status
                         from mapping_specification
                         left join mapping_details on MAPPING_SPECIFICATION.MAP_ID = MAPPING_DETAILS.MAP_ID
                         left join project on project.proj_id = mapping_Details.project_id
                         where ((SELECT 1 FROM DUAL WHERE REGEXP_LIKE(src_col_length, ''^\d+(\.\d+)?$'', '''')) = 1 and (SELECT 1 FROM DUAL WHERE REGEXP_LIKE(tgt_col_length, ''^\d+(\.\d+)?$'', '''')) = 1 and (TO_NUMBER(src_col_length)  > TO_NUMBER(tgt_col_length)))
                         and length(tgt_col_length) > 0
                         and length(src_col_length) > 0
                         group by project.proj_id, proj_name, to_char(proj_descr),mapping_Details.status';
   END IF;
END;
/
DECLARE
   TABLECHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO TABLECHECKERFLAG FROM all_VIEWS WHERE OWNER = sys_context('userenv', 'current_schema') AND VIEW_NAME = UPPER('IMPACT_ANALYSIS_DETAILS_V');
   IF TABLECHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'CREATE OR REPLACE FORCE VIEW  "IMPACT_ANALYSIS_DETAILS_V" ("MAP_ID", "SRC_COL_LENGTH", "SRC_COL_PRECISION", "TGT_COL_LENGTH","TGT_COL_PRECISION","PROJ_ID","PROJ_NAME", "PROJ_DESCR", "STATUS","MAP_NAME","MAP_SPEC_VERSION","MAP_SEQ_ID","SRC_TABLE_NAME","TGT_TABLE_NAME","SRC_COLUMN_NAME","TGT_COLUMN_NAME") AS
                         select MAPPING_SPECIFICATION.MAP_ID, src_col_length, src_col_precision, tgt_col_length, tgt_col_precision, project.proj_id ,
                         proj_name, proj_descr,mapping_Details.status, mapping_Details.map_name, mapping_Details.map_spec_version, MAPPING_SPECIFICATION.MAP_seq_ID,
                         MAPPING_SPECIFICATION.SRC_table_NAME, MAPPING_SPECIFICATION.TGT_table_NAME,
                         MAPPING_SPECIFICATION.SRC_COLUMN_NAME, MAPPING_SPECIFICATION.TGT_COLUMN_NAME
                         from mapping_specification
                         left join mapping_details on MAPPING_SPECIFICATION.MAP_ID = MAPPING_DETAILS.MAP_ID
                         left join project on project.proj_id = mapping_Details.project_id
                         where ((SELECT 1 FROM DUAL WHERE REGEXP_LIKE(src_col_length, ''^\d+(\.\d+)?$'', '''')) = 1 and (SELECT 1 FROM DUAL WHERE REGEXP_LIKE(tgt_col_length, ''^\d+(\.\d+)?$'', '''')) = 1 and (TO_NUMBER(src_col_length)  > TO_NUMBER(tgt_col_length)))
                         and length(tgt_col_length) > 0
                         and length(src_col_length) > 0';
   END IF;
END;
/
DECLARE
   TABLECHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO TABLECHECKERFLAG FROM all_VIEWS WHERE OWNER = sys_context('userenv', 'current_schema') AND VIEW_NAME = UPPER('TESTING_STATUS_DETAILS_V');
   IF TABLECHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'CREATE OR REPLACE FORCE VIEW  "TESTING_STATUS_DETAILS_V" ("TESTSTATUS", "MAP_ID", "MAP_NAME", "MAP_SPEC_VERSION","TESTING_NOTES","PROJECT_ID","PROJECTNAME", "PROJECTDESCRIPTION", "MAPPINGSTATUS","TESTERSTATUS","ASSIGNEDTOUSERID","ASSGINEDTOUSERNAME") AS
                         select mappingteststatus.TESTSTATUS,mappingteststatus.MAP_ID,mappingteststatus.MAP_NAME,mappingteststatus.MAP_SPEC_VERSION,
                         mappingteststatus.TESTING_NOTES, mappingteststatus.PROJECT_ID,mappingteststatus.PROJECTNAME,mappingteststatus.PROJECTDESCRIPTION,mappingteststatus.MAPPINGSTATUS,
                         NVL(testermappings.STATUS, '''') as testerstatus,
                         NVL(testermappings.USER_ID, '''') assignedtouserid,
                         NVL(users.user_full_name, '''') as assginedtousername
                         from mappingteststatus
                         left join testermappings on mappingteststatus.map_id = testermappings.MAP_ID
                         left join users on testermappings.USER_ID = users.user_id';
   END IF;
END;
/

DECLARE
   TABLECHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO TABLECHECKERFLAG FROM all_VIEWS WHERE OWNER = sys_context('userenv', 'current_schema') AND VIEW_NAME = UPPER('MAP_ASSIGNMENT_SUMMARY_V');
   IF TABLECHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'CREATE OR REPLACE FORCE VIEW  "MAP_ASSIGNMENT_SUMMARY_V" ("USER_ID","MAP_ID","USER_FULL_NAME","RESPONSIABLES","STATUS") AS
                         select mapping_status.user_id, map_id, user_full_name, responsiables, status from
                         mapping_status left join users on users.user_id = mapping_status.user_id where
                         mapping_status.user_id != ''null''';
   END IF;
END;
/
DECLARE
   TABLECHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO TABLECHECKERFLAG FROM ALL_TABLES WHERE OWNER = sys_context( 'userenv', 'current_schema' ) AND TABLE_NAME = UPPER('CSM_CATEGORY');
   IF TABLECHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'CREATE TABLE "CSM_CATEGORY"   (     "CATEGORY_ID"   NUMBER NOT NULL,     "CATEGORY_NAME" VARCHAR2(255) NOT NULL,     "DESCRIPTION" VARCHAR2(4000) NULL,     "DATE_CREATED" TIMESTAMP NULL,     "CREATED_BY" VARCHAR2(50) NULL,     "DATE_MODIFIED" TIMESTAMP NULL,     "MODIFIED_BY"  VARCHAR2(50) NULL,     "PARENT_CATEGORY_ID" NUMBER DEFAULT 0 NOT NULL ,    CONSTRAINT "PK_CSM_CATEGORY_ID" PRIMARY KEY("CATEGORY_ID")   )';
   END IF;
END;
/
DECLARE
   TABLECHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO TABLECHECKERFLAG FROM ALL_TABLES WHERE OWNER = sys_context( 'userenv', 'current_schema' ) AND TABLE_NAME = UPPER('CSM_CODESET');
   IF TABLECHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'CREATE TABLE "CSM_CODESET"   (     "CODESET_ID"   NUMBER NOT NULL,     "CODESET_NAME" VARCHAR2(100) NOT NULL,     "CODESET_DESC" VARCHAR2(4000) NULL,     "CATEGORY_ID"  NUMBER NOT NULL,     "CREATED_BY"   VARCHAR2(20) NOT NULL,     "CREATED_DATE_TIME" TIMESTAMP NOT NULL,     "LAST_MODIFIED_BY" VARCHAR2(20) NULL,     "LAST_MODIFIED_DATE_TIME" TIMESTAMP NULL,     CONSTRAINT "PK_CODESET" PRIMARY KEY("CODESET_ID"),     CONSTRAINT "FK_CATEGORY_ID" FOREIGN KEY("CATEGORY_ID") REFERENCES "CSM_CATEGORY" ("CATEGORY_ID") ON DELETE CASCADE ENABLE   )';
   END IF;
END;
/
DECLARE
   TABLECHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO TABLECHECKERFLAG FROM ALL_TABLES WHERE OWNER = sys_context( 'userenv', 'current_schema' ) AND TABLE_NAME = UPPER('CSM_CODE_VALUE');
   IF TABLECHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'CREATE TABLE "CSM_CODE_VALUE"   (     "CODE_ID"         NUMBER NOT NULL,     "CODE_NAME"       VARCHAR2(100) NOT NULL,     "CODE_STND_VALUE" VARCHAR2(255) NOT NULL,     "CODE_DESC"       VARCHAR2(4000) NULL,     "CREATED_BY"      VARCHAR2(20) NOT NULL,     "CREATED_DATE_TIME" TIMESTAMP NOT NULL,     "LAST_MODIFIED_BY" VARCHAR2(20) NOT NULL,     "LAST_MODIFIED_DATE_TIME" TIMESTAMP NOT NULL,     "CODESET_ID"      NUMBER NOT NULL,     "SYSTEM_ENV_NAME" VARCHAR2(255) NULL,     "ACTIVE_FLAG"     VARCHAR2(1) DEFAULT ''Y'' NOT NULL ,     "DELETE_FLAG"     VARCHAR2(1) DEFAULT ''N'' NOT NULL ,     CONSTRAINT "PK_CODE_VALUE" PRIMARY KEY ("CODE_ID"),     CONSTRAINT "FK_CODESET_ID" FOREIGN KEY("CODESET_ID") REFERENCES "CSM_CODESET"("CODESET_ID") ON DELETE CASCADE ENABLE   )';
   END IF;
END;
/
DECLARE
   TABLECHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO TABLECHECKERFLAG FROM ALL_TABLES WHERE OWNER = sys_context( 'userenv', 'current_schema' ) AND TABLE_NAME = UPPER('CSM_MAPPING_DETAILS');
   IF TABLECHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE '  CREATE TABLE CSM_MAPPING_DETAILS 		( 		CSM_MAP_ID NUMBER NOT NULL, 		CSM_MAP_NAME VARCHAR2(50) NULL, 		CSM_MAP_DESC VARCHAR2(50) NULL, 		DATE_CREATED TIMESTAMP NULL, 		CREATED_BY VARCHAR2(50) NULL, 		DATE_LAST_MODIFIED TIMESTAMP NULL, 		MODIFIED_BY VARCHAR2(50) NULL, 		CSM_MAP_VERSION NUMBER(*,2) DEFAULT 1.00 NULL , 		CSM_MAP_VERSION_LABLE VARCHAR2(50) NULL, 		CSM_MAP_CHANGED_DESC VARCHAR2(4000) NULL, 		CSM_MAP_STATUS VARCHAR2(20) DEFAULT ''Active'' NULL , 	CONSTRAINT "PK_DETLS_MAP_ID" PRIMARY KEY ("CSM_MAP_ID") 		)';
   END IF;
END;
/

DECLARE
   TABLECHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO TABLECHECKERFLAG FROM ALL_CONS_COLUMNS WHERE OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME = UPPER('CSM_MAPPING_SPEC') AND COLUMN_NAME = UPPER('CSM_MAP_ID') AND CONSTRAINT_NAME = UPPER('FK_CSM_MAP_DTLS_CSM_MAP_ID');
   IF TABLECHECKERFLAG = 1 THEN
      EXECUTE IMMEDIATE 'ALTER TABLE CSM_MAPPING_SPEC DROP CONSTRAINT FK_CSM_MAP_DTLS_CSM_MAP_ID';
   END IF;
END;
/

DECLARE
   TABLECHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO TABLECHECKERFLAG FROM ALL_TABLES WHERE OWNER = sys_context( 'userenv', 'current_schema' ) AND TABLE_NAME = UPPER('CSM_MAPPING_SPEC');
   IF TABLECHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'CREATE TABLE CSM_MAPPING_SPEC 		( 		CSM_MAP_ID NUMBER NULL, 		CSM_MAP_SOURCE_CODE_ID NUMBER NULL, 		CSM_MAP_TARGET_CODE_ID NUMBER NULL, 		CSM_MAP_SEQUENCE_ID NUMBER NULL, 		CSM_MAP_DELETE_FLAG VARCHAR(1) DEFAULT ''N'' NOT NULL , 		CSM_MAP_ACTIVE_FLAG VARCHAR(1) DEFAULT ''Y'' NOT NULL ,  CONSTRAINT "PK_MAP_SEQ_ID" PRIMARY KEY ("CSM_MAP_SEQUENCE_ID"),  CONSTRAINT "FK_SPEC_CSM_MAP_ID" FOREIGN KEY("CSM_MAP_ID") REFERENCES "CSM_MAPPING_DETAILS" ("CSM_MAP_ID") ON DELETE CASCADE ENABLE		)';
   END IF;
END;
/
DECLARE
   TABLECHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO TABLECHECKERFLAG FROM ALL_CONS_COLUMNS WHERE OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME = UPPER('CSM_MAPPING_SPEC') AND COLUMN_NAME = UPPER('CSM_MAP_ID') AND CONSTRAINT_NAME = UPPER('FK_SPEC_CSM_MAP_ID');
   IF TABLECHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'ALTER TABLE "CSM_MAPPING_SPEC"  ADD  CONSTRAINT "FK_SPEC_CSM_MAP_ID" FOREIGN KEY("CSM_MAP_ID") REFERENCES "CSM_MAPPING_DETAILS" ("CSM_MAP_ID") ON DELETE CASCADE ENABLE';
   END IF;
END;
/
DECLARE
   TABLECHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO TABLECHECKERFLAG FROM ALL_TABLES WHERE OWNER = sys_context( 'userenv', 'current_schema' ) AND TABLE_NAME = UPPER('MAPPING_CHANGE_LOG');
   IF TABLECHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'CREATE TABLE MAPPING_CHANGE_LOG ( CHANGE_LOG_ID number NOT NULL, MAP_ID number NULL, CHANGE_LOG_DESCRIPTION VARCHAR2(4000)  NULL, CREATED_BY VARCHAR2(255) NULL, CREATED_DATE_TIME timestamp NULL, LAST_MODIFIED_BY VARCHAR2(255) NULL, LAST_MODIFIED_DATE_TIME timestamp NULL, PRIMARY KEY (CHANGE_LOG_ID) )';
   END IF;
END;
/
DECLARE
   TABLECHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO TABLECHECKERFLAG FROM ALL_TABLES WHERE OWNER = sys_context( 'userenv', 'current_schema' ) AND TABLE_NAME = UPPER('USER_PREFERENCES');
   IF TABLECHECKERFLAG < 0 THEN
      EXECUTE IMMEDIATE 'DELETE FROM USER_PREFERENCES';
   END IF;
END;
/
DECLARE
   TABLECHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO TABLECHECKERFLAG FROM ALL_TABLES WHERE OWNER = sys_context( 'userenv', 'current_schema' ) AND TABLE_NAME = UPPER('CSM_MAPPING_DETAILS');
   IF TABLECHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'UPDATE CSM_MAPPING_DETAILS SET CSM_MAP_VERSION = 1.00, CSM_MAP_STATUS = ''Active'' WHERE CSM_MAP_ID IN (SELECT CSM_MAP_ID FROM CSM_MAPPING_DETAILS)';
   END IF;
END;
/
DECLARE
   COLUMNCHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO COLUMNCHECKERFLAG FROM ALL_TAB_COLUMNS WHERE  OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME = UPPER('MAPPING_DETAILS') AND COLUMN_NAME=UPPER('EMAIL_CCLIST');
   IF COLUMNCHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'ALTER TABLE MAPPING_DETAILS ADD EMAIL_CCLIST VARCHAR2(4000) NULL';
   END IF;
END;
/
DECLARE
   COLUMNCHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO COLUMNCHECKERFLAG FROM ALL_TAB_COLUMNS WHERE  OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME = UPPER('MAPPING_DETAILS') AND COLUMN_NAME=UPPER('EMAIL_EXTRA_CONTENT');
   IF COLUMNCHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'ALTER TABLE MAPPING_DETAILS ADD EMAIL_EXTRA_CONTENT VARCHAR2(4000) NULL';
   END IF;
END;
/
DECLARE
   COLUMNCHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO COLUMNCHECKERFLAG FROM ALL_TAB_COLUMNS WHERE  OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME = UPPER('MAPPING_STATUS') AND COLUMN_NAME=UPPER('EMAIL_CCLIST');
   IF COLUMNCHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'ALTER TABLE MAPPING_STATUS ADD EMAIL_CCLIST VARCHAR2(4000) NULL';
   END IF;
END;
/
DECLARE
   COLUMNCHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO COLUMNCHECKERFLAG FROM ALL_TAB_COLUMNS WHERE  OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME = UPPER('MAPPING_STATUS') AND COLUMN_NAME=UPPER('EMAIL_EXTRA_CONTENT');
   IF COLUMNCHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'ALTER TABLE MAPPING_STATUS ADD EMAIL_EXTRA_CONTENT VARCHAR2(4000) NULL';
   END IF;
END;
/
DECLARE
   TABLECHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO TABLECHECKERFLAG FROM ALL_TABLES WHERE OWNER = sys_context( 'userenv', 'current_schema' ) AND TABLE_NAME = UPPER('CSM_MAP_SYSTEM_ENVIRONMENTS');
   IF TABLECHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'CREATE TABLE "CSM_MAP_SYSTEM_ENVIRONMENTS" (	"CSM_MAP_SYSTEM_ENVIRONMENTS_ID" NUMBER(*,0) NOT NULL ENABLE,     "CSM_MAP_ID" NUMBER(*,0) NOT NULL ENABLE,     "CSM_MAP_SYSTEM_ID" NUMBER(*,0),     "CSM_MAP_SYSTEM_NAME" VARCHAR2(50 BYTE),     "CSM_MAP_SYS_ENV_NAME" VARCHAR2(50 BYTE),     "CSM_MAP_SYS_ENV_TYPE" VARCHAR2(10 BYTE),      CONSTRAINT "PK_CSM_MAP_SYS_ENVS" PRIMARY KEY ("CSM_MAP_SYSTEM_ENVIRONMENTS_ID"),      CONSTRAINT "FK_DETLS_ENVS_MAP_ID" FOREIGN KEY ("CSM_MAP_ID")       REFERENCES "CSM_MAPPING_DETAILS" ("CSM_MAP_ID") ON DELETE CASCADE ENABLE )';
   END IF;
END;
/
DECLARE
   TABLECHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO TABLECHECKERFLAG FROM ALL_TABLES WHERE OWNER = sys_context( 'userenv', 'current_schema' ) AND TABLE_NAME = UPPER('CSM_MAP_CODESETS');
   IF TABLECHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'CREATE TABLE "CSM_MAP_CODESETS" (	"CSM_MAP_CODESETS_ID" NUMBER(*,0) NOT NULL ENABLE,     "CSM_MAP_ID" NUMBER(*,0) NOT NULL ENABLE,     "CSM_MAP_CODESET_ID" NUMBER(*,0),     "CSM_MAP_CODESET_TYPE" VARCHAR2(10 BYTE),      CONSTRAINT "PK_CSM_MAP_CODESETS_ID" PRIMARY KEY ("CSM_MAP_CODESETS_ID") ENABLE,      CONSTRAINT "FK_DETLS_CDSETS_MAP_ID" FOREIGN KEY ("CSM_MAP_ID")       REFERENCES "CSM_MAPPING_DETAILS" ("CSM_MAP_ID") ON DELETE CASCADE ENABLE, CONSTRAINT "FK_CDSET_CDSET_ID" FOREIGN KEY("CSM_MAP_CODESET_ID") REFERENCES "CSM_CODESET" ("CODESET_ID") ) ';
   END IF;
END;
/
DECLARE
   COLUMNCHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO COLUMNCHECKERFLAG FROM ALL_TAB_COLUMNS WHERE  OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME = UPPER('CSM_MAPPING_SPEC') AND COLUMN_NAME=UPPER('CSM_MAP_ACTIVE_FLAG');
   IF COLUMNCHECKERFLAG = 1 THEN
      EXECUTE IMMEDIATE 'ALTER TABLE CSM_MAPPING_SPEC RENAME COLUMN "CSM_MAP_ACTIVE_FLAG" TO "CSM_MAP_PUBLISH_FLAG"';
   END IF;
END;
/
DECLARE
   COLUMNCHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO COLUMNCHECKERFLAG FROM ALL_TAB_COLUMNS WHERE  OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME = UPPER('CSM_CODE_VALUE') AND COLUMN_NAME=UPPER('SYSTEM_ID');
   IF COLUMNCHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'ALTER TABLE CSM_CODE_VALUE ADD SYSTEM_ID INT DEFAULT 0 NULL';
   END IF;
END;
/
DECLARE
   COLUMNCHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO COLUMNCHECKERFLAG FROM ALL_TAB_COLUMNS WHERE  OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME = UPPER('CSM_CODE_VALUE') AND COLUMN_NAME=UPPER('SYSTEM_NAME');
   IF COLUMNCHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'ALTER TABLE CSM_CODE_VALUE ADD SYSTEM_NAME VARCHAR2(50) NULL';
   END IF;
END;
/
DECLARE
   COLUMNCHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO COLUMNCHECKERFLAG FROM ALL_TAB_COLUMNS WHERE  OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME = UPPER('CSM_MAPPING_SPEC') AND COLUMN_NAME=UPPER('CSM_MAP_CREATEDBY');
   IF COLUMNCHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'ALTER TABLE CSM_MAPPING_SPEC ADD CSM_MAP_CREATEDBY VARCHAR2(50) NULL';
   END IF;
END;
/
DECLARE
   COLUMNCHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO COLUMNCHECKERFLAG FROM ALL_TAB_COLUMNS WHERE  OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME = UPPER('CSM_MAPPING_SPEC') AND COLUMN_NAME=UPPER('CSM_MAP_CREATED_DATE');
   IF COLUMNCHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'ALTER TABLE CSM_MAPPING_SPEC ADD CSM_MAP_CREATED_DATE TIMESTAMP NULL';
   END IF;
END;
/
DECLARE
   COLUMNCHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO COLUMNCHECKERFLAG FROM ALL_TAB_COLUMNS WHERE  OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME = UPPER('CSM_MAPPING_SPEC') AND COLUMN_NAME=UPPER('CSM_MAP_MODIFIEDBY');
   IF COLUMNCHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'ALTER TABLE CSM_MAPPING_SPEC ADD CSM_MAP_MODIFIEDBY VARCHAR2(50) NULL';
   END IF;
END;
/
DECLARE
   COLUMNCHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO COLUMNCHECKERFLAG FROM ALL_TAB_COLUMNS WHERE  OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME = UPPER('CSM_MAPPING_SPEC') AND COLUMN_NAME=UPPER('CSM_MAP_MODIFIED_DATE');
   IF COLUMNCHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'ALTER TABLE CSM_MAPPING_SPEC ADD CSM_MAP_MODIFIED_DATE TIMESTAMP NULL';
   END IF;
END;
/
DECLARE
   COLUMNCHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO COLUMNCHECKERFLAG FROM ALL_TAB_COLUMNS WHERE  OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME = UPPER('CSM_MAPPING_DETAILS') AND COLUMN_NAME=UPPER('CSM_MAP_PUBLISH_FLAG');
   IF COLUMNCHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'ALTER TABLE CSM_MAPPING_DETAILS ADD CSM_MAP_PUBLISH_FLAG VARCHAR(1) DEFAULT ''Y'' NOT NULL ';
   END IF;
END;
/
DECLARE
   SEQUENCECHECKERFLAG INT;
BEGIN
    SELECT COUNT(*) INTO SEQUENCECHECKERFLAG FROM ALL_SEQUENCES WHERE SEQUENCE_OWNER = sys_context('userenv', 'current_schema') AND SEQUENCE_NAME = UPPER('CSM_MAP_SYS_ENVS_SEQ');
   IF SEQUENCECHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'CREATE SEQUENCE   "CSM_MAP_SYS_ENVS_SEQ"  MINVALUE 1 MAXVALUE 999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE';
   END IF;
END;
/
DECLARE
   SEQUENCECHECKERFLAG INT;
BEGIN
    SELECT COUNT(*) INTO SEQUENCECHECKERFLAG FROM ALL_SEQUENCES WHERE SEQUENCE_OWNER = sys_context('userenv', 'current_schema') AND SEQUENCE_NAME = UPPER('CSM_MAP_CODESETS_SEQ');
   IF SEQUENCECHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'CREATE SEQUENCE   "CSM_MAP_CODESETS_SEQ"  MINVALUE 1 MAXVALUE 999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE';
   END IF;
END;
/
DECLARE
  TRIGGERCHECKERFLAG INT;
BEGIN
  SELECT COUNT(*)
  INTO TRIGGERCHECKERFLAG
  FROM all_triggers
  WHERE OWNER = sys_context('userenv', 'current_schema') AND trigger_name = UPPER('CSM_MAP_SYS_ENVS_INSERT');
  IF TRIGGERCHECKERFLAG = 0 THEN
    EXECUTE IMMEDIATE 'CREATE OR REPLACE TRIGGER  "CSM_MAP_SYS_ENVS_INSERT" BEFORE INSERT ON CSM_MAP_SYSTEM_ENVIRONMENTS FOR EACH ROW BEGIN SELECT CSM_MAP_SYS_ENVS_SEQ.NEXTVAL INTO :new.CSM_MAP_SYSTEM_ENVIRONMENTS_ID FROM DUAL; END;';
    EXECUTE IMMEDIATE 'ALTER TRIGGER  "CSM_MAP_SYS_ENVS_INSERT" ENABLE';
  END IF;
END;
/
DECLARE
  TRIGGERCHECKERFLAG INT;
BEGIN
  SELECT COUNT(*)
  INTO TRIGGERCHECKERFLAG
  FROM all_triggers
  WHERE OWNER = sys_context('userenv', 'current_schema') AND trigger_name = UPPER('CSM_MAP_CODESETS_INSERT');
  IF TRIGGERCHECKERFLAG = 0 THEN
    EXECUTE IMMEDIATE 'CREATE OR REPLACE TRIGGER  "CSM_MAP_CODESETS_INSERT" BEFORE INSERT ON CSM_MAP_CODESETS FOR EACH ROW BEGIN SELECT CSM_MAP_CODESETS_SEQ.NEXTVAL INTO :new.CSM_MAP_CODESETS_ID FROM DUAL; END;';
    EXECUTE IMMEDIATE 'ALTER TRIGGER  "CSM_MAP_CODESETS_INSERT" ENABLE';
  END IF;
END;
/
DECLARE
   COLUMNCHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO COLUMNCHECKERFLAG FROM ALL_TAB_COLUMNS WHERE  OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME = UPPER('SYSTEM_TABLE_COLUMNS_METADATA') AND COLUMN_NAME=UPPER('TYPE');
   IF COLUMNCHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'ALTER TABLE "SYSTEM_TABLE_COLUMNS_METADATA" ADD "TYPE" varchar2(25) NULL';
   END IF;
END;
/
DECLARE
   COLUMNCHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO COLUMNCHECKERFLAG FROM ALL_TAB_COLUMNS WHERE  OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME = UPPER('SYSTEM_TABLE_COLUMNS_METADATA') AND COLUMN_NAME=UPPER('XPATH');
   IF COLUMNCHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'ALTER TABLE "SYSTEM_TABLE_COLUMNS_METADATA" ADD "XPATH" VARCHAR2(4000) NULL';
   END IF;
END;
/
DECLARE
   TABLECHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO TABLECHECKERFLAG FROM all_VIEWS WHERE OWNER = sys_context('userenv', 'current_schema') AND VIEW_NAME = UPPER('VALID_SYS_TBL_COL_METADATA');
   IF TABLECHECKERFLAG = 1 THEN
      EXECUTE IMMEDIATE 'DROP VIEW VALID_SYS_TBL_COL_METADATA';
      EXECUTE IMMEDIATE 'CREATE OR REPLACE FORCE VIEW  "VALID_SYS_TBL_COL_METADATA" ("TABLE_NAME", "COLUMN_NAME", "COL_DATATYPE", "COL_LENGTH", "COL_PRECISION", "COL_DB_DEFAULT_VALUE", "COL_ETL_DEFAULT_VALUE", "COL_IDENTITY_FLAG", "SYSTEM_ID", "SYSTEM_ENV_NAME", "COL_DEF", "COLUMN_COMMENTS", "CREATED_DATETIME", "LAST_MODIFIED_BY", "LAST_MODIFIED_DATE_TIME", "CREATED_BY", "COL_NULLABLE_FLAG", "MIN_VALUE", "MAX_VALUE", "PERCENT_NULL_VALUE", "COL_SCALE", "PRIMARY_KEY_FLAG", "NATURAL_KEY_FLAG", "FOREIGN_KEY_FLAG", "FK_TABLE_NAME", "FK_COLUMN_NAME", "COL_DATA_DOMAIN", "LOGICAL_COLUMN_NAME", "SDI_FLAG", "SDI_DESCRIPTION",  "USER_DEFINATION1","USER_DEFINATION2", "USER_DEFINATION3","USER_DEFINATION4","USER_DEFINATION5", "VALID", "INSERT_ORDER","TYPE") AS SELECT TABLE_NAME, COLUMN_NAME, COL_DATATYPE, COL_LENGTH, COL_PRECISION,  COL_DB_DEFAULT_VALUE, COL_ETL_DEFAULT_VALUE, COL_IDENTITY_FLAG, SYSTEM_ID, SYSTEM_ENV_NAME, COL_DEF, COLUMN_COMMENTS, CREATED_DATETIME, LAST_MODIFIED_BY, LAST_MODIFIED_DATE_TIME, CREATED_BY,  COL_NULLABLE_FLAG, MIN_VALUE, MAX_VALUE, PERCENT_NULL_VALUE,  COL_SCALE, PRIMARY_KEY_FLAG, NATURAL_KEY_FLAG, FOREIGN_KEY_FLAG, FK_TABLE_NAME,  FK_COLUMN_NAME, COL_DATA_DOMAIN, LOGICAL_COLUMN_NAME, SDI_FLAG, SDI_DESCRIPTION,  USER_DEFINATION1, USER_DEFINATION2, USER_DEFINATION3, USER_DEFINATION4, USER_DEFINATION5,  VALID, INSERT_ORDER,TYPE FROM SYSTEM_TABLE_COLUMNS_METADATA WHERE VALID = 1 OR VALID IS NULL';
   END IF;
END;
/
DECLARE
   COLUMNCHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO COLUMNCHECKERFLAG FROM ALL_TAB_COLUMNS WHERE  OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME = UPPER('MAPPING_SPECIFICATION') AND COLUMN_NAME=UPPER('src_xpath');
   IF COLUMNCHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'ALTER TABLE MAPPING_SPECIFICATION ADD src_xpath varchar2(255) NULL';
   END IF;
END;
/
DECLARE
   COLUMNCHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO COLUMNCHECKERFLAG FROM ALL_TAB_COLUMNS WHERE  OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME = UPPER('MAPPING_SPECIFICATION') AND COLUMN_NAME=UPPER('tgt_xpath');
   IF COLUMNCHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'ALTER TABLE MAPPING_SPECIFICATION ADD tgt_xpath varchar2(255) NULL';
   END IF;
END;
/
DECLARE
   SEQUENCECHECKERFLAG INT;
   STARTWITHNO NUMBER;
BEGIN
    SELECT COUNT(*) INTO SEQUENCECHECKERFLAG FROM ALL_SEQUENCES WHERE SEQUENCE_OWNER = sys_context('userenv', 'current_schema') AND SEQUENCE_NAME = UPPER('CSM_CAT_SEQ');
    SELECT NVL(MAX(CATEGORY_ID),0)+1 INTO STARTWITHNO FROM csm_category;
   IF SEQUENCECHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'CREATE SEQUENCE "CSM_CAT_SEQ" MINVALUE 1 MAXVALUE 999999999999999999999999999 INCREMENT BY 1 START WITH '||STARTWITHNO||' CACHE 20 NOORDER NOCYCLE';
   END IF;
END;
/
DECLARE
   SEQUENCECHECKERFLAG INT;
   STARTWITHNO NUMBER;
BEGIN
    SELECT COUNT(*) INTO SEQUENCECHECKERFLAG FROM ALL_SEQUENCES WHERE SEQUENCE_OWNER = sys_context('userenv', 'current_schema') AND SEQUENCE_NAME = UPPER('CSM_MAP_DETLS_SEQ');
    SELECT NVL(MAX(CSM_MAP_ID),0)+1 INTO STARTWITHNO FROM csm_mapping_details;
   IF SEQUENCECHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'CREATE SEQUENCE "CSM_MAP_DETLS_SEQ" MINVALUE 1 MAXVALUE 999999999999999999999999999 INCREMENT BY 1 START WITH '||STARTWITHNO||' CACHE 20 NOORDER NOCYCLE';
   END IF;
END;
/
DECLARE
   SEQUENCECHECKERFLAG INT;
   STARTWITHNO NUMBER;
BEGIN
    SELECT COUNT(*) INTO SEQUENCECHECKERFLAG FROM ALL_SEQUENCES WHERE SEQUENCE_OWNER = sys_context('userenv', 'current_schema') AND SEQUENCE_NAME = UPPER('CSM_MAP_SPEC_SEQ');
    SELECT NVL(MAX(CSM_MAP_SEQUENCE_ID),0)+1 INTO STARTWITHNO FROM csm_mapping_spec;
   IF SEQUENCECHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'CREATE SEQUENCE "CSM_MAP_SPEC_SEQ" MINVALUE 1 MAXVALUE 999999999999999999999999999 INCREMENT BY 1 START WITH '||STARTWITHNO||' CACHE 20 NOORDER NOCYCLE';
   END IF;
END;
/
DECLARE
   SEQUENCECHECKERFLAG INT;
   STARTWITHNO NUMBER;
BEGIN
    SELECT COUNT(*) INTO SEQUENCECHECKERFLAG FROM ALL_SEQUENCES WHERE SEQUENCE_OWNER = sys_context('userenv', 'current_schema') AND SEQUENCE_NAME = UPPER('CSM_CODESET_SEQ');
    SELECT NVL(MAX(CODESET_ID),0)+1 INTO STARTWITHNO FROM csm_codeset;
   IF SEQUENCECHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE ' CREATE SEQUENCE "CSM_CODESET_SEQ" MINVALUE 1 MAXVALUE 999999999999999999999999999 INCREMENT BY 1 START WITH '||STARTWITHNO||' CACHE 20 NOORDER NOCYCLE';
   END IF;
END;
/
DECLARE
   SEQUENCECHECKERFLAG INT;
   STARTWITHNO NUMBER;
BEGIN
    SELECT COUNT(*) INTO SEQUENCECHECKERFLAG FROM ALL_SEQUENCES WHERE SEQUENCE_OWNER = sys_context('userenv', 'current_schema') AND SEQUENCE_NAME = UPPER('CSM_CODE_VAL_SEQ');
    SELECT NVL(MAX(CODE_ID),0)+1 INTO STARTWITHNO FROM csm_code_value;
   IF SEQUENCECHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE ' CREATE SEQUENCE "CSM_CODE_VAL_SEQ" MINVALUE 1 MAXVALUE 999999999999999999999999999 INCREMENT BY 1 START WITH '||STARTWITHNO||' CACHE 20 NOORDER NOCYCLE';
   END IF;
END;
/
DECLARE
  TRIGGERCHECKERFLAG INT;
BEGIN
  SELECT COUNT(*)   INTO TRIGGERCHECKERFLAG   FROM all_triggers   WHERE OWNER = sys_context('userenv', 'current_schema') AND trigger_name = UPPER('CSM_MAP_DETLS_INSERT');
  IF TRIGGERCHECKERFLAG = 0 THEN
    EXECUTE IMMEDIATE 'CREATE OR REPLACE TRIGGER  "CSM_MAP_DETLS_INSERT" BEFORE INSERT ON CSM_MAPPING_DETAILS FOR EACH ROW BEGIN SELECT CSM_MAP_DETLS_SEQ.NEXTVAL INTO :new.CSM_MAP_ID FROM DUAL; END;';
    EXECUTE IMMEDIATE 'ALTER TRIGGER  "CSM_MAP_DETLS_INSERT" ENABLE';
  END IF;
END;
/
DECLARE
  TRIGGERCHECKERFLAG INT;
BEGIN
  SELECT COUNT(*)   INTO TRIGGERCHECKERFLAG   FROM all_triggers   WHERE OWNER = sys_context('userenv', 'current_schema') AND trigger_name = UPPER('CSM_MAP_SPEC_INSERT');
  IF TRIGGERCHECKERFLAG = 0 THEN
    EXECUTE IMMEDIATE 'CREATE OR REPLACE TRIGGER  "CSM_MAP_SPEC_INSERT" BEFORE INSERT ON CSM_MAPPING_SPEC FOR EACH ROW BEGIN SELECT CSM_MAP_SPEC_SEQ.NEXTVAL INTO :new.CSM_MAP_SEQUENCE_ID FROM DUAL; END;';
    EXECUTE IMMEDIATE 'ALTER TRIGGER  "CSM_MAP_SPEC_INSERT" ENABLE';
  END IF;
END;
/
DECLARE
  TRIGGERCHECKERFLAG INT;
BEGIN
  SELECT COUNT(*)   INTO TRIGGERCHECKERFLAG   FROM all_triggers   WHERE OWNER = sys_context('userenv', 'current_schema') AND trigger_name = UPPER('CSM_CODESET_INSERT');
  IF TRIGGERCHECKERFLAG = 0 THEN
    EXECUTE IMMEDIATE 'CREATE OR REPLACE TRIGGER  "CSM_CODESET_INSERT" BEFORE INSERT ON CSM_CODESET FOR EACH ROW BEGIN SELECT CSM_CODESET_SEQ.NEXTVAL INTO :new.CODESET_ID FROM DUAL; END;';
    EXECUTE IMMEDIATE 'ALTER TRIGGER  "CSM_CODESET_INSERT" ENABLE';
  END IF;
END;
/
DECLARE
  TRIGGERCHECKERFLAG INT;
BEGIN
  SELECT COUNT(*)   INTO TRIGGERCHECKERFLAG   FROM all_triggers   WHERE OWNER = sys_context('userenv', 'current_schema') AND trigger_name = UPPER('CSM_CODE_VAL_INSERT');
  IF TRIGGERCHECKERFLAG = 0 THEN
    EXECUTE IMMEDIATE 'CREATE OR REPLACE TRIGGER  "CSM_CODE_VAL_INSERT" BEFORE INSERT ON CSM_CODE_VALUE FOR EACH ROW BEGIN SELECT CSM_CODE_VAL_SEQ.NEXTVAL INTO :new.CODE_ID FROM DUAL; END;';
    EXECUTE IMMEDIATE 'ALTER TRIGGER  "CSM_CODE_VAL_INSERT" ENABLE';
  END IF;
END;
/
DECLARE
  TRIGGERCHECKERFLAG INT;
BEGIN
  SELECT COUNT(*)   INTO TRIGGERCHECKERFLAG   FROM all_triggers   WHERE OWNER = sys_context('userenv', 'current_schema') AND trigger_name = UPPER('CSM_CAT_INSERT');
  IF TRIGGERCHECKERFLAG = 0 THEN
    EXECUTE IMMEDIATE 'CREATE OR REPLACE TRIGGER  "CSM_CAT_INSERT" BEFORE INSERT ON CSM_CATEGORY FOR EACH ROW BEGIN SELECT CSM_CAT_SEQ.NEXTVAL INTO :new.CATEGORY_ID FROM DUAL; END;';
    EXECUTE IMMEDIATE 'ALTER TRIGGER  "CSM_CAT_INSERT" ENABLE';
  END IF;
END;
/
DECLARE
   COLUMNCHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO COLUMNCHECKERFLAG FROM ALL_TAB_COLUMNS WHERE  OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME = UPPER('MAPPING_DETAILS') AND COLUMN_NAME=UPPER('JOB_xREF');
   IF COLUMNCHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'ALTER TABLE MAPPING_DETAILS ADD JOB_xREF varchar2(255) NULL';
   END IF;
END;
/

DECLARE
   FUNCTIONCHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO FUNCTIONCHECKERFLAG FROM ALL_OBJECTS WHERE OWNER = sys_context('userenv', 'current_schema') AND OBJECT_NAME = UPPER('MAP_COUNT') AND OBJECT_TYPE = 'FUNCTION';
   IF FUNCTIONCHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'CREATE OR REPLACE FUNCTION MAP_COUNT (   v_SUBJECT_ID IN NUMBER  ) RETURN NUMBER AS V_MAP_COUNT NUMBER; V_CHILD_COUNT NUMBER:=0; cursor c1_childs(p_subject_id number) is select subject_id from projectsubjects where parent_subject_id = p_subject_id; BEGIN   BEGIN   SELECT COUNT(*) INTO V_map_COUNT FROM SUBJECTMAPPINGS A1, MAPPING_DETAILS B1 WHERE A1.MAPPING_ID = B1.MAP_ID AND B1.STATUS = ''Active'' AND SUBJECT_ID = V_SUBJECT_ID;   EXCEPTION WHEN OTHERS THEN   v_map_count := 0;   END;      FOR R1_CHILDS IN C1_CHILDS(V_SUBJECT_ID) LOOP   v_child_count := v_child_count + map_count(r1_childs.subject_id);   END LOOP;    RETURN (V_CHILD_COUNT + V_MAP_COUNT); END MAP_COUNT;';
   END IF;
END;
/

DECLARE
   COLUMNCHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO COLUMNCHECKERFLAG FROM ALL_TAB_COLUMNS WHERE  OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME = UPPER('SYS_CON_ENVIRONMENTS') AND COLUMN_NAME=UPPER('DATA_FILE');
   IF COLUMNCHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'ALTER TABLE SYS_CON_ENVIRONMENTS ADD DATA_FILE BLOB NULL';
   END IF;
END;
/
DECLARE
   COLUMNCHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO COLUMNCHECKERFLAG FROM ALL_TAB_COLUMNS WHERE  OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME = UPPER('SYS_CON_ENVIRONMENTS') AND COLUMN_NAME=UPPER('DATA_FILE_NAME');
   IF COLUMNCHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'ALTER TABLE SYS_CON_ENVIRONMENTS ADD DATA_FILE_NAME VARCHAR2(255) NULL';
   END IF;
END;
/
DECLARE
   COLUMNCHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO COLUMNCHECKERFLAG FROM ALL_TAB_COLUMNS WHERE  OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME = UPPER('SYSTEM_TABLE_METADATA') AND COLUMN_NAME=UPPER('USER_DEFINED1');
   IF COLUMNCHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'ALTER TABLE SYSTEM_TABLE_METADATA ADD USER_DEFINED1 VARCHAR2(4000) NULL';
   END IF;
END;
/
DECLARE
   COLUMNCHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO COLUMNCHECKERFLAG FROM ALL_TAB_COLUMNS WHERE  OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME = UPPER('SYSTEM_TABLE_METADATA') AND COLUMN_NAME=UPPER('USER_DEFINED2');
   IF COLUMNCHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'ALTER TABLE SYSTEM_TABLE_METADATA ADD USER_DEFINED2 VARCHAR2(4000) NULL';
   END IF;
END;
/
DECLARE
   COLUMNCHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO COLUMNCHECKERFLAG FROM ALL_TAB_COLUMNS WHERE  OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME = UPPER('SYSTEM_TABLE_METADATA') AND COLUMN_NAME=UPPER('USER_DEFINED3');
   IF COLUMNCHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'ALTER TABLE SYSTEM_TABLE_METADATA ADD USER_DEFINED3 VARCHAR2(4000) NULL';
   END IF;
END;
/
DECLARE
   COLUMNCHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO COLUMNCHECKERFLAG FROM ALL_TAB_COLUMNS WHERE  OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME = UPPER('SYSTEM_TABLE_METADATA') AND COLUMN_NAME=UPPER('USER_DEFINED4');
   IF COLUMNCHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'ALTER TABLE SYSTEM_TABLE_METADATA ADD USER_DEFINED4 VARCHAR2(4000) NULL';
   END IF;
END;
/
DECLARE
   COLUMNCHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO COLUMNCHECKERFLAG FROM ALL_TAB_COLUMNS WHERE  OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME = UPPER('SYSTEM_TABLE_METADATA') AND COLUMN_NAME=UPPER('USER_DEFINED5');
   IF COLUMNCHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'ALTER TABLE SYSTEM_TABLE_METADATA ADD USER_DEFINED5 VARCHAR2(4000) NULL';
   END IF;
END;
/
DECLARE
   COLUMNCHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO COLUMNCHECKERFLAG FROM ALL_TAB_COLUMNS WHERE  OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME = UPPER('SYSTEM_TABLE_METADATA') AND COLUMN_NAME=UPPER('USED_IN_GAP_ANALYSIS');
   IF COLUMNCHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'ALTER TABLE SYSTEM_TABLE_METADATA ADD USED_IN_GAP_ANALYSIS VARCHAR2(1) DEFAULT ''Y'' NOT NULL';
   END IF;
END;
/
DECLARE
   COLUMNCHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO COLUMNCHECKERFLAG FROM ALL_TAB_COLUMNS WHERE  OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME = UPPER('SYSTEM_TABLE_COLUMNS_METADATA') AND COLUMN_NAME=UPPER('USED_IN_GAP_ANALYSIS');
   IF COLUMNCHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'ALTER TABLE SYSTEM_TABLE_COLUMNS_METADATA ADD USED_IN_GAP_ANALYSIS VARCHAR2(1) DEFAULT ''Y'' NOT NULL';
   END IF;
END;
/
DECLARE
   TABLECHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO TABLECHECKERFLAG FROM all_VIEWS WHERE OWNER = sys_context('userenv', 'current_schema') AND VIEW_NAME = UPPER('VALID_SYS_TBL_COL_METADATA');
   IF TABLECHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'CREATE OR REPLACE VIEW  "VALID_SYS_TBL_COL_METADATA" ("TABLE_NAME",
                         "COLUMN_NAME", "COL_DATATYPE", "COL_LENGTH", "COL_PRECISION",
                         "COL_DB_DEFAULT_VALUE", "COL_ETL_DEFAULT_VALUE", "COL_IDENTITY_FLAG",
                         "SYSTEM_ID", "SYSTEM_ENV_NAME", "COL_DEF", "COLUMN_COMMENTS", "CREATED_DATETIME",
                         "LAST_MODIFIED_BY", "LAST_MODIFIED_DATE_TIME", "CREATED_BY",
                         "COL_NULLABLE_FLAG", "MIN_VALUE", "MAX_VALUE", "PERCENT_NULL_VALUE",
                         "COL_SCALE", "PRIMARY_KEY_FLAG", "NATURAL_KEY_FLAG", "FOREIGN_KEY_FLAG",
                         "FK_TABLE_NAME", "FK_COLUMN_NAME", "COL_DATA_DOMAIN", "LOGICAL_COLUMN_NAME",
                         "SDI_FLAG", "SDI_DESCRIPTION",  "USER_DEFINATION1","USER_DEFINATION2", "USER_DEFINATION3","USER_DEFINATION4","USER_DEFINATION5", "VALID", "INSERT_ORDER") AS SELECT
                         TABLE_NAME, COLUMN_NAME, COL_DATATYPE,
                         COL_LENGTH, COL_PRECISION,  COL_DB_DEFAULT_VALUE,
                         COL_ETL_DEFAULT_VALUE, COL_IDENTITY_FLAG, SYSTEM_ID,
                         SYSTEM_ENV_NAME, COL_DEF, COLUMN_COMMENTS, CREATED_DATETIME,
                         LAST_MODIFIED_BY, LAST_MODIFIED_DATE_TIME, CREATED_BY,
                         COL_NULLABLE_FLAG, MIN_VALUE, MAX_VALUE,
                         PERCENT_NULL_VALUE,  COL_SCALE, PRIMARY_KEY_FLAG,
                         NATURAL_KEY_FLAG, FOREIGN_KEY_FLAG, FK_TABLE_NAME,
                         FK_COLUMN_NAME, COL_DATA_DOMAIN, LOGICAL_COLUMN_NAME,
                         SDI_FLAG, SDI_DESCRIPTION,  USER_DEFINATION1,
                         USER_DEFINATION2, USER_DEFINATION3, USER_DEFINATION4,
                         USER_DEFINATION5,  VALID, INSERT_ORDER FROM
                         SYSTEM_TABLE_COLUMNS_METADATA WHERE
                         VALID = 1 OR VALID IS NULL';
   END IF;
END;
/
DECLARE
   COLUMNCHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO COLUMNCHECKERFLAG FROM ALL_TAB_COLUMNS WHERE  OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME = UPPER('USER_PREFERENCES') AND COLUMN_NAME=UPPER('USER_ID');
   IF COLUMNCHECKERFLAG = 1 THEN
      EXECUTE IMMEDIATE 'ALTER TABLE USER_PREFERENCES ADD (USER_ID_TEMP VARCHAR2(4000))';
      EXECUTE IMMEDIATE 'UPDATE USER_PREFERENCES SET USER_ID_TEMP = USER_ID';
      EXECUTE IMMEDIATE 'ALTER TABLE USER_PREFERENCES DROP COLUMN USER_ID';
      EXECUTE IMMEDIATE 'ALTER TABLE USER_PREFERENCES RENAME COLUMN USER_ID_TEMP TO USER_ID';
   END IF;
END;
/
DECLARE
   V_CHECK INT;
BEGIN
	BEGIN
      SELECT 1 INTO V_CHECK
        FROM DUAL
       WHERE NOT EXISTS ( SELECT *
                          FROM USER_PREFERENCES
                             WHERE USER_ID LIKE 'SETTINGS_TABLE_USER_DEFINED1%' );
		EXCEPTION
		WHEN OTHERS THEN
		 NULL;
		END;
     IF V_CHECK = 1 THEN
      INSERT INTO USER_PREFERENCES(USER_ID, COLUMN_PREFERENCES)
        VALUES ( 'SETTINGS_TABLE_USER_DEFINED1_Administrator', 'true' );
   END IF;
END;
/
DECLARE
   V_CHECK INT;
BEGIN
	BEGIN
      SELECT 1 INTO V_CHECK
        FROM DUAL
       WHERE NOT EXISTS ( SELECT *
                          FROM USER_PREFERENCES
                             WHERE USER_ID LIKE 'SETTINGS_TABLE_USER_DEFINED2%' );
		EXCEPTION
		WHEN OTHERS THEN
		 NULL;
		END;
     IF V_CHECK = 1 THEN
      INSERT INTO USER_PREFERENCES(USER_ID, COLUMN_PREFERENCES)
        VALUES ( 'SETTINGS_TABLE_USER_DEFINED2_Administrator', 'true' );
   END IF;
END;
/
DECLARE
   V_CHECK INT;
BEGIN
	BEGIN
      SELECT 1 INTO V_CHECK
        FROM DUAL
       WHERE NOT EXISTS ( SELECT *
                          FROM USER_PREFERENCES
                             WHERE USER_ID LIKE 'SETTINGS_TABLE_USER_DEFINED3%' );
		EXCEPTION
		WHEN OTHERS THEN
		 NULL;
		END;
     IF V_CHECK = 1 THEN
      INSERT INTO USER_PREFERENCES(USER_ID, COLUMN_PREFERENCES)
        VALUES ( 'SETTINGS_TABLE_USER_DEFINED3_Administrator', 'true' );
   END IF;
END;
/
DECLARE
   V_CHECK INT;
BEGIN
	BEGIN
      SELECT 1 INTO V_CHECK
        FROM DUAL
       WHERE NOT EXISTS ( SELECT *
                          FROM USER_PREFERENCES
                             WHERE USER_ID LIKE 'SETTINGS_TABLE_USER_DEFINED4%' );
		EXCEPTION
		WHEN OTHERS THEN
		 NULL;
		END;
     IF V_CHECK = 1 THEN
      INSERT INTO USER_PREFERENCES(USER_ID, COLUMN_PREFERENCES)
        VALUES ( 'SETTINGS_TABLE_USER_DEFINED4_Administrator', 'true' );
   END IF;
END;
/
DECLARE
   V_CHECK INT;
BEGIN
	BEGIN
      SELECT 1 INTO V_CHECK
        FROM DUAL
       WHERE NOT EXISTS ( SELECT *
                          FROM USER_PREFERENCES
                             WHERE USER_ID LIKE 'SETTINGS_TABLE_USER_DEFINED5%' );
		EXCEPTION
		WHEN OTHERS THEN
		 NULL;
		END;
     IF V_CHECK = 1 THEN
      INSERT INTO USER_PREFERENCES(USER_ID, COLUMN_PREFERENCES)
        VALUES ( 'SETTINGS_TABLE_USER_DEFINED5_Administrator', 'true' );
   END IF;
END;
/
DECLARE
   V_CHECK INT;
BEGIN
	BEGIN
      SELECT 1 INTO V_CHECK
        FROM DUAL
       WHERE NOT EXISTS ( SELECT *
                          FROM USER_PREFERENCES
                             WHERE USER_ID LIKE 'SETTINGS_TABLE_USER_DEFINED6%' );
		EXCEPTION
		WHEN OTHERS THEN
		 NULL;
		END;
     IF V_CHECK = 1 THEN
      INSERT INTO USER_PREFERENCES(USER_ID, COLUMN_PREFERENCES)
        VALUES ( 'SETTINGS_TABLE_USER_DEFINED6_Administrator', 'true' );
   END IF;
END;
/
DECLARE
   V_CHECK INT;
BEGIN
	BEGIN
      SELECT 1 INTO V_CHECK
        FROM DUAL
       WHERE NOT EXISTS ( SELECT *
                          FROM USER_PREFERENCES
                             WHERE USER_ID LIKE 'SETTINGS_TABLE_USER_DEFINED7%' );
		EXCEPTION
		WHEN OTHERS THEN
		 NULL;
		END;
     IF V_CHECK = 1 THEN
      INSERT INTO USER_PREFERENCES(USER_ID, COLUMN_PREFERENCES)
        VALUES ( 'SETTINGS_TABLE_USER_DEFINED7_Administrator', 'true' );
   END IF;
END;
/
DECLARE
   V_CHECK INT;
BEGIN
	BEGIN
      SELECT 1 INTO V_CHECK
        FROM DUAL
       WHERE NOT EXISTS ( SELECT *
                          FROM USER_PREFERENCES
                             WHERE USER_ID LIKE 'SETTINGS_TABLE_USER_DEFINED8%' );
		EXCEPTION
		WHEN OTHERS THEN
		 NULL;
		END;
     IF V_CHECK = 1 THEN
      INSERT INTO USER_PREFERENCES(USER_ID, COLUMN_PREFERENCES)
        VALUES ( 'SETTINGS_TABLE_USER_DEFINED8_Administrator', 'true' );
   END IF;
END;
/
DECLARE
   V_CHECK INT;
BEGIN
	BEGIN
      SELECT 1 INTO V_CHECK
        FROM DUAL
       WHERE NOT EXISTS ( SELECT *
                          FROM USER_PREFERENCES
                             WHERE USER_ID LIKE 'SETTINGS_TABLE_USER_DEFINED9%' );
		EXCEPTION
		WHEN OTHERS THEN
		 NULL;
		END;
     IF V_CHECK = 1 THEN
      INSERT INTO USER_PREFERENCES(USER_ID, COLUMN_PREFERENCES)
        VALUES ( 'SETTINGS_TABLE_USER_DEFINED9_Administrator', 'true' );
   END IF;
END;
/
DECLARE
   V_CHECK INT;
BEGIN
	BEGIN
      SELECT 1 INTO V_CHECK
        FROM DUAL
       WHERE NOT EXISTS ( SELECT *
                          FROM USER_PREFERENCES
                             WHERE USER_ID LIKE 'SETTINGS_TABLE_USER_DEFINED10%' );
		EXCEPTION
		WHEN OTHERS THEN
		 NULL;
		END;
     IF V_CHECK = 1 THEN
      INSERT INTO USER_PREFERENCES(USER_ID, COLUMN_PREFERENCES)
        VALUES ( 'SETTINGS_TABLE_USER_DEFINED10_Administrator', 'true' );
   END IF;
END;
/
DECLARE
   V_CHECK INT;
BEGIN
	BEGIN
      SELECT 1 INTO V_CHECK
        FROM DUAL
       WHERE NOT EXISTS ( SELECT *
                          FROM USER_PREFERENCES
                             WHERE USER_ID LIKE 'SETTINGS_COLUMN_USER_DEFINED1%' );
		EXCEPTION
		WHEN OTHERS THEN
		 NULL;
		END;
     IF V_CHECK = 1 THEN
      INSERT INTO USER_PREFERENCES(USER_ID, COLUMN_PREFERENCES)
	 VALUES('SETTINGS_COLUMN_USER_DEFINED1_Administrator','true');
   END IF;
END;
/
DECLARE
   V_CHECK INT;
BEGIN
	BEGIN
      SELECT 1 INTO V_CHECK
        FROM DUAL
       WHERE NOT EXISTS ( SELECT *
                          FROM USER_PREFERENCES
                             WHERE USER_ID LIKE 'SETTINGS_COLUMN_USER_DEFINED2%' );
		EXCEPTION
		WHEN OTHERS THEN
		 NULL;
		END;
     IF V_CHECK = 1 THEN
      INSERT INTO USER_PREFERENCES(USER_ID, COLUMN_PREFERENCES)
	 VALUES('SETTINGS_COLUMN_USER_DEFINED2_Administrator','true');
   END IF;
END;
/
DECLARE
   V_CHECK INT;
BEGIN
	BEGIN
      SELECT 1 INTO V_CHECK
        FROM DUAL
       WHERE NOT EXISTS ( SELECT *
                          FROM USER_PREFERENCES
                             WHERE USER_ID LIKE 'SETTINGS_COLUMN_USER_DEFINED3%' );
		EXCEPTION
		WHEN OTHERS THEN
		 NULL;
		END;
     IF V_CHECK = 1 THEN
      INSERT INTO USER_PREFERENCES(USER_ID, COLUMN_PREFERENCES)
	 VALUES('SETTINGS_COLUMN_USER_DEFINED3_Administrator','true');
   END IF;
END;
/
DECLARE
   V_CHECK INT;
BEGIN
	BEGIN
      SELECT 1 INTO V_CHECK
        FROM DUAL
       WHERE NOT EXISTS ( SELECT *
                          FROM USER_PREFERENCES
                             WHERE USER_ID LIKE 'SETTINGS_COLUMN_USER_DEFINED4%' );
		EXCEPTION
		WHEN OTHERS THEN
		 NULL;
		END;
     IF V_CHECK = 1 THEN
      INSERT INTO USER_PREFERENCES(USER_ID, COLUMN_PREFERENCES)
	 VALUES('SETTINGS_COLUMN_USER_DEFINED4_Administrator','true');
   END IF;
END;
/
DECLARE
   V_CHECK INT;
BEGIN
	BEGIN
      SELECT 1 INTO V_CHECK
        FROM DUAL
       WHERE NOT EXISTS ( SELECT *
                          FROM USER_PREFERENCES
                             WHERE USER_ID LIKE 'SETTINGS_COLUMN_USER_DEFINED5%' );
		EXCEPTION
		WHEN OTHERS THEN
		 NULL;
		END;
     IF V_CHECK = 1 THEN
      INSERT INTO USER_PREFERENCES(USER_ID, COLUMN_PREFERENCES)
	 VALUES('SETTINGS_COLUMN_USER_DEFINED5_Administrator','true');
   END IF;
END;
/
DECLARE
   V_CHECK INT;
BEGIN
	BEGIN
      SELECT 1 INTO V_CHECK
        FROM DUAL
       WHERE NOT EXISTS ( SELECT *
                          FROM USER_PREFERENCES
                             WHERE USER_ID LIKE 'SETTINGS_COLUMN_USER_DEFINED6%' );
		EXCEPTION
		WHEN OTHERS THEN
		 NULL;
		END;
     IF V_CHECK = 1 THEN
      INSERT INTO USER_PREFERENCES(USER_ID, COLUMN_PREFERENCES)
	 VALUES('SETTINGS_COLUMN_USER_DEFINED6_Administrator','true');
   END IF;
END;
/
DECLARE
   V_CHECK INT;
BEGIN
	BEGIN
      SELECT 1 INTO V_CHECK
        FROM DUAL
       WHERE NOT EXISTS ( SELECT *
                          FROM USER_PREFERENCES
                             WHERE USER_ID LIKE 'SETTINGS_COLUMN_USER_DEFINED7%' );
		EXCEPTION
		WHEN OTHERS THEN
		 NULL;
		END;
     IF V_CHECK = 1 THEN
      INSERT INTO USER_PREFERENCES(USER_ID, COLUMN_PREFERENCES)
	 VALUES('SETTINGS_COLUMN_USER_DEFINED7_Administrator','true');
   END IF;
END;
/
DECLARE
   V_CHECK INT;
BEGIN
	BEGIN
      SELECT 1 INTO V_CHECK
        FROM DUAL
       WHERE NOT EXISTS ( SELECT *
                          FROM USER_PREFERENCES
                             WHERE USER_ID LIKE 'SETTINGS_COLUMN_USER_DEFINED8%' );
		EXCEPTION
		WHEN OTHERS THEN
		 NULL;
		END;
     IF V_CHECK = 1 THEN
      INSERT INTO USER_PREFERENCES(USER_ID, COLUMN_PREFERENCES)
	 VALUES('SETTINGS_COLUMN_USER_DEFINED8_Administrator','true');
   END IF;
END;
/
DECLARE
   V_CHECK INT;
BEGIN
	BEGIN
      SELECT 1 INTO V_CHECK
        FROM DUAL
       WHERE NOT EXISTS ( SELECT *
                          FROM USER_PREFERENCES
                             WHERE USER_ID LIKE 'SETTINGS_COLUMN_USER_DEFINED9%' );
		EXCEPTION
		WHEN OTHERS THEN
		 NULL;
		END;
     IF V_CHECK = 1 THEN
      INSERT INTO USER_PREFERENCES(USER_ID, COLUMN_PREFERENCES)
	 VALUES('SETTINGS_COLUMN_USER_DEFINED9_Administrator','true');
   END IF;
END;
/
DECLARE
   V_CHECK INT;
BEGIN
	BEGIN
      SELECT 1 INTO V_CHECK
        FROM DUAL
       WHERE NOT EXISTS ( SELECT *
                          FROM USER_PREFERENCES
                             WHERE USER_ID LIKE 'SETTINGS_COLUMN_USER_DEFINED10%' );
		EXCEPTION
		WHEN OTHERS THEN
		 NULL;
		END;
     IF V_CHECK = 1 THEN
      INSERT INTO USER_PREFERENCES(USER_ID, COLUMN_PREFERENCES)
	 VALUES('SETTINGS_COLUMN_USER_DEFINED10_Administrator','true');
   END IF;
END;
/
DECLARE
   TABLECHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO TABLECHECKERFLAG FROM ALL_TABLES WHERE OWNER = sys_context( 'userenv', 'current_schema' ) AND TABLE_NAME = UPPER('PLUGINS');
   IF TABLECHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'CREATE TABLE PLUGINS(PLUGIN_ID int NOT NULL, PLUGIN_ICON BLOB NOT NULL,	PLUGIN_TEXT VARCHAR2(255) NOT NULL,	PLUGIN_URL VARCHAR2(4000) NOT NULL,	PLUGIN_DESCRIPTION VARCHAR2(4000) NULL,	PLUGIN_ACCESS VARCHAR2(10) NOT NULL,        PLUGIN_ORDER float NOT NULL, CREATED_BY VARCHAR2(20)  NOT NULL,  CREATED_DATE_TIME TIMESTAMP (6) NOT NULL, LAST_MODIFIED_BY VARCHAR2(20)  NULL,        LAST_MODIFIED_DATE_TIME TIMESTAMP (6) NULL)';
   END IF;
END;
/
DECLARE
   SEQUENCECHECKERFLAG INT;
BEGIN
    SELECT COUNT(*) INTO SEQUENCECHECKERFLAG FROM ALL_SEQUENCES WHERE SEQUENCE_OWNER = sys_context('userenv', 'current_schema') AND SEQUENCE_NAME = UPPER('PLUGINID_SEQ');
   IF SEQUENCECHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'CREATE SEQUENCE   "PLUGINID_SEQ"  MINVALUE 1 MAXVALUE 999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE';
   END IF;
END;
/
DECLARE
  TRIGGERCHECKERFLAG INT;
BEGIN
  SELECT COUNT(*)
  INTO TRIGGERCHECKERFLAG
  FROM all_triggers
  WHERE OWNER = sys_context('userenv', 'current_schema') AND TRIGGER_NAME = UPPER('PLUGINID_INSERT');
  IF TRIGGERCHECKERFLAG = 0 THEN
    EXECUTE IMMEDIATE 'CREATE OR REPLACE TRIGGER  "PLUGINID_INSERT" BEFORE INSERT ON PLUGINS FOR EACH ROW BEGIN SELECT PLUGINID_SEQ.NEXTVAL INTO :NEW.PLUGIN_ID FROM DUAL; END;';
    EXECUTE IMMEDIATE 'ALTER TRIGGER  "PLUGINID_INSERT" ENABLE';
  END IF;
END;
/
DECLARE
   V_CHECK INT;
BEGIN
	BEGIN
      SELECT 0 INTO V_CHECK
        FROM DUAL
       WHERE NOT EXISTS ( SELECT *
                          FROM USER_PREFERENCES
                             WHERE TO_CHAR(USER_ID) = 'DO_NOT_DELETE_OR_UPDATE_AMM_VERSION' AND TO_CHAR(COLUMN_PREFERENCES) = '4.3');
		EXCEPTION
		WHEN OTHERS THEN
		 NULL;
		END;
     IF V_CHECK = 0 THEN
      INSERT INTO USER_PREFERENCES(USER_ID, COLUMN_PREFERENCES)
	 VALUES('DO_NOT_DELETE_OR_UPDATE_AMM_VERSION','4.3');
      INSERT INTO USER_PREFERENCES (USER_ID, COLUMN_PREFERENCES) SELECT APPDEFAULTNAME, APPDEFAULTVALUE FROM APP_DEFAULTS;
      DELETE FROM APP_DEFAULTS;
   END IF;
END;
/
DECLARE
   TABLECHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO TABLECHECKERFLAG FROM ALL_TABLES WHERE OWNER = sys_context( 'userenv', 'current_schema' ) AND TABLE_NAME = UPPER('MAP_SPCFCTN_DTLS_RPRT_GTT');
   IF TABLECHECKERFLAG = 1 THEN
   EXECUTE IMMEDIATE 'DROP TABLE MAP_SPCFCTN_DTLS_RPRT_GTT';
   END IF;
END;
/
DECLARE
   TYPECHECKERFLAG INT;
BEGIN
	SELECT COUNT(*) INTO TYPECHECKERFLAG FROM ALL_OBJECTS WHERE OWNER = sys_context('userenv', 'current_schema') AND UPPER(OBJECT_NAME) = 'MAP_S_D_RPRT_GTT_TYPE_TABLE' AND UPPER(OBJECT_TYPE)='TYPE';
   IF TYPECHECKERFLAG = 1 THEN
   EXECUTE IMMEDIATE 'DROP TYPE MAP_S_D_RPRT_GTT_TYPE_TABLE';
   END IF;
END;
/

DECLARE
   TYPECHECKERFLAG INT;
BEGIN
	SELECT COUNT(*) INTO TYPECHECKERFLAG FROM ALL_OBJECTS WHERE OWNER = sys_context('userenv', 'current_schema') AND UPPER(OBJECT_NAME) = 'MAP_SPCFCTN_DTLS_RPRT_GTT_TYPE' AND UPPER(OBJECT_TYPE)='TYPE';
   IF TYPECHECKERFLAG = 1 THEN
      EXECUTE IMMEDIATE 'DROP TYPE MAP_SPCFCTN_DTLS_RPRT_GTT_TYPE';
   END IF;
END;
/

DECLARE
   TABLECHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO TABLECHECKERFLAG FROM ALL_TABLES WHERE OWNER = sys_context( 'userenv', 'current_schema' ) AND TABLE_NAME = UPPER('MAP_SPCFCTN_DTLS_RPRT_GTT');
   IF TABLECHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'CREATE GLOBAL TEMPORARY TABLE MAP_SPCFCTN_DTLS_RPRT_GTT (MAP_ID NUMBER NOT NULL,  MAP_NAME VARCHAR2(4000 BYTE) NULL, MAP_SEQ_ID VARCHAR2(1000 BYTE) NULL,  SRC_SYSTEM_NAME VARCHAR2(4000 BYTE) NULL,
      SRC_SYSTEM_ENVIRONMENT_NAME VARCHAR2(4000 BYTE) NULL,  SRC_TABLE_NAME VARCHAR2(4000 BYTE) NULL,  SRC_COLUMN_NAME VARCHAR2(4000 BYTE) NULL,  SRC_COL_DATATYPE VARCHAR2(1000 BYTE) NULL,
      SRC_COL_LENGTH VARCHAR2(100), SRC_COL_PRECISION VARCHAR2(100), SRC_COL_SCALE VARCHAR2(100), TGT_SYSTEM_NAME VARCHAR2(4000 BYTE) NULL,  TGT_SYSTEM_ENVIRONMENT_NAME VARCHAR2(4000 BYTE) NULL,  TGT_TABLE_NAME VARCHAR2(4000 BYTE) NULL,  TGT_COLUMN_NAME VARCHAR2(4000 BYTE) NULL,
      TGT_COL_DATATYPE VARCHAR2(1000 BYTE) NULL, TGT_COL_LENGTH VARCHAR2(100), TGT_COL_PRECISION VARCHAR2(100), TGT_COL_SCALE VARCHAR2(100),
      MATCH_SRC_SYSTEM_NAME VARCHAR2(4000 BYTE) NULL, MATCH_SRC_SYS_ENV_NAME VARCHAR2(4000 BYTE) NULL,  MATCH_SRC_SYS_TBL_NAME VARCHAR2(4000 BYTE) NULL,  MATCH_SRC_SYS_COL_NAME VARCHAR2(4000 BYTE) NULL,
      MATCH_SRC_SYS_COL_DTYPE VARCHAR2(50 BYTE) NULL, MATCH_SRC_SYS_COL_LENGTH VARCHAR2(100), MATCH_SRC_SYS_COL_PRECISION VARCHAR2(100), MATCH_SRC_SYS_COL_SCALE VARCHAR2(100),
      MATCH_TGT_SYSTEM_NAME VARCHAR2(4000 BYTE) NULL, MATCH_TGT_SYS_ENV_NAME VARCHAR2(4000 BYTE) NULL,  MATCH_TGT_SYS_TBL_NAME VARCHAR2(4000 BYTE) NULL,  MATCH_TGT_SYS_COL_NAME VARCHAR2(4000 BYTE) NULL,
      MATCH_TGT_SYS_COL_DTYPE VARCHAR2(50 BYTE) NULL, MATCH_TGT_SYS_COL_LENGTH VARCHAR2(100), MATCH_TGT_SYS_COL_PRECISION VARCHAR2(100), MATCH_TGT_SYS_COL_SCALE VARCHAR2(100))  ON COMMIT PRESERVE ROWS';
   END IF;
END;
/
DECLARE
   TYPECHECKERFLAG INT;
BEGIN
	SELECT COUNT(*) INTO TYPECHECKERFLAG FROM ALL_OBJECTS WHERE OWNER = sys_context('userenv', 'current_schema') AND UPPER(OBJECT_NAME) = 'MAP_SPCFCTN_DTLS_RPRT_GTT_TYPE' AND UPPER(OBJECT_TYPE)='TYPE';
   IF TYPECHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'CREATE OR REPLACE TYPE "MAP_SPCFCTN_DTLS_RPRT_GTT_TYPE" AS OBJECT (  MAP_ID NUMBER NULL,  MAP_NAME VARCHAR2(4000 BYTE) NULL, MAP_SEQ_ID VARCHAR2(1000 BYTE) NULL, SRC_SYSTEM_NAME VARCHAR2(4000 BYTE) NULL,  SRC_SYSTEM_ENVIRONMENT_NAME VARCHAR2(4000 BYTE) NULL,  SRC_TABLE_NAME VARCHAR2(4000 BYTE) NULL,  SRC_COLUMN_NAME VARCHAR2(4000 BYTE) NULL,  SRC_COL_DATATYPE VARCHAR2(1000 BYTE) NULL,
       SRC_COL_LENGTH VARCHAR2(100), SRC_COL_PRECISION VARCHAR2(100), SRC_COL_SCALE VARCHAR2(100),
       TGT_SYSTEM_NAME VARCHAR2(4000 BYTE) NULL,  TGT_SYSTEM_ENVIRONMENT_NAME VARCHAR2(4000 BYTE) NULL,
       TGT_TABLE_NAME VARCHAR2(4000 BYTE) NULL,  TGT_COLUMN_NAME VARCHAR2(4000 BYTE) NULL,  TGT_COL_DATATYPE VARCHAR2(1000 BYTE) NULL,
       TGT_COL_LENGTH VARCHAR2(100), TGT_COL_PRECISION VARCHAR2(100), TGT_COL_SCALE VARCHAR2(100),
       MATCH_SRC_SYSTEM_NAME VARCHAR2(4000 BYTE) NULL, MATCH_SRC_SYS_ENV_NAME VARCHAR2(4000 BYTE) NULL,  MATCH_SRC_SYS_TBL_NAME VARCHAR2(4000 BYTE) NULL,  MATCH_SRC_SYS_COL_NAME VARCHAR2(4000 BYTE) NULL,  MATCH_SRC_SYS_COL_DTYPE VARCHAR2(50 BYTE) NULL,
       MATCH_SRC_SYS_COL_LENGTH VARCHAR2(100), MATCH_SRC_SYS_COL_PRECISION VARCHAR2(100), MATCH_SRC_SYS_COL_SCALE VARCHAR2(100),
       MATCH_TGT_SYSTEM_NAME VARCHAR2(4000 BYTE) NULL, MATCH_TGT_SYS_ENV_NAME VARCHAR2(4000 BYTE) NULL,  MATCH_TGT_SYS_TBL_NAME VARCHAR2(4000 BYTE) NULL,  MATCH_TGT_SYS_COL_NAME VARCHAR2(4000 BYTE) NULL,  MATCH_TGT_SYS_COL_DTYPE VARCHAR2(50 BYTE) NULL,
       MATCH_TGT_SYS_COL_LENGTH VARCHAR2(100), MATCH_TGT_SYS_COL_PRECISION VARCHAR2(100), MATCH_TGT_SYS_COL_SCALE VARCHAR2(100)
       )';
   END IF;
END;
/
DECLARE
   TYPECHECKERFLAG INT;
BEGIN
	SELECT COUNT(*) INTO TYPECHECKERFLAG FROM ALL_OBJECTS WHERE OWNER = sys_context('userenv', 'current_schema') AND UPPER(OBJECT_NAME) = 'MAP_S_D_RPRT_GTT_TYPE_TABLE' AND UPPER(OBJECT_TYPE)='TYPE';
   IF TYPECHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'CREATE OR REPLACE TYPE "MAP_S_D_RPRT_GTT_TYPE_TABLE" AS TABLE OF "MAP_SPCFCTN_DTLS_RPRT_GTT_TYPE"';
   END IF;
END;
/
DECLARE
   TABLECHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO TABLECHECKERFLAG FROM all_VIEWS WHERE OWNER = sys_context('userenv', 'current_schema') AND VIEW_NAME = UPPER('APPENDED_MAP_SPEC_RCRDS_V');
   IF TABLECHECKERFLAG = 1 THEN
      EXECUTE IMMEDIATE 'DROP VIEW APPENDED_MAP_SPEC_RCRDS_V';
   END IF;
END;
/
   CREATE OR REPLACE FORCE VIEW "APPENDED_MAP_SPEC_RCRDS_V" ("SRC_SYSTEM_NAME", "SRC_SYSTEM_ENVIRONMENT_NAME", "SRC_TABLE_NAME", "SRC_COLUMN_NAME", "SRC_COL_DATATYPE", "SRC_COL_LENGTH", "SRC_COL_PRECISION", "SRC_COL_SCALE", "TGT_COLUMN_NAME", "TGT_TABLE_NAME", "TGT_SYSTEM_ENVIRONMENT_NAME", "TGT_SYSTEM_NAME", "TGT_COL_DATATYPE", "TGT_COL_LENGTH", "TGT_COL_PRECISION", "TGT_COL_SCALE", "MAP_SEQ_ID", "BUSINESS_RULE", "MAP_ID", "PROJ_ID")
   AS
   WITH TGT AS
     (SELECT REGEXP_SUBSTR(REPLACE(MS.TGT_COLUMN_NAME,CHR(10),','), '[^,]+', 1, LEVEL) TGT_COLUMN_NAME ,
       REGEXP_SUBSTR(REPLACE(MS.TGT_TABLE_NAME,CHR(10),','), '[^,]+', 1, LEVEL) TGT_TABLE_NAME ,
       REGEXP_SUBSTR(REPLACE(MS.TGT_SYSTEM_ENVIRONMENT_NAME,CHR(10),','), '[^,]+', 1, LEVEL) TGT_SYSTEM_ENVIRONMENT_NAME,
       REGEXP_SUBSTR(REPLACE(MS.TGT_SYSTEM_NAME,CHR(10),','), '[^,]+', 1, LEVEL) TGT_SYSTEM_NAME,
       REGEXP_SUBSTR(REPLACE(MS.TGT_COL_DATATYPE,CHR(10),','), '[^,]+', 1, LEVEL) TGT_COL_DATATYPE,
       REGEXP_SUBSTR(REPLACE(MS.TGT_COL_LENGTH,CHR(10),','), '[^,]+', 1, LEVEL) TGT_COL_LENGTH,
       REGEXP_SUBSTR(REPLACE(MS.TGT_COL_PRECISION,CHR(10),','), '[^,]+', 1, LEVEL) TGT_COL_PRECISION,
       REGEXP_SUBSTR(REPLACE(MS.TGT_COL_SCALE,CHR(10),','), '[^,]+', 1, LEVEL) TGT_COL_SCALE,
       MAP_SEQ_ID,
       BUSINESS_RULE,
       MAP_ID,
       PROJ_ID
     FROM MAPPING_SPECIFICATION MS
       CONNECT BY LEVEL          <= LENGTH(REPLACE(MS.TGT_COLUMN_NAME,CHR(10),',')) - LENGTH(REPLACE(REPLACE(MS.TGT_COLUMN_NAME,CHR(10),','), ',')) + 1
     AND PRIOR MAP_SEQ_ID         = MAP_SEQ_ID
     AND PRIOR DBMS_RANDOM.VALUE IS NOT NULL
     ) ,
     SRC AS
     (SELECT REGEXP_SUBSTR(REPLACE(MS.SRC_COLUMN_NAME,CHR(10),','), '[^,]+', 1, LEVEL) SRC_COLUMN_NAME ,
       REGEXP_SUBSTR(REPLACE(MS.SRC_TABLE_NAME,CHR(10),','), '[^,]+', 1, LEVEL) SRC_TABLE_NAME ,
       REGEXP_SUBSTR(REPLACE(MS.SRC_SYSTEM_ENVIRONMENT_NAME,CHR(10),','), '[^,]+', 1, LEVEL) SRC_SYSTEM_ENVIRONMENT_NAME,
       REGEXP_SUBSTR(REPLACE(MS.SRC_SYSTEM_NAME,CHR(10),','), '[^,]+', 1, LEVEL) SRC_SYSTEM_NAME,
       REGEXP_SUBSTR(REPLACE(MS.SRC_COL_DATATYPE,CHR(10),','), '[^,]+', 1, LEVEL) SRC_COL_DATATYPE ,
       REGEXP_SUBSTR(REPLACE(MS.SRC_COL_LENGTH,CHR(10),','), '[^,]+', 1, LEVEL) SRC_COL_LENGTH ,
       REGEXP_SUBSTR(REPLACE(MS.SRC_COL_PRECISION,CHR(10),','), '[^,]+', 1, LEVEL) SRC_COL_PRECISION,
       REGEXP_SUBSTR(REPLACE(MS.SRC_COL_SCALE,CHR(10),','), '[^,]+', 1, LEVEL) SRC_COL_SCALE,
       MAP_SEQ_ID,
       MAP_ID,
       PROJ_ID
     FROM MAPPING_SPECIFICATION MS
       CONNECT BY LEVEL          <= LENGTH(REPLACE(MS.SRC_COLUMN_NAME,CHR(10),',')) - LENGTH(REPLACE(REPLACE(MS.SRC_COLUMN_NAME,CHR(10),','), ',')) + 1
     AND PRIOR MAP_SEQ_ID         = MAP_SEQ_ID
     AND PRIOR DBMS_RANDOM.VALUE IS NOT NULL
     )
   SELECT SRC.SRC_SYSTEM_NAME,
     SRC.SRC_SYSTEM_ENVIRONMENT_NAME,
     SRC.SRC_TABLE_NAME,
     SRC.SRC_COLUMN_NAME,
     SRC.SRC_COL_DATATYPE,
     SRC.SRC_COL_LENGTH,
     SRC.SRC_COL_PRECISION,
     SRC.SRC_COL_SCALE,
     TGT.*
   FROM SRC
   JOIN TGT
   ON (SRC.MAP_SEQ_ID = TGT.MAP_SEQ_ID);
/

DECLARE
   TABLECHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO TABLECHECKERFLAG FROM all_types WHERE OWNER = sys_context('userenv', 'current_schema') AND TYPE_NAME = UPPER('RPT_VALIDATION_STRARRAY');
   IF TABLECHECKERFLAG = 1 THEN
      EXECUTE IMMEDIATE 'DROP TYPE RPT_VALIDATION_STRARRAY';
   END IF;
END;
/

CREATE OR REPLACE TYPE RPT_VALIDATION_STRARRAY IS TABLE OF VARCHAR2(2000);
/

DECLARE
   TABLECHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO TABLECHECKERFLAG FROM ALL_OBJECTS WHERE OWNER = sys_context('userenv', 'current_schema') AND OBJECT_TYPE = 'FUNCTION' AND OBJECT_NAME = UPPER('FN_VLDT_MPPNG_SPCFCTN_DTLS');
   IF TABLECHECKERFLAG = 1 THEN
      EXECUTE IMMEDIATE 'DROP FUNCTION FN_VLDT_MPPNG_SPCFCTN_DTLS';
   END IF;
END;
/

CREATE OR REPLACE FUNCTION FN_VLDT_MPPNG_SPCFCTN_DTLS
    (
      IN_MAP_ID IN RPT_VALIDATION_STRARRAY)
    RETURN SYS_REFCURSOR
  AS
    PRAGMA AUTONOMOUS_TRANSACTION;
    L_MAP_SPEC_CMPR_RSLTS SYS_REFCURSOR;
    CURSOR C_MAPPING_SPEC
    IS
      SELECT MS.MAP_ID,
        MD.MAP_NAME,
        MS.MAP_SEQ_ID,
        to_char(MS.SRC_SYSTEM_NAME) SRC_SYSTEM_NAME,
        to_char(MS.SRC_SYSTEM_ENVIRONMENT_NAME) SRC_SYSTEM_ENVIRONMENT_NAME,
        to_char(MS.SRC_TABLE_NAME) SRC_TABLE_NAME,
        to_char(MS.SRC_COLUMN_NAME) SRC_COLUMN_NAME,
        to_char(MS.SRC_COL_DATATYPE) SRC_COL_DATATYPE,
        MS.SRC_COL_LENGTH,
        NVL(MS.SRC_COL_PRECISION,' ') SRC_COL_PRECISION,
        NVL(MS.SRC_COL_SCALE,' ') SRC_COL_SCALE,
        to_char(MS.TGT_SYSTEM_NAME) TGT_SYSTEM_NAME,
        to_char(MS.TGT_SYSTEM_ENVIRONMENT_NAME) TGT_SYSTEM_ENVIRONMENT_NAME,
        to_char(MS.TGT_TABLE_NAME) TGT_TABLE_NAME,
        to_char(MS.TGT_COLUMN_NAME) TGT_COLUMN_NAME,
        to_char(MS.TGT_COL_DATATYPE) TGT_COL_DATATYPE,
        MS.TGT_COL_LENGTH,
        NVL(MS.TGT_COL_PRECISION,' ') TGT_COL_PRECISION,
        NVL(MS.TGT_COL_SCALE,' ') TGT_COL_SCALE
      FROM APPENDED_MAP_SPEC_RCRDS_V MS
      LEFT OUTER JOIN MAPPING_DETAILS MD
      ON (MS.MAP_ID   = MD.MAP_ID)
      WHERE MS.MAP_ID IN (select * from table(IN_MAP_ID));
  BEGIN
    DELETE FROM MAP_SPCFCTN_DTLS_RPRT_GTT;

    FOR MS_REC IN C_MAPPING_SPEC
    LOOP
      INSERT INTO MAP_SPCFCTN_DTLS_RPRT_GTT R
        (
          R.MAP_ID,
          R.MAP_NAME,
          R.MAP_SEQ_ID,
          R.SRC_SYSTEM_NAME,
          R.SRC_SYSTEM_ENVIRONMENT_NAME,
          R.SRC_TABLE_NAME,
          R.SRC_COLUMN_NAME,
          R.SRC_COL_DATATYPE,
          R.SRC_COL_LENGTH,
          R.SRC_COL_PRECISION,
          R.SRC_COL_SCALE,
          R.TGT_SYSTEM_NAME,
          R.TGT_SYSTEM_ENVIRONMENT_NAME,
          R.TGT_TABLE_NAME,
          R.TGT_COLUMN_NAME,
          R.TGT_COL_DATATYPE,
          R.TGT_COL_LENGTH,
          R.TGT_COL_PRECISION,
          R.TGT_COL_SCALE,
          R.MATCH_SRC_SYSTEM_NAME,
          R.MATCH_SRC_SYS_ENV_NAME,
          R.MATCH_SRC_SYS_TBL_NAME,
          R.MATCH_SRC_SYS_COL_NAME,
          R.MATCH_SRC_SYS_COL_DTYPE,
          R.MATCH_SRC_SYS_COL_LENGTH,
          R.MATCH_SRC_SYS_COL_PRECISION,
          R.MATCH_SRC_SYS_COL_SCALE,
          R.MATCH_TGT_SYSTEM_NAME,
          R.MATCH_TGT_SYS_ENV_NAME,
          R.MATCH_TGT_SYS_TBL_NAME,
          R.MATCH_TGT_SYS_COL_NAME,
          R.MATCH_TGT_SYS_COL_DTYPE,
          R.MATCH_TGT_SYS_COL_LENGTH,
          R.MATCH_TGT_SYS_COL_PRECISION,
          R.MATCH_TGT_SYS_COL_SCALE
        )
    WITH COMPARE_MAP_SPEC AS
      (SELECT MAX(DECODE(STM.SYSTEM_ENV_NAME, MS_REC.SRC_SYSTEM_ENVIRONMENT_NAME, MS_REC.SRC_SYSTEM_NAME)) AS SRC_SYSTEM_NAME,
        MAX(DECODE(STM.SYSTEM_ENV_NAME, MS_REC.SRC_SYSTEM_ENVIRONMENT_NAME, MS_REC.SRC_SYSTEM_ENVIRONMENT_NAME)) AS SRC_SYSTEM_ENVIRONMENT_NAME,
        MAX(DECODE(STM.SYSTEM_ENV_NAME, MS_REC.SRC_SYSTEM_ENVIRONMENT_NAME, MS_REC.SRC_TABLE_NAME )) AS SRC_TABLE_NAME,
        MAX(DECODE(STM.SYSTEM_ENV_NAME, MS_REC.SRC_SYSTEM_ENVIRONMENT_NAME, MS_REC.SRC_COLUMN_NAME)) AS SRC_COLUMN_NAME,
        MAX(DECODE(STM.SYSTEM_ENV_NAME, MS_REC.SRC_SYSTEM_ENVIRONMENT_NAME, MS_REC.SRC_COL_DATATYPE)) AS SRC_COL_DATATYPE,
        MAX(DECODE(STM.SYSTEM_ENV_NAME, MS_REC.SRC_SYSTEM_ENVIRONMENT_NAME, MS_REC.SRC_COL_LENGTH)) AS SRC_COL_LENGTH,
        NVL(MAX(DECODE(STM.SYSTEM_ENV_NAME, MS_REC.SRC_SYSTEM_ENVIRONMENT_NAME, MS_REC.SRC_COL_PRECISION)),' ') AS SRC_COL_PRECISION,
        NVL(MAX(DECODE(STM.SYSTEM_ENV_NAME, MS_REC.SRC_SYSTEM_ENVIRONMENT_NAME, MS_REC.SRC_COL_SCALE)),' ') AS SRC_COL_SCALE,
        MAX(DECODE(STM.SYSTEM_ENV_NAME, MS_REC.TGT_SYSTEM_ENVIRONMENT_NAME, MS_REC.TGT_SYSTEM_NAME)) AS TGT_SYSTEM_NAME,
        MAX(DECODE(STM.SYSTEM_ENV_NAME, MS_REC.TGT_SYSTEM_ENVIRONMENT_NAME, MS_REC.TGT_SYSTEM_ENVIRONMENT_NAME)) AS TGT_SYSTEM_ENVIRONMENT_NAME,
        MAX(DECODE(STM.SYSTEM_ENV_NAME, MS_REC.TGT_SYSTEM_ENVIRONMENT_NAME, MS_REC.TGT_TABLE_NAME)) AS TGT_TABLE_NAME,
        MAX(DECODE(STM.SYSTEM_ENV_NAME, MS_REC.TGT_SYSTEM_ENVIRONMENT_NAME, MS_REC.TGT_COLUMN_NAME)) AS TGT_COLUMN_NAME,
        MAX(DECODE(STM.SYSTEM_ENV_NAME, MS_REC.TGT_SYSTEM_ENVIRONMENT_NAME, MS_REC.TGT_COL_DATATYPE)) AS TGT_COL_DATATYPE,
        MAX(DECODE(STM.SYSTEM_ENV_NAME, MS_REC.TGT_SYSTEM_ENVIRONMENT_NAME, MS_REC.TGT_COL_LENGTH)) AS TGT_COL_LENGTH,
        NVL(MAX(DECODE(STM.SYSTEM_ENV_NAME, MS_REC.TGT_SYSTEM_ENVIRONMENT_NAME, MS_REC.TGT_COL_PRECISION)),' ') AS TGT_COL_PRECISION,
        NVL(MAX(DECODE(STM.SYSTEM_ENV_NAME, MS_REC.TGT_SYSTEM_ENVIRONMENT_NAME, MS_REC.TGT_COL_SCALE)),' ') AS TGT_COL_SCALE,
        MAX(DECODE(SDD.SYSTEM_NAME, MS_REC.SRC_SYSTEM_NAME, SDD.SYSTEM_NAME, NULL)) AS MATCH_SRC_SYSTEM_NAME,
        MAX(DECODE(SCE.SYSTEM_ENVIRONMENT_NAME, MS_REC.SRC_SYSTEM_ENVIRONMENT_NAME, SCE.SYSTEM_ENVIRONMENT_NAME, NULL)) AS MATCH_SRC_SYS_ENV_NAME,
        MAX(DECODE(STM.TABLE_NAME, MS_REC.SRC_TABLE_NAME, STM.TABLE_NAME, NULL)) AS MATCH_SRC_SYS_TBL_NAME,
        MAX(DECODE(STCM.COLUMN_NAME, MS_REC.SRC_COLUMN_NAME, STCM.COLUMN_NAME, NULL)) AS MATCH_SRC_SYS_COL_NAME,
        MAX(DECODE(STCM.COL_DATATYPE, MS_REC.SRC_COL_DATATYPE, STCM.COL_DATATYPE, NULL)) AS MATCH_SRC_SYS_COL_DTYPE,
        MAX(DECODE(STCM.COL_LENGTH, MS_REC.SRC_COL_LENGTH, STCM.COL_LENGTH, NULL)) AS MATCH_SRC_SYS_COL_LENGTH,
        MAX(DECODE(STCM.COL_PRECISION, MS_REC.SRC_COL_PRECISION, STCM.COL_PRECISION, NULL)) AS MATCH_SRC_SYS_COL_PRECISION,
        MAX(DECODE(STCM.COL_SCALE, MS_REC.SRC_COL_SCALE, STCM.COL_SCALE, NULL)) AS MATCH_SRC_SYS_COL_SCALE,
        MAX(DECODE(SDD.SYSTEM_NAME, MS_REC.TGT_SYSTEM_NAME, SDD.SYSTEM_NAME, NULL)) AS MATCH_TGT_SYSTEM_NAME,
        MAX(DECODE(SCE.SYSTEM_ENVIRONMENT_NAME, MS_REC.TGT_SYSTEM_ENVIRONMENT_NAME, SCE.SYSTEM_ENVIRONMENT_NAME, NULL)) AS MATCH_TGT_SYS_ENV_NAME,
        MAX(DECODE(STM.TABLE_NAME, MS_REC.TGT_TABLE_NAME, STM.TABLE_NAME, NULL)) AS MATCH_TGT_SYS_TBL_NAME,
        MAX(DECODE(STCM.COLUMN_NAME, MS_REC.TGT_COLUMN_NAME, STCM.COLUMN_NAME, NULL)) AS MATCH_TGT_SYS_COL_NAME,
        MAX(DECODE(STCM.COL_DATATYPE, MS_REC.TGT_COL_DATATYPE, STCM.COL_DATATYPE, NULL)) AS MATCH_TGT_SYS_COL_DTYPE,
        MAX(DECODE(STCM.COL_LENGTH, MS_REC.TGT_COL_LENGTH, STCM.COL_LENGTH, NULL)) AS MATCH_TGT_SYS_COL_LENGTH,
        MAX(DECODE(STCM.COL_PRECISION, MS_REC.TGT_COL_PRECISION, STCM.COL_PRECISION, NULL)) AS MATCH_TGT_SYS_COL_PRECISION,
        MAX(DECODE(STCM.COL_SCALE, MS_REC.TGT_COL_SCALE, STCM.COL_SCALE, NULL)) AS MATCH_TGT_SYS_COL_SCALE
      FROM SYSTEM_DEFINITION_DETAILS SDD
      INNER JOIN SYS_CON_ENVIRONMENTS SCE
      ON (SDD.SYSTEM_ID = SCE.SYSTEM_ID)
      INNER JOIN SYSTEM_TABLE_METADATA STM
      ON (SCE.SYSTEM_ID               = STM.SYSTEM_ID
      AND SCE.SYSTEM_ENVIRONMENT_NAME = STM.SYSTEM_ENV_NAME)
      INNER JOIN SYSTEM_TABLE_COLUMNS_METADATA STCM
      ON (STM.SYSTEM_ID       = STCM.SYSTEM_ID
      AND STM.TABLE_NAME      = STCM.TABLE_NAME
      AND STM.SYSTEM_ENV_NAME = STCM.SYSTEM_ENV_NAME)
      WHERE STCM.SYSTEM_ENV_NAME  IN (MS_REC.SRC_SYSTEM_ENVIRONMENT_NAME, MS_REC.TGT_SYSTEM_ENVIRONMENT_NAME)
      )
    SELECT DISTINCT MS_REC.MAP_ID,
      MS_REC.MAP_NAME,
      MS_REC.MAP_SEQ_ID,
      MS_REC.SRC_SYSTEM_NAME,
      MS_REC.SRC_SYSTEM_ENVIRONMENT_NAME,
      MS_REC.SRC_TABLE_NAME,
      MS_REC.SRC_COLUMN_NAME,
      MS_REC.SRC_COL_DATATYPE,
      MS_REC.SRC_COL_LENGTH,
      MS_REC.SRC_COL_PRECISION,
      MS_REC.SRC_COL_SCALE,
      MS_REC.TGT_SYSTEM_NAME,
      MS_REC.TGT_SYSTEM_ENVIRONMENT_NAME,
      MS_REC.TGT_TABLE_NAME,
      MS_REC.TGT_COLUMN_NAME,
      MS_REC.TGT_COL_DATATYPE,
      MS_REC.TGT_COL_LENGTH,
      MS_REC.TGT_COL_PRECISION,
      MS_REC.TGT_COL_SCALE,
      C.MATCH_SRC_SYSTEM_NAME,
      (
      CASE
        WHEN (C.MATCH_SRC_SYSTEM_NAME IS NULL)
        THEN NULL
        ELSE C.MATCH_SRC_SYS_ENV_NAME
      END) AS MATCH_SRC_SYS_ENV_NAME,
      (
      CASE
        WHEN ((C.MATCH_SRC_SYSTEM_NAME IS NULL)
          OR (C.MATCH_SRC_SYS_ENV_NAME IS NULL))
        THEN NULL
        ELSE C.MATCH_SRC_SYS_TBL_NAME
      END) AS MATCH_SRC_SYS_TBL_NAME,
      (
      CASE
        WHEN ((C.MATCH_SRC_SYSTEM_NAME IS NULL)
          OR(C.MATCH_SRC_SYS_ENV_NAME IS NULL)
          OR (C.MATCH_SRC_SYS_TBL_NAME    IS NULL))
        THEN NULL
        ELSE C.MATCH_SRC_SYS_COL_NAME
      END) AS MATCH_SRC_SYS_COL_NAME,
      (
      CASE
        WHEN ((C.MATCH_SRC_SYSTEM_NAME IS NULL)
          OR(C.MATCH_SRC_SYS_ENV_NAME IS NULL)
          OR (C.MATCH_SRC_SYS_TBL_NAME    IS NULL)
          OR (C.MATCH_SRC_SYS_COL_NAME    IS NULL))
        THEN NULL
        ELSE C.MATCH_SRC_SYS_COL_DTYPE
      END) AS MATCH_SRC_SYS_COL_DTYPE,
      (
      CASE
        WHEN ((C.MATCH_SRC_SYSTEM_NAME IS NULL)
          OR(C.MATCH_SRC_SYS_ENV_NAME IS NULL)
          OR (C.MATCH_SRC_SYS_TBL_NAME    IS NULL)
          OR (C.MATCH_SRC_SYS_COL_NAME    IS NULL)
          OR (C.MATCH_SRC_SYS_COL_DTYPE    IS NULL))
        THEN NULL
        ELSE C.MATCH_SRC_SYS_COL_LENGTH
        END
      ) AS MATCH_SRC_SYS_COL_LENGTH,
      (
      CASE
        WHEN ((C.MATCH_SRC_SYSTEM_NAME IS NULL)
          OR(C.MATCH_SRC_SYS_ENV_NAME IS NULL)
          OR (C.MATCH_SRC_SYS_TBL_NAME    IS NULL)
          OR (C.MATCH_SRC_SYS_COL_NAME    IS NULL)
          OR (C.MATCH_SRC_SYS_COL_DTYPE    IS NULL)
          OR (C.MATCH_SRC_SYS_COL_LENGTH    IS NULL))
        THEN NULL
        ELSE C.MATCH_SRC_SYS_COL_PRECISION
        END
      ) AS MATCH_SRC_SYS_COL_PRECISION,
      (
      CASE
        WHEN ((C.MATCH_SRC_SYSTEM_NAME IS NULL)
          OR(C.MATCH_SRC_SYS_ENV_NAME IS NULL)
          OR (C.MATCH_SRC_SYS_TBL_NAME    IS NULL)
          OR (C.MATCH_SRC_SYS_COL_NAME    IS NULL)
          OR (C.MATCH_SRC_SYS_COL_DTYPE    IS NULL)
          OR (C.MATCH_SRC_SYS_COL_LENGTH    IS NULL)
          OR (C.MATCH_SRC_SYS_COL_PRECISION    IS NULL))
        THEN NULL
        ELSE C.MATCH_SRC_SYS_COL_SCALE
        END
      ) AS MATCH_SRC_SYS_COL_SCALE,
      C.MATCH_TGT_SYSTEM_NAME,
      (
      CASE
        WHEN (C.MATCH_TGT_SYSTEM_NAME IS NULL)
        THEN NULL
        ELSE C.MATCH_TGT_SYS_ENV_NAME
      END) AS MATCH_TGT_SYS_ENV_NAME,
      (
      CASE
        WHEN ((C.MATCH_TGT_SYSTEM_NAME IS NULL)
          OR (C.MATCH_TGT_SYS_ENV_NAME IS NULL))
        THEN NULL
        ELSE C.MATCH_TGT_SYS_TBL_NAME
      END) AS MATCH_TGT_SYS_TBL_NAME,
      (
      CASE
        WHEN ((C.MATCH_TGT_SYSTEM_NAME IS NULL)
          OR(C.MATCH_TGT_SYS_ENV_NAME IS NULL)
          OR (C.MATCH_TGT_SYS_TBL_NAME    IS NULL))
        THEN NULL
        ELSE C.MATCH_TGT_SYS_COL_NAME
      END) AS MATCH_TGT_SYS_COL_NAME,
      (
      CASE
        WHEN ((C.MATCH_TGT_SYSTEM_NAME IS NULL)
          OR (C.MATCH_TGT_SYS_ENV_NAME IS NULL)
          OR (C.MATCH_TGT_SYS_TBL_NAME    IS NULL)
          OR (C.MATCH_TGT_SYS_COL_NAME    IS NULL))
        THEN NULL
        ELSE C.MATCH_TGT_SYS_COL_DTYPE
      END) AS MATCH_TGT_SYS_COL_DTYPE,
      (
      CASE
        WHEN ((C.MATCH_TGT_SYSTEM_NAME IS NULL)
          OR (C.MATCH_TGT_SYS_ENV_NAME IS NULL)
          OR (C.MATCH_TGT_SYS_TBL_NAME    IS NULL)
          OR (C.MATCH_TGT_SYS_COL_NAME    IS NULL)
          OR (C.MATCH_TGT_SYS_COL_DTYPE    IS NULL))
        THEN NULL
        ELSE C.MATCH_TGT_SYS_COL_LENGTH
        END
      ) AS MATCH_TGT_SYS_COL_LENGTH,
      (
      CASE
        WHEN ((C.MATCH_TGT_SYSTEM_NAME IS NULL)
          OR (C.MATCH_TGT_SYS_ENV_NAME IS NULL)
          OR (C.MATCH_TGT_SYS_TBL_NAME    IS NULL)
          OR (C.MATCH_TGT_SYS_COL_NAME    IS NULL)
          OR (C.MATCH_TGT_SYS_COL_DTYPE    IS NULL)
          OR (C.MATCH_TGT_SYS_COL_LENGTH    IS NULL))
        THEN NULL
        ELSE C.MATCH_TGT_SYS_COL_PRECISION
        END
      ) AS MATCH_TGT_SYS_COL_PRECISION,
      (
      CASE
        WHEN ((C.MATCH_TGT_SYSTEM_NAME IS NULL)
          OR (C.MATCH_TGT_SYS_ENV_NAME IS NULL)
          OR (C.MATCH_TGT_SYS_TBL_NAME    IS NULL)
          OR (C.MATCH_TGT_SYS_COL_NAME    IS NULL)
          OR (C.MATCH_TGT_SYS_COL_DTYPE    IS NULL)
          OR (C.MATCH_TGT_SYS_COL_LENGTH    IS NULL)
          OR (C.MATCH_TGT_SYS_COL_PRECISION    IS NULL))
        THEN NULL
        ELSE C.MATCH_TGT_SYS_COL_SCALE
        END
      ) AS MATCH_TGT_SYS_COL_SCALE
    FROM COMPARE_MAP_SPEC C;
  END LOOP;
  COMMIT;
  OPEN L_MAP_SPEC_CMPR_RSLTS FOR
  SELECT DISTINCT * FROM MAP_SPCFCTN_DTLS_RPRT_GTT ORDER BY MAP_NAME, MAP_SEQ_ID;
  RETURN L_MAP_SPEC_CMPR_RSLTS;
END FN_VLDT_MPPNG_SPCFCTN_DTLS;
/
DECLARE
   COLUMNCHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO COLUMNCHECKERFLAG FROM ALL_TAB_COLUMNS WHERE  OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME = UPPER('SYSTEM_TABLE_METADATA') AND COLUMN_NAME=UPPER('TABLE_DEF_COMMENTS');
   IF COLUMNCHECKERFLAG = 1 THEN
      EXECUTE IMMEDIATE 'ALTER TABLE SYSTEM_TABLE_METADATA RENAME COLUMN "TABLE_DEF_COMMENTS" TO "TABLE_DEF"';
   END IF;
END;
/
DECLARE
   COLUMNCHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO COLUMNCHECKERFLAG FROM ALL_TAB_COLUMNS WHERE  OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME = UPPER('SYSTEM_TABLE_METADATA') AND COLUMN_NAME=UPPER('TABLE_COMMENTS');
   IF COLUMNCHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'ALTER TABLE SYSTEM_TABLE_METADATA ADD TABLE_COMMENTS VARCHAR2(4000) NULL';
   END IF;
END;
/
DECLARE
   TABLECHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO TABLECHECKERFLAG FROM all_VIEWS WHERE OWNER = sys_context('userenv', 'current_schema') AND VIEW_NAME = UPPER('VALID_SYSTEM_TABLE_METADATA');
   IF TABLECHECKERFLAG = 1 THEN
      EXECUTE IMMEDIATE 'DROP VIEW VALID_SYSTEM_TABLE_METADATA';
   END IF;
END;
/
CREATE OR REPLACE FORCE VIEW  "VALID_SYSTEM_TABLE_METADATA" ("SYSTEM_ID", "TABLE_NAME", "SYSTEM_ENV_NAME", "TABLE_DEF", "CREATED_DATETIME", "LAST_MODIFIED_BY", "LAST_MODIFIED_DATE_TIME", "CREATED_BY", "NUMBER_ROWS", "TYPE", "LOGICAL_TABLE_NAME", "VALID", "ACTUAL_TABLE_NAME","USER_DEFINED1", "USER_DEFINED2", "USER_DEFINED3", "USER_DEFINED4", "USER_DEFINED5", "USED_IN_GAP_ANALYSIS", "TABLE_COMMENTS") AS
                        SELECT SYSTEM_ID, TABLE_NAME, SYSTEM_ENV_NAME, TABLE_DEF, CREATED_DATETIME, LAST_MODIFIED_BY, LAST_MODIFIED_DATE_TIME, CREATED_BY, NUMBER_ROWS, TYPE , LOGICAL_TABLE_NAME, VALID, ACTUAL_TABLE_NAME, USER_DEFINED1, USER_DEFINED2, USER_DEFINED3, USER_DEFINED4, USER_DEFINED5, USED_IN_GAP_ANALYSIS, TABLE_COMMENTS FROM SYSTEM_TABLE_METADATA
                        WHERE  VALID = 1 OR VALID IS NULL

/

DECLARE
   COLUMNCHECKERFLAG INT;
   COLCHECK INT;
BEGIN
   SELECT COUNT(*) INTO COLUMNCHECKERFLAG FROM ALL_TAB_COLUMNS WHERE  OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME = UPPER('MAPPING_SPECIFICATION') AND COLUMN_NAME=UPPER('LOOKUP_COLUMN');
   SELECT COUNT(*) INTO COLCHECK FROM ALL_TAB_COLUMNS WHERE  OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME=UPPER('MAPPING_SPECIFICATION') AND COLUMN_NAME = UPPER('LOOKUP_ON');
   IF COLUMNCHECKERFLAG = 1 AND COLCHECK<>1 THEN
      EXECUTE IMMEDIATE 'ALTER TABLE MAPPING_SPECIFICATION RENAME COLUMN "LOOKUP_COLUMN" TO "LOOKUP_ON"';
   END IF;
END;
/
DECLARE
   V_CHECK INT;
BEGIN
	BEGIN
      SELECT 1 INTO V_CHECK
        FROM DUAL
       WHERE NOT EXISTS ( SELECT *
                          FROM USER_PREFERENCES
                             WHERE USER_ID LIKE 'SETTINGS_VERSION_LABEL%' );
		EXCEPTION
		WHEN OTHERS THEN
		 NULL;
		END;
     IF V_CHECK = 1 THEN
      INSERT INTO USER_PREFERENCES (USER_ID,COLUMN_PREFERENCES)
        VALUES ( 'SETTINGS_VERSION_LABEL_MAPPING_MANAGER_Administrator', 'true' );
   END IF;
END;
/
DECLARE
   TABLECHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO TABLECHECKERFLAG FROM all_VIEWS WHERE OWNER = sys_context('userenv', 'current_schema') AND VIEW_NAME = UPPER('MAPPINGTESTSTATUS');
   IF TABLECHECKERFLAG = 1 THEN
      EXECUTE IMMEDIATE 'DROP VIEW MAPPINGTESTSTATUS';
      EXECUTE IMMEDIATE 'CREATE OR REPLACE FORCE VIEW  "MAPPINGTESTSTATUS" ("TESTSTATUS", "MAP_ID", "MAP_NAME", "MAP_SPEC_VERSION","VERSIONLABEL", "TESTING_NOTES", "PROJECT_ID", "PROJECTNAME", "PROJECTDESCRIPTION", "MAPPINGSTATUS") AS
                        SELECT CASE
                        WHEN TEST_DISPOSITION = ''U'' THEN ''UNASSIGNED''
                        ELSE CASE
                        WHEN TEST_DISPOSITION = ''P'' THEN ''PASSED''
                        ELSE CASE
                        WHEN TEST_DISPOSITION = ''F'' THEN ''FAILED''
                        ELSE CASE
                        WHEN TEST_DISPOSITION = ''N'' THEN ''NEEDS ANALYSIS''
                        ELSE ''''
                        END
                        END
                        END
                        END   AS TESTSTATUS,
                        MAP_ID,
                        MAP_NAME,
                        MAP_SPEC_VERSION,
                        VERSIONLABEL,
                        TESTING_NOTES,
                        PROJECT_ID,
                        PROJECT.PROJ_NAME  AS PROJECTNAME,
                        PROJECT.PROJ_DESCR AS PROJECTDESCRIPTION,
                        STATUS AS MAPPINGSTATUS
                        FROM   MAPPING_DETAILS
                        LEFT JOIN PROJECT
                        ON PROJECT.PROJ_ID = MAPPING_DETAILS.PROJECT_ID';
   END IF;
END;
/
DECLARE
   TABLECHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO TABLECHECKERFLAG FROM all_VIEWS WHERE OWNER = sys_context('userenv', 'current_schema') AND VIEW_NAME = UPPER('TESTING_STATUS_DETAILS_V');
   IF TABLECHECKERFLAG = 1 THEN
      EXECUTE IMMEDIATE 'DROP VIEW TESTING_STATUS_DETAILS_V';
      EXECUTE IMMEDIATE 'CREATE OR REPLACE FORCE VIEW  "TESTING_STATUS_DETAILS_V" ("TESTSTATUS", "MAP_ID", "MAP_NAME", "MAP_SPEC_VERSION","VERSIONLABEL","TESTING_NOTES","PROJECT_ID","PROJECTNAME", "PROJECTDESCRIPTION", "MAPPINGSTATUS","TESTERSTATUS","ASSIGNEDTOUSERID","ASSGINEDTOUSERNAME") AS
                         select mappingteststatus.TESTSTATUS,mappingteststatus.MAP_ID,mappingteststatus.MAP_NAME,mappingteststatus.MAP_SPEC_VERSION,mappingteststatus.VERSIONLABEL,
                         mappingteststatus.TESTING_NOTES, mappingteststatus.PROJECT_ID,mappingteststatus.PROJECTNAME,mappingteststatus.PROJECTDESCRIPTION,mappingteststatus.MAPPINGSTATUS,
                         NVL(testermappings.STATUS, '''') as testerstatus,
                         NVL(testermappings.USER_ID, '''') assignedtouserid,
                         NVL(users.user_full_name, '''') as assginedtousername
                         from mappingteststatus
                         left join testermappings on mappingteststatus.map_id = testermappings.MAP_ID
                         left join users on testermappings.USER_ID = users.user_id';
   END IF;
END;
/

DECLARE
   COLUMNCHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO COLUMNCHECKERFLAG FROM ALL_TAB_COLUMNS WHERE  OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME = UPPER('MAPPING_SPECIFICATION') AND COLUMN_NAME=UPPER('LOOKUP_COLUMN');
   IF COLUMNCHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'ALTER TABLE MAPPING_SPECIFICATION ADD LOOKUP_COLUMN VARCHAR2(4000) NULL';
   END IF;
END;
/
DECLARE
   COLUMNCHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO COLUMNCHECKERFLAG FROM ALL_TAB_COLUMNS WHERE  OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME = UPPER('TRANSFORMATIONS') AND COLUMN_NAME=UPPER('TRANSFORMATION_SCOPE');
   IF COLUMNCHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'ALTER TABLE TRANSFORMATIONS ADD TRANSFORMATION_SCOPE VARCHAR2(4000) DEFAULT (''-1'') NOT NULL';
   END IF;
END;
/
DECLARE
   TABLECHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO TABLECHECKERFLAG FROM ALL_TABLES WHERE OWNER = sys_context( 'userenv', 'current_schema' ) AND TABLE_NAME = UPPER('LANGUAGE_PREFERENCES');
   IF TABLECHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'CREATE TABLE  "LANGUAGE_PREFERENCES"    ("LANG_PREF_ID" NUMBER NOT NULL ENABLE ,	"KEY_ID" VARCHAR2(4000), 	"KEY_DESCRIPTION" VARCHAR2(4000), 	"ENGLISH" VARCHAR2(4000), 	"CHINESE" VARCHAR2(4000), 	"FRENCH" VARCHAR2(4000), 	"GERMAN" VARCHAR2(4000), 	"HEBREW" VARCHAR2(4000), 	"PORTUGESE" VARCHAR2(4000), 	"RUSSIAN" VARCHAR2(4000),
 	"SPANISH" VARCHAR2(4000), 	"PARENT_ID" NUMBER)';
   END IF;
END;
/
DECLARE
   COLUMNCHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO COLUMNCHECKERFLAG FROM ALL_TAB_COLUMNS WHERE  OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME = UPPER('SYS_CON_ENVIRONMENTS') AND COLUMN_NAME=UPPER('PWD_ENCRYPT_FLAG');
   IF COLUMNCHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'ALTER TABLE SYS_CON_ENVIRONMENTS ADD PWD_ENCRYPT_FLAG CHAR(1 BYTE) DEFAULT ''N'' NOT NULL';
  END IF;
END;
/

DECLARE
   TABLECHECKERFLAG INT;
   TABLEVERCHECKFLAG INT;
BEGIN
   SELECT COUNT(*) INTO TABLEVERCHECKFLAG FROM ALL_TABLES WHERE OWNER = sys_context( 'userenv', 'current_schema' ) AND TABLE_NAME = UPPER('ADS_MM_VERSION');
   SELECT COUNT(*) INTO TABLECHECKERFLAG FROM ALL_TABLES WHERE OWNER = sys_context( 'userenv', 'current_schema' ) AND TABLE_NAME = UPPER('APP_PERMISSIONS');
   IF TABLECHECKERFLAG = 0 AND TABLEVERCHECKFLAG = 0 THEN
      EXECUTE IMMEDIATE 'CREATE TABLE APP_PERMISSIONS  (
	"PERMISSION_ID"          	int NOT NULL,
	"PERMISSION_NAME"        	varchar2(4000) NOT NULL,
	"LAST_MODIFIED_BY"       	varchar2(4000) NULL,
	"LAST_MODIFIED_DATE_TIME"	timestamp NULL,
	"PERMISSION_PARENT_ID"   	int NOT NULL,
        "DISPLAY_ORDER"                   FLOAT(126) NULL,
	CONSTRAINT PK_APP_PERMISSION PRIMARY KEY ("PERMISSION_ID") ENABLE)';
   END IF;
END;
/
DECLARE
   TABLECHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO TABLECHECKERFLAG FROM ALL_TABLES WHERE OWNER = sys_context( 'userenv', 'current_schema' ) AND TABLE_NAME = UPPER('MMROLE_PERMISSIONS');
   IF TABLECHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'CREATE TABLE MMROLE_PERMISSIONS  (
	ID           	int NOT NULL,
	MMROLE_ID    	int NOT NULL,
	PERMISSION_ID	int NOT NULL,
	ENABLED      	int NOT NULL,
	CONSTRAINT PK_MMROLE_PERMISSIONS PRIMARY KEY (ID) ENABLE)';
   END IF;
END;
/
DECLARE
   SEQUENCECHECKERFLAG INT;
BEGIN
    SELECT COUNT(*) INTO SEQUENCECHECKERFLAG FROM ALL_SEQUENCES WHERE SEQUENCE_OWNER = sys_context('userenv', 'current_schema') AND SEQUENCE_NAME = UPPER('MMROLE_PERMISSIONS_SEQ');
   IF SEQUENCECHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'CREATE SEQUENCE  "MMROLE_PERMISSIONS_SEQ"  MINVALUE 1 MAXVALUE 999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE';
   END IF;
END;
/
DECLARE
  TRIGGERCHECKERFLAG INT;
BEGIN
  SELECT COUNT(*)
  INTO TRIGGERCHECKERFLAG
  FROM all_triggers
  WHERE OWNER = sys_context('userenv', 'current_schema') AND trigger_name = UPPER('MMROLE_PERM_INSERT');
  IF TRIGGERCHECKERFLAG = 0 THEN
    EXECUTE IMMEDIATE 'CREATE OR REPLACE TRIGGER  "MMROLE_PERM_INSERT" BEFORE INSERT ON MMROLE_PERMISSIONS FOR EACH ROW BEGIN SELECT MMROLE_PERMISSIONS_SEQ.NEXTVAL INTO :new.ID FROM DUAL; END;';
    EXECUTE IMMEDIATE 'ALTER TRIGGER "MMROLE_PERM_INSERT" ENABLE';
  END IF;
END;
/
DECLARE
   TABLECHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO TABLECHECKERFLAG FROM ALL_TABLES WHERE OWNER = sys_context( 'userenv', 'current_schema' ) AND TABLE_NAME = UPPER('RM_MIGRATIONOBJECTTYPE');
   IF TABLECHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'CREATE TABLE RM_MIGRATIONOBJECTTYPE (
  MIGRATIONOBJECTTYPEID INTEGER  NOT NULL ,
  MIGRATIONOBJECTTYPENAME VARCHAR2(15) NULL,
  MIGRATIONOBJECTTYPEDESC VARCHAR2(150) NULL,
  CONSTRAINT PK_RM_MIG_OBJ_TYPE_ID PRIMARY KEY(MIGRATIONOBJECTTYPEID) ENABLE
)';
END IF;
END;
/
DECLARE
   SEQUENCECHECKERFLAG INT;
BEGIN
    SELECT COUNT(*) INTO SEQUENCECHECKERFLAG FROM ALL_SEQUENCES WHERE SEQUENCE_OWNER = sys_context('userenv', 'current_schema') AND SEQUENCE_NAME = UPPER('RM_MIG_OBJ_TYPE_SEQ');
   IF SEQUENCECHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'CREATE SEQUENCE  "RM_MIG_OBJ_TYPE_SEQ"  MINVALUE 1 MAXVALUE 999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE';
   END IF;
END;
/
DECLARE
  TRIGGERCHECKERFLAG INT;
BEGIN
  SELECT COUNT(*)
  INTO TRIGGERCHECKERFLAG
  FROM all_triggers
  WHERE OWNER = sys_context('userenv', 'current_schema') AND TRIGGER_NAME = UPPER('RM_MIG_OBJ_TYPE_INSERT');
  IF TRIGGERCHECKERFLAG = 0 THEN
    EXECUTE IMMEDIATE 'CREATE OR REPLACE TRIGGER  "RM_MIG_OBJ_TYPE_INSERT" BEFORE INSERT ON RM_MIGRATIONOBJECTTYPE FOR EACH ROW BEGIN SELECT RM_MIG_OBJ_TYPE_SEQ.NEXTVAL INTO :NEW.MIGRATIONOBJECTTYPEID FROM DUAL; END;';
    EXECUTE IMMEDIATE 'ALTER TRIGGER "RM_MIG_OBJ_TYPE_INSERT" ENABLE';
  END IF;
END;
/
DECLARE
   TABLECHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO TABLECHECKERFLAG FROM ALL_TABLES WHERE OWNER = sys_context( 'userenv', 'current_schema' ) AND TABLE_NAME = UPPER('RM_ENVIRONMENT');
   IF TABLECHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'CREATE TABLE RM_ENVIRONMENT (
  ENVIRONMENTID INTEGER  NOT NULL ,
  ENVIRONMENTNAME VARCHAR2(10) NULL,
  ENVIRONMENTDESC VARCHAR2(50) NULL,
  CONSTRAINT PK_RM_ENV_ID PRIMARY KEY(ENVIRONMENTID) ENABLE
)';
END IF;
END;
/
DECLARE
   SEQUENCECHECKERFLAG INT;
BEGIN
    SELECT COUNT(*) INTO SEQUENCECHECKERFLAG FROM ALL_SEQUENCES WHERE SEQUENCE_OWNER = sys_context('userenv', 'current_schema') AND SEQUENCE_NAME = UPPER('RM_ENVIRONMENT_SEQ');
   IF SEQUENCECHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'CREATE SEQUENCE  "RM_ENVIRONMENT_SEQ"  MINVALUE 1 MAXVALUE 999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE';
   END IF;
END;
/
DECLARE
  TRIGGERCHECKERFLAG INT;
BEGIN
  SELECT COUNT(*)
  INTO TRIGGERCHECKERFLAG
  FROM all_triggers
  WHERE OWNER = sys_context('userenv', 'current_schema') AND TRIGGER_NAME = UPPER('RM_ENV_INSERT');
  IF TRIGGERCHECKERFLAG = 0 THEN
    EXECUTE IMMEDIATE 'CREATE OR REPLACE TRIGGER  "RM_ENV_INSERT" BEFORE INSERT ON RM_ENVIRONMENT FOR EACH ROW BEGIN SELECT RM_ENVIRONMENT_SEQ.NEXTVAL INTO :NEW.ENVIRONMENTID FROM DUAL; END;';
    EXECUTE IMMEDIATE 'ALTER TRIGGER "RM_ENV_INSERT" ENABLE';
  END IF;
END;
/
DECLARE
   TABLECHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO TABLECHECKERFLAG FROM ALL_TABLES WHERE OWNER = sys_context( 'userenv', 'current_schema' ) AND TABLE_NAME = UPPER('RM_HISTORYTYPE');
   IF TABLECHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'CREATE TABLE RM_HISTORYTYPE (
  HISTORYTYPEID INTEGER  NOT NULL ,
  HISTORYTYPENAME VARCHAR2(25) NULL,
  HISTORYTYPEDESC VARCHAR2(50) NULL,
  CONSTRAINT PK_RM_HIST_TYPE_ID PRIMARY KEY(HISTORYTYPEID) ENABLE
)';
END IF;
END;
/
DECLARE
   SEQUENCECHECKERFLAG INT;
BEGIN
    SELECT COUNT(*) INTO SEQUENCECHECKERFLAG FROM ALL_SEQUENCES WHERE SEQUENCE_OWNER = sys_context('userenv', 'current_schema') AND SEQUENCE_NAME = UPPER('RM_HIST_TYPE_SEQ');
   IF SEQUENCECHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'CREATE SEQUENCE  "RM_HIST_TYPE_SEQ"  MINVALUE 1 MAXVALUE 999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE';
   END IF;
END;
/
DECLARE
  TRIGGERCHECKERFLAG INT;
BEGIN
  SELECT COUNT(*)
  INTO TRIGGERCHECKERFLAG
  FROM all_triggers
  WHERE OWNER = sys_context('userenv', 'current_schema') AND TRIGGER_NAME = UPPER('RM_HIST_TYPE_INSERT');
  IF TRIGGERCHECKERFLAG = 0 THEN
    EXECUTE IMMEDIATE 'CREATE OR REPLACE TRIGGER  "RM_HIST_TYPE_INSERT" BEFORE INSERT ON RM_HISTORYTYPE FOR EACH ROW BEGIN SELECT RM_HIST_TYPE_SEQ.NEXTVAL INTO :NEW.HISTORYTYPEID FROM DUAL; END;';
    EXECUTE IMMEDIATE 'ALTER TRIGGER "RM_HIST_TYPE_INSERT" ENABLE';
  END IF;
END;
/
DECLARE
   TABLECHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO TABLECHECKERFLAG FROM ALL_TABLES WHERE OWNER = sys_context( 'userenv', 'current_schema' ) AND TABLE_NAME = UPPER('RM_RESOURCE');
   IF TABLECHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'CREATE TABLE RM_RESOURCE (
  RESOURCEID INTEGER  NOT NULL ,
  RESOURCENAME VARCHAR2(100) NULL,
  RESOURCEDESC VARCHAR2(150) NULL,
  RESOURCECELLPHONE VARCHAR2(15) NULL,
  RESOURCEHOMEPHONE VARCHAR2(15) NULL,
  RESOURCEEMAIL VARCHAR2(50) NULL,
  CONSTRAINT PK_RM_RESOURCE_ID PRIMARY KEY(RESOURCEID) ENABLE
)';
END IF;
END;
/
DECLARE
   SEQUENCECHECKERFLAG INT;
BEGIN
    SELECT COUNT(*) INTO SEQUENCECHECKERFLAG FROM ALL_SEQUENCES WHERE SEQUENCE_OWNER = sys_context('userenv', 'current_schema') AND SEQUENCE_NAME = UPPER('RM_RESOURCE_SEQ');
   IF SEQUENCECHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'CREATE SEQUENCE  "RM_RESOURCE_SEQ"  MINVALUE 1 MAXVALUE 999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE';
   END IF;
END;
/
DECLARE
  TRIGGERCHECKERFLAG INT;
BEGIN
  SELECT COUNT(*)
  INTO TRIGGERCHECKERFLAG
  FROM all_triggers
  WHERE OWNER = sys_context('userenv', 'current_schema') AND TRIGGER_NAME = UPPER('RM_RESOURCE_INSERT');
  IF TRIGGERCHECKERFLAG = 0 THEN
    EXECUTE IMMEDIATE 'CREATE OR REPLACE TRIGGER  "RM_RESOURCE_INSERT" BEFORE INSERT ON RM_RESOURCE FOR EACH ROW BEGIN SELECT RM_RESOURCE_SEQ.NEXTVAL INTO :NEW.RESOURCEID FROM DUAL; END;';
    EXECUTE IMMEDIATE 'ALTER TRIGGER "RM_RESOURCE_INSERT" ENABLE';
  END IF;
END;
/

DECLARE
   TABLECHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO TABLECHECKERFLAG FROM ALL_TABLES WHERE OWNER = sys_context( 'userenv', 'current_schema' ) AND TABLE_NAME = UPPER('RM_HISTORY');
   IF TABLECHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'CREATE TABLE RM_HISTORY (
  HISTORYID INTEGER  NOT NULL ,
  HISTORYTYPEID INTEGER  NOT NULL,
  HISTORYDESC VARCHAR2(4000) NULL,
  OBJECTID INTEGER  NOT NULL,
  OBJECTTYPEID INTEGER NOT NULL,
  HISTORYDATESTAMP TIMESTAMP NOT NULL,
  USER_ID VARCHAR2(20) NOT NULL,
  CONSTRAINT PK_RM_HIST_ID PRIMARY KEY(HISTORYID) ENABLE,
  CONSTRAINT FK_RM_HIST_TYPE_ID FOREIGN KEY(HISTORYTYPEID)
    REFERENCES RM_HISTORYTYPE (HISTORYTYPEID)
      ON DELETE CASCADE ENABLE,
  CONSTRAINT FK_RM_USER_ID FOREIGN KEY (USER_ID)
    REFERENCES USERS (USER_ID)
      ON DELETE CASCADE ENABLE
)';
END IF;
END;
/
DECLARE
   SEQUENCECHECKERFLAG INT;
BEGIN
    SELECT COUNT(*) INTO SEQUENCECHECKERFLAG FROM ALL_SEQUENCES WHERE SEQUENCE_OWNER = sys_context('userenv', 'current_schema') AND SEQUENCE_NAME = UPPER('RM_HISTORY_SEQ');
   IF SEQUENCECHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'CREATE SEQUENCE  "RM_HISTORY_SEQ"  MINVALUE 1 MAXVALUE 999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE';
   END IF;
END;
/
DECLARE
  TRIGGERCHECKERFLAG INT;
BEGIN
  SELECT COUNT(*)
  INTO TRIGGERCHECKERFLAG
  FROM all_triggers
  WHERE OWNER = sys_context('userenv', 'current_schema') AND TRIGGER_NAME = UPPER('RM_HISTORY_INSERT');
  IF TRIGGERCHECKERFLAG = 0 THEN
    EXECUTE IMMEDIATE 'CREATE OR REPLACE TRIGGER  "RM_HISTORY_INSERT" BEFORE INSERT ON RM_HISTORY FOR EACH ROW BEGIN SELECT RM_HISTORY_SEQ.NEXTVAL INTO :NEW.HISTORYID FROM DUAL; END;';
    EXECUTE IMMEDIATE 'ALTER TRIGGER "RM_HISTORY_INSERT" ENABLE';
  END IF;
END;
/
DECLARE
   TABLECHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO TABLECHECKERFLAG FROM ALL_TABLES WHERE OWNER = sys_context( 'userenv', 'current_schema' ) AND TABLE_NAME = UPPER('RM_MIGRATIONDOCUMENT');
   IF TABLECHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'CREATE TABLE RM_MIGRATIONDOCUMENT (
  MIGRATIONDOCUMENTID INTEGER NOT NULL ,
  MIGRATIONDOCUMENTNAME VARCHAR2(50) NULL,
  MIGRATIONDOCUMENTDESC VARCHAR2(4000) NULL,
  MIGRATIONDOCUMENTCONTENT BLOB NULL,
  MIGRATIONDOCUMENTFILENAME VARCHAR2(4000),
  CONSTRAINT PK_RM_MIG_DOC_ID PRIMARY KEY (MIGRATIONDOCUMENTID) ENABLE
)';
END IF;
END;
/
DECLARE
   SEQUENCECHECKERFLAG INT;
BEGIN
    SELECT COUNT(*) INTO SEQUENCECHECKERFLAG FROM ALL_SEQUENCES WHERE SEQUENCE_OWNER = sys_context('userenv', 'current_schema') AND SEQUENCE_NAME = UPPER('RM_MIG_DOC_SEQ');
   IF SEQUENCECHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'CREATE SEQUENCE  "RM_MIG_DOC_SEQ"  MINVALUE 1 MAXVALUE 999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE';
   END IF;
END;
/
DECLARE
  TRIGGERCHECKERFLAG INT;
BEGIN
  SELECT COUNT(*)
  INTO TRIGGERCHECKERFLAG
  FROM all_triggers
  WHERE OWNER = sys_context('userenv', 'current_schema') AND TRIGGER_NAME = UPPER('RM_MIG_DOC_INSERT');
  IF TRIGGERCHECKERFLAG = 0 THEN
    EXECUTE IMMEDIATE 'CREATE OR REPLACE TRIGGER  "RM_MIG_DOC_INSERT" BEFORE INSERT ON RM_MIGRATIONDOCUMENT FOR EACH ROW BEGIN SELECT RM_MIG_DOC_SEQ.NEXTVAL INTO :NEW.MIGRATIONDOCUMENTID FROM DUAL; END;';
    EXECUTE IMMEDIATE 'ALTER TRIGGER "RM_MIG_DOC_INSERT" ENABLE';
  END IF;
END;
/
DECLARE
   TABLECHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO TABLECHECKERFLAG FROM ALL_TABLES WHERE OWNER = sys_context( 'userenv', 'current_schema' ) AND TABLE_NAME = UPPER('RM_MIGRATIONSTATUS');
   IF TABLECHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'CREATE TABLE RM_MIGRATIONSTATUS
(
   MIGRATIONSTATUSID INTEGER  NOT NULL ,
   MIGRATIONSTATUSNAME VARCHAR2(50) NOT NULL,
   MIGRATIONSTATUSDESC VARCHAR2(100),
   MIGRATIONSTATUSCOLOR VARCHAR2(7),
   MIGRATIONSTATUSFONTCOLOR VARCHAR2(7),
   MIGRATIONSTATUSBORDERCOLOR VARCHAR2(7) NULL,
   MIGRATIONSTATUSBORDERTYPE VARCHAR2(7) NULL,
   ROSTATUSFONTCOLOR VARCHAR2(7) NULL,
   ROSTATUSBACKGROUNDCOLOR VARCHAR2(7) NULL,
   ROSTATUSBORDERCOLOR VARCHAR2(7) NULL,
   ROSTATUSBORDERTYPE VARCHAR2(7) NULL,
   CONSTRAINT PK_RM_MIG_STAT PRIMARY KEY(MIGRATIONSTATUSID) ENABLE
)';
END IF;
END;
/
DECLARE
   SEQUENCECHECKERFLAG INT;
BEGIN
    SELECT COUNT(*) INTO SEQUENCECHECKERFLAG FROM ALL_SEQUENCES WHERE SEQUENCE_OWNER = sys_context('userenv', 'current_schema') AND SEQUENCE_NAME = UPPER('RM_MIG_STAT_SEQ');
   IF SEQUENCECHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'CREATE SEQUENCE  "RM_MIG_STAT_SEQ"  MINVALUE 1 MAXVALUE 999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE';
   END IF;
END;
/
DECLARE
  TRIGGERCHECKERFLAG INT;
BEGIN
  SELECT COUNT(*)
  INTO TRIGGERCHECKERFLAG
  FROM all_triggers
  WHERE OWNER = sys_context('userenv', 'current_schema') AND TRIGGER_NAME = UPPER('RM_MIG_STAT_INSERT');
  IF TRIGGERCHECKERFLAG = 0 THEN
    EXECUTE IMMEDIATE 'CREATE OR REPLACE TRIGGER  "RM_MIG_STAT_INSERT" BEFORE INSERT ON RM_MIGRATIONSTATUS FOR EACH ROW BEGIN SELECT RM_MIG_STAT_SEQ.NEXTVAL INTO :NEW.MIGRATIONSTATUSID FROM DUAL; END;';
    EXECUTE IMMEDIATE 'ALTER TRIGGER "RM_MIG_STAT_INSERT" ENABLE';
  END IF;
END;
/
DECLARE
   TABLECHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO TABLECHECKERFLAG FROM ALL_TABLES WHERE OWNER = sys_context( 'userenv', 'current_schema' ) AND TABLE_NAME = UPPER('RM_PROJECT');
   IF TABLECHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'CREATE TABLE RM_PROJECT (
  PROJECTID INTEGER  NOT NULL ,
  RESOURCEID INTEGER  NOT NULL,
  PROJECTNAME VARCHAR2(100) NULL,
  PROJECTDESC VARCHAR2(150) NULL,
  CONSTRAINT PK_RM_PROJ_ID PRIMARY KEY(PROJECTID) ENABLE,
  CONSTRAINT FK_RM_RES_ID FOREIGN KEY (RESOURCEID)
    REFERENCES RM_RESOURCE (RESOURCEID)
      ON DELETE CASCADE ENABLE
)';
END IF;
END;
/
DECLARE
   SEQUENCECHECKERFLAG INT;
BEGIN
    SELECT COUNT(*) INTO SEQUENCECHECKERFLAG FROM ALL_SEQUENCES WHERE SEQUENCE_OWNER = sys_context('userenv', 'current_schema') AND SEQUENCE_NAME = UPPER('RM_PROJECT_SEQ');
   IF SEQUENCECHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'CREATE SEQUENCE  "RM_PROJECT_SEQ"  MINVALUE 1 MAXVALUE 999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE';
   END IF;
END;
/
DECLARE
  TRIGGERCHECKERFLAG INT;
BEGIN
  SELECT COUNT(*)
  INTO TRIGGERCHECKERFLAG
  FROM all_triggers
  WHERE OWNER = sys_context('userenv', 'current_schema') AND TRIGGER_NAME = UPPER('RM_PROJECT_INSERT');
  IF TRIGGERCHECKERFLAG = 0 THEN
    EXECUTE IMMEDIATE 'CREATE OR REPLACE TRIGGER  "RM_PROJECT_INSERT" BEFORE INSERT ON RM_PROJECT FOR EACH ROW BEGIN SELECT RM_PROJECT_SEQ.NEXTVAL INTO :NEW.PROJECTID FROM DUAL; END;';
    EXECUTE IMMEDIATE 'ALTER TRIGGER "RM_PROJECT_INSERT" ENABLE';
  END IF;
END;
/
DECLARE
   TABLECHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO TABLECHECKERFLAG FROM ALL_TABLES WHERE OWNER = sys_context( 'userenv', 'current_schema' ) AND TABLE_NAME = UPPER('RM_RELEASE');
   IF TABLECHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'CREATE TABLE RM_RELEASE (
  RELEASEID INTEGER  NOT NULL ,
  PROJECTID INTEGER  NOT NULL,
  RELEASENAME VARCHAR2(100) NULL,
  RELEASELIVEDATE TIMESTAMP NULL,
  RELEASEMIGRATIONDATE TIMESTAMP NULL,
  RELEASEDESC VARCHAR2(150) NULL,
  RELEASESTATUSID INTEGER DEFAULT 1 NOT NULL,
  CONSTRAINT PK_RM_REL_ID PRIMARY KEY(RELEASEID),
  CONSTRAINT FK_RM_PROJ_ID FOREIGN KEY (PROJECTID)
    REFERENCES RM_PROJECT(PROJECTID)
      ON DELETE CASCADE ENABLE,
  CONSTRAINT FK_RM_REL_STAT_ID FOREIGN KEY (RELEASESTATUSID)
    REFERENCES RM_MIGRATIONSTATUS(MIGRATIONSTATUSID)
      ON DELETE CASCADE ENABLE
)';
END IF;
END;
/
DECLARE
   SEQUENCECHECKERFLAG INT;
BEGIN
    SELECT COUNT(*) INTO SEQUENCECHECKERFLAG FROM ALL_SEQUENCES WHERE SEQUENCE_OWNER = sys_context('userenv', 'current_schema') AND SEQUENCE_NAME = UPPER('RM_RELEASE_SEQ');
   IF SEQUENCECHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'CREATE SEQUENCE  "RM_RELEASE_SEQ"  MINVALUE 1 MAXVALUE 999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE';
   END IF;
END;
/
DECLARE
  TRIGGERCHECKERFLAG INT;
BEGIN
  SELECT COUNT(*)
  INTO TRIGGERCHECKERFLAG
  FROM all_triggers
  WHERE OWNER = sys_context('userenv', 'current_schema') AND TRIGGER_NAME = UPPER('RM_RELEASE_INSERT');
  IF TRIGGERCHECKERFLAG = 0 THEN
    EXECUTE IMMEDIATE 'CREATE OR REPLACE TRIGGER  "RM_RELEASE_INSERT" BEFORE INSERT ON RM_RELEASE FOR EACH ROW BEGIN SELECT RM_RELEASE_SEQ.NEXTVAL INTO :NEW.RELEASEID FROM DUAL; END;';
    EXECUTE IMMEDIATE 'ALTER TRIGGER "RM_RELEASE_INSERT" ENABLE';
  END IF;
END;
/
DECLARE
   TABLECHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO TABLECHECKERFLAG FROM ALL_TABLES WHERE OWNER = sys_context( 'userenv', 'current_schema' ) AND TABLE_NAME = UPPER('RM_MIGRATIONOBJECT');
   IF TABLECHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'CREATE TABLE RM_MIGRATIONOBJECT (
  MIGRATIONOBJECTID INTEGER  NOT NULL ,
  RELEASEID INTEGER  NOT NULL,
  MIGRATIONSTATUSID INTEGER DEFAULT 1 NOT NULL,
  MIGRATIONFROMENV INTEGER  NOT NULL,
  MIGRATIONTOENV INTEGER  NOT NULL,
  MIGRATIONOBJECTTYPEID INTEGER  NOT NULL,
  MIGRATIONOBJECTNAME VARCHAR2(25) NULL,
  MIGRATIONOBJECTLIVEDATE TIMESTAMP NULL,
  MIGRATIONOBJECTMIGRATIONDATE TIMESTAMP NULL,
  MIGRATIONOBJECTLIVETIME VARCHAR2(15) NULL,
  MIGRATIONOBJECTMIGRATIONTIME VARCHAR2(15) NULL,
  MIGRATIONOBJECTFILE BLOB NULL,
  MIGRATIONOBJECTFROMDSN VARCHAR2(50),
  MIGRATIONOBJECTFROMIP VARCHAR2(20),
  MIGRATIONOBJECTTODSN VARCHAR2(50),
  MIGRATIONOBJECTTOIP VARCHAR2(20),
  MIGRATIONOBJECTDESC VARCHAR2(4000),
  MIGRATIONOBJECTFILENAME VARCHAR2(4000),
  CONSTRAINT PK_RM_MIG_OBJ_ID PRIMARY KEY(MIGRATIONOBJECTID),
  CONSTRAINT FK_RM_MIG_OBJ_TYPE_ID FOREIGN KEY(MIGRATIONOBJECTTYPEID)
    REFERENCES RM_MIGRATIONOBJECTTYPE (MIGRATIONOBJECTTYPEID)
      ON DELETE CASCADE ENABLE,
  CONSTRAINT FK_RM_MIG_TO_ENV FOREIGN KEY(MIGRATIONTOENV)
    REFERENCES RM_ENVIRONMENT (ENVIRONMENTID)
      ON DELETE CASCADE ENABLE,
  CONSTRAINT FK_RM_MIG_FROM_ENV FOREIGN KEY(MIGRATIONFROMENV)
    REFERENCES RM_ENVIRONMENT (ENVIRONMENTID)
      ON DELETE CASCADE ENABLE,
  CONSTRAINT FK_RM_REL_ID FOREIGN KEY (RELEASEID)
    REFERENCES RM_RELEASE (RELEASEID)
      ON DELETE CASCADE ENABLE,
  CONSTRAINT FK_RM_MIG_STAT_ID FOREIGN KEY(MIGRATIONSTATUSID)
    REFERENCES RM_MIGRATIONSTATUS (MIGRATIONSTATUSID)
      ON DELETE CASCADE ENABLE
)';
END IF;
END;
/
DECLARE
   SEQUENCECHECKERFLAG INT;
BEGIN
    SELECT COUNT(*) INTO SEQUENCECHECKERFLAG FROM ALL_SEQUENCES WHERE SEQUENCE_OWNER = sys_context('userenv', 'current_schema') AND SEQUENCE_NAME = UPPER('RM_MIG_OBJ_SEQ');
   IF SEQUENCECHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'CREATE SEQUENCE  "RM_MIG_OBJ_SEQ"  MINVALUE 1 MAXVALUE 999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE';
   END IF;
END;
/
DECLARE
  TRIGGERCHECKERFLAG INT;
BEGIN
  SELECT COUNT(*)
  INTO TRIGGERCHECKERFLAG
  FROM all_triggers
  WHERE OWNER = sys_context('userenv', 'current_schema') AND TRIGGER_NAME = UPPER('RM_MIG_OBJ_INSERT');
  IF TRIGGERCHECKERFLAG = 0 THEN
    EXECUTE IMMEDIATE 'CREATE OR REPLACE TRIGGER  "RM_MIG_OBJ_INSERT" BEFORE INSERT ON RM_MIGRATIONOBJECT FOR EACH ROW BEGIN SELECT RM_MIG_OBJ_SEQ.NEXTVAL INTO :NEW.MIGRATIONOBJECTID FROM DUAL; END;';
    EXECUTE IMMEDIATE 'ALTER TRIGGER "RM_MIG_OBJ_INSERT" ENABLE';
  END IF;
END;
/
DECLARE
   TABLECHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO TABLECHECKERFLAG FROM ALL_TABLES WHERE OWNER = sys_context( 'userenv', 'current_schema' ) AND TABLE_NAME = UPPER('RM_CMMOBJECTTYPE');
   IF TABLECHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'CREATE TABLE RM_CMMOBJECTTYPE (
  CMMOBJECTTYPEID INTEGER  NOT NULL ,
  CMMOBJECTTYPENAME VARCHAR2(25) NULL,
  CMMOBJECTTYPEDESC VARCHAR2(150) NULL,
  CONSTRAINT PK_RM_CMM_OBJ_ID PRIMARY KEY (CMMOBJECTTYPEID) ENABLE
)';
END IF;
END;
/
DECLARE
   SEQUENCECHECKERFLAG INT;
BEGIN
    SELECT COUNT(*) INTO SEQUENCECHECKERFLAG FROM ALL_SEQUENCES WHERE SEQUENCE_OWNER = sys_context('userenv', 'current_schema') AND SEQUENCE_NAME = UPPER('RM_CMM_OBJ_TYPE_SEQ');
   IF SEQUENCECHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'CREATE SEQUENCE  "RM_CMM_OBJ_TYPE_SEQ"  MINVALUE 1 MAXVALUE 999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE';
   END IF;
END;
/
DECLARE
  TRIGGERCHECKERFLAG INT;
BEGIN
  SELECT COUNT(*)
  INTO TRIGGERCHECKERFLAG
  FROM all_triggers
  WHERE OWNER = sys_context('userenv', 'current_schema') AND TRIGGER_NAME = UPPER('RM_CMM_OBJ_TYPE_INSERT');
  IF TRIGGERCHECKERFLAG = 0 THEN
    EXECUTE IMMEDIATE 'CREATE OR REPLACE TRIGGER  "RM_CMM_OBJ_TYPE_INSERT" BEFORE INSERT ON RM_CMMOBJECTTYPE FOR EACH ROW BEGIN SELECT RM_CMM_OBJ_TYPE_SEQ.NEXTVAL INTO :NEW.CMMOBJECTTYPEID FROM DUAL; END;';
    EXECUTE IMMEDIATE 'ALTER TRIGGER "RM_CMM_OBJ_TYPE_INSERT" ENABLE';
  END IF;
END;
/
DECLARE
   TABLECHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO TABLECHECKERFLAG FROM ALL_TABLES WHERE OWNER = sys_context( 'userenv', 'current_schema' ) AND TABLE_NAME = UPPER('RM_SYSTEMSETTINGS');
   IF TABLECHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'CREATE TABLE RM_SYSTEMSETTINGS
(
   SETTINGNAME VARCHAR2(100) NOT NULL,
   SETTINGVALUE VARCHAR2(2500),
   SETTINGTYPE VARCHAR2(1) NOT NULL,
   CONSTRAINT PK_RM_SYS_SET_NAM PRIMARY KEY (SETTINGNAME) ENABLE
)';
END IF;
END;
/
DECLARE
   TABLECHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO TABLECHECKERFLAG FROM "RM_ENVIRONMENT";
   IF TABLECHECKERFLAG = 0 THEN
	INSERT INTO RM_ENVIRONMENT (ENVIRONMENTNAME, ENVIRONMENTDESC)
	(SELECT 'DEV', '' FROM DUAL
		UNION
	SELECT 'TEST', '' FROM DUAL
		UNION
	SELECT 'PROD', '' FROM DUAL
	);
	END IF;
END;
/
DECLARE
   TABLECHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO TABLECHECKERFLAG FROM "RM_MIGRATIONOBJECTTYPE";
   IF TABLECHECKERFLAG = 0 THEN
	INSERT INTO RM_MIGRATIONOBJECTTYPE (MIGRATIONOBJECTTYPENAME, MIGRATIONOBJECTTYPEDESC)
   (SELECT 'DDL Script', '' FROM DUAL
		UNION
	SELECT 'DML Script', '' FROM DUAL
		UNION
	SELECT 'SQL Script', '' FROM DUAL
	);
	END IF;
END;
/
DECLARE
   TABLECHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO TABLECHECKERFLAG FROM "RM_MIGRATIONSTATUS";
   IF TABLECHECKERFLAG = 0 THEN
 INSERT INTO RM_MIGRATIONSTATUS (MIGRATIONSTATUSID,MIGRATIONSTATUSNAME, MIGRATIONSTATUSDESC, MIGRATIONSTATUSCOLOR, MIGRATIONSTATUSFONTCOLOR, MIGRATIONSTATUSBORDERCOLOR, MIGRATIONSTATUSBORDERTYPE, ROSTATUSFONTCOLOR,  ROSTATUSBACKGROUNDCOLOR, ROSTATUSBORDERCOLOR, ROSTATUSBORDERTYPE)
   (
	SELECT 1,'PENDING APPROVAL', '','#FFFFFF','#0F0F0F','#8F8F8F','solid','#0F0F0F','#FFFFFF','#8F8F8F','solid' FROM DUAL
		UNION
	SELECT 2,'PENDING CONFIRMATION', '','#FFFFFF','#0F0F0F','#8F8F8F','solid','#0F0F0F','#FFFFFF','#8F8F8F','solid' FROM DUAL
		UNION
	SELECT 3,'VALIDATED', '','#FFFFFF','#0F0F0F','#8F8F8F','solid','#0F0F0F','#FFFFFF','#8F8F8F','solid' FROM DUAL
		UNION
	SELECT 4,'CONFIRMED', '','#FFFFFF','#0F0F0F','#8F8F8F','solid','#0F0F0F','#FFFFFF','#8F8F8F','solid' FROM DUAL
   );
   END IF;
END;
/
DECLARE
   TABLECHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO TABLECHECKERFLAG FROM "RM_HISTORYTYPE";
   IF TABLECHECKERFLAG = 0 THEN
    INSERT INTO RM_HISTORYTYPE (HISTORYTYPEID,HISTORYTYPENAME, HISTORYTYPEDESC)
      (
    SELECT 1,'ADD', 'Add Record' FROM DUAL
     UNION
    SELECT 2,'EDIT', 'Edit Record' FROM DUAL
     UNION
    SELECT 3,'VIEW', 'View Record Details' FROM DUAL
     UNION
    SELECT 4,'DELETE', 'Delete Record' FROM DUAL
     UNION
    SELECT 5,'LIST', 'List Records' FROM DUAL
     UNION
    SELECT 6,'STATUSCHANGE', 'Changed Status' FROM DUAL
      );
   END IF;
END;
/
DECLARE
   TABLECHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO TABLECHECKERFLAG FROM "RM_CMMOBJECTTYPE";
   IF TABLECHECKERFLAG = 0 THEN
   INSERT INTO RM_CMMOBJECTTYPE (CMMOBJECTTYPENAME, CMMOBJECTTYPEDESC)
   (
	SELECT 'FORM', '' FROM DUAL
		UNION
	SELECT 'PROJECT', '' FROM DUAL
		UNION
	SELECT 'RELEASE', '' FROM DUAL
		UNION
	SELECT 'MIGRATIONOBJECT', '' FROM DUAL
		UNION
	SELECT 'USER', '' FROM DUAL
		UNION
	SELECT 'SYSTEMTABLE', '' FROM DUAL
		UNION
	SELECT 'ENVIRONMENT', '' FROM DUAL
		UNION
	SELECT 'MIGRATIONOBJECTTYPE', '' FROM DUAL
		UNION
	SELECT 'USERTYPE', '' FROM DUAL
		UNION
	SELECT 'HISTORYTYPE', '' FROM DUAL
		UNION
	SELECT 'MIGRATIONSTATUS', '' FROM DUAL
   );
   END IF;
END;
/
DECLARE
   TABLECHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO TABLECHECKERFLAG FROM "RM_RESOURCE";
   IF TABLECHECKERFLAG = 0 THEN
   INSERT INTO RM_RESOURCE (RESOURCENAME)
   (
	SELECT 'Admin' FROM DUAL
   );
   END IF;
END;
/
DECLARE
   TABLECHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO TABLECHECKERFLAG FROM "RM_SYSTEMSETTINGS";
   IF TABLECHECKERFLAG = 0 THEN
   INSERT INTO RM_SYSTEMSETTINGS (SETTINGNAME, SETTINGVALUE, SETTINGTYPE)
   (SELECT 'ADMIN_EMAIL_ID', 'cmmadmin@yourhost.com', 'S' FROM DUAL
		UNION
	SELECT 'ADMIN_EMAIL_USER_NAME', 'cmmadmin', 'S' FROM DUAL
		UNION
	SELECT 'ADMIN_EMAIL_PASSWORD', 'cmmadmin', 'S' FROM DUAL
		UNION
	SELECT 'EMAIL_MIGRATION_OBJECT_SUBJECT', 'CMM Migration Object', 'S' FROM DUAL
		UNION
	SELECT 'EMAIL_RESET_PASSWORD_SUBJECT', 'CMM Admin - Your password is reset', 'S' FROM DUAL
		UNION
	SELECT 'EMAIL_RESET_PASSWORD_MESSAGE', 'User Name: <%USERNAME%> \n Password: <%USERPASSWORD%> \n This is an automated message - Please dont reply to this mail', 'S' FROM DUAL
		UNION
	SELECT 'EMAIL_USER_CREATE_SUBJECT', 'CMM Admin - Your User Name Created', 'S' FROM DUAL
		UNION
	SELECT 'EMAIL_USER_CREATE_MESSAGE', 'User Name: <%USERNAME%> \n Password: <%USERPASSWORD%> \n This is an automated message - Please dont reply to this mail', 'S' FROM DUAL
		UNION
	SELECT 'EMAIL_USE_SSL', 'False', 'B' FROM DUAL
		UNION
	SELECT 'EMAIL_USE_TSL', 'False', 'B' FROM DUAL
		UNION
	SELECT 'EMAIL_HOST_NAME', 'smtp.yourhost.com', 'S' FROM DUAL
		UNION
	SELECT 'EMAIL_SMTP_PORT', '25', 'I' FROM DUAL
   );
   END IF;
END;
/
DECLARE
   COLUMNCHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO COLUMNCHECKERFLAG FROM ALL_TAB_COLUMNS WHERE  OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME = UPPER('MAPPING_DETAILS') AND COLUMN_NAME=UPPER('UPDATE_SRC_METADATA');
   IF COLUMNCHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'ALTER TABLE MAPPING_DETAILS ADD UPDATE_SRC_METADATA CHAR(1) DEFAULT ''N'' NOT NULL';
   END IF;
END;
/
DECLARE
   COLUMNCHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO COLUMNCHECKERFLAG FROM ALL_TAB_COLUMNS WHERE  OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME = UPPER('MAPPING_DETAILS') AND COLUMN_NAME=UPPER('UPDATE_TGT_METADATA');
   IF COLUMNCHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'ALTER TABLE MAPPING_DETAILS ADD UPDATE_TGT_METADATA CHAR(1) DEFAULT ''N'' NOT NULL';
   END IF;
END;
/
DECLARE
   COLUMNCHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO COLUMNCHECKERFLAG FROM ALL_TAB_COLUMNS WHERE  OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME = UPPER('MAPPING_DETAILS') AND COLUMN_NAME=UPPER('USER_DEFINED1');
   IF COLUMNCHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'ALTER TABLE MAPPING_DETAILS ADD USER_DEFINED1 VARCHAR2(4000) NULL';
  END IF;
END;
/
DECLARE
   COLUMNCHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO COLUMNCHECKERFLAG FROM ALL_TAB_COLUMNS WHERE  OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME = UPPER('MAPPING_DETAILS') AND COLUMN_NAME=UPPER('USER_DEFINED2');
   IF COLUMNCHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'ALTER TABLE MAPPING_DETAILS ADD USER_DEFINED2 VARCHAR2(4000) NULL';
  END IF;
END;
/
DECLARE
   COLUMNCHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO COLUMNCHECKERFLAG FROM ALL_TAB_COLUMNS WHERE  OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME = UPPER('MAPPING_DETAILS') AND COLUMN_NAME=UPPER('USER_DEFINED3');
   IF COLUMNCHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'ALTER TABLE MAPPING_DETAILS ADD USER_DEFINED3 VARCHAR2(4000) NULL';
  END IF;
END;
/
DECLARE
   COLUMNCHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO COLUMNCHECKERFLAG FROM ALL_TAB_COLUMNS WHERE  OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME = UPPER('MAPPING_DETAILS') AND COLUMN_NAME=UPPER('USER_DEFINED4');
   IF COLUMNCHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'ALTER TABLE MAPPING_DETAILS ADD USER_DEFINED4 VARCHAR2(4000) NULL';
  END IF;
END;
/
DECLARE
   COLUMNCHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO COLUMNCHECKERFLAG FROM ALL_TAB_COLUMNS WHERE  OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME = UPPER('MAPPING_DETAILS') AND COLUMN_NAME=UPPER('USER_DEFINED5');
   IF COLUMNCHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'ALTER TABLE MAPPING_DETAILS ADD USER_DEFINED5 VARCHAR2(4000) NULL';
  END IF;
END;
/
--  ORACLE DDL  - TO DROP APP_DEFAULTS AND CREATE NEW APP_PREFERENCE TABLE
DECLARE
   TABLE_CHECK INT;
BEGIN
   SELECT COUNT(*) INTO TABLE_CHECK FROM ALL_TABLES WHERE OWNER = sys_context( 'userenv', 'current_schema' ) AND TABLE_NAME = UPPER('APP_DEFAULTS');
   IF TABLE_CHECK = 1 THEN
      EXECUTE IMMEDIATE 'DROP TABLE APP_DEFAULTS';
   END IF;
END;
/
DECLARE
   SEQ_CHECK INT;
BEGIN
   SELECT COUNT(*) INTO SEQ_CHECK FROM ALL_SEQUENCES WHERE SEQUENCE_OWNER = sys_context('userenv', 'current_schema') AND SEQUENCE_NAME = UPPER('APPDEFAULTID_SEQ');
   IF SEQ_CHECK = 1 THEN
      EXECUTE IMMEDIATE 'DROP SEQUENCE APPDEFAULTID_SEQ';
   END IF;
END;
/
DECLARE
   TRIGGER_CHECK INT;
BEGIN
   SELECT COUNT(*) INTO TRIGGER_CHECK FROM all_triggers WHERE OWNER = sys_context('userenv', 'current_schema') AND trigger_name = UPPER('APPDEFAULT_INSERT');
   IF TRIGGER_CHECK = 1 THEN
      EXECUTE IMMEDIATE 'DROP TRIGGER APPDEFAULT_INSERT';
   END IF;
END;
/
DECLARE
   TABLECHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO TABLECHECKERFLAG FROM ALL_TABLES WHERE OWNER = sys_context( 'userenv', 'current_schema' ) AND TABLE_NAME = UPPER('APP_PREFERENCES');
   IF TABLECHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'CREATE TABLE APP_PREFERENCES
(
  PREFERENCE_NAME VARCHAR2(500) NOT NULL,
  PREFERENCE_VALUE VARCHAR2(4000),
  CONSTRAINT PK_PREFERENCE_NAME PRIMARY KEY
  (
	PREFERENCE_NAME
  )
  ENABLE
)
';
   END IF;
END;
/

DECLARE
   TABLECHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO TABLECHECKERFLAG FROM "APP_PREFERENCES";
   IF TABLECHECKERFLAG = 0 THEN
INSERT INTO APP_PREFERENCES( PREFERENCE_NAME, PREFERENCE_VALUE)
(SELECT 'FROM_EMAIL','MM-Admin@analytixds.com' FROM DUAL
 UNION
 SELECT 'FROM_EMAIL_PWD','Zvys2PHjZFI=' FROM DUAL
 UNION
 SELECT 'ADMIN_EMAIL_USER_NAME','MM-Admin@analytixds.com' FROM DUAL
 UNION
 SELECT 'HOST','mail.analytixds.com' FROM DUAL
 UNION
 SELECT 'EMAIL_MIGRATION_OBJECT_SUBJECT','CMM Migration Object' FROM DUAL
 UNION
 SELECT 'EMAIL_RESET_PASSWORD_MESSAGE','User Name: <%USERNAME%>\n Password: <%USERPASSWORD%>\n This is an automated message - Please dont reply to this mail' FROM DUAL
 UNION
 SELECT 'EMAIL_RESET_PASSWORD_SUBJECT','CMM Admin - Your password is reset' FROM DUAL
 UNION
 SELECT 'HOST_PORT','587' FROM DUAL
 UNION
 SELECT 'EMAIL_USE_SSL','false' FROM DUAL
 UNION
 SELECT 'EMAIL_USE_TSL','false' FROM DUAL
 UNION
 SELECT 'USER_CREATION_MESSAGE','Hello <B>@userFullName@</B>,<BR><BR>User <B>@userid@</B> has been successfully&nbsp;added to mapping manager.This user has been granted with role(s) <B>@roles@.</B><BR><BR>The default role for this user is <B>@defaultrole@.</B><BR><BR><I>Note: This is an auto generated email notification and this mailbox is not monitored.<BR>Please do not reply to this email.</I><BR><BR>Regards,<BR><B>Mapping Manager System Administrator</B>' FROM DUAL
 UNION
 SELECT 'USER_CREATION_SUBJECT','Mapping Manager User Successfully Added - DO NOT REPLY' FROM DUAL
 UNION
 SELECT 'ASSIGNMENT_SUBJECT','Mapping Manager Assignment Status - DO NOT REPLY' FROM DUAL
 UNION
 SELECT 'ASSIGNMENT_MESSAGE','Hello <B>@userFullName@</B>,<BR><BR>This is a system generated notice to inform you of a Mapping Status Change or Assignment.<BR><BR><B><U>Mapping Details:</U></B><BR><B>Project Name:</B> @projectName@<BR><B>Mapping Name:</B> @mapName@<BR><B>Mapping Status:</B> @status@<BR><B>Your Designated Role:</B> @role@<BR><BR><B><U>Assignment Changes:</U></B></B><BR>@assignmentChanges@<BR><B><U>@CUSTOMNOTES@</U></B><BR>@customNotes@<BR><BR><BR><I><B>Note:</B> This mailbox is not monitored. Please do not reply to this email.</I>' FROM DUAL
 UNION
 SELECT 'FORGOT_PASSWORD_SUBJECT','Mapping Manager Password Help - DO NOT REPLY' FROM DUAL
 UNION
 SELECT 'CCLIST_MESSAGE','<TR><TD>@sno@</TD><TD>@userFullName@</TD><TD>@status@</TD><TD>@role@</TD></TR>' FROM DUAL
 UNION
 SELECT 'CC_MESSAGE',  '<FONT size=2 face=Helvetica>Hello, <BR><BR>This is a system generated notice to inform you of a Mapping Status Change or Assignment.<BR><BR><B><U>Mapping Details:</U></B><BR><B>Project Name:</B>@projectName@<BR><B>Mapping Name:</B> @mapName@<BR><BR><B><U>Assignment Status Details:</U></B><BR><BR>
			<TABLE style=""BORDER-BOTTOM: #600 1px solid; BORDER-LEFT: #600 1px solid; BORDER-SPACING: 2px; BORDER-COLLAPSE: collapse; FONT-FAMILY: Helveta; FONT-SIZE: 12px; BORDER-TOP: #600 0px solid; BORDER-RIGHT: #600 0px solid"" border=1 cellPadding=5>
			<TBODY>
			<TR style=""TEXT-ALIGN: center"" vAlign=middle>
			<TD><B>#</B></TD>
			<TD><B>User Name</B></TD>
			<TD><B>Mapping Status</B></TD>
			<TD><B>Designated Role</B></TD></TR></TBODY></TABLE></FONT>' FROM DUAL
);
   END IF;
END;
/
DECLARE
   COLUMNCHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO COLUMNCHECKERFLAG FROM ALL_TAB_COLUMNS WHERE  OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME = UPPER('TRANSFORMATIONS_HISTORY') AND COLUMN_NAME=UPPER('OLD_TRANSF_NAME');
   IF COLUMNCHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'ALTER TABLE TRANSFORMATIONS_HISTORY ADD OLD_TRANSF_NAME VARCHAR2(50) NULL';
      EXECUTE IMMEDIATE 'UPDATE TRANSFORMATIONS_HISTORY SET OLD_TRANSF_NAME = null WHERE CREATED_DATETIME = LAST_MODIFIED_DATE_TIME';
      EXECUTE IMMEDIATE 'UPDATE TRANSFORMATIONS_HISTORY SET OLD_TRANSF_NAME = TRANSF_NAME WHERE CREATED_DATETIME != LAST_MODIFIED_DATE_TIME';
   END IF;
END;
/
DECLARE
   COLUMNCHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO COLUMNCHECKERFLAG FROM ALL_TAB_COLUMNS WHERE  OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME = UPPER('USERS') AND COLUMN_NAME=UPPER('USER_LANGUAGE');
   IF COLUMNCHECKERFLAG != 0 THEN
      EXECUTE IMMEDIATE 'ALTER TABLE USERS  MODIFY USER_LANGUAGE DEFAULT ''English_en_US''';
      EXECUTE IMMEDIATE 'UPDATE USERS SET USER_LANGUAGE = ''English_en_US''';
   END IF;
END;
/
DECLARE
   TABLECHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO TABLECHECKERFLAG FROM all_VIEWS WHERE OWNER = sys_context('userenv', 'current_schema') AND VIEW_NAME = UPPER('MAPPINGTESTSTATUS');
   IF TABLECHECKERFLAG = 1 THEN
      EXECUTE IMMEDIATE 'CREATE OR REPLACE FORCE VIEW  "MAPPINGTESTSTATUS" ("TESTSTATUS", "MAP_ID", "MAP_NAME", "MAP_SPEC_VERSION","VERSIONLABEL", "TESTING_NOTES", "PROJECT_ID", "PROJECTNAME", "PROJECTDESCRIPTION", "MAPPINGSTATUS") AS
                        SELECT CASE
                        WHEN TEST_DISPOSITION = ''U'' THEN ''UNASSIGNED''
                        ELSE CASE
                        WHEN TEST_DISPOSITION = ''P'' THEN ''PASSED''
                        ELSE CASE
                        WHEN TEST_DISPOSITION = ''F'' THEN ''FAILED''
                        ELSE CASE
                        WHEN TEST_DISPOSITION = ''A'' THEN ''NEEDS ANALYSIS''
                        ELSE ''''
                        END
                        END
                        END
                        END   AS TESTSTATUS,
                        MAP_ID,
                        MAP_NAME,
                        MAP_SPEC_VERSION,
                        VERSIONLABEL,
                        TESTING_NOTES,
                        PROJECT_ID,
                        PROJECT.PROJ_NAME  AS PROJECTNAME,
                        PROJECT.PROJ_DESCR AS PROJECTDESCRIPTION,
                        STATUS AS MAPPINGSTATUS
                        FROM   MAPPING_DETAILS
                        LEFT JOIN PROJECT
                        ON PROJECT.PROJ_ID = MAPPING_DETAILS.PROJECT_ID';
   END IF;
END;
/
DECLARE
   COLUMNCHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO COLUMNCHECKERFLAG FROM ALL_TAB_COLUMNS WHERE  OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME = UPPER('SUBJECT_DETAILS') AND COLUMN_NAME=UPPER('SUBJECT_DESCRIPTION');
   IF COLUMNCHECKERFLAG = 1 THEN
     EXECUTE IMMEDIATE 'ALTER TABLE SUBJECT_DETAILS ADD (SUBJECT_DESCRIPTION_TEMP VARCHAR2(4000))';
     EXECUTE IMMEDIATE 'UPDATE SUBJECT_DETAILS SET SUBJECT_DESCRIPTION_TEMP = SUBJECT_DESCRIPTION';
     EXECUTE IMMEDIATE 'ALTER TABLE SUBJECT_DETAILS DROP COLUMN SUBJECT_DESCRIPTION';
     EXECUTE IMMEDIATE 'ALTER TABLE SUBJECT_DETAILS RENAME COLUMN SUBJECT_DESCRIPTION_TEMP TO SUBJECT_DESCRIPTION';
   END IF;
END;
/

DECLARE
   TABLECHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO TABLECHECKERFLAG FROM ALL_TABLES WHERE OWNER = sys_context( 'userenv', 'current_schema' ) AND TABLE_NAME = UPPER('ADS_MODULES');
   IF TABLECHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'CREATE TABLE ADS_MODULES   (     MODULE_ID      INT NOT NULL,     MODULE_NAME    VARCHAR2(255) NOT NULL,     MODULE_KEY     VARCHAR2(255) NOT NULL UNIQUE,     MODULE_ORDER   INT NOT NULL,     MODULE_FORWARD VARCHAR2(50) NOT NULL UNIQUE,     CONSTRAINT PK_ADS_MODULE_MODULE_ID PRIMARY KEY(MODULE_ID)   )';
   END IF;
END;
/
DECLARE
   COLUMNCHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO COLUMNCHECKERFLAG FROM ALL_TAB_COLUMNS WHERE  OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME = UPPER('USERS') AND COLUMN_NAME=UPPER('LANDED_MODULE');
   IF COLUMNCHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'ALTER TABLE USERS ADD LANDED_MODULE VARCHAR2(255) DEFAULT NULL';
   END IF;
END;
/
DECLARE
   TABLECHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO TABLECHECKERFLAG FROM "ADS_MODULES";
   IF TABLECHECKERFLAG = 0 THEN
    INSERT INTO ADS_MODULES(MODULE_ID, MODULE_NAME, MODULE_KEY, MODULE_ORDER, MODULE_FORWARD)
    (SELECT 1, 'Mapping Manager', 'com.ads.mm.permission.mm', 1 , 'mappingmanager'
    FROM DUAL UNION
    SELECT 2, 'System Manager', 'com.ads.mm.permission.sm', 2 , 'systemmanager'
    FROM DUAL UNION
    SELECT 3, 'Resource Manager', 'com.ads.mm.permission.rsm', 3 , 'resourcemanager'
    FROM DUAL UNION
    SELECT 4, 'Codeset Manager', 'com.ads.mm.permission.cm', 4 , 'codesetmanager'
    FROM DUAL UNION
    SELECT 5, 'Release Manager', 'com.ads.mm.permission.rm', 5 , 'releasemanager'
    FROM DUAL
    );
END IF;
END;
/
DECLARE
   COLUMNCHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO COLUMNCHECKERFLAG FROM ALL_TAB_COLUMNS WHERE  OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME = UPPER('CSM_MAPPING_DETAILS') AND COLUMN_NAME=UPPER('CSM_MAP_NAME');
   IF COLUMNCHECKERFLAG = 1 THEN
      EXECUTE IMMEDIATE 'ALTER TABLE CSM_MAPPING_DETAILS MODIFY(CSM_MAP_NAME VARCHAR2(4000),CSM_MAP_DESC VARCHAR2(4000))';
   END IF;
END;
/
DECLARE
   COLUMNCHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO COLUMNCHECKERFLAG FROM ALL_TAB_COLUMNS WHERE  OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME = UPPER('CSM_CODE_VALUE') AND COLUMN_NAME=UPPER('SYSTEM_ENV_NAME');
   IF COLUMNCHECKERFLAG = 1 THEN
      EXECUTE IMMEDIATE 'ALTER TABLE CSM_CODE_VALUE MODIFY(SYSTEM_ENV_NAME VARCHAR2(50))';
   END IF;
END;
/
DECLARE
   TABLECHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO TABLECHECKERFLAG FROM ALL_OBJECTS WHERE OWNER = sys_context('userenv', 'current_schema') AND OBJECT_TYPE = 'PROCEDURE' AND OBJECT_NAME = UPPER('CSM_AUTO_MAPPING');
   IF TABLECHECKERFLAG = 1 THEN
      EXECUTE IMMEDIATE 'DROP PROCEDURE CSM_AUTO_MAPPING';
   END IF;
END;
/
CREATE OR REPLACE PROCEDURE CSM_AUTO_MAPPING(
          SRC_CODESET_ID   IN NUMBER,
          SRC_SYSTEM_ID    IN NUMBER,
          SRC_SYS_NAME     IN VARCHAR2,
          SRC_SYS_ENV_NAME IN VARCHAR2,
          TGT_CODESET_ID   IN NUMBER,
          TGT_SYSTEM_ID    IN NUMBER,
          TGT_SYS_NAME     IN VARCHAR2,
          TGT_SYS_ENV_NAME IN VARCHAR2,
          FOR_CSM_MAP_ID IN NUMBER)
      IS
      BEGIN
      MERGE INTO CSM_MAPPING_SPEC CSMMS USING
      (
      WITH CTE AS (SELECT CODE_ID AS SRC_CODE_ID, CODE_STND_VALUE AS SRC_CODE_VALUE
      FROM CSM_CODE_VALUE SRC_CSMCV, CSM_CODESET SRC_CSMC
      WHERE SRC_CSMCV.CODESET_ID = SRC_CSMC.CODESET_ID
      AND SRC_CSMCV.CODESET_ID = SRC_CODESET_ID
      AND SRC_CSMCV.SYSTEM_ID = SRC_SYSTEM_ID
      AND COALESCE(UPPER(SRC_CSMCV.SYSTEM_NAME), NULL, ' ') = COALESCE(UPPER(SRC_SYS_NAME), NULL, ' ')
      AND COALESCE(UPPER(SRC_CSMCV.SYSTEM_ENV_NAME), NULL, ' ') = COALESCE(UPPER(SRC_SYS_ENV_NAME), NULL, ' ')),
      CTEONE AS (SELECT CODE_ID AS TGT_CODE_ID,  CODE_STND_VALUE AS TGT_CODE_VALUE
      FROM CSM_CODE_VALUE TGT_CSMCV, CSM_CODESET TGT_CSMC
      WHERE TGT_CSMCV.CODESET_ID = TGT_CSMC.CODESET_ID
      AND TGT_CSMCV.CODESET_ID = TGT_CODESET_ID
      AND TGT_CSMCV.SYSTEM_ID = TGT_SYSTEM_ID
      AND COALESCE(UPPER(TGT_CSMCV.SYSTEM_NAME), NULL, ' ') = COALESCE(UPPER(TGT_SYS_NAME), NULL, ' ')
      AND COALESCE(UPPER(TGT_CSMCV.SYSTEM_ENV_NAME), NULL, ' ') = COALESCE(UPPER(TGT_SYS_ENV_NAME), NULL, ' '))
      SELECT * FROM CTE, CTEONE WHERE UPPER(CTEONE.TGT_CODE_VALUE) = UPPER(CTE.SRC_CODE_VALUE)
      ) T ON
      (CSMMS.CSM_MAP_ID = FOR_CSM_MAP_ID AND CSMMS.CSM_MAP_SOURCE_CODE_ID = T.SRC_CODE_ID)
      WHEN MATCHED THEN
        UPDATE
        SET CSMMS.CSM_MAP_TARGET_CODE_ID = T.TGT_CODE_ID;
END;
/
DECLARE
   COLUMNCHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO COLUMNCHECKERFLAG FROM ALL_TAB_COLUMNS WHERE  OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME = UPPER('SYSTEM_TABLE_METADATA') AND COLUMN_NAME=UPPER('USER_DEFINED6');
   IF COLUMNCHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'ALTER TABLE SYSTEM_TABLE_METADATA ADD USER_DEFINED6 VARCHAR2(4000) NULL';
   END IF;
END;
/
DECLARE
   COLUMNCHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO COLUMNCHECKERFLAG FROM ALL_TAB_COLUMNS WHERE  OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME = UPPER('SYSTEM_TABLE_METADATA') AND COLUMN_NAME=UPPER('USER_DEFINED7');
   IF COLUMNCHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'ALTER TABLE SYSTEM_TABLE_METADATA ADD USER_DEFINED7 VARCHAR2(4000) NULL';
   END IF;
END;
/
DECLARE
   COLUMNCHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO COLUMNCHECKERFLAG FROM ALL_TAB_COLUMNS WHERE  OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME = UPPER('SYSTEM_TABLE_METADATA') AND COLUMN_NAME=UPPER('USER_DEFINED8');
   IF COLUMNCHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'ALTER TABLE SYSTEM_TABLE_METADATA ADD USER_DEFINED8 VARCHAR2(4000) NULL';
   END IF;
END;
/
DECLARE
   COLUMNCHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO COLUMNCHECKERFLAG FROM ALL_TAB_COLUMNS WHERE  OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME = UPPER('SYSTEM_TABLE_METADATA') AND COLUMN_NAME=UPPER('USER_DEFINED9');
   IF COLUMNCHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'ALTER TABLE SYSTEM_TABLE_METADATA ADD USER_DEFINED9 VARCHAR2(4000) NULL';
   END IF;
END;
/
DECLARE
   COLUMNCHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO COLUMNCHECKERFLAG FROM ALL_TAB_COLUMNS WHERE  OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME = UPPER('SYSTEM_TABLE_METADATA') AND COLUMN_NAME=UPPER('USER_DEFINED10');
   IF COLUMNCHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'ALTER TABLE SYSTEM_TABLE_METADATA ADD USER_DEFINED10 VARCHAR2(4000) NULL';
   END IF;
END;
/
DECLARE
   COLUMNCHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO COLUMNCHECKERFLAG FROM ALL_TAB_COLUMNS WHERE  OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME = UPPER('SYSTEM_TABLE_COLUMNS_METADATA') AND COLUMN_NAME=UPPER('USER_DEFINATION6');
   IF COLUMNCHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'ALTER TABLE SYSTEM_TABLE_COLUMNS_METADATA ADD USER_DEFINATION6 VARCHAR2(4000) NULL';
   END IF;
END;
/
DECLARE
   COLUMNCHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO COLUMNCHECKERFLAG FROM ALL_TAB_COLUMNS WHERE  OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME = UPPER('SYSTEM_TABLE_COLUMNS_METADATA') AND COLUMN_NAME=UPPER('USER_DEFINATION7');
   IF COLUMNCHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'ALTER TABLE SYSTEM_TABLE_COLUMNS_METADATA ADD USER_DEFINATION7 VARCHAR2(4000) NULL';
   END IF;
END;
/
DECLARE
   COLUMNCHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO COLUMNCHECKERFLAG FROM ALL_TAB_COLUMNS WHERE  OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME = UPPER('SYSTEM_TABLE_COLUMNS_METADATA') AND COLUMN_NAME=UPPER('USER_DEFINATION8');
   IF COLUMNCHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'ALTER TABLE SYSTEM_TABLE_COLUMNS_METADATA ADD USER_DEFINATION8 VARCHAR2(4000) NULL';
   END IF;
END;
/
DECLARE
   COLUMNCHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO COLUMNCHECKERFLAG FROM ALL_TAB_COLUMNS WHERE  OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME = UPPER('SYSTEM_TABLE_COLUMNS_METADATA') AND COLUMN_NAME=UPPER('USER_DEFINATION9');
   IF COLUMNCHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'ALTER TABLE SYSTEM_TABLE_COLUMNS_METADATA ADD USER_DEFINATION9 VARCHAR2(4000) NULL';
   END IF;
END;
/
DECLARE
   COLUMNCHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO COLUMNCHECKERFLAG FROM ALL_TAB_COLUMNS WHERE  OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME = UPPER('SYSTEM_TABLE_COLUMNS_METADATA') AND COLUMN_NAME=UPPER('USER_DEFINATION10');
   IF COLUMNCHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'ALTER TABLE SYSTEM_TABLE_COLUMNS_METADATA ADD USER_DEFINATION10 VARCHAR2(4000) NULL';
   END IF;
END;
/
DECLARE
   COLUMNCHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO COLUMNCHECKERFLAG FROM ALL_TAB_COLUMNS WHERE  OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME = UPPER('SYSTEM_TABLE_METADATA') AND COLUMN_NAME=UPPER('FILE_TYPE');
   IF COLUMNCHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'ALTER TABLE SYSTEM_TABLE_METADATA ADD FILE_TYPE VARCHAR2(255) NULL';
   END IF;
END;
/
DECLARE
   COLUMNCHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO COLUMNCHECKERFLAG FROM ALL_TAB_COLUMNS WHERE  OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME = UPPER('SYSTEM_TABLE_COLUMNS_METADATA') AND COLUMN_NAME=UPPER('FILE_STARTING_POSITION');
   IF COLUMNCHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'ALTER TABLE SYSTEM_TABLE_COLUMNS_METADATA ADD FILE_STARTING_POSITION VARCHAR2(255) NULL';
   END IF;
END;
/

DECLARE
   COLUMNCHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO COLUMNCHECKERFLAG FROM ALL_TAB_COLUMNS WHERE  OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME = UPPER('RM_MIGRATIONOBJECT') AND COLUMN_NAME=UPPER('CODESET_ID');
   IF COLUMNCHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'ALTER TABLE RM_MIGRATIONOBJECT ADD CODESET_ID NUMBER NULL';
   END IF;
END;
/


DECLARE
   COLUMNCHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO COLUMNCHECKERFLAG FROM ALL_TAB_COLUMNS WHERE  OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME = UPPER('RM_MIGRATIONOBJECT') AND COLUMN_NAME=UPPER('CODESET_ID');
   IF COLUMNCHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'ALTER TABLE RM_MIGRATIONOBJECT  CONSTRAINT fk_migobj_codeset_id FOREIGN KEY CODESET_ID REFERENCES CSM_CODESET CODESET_ID';
   END IF;
END;
/

DECLARE
   COLUMNCHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO COLUMNCHECKERFLAG FROM ALL_TAB_COLUMNS WHERE  OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME = UPPER('RM_MIGRATIONOBJECT') AND COLUMN_NAME=UPPER('MAP_ID');
   IF COLUMNCHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'ALTER TABLE RM_MIGRATIONOBJECT ADD MAP_ID NUMBER NULL';
   END IF;
END;
/

DECLARE
   COLUMNCHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO COLUMNCHECKERFLAG FROM ALL_TAB_COLUMNS WHERE  OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME = UPPER('RM_MIGRATIONOBJECT') AND COLUMN_NAME=UPPER('MAP_ID');
   IF COLUMNCHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'ALTER TABLE RM_MIGRATIONOBJECT  CONSTRAINT fk_migobj_map_id FOREIGN KEY MAP_ID REFERENCES MAPPING_DETAILS MAP_ID';
   END IF;
END;
/

DECLARE
   COLUMNCHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO COLUMNCHECKERFLAG FROM ALL_TAB_COLUMNS WHERE  OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME = UPPER('RM_MIGRATIONOBJECT') AND COLUMN_NAME=UPPER('CSM_MAP_ID');
   IF COLUMNCHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'ALTER TABLE RM_MIGRATIONOBJECT ADD CSM_MAP_ID NUMBER NULL';
   END IF;
END;
/

DECLARE
   COLUMNCHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO COLUMNCHECKERFLAG FROM ALL_TAB_COLUMNS WHERE  OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME = UPPER('RM_MIGRATIONOBJECT') AND COLUMN_NAME=UPPER('CSM_MAP_ID');
   IF COLUMNCHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'ALTER TABLE RM_MIGRATIONOBJECT  CONSTRAINT fk_migobj_csm_map_id FOREIGN KEY CSM_MAP_ID REFERENCES CSM_MAPPING_DETAILS CSM_MAP_ID';
   END IF;
END;
/

DECLARE
   TABLECHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO TABLECHECKERFLAG FROM "RM_MIGRATIONOBJECTTYPE" where UPPER(MIGRATIONOBJECTTYPENAME)=UPPER('Data Item');
   IF TABLECHECKERFLAG =0 THEN
   	INSERT INTO RM_MIGRATIONOBJECTTYPE (MIGRATIONOBJECTTYPENAME, MIGRATIONOBJECTTYPEDESC)
    (
        SELECT 'Data Item', '' FROM DUAL );
END IF;
END;
/

DECLARE
   TABLECHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO TABLECHECKERFLAG FROM "RM_MIGRATIONOBJECTTYPE" where UPPER(MIGRATIONOBJECTTYPENAME)=UPPER('Code Set');
   IF TABLECHECKERFLAG =0 THEN
   	INSERT INTO RM_MIGRATIONOBJECTTYPE (MIGRATIONOBJECTTYPENAME, MIGRATIONOBJECTTYPEDESC)
    (
        SELECT 'Code Set', '' FROM DUAL );
END IF;
END;
/

DECLARE
   TABLECHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO TABLECHECKERFLAG FROM "RM_MIGRATIONOBJECTTYPE" where UPPER(MIGRATIONOBJECTTYPENAME)=UPPER('Code Map');
   IF TABLECHECKERFLAG =0 THEN
   	INSERT INTO RM_MIGRATIONOBJECTTYPE (MIGRATIONOBJECTTYPENAME, MIGRATIONOBJECTTYPEDESC)
    (
        SELECT 'Code Map', '' FROM DUAL );
END IF;
END;
/


DECLARE
   TABLECHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO TABLECHECKERFLAG FROM "RM_HISTORYTYPE";
   IF TABLECHECKERFLAG = 6 THEN
    INSERT INTO RM_HISTORYTYPE (HISTORYTYPENAME, HISTORYTYPEDESC)
(	SELECT 'MOVE', 'Move Record'
	      FROM DUAL UNION
	SELECT 'Replace', 'Replace Record'
	      FROM DUAL UNION
	SELECT 'ADD DATA ITEM MAPPING', 'ADD Record From MappingManagerMap'
	      FROM DUAL UNION
	SELECT 'ADD FROM CODESET', 'ADD Record From CodeSet'
	       FROM DUAL UNION
	SELECT 'ADD FROM CODEMAP', 'ADD Record From CodeMap'
   FROM DUAL );

END IF;
END;
/
DECLARE
   COLUMNCHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO COLUMNCHECKERFLAG FROM ALL_TAB_COLUMNS WHERE  OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME = UPPER('MAPPING_DETAILS') AND COLUMN_NAME=UPPER('ISPUBLISHED');
   IF COLUMNCHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'ALTER TABLE MAPPING_DETAILS ADD ISPUBLISHED char(1) DEFAULT ''N''';
      EXECUTE IMMEDIATE 'UPDATE MAPPING_DETAILS SET ISPUBLISHED = ''N''';

   END IF;
END;
/
DECLARE
   COLUMNCHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO COLUMNCHECKERFLAG FROM ALL_TAB_COLUMNS WHERE  OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME = UPPER('MAPPING_DETAILS') AND COLUMN_NAME=UPPER('PUBLISH_NOTES');
   IF COLUMNCHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'ALTER TABLE MAPPING_DETAILS ADD PUBLISH_NOTES varchar2(4000) NULL';
   END IF;
END;
/
DECLARE
   COLUMNCHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO COLUMNCHECKERFLAG FROM ALL_TAB_COLUMNS WHERE  OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME = UPPER('MAPPING_DETAILS') AND COLUMN_NAME=UPPER('EFFECTIVE_DATE');
   IF COLUMNCHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'ALTER TABLE MAPPING_DETAILS ADD EFFECTIVE_DATE TIMESTAMP (6) NULL';
   END IF;
END;
/
DECLARE
   COLUMNCHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO COLUMNCHECKERFLAG FROM ALL_TAB_COLUMNS WHERE  OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME = UPPER('SYS_CON_ENVIRONMENTS') AND COLUMN_NAME=UPPER('FILE_MANAGEMENT_SYSTEM_TYPE');
   IF COLUMNCHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'ALTER TABLE SYS_CON_ENVIRONMENTS ADD FILE_MANAGEMENT_SYSTEM_TYPE varchar2(50) NULL';
   END IF;
END;
/
DECLARE
   COLUMNCHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO COLUMNCHECKERFLAG FROM ALL_TAB_COLUMNS WHERE  OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME = UPPER('SYS_CON_ENVIRONMENTS') AND COLUMN_NAME=UPPER('FILE_LOCATION');
   IF COLUMNCHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'ALTER TABLE SYS_CON_ENVIRONMENTS ADD FILE_LOCATION varchar2(50) NULL';
   END IF;
END;
/
DECLARE
   COLUMNCHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO COLUMNCHECKERFLAG FROM ALL_TAB_COLUMNS WHERE  OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME = UPPER('SYS_CON_ENVIRONMENTS') AND COLUMN_NAME=UPPER('PROD_SYSTEM_ID');
   IF COLUMNCHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'ALTER TABLE SYS_CON_ENVIRONMENTS ADD PROD_SYSTEM_ID NUMBER NULL';
   END IF;
END;
/
DECLARE
   COLUMNCHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO COLUMNCHECKERFLAG FROM ALL_TAB_COLUMNS WHERE  OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME = UPPER('SYS_CON_ENVIRONMENTS') AND COLUMN_NAME=UPPER('PROD_SYSTEM_NAME');
   IF COLUMNCHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'ALTER TABLE SYS_CON_ENVIRONMENTS ADD PROD_SYSTEM_NAME varchar2(50) NULL';
   END IF;
END;
/
DECLARE
   COLUMNCHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO COLUMNCHECKERFLAG FROM ALL_TAB_COLUMNS WHERE  OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME = UPPER('SYS_CON_ENVIRONMENTS') AND COLUMN_NAME=UPPER('PROD_ENVIRONMENT_NAME');
   IF COLUMNCHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'ALTER TABLE SYS_CON_ENVIRONMENTS ADD PROD_ENVIRONMENT_NAME varchar2(50) NULL';
   END IF;
END;
/
DECLARE
   TABLECHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO TABLECHECKERFLAG FROM ALL_TABLES WHERE OWNER = sys_context( 'userenv', 'current_schema' ) AND TABLE_NAME = UPPER('MM_HISTORY');
   IF TABLECHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'CREATE TABLE "MM_HISTORY" ( "MM_HIST_ID" NUMBER(38,0), "MAP_ID" NUMBER(38,0) NOT NULL, "ACTION" VARCHAR2(50) NULL, "USER_NAME" varchar2(50) NULL, "PUBLISH_NOTES" varchar2(4000) NULL, "EFFECTIVE_DATE" TIMESTAMP (6) NULL, "EXPIRE_DATE" TIMESTAMP (6) NULL, "ACTION_DATE" TIMESTAMP (6) NULL, "MAP_NAME" varchar2(4000) NULL, "PROJECT_ID" NUMBER NOT NULL, CONSTRAINT PK_MM_HIST_ID PRIMARY KEY(MM_HIST_ID), CONSTRAINT FK_MM_HIST_MAPID FOREIGN KEY(MAP_ID) REFERENCES MAPPING_DETAILS(MAP_ID) ON DELETE CASCADE ENABLE , CONSTRAINT FK_MM_HIST_PROJID FOREIGN KEY(PROJECT_ID) REFERENCES PROJECT(PROJ_ID) )';
   END IF;
END;
/
DECLARE
   SEQUENCECHECKERFLAG INT;
BEGIN
    SELECT COUNT(*) INTO SEQUENCECHECKERFLAG FROM ALL_SEQUENCES WHERE SEQUENCE_OWNER = sys_context('userenv', 'current_schema') AND SEQUENCE_NAME = UPPER('MM_HIST_ID_SEQ');
   IF SEQUENCECHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'CREATE SEQUENCE   "MM_HIST_ID_SEQ"  MINVALUE 1 MAXVALUE 999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE';
   END IF;
END;
/

DECLARE
  TRIGGERCHECKERFLAG INT;
BEGIN
  SELECT COUNT(*)
  INTO TRIGGERCHECKERFLAG
  FROM all_triggers
  WHERE OWNER = sys_context('userenv', 'current_schema') AND trigger_name = UPPER('MM_HISTORY_INSERT');
  IF TRIGGERCHECKERFLAG = 0 THEN
    EXECUTE IMMEDIATE 'CREATE OR REPLACE TRIGGER  "MM_HISTORY_INSERT" BEFORE INSERT ON MM_HISTORY FOR EACH ROW BEGIN SELECT MM_HIST_ID_SEQ.NEXTVAL INTO :new.MM_HIST_ID FROM DUAL; END;';
    EXECUTE IMMEDIATE 'ALTER TRIGGER  "MM_HISTORY_INSERT" ENABLE';
  END IF;
END;
/

DECLARE
   TABLECHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO TABLECHECKERFLAG FROM ALL_TABLES WHERE OWNER = sys_context( 'userenv', 'current_schema' ) AND TABLE_NAME = UPPER('NOT_ELIGIBLE_MAPS');
   IF TABLECHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'CREATE GLOBAL TEMPORARY TABLE "NOT_ELIGIBLE_MAPS" ( "MAP_ID"  NUMBER ) ON COMMIT PRESERVE ROWS';
   END IF;
END;
/

-- CREATE OR REPLACE FUNCTION PUBLISHMAP_COUNT( v_SUBJECT_ID IN NUMBER ,effectiveDate IN TIMESTAMP) RETURN NUMBER AS V_MAP_COUNT NUMBER;   V_CHILD_COUNT NUMBER:=0;    CURSOR c1_childs(p_subject_id NUMBER) IS     SELECT subject_id     FROM projectsubjects     WHERE parent_subject_id = p_subject_id;  BEGIN BEGIN IF TRIM(effectivedate) IS NOT NULL THEN     SELECT COUNT(*) INTO V_map_COUNT     FROM SUBJECTMAPPINGS A1,          MAPPING_DETAILS B1     WHERE A1.MAPPING_ID = B1.MAP_ID       AND B1.ISPUBLISHED = 'Y'       AND (B1.EFFECTIVE_DATE) = effectiveDate       AND SUBJECT_ID = V_SUBJECT_ID;   ELSE     SELECT COUNT(*) INTO V_map_COUNT     FROM SUBJECTMAPPINGS A1,          MAPPING_DETAILS B1     WHERE A1.MAPPING_ID = B1.MAP_ID       AND B1.ISPUBLISHED = 'Y'       AND B1.EFFECTIVE_DATE <=         (SELECT sysdate          FROM dual)       AND SUBJECT_ID = V_SUBJECT_ID;   END IF;  EXCEPTION WHEN OTHERS THEN v_map_count := 0; END; FOR R1_CHILDS IN C1_CHILDS(V_SUBJECT_ID)   LOOP     v_child_count := v_child_count + PUBLISHMAP_COUNT(r1_childs.subject_id,effectiveDate);   END LOOP;  RETURN (V_CHILD_COUNT + V_MAP_COUNT); END PUBLISHMAP_COUNT;
-- /

-- CREATE OR REPLACE FUNCTION FN_ELIGIBLEMAPCOUNT( v_SUBJECT_ID IN NUMBER) RETURN NUMBER AS V_MAP_COUNT NUMBER;      V_CHILD_COUNT NUMBER:=0;         CURSOR c1_childs(p_subject_id NUMBER) IS         SELECT subject_id         FROM projectsubjects         WHERE parent_subject_id = p_subject_id;      BEGIN        BEGIN         SELECT COUNT(*) INTO V_map_COUNT         FROM SUBJECTMAPPINGS A1,              MAPPING_DETAILS B1         WHERE A1.MAPPING_ID = B1.MAP_ID           AND B1.ISPUBLISHED = 'N'           AND (B1.MAP_ID NOT IN                  ( SELECT map_id  FROM NOT_ELIGIBLE_MAPS ))           AND B1.MAP_ID IN             (SELECT DISTINCT MAP_ID              FROM MAPPING_SPECIFICATION ms              WHERE ((TRIM(MS.TGT_SYSTEM_ENVIRONMENT_NAME) IS NOT NULL                      AND TRIM(MS.TGT_SYSTEM_NAME) IS NOT NULL)                     OR (TRIM(MS.SRC_SYSTEM_NAME) IS NOT NULL                         AND TRIM(ms.src_system_environment_name) IS NOT NULL)) )           AND B1.MAP_ID NOT IN             (SELECT DISTINCT map_id              FROM SPECIFICATION_LOCK              WHERE ISSPECIFICATION_LOCK = 'Y' )           AND SUBJECT_ID = V_SUBJECT_ID;      EXCEPTION WHEN OTHERS THEN v_map_count := 0;    END;    FOR R1_CHILDS IN C1_CHILDS(V_SUBJECT_ID)    LOOP         v_child_count := v_child_count + FN_ELIGIBLEMAPCOUNT(r1_childs.subject_id);    END LOOP;     RETURN (V_CHILD_COUNT + V_MAP_COUNT);  END FN_ELIGIBLEMAPCOUNT;
-- /

DECLARE
   TABLECHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO TABLECHECKERFLAG FROM ALL_TABLES WHERE OWNER = sys_context( 'userenv', 'current_schema' ) AND TABLE_NAME = UPPER('ADS_MM_VERSION');
   IF TABLECHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'CREATE TABLE "ADS_MM_VERSION"("KEY"   VARCHAR2(50 BYTE),     "VALUE" VARCHAR2(50 BYTE)   )';
      EXECUTE IMMEDIATE 'INSERT INTO ADS_MM_VERSION VALUES(''AMM_VERSION_INSTALLED'', ''4.5'')';
   END IF;
END;
/

DECLARE
   COLUMNCHECKERFLAG INT;
   VERSIONCHECKKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO COLUMNCHECKERFLAG FROM USERS WHERE  USER_PASSWORD = 'PM+qX3+b1No=' AND USER_ID = 'public';
   SELECT COUNT(*) INTO VERSIONCHECKKERFLAG FROM ADS_MM_VERSION WHERE VALUE <= '9.4';
   IF COLUMNCHECKERFLAG = 0 AND VERSIONCHECKKERFLAG = 1 THEN
      EXECUTE IMMEDIATE 'UPDATE USERS SET USER_PASSWORD = ''PM+qX3+b1No='' WHERE USER_ID = ''public''';
   END IF;
END;
/

DECLARE
   TABLECHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO TABLECHECKERFLAG FROM ALL_TABLES WHERE OWNER = sys_context( 'userenv', 'current_schema' ) AND TABLE_NAME = UPPER('RDM_CATEGORY');
   IF TABLECHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'CREATE TABLE "RDM_CATEGORY"   (     "RDM_CATEGORY_ID"   NUMBER NOT NULL ENABLE,     "RDM_CATEGORY_NAME" VARCHAR2(4000 BYTE) NOT NULL ENABLE,     "DESCRIPTION"       VARCHAR2(4000 BYTE),     "RDM_PARENT_CAT_ID" NUMBER DEFAULT 0 NOT NULL ENABLE,     "CREATED_BY" VARCHAR2(100 BYTE) NOT NULL ENABLE,     "CREATED_DATE" TIMESTAMP NOT NULL ENABLE,     "MODIFIED_BY" VARCHAR2(20 BYTE),     "MODIFIED_DATE" TIMESTAMP,     CONSTRAINT "PK_RDM_CAT_ID" PRIMARY KEY ("RDM_CATEGORY_ID"), CONSTRAINT "UK_RDM_CATEGORY_PAR_CATID" UNIQUE ("RDM_CATEGORY_NAME", "RDM_PARENT_CAT_ID")    )';
   END IF;
END;
/

DECLARE
   SEQUENCECHECKERFLAG INT;
BEGIN
    SELECT COUNT(*) INTO SEQUENCECHECKERFLAG FROM ALL_SEQUENCES WHERE SEQUENCE_OWNER = sys_context('userenv', 'current_schema') AND SEQUENCE_NAME = UPPER('RDM_CATEGORY_SEQ');
   IF SEQUENCECHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'CREATE SEQUENCE   "RDM_CATEGORY_SEQ"  MINVALUE 1 MAXVALUE 999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE';
   END IF;
END;
/

DECLARE
  TRIGGERCHECKERFLAG INT;
BEGIN
  SELECT COUNT(*)
  INTO TRIGGERCHECKERFLAG
  FROM all_triggers
  WHERE OWNER = sys_context('userenv', 'current_schema') AND trigger_name = UPPER('RDM_CATEGORY_INSERT');
  IF TRIGGERCHECKERFLAG = 0 THEN
    EXECUTE IMMEDIATE 'CREATE OR REPLACE TRIGGER  "RDM_CATEGORY_INSERT" BEFORE INSERT ON RDM_CATEGORY FOR EACH ROW BEGIN SELECT RDM_CATEGORY_SEQ.NEXTVAL INTO :new.RDM_CATEGORY_ID FROM DUAL; END;';
    EXECUTE IMMEDIATE 'ALTER TRIGGER  "RDM_CATEGORY_INSERT" ENABLE';
  END IF;
END;
/

DECLARE
   TABLECHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO TABLECHECKERFLAG FROM ALL_TABLES WHERE OWNER = sys_context( 'userenv', 'current_schema' ) AND TABLE_NAME = UPPER('RDM_REFERENCE_TABLE');
   IF TABLECHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'CREATE TABLE RDM_REFERENCE_TABLE ( "RDM_REF_TABLE_ID"	NUMBER NOT NULL, "RDM_REF_TAB_PARENT_ID"	NUMBER DEFAULT 0 NOT NULL, "RDM_REF_TABLE_NAME"	VARCHAR2(	4000) NOT NULL, "RDM_REF_TABLE_CAT_ID"	NUMBER NOT NULL, "RDM_REF_TABLE_DESC"	VARCHAR2(	4000) NULL, "RDM_REF_TAB_VALIDATED"	CHAR(1) DEFAULT ''N''  NOT NULL, "RDM_REF_TAB_PUBLISHED"	CHAR(1) DEFAULT ''N'' NOT NULL, "RDM_REF_TAB_OWNER"	VARCHAR2(100) NOT NULL, "RDM_REF_TAB_LOCKED"	CHAR(1) DEFAULT ''N'' NOT NULL, "RDM_REF_TAB_LOCKED_BY"	VARCHAR2(100), "RDM_REF_TAB_VERSION"	NUMBER(18,2)	NULL, "RDM_REF_TAB_VER_DESC"	VARCHAR2(	4000) NULL, "RDM_REF_TAB_VER_LABEL"	VARCHAR2(	100) NULL, "STATUS" VARCHAR2(100) NOT NULL, "CREATED_BY"	VARCHAR2(	100) NOT NULL, "CREATED_DATE"	TIMESTAMP NOT NULL	, "MODIFIED_BY"	VARCHAR2(	100) NULL, "MODIFIED_DATE"	TIMESTAMP	 NULL, CONSTRAINT "PK_RDM_REF_TBL_ID_NAME" PRIMARY KEY("RDM_REF_TABLE_ID","RDM_REF_TABLE_NAME") ENABLE, CONSTRAINT "FK_RDM_TBL_CAT_ID" FOREIGN KEY("RDM_REF_TABLE_CAT_ID") REFERENCES "RDM_CATEGORY" ("RDM_CATEGORY_ID") ON DELETE CASCADE ENABLE, CONSTRAINT "UK_RDM_REF_TBL" UNIQUE ("RDM_REF_TABLE_ID") )';
   END IF;
END;
/

DECLARE
   SEQUENCECHECKERFLAG INT;
BEGIN
    SELECT COUNT(*) INTO SEQUENCECHECKERFLAG FROM ALL_SEQUENCES WHERE SEQUENCE_OWNER = sys_context('userenv', 'current_schema') AND SEQUENCE_NAME = UPPER('RDM_REF_TABLE_SEQ');
   IF SEQUENCECHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'CREATE SEQUENCE   "RDM_REF_TABLE_SEQ"  MINVALUE 1 MAXVALUE 999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE';
   END IF;
END;
/

DECLARE
  TRIGGERCHECKERFLAG INT;
BEGIN
  SELECT COUNT(*)
  INTO TRIGGERCHECKERFLAG
  FROM all_triggers
  WHERE OWNER = sys_context('userenv', 'current_schema') AND trigger_name = UPPER('RDM_REF_TABLE_INSERT');
  IF TRIGGERCHECKERFLAG = 0 THEN
    EXECUTE IMMEDIATE 'CREATE OR REPLACE TRIGGER  "RDM_REF_TABLE_INSERT" BEFORE INSERT ON RDM_REFERENCE_TABLE FOR EACH ROW BEGIN SELECT RDM_REF_TABLE_SEQ.NEXTVAL INTO :new.RDM_REF_TABLE_ID FROM DUAL; END;';
    EXECUTE IMMEDIATE 'ALTER TRIGGER  "RDM_REF_TABLE_INSERT" ENABLE';
  END IF;
END;
/

DECLARE
   TABLECHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO TABLECHECKERFLAG FROM ALL_TABLES WHERE OWNER = sys_context( 'userenv', 'current_schema' ) AND TABLE_NAME = UPPER('RDM_REF_TAB_COLUMNS');
   IF TABLECHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'CREATE TABLE RDM_REF_TAB_COLUMNS ( "RDM_REF_TAB_COL_ID" NUMBER NOT NULL, "RDM_REF_TAB_ID" NUMBER NOT NULL, "RDM_REF_TAB_COL_NAME" VARCHAR2(4000) NOT NULL, "RDM_REF_TAB_COL_ORDER" NUMBER NOT NULL, "RDM_REF_TAB_COL_SCROLL_LOCK" CHAR(1) DEFAULT ''N'' NOT NULL, "RDM_REF_TAB_COL_NULLABLE" CHAR(1) DEFAULT ''N'' NOT NULL,"CREATED_BY" VARCHAR2(100) NOT NULL, "CREATED_DATE"	TIMESTAMP	 NOT NULL, "MODIFIED_BY" VARCHAR2(100) NULL, "MODIFIED_DATE"	TIMESTAMP	 NULL, CONSTRAINT "PK_RDM_REF_COL_ID" PRIMARY KEY("RDM_REF_TAB_COL_ID","RDM_REF_TAB_COL_NAME") ENABLE, CONSTRAINT "FK_RDM_REF_COL_TAB_ID" FOREIGN KEY("RDM_REF_TAB_ID") REFERENCES "RDM_REFERENCE_TABLE" ("RDM_REF_TABLE_ID") ON DELETE CASCADE ENABLE, CONSTRAINT "UK_RDM_REF_COL_ID" UNIQUE ("RDM_REF_TAB_COL_ID") )';
   END IF;
END;
/

DECLARE
   SEQUENCECHECKERFLAG INT;
BEGIN
    SELECT COUNT(*) INTO SEQUENCECHECKERFLAG FROM ALL_SEQUENCES WHERE SEQUENCE_OWNER = sys_context('userenv', 'current_schema') AND SEQUENCE_NAME = UPPER('RDM_REF_TAB_COL_SEQ');
   IF SEQUENCECHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'CREATE SEQUENCE   "RDM_REF_TAB_COL_SEQ"  MINVALUE 1 MAXVALUE 999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE';
   END IF;
END;
/

DECLARE
  TRIGGERCHECKERFLAG INT;
BEGIN
  SELECT COUNT(*)
  INTO TRIGGERCHECKERFLAG
  FROM all_triggers
  WHERE OWNER = sys_context('userenv', 'current_schema') AND trigger_name = UPPER('RDM_REF_TAB_COL_INSERT');
  IF TRIGGERCHECKERFLAG = 0 THEN
    EXECUTE IMMEDIATE 'CREATE OR REPLACE TRIGGER  "RDM_REF_TAB_COL_INSERT" BEFORE INSERT ON RDM_REF_TAB_COLUMNS FOR EACH ROW BEGIN SELECT RDM_REF_TAB_COL_SEQ.NEXTVAL INTO :new.RDM_REF_TAB_COL_ID FROM DUAL; END;';
    EXECUTE IMMEDIATE 'ALTER TRIGGER  "RDM_REF_TAB_COL_INSERT" ENABLE';
  END IF;
END;
/

DECLARE
   TABLECHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO TABLECHECKERFLAG FROM ALL_TABLES WHERE OWNER = sys_context( 'userenv', 'current_schema' ) AND TABLE_NAME = UPPER('RDM_REF_TAB_COL_VALUES');
   IF TABLECHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'CREATE TABLE RDM_REF_TAB_COL_VALUES ( "RDM_REF_TAB_COL_VALUE_ID"	NUMBER NOT NULL, "RDM_REF_TAB_COL_ID" NUMBER NOT NULL, "RDM_REF_TAB_COL_VALUE"	 VARCHAR2(4000) NULL,"RDM_TAB_COL_VAL_ROW_ORDER" NUMBER NOT NULL, "CREATED_BY" VARCHAR2(100) NOT NULL, "CREATED_DATE"	TIMESTAMP NOT NULL, "MODIFIED_BY"	VARCHAR2(100) NULL, "MODIFIED_DATE" TIMESTAMP NULL, CONSTRAINT "PK_RDM_REF_TAB_COL_VAL_ID" PRIMARY KEY("RDM_REF_TAB_COL_VALUE_ID") ENABLE, CONSTRAINT "FK_RDM_TAB_VALUE_COL_ID" FOREIGN KEY("RDM_REF_TAB_COL_ID") REFERENCES "RDM_REF_TAB_COLUMNS" ("RDM_REF_TAB_COL_ID") ON DELETE CASCADE ENABLE )';
   END IF;
END;
/

DECLARE
   SEQUENCECHECKERFLAG INT;
BEGIN
    SELECT COUNT(*) INTO SEQUENCECHECKERFLAG FROM ALL_SEQUENCES WHERE SEQUENCE_OWNER = sys_context('userenv', 'current_schema') AND SEQUENCE_NAME = UPPER('RDM_REF_TAB_COL_VAL_SEQ');
   IF SEQUENCECHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'CREATE SEQUENCE   "RDM_REF_TAB_COL_VAL_SEQ"  MINVALUE 1 MAXVALUE 999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE';
   END IF;
END;
/

DECLARE
  TRIGGERCHECKERFLAG INT;
BEGIN
  SELECT COUNT(*)
  INTO TRIGGERCHECKERFLAG
  FROM all_triggers
  WHERE OWNER = sys_context('userenv', 'current_schema') AND trigger_name = UPPER('RDM_REF_TAB_COL_VAL_INSERT');
  IF TRIGGERCHECKERFLAG = 0 THEN
    EXECUTE IMMEDIATE 'CREATE OR REPLACE TRIGGER  "RDM_REF_TAB_COL_VAL_INSERT" BEFORE INSERT ON RDM_REF_TAB_COL_VALUES FOR EACH ROW BEGIN SELECT RDM_REF_TAB_COL_VAL_SEQ.NEXTVAL INTO :new.RDM_REF_TAB_COL_VALUE_ID FROM DUAL; END;';
    EXECUTE IMMEDIATE 'ALTER TRIGGER  "RDM_REF_TAB_COL_VAL_INSERT" ENABLE';
  END IF;
END;
/

DECLARE
   TABLECHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO TABLECHECKERFLAG FROM ALL_TABLES WHERE OWNER = sys_context( 'userenv', 'current_schema' ) AND TABLE_NAME = UPPER('RDM_VALIDATION_RULES');
   IF TABLECHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'CREATE TABLE RDM_VALIDATION_RULES ( "RDM_VAL_RULE_ID"	NUMBER NOT NULL, "RDM_VAL_RULE_NAME" VARCHAR2(4000) NOT NULL, "RDM_VAL_RULE_DESC" VARCHAR2(4000) NULL, "RDM_VALIDATION_RULE" CLOB NOT NULL, "CREATED_BY" VARCHAR2(100) NOT NULL, "CREATED_DATE"	 TIMESTAMP NOT NULL, "MODIFIED_BY"	VARCHAR2(100) NULL, "MODIFIED_DATE" TIMESTAMP NULL, CONSTRAINT "PK_RDM_VAL_RULE_ID" PRIMARY KEY("RDM_VAL_RULE_ID","RDM_VAL_RULE_NAME") ENABLE, CONSTRAINT "UK_RDM_VAL_RULE_ID" UNIQUE ("RDM_VAL_RULE_ID") )';
   END IF;
END;
/

DECLARE
   SEQUENCECHECKERFLAG INT;
BEGIN
    SELECT COUNT(*) INTO SEQUENCECHECKERFLAG FROM ALL_SEQUENCES WHERE SEQUENCE_OWNER = sys_context('userenv', 'current_schema') AND SEQUENCE_NAME = UPPER('RDM_VALDTN_RULES_SEQ');
   IF SEQUENCECHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'CREATE SEQUENCE   "RDM_VALDTN_RULES_SEQ"  MINVALUE 1 MAXVALUE 999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE';
   END IF;
END;
/

DECLARE
  TRIGGERCHECKERFLAG INT;
BEGIN
  SELECT COUNT(*)
  INTO TRIGGERCHECKERFLAG
  FROM all_triggers
  WHERE OWNER = sys_context('userenv', 'current_schema') AND trigger_name = UPPER('RDM_VALDTN_RULES_INSERT');
  IF TRIGGERCHECKERFLAG = 0 THEN
    EXECUTE IMMEDIATE 'CREATE OR REPLACE TRIGGER  "RDM_VALDTN_RULES_INSERT" BEFORE INSERT ON RDM_VALIDATION_RULES FOR EACH ROW BEGIN SELECT RDM_VALDTN_RULES_SEQ.NEXTVAL INTO :new.RDM_VAL_RULE_ID FROM DUAL; END;';
    EXECUTE IMMEDIATE 'ALTER TRIGGER  "RDM_VALDTN_RULES_INSERT" ENABLE';
  END IF;
END;
/

DECLARE
   TABLECHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO TABLECHECKERFLAG FROM ALL_TABLES WHERE OWNER = sys_context( 'userenv', 'current_schema' ) AND TABLE_NAME = UPPER('RDM_REF_TAB_COL_VAL_ERRORS');
   IF TABLECHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'CREATE TABLE RDM_REF_TAB_COL_VAL_ERRORS ( "RDM_REF_TAB_COL_VAL_ERR_ID"	 NUMBER NOT NULL, "RDM_REF_TAB_ID" NUMBER NOT NULL, "RDM_REF_TAB_COL_VALUE_ID" NUMBER NOT NULL	, "RDM_REF_COL_VAL_HAS_ERROR"	CHAR(1) DEFAULT ''N'' NOT NULL, "RDM_REF_COL_VAL_ERR_MSG" VARCHAR2(4000) NULL, "RDM_REF_VALIDATION_RUN_BY"	VARCHAR2(100) NOT NULL, "RDM_REF_VALIDATION_RUN_DATE" TIMESTAMP NOT NULL, CONSTRAINT "PK_RDM_REF_VAL_ERR_ID" PRIMARY KEY("RDM_REF_TAB_COL_VAL_ERR_ID") ENABLE, CONSTRAINT "FK_RDM_REF_TAB_ID" FOREIGN KEY("RDM_REF_TAB_ID") REFERENCES "RDM_REFERENCE_TABLE" ("RDM_REF_TABLE_ID") ON DELETE CASCADE ENABLE, CONSTRAINT "FK_RDM_TAB_COL_ID" FOREIGN KEY("RDM_REF_TAB_COL_VALUE_ID") REFERENCES "RDM_REF_TAB_COLUMNS" ("RDM_REF_TAB_COL_ID") ON DELETE CASCADE ENABLE )';
   END IF;
END;
/

DECLARE
   SEQUENCECHECKERFLAG INT;
BEGIN
    SELECT COUNT(*) INTO SEQUENCECHECKERFLAG FROM ALL_SEQUENCES WHERE SEQUENCE_OWNER = sys_context('userenv', 'current_schema') AND SEQUENCE_NAME = UPPER('RDM_COL_VAL_ERRORS_SEQ');
   IF SEQUENCECHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'CREATE SEQUENCE   "RDM_COL_VAL_ERRORS_SEQ"  MINVALUE 1 MAXVALUE 999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE';
   END IF;
END;
/

DECLARE
  TRIGGERCHECKERFLAG INT;
BEGIN
  SELECT COUNT(*)
  INTO TRIGGERCHECKERFLAG
  FROM all_triggers
  WHERE OWNER = sys_context('userenv', 'current_schema') AND trigger_name = UPPER('RDM_COL_VAL_ERRORS_INSERT');
  IF TRIGGERCHECKERFLAG = 0 THEN
    EXECUTE IMMEDIATE 'CREATE OR REPLACE TRIGGER  "RDM_COL_VAL_ERRORS_INSERT" BEFORE INSERT ON RDM_REF_TAB_COL_VAL_ERRORS FOR EACH ROW BEGIN SELECT RDM_COL_VAL_ERRORS_SEQ.NEXTVAL INTO :new.RDM_REF_TAB_COL_VAL_ERR_ID FROM DUAL; END;';
    EXECUTE IMMEDIATE 'ALTER TRIGGER  "RDM_COL_VAL_ERRORS_INSERT" ENABLE';
  END IF;
END;
/

DECLARE
   TABLECHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO TABLECHECKERFLAG FROM ALL_TABLES WHERE OWNER = sys_context( 'userenv', 'current_schema' ) AND TABLE_NAME = UPPER('RDM_PUBLISH_ENVIRONMENTS');
   IF TABLECHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'CREATE TABLE RDM_PUBLISH_ENVIRONMENTS (   RDM_ENV_ID NUMBER NOT NULL,   ENVIRONMENT_NAME VARCHAR2(50) NOT NULL,   ENVIRONMENT_SCHEMA VARCHAR2(50) NOT NULL,   CREATED_BY VARCHAR2(100) NOT NULL,   CREATED_DATE TIMESTAMP NOT NULL,   MODIFIED_BY VARCHAR2(100) NULL,   MODIFIED_DATE TIMESTAMP NULL,  CONSTRAINT PK_RDM_PUB_ENVRTS_RDM_ENV_ID PRIMARY KEY(RDM_ENV_ID) ENABLE  )';
   END IF;
END;
/

DECLARE
   SEQUENCECHECKERFLAG INT;
BEGIN
    SELECT COUNT(*) INTO SEQUENCECHECKERFLAG FROM ALL_SEQUENCES WHERE SEQUENCE_OWNER = sys_context('userenv', 'current_schema') AND SEQUENCE_NAME = UPPER('RDM_PUBLISH_ENV_SEQ');
   IF SEQUENCECHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'CREATE SEQUENCE   "RDM_PUBLISH_ENV_SEQ"  MINVALUE 1 MAXVALUE 999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE';
   END IF;
END;
/

DECLARE
  TRIGGERCHECKERFLAG INT;
BEGIN
  SELECT COUNT(*) INTO TRIGGERCHECKERFLAG FROM all_triggers WHERE OWNER = sys_context('userenv', 'current_schema') AND trigger_name = UPPER('RDM_PUBLISH_ENV_INSERT');
  IF TRIGGERCHECKERFLAG = 0 THEN
    EXECUTE IMMEDIATE 'CREATE OR REPLACE TRIGGER  "RDM_PUBLISH_ENV_INSERT" BEFORE INSERT ON RDM_PUBLISH_ENVIRONMENTS FOR EACH ROW BEGIN SELECT RDM_PUBLISH_ENV_SEQ.NEXTVAL INTO :new.RDM_ENV_ID FROM DUAL; END;';
    EXECUTE IMMEDIATE 'ALTER TRIGGER  "RDM_PUBLISH_ENV_INSERT" ENABLE';
  END IF;
END;
/

DECLARE
   TABLECHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO TABLECHECKERFLAG FROM ALL_TABLES WHERE OWNER = sys_context( 'userenv', 'current_schema' ) AND TABLE_NAME = UPPER('RDM_REF_TAB_PUBLISH_HISTORY');
   IF TABLECHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'CREATE TABLE RDM_REF_TAB_PUBLISH_HISTORY ( "RDM_REF_TAB_PUB_HIST_ID" NUMBER NOT NULL, "RDM_REF_TAB_ID"	NUMBER NOT NULL, "RDM_REF_TAB_VERSION"	NUMBER(16,2) NOT NULL, "RDM_REF_TAB_PUBLISH_DATE"	TIMESTAMP NOT NULL, "RDM_REF_TAB_PUBLISH_BY" VARCHAR2(100) NOT NULL, "RDM_REF_TAB_EFFECT_DT"	TIMESTAMP NULL, "RDM_REF_TAB_EXPIRY_DT"	TIMESTAMP NULL, "CREATED_BY" VARCHAR2(100)  NOT NULL, "CREATED_DATE"	TIMESTAMP NOT NULL, "MODIFIED_BY"	VARCHAR2(100) NULL, "MODIFIED_DATE"	TIMESTAMP NULL, RDM_ENVIRONMENT_ID NUMBER NOT NULL, "RDM_REF_TAB_NEW_VER_PUB"	CHAR(1) DEFAULT ''N'' NOT NULL, RDM_REF_TABLE_NAME VARCHAR2(4000 BYTE), RDM_REF_TABLE_CAT_ID NUMBER, CONSTRAINT "PK_RDM_REF_PUB_HIST_ID" PRIMARY KEY("RDM_REF_TAB_PUB_HIST_ID") ENABLE, CONSTRAINT "FK_RDM_REF_TAB_PUB_ID" FOREIGN KEY("RDM_REF_TAB_ID") REFERENCES "RDM_REFERENCE_TABLE" ("RDM_REF_TABLE_ID") ON DELETE CASCADE ENABLE, CONSTRAINT "FK_TAB_PUB_RDM_ENV_ID" FOREIGN KEY("RDM_ENVIRONMENT_ID") REFERENCES "RDM_PUBLISH_ENVIRONMENTS" ("RDM_ENV_ID") ON DELETE CASCADE ENABLE )';
   END IF;
END;
/

DECLARE
   SEQUENCECHECKERFLAG INT;
BEGIN
    SELECT COUNT(*) INTO SEQUENCECHECKERFLAG FROM ALL_SEQUENCES WHERE SEQUENCE_OWNER = sys_context('userenv', 'current_schema') AND SEQUENCE_NAME = UPPER('RDM_PUBLISH_HIST_SEQ');
   IF SEQUENCECHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'CREATE SEQUENCE   "RDM_PUBLISH_HIST_SEQ"  MINVALUE 1 MAXVALUE 999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE';
   END IF;
END;
/

DECLARE
  TRIGGERCHECKERFLAG INT;
BEGIN
  SELECT COUNT(*)
  INTO TRIGGERCHECKERFLAG
  FROM all_triggers
  WHERE OWNER = sys_context('userenv', 'current_schema') AND trigger_name = UPPER('RDM_PUBLISH_HIST_INSERT');
  IF TRIGGERCHECKERFLAG = 0 THEN
    EXECUTE IMMEDIATE 'CREATE OR REPLACE TRIGGER  "RDM_PUBLISH_HIST_INSERT" BEFORE INSERT ON RDM_REF_TAB_PUBLISH_HISTORY FOR EACH ROW BEGIN SELECT RDM_PUBLISH_HIST_SEQ.NEXTVAL INTO :new.RDM_REF_TAB_PUB_HIST_ID FROM DUAL; END;';
    EXECUTE IMMEDIATE 'ALTER TRIGGER  "RDM_PUBLISH_HIST_INSERT" ENABLE';
  END IF;
END;
/

DECLARE
   TABLECHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO TABLECHECKERFLAG FROM ALL_TABLES WHERE OWNER = sys_context( 'userenv', 'current_schema' ) AND TABLE_NAME = UPPER('RDM_CHANGE_HISTORY');
   IF TABLECHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'CREATE TABLE RDM_CHANGE_HISTORY ( "NEW_NAME" VARCHAR2(4000) NOT NULL, "CHANGE_USE_DESCRIPTION" VARCHAR2(4000) NOT NULL, "OLD_NAME"	VARCHAR2(100) NULL	, "CREATED_BY"	VARCHAR2(100) NOT NULL, "CREATED_DATE"	TIMESTAMP NOT NULL, "MODIFIED_BY"	VARCHAR2(100) NULL, "MODIFIED_DATE"	TIMESTAMP NULL )';
   END IF;
END;
/

DECLARE
   TABLECHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO TABLECHECKERFLAG FROM ALL_TABLES WHERE OWNER = sys_context( 'userenv', 'current_schema' ) AND TABLE_NAME = UPPER('RDM_TABLE_VALIDATIONS');
   IF TABLECHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'CREATE TABLE RDM_TABLE_VALIDATIONS ( "RDM_TAB_VAL_ID"	NUMBER NOT NULL, "RDM_VAL_RULE_ID"	NUMBER NOT NULL, "RDM_REF_TAB_ID"	NUMBER NOT NULL, "RDM_REF_CAT_ID"	NUMBER NOT NULL, "CREATED_BY"	VARCHAR2(100) NOT NULL, "CREATED_DATE"	TIMESTAMP NOT NULL, "MODIFIED_BY"	VARCHAR2(100) NULL, "MODIFIED_DATE" TIMESTAMP NULL, CONSTRAINT "PK_RDM_TAB_VALDTN_ID" PRIMARY KEY("RDM_TAB_VAL_ID") ENABLE, CONSTRAINT "FK_RDM_VALDTN_RULE_ID" FOREIGN KEY("RDM_VAL_RULE_ID") REFERENCES "RDM_VALIDATION_RULES" ("RDM_VAL_RULE_ID") ON DELETE CASCADE ENABLE, CONSTRAINT "FK_RDM_VALDTN_TAB_ID" FOREIGN KEY("RDM_REF_TAB_ID") REFERENCES "RDM_REFERENCE_TABLE" ("RDM_REF_TABLE_ID") ON DELETE CASCADE ENABLE, CONSTRAINT "FK_RDM_VALDTN_CAT_ID" FOREIGN KEY("RDM_REF_CAT_ID") REFERENCES "RDM_CATEGORY" ("RDM_CATEGORY_ID") )';
   END IF;
END;
/

DECLARE
   SEQUENCECHECKERFLAG INT;
BEGIN
    SELECT COUNT(*) INTO SEQUENCECHECKERFLAG FROM ALL_SEQUENCES WHERE SEQUENCE_OWNER = sys_context('userenv', 'current_schema') AND SEQUENCE_NAME = UPPER('RDM_TABLE_VALDTNS_SEQ');
   IF SEQUENCECHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'CREATE SEQUENCE   "RDM_TABLE_VALDTNS_SEQ"  MINVALUE 1 MAXVALUE 999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE';
   END IF;
END;
/

DECLARE
  TRIGGERCHECKERFLAG INT;
BEGIN
  SELECT COUNT(*)
  INTO TRIGGERCHECKERFLAG
  FROM all_triggers
  WHERE OWNER = sys_context('userenv', 'current_schema') AND trigger_name = UPPER('RDM_TABLE_VALDTNS_INSERT');
  IF TRIGGERCHECKERFLAG = 0 THEN
    EXECUTE IMMEDIATE 'CREATE OR REPLACE TRIGGER  "RDM_TABLE_VALDTNS_INSERT" BEFORE INSERT ON RDM_TABLE_VALIDATIONS FOR EACH ROW BEGIN SELECT RDM_TABLE_VALDTNS_SEQ.NEXTVAL INTO :new.RDM_TAB_VAL_ID FROM DUAL; END;';
    EXECUTE IMMEDIATE 'ALTER TRIGGER  "RDM_TABLE_VALDTNS_INSERT" ENABLE';
  END IF;
END;
/

DECLARE
   TABLECHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO TABLECHECKERFLAG FROM ALL_TABLES WHERE OWNER = sys_context( 'userenv', 'current_schema' ) AND TABLE_NAME = UPPER('RDM_REF_TABLE_USERS');
   IF TABLECHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'CREATE TABLE RDM_REF_TABLE_USERS ( "RDM_REF_TAB_USR_ID" NUMBER NOT NULL, "RDM_REF_TAB_ID" NUMBER NOT NULL, "RDM_REF_CAT_ID" NUMBER NOT NULL, "USER_ID"	VARCHAR2(20) NOT NULL, "CREATED_BY"	VARCHAR2(100) NOT NULL, "CREATED_DATE"  TIMESTAMP NOT NULL, "MODIFIED_BY"	VARCHAR2(100) NULL, "MODIFIED_DATE" TIMESTAMP NULL, CONSTRAINT "PK_RDM_REF_TAB_USER_ID" PRIMARY KEY("RDM_REF_TAB_USR_ID") ENABLE, CONSTRAINT "FK_RDM_USER_TAB_ID" FOREIGN KEY("RDM_REF_TAB_ID") REFERENCES "RDM_REFERENCE_TABLE" ("RDM_REF_TABLE_ID") ON DELETE CASCADE ENABLE, CONSTRAINT "FK_RDM_USER_CAT_ID" FOREIGN KEY("RDM_REF_CAT_ID") REFERENCES "RDM_CATEGORY" ("RDM_CATEGORY_ID") ON DELETE CASCADE ENABLE, CONSTRAINT "FK_RDM_TBL_USER_ID" FOREIGN KEY("USER_ID") REFERENCES "USERS" ("USER_ID") ON DELETE CASCADE ENABLE )';
   END IF;
END;
/

DECLARE
   SEQUENCECHECKERFLAG INT;
BEGIN
    SELECT COUNT(*) INTO SEQUENCECHECKERFLAG FROM ALL_SEQUENCES WHERE SEQUENCE_OWNER = sys_context('userenv', 'current_schema') AND SEQUENCE_NAME = UPPER('RDM_REF_TBL_USERS_SEQ');
   IF SEQUENCECHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'CREATE SEQUENCE   "RDM_REF_TBL_USERS_SEQ"  MINVALUE 1 MAXVALUE 999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE';
   END IF;
END;
/

DECLARE
  TRIGGERCHECKERFLAG INT;
BEGIN
  SELECT COUNT(*)
  INTO TRIGGERCHECKERFLAG
  FROM all_triggers
  WHERE OWNER = sys_context('userenv', 'current_schema') AND trigger_name = UPPER('RDM_REF_TBL_USERS_INSERT');
  IF TRIGGERCHECKERFLAG = 0 THEN
    EXECUTE IMMEDIATE 'CREATE OR REPLACE TRIGGER  "RDM_REF_TBL_USERS_INSERT" BEFORE INSERT ON RDM_REF_TABLE_USERS FOR EACH ROW BEGIN SELECT RDM_REF_TBL_USERS_SEQ.NEXTVAL INTO :new.RDM_REF_TAB_USR_ID FROM DUAL; END;';
    EXECUTE IMMEDIATE 'ALTER TRIGGER  "RDM_REF_TBL_USERS_INSERT" ENABLE';
  END IF;
END;
/

DECLARE
   COLUMNCHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO COLUMNCHECKERFLAG FROM ALL_TAB_COLUMNS WHERE  OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME = UPPER('SUBJECT_DETAILS') AND COLUMN_NAME=UPPER('CREATED_BY');
   IF COLUMNCHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'ALTER TABLE SUBJECT_DETAILS ADD CREATED_BY VARCHAR2(50) NULL';
   END IF;
END;
/

DECLARE
   COLUMNCHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO COLUMNCHECKERFLAG FROM ALL_TAB_COLUMNS WHERE  OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME = UPPER('SUBJECT_DETAILS') AND COLUMN_NAME=UPPER('CREATED_DATE_TIME');
   IF COLUMNCHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'ALTER TABLE SUBJECT_DETAILS ADD CREATED_DATE_TIME TIMESTAMP (6) NULL';
   END IF;
END;
/

DECLARE
   COLUMNCHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO COLUMNCHECKERFLAG FROM ALL_TAB_COLUMNS WHERE  OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME = UPPER('SUBJECT_DETAILS') AND COLUMN_NAME=UPPER('LAST_MODIFIED_BY');
   IF COLUMNCHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'ALTER TABLE SUBJECT_DETAILS ADD LAST_MODIFIED_BY VARCHAR2(50) NULL';
   END IF;
END;
/

DECLARE
   COLUMNCHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO COLUMNCHECKERFLAG FROM ALL_TAB_COLUMNS WHERE  OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME = UPPER('SUBJECT_DETAILS') AND COLUMN_NAME=UPPER('LAST_MODIFIED_DATE_TIME');
   IF COLUMNCHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'ALTER TABLE SUBJECT_DETAILS ADD LAST_MODIFIED_DATE_TIME TIMESTAMP (6) NULL';
   END IF;
END;
/

DECLARE
   COLUMNCHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO COLUMNCHECKERFLAG FROM ALL_TAB_COLUMNS WHERE  OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME = UPPER('MAPPING_CHANGE_LOG') AND COLUMN_NAME=UPPER('MAP_SPEC_VERSION');
   IF COLUMNCHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'ALTER TABLE MAPPING_CHANGE_LOG ADD MAP_SPEC_VERSION NUMBER(18,2)NULL';
   END IF;
END;
/
DECLARE
   COLUMNCHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO COLUMNCHECKERFLAG FROM ALL_TAB_COLUMNS WHERE  OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME = UPPER('USERS') AND COLUMN_NAME=UPPER('ENABLED');
   IF COLUMNCHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'ALTER TABLE USERS ADD ENABLED int DEFAULT 1';
      EXECUTE IMMEDIATE 'UPDATE USERS SET ENABLED = 1';

   END IF;
END;
/

DECLARE
   TABLECHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO TABLECHECKERFLAG FROM ALL_TABLES WHERE OWNER = sys_context( 'userenv', 'current_schema' ) AND TABLE_NAME = UPPER('STATE_DETAILS');
   IF TABLECHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'CREATE TABLE STATE_DETAILS ( 	STATE_ID NUMBER NOT NULL, 	STATENAME VARCHAR2(255) NOT NULL, 	CREATED_BY VARCHAR2(50) NULL, 	CREATED_DATE_TIME TIMESTAMP NULL, 	LAST_MODIFIED_BY VARCHAR2(50) NULL, 	LAST_MODIFIED_DATE_TIME TIMESTAMP NULL, 	CONSTRAINT PK_STATE_DETAILS_STATE_ID PRIMARY KEY(STATE_ID)  )';
   END IF;
END;
/

DECLARE
   SEQUENCECHECKERFLAG INT;
BEGIN
    SELECT COUNT(*) INTO SEQUENCECHECKERFLAG FROM ALL_SEQUENCES WHERE SEQUENCE_OWNER = sys_context('userenv', 'current_schema') AND SEQUENCE_NAME = UPPER('STATE_DETAILS_SEQ');
   IF SEQUENCECHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'CREATE SEQUENCE   "STATE_DETAILS_SEQ"  MINVALUE 1 MAXVALUE 999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE';
   END IF;
END;
/

DECLARE
  TRIGGERCHECKERFLAG INT;
BEGIN
  SELECT COUNT(*)
  INTO TRIGGERCHECKERFLAG
  FROM all_triggers
  WHERE OWNER = sys_context('userenv', 'current_schema') AND trigger_name = UPPER('STATE_DETAILS_INSERT');
  IF TRIGGERCHECKERFLAG = 0 THEN
    EXECUTE IMMEDIATE 'CREATE OR REPLACE TRIGGER  "STATE_DETAILS_INSERT" BEFORE INSERT ON STATE_DETAILS FOR EACH ROW BEGIN SELECT STATE_DETAILS_SEQ.NEXTVAL INTO :new.STATE_ID FROM DUAL; END;';
    EXECUTE IMMEDIATE 'ALTER TRIGGER  "STATE_DETAILS_INSERT" ENABLE';
  END IF;
END;
/

DECLARE
   TABLECHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO TABLECHECKERFLAG FROM ALL_TABLES WHERE OWNER = sys_context( 'userenv', 'current_schema' ) AND TABLE_NAME = UPPER('SUBSTATE_DETAILS');
   IF TABLECHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'CREATE TABLE SUBSTATE_DETAILS ( 	SUBSTATE_ID NUMBER NOT NULL, 	SUBSTATENAME VARCHAR2(255) NOT NULL, 	CREATED_BY VARCHAR2(50) NULL, 	CREATED_DATE_TIME TIMESTAMP NULL, 	LAST_MODIFIED_BY VARCHAR2(50) NULL, 	LAST_MODIFIED_DATE_TIME TIMESTAMP NULL, 	CONSTRAINT PK_SUBSTATE_DTLS_SUBSTATE_ID PRIMARY KEY(SUBSTATE_ID) )';
   END IF;
END;
/

DECLARE
   SEQUENCECHECKERFLAG INT;
BEGIN
    SELECT COUNT(*) INTO SEQUENCECHECKERFLAG FROM ALL_SEQUENCES WHERE SEQUENCE_OWNER = sys_context('userenv', 'current_schema') AND SEQUENCE_NAME = UPPER('SUBSTATE_DETAILS_SEQ');
   IF SEQUENCECHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'CREATE SEQUENCE   "SUBSTATE_DETAILS_SEQ"  MINVALUE 1 MAXVALUE 999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE';
   END IF;
END;
/

DECLARE
  TRIGGERCHECKERFLAG INT;
BEGIN
  SELECT COUNT(*)
  INTO TRIGGERCHECKERFLAG FROM all_triggers WHERE OWNER = sys_context('userenv', 'current_schema') AND trigger_name = UPPER('SUBSTATE_DETAILS_INSERT');
  IF TRIGGERCHECKERFLAG = 0 THEN
    EXECUTE IMMEDIATE 'CREATE OR REPLACE TRIGGER  "SUBSTATE_DETAILS_INSERT" BEFORE INSERT ON SUBSTATE_DETAILS FOR EACH ROW BEGIN SELECT SUBSTATE_DETAILS_SEQ.NEXTVAL INTO :new.SUBSTATE_ID FROM DUAL; END;';
    EXECUTE IMMEDIATE 'ALTER TRIGGER  "SUBSTATE_DETAILS_INSERT" ENABLE';
  END IF;
END;
/

DECLARE
   COLUMNCHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO COLUMNCHECKERFLAG FROM ALL_TAB_COLUMNS WHERE  OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME = UPPER('MAPPING_DETAILS') AND COLUMN_NAME=UPPER('STATE_ID');
   IF COLUMNCHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'ALTER TABLE MAPPING_DETAILS ADD STATE_ID NUMBER NULL';
   END IF;
END;
/

DECLARE
   COLUMNCHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO COLUMNCHECKERFLAG FROM ALL_TAB_COLUMNS WHERE  OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME = UPPER('MAPPING_DETAILS') AND COLUMN_NAME=UPPER('SUBSTATE_ID');
   IF COLUMNCHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'ALTER TABLE MAPPING_DETAILS ADD SUBSTATE_ID NUMBER NULL';
   END IF;
END;
/

DECLARE
   TABLECHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO TABLECHECKERFLAG FROM ALL_CONS_COLUMNS WHERE OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME = UPPER('MAPPING_DETAILS') AND COLUMN_NAME = UPPER('STATE_ID') AND CONSTRAINT_NAME = UPPER('FK_MAPPING_DTLS_STATE_ID');
   IF TABLECHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'ALTER TABLE "MAPPING_DETAILS"  ADD  CONSTRAINT "FK_MAPPING_DTLS_STATE_ID" FOREIGN KEY("STATE_ID") REFERENCES "STATE_DETAILS" ("STATE_ID")';
   END IF;
END;
/

DECLARE
   TABLECHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO TABLECHECKERFLAG FROM ALL_CONS_COLUMNS WHERE OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME = UPPER('MAPPING_DETAILS') AND COLUMN_NAME = UPPER('SUBSTATE_ID') AND CONSTRAINT_NAME = UPPER('FK_MAP_DTLS_SUBSTATE_ID');
   IF TABLECHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'ALTER TABLE "MAPPING_DETAILS"  ADD  CONSTRAINT "FK_MAP_DTLS_SUBSTATE_ID" FOREIGN KEY("SUBSTATE_ID") REFERENCES "SUBSTATE_DETAILS" ("SUBSTATE_ID")';
   END IF;
END;
/

DECLARE
   TABLECHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO TABLECHECKERFLAG FROM ALL_TABLES WHERE OWNER = sys_context( 'userenv', 'current_schema' ) AND TABLE_NAME = UPPER('RDM_COLUMN_CODESETS');
   IF TABLECHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'CREATE TABLE "RDM_COLUMN_CODESETS"   (     "RDM_COL_CS_ID"      NUMBER NOT NULL,     "RDM_CODESET_ID"     NUMBER NOT NULL,     "RDM_REF_TAB_COL_ID" NUMBER NOT NULL,     CONSTRAINT "PK_RDM_COL_CODESETS_CS_ID" PRIMARY KEY ("RDM_COL_CS_ID") ,     CONSTRAINT "FK_RDM_COLUMN_CS" FOREIGN KEY ("RDM_CODESET_ID") REFERENCES "CSM_CODESET" ("CODESET_ID") ON DELETE CASCADE ENABLE,     CONSTRAINT "FK_RDM_COLUMN_ID" FOREIGN KEY ("RDM_REF_TAB_COL_ID") REFERENCES "RDM_REF_TAB_COLUMNS" ("RDM_REF_TAB_COL_ID") ON DELETE CASCADE ENABLE   )';
   END IF;
END;
/

DECLARE
   SEQUENCECHECKERFLAG INT;
BEGIN
    SELECT COUNT(*) INTO SEQUENCECHECKERFLAG FROM ALL_SEQUENCES WHERE SEQUENCE_OWNER = sys_context('userenv', 'current_schema') AND SEQUENCE_NAME = UPPER('RDM_COLUMN_CODESETS_SEQ');
   IF SEQUENCECHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'CREATE SEQUENCE   "RDM_COLUMN_CODESETS_SEQ"  MINVALUE 1 MAXVALUE 999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE';
   END IF;
END;
/

DECLARE
  TRIGGERCHECKERFLAG INT;
BEGIN
  SELECT COUNT(*) INTO TRIGGERCHECKERFLAG FROM all_triggers WHERE OWNER = sys_context('userenv', 'current_schema') AND trigger_name = UPPER('RDM_COLUMN_CODESETS_INSERT');
  IF TRIGGERCHECKERFLAG = 0 THEN
    EXECUTE IMMEDIATE 'CREATE OR REPLACE TRIGGER  "RDM_COLUMN_CODESETS_INSERT" BEFORE INSERT ON RDM_COLUMN_CODESETS FOR EACH ROW BEGIN SELECT RDM_COLUMN_CODESETS_SEQ.NEXTVAL INTO :new.RDM_COL_CS_ID FROM DUAL; END;';
    EXECUTE IMMEDIATE 'ALTER TRIGGER  "RDM_COLUMN_CODESETS_INSERT" ENABLE';
  END IF;
END;
/
DECLARE
   TABLECHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO TABLECHECKERFLAG FROM ALL_TABLES WHERE OWNER = sys_context( 'userenv', 'current_schema' ) AND TABLE_NAME = UPPER('RDM_REF_TAB_USERDEFINED');
   IF TABLECHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'CREATE TABLE "RDM_REF_TAB_USERDEFINED"   (     "RDM_REF_TABLE_UD_ID"  NUMBER NOT NULL,     "RDM_REF_TABLE_ID"     NUMBER NOT NULL ,     "USER_DEFINED_FIELD1"  VARCHAR2(4000 BYTE),     "USER_DEFINED_FIELD2"  VARCHAR2(4000 BYTE),     "USER_DEFINED_FIELD3"  VARCHAR2(4000 BYTE),     "USER_DEFINED_FIELD4"  VARCHAR2(4000 BYTE),     "USER_DEFINED_FIELD5"  VARCHAR2(4000 BYTE),     "USER_DEFINED_FIELD6"  VARCHAR2(4000 BYTE),     "USER_DEFINED_FIELD7"  VARCHAR2(4000 BYTE),     "USER_DEFINED_FIELD8"  VARCHAR2(4000 BYTE),     "USER_DEFINED_FIELD9"  VARCHAR2(4000 BYTE),     "USER_DEFINED_FIELD10" VARCHAR2(4000 BYTE),     CONSTRAINT "PK_RDM_TABLE_UD_ID" PRIMARY KEY ("RDM_REF_TABLE_UD_ID") ,     CONSTRAINT "FK_RDM_REF_TAB_USERDEFINED" FOREIGN KEY ("RDM_REF_TABLE_ID") REFERENCES "RDM_REFERENCE_TABLE" ("RDM_REF_TABLE_ID") ON DELETE CASCADE ENABLE   )';
   END IF;
END;
/

DECLARE
   SEQUENCECHECKERFLAG INT;
BEGIN
    SELECT COUNT(*) INTO SEQUENCECHECKERFLAG FROM ALL_SEQUENCES WHERE SEQUENCE_OWNER = sys_context('userenv', 'current_schema') AND SEQUENCE_NAME = UPPER('RDM_REF_TAB_USD_SEQ');
   IF SEQUENCECHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'CREATE SEQUENCE   "RDM_REF_TAB_USD_SEQ"  MINVALUE 1 MAXVALUE 999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE';
   END IF;
END;
/

DECLARE
  TRIGGERCHECKERFLAG INT;
BEGIN
  SELECT COUNT(*)
  INTO TRIGGERCHECKERFLAG
  FROM all_triggers
  WHERE OWNER = sys_context('userenv', 'current_schema') AND trigger_name = UPPER('RDM_REF_TAB_USERDEFINED_INSERT');
  IF TRIGGERCHECKERFLAG = 0 THEN
    EXECUTE IMMEDIATE 'CREATE OR REPLACE TRIGGER  "RDM_REF_TAB_USERDEFINED_INSERT" BEFORE INSERT ON RDM_REF_TAB_USERDEFINED FOR EACH ROW BEGIN SELECT RDM_REF_TAB_USD_SEQ.NEXTVAL INTO :new.RDM_REF_TABLE_UD_ID FROM DUAL; END;';
    EXECUTE IMMEDIATE 'ALTER TRIGGER  "RDM_REF_TAB_USERDEFINED_INSERT" ENABLE';
  END IF;
END;
/


DECLARE
   TABLECHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO TABLECHECKERFLAG FROM ALL_TABLES WHERE OWNER = sys_context( 'userenv', 'current_schema' ) AND TABLE_NAME = UPPER('temp_strut');
   IF TABLECHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'create table temp_strut as         SELECT RDM_REF_TAB_COL_NAME, rdm_ref_tab_col_value, RDM_TAB_COL_VAL_ROW_ORDER          FROM RDM_REFERENCE_TABLE A, rdm_ref_tab_columns C, RDM_REF_TAB_COL_VALUES d         WHERE a.rdm_ref_table_id = c.rdm_ref_tab_id and c.rdm_ref_tab_col_id = d.rdm_ref_tab_col_id';
   END IF;
END;
/

DECLARE
   TABLECHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO TABLECHECKERFLAG FROM ALL_OBJECTS WHERE OWNER = sys_context('userenv', 'current_schema') AND OBJECT_TYPE = 'PROCEDURE' AND OBJECT_NAME = UPPER('RDM_CREATE_VAL_TABLES');
   IF TABLECHECKERFLAG = 1 THEN
      EXECUTE IMMEDIATE 'DROP PROCEDURE RDM_CREATE_VAL_TABLES';
   END IF;
END;
/

create or replace
PROCEDURE RDM_CREATE_VAL_TABLES(tab_id in NUMBER) AS
      temp_tab rdm_reference_table.rdm_ref_table_name%type;
      l_query long := 'select RDM_TAB_COL_VAL_ROW_ORDER as ROW_NUM';
      final_query long :='';
      flag int;
  Begin
        execute immediate 'truncate table TEMP_STRUT';

        execute immediate 'insert into temp_strut
        SELECT RDM_REF_TAB_COL_NAME, rdm_ref_tab_col_value, RDM_TAB_COL_VAL_ROW_ORDER
        FROM RDM_REFERENCE_TABLE A, rdm_ref_tab_columns C, RDM_REF_TAB_COL_VALUES d
        WHERE a.rdm_ref_table_id = c.rdm_ref_tab_id and c.rdm_ref_tab_col_id = d.rdm_ref_tab_col_id
        AND a.rdm_ref_table_id = '||tab_id||'
        ORDER BY RDM_REF_TAB_COL_NAME,RDM_TAB_COL_VAL_ROW_ORDER';

        SELECT RDM_REF_TABLE_NAME into temp_tab FROM RDM_REFERENCE_TABLE WHERE rdm_ref_table_id = tab_id;

        select count(*) into flag from all_tables where OWNER = sys_context('userenv', 'current_schema') AND table_name=upper(''|| temp_tab ||'');

        IF flag = 1 then
        execute immediate 'drop table ' || temp_tab ;
        end if;

        for x in (select distinct RDM_REF_TAB_COL_NAME from temp_strut order by 1 )
        loop
         l_query := l_query ||
            replace( q'|, max(decode(RDM_REF_TAB_COL_NAME,trim(chr(34) from '$X$'),RDM_REF_TAB_COL_VALUE)) $X$|', '$X$', dbms_assert.simple_sql_name('"'||x.RDM_REF_TAB_COL_NAME||'"') );
         end loop;

        final_query := 'create table '|| temp_tab ||' as '|| l_query || ' from temp_strut group by RDM_TAB_COL_VAL_ROW_ORDER order by RDM_TAB_COL_VAL_ROW_ORDER';
     execute immediate final_query;
   END;
/

DECLARE
   COLUMNCHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO COLUMNCHECKERFLAG FROM ALL_TAB_COLUMNS WHERE  OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME = UPPER('RDM_REF_TAB_COL_VAL_ERRORS') AND COLUMN_NAME=UPPER('RDM_REF_TAB_COL_VALUE_ID');
   IF COLUMNCHECKERFLAG > 0 THEN
      EXECUTE IMMEDIATE 'ALTER TABLE RDM_REF_TAB_COL_VAL_ERRORS RENAME COLUMN RDM_REF_TAB_COL_VALUE_ID TO RDM_TAB_COL_VAL_ROW_ORDER';
   END IF;
END;
/

DECLARE
   TABLECHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO TABLECHECKERFLAG FROM ALL_CONS_COLUMNS WHERE OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME = UPPER('RDM_REF_TAB_COL_VAL_ERRORS') AND CONSTRAINT_NAME = UPPER('FK_RDM_TAB_COL_ID');
   IF TABLECHECKERFLAG > 0 THEN
      EXECUTE IMMEDIATE 'ALTER TABLE RDM_REF_TAB_COL_VAL_ERRORS DROP CONSTRAINT FK_RDM_TAB_COL_ID';
   END IF;
END;
/

DECLARE
   TABLECHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO TABLECHECKERFLAG FROM all_VIEWS WHERE OWNER = sys_context('userenv', 'current_schema') AND VIEW_NAME = UPPER('VIEW_REF_TAB_COL_VALUES');
   IF TABLECHECKERFLAG = 1 THEN
      EXECUTE IMMEDIATE 'DROP VIEW VIEW_REF_TAB_COL_VALUES';
   END IF;
END;
/

CREATE OR REPLACE FORCE VIEW "VIEW_REF_TAB_COL_VALUES" ("RDM_CATEGORY_NAME", "RDM_REF_TABLE_NAME", "RDM_REF_TAB_COL_NAME", "RDM_REF_TAB_COL_VALUE", "CREATED_BY", "CREATED_DATE", "MODIFIED_DATE", "MODIFIED_BY")
AS
  SELECT D.rdm_category_name,
    A.RDM_REF_TABLE_NAME ||' ('||case when instr(A.RDM_REF_TAB_VERSION,'.')=0 then concat(cast(A.RDM_REF_TAB_VERSION as varchar2(10)),'.00')when instr(substr(A.RDM_REF_TAB_VERSION,-2),'.')!=0 then concat(cast(A.RDM_REF_TAB_VERSION as varchar2(10)),'0')else CAST(A.RDM_REF_TAB_VERSION AS VARCHAR2(20))END||')',    B.RDM_REF_TAB_COL_NAME,
    C.RDM_REF_TAB_COL_VALUE,
    C.CREATED_BY,
    C.CREATED_DATE,
    C.MODIFIED_DATE,
    C.MODIFIED_BY
  FROM rdm_reference_table A,
    RDM_REF_TAB_COLUMNS B,
    RDM_REF_TAB_COL_VALUES C,
    rdm_category D
  WHERE A.RDM_REF_TABLE_ID = B.RDM_REF_TAB_ID
  AND B.RDM_REF_TAB_COL_ID = C.RDM_REF_TAB_COL_ID
  AND d.rdm_category_id    = a.rdm_ref_table_cat_id
  ORDER BY A.RDM_REF_TABLE_NAME,
    B.RDM_REF_TAB_COL_NAME,
    C.RDM_REF_TAB_COL_VALUE;
/

DECLARE
   TABLECHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO TABLECHECKERFLAG FROM all_VIEWS WHERE OWNER = sys_context('userenv', 'current_schema') AND VIEW_NAME = UPPER('VIEW_REF_TAB_COLUMN');
   IF TABLECHECKERFLAG = 1 THEN
      EXECUTE IMMEDIATE 'DROP VIEW VIEW_REF_TAB_COLUMN';
   END IF;
END;
/

CREATE OR REPLACE FORCE VIEW "VIEW_REF_TAB_COLUMN" ("RDM_CATEGORY_NAME", "RDM_REF_TABLE_NAME", "RDM_REF_TAB_COL_NAME", "CREATED_BY", "CREATED_DATE", "MODIFIED_DATE", "MODIFIED_BY")
AS
  SELECT c.rdm_category_name,
    A.RDM_REF_TABLE_NAME ||' ('||case when instr(A.RDM_REF_TAB_VERSION,'.')=0 then concat(cast(A.RDM_REF_TAB_VERSION as varchar2(10)),'.00')when instr(substr(A.RDM_REF_TAB_VERSION,-2),'.')!=0 then concat(cast(A.RDM_REF_TAB_VERSION as varchar2(10)),'0')else CAST(A.RDM_REF_TAB_VERSION AS VARCHAR2(20))END||')',
    B.RDM_REF_TAB_COL_NAME,
    B.CREATED_BY,
    B.CREATED_DATE,
    B.MODIFIED_DATE,
    B.MODIFIED_BY
  FROM rdm_reference_table A,
    RDM_REF_TAB_COLUMNS B,
    rdm_category C
  WHERE A.RDM_REF_TABLE_ID = B.RDM_REF_TAB_ID
  AND C.rdm_category_id    = A.rdm_ref_table_cat_id
  ORDER BY A.RDM_REF_TABLE_NAME,
    B.RDM_REF_TAB_COL_NAME;
/

DECLARE
   TABLECHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO TABLECHECKERFLAG FROM all_VIEWS WHERE OWNER = sys_context('userenv', 'current_schema') AND VIEW_NAME = UPPER('VIEW_REF_TABLE');
   IF TABLECHECKERFLAG = 1 THEN
      EXECUTE IMMEDIATE 'DROP VIEW VIEW_REF_TABLE';
   END IF;
END;
/

CREATE OR REPLACE FORCE VIEW "VIEW_REF_TABLE" ("RDM_CATEGORY_NAME", "RDM_REF_TABLE_ID", "RDM_REF_TABLE_NAME", "RDM_REF_TABLE_DESC", "RDM_REF_TAB_OWNER","RDM_REF_TAB_VER_DESC","RDM_REF_TAB_VER_LABEL", "CREATED_BY", "CREATED_DATE", "MODIFIED_BY", "MODIFIED_DATE", "USER_DEFINED_FIELD1", "USER_DEFINED_FIELD2", "USER_DEFINED_FIELD3", "USER_DEFINED_FIELD4", "USER_DEFINED_FIELD5", "USER_DEFINED_FIELD6", "USER_DEFINED_FIELD7", "USER_DEFINED_FIELD8", "USER_DEFINED_FIELD9", "USER_DEFINED_FIELD10")
AS
  SELECT RDM_CATEGORY_NAME,
    rdm_reference_table.RDM_REF_TABLE_ID,
    RDM_REF_TABLE_NAME ||' ('||CASE     WHEN instr(RDM_REF_TAB_VERSION,'.')=0     THEN concat(CAST(RDM_REF_TAB_VERSION AS VARCHAR2(10)),'.00')     WHEN instr(SUBSTR(RDM_REF_TAB_VERSION,-2),'.')!=0     THEN concat(CAST(RDM_REF_TAB_VERSION AS VARCHAR2(10)),'0')     ELSE CAST(RDM_REF_TAB_VERSION AS VARCHAR2(20))   END||')' as RDM_REF_TABLE_NAME,    RDM_REF_TABLE_DESC,
    RDM_REF_TAB_OWNER,
    RDM_REF_TAB_VER_DESC,
    RDM_REF_TAB_VER_LABEL,
    rdm_reference_table.CREATED_BY,
    rdm_reference_table.CREATED_DATE,
    rdm_reference_table.MODIFIED_BY,
    rdm_reference_table.MODIFIED_DATE,
    USER_DEFINED_FIELD1,
    USER_DEFINED_FIELD2,
    USER_DEFINED_FIELD3,
    USER_DEFINED_FIELD4,
    USER_DEFINED_FIELD5,
    USER_DEFINED_FIELD6,
    USER_DEFINED_FIELD7,
    USER_DEFINED_FIELD8,
    USER_DEFINED_FIELD9,
    USER_DEFINED_FIELD10
  FROM rdm_reference_table,
    rdm_category,
    RDM_REF_TAB_USERDEFINED
  WHERE rdm_reference_table.rdm_ref_table_cat_id = rdm_category.rdm_category_id
  AND rdm_reference_table.rdm_ref_table_id       = rdm_ref_tab_userdefined.rdm_ref_table_id;
/

DECLARE
   TABLECHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO TABLECHECKERFLAG FROM ALL_TABLES WHERE OWNER = sys_context( 'userenv', 'current_schema' ) AND TABLE_NAME = UPPER('CSM_MAP_CATEGORY');
   IF TABLECHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'CREATE TABLE CSM_MAP_CATEGORY ( CSM_MAP_CAT_ID NUMBER NOT NULL, CSM_MAP_CAT_NAME VARCHAR2(4000) NOT NULL, CSM_MAP_CAT_DESC VARCHAR2(4000) NULL, CSM_MAP_PARENT_CAT_ID NUMBER NOT NULL, CREATED_BY VARCHAR2(100) NOT NULL, CREATED_DATE TIMESTAMP(6) NOT NULL, MODIFIED_BY VARCHAR2(100) NULL, MODIFIED_DATE TIMESTAMP(6) NULL, CONSTRAINT PK_CSM_MAP_CAT_ID PRIMARY KEY(CSM_MAP_CAT_ID), CONSTRAINT UK_CSM_MAP_PAR_CID UNIQUE(CSM_MAP_PARENT_CAT_ID,CSM_MAP_CAT_NAME) )';
   END IF;
END;
/

DECLARE
   SEQUENCECHECKERFLAG INT;
BEGIN
    SELECT COUNT(*) INTO SEQUENCECHECKERFLAG FROM ALL_SEQUENCES WHERE SEQUENCE_OWNER = sys_context('userenv', 'current_schema') AND SEQUENCE_NAME = UPPER('CSM_MAP_CATEGORY_SEQ');
   IF SEQUENCECHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'CREATE SEQUENCE   "CSM_MAP_CATEGORY_SEQ"  MINVALUE 1 MAXVALUE 999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE';
   END IF;
END;
/

DECLARE
  TRIGGERCHECKERFLAG INT;
BEGIN
  SELECT COUNT(*)
  INTO TRIGGERCHECKERFLAG
  FROM all_triggers
  WHERE OWNER = sys_context('userenv', 'current_schema') AND trigger_name = UPPER('CSM_MAP_CATEGORY_INSERT');
  IF TRIGGERCHECKERFLAG = 0 THEN
    EXECUTE IMMEDIATE 'CREATE OR REPLACE TRIGGER  "CSM_MAP_CATEGORY_INSERT" BEFORE INSERT ON CSM_MAP_CATEGORY FOR EACH ROW BEGIN SELECT CSM_MAP_CATEGORY_SEQ.NEXTVAL INTO :new.CSM_MAP_CAT_ID FROM DUAL; END;';
    EXECUTE IMMEDIATE 'ALTER TRIGGER  "CSM_MAP_CATEGORY_INSERT" ENABLE';
  END IF;
END;
/

DECLARE
   COLUMNCHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO COLUMNCHECKERFLAG FROM ALL_TAB_COLUMNS WHERE  OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME = UPPER('CSM_MAPPING_DETAILS') AND COLUMN_NAME=UPPER('CSM_MAP_CAT_ID');
   IF COLUMNCHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'ALTER TABLE CSM_MAPPING_DETAILS ADD CSM_MAP_CAT_ID NUMBER NULL';
   END IF;
END;
/

DECLARE
   TABLECHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO TABLECHECKERFLAG FROM ALL_CONS_COLUMNS WHERE OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME = UPPER('CSM_MAPPING_DETAILS') AND COLUMN_NAME = UPPER('CSM_MAP_CAT_ID') AND CONSTRAINT_NAME = UPPER('FK_CSM_MAPDTLS_CAT_ID');
   IF TABLECHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'ALTER TABLE "CSM_MAPPING_DETAILS"  ADD  CONSTRAINT "FK_CSM_MAPDTLS_CAT_ID" FOREIGN KEY("CSM_MAP_CAT_ID") REFERENCES "CSM_MAP_CATEGORY" ("CSM_MAP_CAT_ID") ON DELETE CASCADE ENABLE';
      EXECUTE IMMEDIATE 'ALTER TABLE "CSM_MAPPING_DETAILS"  ADD  CONSTRAINT "UK_CSM_MAP_NAME_CAT_ID" UNIQUE (CSM_MAP_CAT_ID,CSM_MAP_NAME,CSM_MAP_VERSION)';
   END IF;
END;
/

DECLARE
   TABLECHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO TABLECHECKERFLAG FROM ALL_CONS_COLUMNS WHERE OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME = UPPER('CSM_CATEGORY') AND CONSTRAINT_NAME = UPPER('UK_CSM_CAT_NAME_ID');
   IF TABLECHECKERFLAG = 0 THEN
        EXECUTE IMMEDIATE 'ALTER TABLE "CSM_CATEGORY"  ADD  CONSTRAINT "UK_CSM_CAT_NAME_ID" UNIQUE (CATEGORY_ID,CATEGORY_NAME)';
   END IF;
END;
/
DECLARE
   COLUMNCHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO COLUMNCHECKERFLAG FROM ALL_TAB_COLUMNS WHERE  OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME = UPPER('MAPPING_DETAILS') AND COLUMN_NAME=UPPER('SUBJECT_ID');
   IF COLUMNCHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'ALTER TABLE MAPPING_DETAILS ADD SUBJECT_ID NUMBER DEFAULT -1 NOT NULL';
   END IF;
END;
/

DECLARE
   COLUMNCHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO COLUMNCHECKERFLAG FROM ALL_TAB_COLUMNS WHERE  OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME = UPPER('SUBJECT_DETAILS') AND COLUMN_NAME=UPPER('PARENT_SUBJECT_ID');
   IF COLUMNCHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'ALTER TABLE SUBJECT_DETAILS ADD PARENT_SUBJECT_ID NUMBER DEFAULT -1 NOT NULL';
   END IF;
END;
/

DECLARE
   COLUMNCHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO COLUMNCHECKERFLAG FROM ALL_TAB_COLUMNS WHERE  OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME = UPPER('SUBJECT_DETAILS') AND COLUMN_NAME=UPPER('PROJECT_ID');
   IF COLUMNCHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'ALTER TABLE SUBJECT_DETAILS ADD PROJECT_ID NUMBER DEFAULT 0 NOT NULL';
   END IF;
END;
/


DECLARE
   TABLECHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) into TABLECHECKERFLAG FROM ALL_TABLES WHERE OWNER = sys_context( 'userenv', 'current_schema' ) AND TABLE_NAME = UPPER('PROJECTSUBJECTS');
   IF TABLECHECKERFLAG = 1 THEN
         MERGE INTO SUBJECT_DETAILS SD USING (SELECT PARENT_SUBJECT_ID ,PROJECT_ID,SUBJECT_ID  FROM PROJECTSUBJECTS ) PS
         ON (SD.SUBJECT_ID = PS.SUBJECT_ID) WHEN MATCHED THEN
         UPDATE SET SD.PROJECT_ID = PS.PROJECT_ID,
         SD.PARENT_SUBJECT_ID = PS.PARENT_SUBJECT_ID ;
      EXECUTE IMMEDIATE 'DROP TABLE PROJECTSUBJECTS';
   END IF;
END;
/

DECLARE
   TABLECHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) into TABLECHECKERFLAG FROM ALL_TABLES WHERE OWNER = sys_context( 'userenv', 'current_schema' ) AND TABLE_NAME = UPPER('SUBJECTMAPPINGS');
   IF TABLECHECKERFLAG = 1 THEN
         MERGE INTO MAPPING_DETAILS MD USING (SELECT MAPPING_ID,SUBJECT_ID FROM SUBJECTMAPPINGS ) SM
		 ON (MD.MAP_ID = SM.MAPPING_ID) WHEN MATCHED THEN
		 UPDATE SET  MD.SUBJECT_ID = SM.SUBJECT_ID;

		 EXECUTE IMMEDIATE 'DROP TABLE SUBJECTMAPPINGS';
   END IF;
END;
/


DECLARE
   TABLECHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO TABLECHECKERFLAG FROM ALL_CONS_COLUMNS WHERE OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME = UPPER('MAPPING_DETAILS') AND CONSTRAINT_NAME = UPPER('UK_MAP_DET_NAME_PSID');
   IF TABLECHECKERFLAG = 0 THEN
        EXECUTE IMMEDIATE 'ALTER TABLE "MAPPING_DETAILS"  ADD  CONSTRAINT "UK_MAP_DET_NAME_PSID" UNIQUE (PROJECT_ID,SUBJECT_ID,MAP_NAME,MAP_SPEC_VERSION)';
   END IF;
END;
/

DECLARE
   TABLECHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO TABLECHECKERFLAG FROM ALL_CONS_COLUMNS WHERE OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME = UPPER('SUBJECT_DETAILS') AND CONSTRAINT_NAME = UPPER('UK_SUB_DET_NAME_ID');
   IF TABLECHECKERFLAG = 0 THEN
        EXECUTE IMMEDIATE 'ALTER TABLE "SUBJECT_DETAILS"  ADD  CONSTRAINT "UK_SUB_DET_NAME_ID" UNIQUE (PARENT_SUBJECT_ID,PROJECT_ID, SUBJECT_NAME)';
   END IF;
END;
/

DECLARE
   TABLECHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO TABLECHECKERFLAG FROM ALL_OBJECTS WHERE OWNER = sys_context('userenv', 'current_schema') AND OBJECT_TYPE = 'FUNCTION' AND OBJECT_NAME = UPPER('MAP_COUNT');
   IF TABLECHECKERFLAG = 1 THEN
      EXECUTE IMMEDIATE 'DROP FUNCTION MAP_COUNT';
   END IF;
END;
/

CREATE OR REPLACE FUNCTION MAP_COUNT(       v_SUBJECT_ID IN NUMBER )     RETURN NUMBER   AS     V_MAP_COUNT   NUMBER;     V_CHILD_COUNT NUMBER:=0;     CURSOR c1_childs(p_subject_id NUMBER)     IS       SELECT subject_id FROM SUBJECT_DETAILS WHERE parent_subject_id = p_subject_id;   BEGIN     BEGIN       SELECT COUNT(*)       INTO V_map_COUNT       FROM MAPPING_DETAILS A1       WHERE A1.STATUS       = 'Active'       AND A1.SUBJECT_ID      = V_SUBJECT_ID;     EXCEPTION     WHEN OTHERS THEN       v_map_count := 0;     END;     FOR R1_CHILDS IN C1_CHILDS(V_SUBJECT_ID)     LOOP       v_child_count := v_child_count + map_count(r1_childs.subject_id);     END LOOP;     RETURN (V_CHILD_COUNT + V_MAP_COUNT);   END MAP_COUNT;
/

DECLARE
   TABLECHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO TABLECHECKERFLAG FROM ALL_OBJECTS WHERE OWNER = sys_context('userenv', 'current_schema') AND OBJECT_TYPE = 'FUNCTION' AND OBJECT_NAME = UPPER('PUBLISHMAP_COUNT');
   IF TABLECHECKERFLAG = 1 THEN
      EXECUTE IMMEDIATE 'DROP FUNCTION PUBLISHMAP_COUNT';
   END IF;
END;
/

CREATE OR REPLACE   FUNCTION PUBLISHMAP_COUNT(       v_SUBJECT_ID  IN NUMBER ,       effectiveDate IN TIMESTAMP)     RETURN NUMBER   AS     V_MAP_COUNT   NUMBER;     V_CHILD_COUNT NUMBER:=0;     CURSOR c1_childs(p_subject_id NUMBER)     IS        SELECT subject_id FROM SUBJECT_DETAILS WHERE parent_subject_id = p_subject_id;   BEGIN     BEGIN       IF TRIM(effectivedate) IS NOT NULL THEN         SELECT COUNT(*)         INTO V_map_COUNT         FROM MAPPING_DETAILS A1         WHERE A1.ISPUBLISHED      = 'Y'         AND (A1.EFFECTIVE_DATE) = effectiveDate         AND SUBJECT_ID          = V_SUBJECT_ID;       ELSE         SELECT COUNT(*)         INTO V_MAP_COUNT         FROM MAPPING_DETAILS A1         WHERE A1.ISPUBLISHED     = 'Y'         AND A1.EFFECTIVE_DATE <=           (SELECT sysdate FROM dual           )         AND SUBJECT_ID = V_SUBJECT_ID;       END IF;     EXCEPTION     WHEN OTHERS THEN       v_map_count := 0;     END;     FOR R1_CHILDS IN C1_CHILDS(V_SUBJECT_ID)     LOOP       v_child_count := v_child_count + PUBLISHMAP_COUNT(r1_childs.subject_id,effectiveDate);     END LOOP;     RETURN (V_CHILD_COUNT + V_MAP_COUNT);   END PUBLISHMAP_COUNT;
/

DECLARE
   TABLECHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO TABLECHECKERFLAG FROM ALL_OBJECTS WHERE OWNER = sys_context('userenv', 'current_schema') AND OBJECT_TYPE = 'FUNCTION' AND OBJECT_NAME = UPPER('FN_ELIGIBLEMAPCOUNT');
   IF TABLECHECKERFLAG = 1 THEN
      EXECUTE IMMEDIATE 'DROP FUNCTION FN_ELIGIBLEMAPCOUNT';
   END IF;
END;
/

CREATE OR REPLACE   FUNCTION FN_ELIGIBLEMAPCOUNT(       v_SUBJECT_ID IN NUMBER)     RETURN NUMBER   AS     V_MAP_COUNT   NUMBER;     V_CHILD_COUNT NUMBER:=0;     CURSOR c1_childs(p_subject_id NUMBER)     IS       SELECT subject_id FROM SUBJECT_DETAILS WHERE parent_subject_id = p_subject_id;   BEGIN     BEGIN       SELECT COUNT(*)       INTO V_MAP_COUNT       FROM MAPPING_DETAILS A1       WHERE A1.ISPUBLISHED = 'N'   AND A1.STATUS = 'Active'    AND (A1.MAP_ID NOT  IN         ( SELECT map_id FROM NOT_ELIGIBLE_MAPS         ))       AND A1.MAP_ID IN         (SELECT DISTINCT MAP_ID         FROM MAPPING_SPECIFICATION ms         WHERE ((TRIM(MS.TGT_SYSTEM_ENVIRONMENT_NAME) IS NOT NULL         AND TRIM(MS.TGT_SYSTEM_NAME)                 IS NOT NULL)         OR (TRIM(MS.SRC_SYSTEM_NAME)                 IS NOT NULL         AND TRIM(ms.src_system_environment_name)     IS NOT NULL))         )       AND A1.MAP_ID NOT IN         (SELECT DISTINCT map_id         FROM SPECIFICATION_LOCK         WHERE ISSPECIFICATION_LOCK = 'Y'         ) AND A1.MAP_ID NOT IN (SELECT COALESCE(map_id ,NULL,0) FROM RM_MIGRATIONOBJECT)       AND SUBJECT_ID = V_SUBJECT_ID;     EXCEPTION     WHEN OTHERS THEN       v_map_count := 0;     END;     FOR R1_CHILDS IN C1_CHILDS(V_SUBJECT_ID)     LOOP       v_child_count := v_child_count + FN_ELIGIBLEMAPCOUNT(r1_childs.subject_id);     END LOOP;     RETURN (V_CHILD_COUNT + V_MAP_COUNT);   END FN_ELIGIBLEMAPCOUNT;
/


DECLARE
   TABLECHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO TABLECHECKERFLAG FROM "ADS_MODULES";
   IF TABLECHECKERFLAG = 5 THEN
    INSERT INTO ADS_MODULES(MODULE_ID, MODULE_NAME, MODULE_KEY, MODULE_ORDER, MODULE_FORWARD)
    (SELECT 6, 'Reference Data Manager', 'com.ads.mm.permission.rdm', 6, 'referencedatamanager' FROM DUAL);
END IF;
END;
/

DECLARE
   TABLECHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO TABLECHECKERFLAG FROM ALL_TABLES WHERE OWNER = sys_context( 'userenv', 'current_schema' ) AND TABLE_NAME = UPPER('CSM_PUBLISH_ENVIRONMENTS');
   IF TABLECHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'CREATE TABLE "CSM_PUBLISH_ENVIRONMENTS"   (     "CSM_ENV_ID"       NUMBER NOT NULL,     "ENVIRONMENT_NAME" VARCHAR2(50) NOT NULL,     "CREATED_BY"       VARCHAR2(100) NOT NULL,     "CREATED_DATE" TIMESTAMP (6) NOT NULL,     "MODIFIED_BY" VARCHAR2(100),     "MODIFIED_DATE" TIMESTAMP (6),     CONSTRAINT "PK_CSM_PUB_ENVRTS_CSM_ENV_ID" PRIMARY KEY ("CSM_ENV_ID")   )';
   END IF;
END;
/

DECLARE
   TABLECHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO TABLECHECKERFLAG FROM ALL_TABLES WHERE OWNER = sys_context( 'userenv', 'current_schema' ) AND TABLE_NAME = UPPER('CSM_CODESET_PUBLISH_HISTORY');
   IF TABLECHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'CREATE TABLE "CSM_CODESET_PUBLISH_HISTORY"   (     "CSM_CODESET_PUB_HIST_ID" NUMBER NOT NULL ,     "CSM_CODESET_ID"          NUMBER NOT NULL ,     "CSM_CODESET_VERSION"     NUMBER(16,2) NOT NULL ,     "CSM_CODESET_PUBLISH_DATE" TIMESTAMP (6) NOT NULL ,     "CSM_CODESET_PUBLISH_BY" VARCHAR2(100 BYTE) NOT NULL ,     "CSM_CODESET_EFFECT_DT" TIMESTAMP (6),     "CSM_CODESET_EXPIRY_DT" TIMESTAMP (6),     "CREATED_BY" VARCHAR2(100 BYTE) NOT NULL ,     "CREATED_DATE" TIMESTAMP (6) NOT NULL ,     "MODIFIED_BY" VARCHAR2(100 BYTE),     "MODIFIED_DATE" TIMESTAMP (6),     "CSM_ENVIRONMENT_ID"      NUMBER NOT NULL ,     "CSM_CODESET_NEW_VER_PUB" CHAR(1 BYTE) DEFAULT ''N'' NOT NULL ,     "CSM_CODESET_NAME"      VARCHAR2(4000 BYTE),     "CSM_CODESET_CAT_ID"    NUMBER,     CONSTRAINT "PK_CODESET_PUB_HIST_ID" PRIMARY KEY ("CSM_CODESET_PUB_HIST_ID"),     CONSTRAINT "FK_CSM_PUB_CODESET_ID" FOREIGN KEY ("CSM_CODESET_ID") REFERENCES "CSM_CODESET" ("CODESET_ID") ON  DELETE CASCADE ENABLE,     CONSTRAINT "FK_CSM_CODESET_ENV_ID" FOREIGN KEY ("CSM_ENVIRONMENT_ID") REFERENCES "CSM_PUBLISH_ENVIRONMENTS" ("CSM_ENV_ID") ON DELETE CASCADE ENABLE   )';
   END IF;
END;
/

DECLARE
   TABLECHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO TABLECHECKERFLAG FROM ALL_TABLES WHERE OWNER = sys_context( 'userenv', 'current_schema' ) AND TABLE_NAME = UPPER('CSM_MAP_PUBLISH_HISTORY');
   IF TABLECHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'CREATE TABLE "CSM_MAP_PUBLISH_HISTORY"   (     "CSM_MAP_PUB_HIST_ID" NUMBER NOT NULL ,     "CSM_MAP_ID"          NUMBER NOT NULL ,     "CSM_MAP_VERSION"     NUMBER(16,2) NOT NULL ,     "CSM_MAP_PUBLISH_DATE" TIMESTAMP (6) NOT NULL ,     "CSM_MAP_PUBLISH_BY" VARCHAR2(100 BYTE) NOT NULL ,     "CSM_MAP_EFFECT_DT" TIMESTAMP (6),     "CSM_MAP_EXPIRY_DT" TIMESTAMP (6),     "CREATED_BY" VARCHAR2(100 BYTE) NOT NULL ,     "CREATED_DATE" TIMESTAMP (6) NOT NULL ,     "MODIFIED_BY" VARCHAR2(100 BYTE),     "MODIFIED_DATE" TIMESTAMP (6),     "CSM_ENVIRONMENT_ID"      NUMBER NOT NULL ,     "CSM_MAP_NEW_VER_PUB" CHAR(1 BYTE) DEFAULT ''N'' NOT NULL ,     "CSM_MAP_NAME"      VARCHAR2(4000 BYTE),     "CSM_MAP_CAT_ID"    NUMBER,     CONSTRAINT "PK_CSM_MAP_HIST_ID" PRIMARY KEY ("CSM_MAP_PUB_HIST_ID"),     CONSTRAINT "FK_CSM_PUB_MAP_ID" FOREIGN KEY ("CSM_MAP_ID") REFERENCES "CSM_MAPPING_DETAILS" ("CSM_MAP_ID") ON  DELETE CASCADE ENABLE,     CONSTRAINT "FK_CSM_MAP_ENV_ID" FOREIGN KEY ("CSM_ENVIRONMENT_ID") REFERENCES "CSM_PUBLISH_ENVIRONMENTS" ("CSM_ENV_ID") ON DELETE CASCADE ENABLE   )';
   END IF;
END;
/

DECLARE
   SEQUENCECHECKERFLAG INT;
BEGIN
    SELECT COUNT(*) INTO SEQUENCECHECKERFLAG FROM ALL_SEQUENCES WHERE SEQUENCE_OWNER = sys_context('userenv', 'current_schema') AND SEQUENCE_NAME = UPPER('CSM_PUB_ENVRTS_SEQ');
   IF SEQUENCECHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'CREATE SEQUENCE   "CSM_PUB_ENVRTS_SEQ"  MINVALUE 1 MAXVALUE 999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE';
   END IF;
END;
/

DECLARE
  TRIGGERCHECKERFLAG INT;
BEGIN
  SELECT COUNT(*)
  INTO TRIGGERCHECKERFLAG
  FROM all_triggers
  WHERE OWNER = sys_context('userenv', 'current_schema') AND trigger_name = UPPER('CSM_PUB_ENVRTS_INSERT');
  IF TRIGGERCHECKERFLAG = 0 THEN
    EXECUTE IMMEDIATE 'CREATE OR REPLACE TRIGGER  "CSM_PUB_ENVRTS_INSERT" BEFORE INSERT ON CSM_PUBLISH_ENVIRONMENTS FOR EACH ROW BEGIN SELECT CSM_PUB_ENVRTS_SEQ.NEXTVAL INTO :new.CSM_ENV_ID FROM DUAL; END;';
    EXECUTE IMMEDIATE 'ALTER TRIGGER  "CSM_PUB_ENVRTS_INSERT" ENABLE';
  END IF;
END;
/

  DECLARE
   SEQUENCECHECKERFLAG INT;
BEGIN
    SELECT COUNT(*) INTO SEQUENCECHECKERFLAG FROM ALL_SEQUENCES WHERE SEQUENCE_OWNER = sys_context('userenv', 'current_schema') AND SEQUENCE_NAME = UPPER('CSM_CODESET_PUB_SEQ');
   IF SEQUENCECHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'CREATE SEQUENCE   "CSM_CODESET_PUB_SEQ"  MINVALUE 1 MAXVALUE 999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE';
   END IF;
END;
/

DECLARE
  TRIGGERCHECKERFLAG INT;
BEGIN
  SELECT COUNT(*)
  INTO TRIGGERCHECKERFLAG
  FROM all_triggers
  WHERE OWNER = sys_context('userenv', 'current_schema') AND trigger_name = UPPER('CSM_CODESET_PUB_INSERT');
  IF TRIGGERCHECKERFLAG = 0 THEN
    EXECUTE IMMEDIATE 'CREATE OR REPLACE TRIGGER  "CSM_CODESET_PUB_INSERT" BEFORE INSERT ON CSM_CODESET_PUBLISH_HISTORY FOR EACH ROW BEGIN SELECT CSM_CODESET_PUB_SEQ.NEXTVAL INTO :new.CSM_CODESET_PUB_HIST_ID FROM DUAL; END;';
    EXECUTE IMMEDIATE 'ALTER TRIGGER  "CSM_CODESET_PUB_INSERT" ENABLE';
  END IF;
END;
/

DECLARE
   SEQUENCECHECKERFLAG INT;
BEGIN
    SELECT COUNT(*) INTO SEQUENCECHECKERFLAG FROM ALL_SEQUENCES WHERE SEQUENCE_OWNER = sys_context('userenv', 'current_schema') AND SEQUENCE_NAME = UPPER('CSM_MAP_PUB_SEQ');
   IF SEQUENCECHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'CREATE SEQUENCE   "CSM_MAP_PUB_SEQ"  MINVALUE 1 MAXVALUE 999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE';
   END IF;
END;
/

DECLARE
  TRIGGERCHECKERFLAG INT;
BEGIN
  SELECT COUNT(*)
  INTO TRIGGERCHECKERFLAG
  FROM all_triggers
  WHERE OWNER = sys_context('userenv', 'current_schema') AND trigger_name = UPPER('CSM_MAP_PUB_INSERT');
  IF TRIGGERCHECKERFLAG = 0 THEN
    EXECUTE IMMEDIATE 'CREATE OR REPLACE TRIGGER  "CSM_MAP_PUB_INSERT" BEFORE INSERT ON CSM_MAP_PUBLISH_HISTORY FOR EACH ROW BEGIN SELECT CSM_MAP_PUB_SEQ.NEXTVAL INTO :new.CSM_MAP_PUB_HIST_ID FROM DUAL; END;';
    EXECUTE IMMEDIATE 'ALTER TRIGGER  "CSM_MAP_PUB_INSERT" ENABLE';
  END IF;
END;
/

DECLARE
   COLUMNCHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO COLUMNCHECKERFLAG FROM ALL_TAB_COLUMNS WHERE  OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME = UPPER('CSM_CODESET') AND COLUMN_NAME=UPPER('CODESET_STATUS');
   IF COLUMNCHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'ALTER TABLE CSM_CODESET ADD CODESET_STATUS VARCHAR2(20) DEFAULT ''Active''';
      EXECUTE IMMEDIATE 'UPDATE CSM_CODESET SET CODESET_STATUS= ''Active''';
   END IF;
END;
/

DECLARE
   COLUMNCHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO COLUMNCHECKERFLAG FROM ALL_TAB_COLUMNS WHERE  OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME = UPPER('CSM_CODESET') AND COLUMN_NAME=UPPER('CODESET_VERSION');
   IF COLUMNCHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'ALTER TABLE CSM_CODESET ADD CODESET_VERSION NUMBER(38,2) DEFAULT 1.00';
      EXECUTE IMMEDIATE 'UPDATE CSM_CODESET SET CODESET_VERSION = 1.00';
   END IF;
END;
/

DECLARE
   COLUMNCHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO COLUMNCHECKERFLAG FROM ALL_TAB_COLUMNS WHERE  OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME = UPPER('CSM_CODESET') AND COLUMN_NAME=UPPER('CODESET_VERSION_LABEL');
   IF COLUMNCHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'ALTER TABLE CSM_CODESET ADD CODESET_VERSION_LABEL VARCHAR2(50)';
   END IF;
END;
/

DECLARE
   COLUMNCHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO COLUMNCHECKERFLAG FROM ALL_TAB_COLUMNS WHERE  OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME = UPPER('CSM_CODESET') AND COLUMN_NAME=UPPER('CODESET_CHANGED_DESC');
   IF COLUMNCHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'ALTER TABLE CSM_CODESET ADD CODESET_CHANGED_DESC VARCHAR2(4000)';
   END IF;
END;
/

DECLARE
   COLUMNCHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO COLUMNCHECKERFLAG FROM ALL_TAB_COLUMNS WHERE  OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME = UPPER('CSM_CODESET') AND COLUMN_NAME=UPPER('CODESET_PUBLISH_FLAG');
   IF COLUMNCHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'ALTER TABLE CSM_CODESET ADD CODESET_PUBLISH_FLAG VARCHAR2(1) DEFAULT ''N''';
      EXECUTE IMMEDIATE 'UPDATE CSM_CODESET SET CODESET_PUBLISH_FLAG = ''N''';
   END IF;
END;
/

DECLARE
   TABLECHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO TABLECHECKERFLAG FROM all_VIEWS WHERE OWNER = sys_context('userenv', 'current_schema') AND VIEW_NAME = UPPER('V_CSM_CODE_DETAILS');
   IF TABLECHECKERFLAG = 1 THEN
      EXECUTE IMMEDIATE 'DROP VIEW V_CSM_CODE_DETAILS';
   END IF;
END;
/

  CREATE OR REPLACE FORCE VIEW "V_CSM_CODE_DETAILS" ("CODE_ID", "CODE_STND_VALUE", "CODE_NAME", "SYSTEM_NAME", "CODESET_NAME", "CATEGORY_NAME")
AS
  SELECT C.CODE_ID,
    C.CODE_STND_VALUE,
    C.CODE_NAME,
    NVL(C.SYSTEM_NAME,SYSTEM_ENV_NAME) AS SYSTEM_NAME,
    B.CODESET_NAME,
    A.CATEGORY_NAME
  FROM CSM_CATEGORY A,
    CSM_CODESET B,
    CSM_CODE_VALUE C
  WHERE A.CATEGORY_ID = B.CATEGORY_ID
  AND B.CODESET_ID    = C.CODESET_ID;
/


DECLARE
  COLUMNCHECKERFLAG INT;
BEGIN
  SELECT COUNT(*)
  INTO COLUMNCHECKERFLAG
  FROM ALL_CONS_COLUMNS
  WHERE OWNER = sys_context('userenv', 'current_schema') AND TABLE_NAME     = UPPER('RM_MIGRATIONOBJECT')
  AND COLUMN_NAME      = UPPER('CODESET_ID')
  AND CONSTRAINT_NAME  = UPPER('FK_MIGOBJ_CODESET_ID');
  IF COLUMNCHECKERFLAG = 0 THEN
    EXECUTE IMMEDIATE 'ALTER TABLE "RM_MIGRATIONOBJECT"  ADD CONSTRAINT  "FK_MIGOBJ_CODESET_ID" FOREIGN KEY ("CODESET_ID") REFERENCES "CSM_CODESET" ("CODESET_ID")';
  END IF;
END;
/

DECLARE
  COLUMNCHECKERFLAG INT;
BEGIN
  SELECT COUNT(*)
  INTO COLUMNCHECKERFLAG
  FROM ALL_CONS_COLUMNS
  WHERE OWNER = sys_context('userenv', 'current_schema') AND TABLE_NAME     = UPPER('RM_MIGRATIONOBJECT')
  AND COLUMN_NAME      = UPPER('MAP_ID')
  AND CONSTRAINT_NAME  = UPPER('FK_MIGOBJ_MAP_ID');
  IF COLUMNCHECKERFLAG = 0 THEN
    EXECUTE IMMEDIATE 'ALTER TABLE "RM_MIGRATIONOBJECT"  ADD CONSTRAINT  "FK_MIGOBJ_MAP_ID" FOREIGN KEY ("MAP_ID") REFERENCES "MAPPING_DETAILS" ("MAP_ID")';
  END IF;
END;
/

DECLARE
  COLUMNCHECKERFLAG INT;
BEGIN
  SELECT COUNT(*)
  INTO COLUMNCHECKERFLAG
  FROM ALL_CONS_COLUMNS
  WHERE OWNER = sys_context('userenv', 'current_schema') AND TABLE_NAME     = UPPER('RM_MIGRATIONOBJECT')
  AND COLUMN_NAME      = UPPER('CSM_MAP_ID')
  AND CONSTRAINT_NAME  = UPPER('FK_MIGOBJ_CSM_MAP_ID');
  IF COLUMNCHECKERFLAG = 0 THEN
    EXECUTE IMMEDIATE 'ALTER TABLE "RM_MIGRATIONOBJECT"  ADD CONSTRAINT  "FK_MIGOBJ_CSM_MAP_ID" FOREIGN KEY ("CSM_MAP_ID") REFERENCES "CSM_MAPPING_DETAILS" ("CSM_MAP_ID")';
  END IF;
END;
/

DECLARE
   TABLECHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO TABLECHECKERFLAG FROM ALL_TABLES WHERE OWNER = sys_context( 'userenv', 'current_schema' ) AND TABLE_NAME = UPPER('RM_PROMOTE_SYS_CON_ENVS');
   IF TABLECHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'CREATE TABLE RM_PROMOTE_SYS_CON_ENVS (
  SYSTEM_ID NUMBER NOT NULL , RM_ENVIRONMENT_ID NUMBER NOT NULL , PROMOTE_SYSTEM_ID NUMBER, PROMOTE_SYS_ENV_NAME VARCHAR2(50) , SYSTEM_ENVIRONMENT_NAME VARCHAR2(50) NOT NULL,
  CONSTRAINT RM_ENV_R_PK1 PRIMARY KEY (SYSTEM_ID,SYSTEM_ENVIRONMENT_NAME,RM_ENVIRONMENT_ID)  ENABLE    ,
  CONSTRAINT RM_ENV_R_FK1 FOREIGN KEY (RM_ENVIRONMENT_ID) REFERENCES  RM_ENVIRONMENT (ENVIRONMENTID) ON DELETE CASCADE ENABLE    ,
  CONSTRAINT RM_SYSCON_FK1 FOREIGN KEY (SYSTEM_ID , SYSTEM_ENVIRONMENT_NAME ) REFERENCES  SYS_CON_ENVIRONMENTS (SYSTEM_ID , SYSTEM_ENVIRONMENT_NAME) ON DELETE CASCADE ENABLE)';
   END IF;
END;
/


DECLARE
   COLUMNCHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO COLUMNCHECKERFLAG FROM ALL_TAB_COLUMNS WHERE  OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME = UPPER('RM_ENVIRONMENT') AND COLUMN_NAME=UPPER('ENVIRONMENTCOLOR');
   IF COLUMNCHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'ALTER TABLE RM_ENVIRONMENT ADD ENVIRONMENTCOLOR  VARCHAR2(7) NULL';
   END IF;
END;
/

DECLARE
   COLUMNCHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO COLUMNCHECKERFLAG FROM ALL_TAB_COLUMNS WHERE  OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME = UPPER('RM_HISTORY') AND COLUMN_NAME=UPPER('FROM_ENV');
   IF COLUMNCHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'ALTER TABLE RM_HISTORY ADD FROM_ENV NUMBER NULL';
   END IF;
END;
/

DECLARE
   COLUMNCHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO COLUMNCHECKERFLAG FROM ALL_TAB_COLUMNS WHERE  OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME = UPPER('RM_HISTORY') AND COLUMN_NAME=UPPER('TO_ENV');
   IF COLUMNCHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'ALTER TABLE RM_HISTORY ADD TO_ENV NUMBER NULL';
   END IF;
END;
/



DECLARE
   COLUMNCHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO COLUMNCHECKERFLAG FROM ALL_TAB_COLUMNS WHERE  OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME = UPPER('RM_HISTORY') AND COLUMN_NAME=UPPER('FROM_MAPID');
   IF COLUMNCHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'ALTER TABLE RM_HISTORY ADD FROM_MAPID NUMBER NULL';
   END IF;
END;
/

DECLARE
   COLUMNCHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO COLUMNCHECKERFLAG FROM ALL_TAB_COLUMNS WHERE  OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME = UPPER('RM_HISTORY') AND COLUMN_NAME=UPPER('TO_MAPID');
   IF COLUMNCHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'ALTER TABLE RM_HISTORY ADD TO_MAPID NUMBER NULL';
   END IF;
END;
/

DECLARE
   TABLECHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO TABLECHECKERFLAG FROM "RM_HISTORYTYPE";
   IF TABLECHECKERFLAG =11 THEN
    INSERT INTO RM_HISTORYTYPE (HISTORYTYPENAME, HISTORYTYPEDESC)
(	SELECT 'Promote', 'Promote Record'
	      FROM DUAL UNION
	SELECT 'Publish', 'Publish Record'

   FROM DUAL );
END IF;
end;
/
DECLARE
   TABLECHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO TABLECHECKERFLAG FROM ALL_TABLES WHERE OWNER = sys_context( 'userenv', 'current_schema' ) AND TABLE_NAME = UPPER('RDM_REF_FOLDER_USERS');
   IF TABLECHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'CREATE TABLE "RDM_REF_FOLDER_USERS"   (     "RDM_REF_CAT_USR_ID" NUMBER NOT NULL,     "RDM_REF_CAT_ID"     NUMBER NOT NULL,     "USER_ID"            VARCHAR2(20 BYTE) NOT NULL,     "CREATED_BY"         VARCHAR2(100 BYTE) NOT NULL,     "CREATED_DATE" TIMESTAMP (6) NOT NULL,     "MODIFIED_BY" VARCHAR2(100),     "MODIFIED_DATE" TIMESTAMP (6),     CONSTRAINT "PK_RDM_REF_FOLDER_USERS" PRIMARY KEY ("RDM_REF_CAT_USR_ID"),     CONSTRAINT "FK_RDM_USR_CAT_ID" FOREIGN KEY ("RDM_REF_CAT_ID") REFERENCES "RDM_CATEGORY" ("RDM_CATEGORY_ID") ON  DELETE CASCADE ENABLE )';
   END IF;
END;
/

DECLARE
   SEQUENCECHECKERFLAG INT;
BEGIN
    SELECT COUNT(*) INTO SEQUENCECHECKERFLAG FROM ALL_SEQUENCES WHERE SEQUENCE_OWNER = sys_context('userenv', 'current_schema') AND SEQUENCE_NAME = UPPER('RDM_REF_FOLDER_USERS_SEQ');
   IF SEQUENCECHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'CREATE SEQUENCE   "RDM_REF_FOLDER_USERS_SEQ"  MINVALUE 1 MAXVALUE 999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE';
   END IF;
END;
/

DECLARE
  TRIGGERCHECKERFLAG INT;
BEGIN
  SELECT COUNT(*)
  INTO TRIGGERCHECKERFLAG
  FROM all_triggers
  WHERE OWNER = sys_context('userenv', 'current_schema') AND trigger_name = UPPER('RDM_REF_FOLDER_USERS_INSERT');
  IF TRIGGERCHECKERFLAG = 0 THEN
    EXECUTE IMMEDIATE 'CREATE OR REPLACE TRIGGER  "RDM_REF_FOLDER_USERS_INSERT" BEFORE INSERT ON RDM_REF_FOLDER_USERS FOR EACH ROW BEGIN SELECT RDM_REF_FOLDER_USERS_SEQ.NEXTVAL INTO :new.RDM_REF_CAT_USR_ID FROM DUAL; END;';
    EXECUTE IMMEDIATE 'ALTER TRIGGER  "RDM_REF_FOLDER_USERS_INSERT" ENABLE';
  END IF;
END;
/

DECLARE
   TABLECHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO TABLECHECKERFLAG FROM ALL_TABLES WHERE OWNER = sys_context( 'userenv', 'current_schema' ) AND TABLE_NAME = UPPER('CSM_MAP_CAT_USERS');
   IF TABLECHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'CREATE TABLE "CSM_MAP_CAT_USERS"   (     "CSM_MAP_CAT_USR_ID" NUMBER NOT NULL ENABLE,     "CSM_MAP_CAT_ID"     NUMBER NOT NULL ENABLE,     "USER_ID"            VARCHAR2(20 BYTE) NOT NULL ENABLE,     "CREATED_BY"         VARCHAR2(100 BYTE) NOT NULL ENABLE,     "CREATED_DATE" TIMESTAMP (6) NOT NULL ENABLE,     "MODIFIED_BY" VARCHAR2(100 BYTE),     "MODIFIED_DATE" TIMESTAMP (6),     CONSTRAINT "PK_CSM_MAP_CAT_USER_ID" PRIMARY KEY ("CSM_MAP_CAT_USR_ID"),     CONSTRAINT "FK_CSM_MAP_USR_CAT_ID" FOREIGN KEY ("CSM_MAP_CAT_ID") REFERENCES "CSM_MAP_CATEGORY" ("CSM_MAP_CAT_ID") ON DELETE CASCADE ENABLE,     CONSTRAINT "FK_CSM_MAP_USER_ID" FOREIGN KEY ("USER_ID") REFERENCES "USERS" ("USER_ID") ON DELETE CASCADE ENABLE   )';
   END IF;
END;
/

DECLARE
   TABLECHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO TABLECHECKERFLAG FROM ALL_TABLES WHERE OWNER = sys_context( 'userenv', 'current_schema' ) AND TABLE_NAME = UPPER('CSM_CODESET_CAT_USERS');
   IF TABLECHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'CREATE TABLE "CSM_CODESET_CAT_USERS"   (     "CSM_CDST_CAT_USR_ID" NUMBER NOT NULL ENABLE,     "CATEGORY_ID"     NUMBER NOT NULL ENABLE,     "USER_ID"            VARCHAR2(20 BYTE) NOT NULL ENABLE,     "CREATED_BY"         VARCHAR2(100 BYTE) NOT NULL ENABLE,     "CREATED_DATE" TIMESTAMP (6) NOT NULL ENABLE,     "MODIFIED_BY" VARCHAR2(100 BYTE),     "MODIFIED_DATE" TIMESTAMP (6),     CONSTRAINT "PK_CSM_CDST_CAT_USR_ID" PRIMARY KEY ("CSM_CDST_CAT_USR_ID"),     CONSTRAINT "FK_CSM_CDST_USR_CAT_ID" FOREIGN KEY ("CATEGORY_ID") REFERENCES "CSM_CATEGORY" ("CATEGORY_ID") ON DELETE CASCADE ENABLE,     CONSTRAINT "FK_CSM_CDST_USR_ID" FOREIGN KEY ("USER_ID") REFERENCES "USERS" ("USER_ID") ON DELETE CASCADE ENABLE   )';
   END IF;
END;
/

DECLARE
   SEQUENCECHECKERFLAG INT;
BEGIN
    SELECT COUNT(*) INTO SEQUENCECHECKERFLAG FROM ALL_SEQUENCES WHERE SEQUENCE_OWNER = sys_context('userenv', 'current_schema') AND SEQUENCE_NAME = UPPER('CSM_MAP_CAT_USERS_SEQ');
   IF SEQUENCECHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'CREATE SEQUENCE   "CSM_MAP_CAT_USERS_SEQ"  MINVALUE 1 MAXVALUE 999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE';
   END IF;
END;
/

DECLARE
  TRIGGERCHECKERFLAG INT;
BEGIN
  SELECT COUNT(*)
  INTO TRIGGERCHECKERFLAG
  FROM all_triggers
  WHERE OWNER = sys_context('userenv', 'current_schema') AND trigger_name = UPPER('CSM_MAP_CAT_USERS_INSERT');
  IF TRIGGERCHECKERFLAG = 0 THEN
    EXECUTE IMMEDIATE 'CREATE OR REPLACE TRIGGER  "CSM_MAP_CAT_USERS_INSERT" BEFORE INSERT ON CSM_MAP_CAT_USERS FOR EACH ROW BEGIN SELECT CSM_MAP_CAT_USERS_SEQ.NEXTVAL INTO :new.CSM_MAP_CAT_USR_ID FROM DUAL; END;';
    EXECUTE IMMEDIATE 'ALTER TRIGGER  "CSM_MAP_CAT_USERS_INSERT" ENABLE';
  END IF;
END;
/

DECLARE
   SEQUENCECHECKERFLAG INT;
BEGIN
    SELECT COUNT(*) INTO SEQUENCECHECKERFLAG FROM ALL_SEQUENCES WHERE SEQUENCE_OWNER = sys_context('userenv', 'current_schema') AND SEQUENCE_NAME = UPPER('CSM_CODESET_CAT_USERS_SEQ');
   IF SEQUENCECHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'CREATE SEQUENCE   "CSM_CODESET_CAT_USERS_SEQ"  MINVALUE 1 MAXVALUE 999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE';
   END IF;
END;
/

DECLARE
  TRIGGERCHECKERFLAG INT;
BEGIN
  SELECT COUNT(*)
  INTO TRIGGERCHECKERFLAG
  FROM all_triggers
  WHERE OWNER = sys_context('userenv', 'current_schema') AND trigger_name = UPPER('CSM_CODESET_CAT_USERS_INSERT');
  IF TRIGGERCHECKERFLAG = 0 THEN
    EXECUTE IMMEDIATE 'CREATE OR REPLACE TRIGGER  "CSM_CODESET_CAT_USERS_INSERT" BEFORE INSERT ON CSM_CODESET_CAT_USERS FOR EACH ROW BEGIN SELECT CSM_CODESET_CAT_USERS_SEQ.NEXTVAL INTO :new.CSM_CDST_CAT_USR_ID FROM DUAL; END;';
    EXECUTE IMMEDIATE 'ALTER TRIGGER  "CSM_CODESET_CAT_USERS_INSERT" ENABLE';
  END IF;
END;
/

DECLARE
   COLUMNCHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO COLUMNCHECKERFLAG FROM ALL_TAB_COLUMNS WHERE  OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME = UPPER('CSM_MAPPING_DETAILS') AND COLUMN_NAME=UPPER('CSM_MAP_LOCK_STATUS');
   IF COLUMNCHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'ALTER TABLE CSM_MAPPING_DETAILS ADD CSM_MAP_LOCK_STATUS CHAR(1) DEFAULT ''N''';
      EXECUTE IMMEDIATE 'UPDATE CSM_MAPPING_DETAILS SET CSM_MAP_LOCK_STATUS=''N''';
   END IF;
END;
/

DECLARE
   COLUMNCHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO COLUMNCHECKERFLAG FROM ALL_TAB_COLUMNS WHERE  OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME = UPPER('CSM_MAPPING_DETAILS') AND COLUMN_NAME=UPPER('CSM_MAP_LOCKED_BY');
   IF COLUMNCHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'ALTER TABLE CSM_MAPPING_DETAILS ADD CSM_MAP_LOCKED_BY VARCHAR2(20) NULL';
   END IF;
END;
/

DECLARE
   COLUMNCHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO COLUMNCHECKERFLAG FROM ALL_TAB_COLUMNS WHERE  OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME = UPPER('CSM_CODESET') AND COLUMN_NAME=UPPER('CODESET_LOCK_STATUS');
   IF COLUMNCHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'ALTER TABLE CSM_CODESET ADD CODESET_LOCK_STATUS CHAR(1) DEFAULT ''N''';
      EXECUTE IMMEDIATE 'UPDATE CSM_CODESET SET CODESET_LOCK_STATUS=''N''';
   END IF;
END;
/

DECLARE
   COLUMNCHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO COLUMNCHECKERFLAG FROM ALL_TAB_COLUMNS WHERE  OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME = UPPER('CSM_CODESET') AND COLUMN_NAME=UPPER('CODESET_LOCKED_BY');
   IF COLUMNCHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'ALTER TABLE CSM_CODESET ADD CODESET_LOCKED_BY VARCHAR2(20) NULL';
   END IF;
END;
/

DECLARE
   COLUMNCHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO COLUMNCHECKERFLAG FROM ALL_TAB_COLUMNS WHERE  OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME = UPPER('RDM_REF_TABLE_USERS') AND COLUMN_NAME=UPPER('RDM_REF_ROOT_CAT_ID');
   IF COLUMNCHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'ALTER TABLE RDM_REF_TABLE_USERS ADD RDM_REF_ROOT_CAT_ID NUMBER';
   END IF;
END;
/
DECLARE
   COLUMNCHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO COLUMNCHECKERFLAG FROM ALL_TAB_COLUMNS WHERE  OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME = UPPER('RDM_PUBLISH_ENVIRONMENTS') AND COLUMN_NAME=UPPER('SCHEMA');
   IF COLUMNCHECKERFLAG > 0 THEN
      EXECUTE IMMEDIATE 'ALTER TABLE RDM_PUBLISH_ENVIRONMENTS RENAME COLUMN "SCHEMA" TO "ENVIRONMENT_SCHEMA"';
   END IF;
END;
/
DECLARE
   COLUMNCHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO COLUMNCHECKERFLAG FROM ALL_TAB_COLUMNS WHERE  OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME = UPPER('MAPPING_SPECIFICATION') AND COLUMN_NAME=UPPER('BASE_SRC_SYS_ENVIRONMENT_NAME');
   IF COLUMNCHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'ALTER TABLE MAPPING_SPECIFICATION ADD BASE_SRC_SYS_ENVIRONMENT_NAME VARCHAR2(4000) NULL';
   END IF;
END;
/

DECLARE
   COLUMNCHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO COLUMNCHECKERFLAG FROM ALL_TAB_COLUMNS WHERE  OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME = UPPER('MAPPING_SPECIFICATION') AND COLUMN_NAME=UPPER('BASE_SRC_SYSTEM_NAME');
   IF COLUMNCHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'ALTER TABLE MAPPING_SPECIFICATION ADD BASE_SRC_SYSTEM_NAME VARCHAR2(4000) NULL';
   END IF;
END;
/

DECLARE
   COLUMNCHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO COLUMNCHECKERFLAG FROM ALL_TAB_COLUMNS WHERE  OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME = UPPER('MAPPING_SPECIFICATION') AND COLUMN_NAME=UPPER('BASE_TGT_SYS_ENVIRONMENT_NAME');
   IF COLUMNCHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'ALTER TABLE MAPPING_SPECIFICATION ADD BASE_TGT_SYS_ENVIRONMENT_NAME VARCHAR2(4000) NULL';
   END IF;
END;
/

DECLARE
   COLUMNCHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO COLUMNCHECKERFLAG FROM ALL_TAB_COLUMNS WHERE  OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME = UPPER('MAPPING_SPECIFICATION') AND COLUMN_NAME=UPPER('BASE_TGT_SYSTEM_NAME');
   IF COLUMNCHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'ALTER TABLE MAPPING_SPECIFICATION ADD BASE_TGT_SYSTEM_NAME VARCHAR2(4000) NULL';
   END IF;
END;
/

DECLARE
   COLUMNCHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO COLUMNCHECKERFLAG FROM ALL_TAB_COLUMNS WHERE  OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME = UPPER('MAPPING_DETAILS') AND COLUMN_NAME=UPPER('RM_ENVIRONMENT_ID');
   IF COLUMNCHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'ALTER TABLE MAPPING_DETAILS ADD RM_ENVIRONMENT_ID NUMBER(38,0) NULL';
   END IF;
END;
/


DECLARE
  COLUMNCHECKERFLAG INT;
BEGIN
  SELECT COUNT(*)
  INTO COLUMNCHECKERFLAG
  FROM ALL_CONS_COLUMNS
  WHERE OWNER = sys_context('userenv', 'current_schema') AND TABLE_NAME     = UPPER('MAPPING_DETAILS')
  AND COLUMN_NAME      = UPPER('RM_ENVIRONMENT_ID')
  AND CONSTRAINT_NAME  = UPPER('FK_RM_ENV_ENVIRONMENT_ID');
  IF COLUMNCHECKERFLAG = 0 THEN
    EXECUTE IMMEDIATE 'ALTER TABLE "MAPPING_DETAILS"  ADD CONSTRAINT  "FK_RM_ENV_ENVIRONMENT_ID" FOREIGN KEY ("RM_ENVIRONMENT_ID") REFERENCES "RM_ENVIRONMENT" ("ENVIRONMENTID")';
  END IF;
END;
/

DECLARE
   COLUMNCHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO COLUMNCHECKERFLAG FROM ALL_TAB_COLUMNS WHERE  OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME = UPPER('RM_ENVIRONMENT') AND COLUMN_NAME=UPPER('ENVIRONMENTTYPE');
   IF COLUMNCHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'ALTER TABLE RM_ENVIRONMENT  ADD ENVIRONMENTTYPE VARCHAR2(20)';
   END IF;
END;
/

DECLARE
   RECORDCOUNT INT;
BEGIN
    SELECT COUNT(*) INTO RECORDCOUNT FROM RM_ENVIRONMENT  WHERE ENVIRONMENTNAME='DEV';
      IF RECORDCOUNT > 0 THEN
      EXECUTE IMMEDIATE 'UPDATE RM_ENVIRONMENT SET ENVIRONMENTTYPE=''DEV'' WHERE ENVIRONMENTNAME=''DEV''';
      ELSE
       INSERT INTO RM_ENVIRONMENT (ENVIRONMENTNAME,ENVIRONMENTTYPE)VALUES('DEV','DEV');
       END IF;
        END;
/

DECLARE
 RECORDCOUNT INT;
 BEGIN
      SELECT COUNT(*) INTO RECORDCOUNT FROM RM_ENVIRONMENT  WHERE ENVIRONMENTNAME='PROD';
      IF RECORDCOUNT > 0 THEN
       EXECUTE IMMEDIATE ' UPDATE RM_ENVIRONMENT SET ENVIRONMENTTYPE=''PROD'' WHERE ENVIRONMENTNAME=''PROD''';
       ELSE
       INSERT INTO RM_ENVIRONMENT (ENVIRONMENTNAME,ENVIRONMENTTYPE)VALUES('PROD','PROD');
       END IF;
   END;
/

DECLARE
   TABLECHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO TABLECHECKERFLAG FROM ALL_OBJECTS WHERE OWNER = sys_context('userenv', 'current_schema') AND OBJECT_TYPE = 'FUNCTION' AND OBJECT_NAME = UPPER('RM_MAP_COUNT');
   IF TABLECHECKERFLAG = 1 THEN
      EXECUTE IMMEDIATE 'DROP FUNCTION RM_MAP_COUNT';
   END IF;
END;
/

CREATE OR REPLACE FUNCTION RM_MAP_COUNT(       V_SUBJECT_ID IN NUMBER )     RETURN NUMBER   AS     V_MAP_COUNT   NUMBER;     V_CHILD_COUNT NUMBER:=0;     CURSOR C1_CHILDS(P_SUBJECT_ID NUMBER)     IS       SELECT SUBJECT_ID FROM SUBJECT_DETAILS WHERE PARENT_SUBJECT_ID = P_SUBJECT_ID;   BEGIN     BEGIN       SELECT COUNT(*)       INTO V_MAP_COUNT       FROM MAPPING_DETAILS A1       WHERE A1.STATUS   = 'Active'       AND  A1.ISPUBLISHED = 'N'       AND A1.MAP_ID     IN         (SELECT MAP_ID         FROM MAPPING_SPECIFICATION MS         WHERE ((TRIM(MS.TGT_SYSTEM_ENVIRONMENT_NAME) IS NOT NULL         AND TRIM(MS.TGT_SYSTEM_NAME)                 IS NOT NULL)         OR (TRIM(MS.SRC_SYSTEM_NAME)                 IS NOT NULL         AND TRIM(MS.SRC_SYSTEM_ENVIRONMENT_NAME)     IS NOT NULL))         )       AND A1.MAP_ID NOT IN         (SELECT MAP_ID FROM SPECIFICATION_LOCK WHERE ISSPECIFICATION_LOCK = 'Y'         )       AND A1.MAP_ID NOT IN         (SELECT COALESCE(MAP_ID,NULL,0) FROM RM_MIGRATIONOBJECT         )       AND A1.SUBJECT_ID = V_SUBJECT_ID;     EXCEPTION     WHEN OTHERS THEN       V_MAP_COUNT := 0;     END;     FOR R1_CHILDS IN C1_CHILDS(V_SUBJECT_ID)     LOOP       V_CHILD_COUNT := V_CHILD_COUNT + RM_MAP_COUNT(R1_CHILDS.SUBJECT_ID);     END LOOP;     RETURN (V_CHILD_COUNT + V_MAP_COUNT);   END RM_MAP_COUNT;
/
DECLARE
  COLUMNCHECKERFLAG INT;
BEGIN
  SELECT COUNT(*)
  INTO COLUMNCHECKERFLAG
  FROM ALL_TAB_COLUMNS
  WHERE OWNER = sys_context('userenv', 'current_schema') AND TABLE_NAME     = UPPER('SYS_CON_ENVIRONMENTS')
  AND COLUMN_NAME      =UPPER('TABLE_DISPLAY_FLAG');
  IF COLUMNCHECKERFLAG = 0 THEN
    EXECUTE IMMEDIATE 'ALTER TABLE SYS_CON_ENVIRONMENTS ADD TABLE_DISPLAY_FLAG CHAR(1) DEFAULT ''N''';
    EXECUTE IMMEDIATE 'UPDATE SYS_CON_ENVIRONMENTS SET TABLE_DISPLAY_FLAG = ''Y''';
  END IF;
END;
/
DECLARE
  COLUMNCHECKERFLAG INT;
BEGIN
  SELECT COUNT(*)
  INTO COLUMNCHECKERFLAG
  FROM ALL_TAB_COLUMNS
  WHERE OWNER = sys_context('userenv', 'current_schema') AND TABLE_NAME     = UPPER('SYS_CON_ENVIRONMENTS')
  AND COLUMN_NAME      =UPPER('VIEW_DISPLAY_FLAG');
  IF COLUMNCHECKERFLAG = 0 THEN
    EXECUTE IMMEDIATE 'ALTER TABLE SYS_CON_ENVIRONMENTS ADD VIEW_DISPLAY_FLAG CHAR(1) DEFAULT ''N''';
    EXECUTE IMMEDIATE 'UPDATE SYS_CON_ENVIRONMENTS SET VIEW_DISPLAY_FLAG = ''Y''';
  END IF;
END;
/
DECLARE
  COLUMNCHECKERFLAG INT;
BEGIN
  SELECT COUNT(*)
  INTO COLUMNCHECKERFLAG
  FROM ALL_TAB_COLUMNS
  WHERE OWNER = sys_context('userenv', 'current_schema') AND TABLE_NAME     = UPPER('SYS_CON_ENVIRONMENTS')
  AND COLUMN_NAME      =UPPER('SYNONYM_DISPLAY_FLAG');
  IF COLUMNCHECKERFLAG = 0 THEN
    EXECUTE IMMEDIATE 'ALTER TABLE SYS_CON_ENVIRONMENTS ADD SYNONYM_DISPLAY_FLAG CHAR(1) DEFAULT ''N''';
    EXECUTE IMMEDIATE 'UPDATE SYS_CON_ENVIRONMENTS SET SYNONYM_DISPLAY_FLAG = ''Y''';
  END IF;
END;
/

DECLARE
   TABLECHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO TABLECHECKERFLAG FROM ALL_TABLES WHERE OWNER = sys_context( 'userenv', 'current_schema' ) AND TABLE_NAME = UPPER('CAT_TEMPLATES');
   IF TABLECHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'CREATE TABLE "CAT_TEMPLATES"
        (
          "CAT_ID"                 NUMBER(*,0) NOT NULL ENABLE,
          "CAT_NAME"               VARCHAR2(100) NOT NULL ENABLE,
          "CAT_SCRIPTING_LANGUAGE" VARCHAR2(25) NOT NULL,
          "CAT_DESC"               VARCHAR2(500) NULL,
          "CAT_IMAGE" BLOB,
          "CAT_STOCK_IMAGE"  VARCHAR2(50) NULL,
          "CAT_ENABLED"      CHAR DEFAULT 0 NOT NULL,
          "CAT_TAB_ID"       VARCHAR2(4000) NOT NULL,
          "CAT_SYSTEM_BASED" CHAR DEFAULT 0 NOT NULL,
          "CAT_SCRIPT"       VARCHAR2(4000) NULL,
          "CAT_ACTION"       VARCHAR2(500) NULL,
          "CREATED_BY"       VARCHAR2(50) NOT NULL,
          "CREATED_DATE_TIME" TIMESTAMP (6) NOT NULL,
          "LAST_MODIFIED_BY" VARCHAR2(50)  NOT NULL,
          "LAST_MODIFIED_DATE_TIME" TIMESTAMP (6)  NOT NULL,
          "CAT_TEMPLATE_ORDER" FLOAT DEFAULT 1.0 NOT NULL,
          "CAT_OUTPUT_CONTENT_TYPE"   VARCHAR2(50) NULL,
          "CAT_OUTPUT_FILE_EXTENSION" VARCHAR2(50) NULL,
          CAT_ENABLE_FILE_UPLOAD_DIALOG CHAR DEFAULT 0 NOT NULL,
          CAT_ENABLE_MAPPING_DIALOG CHAR DEFAULT 0 NOT NULL,
          CAT_ENABLE_METADATA_DIALOG CHAR DEFAULT 0 NOT NULL,
          CAT_MAPPING_LEVEL CHAR DEFAULT 0 NOT NULL,
          CAT_METADATA_LEVEL CHAR DEFAULT 0 NOT NULL,
          CAT_ENCRYPTED CHAR DEFAULT 0 NOT NULL,
          CAT_IMPORTED CHAR DEFAULT 0 NOT NULL,
          CONSTRAINT "PK_CAT_TEMPLATES" PRIMARY KEY ("CAT_ID") ENABLE
        )';
   END IF;
END;
/

DECLARE
   SEQUENCECHECKERFLAG INT;
BEGIN
    SELECT COUNT(*) INTO SEQUENCECHECKERFLAG FROM ALL_SEQUENCES WHERE SEQUENCE_OWNER = sys_context('userenv', 'current_schema') AND SEQUENCE_NAME = UPPER('CAT_ID_SEQ');
   IF SEQUENCECHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'CREATE SEQUENCE   "CAT_ID_SEQ"  MINVALUE 1 MAXVALUE 999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE';
   END IF;
END;
/

DECLARE
  TRIGGERCHECKERFLAG INT;
BEGIN
  SELECT COUNT(*)
  INTO TRIGGERCHECKERFLAG
  FROM all_triggers
  WHERE OWNER = sys_context('userenv', 'current_schema') AND trigger_name = UPPER('CAT_INSERT');
  IF TRIGGERCHECKERFLAG = 0 THEN
    EXECUTE IMMEDIATE 'CREATE OR REPLACE TRIGGER  "CAT_INSERT" BEFORE INSERT ON CAT_TEMPLATES FOR EACH ROW BEGIN SELECT CAT_ID_SEQ.NEXTVAL INTO :new.CAT_ID FROM DUAL; END;';
    EXECUTE IMMEDIATE 'ALTER TRIGGER  "CAT_INSERT" ENABLE';
  END IF;
END;
/
DECLARE
   TABLECHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO TABLECHECKERFLAG FROM CAT_TEMPLATES;
   IF TABLECHECKERFLAG = 0 THEN
    INSERT INTO CAT_TEMPLATES(CAT_NAME,CAT_DESC,CAT_IMAGE,CAT_STOCK_IMAGE,CAT_ENABLED,CAT_TAB_ID,CAT_SYSTEM_BASED,CAT_SCRIPT,CAT_ACTION,CREATED_BY,CREATED_DATE_TIME,LAST_MODIFIED_BY,LAST_MODIFIED_DATE_TIME,CAT_TEMPLATE_ORDER,CAT_SCRIPTING_LANGUAGE,CAT_OUTPUT_CONTENT_TYPE,CAT_OUTPUT_FILE_EXTENSION,CAT_ENABLE_MAPPING_DIALOG)
	(
	SELECT 'Microsoft SSIS DTSX', 'SSIS Default XML',NULL, 'ssis/defaultxml.png', '1', 'com.ads.mm.stb.ssis', '1', NULL, 'MappingManager.ads?action=exportToSSISDTSX&ssisExportOption=SSISDefaultXML', 'AnalytiX Data Services', CURRENT_TIMESTAMP, 'AnalytiX Data Services', CURRENT_TIMESTAMP, '1', 'Java', 'XML', '.xml', 1
	FROM DUAL UNION
	SELECT 'Microsoft SSIS DTSX', 'SSIS Include SQL Expression', NULL, 'ssis/sqlextractxml.png', '1', 'com.ads.mm.stb.ssis', '1', NULL, 'MappingManager.ads?action=exportToSSISDTSX&ssisExportOption=SSISSQLXML', 'AnalytiX Data Services', CURRENT_TIMESTAMP, 'AnalytiX Data Services', CURRENT_TIMESTAMP, '3', 'Java', 'XML', '.xml', 1
	FROM DUAL UNION
	SELECT 'Datastage 7.5 Parallel Job', 'Datastage 7.5 Parallel Job', NULL, 'ds/datastage4.png', '1', 'com.ads.mm.stb.datastage', '1', NULL, 'MappingManager.ads?action=exportToDSTG&dstgVersionOption=DSTGVersion7.5&exportType=PARALLELJOB', 'AnalytiX Data Services', CURRENT_TIMESTAMP, 'AnalytiX Data Services', CURRENT_TIMESTAMP, '1', 'Java', 'XML', '.xml', 1
	FROM DUAL UNION
	SELECT 'Datastage 7.5 Server Job', 'Datastage 7.5 Server Job', NULL, 'ds/datastage3.png', '1', 'com.ads.mm.stb.datastage', '1', NULL, 'MappingManager.ads?action=exportToDSTG&dstgVersionOption=DSTGVersion7.5&exportType=SERVERJOB', 'AnalytiX Data Services', CURRENT_TIMESTAMP, 'AnalytiX Data Services', CURRENT_TIMESTAMP, '3', 'Java', 'XML', '.xml', 1
	FROM DUAL UNION
	SELECT 'Datastage 8.0 Parallel Job', 'Datastage 8.0 Parallel Job', NULL, 'ds/datastage6.png', '1', 'com.ads.mm.stb.datastage', '1', NULL, 'MappingManager.ads?action=exportToDSTG&dstgVersionOption=DSTGVersion8.x&exportType=PARALLELJOB&dstgExportOption=DSTGDefaultXML', 'AnalytiX Data Services', CURRENT_TIMESTAMP, 'AnalytiX Data Services', CURRENT_TIMESTAMP, '4', 'Java', 'XML', '.xml', 1
	FROM DUAL UNION
	SELECT 'Datastage 8.0 Server Job', 'Datastage 8.0 Server Job', NULL, 'ds/datastage5.png', '1', 'com.ads.mm.stb.datastage', '1', NULL, 'MappingManager.ads?action=exportToDSTG&dstgVersionOption=DSTGVersion8.x&exportType=SERVERJOB&dstgExportOption=DSTGDefaultXML', 'AnalytiX Data Services', CURRENT_TIMESTAMP, 'AnalytiX Data Services', CURRENT_TIMESTAMP, '5', 'Java', 'XML', '.xml', 1
	FROM DUAL UNION
	SELECT 'Datastage 8.0 Parallel Job Include Sql Expression Datastage 8.0', 'Parallel Job Include Sql Expression', NULL, 'ds/datastage2.png', '1', 'com.ads.mm.stb.datastage', '1', NULL, 'MappingManager.ads?action=exportToDSTG&dstgVersionOption=DSTGVersion8.x&exportType=PARALLELJOB&dstgExportOption=DSTGSQLXML', 'AnalytiX Data Services', CURRENT_TIMESTAMP, 'AnalytiX Data Services', CURRENT_TIMESTAMP, '6', 'Java', 'XML', '.xml', 1
	FROM DUAL UNION
	SELECT 'Datastage 8.0 Server Job Include Sql Expression	Datastage 8.0', 'Server Job Include Sql Expression', NULL, 'ds/datastage1.png', '1', 'com.ads.mm.stb.datastage', '1', NULL, 'MappingManager.ads?action=exportToDSTG&dstgVersionOption=DSTGVersion8.x&exportType=SERVERJOB&dstgExportOption=DSTGSQLXML', 'AnalytiX Data Services', CURRENT_TIMESTAMP, 'AnalytiX Data Services', CURRENT_TIMESTAMP, '2', 'Java', 'XML', '.xml', 1
	FROM DUAL UNION
	SELECT 'Standard Informatica', 'Standard Informatica', NULL, 'inf/normal.png', '1', 'com.ads.mm.stb.informatica', '1', NULL, 'MappingManager.ads?action=exportXml', 'AnalytiX Data Services', CURRENT_TIMESTAMP, 'AnalytiX Data Services', CURRENT_TIMESTAMP, '1', 'Java', 'XML', '.xml', 1
	FROM DUAL UNION
	SELECT 'Mapping Manager XML', 'Mapping Manager XML', NULL, 'mm/defaultxml.png', '1', 'com.ads.mm.stb.mappingmanager', '1', NULL, 'MappingManager.ads?action=exportAll&exportType=MappingManagerXML', 'AnalytiX Data Services', CURRENT_TIMESTAMP, 'AnalytiX Data Services', CURRENT_TIMESTAMP, '1', 'Java', 'XML', '.xml', 1
        FROM DUAL UNION
        SELECT 'Standard ODI', 'Standard ODI', NULL, 'odi/odi.png', '1', 'com.ads.mm.stb.odi', '1', NULL, 'MappingManager.ads?action=exportODIXML', 'AnalytiX Data Services', CURRENT_TIMESTAMP, 'AnalytiX Data Services', CURRENT_TIMESTAMP, '1', 'Java', 'XML', '.xml', 1
        FROM DUAL UNION
	SELECT 'DV2_STAGE_LOAD', 'This script takes a SOURCE TO STAGE mapping and generates the appropriate staging table load code.  The source and the staging table must be in SQLServer, and must be in the same instance of SQLServer.  The generated code executes hash key and hash difference computations, adds load dates, and record sources before loading the staging data.', NULL, 'rapidgends/RapidGenDS.png', '1', 'com.ads.mm.stb.rapidgends', '1', NULL, 'NULL', 'RapidGenDS', CURRENT_TIMESTAMP, 'RapidGenDS', CURRENT_TIMESTAMP, '1', 'JRuby', 'SQL', '.sql', 1
	FROM DUAL UNION
	SELECT 'DV2_HUB_LINK_LOAD', 'This script takes a STAGING table input (source in the MAPPING design), and generates a HUB or a LINK target view, so that the view can be used /called in conjunction with inserts to the target directly.    The source and target are required to be in the same instance of SQLServer.', NULL, 'rapidgends/RapidGenDS.png', '1', 'com.ads.mm.stb.rapidgends', '1', NULL, 'NULL', 'RapidGenDS', CURRENT_TIMESTAMP, 'RapidGenDS', CURRENT_TIMESTAMP, '2', 'JRuby', 'SQL', '.sql', 1
	FROM DUAL UNION
	SELECT 'DV2_SATELLITE_LOAD', 'This script takes a STAGING table input (source in the mapping design), and generates a SATELLITE load target view, so that the view can be used/called in conjunction with inserts to the target Satellite table directly.  The source and target are required to be in the same instance of SQLServer.', NULL, 'rapidgends/RapidGenDS.png', '1', 'com.ads.mm.stb.rapidgends', '1', NULL, 'NULL', 'RapidGenDS', CURRENT_TIMESTAMP, 'RapidGenDS', CURRENT_TIMESTAMP, '3', 'JRuby', 'SQL', '.sql', 1
        FROM DUAL UNION
        SELECT 'DV2_SATELLITE_END_DATE', 'This script takes a single target Satellite (the Satellite is both the source and the target at the same time), and generates 1) a select statement for a view, to pull the keys that need end-dating, and 2) also generates an UPDATE stored procedure, to execute the end-dating process.', NULL, 'rapidgends/RapidGenDS.png', '1', 'com.ads.mm.stb.rapidgends', '1', NULL, 'NULL', 'RapidGenDS', CURRENT_TIMESTAMP, 'RapidGenDS', CURRENT_TIMESTAMP, '4', 'JRuby', 'SQL', '.sql', 1
        FROM DUAL UNION
        SELECT 'Sample Data Profile By ColumnName', 'Sample SQL Server Data profiling CAT script that shows how to do a basic profile against the tables in your selected mapping.', NULL, 'cat/DataProfiling.png', '1', 'com.ads.mm.stb.dataprofiling', '1', NULL, 'NULL', ' AnalytiX Data Services', CURRENT_TIMESTAMP, ' AnalytiX Data Services', CURRENT_TIMESTAMP, '1', 'Javascript', 'SQL', '.sql', 1
	FROM DUAL
);     END IF;
END;
/
DECLARE
   TABLECHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO TABLECHECKERFLAG FROM "ADS_MODULES";
   IF TABLECHECKERFLAG = 6 THEN
    INSERT INTO ADS_MODULES(MODULE_ID, MODULE_NAME, MODULE_KEY, MODULE_ORDER, MODULE_FORWARD)
    (SELECT 7, 'Code Automation Templates', 'com.ads.mm.permission.cat', 7, 'codeautomationtemplate' FROM DUAL);
END IF;
END;
/
DECLARE
   TABLECHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO TABLECHECKERFLAG FROM "APP_PREFERENCES";
   IF TABLECHECKERFLAG = 17 THEN
INSERT INTO APP_PREFERENCES( PREFERENCE_NAME, PREFERENCE_VALUE)
    (SELECT 'ADD_COMMENTS_ON_COPY_MAP','true' FROM DUAL
     UNION
     SELECT 'ADD_COMMENTS_ON_MERGE_MAP','true' FROM DUAL
     UNION
     SELECT 'ADD_COMMENTS_ON_NEW_MAP_CREATION','true' FROM DUAL
     UNION
     SELECT 'ADD_COMMENTS_ON_NEW_VERSION_CREATION','true' FROM DUAL
     UNION
     SELECT 'ADD_COMMENTS_ON_UPLOAD_XML_MAP_CREATION','true' FROM DUAL
     UNION
     SELECT 'ADD_COMMENTS_ON_BASE_LINE','true' FROM DUAL
     UNION
     SELECT 'SEND_EMAIL_ON_COPY_MAP','true' FROM DUAL
     UNION
     SELECT 'SEND_EMAIL_ON_COPY_MAP_MESSAGE','Hi,<br><br>This is a system generated email notification. <br><br><b>A MAPPING HAS BEEN CREATED/UPDATED USING THE COPY/PASTE FUNCTIONALITY.</b><br> <br><TABLE style=''border-bottom: #600 1px solid; border-left: #600 1px solid; border-spacing: 1px; font-family: Tahoma; font-size: 10pt; border-top: #600 1px solid; border-right: #600 1px solid'' border=1 cellPadding=5><TR><TD>DETAILS</TD><TD>ORIGIN</TD><TD>DESTINATION</TD></TR> <TR><TD><B>Project Name:</B></TD><TD>@sourceProjectName@</TD><TD>@targetProjectName@</TD></TR> <TR><TD><B>Subject Name:</B></TD><TD>@sourceSubjectName@</TD><TD>@targetSubjectName@</TD></TR> <TR><TD><B>Mapping Name:</B></TD><TD>@sourceMappingName@</TD><TD>@targetMappingName@</TD></TR> <TR><TD><B>Mapping Id:</B></TD><TD>@sourceMappingId@</TD><TD>@targetMappingId@</TD></TR> <TR><TD><B>Mapping Version:</B></TD><TD>@sourceMappingVersion@</TD><TD>@targetMappingVersion@</TD></TR> <TR><TD><B>Created By:</B></TD><TD>@sourceMappingCreatedBy@</TD><TD>@targetMappingCreatedBy@</TD></TR> <TR><TD><B>Created Date:</B></TD><TD>@sourceMappingCreatedDate@</TD><TD>@targetMappingCreatedDate@</TD></TR> <TR><TD><B>Modifed By:</B></TD><TD>@sourceMappingModifiedBy@</TD><TD>@targetMappingModifiedBy@</TD></TR> <TR><TD><B>Modified Date:</B></TD><TD>@sourceMappingModifiedDate@</TD><TD>@targetMappingModifiedDate@</TD></TR></TABLE><BR><br><b>Comments:<b><br>@comments@ <BR><BR>Note: This mailbox is not monitored. DO NOT REPLY TO THIS EMAIL.' FROM DUAL
     UNION
     SELECT 'SEND_EMAIL_ON_COPY_MAP_SUBJECT','Copied Mapping Details – DO NOT REPLY' FROM DUAL
     UNION
     SELECT 'SEND_EMAIL_ON_MERGE_MAP','true' FROM DUAL
     UNION
     SELECT 'SEND_EMAIL_ON_MERGE_MAP_MESSAGE','Hi,<br><br>This is a system generated email notification. <br><br><b>A MAPPING HAS BEEN MERGED WITH UPDATES FROM ANOTHER MAPPING.</b><br> <br><TABLE style=''border-bottom: #600 1px solid; border-left: #600 1px solid; border-spacing: 1px; font-family: Tahoma; font-size: 10pt; border-top: #600 1px solid; border-right: #600 1px solid'' border=1 cellPadding=5><TR><TD>DETAILS</TD><TD>ORIGIN</TD><TD>DESTINATION</TD></TR> <TR><TD><B>Project Name:</B></TD><TD>@sourceProjectName@</TD><TD>@targetProjectName@</TD></TR> <TR><TD><B>Subject Name:</B></TD><TD>@sourceSubjectName@</TD><TD>@targetSubjectName@</TD></TR> <TR><TD><B>Mapping Name:</B></TD><TD>@sourceMappingName@</TD><TD>@targetMappingName@</TD></TR> <TR><TD><B>Mapping Id:</B></TD><TD>@sourceMappingId@</TD><TD>@targetMappingId@</TD></TR> <TR><TD><B>Mapping Version:</B></TD><TD>@sourceMappingVersion@</TD><TD>@targetMappingVersion@</TD></TR> <TR><TD><B>Created By:</B></TD><TD>@sourceMappingCreatedBy@</TD><TD>@targetMappingCreatedBy@</TD></TR> <TR><TD><B>Created Date:</B></TD><TD>@sourceMappingCreatedDate@</TD><TD>@targetMappingCreatedDate@</TD></TR> <TR><TD><B>Modifed By:</B></TD><TD>@sourceMappingModifiedBy@</TD><TD>@targetMappingModifiedBy@</TD></TR> <TR><TD><B>Modified Date:</B></TD><TD>@sourceMappingModifiedDate@</TD><TD>@targetMappingModifiedDate@</TD></TR></TABLE><BR> <br><b>Comments:<b><br>@comments@ <BR><BR>Note: This mailbox is not monitored. DO NOT REPLY TO THIS EMAIL.' FROM DUAL
     UNION
     SELECT 'SEND_EMAIL_ON_MERGE_MAP_SUBJECT','Merged Mapping Details – DO NOT REPLY' FROM DUAL
     UNION
     SELECT 'SEND_EMAIL_ON_NEW_MAP_CREATION','true' FROM DUAL
     UNION
     SELECT 'SEND_EMAIL_ON_NEW_MAP_CREATION_MESSAGE','Hi,<br><br>This is a system generated email notification. <br><br><b>A NEW MAPPING HAS BEEN CREATED.</b><br><br><B>Project Name :</B>@targetProjectName@ <br><B>Subject Name:</B> @targetSubjectName@ <br><B>Mapping Name:</B>@targetMappingName@ <br><B>Mapping Id:</B> @targetMappingId@ <br><B>Mapping Version:</B>@targetMappingVersion@ <br><B>Created By:</B> @targetMappingCreatedBy@ <br><B>Created Date:</B>@targetMappingCreatedDate@ <br><B>Modified By:</B>@targetMappingModifiedBy@<br><B>Modified Date:</B> @targetMappingModifiedDate@<br><br><b>Comments:<b><br>@comments@<BR><BR>Note: This mailbox is not monitored. DO NOT REPLY TO THIS EMAIL.' FROM DUAL
     UNION
     SELECT 'SEND_EMAIL_ON_NEW_MAP_CREATION_SUBJECT','New Mapping Details – DO NOT REPLY' FROM DUAL
     UNION
     SELECT 'SEND_EMAIL_ON_NEW_VERSION_CREATION','true' FROM DUAL
     UNION
     SELECT 'SEND_EMAIL_ON_NEW_VERSION_CREATION_MESSAGE','Hi,<br><br>This is a system generated email notification. <br><br><b>A MAPPING HAS BEEN VERSIONED.</b><br><br><B>Project Name :</B>@targetProjectName@ <br><B>Subject Name:</B> @targetSubjectName@ <br><B>Mapping Name:</B>@targetMappingName@ <br><B>Mapping Id:</B> @targetMappingId@ <br><B>Mapping Version:</B>@targetMappingVersion@ <br><B>Created By:</B> @targetMappingCreatedBy@ <br><B>Created Date:</B>@targetMappingCreatedDate@ <br><B>Modified By:</B>@targetMappingModifiedBy@<br><B>Modified Date:</B> @targetMappingModifiedDate@<br><br><b>Comments:<b><br>@comments@<BR><BR>Note: This mailbox is not monitored. DO NOT REPLY TO THIS EMAIL.' FROM DUAL
     UNION
     SELECT 'SEND_EMAIL_ON_NEW_VERSION_CREATION_SUBJECT',  'New Version Details – DO NOT REPLY' FROM DUAL
     UNION
     SELECT 'SEND_EMAIL_ON_UPLOAD_XML_MAP_CREATION',  'true' FROM DUAL
     UNION
     SELECT 'SEND_EMAIL_ON_UPLOAD_XML_MAP_CREATION_MESSAGE',  'Hi,<br><br>This is a system generated email notification. <br><br><b>A MAPPING HAS BEEN CREATED USING THE XML UPLOAD FUNCTIONALITY.</b><br><br><B>Project Name :</B>@targetProjectName@ <br><B>Subject Name:</B> @targetSubjectName@ <br><B>Mapping Name:</B>@targetMappingName@ <br><B>Mapping Id:</B> @targetMappingId@ <br><B>Mapping Version:</B>@targetMappingVersion@ <br><B>Created By:</B> @targetMappingCreatedBy@ <br><B>Created Date:</B>@targetMappingCreatedDate@ <br><B>Modified By:</B>@targetMappingModifiedBy@<br><B>Modified Date:</B> @targetMappingModifiedDate@<br><br><b>Comments:<b><br>@comments@<BR><BR>Note: This mailbox is not monitored. DO NOT REPLY TO THIS EMAIL.' FROM DUAL
     UNION
     SELECT 'SEND_EMAIL_ON_UPLOAD_XML_MAP_CREATION_SUBJECT',  'XML Mapping Details – DO NOT REPLY ' FROM DUAL
     UNION
     SELECT 'SEND_EMAIL_ON_BASE_LINE','true' FROM DUAL
     UNION
     SELECT 'SEND_EMAIL_ON_BASE_LINE_SUBJECT','Project Baseline Details – DO NOT REPLY' FROM DUAL
     UNION
     SELECT 'SEND_EMAIL_ON_BASE_LINE_MESSAGE','Hi,<br><br>This is a system generated email notification. <br><br><b>A NEW PROJECT BASELINE HAS BEEN INITIATED.</b><br><br><B>Project Name :</B>@targetProjectName@ <br><B>Baseline Version:</B> @targetBaselineVersion@ <br><B>Project Created By:</B> @projectCreatedBy@ <br><B>Project Created On:</B>@projectCreatedDate@ <br><B>Project Baselined By:</B>@projectBaselinedBy@<br><B>Project Baselined On:</B> @projectBaselinedOn@<br><B>Baseline Label :</B>@baselineLabel@ <br><B>Baseline Description:</B>@baselineDesc@<br><br><b>Comments:<b><br>@comments@<BR><BR>Note: This mailbox is not monitored. DO NOT REPLY TO THIS EMAIL.' FROM DUAL
);
   END IF;
END;
/
DECLARE
   COLUMNCHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO COLUMNCHECKERFLAG FROM ALL_TAB_COLUMNS WHERE  OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME = UPPER('SECURITY_ROLES') AND COLUMN_NAME=UPPER('ROLE_NAME') AND DATA_LENGTH=UPPER('20');
   IF COLUMNCHECKERFLAG = 1 THEN
      EXECUTE IMMEDIATE 'ALTER TABLE SECURITY_ROLES  MODIFY ROLE_NAME VARCHAR2(50)';
   END IF;
END;
/
DECLARE
   COLUMNCHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO COLUMNCHECKERFLAG FROM ALL_TAB_COLUMNS WHERE  OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME = UPPER('PROJECT_DOCUMENTS') AND COLUMN_NAME=UPPER('PROJ_DOC_NAME') AND DATA_LENGTH=UPPER('50');
   IF COLUMNCHECKERFLAG = 1 THEN
      EXECUTE IMMEDIATE 'ALTER TABLE PROJECT_DOCUMENTS  MODIFY PROJ_DOC_NAME VARCHAR2(255)';
   END IF;
END;
/
DECLARE
   COLUMNCHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO COLUMNCHECKERFLAG FROM ALL_TAB_COLUMNS WHERE  OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME = UPPER('SYSTEM_DOCUMENTS') AND COLUMN_NAME=UPPER('SYS_DOC_NAME') AND DATA_LENGTH=UPPER('50');
   IF COLUMNCHECKERFLAG = 1 THEN
      EXECUTE IMMEDIATE 'ALTER TABLE SYSTEM_DOCUMENTS  MODIFY SYS_DOC_NAME VARCHAR2(255)';
   END IF;
END;
/
DECLARE
   COLUMNCHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO COLUMNCHECKERFLAG FROM ALL_TAB_COLUMNS WHERE  OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME = UPPER('MAPPING_DETAILS') AND COLUMN_NAME=UPPER('VERSIONLABEL') AND DATA_LENGTH=UPPER('20');
   IF COLUMNCHECKERFLAG = 1 THEN
      EXECUTE IMMEDIATE 'ALTER TABLE MAPPING_DETAILS  MODIFY VERSIONLABEL VARCHAR2(100)';
   END IF;
END;
/
DECLARE
   TABLECHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO TABLECHECKERFLAG FROM ALL_CONS_COLUMNS WHERE OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME = UPPER('CSM_CODESET') AND CONSTRAINT_NAME = UPPER('UK_CODENAME_CAT_VER_ID');
   IF TABLECHECKERFLAG = 0 THEN
        EXECUTE IMMEDIATE 'ALTER TABLE "CSM_CODESET"  ADD  CONSTRAINT "UK_CODENAME_CAT_VER_ID" UNIQUE (CATEGORY_ID,CODESET_NAME,CODESET_VERSION)';
   END IF;
END;
/
DECLARE
   COLUMNCHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO COLUMNCHECKERFLAG FROM ALL_TAB_COLUMNS WHERE  OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME = UPPER('MAPPING_SPECIFICATION') AND COLUMN_NAME=UPPER('SRC_TABLE_CLASS');
   IF COLUMNCHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'ALTER TABLE MAPPING_SPECIFICATION ADD SRC_TABLE_CLASS varchar2(255) NULL';
      EXECUTE IMMEDIATE 'DELETE FROM USER_PREFERENCES WHERE USER_ID LIKE ''%HEADER_ORDER_PREFERENCE%''';
      EXECUTE IMMEDIATE 'DELETE FROM USER_PREFERENCES WHERE USER_ID IN (SELECT USER_ID FROM USERS)';
   END IF;
END;
/
DECLARE
   COLUMNCHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO COLUMNCHECKERFLAG FROM ALL_TAB_COLUMNS WHERE  OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME = UPPER('MAPPING_SPECIFICATION') AND COLUMN_NAME=UPPER('TGT_TABLE_CLASS');
   IF COLUMNCHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'ALTER TABLE MAPPING_SPECIFICATION ADD TGT_TABLE_CLASS varchar2(255) NULL';
   END IF;
END;
/
DECLARE
   COLUMNCHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO COLUMNCHECKERFLAG FROM ALL_TAB_COLUMNS WHERE  OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME = UPPER('MAPPING_SPECIFICATION') AND COLUMN_NAME=UPPER('SRC_COLUMN_CLASS');
   IF COLUMNCHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'ALTER TABLE MAPPING_SPECIFICATION ADD SRC_COLUMN_CLASS varchar2(255) NULL';
   END IF;
END;
/
DECLARE
   COLUMNCHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO COLUMNCHECKERFLAG FROM ALL_TAB_COLUMNS WHERE  OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME = UPPER('MAPPING_SPECIFICATION') AND COLUMN_NAME=UPPER('TGT_COLUMN_CLASS');
   IF COLUMNCHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'ALTER TABLE MAPPING_SPECIFICATION ADD TGT_COLUMN_CLASS varchar2(255) NULL';
   END IF;
END;
/
DECLARE
   COLUMNCHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO COLUMNCHECKERFLAG FROM ALL_TAB_COLUMNS WHERE  OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME = UPPER('MAPPING_SPECIFICATION') AND COLUMN_NAME=UPPER('SRC_BUSINESS_KEY_FLAG');
   IF COLUMNCHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'ALTER TABLE MAPPING_SPECIFICATION ADD SRC_BUSINESS_KEY_FLAG char(1) NULL';
   END IF;
END;
/
DECLARE
   COLUMNCHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO COLUMNCHECKERFLAG FROM ALL_TAB_COLUMNS WHERE  OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME = UPPER('MAPPING_SPECIFICATION') AND COLUMN_NAME=UPPER('TGT_BUSINESS_KEY_FLAG');
   IF COLUMNCHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'ALTER TABLE MAPPING_SPECIFICATION ADD TGT_BUSINESS_KEY_FLAG char(1) NULL';
   END IF;
END;
/
DECLARE
   COLUMNCHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO COLUMNCHECKERFLAG FROM ALL_TAB_COLUMNS WHERE  OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME = UPPER('SYSTEM_TABLE_COLUMNS_METADATA') AND COLUMN_NAME=UPPER('COLUMN_CLASS');
   IF COLUMNCHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'ALTER TABLE SYSTEM_TABLE_COLUMNS_METADATA ADD COLUMN_CLASS varchar2(255) NULL';
   END IF;
END;
/
DECLARE
   COLUMNCHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO COLUMNCHECKERFLAG FROM ALL_TAB_COLUMNS WHERE  OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME = UPPER('SYSTEM_TABLE_COLUMNS_METADATA') AND COLUMN_NAME=UPPER('BUSINESS_KEY_FLAG');
   IF COLUMNCHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'ALTER TABLE SYSTEM_TABLE_COLUMNS_METADATA ADD BUSINESS_KEY_FLAG char(1) NULL';
   END IF;
END;
/
DECLARE
   COLUMNCHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO COLUMNCHECKERFLAG FROM ALL_TAB_COLUMNS WHERE  OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME = UPPER('SYSTEM_TABLE_METADATA') AND COLUMN_NAME=UPPER('TABLE_CLASS');
   IF COLUMNCHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'ALTER TABLE SYSTEM_TABLE_METADATA ADD TABLE_CLASS varchar2(255) NULL';
   END IF;
END;
/
DECLARE
   TABLECHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO TABLECHECKERFLAG FROM ADS_MM_VERSION WHERE KEY='AMM_VERSION_INSTALLED' AND VALUE = '4.5';
   IF TABLECHECKERFLAG = 1 THEN
   UPDATE ADS_MM_VERSION SET VALUE = '4.6' WHERE KEY = 'AMM_VERSION_INSTALLED';
   END IF;
END;
/

DECLARE
   TABLECHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO TABLECHECKERFLAG FROM ALL_CONS_COLUMNS WHERE OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME = UPPER('RDM_REFERENCE_TABLE') AND CONSTRAINT_NAME = UPPER('UK_RDM_TBL_CID_NAME_VER');
   IF TABLECHECKERFLAG = 0 THEN
        EXECUTE IMMEDIATE 'ALTER TABLE RDM_REFERENCE_TABLE ADD CONSTRAINT UK_RDM_TBL_CID_NAME_VER UNIQUE (RDM_REF_TABLE_CAT_ID, RDM_REF_TABLE_NAME, RDM_REF_TAB_VERSION) ENABLE';
   END IF;
END;
/
DECLARE
   TABLECHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO TABLECHECKERFLAG FROM ALL_CONS_COLUMNS WHERE OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME = UPPER('CSM_CODESET_PUBLISH_HISTORY') AND CONSTRAINT_NAME = UPPER('UK_CODESET_PUB_HIST');
   IF TABLECHECKERFLAG = 0 THEN
        EXECUTE IMMEDIATE 'ALTER TABLE CSM_CODESET_PUBLISH_HISTORY ADD CONSTRAINT UK_CODESET_PUB_HIST UNIQUE (CSM_CODESET_CAT_ID, CSM_CODESET_NAME, CSM_CODESET_VERSION, CSM_ENVIRONMENT_ID) ENABLE';
   END IF;
END;
/
DECLARE
   TABLECHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO TABLECHECKERFLAG FROM ALL_CONS_COLUMNS WHERE OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME = UPPER('CSM_MAP_PUBLISH_HISTORY') AND CONSTRAINT_NAME = UPPER('UK_MAP_PUB_HISTORY');
   IF TABLECHECKERFLAG = 0 THEN
        EXECUTE IMMEDIATE 'ALTER TABLE CSM_MAP_PUBLISH_HISTORY ADD CONSTRAINT UK_MAP_PUB_HISTORY UNIQUE (CSM_MAP_CAT_ID, CSM_MAP_NAME, CSM_MAP_VERSION, CSM_ENVIRONMENT_ID) ENABLE';
   END IF;
END;
/
DECLARE
   TABLECHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO TABLECHECKERFLAG FROM ALL_CONS_COLUMNS WHERE OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME = UPPER('RDM_REF_TAB_PUBLISH_HISTORY') AND CONSTRAINT_NAME = UPPER('UK_RDM_TAB_PUB_HIST');
   IF TABLECHECKERFLAG = 0 THEN
        EXECUTE IMMEDIATE 'ALTER TABLE RDM_REF_TAB_PUBLISH_HISTORY ADD CONSTRAINT UK_RDM_TAB_PUB_HIST UNIQUE(RDM_REF_TABLE_CAT_ID, RDM_REF_TABLE_NAME, RDM_REF_TAB_VERSION, RDM_ENVIRONMENT_ID) ENABLE';
   END IF;
END;
/
 DECLARE
   COLUMNCHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO COLUMNCHECKERFLAG FROM ALL_TAB_COLUMNS WHERE  OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME = UPPER('USERS') AND COLUMN_NAME=UPPER('USER_THEME');
   IF COLUMNCHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'ALTER TABLE USERS ADD USER_THEME VARCHAR2(50) NULL';
      EXECUTE IMMEDIATE 'UPDATE USERS SET USER_THEME = ''DHTMLX_SKIN_SKYBLUE''';
   END IF;
END;
/
DECLARE
   COLUMNCHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO COLUMNCHECKERFLAG FROM ALL_TAB_COLUMNS WHERE  OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME = UPPER('SYSTEM_DEFINITION_DETAILS') AND COLUMN_NAME=UPPER('SYSTEM_NAME') AND DATA_LENGTH=UPPER('20');
   IF COLUMNCHECKERFLAG = 1 THEN
      EXECUTE IMMEDIATE 'ALTER TABLE SYSTEM_DEFINITION_DETAILS  MODIFY SYSTEM_NAME VARCHAR2(50)';
   END IF;
END;
/
DECLARE
   TABLECHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO TABLECHECKERFLAG FROM ALL_TABLES WHERE OWNER = sys_context( 'userenv', 'current_schema' ) AND TABLE_NAME = UPPER('SM_CLASSIFICATION_TABLE');
   IF TABLECHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'CREATE TABLE SM_CLASSIFICATION_TABLE   (TABLE_CLASS_ID  NUMBER NOT NULL ENABLE,     TABLE_CLASS_NAME VARCHAR2(255 BYTE),     TABLE_CLASS_DESCRIPTION VARCHAR2(4000 BYTE),     CREATED_BY              VARCHAR2(20 BYTE),     CREATED_DATE_TIME TIMESTAMP (6),     LAST_MODIFIED_BY VARCHAR2(20 BYTE),     LAST_MODIFIED_DATE_TIME TIMESTAMP (6),     CONSTRAINT "PK_SM_CLASSIFICATION_TABLE" PRIMARY KEY ("TABLE_CLASS_ID")   )';
   END IF;
END;
/

DECLARE
   SEQUENCECHECKERFLAG INT;
BEGIN
    SELECT COUNT(*) INTO SEQUENCECHECKERFLAG FROM ALL_SEQUENCES WHERE SEQUENCE_OWNER = sys_context('userenv', 'current_schema') AND SEQUENCE_NAME = UPPER('SM_CLASS_TBL_SEQ');
   IF SEQUENCECHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'CREATE SEQUENCE   "SM_CLASS_TBL_SEQ"  MINVALUE 1 MAXVALUE 999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE';
   END IF;
END;
/

DECLARE
  TRIGGERCHECKERFLAG INT;
BEGIN
  SELECT COUNT(*)  INTO TRIGGERCHECKERFLAG  FROM all_triggers WHERE OWNER = sys_context('userenv', 'current_schema') AND trigger_name = UPPER('SM_CLASS_TBL_INSERT');
  IF TRIGGERCHECKERFLAG = 0 THEN
    EXECUTE IMMEDIATE 'CREATE OR REPLACE TRIGGER  "SM_CLASS_TBL_INSERT" BEFORE INSERT ON SM_CLASSIFICATION_TABLE FOR EACH ROW BEGIN SELECT SM_CLASS_TBL_SEQ.NEXTVAL INTO :new.TABLE_CLASS_ID FROM DUAL; END;';
    EXECUTE IMMEDIATE 'ALTER TRIGGER  "SM_CLASS_TBL_INSERT" ENABLE';
  END IF;
END;
/

DECLARE
   TABLECHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO TABLECHECKERFLAG FROM ALL_TABLES WHERE OWNER = sys_context( 'userenv', 'current_schema' ) AND TABLE_NAME = UPPER('SM_CLASSIFICATION_COLUMN');
   IF TABLECHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'CREATE TABLE SM_CLASSIFICATION_COLUMN   (     COLUMN_CLASS_ID          NUMBER NOT NULL ENABLE,     COLUMN_CLASS_NAME        VARCHAR2(255 BYTE),     COLUMN_CLASS_DESCRIPTION VARCHAR2(4000 BYTE),     CREATED_BY               VARCHAR2(20 BYTE),     CREATED_DATE_TIME TIMESTAMP (6),     LAST_MODIFIED_BY VARCHAR2(20 BYTE),     LAST_MODIFIED_DATE_TIME TIMESTAMP (6),     CONSTRAINT "PK_SM_CLASSIFICATION_COLUMN" PRIMARY KEY ("COLUMN_CLASS_ID")   )';
   END IF;
END;
/

DECLARE
   SEQUENCECHECKERFLAG INT;
BEGIN
    SELECT COUNT(*) INTO SEQUENCECHECKERFLAG FROM ALL_SEQUENCES WHERE SEQUENCE_OWNER = sys_context('userenv', 'current_schema') AND SEQUENCE_NAME = UPPER('SMCLASSCOLUMN_SEQ');
   IF SEQUENCECHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'CREATE SEQUENCE   "SMCLASSCOLUMN_SEQ"  MINVALUE 1 MAXVALUE 999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE';
   END IF;
END;
/

DECLARE
  TRIGGERCHECKERFLAG INT;
BEGIN
  SELECT COUNT(*)
  INTO TRIGGERCHECKERFLAG  FROM all_triggers WHERE OWNER = sys_context('userenv', 'current_schema') AND trigger_name = UPPER('SMCLASSCOLUMN_INSERT');
  IF TRIGGERCHECKERFLAG = 0 THEN
    EXECUTE IMMEDIATE 'CREATE OR REPLACE TRIGGER  "SMCLASSCOLUMN_INSERT" BEFORE INSERT ON SM_CLASSIFICATION_COLUMN FOR EACH ROW BEGIN SELECT SMCLASSCOLUMN_SEQ.NEXTVAL INTO :new.COLUMN_CLASS_ID FROM DUAL; END;';
    EXECUTE IMMEDIATE 'ALTER TRIGGER  "SMCLASSCOLUMN_INSERT" ENABLE';
  END IF;
END;
/
DECLARE
   COLUMNCHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO COLUMNCHECKERFLAG FROM ALL_TAB_COLUMNS WHERE  OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME = UPPER('RDM_CHANGE_HISTORY') AND COLUMN_NAME=UPPER('FOLDER_HIERARCHY');
   IF COLUMNCHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'ALTER TABLE RDM_CHANGE_HISTORY ADD FOLDER_HIERARCHY VARCHAR2(4000) NULL';
   END IF;
END;
/
MERGE INTO CSM_CODESET_PUBLISH_HISTORY C
USING
(
SELECT DISTINCT MAX(CSM_CODESET_ID) CSMCODESETID, MAX(CSM_CODESET_VERSION), csm_environment_id FROM CSM_CODESET_PUBLISH_HISTORY GROUP BY CSM_ENVIRONMENT_ID
) T on (T.CSMCODESETID = C.CSM_CODESET_ID AND T.CSM_ENVIRONMENT_ID = C.CSM_ENVIRONMENT_ID)
WHEN MATCHED THEN UPDATE
SET CSM_CODESET_NEW_VER_PUB = 'N'
/
DECLARE
   TABLECHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO TABLECHECKERFLAG FROM ALL_TABLES WHERE OWNER = sys_context( 'userenv', 'current_schema' ) AND TABLE_NAME = UPPER('CSM_MAPPING_SPEC_READONLY');
   IF TABLECHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'CREATE TABLE "CSM_MAPPING_SPEC_READONLY"
  (
    "CSM_MAP_ID"          NUMBER NOT NULL ENABLE,
    "SRC_CATEGORY_ID"     NUMBER,
    "SRC_CATEGORY_NAME"   VARCHAR2(255 BYTE),
    "SRC_CODESET_ID"      NUMBER,
    "SRC_CODESET_NAME"    VARCHAR2(100 BYTE),
    "SRC_CODESET_VERSION" NUMBER(*,2),
    "SRC_CODE_ID"         NUMBER,
    "SRC_CODE_NAME"       VARCHAR2(100 BYTE),
    "SRC_CODE_VALUE"      VARCHAR2(255 BYTE),
    "SRC_CODE_DESC"       VARCHAR2(4000 BYTE),
    "SRC_SYSTEM_ID"       NUMBER,
    "SRC_SYSTEM_NAME"     VARCHAR2(50 BYTE),
    "SRC_SYS_ENV_NAME"    VARCHAR2(50 BYTE),
    "MAP_SEQ_ID"          NUMBER,
    "TGT_CATEGORY_ID"     NUMBER,
    "TGT_CATEGORY_NAME"   VARCHAR2(255 BYTE),
    "TGT_CODESET_ID"      NUMBER,
    "TGT_CODESET_NAME"    VARCHAR2(255 BYTE),
    "TGT_CODESET_VERSION" NUMBER(*,2),
    "TGT_CODE_ID"         NUMBER,
    "TGT_CODE_NAME"       VARCHAR2(100 BYTE),
    "TGT_CODE_VALUE"      VARCHAR2(255 BYTE),
    "TGT_CODE_DESC"       VARCHAR2(4000 BYTE),
    "TGT_SYSTEM_ID"       VARCHAR2(20 BYTE),
    "TGT_SYSTEM_NAME"     VARCHAR2(50 BYTE),
    "TGT_SYS_ENV_NAME"    VARCHAR2(50 BYTE),
    "DELETE_FLAG"         VARCHAR2(1 BYTE),
    "PUBLISH_FLAG"        VARCHAR2(1 BYTE),
    "CREATED_BY"          VARCHAR2(50 BYTE),
    "CREATED_DATE" TIMESTAMP (6),
    "MODIFIED_BY" VARCHAR2(50 BYTE),
    "MODIFIED_DATE" TIMESTAMP (6),
    CONSTRAINT "CSM_MAP_SPEC_RO_FK" FOREIGN KEY ("CSM_MAP_ID") REFERENCES "CSM_MAPPING_DETAILS" ("CSM_MAP_ID") ON DELETE CASCADE ENABLE
  )';
 EXECUTE IMMEDIATE 'INSERT
INTO CSM_MAPPING_SPEC_READONLY
  (
    CSM_MAP_ID,
    SRC_CATEGORY_ID,
    SRC_CATEGORY_NAME,
    SRC_CODESET_ID,
    SRC_CODESET_NAME,
    SRC_CODESET_VERSION,
    SRC_CODE_ID,
    SRC_CODE_NAME,
    SRC_CODE_VALUE,
    SRC_CODE_DESC,
    SRC_SYSTEM_ID,
    SRC_SYSTEM_NAME,
    SRC_SYS_ENV_NAME,
    MAP_SEQ_ID,
    TGT_CATEGORY_ID,
    TGT_CATEGORY_NAME,
    TGT_CODESET_ID,
    TGT_CODESET_NAME,
    TGT_CODESET_VERSION,
    TGT_CODE_ID,
    TGT_CODE_NAME,
    TGT_CODE_VALUE,
    TGT_CODE_DESC,
    TGT_SYSTEM_ID,
    TGT_SYSTEM_NAME,
    TGT_SYS_ENV_NAME,
    DELETE_FLAG,
    PUBLISH_FLAG,
    CREATED_BY,
    CREATED_DATE,
    MODIFIED_BY,
    MODIFIED_DATE
  )
  (SELECT   SPEC.CSM_MAP_ID,
  SRCCATEGORY.CATEGORY_ID	          AS SRC_CAT_ID,
  SRCCATEGORY.CATEGORY_NAME         AS SRC_CAT_NAME,
  SRCCODESET.CODESET_ID             AS SRC_CODESET_ID,
  SRCCODESET.CODESET_NAME           AS SRC_CODESET_NAME,
  SRCCODESET.CODESET_VERSION        AS SRC_CODESET_VERSION,
  SRCCODES.CODE_ID  	            AS SRC_CODE_ID,
  SRCCODES.CODE_NAME                AS SRC_CODE_NAME,
  SRCCODES.CODE_STND_VALUE          AS SRC_CODE_VALUE,
  SRCCODES.CODE_DESC   AS SRC_CODE_DESC,
  SRCCODES.SYSTEM_ID          AS SRC_SYSTEM_ID,
  SRCCODES.SYSTEM_NAME            AS SRC_SYSTEM_NAME,
  SRCCODES.SYSTEM_ENV_NAME	    AS SRC_ENV_NAME,
  CSM_MAP_SEQUENCE_ID,
  TGTCATEGORY.CATEGORY_ID	    AS TGT_CAT_ID,
  TGTCATEGORY.CATEGORY_NAME         AS TGT_CAT_NAME,
  TGTCODESET.CODESET_ID             AS TGT_CODESET_ID,
  TGTCODESET.CODESET_NAME           AS TGT_CODESET_NAME,
  TGTCODESET.CODESET_VERSION        AS TGT_CODESET_VERSION,
  TGTCODES.CODE_ID  	            AS TGT_CODE_ID,
  TGTCODES.CODE_NAME                AS TGT_CODE_NAME,
  TGTCODES.CODE_STND_VALUE          AS TGT_CODE_VALUE,
  TGTCODES.CODE_DESC                AS TGT_CODE_DESC,
  TGTCODES.SYSTEM_ID          AS TGT_SYSTEM_ID,
  TGTCODES.SYSTEM_NAME            AS TGT_SYSTEM_NAME,
  TGTCODES.SYSTEM_ENV_NAME	    AS TGT_ENV_NAME,
  SPEC.CSM_MAP_DELETE_FLAG,
  SPEC.CSM_MAP_PUBLISH_FLAG,
  CSM_MAP_CREATEDBY,
  CSM_MAP_CREATED_DATE,
  CSM_MAP_MODIFIEDBY,
  CSM_MAP_MODIFIED_DATE
FROM CSM_MAPPING_SPEC SPEC
JOIN CSM_MAPPING_DETAILS CSMMAP
ON (SPEC.CSM_MAP_ID = CSMMAP.CSM_MAP_ID AND CSMMAP.CSM_MAP_STATUS = ''Passive'')
LEFT JOIN CSM_CODE_VALUE SRCCODES
ON SPEC.CSM_MAP_SOURCE_CODE_ID = SRCCODES.CODE_ID
LEFT JOIN CSM_CODESET SRCCODESET
ON SRCCODES.CODESET_ID = SRCCODESET.CODESET_ID
LEFT JOIN CSM_CATEGORY SRCCATEGORY
ON SRCCATEGORY.CATEGORY_ID = SRCCODESET.CATEGORY_ID
LEFT JOIN CSM_CODE_VALUE TGTCODES
ON SPEC.CSM_MAP_TARGET_CODE_ID = TGTCODES.CODE_ID
LEFT JOIN CSM_CODESET TGTCODESET
ON TGTCODES.CODESET_ID = TGTCODESET.CODESET_ID
LEFT JOIN CSM_CATEGORY TGTCATEGORY
ON TGTCATEGORY.CATEGORY_ID = TGTCODESET.CATEGORY_ID)';
EXECUTE IMMEDIATE 'COMMIT';
EXECUTE IMMEDIATE 'DELETE FROM CSM_MAPPING_SPEC WHERE CSM_MAP_ID IN (SELECT CSM_MAP_ID FROM CSM_MAPPING_SPEC_READONLY)';
 END IF;
END;
/

DECLARE
   COLUMNCHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO COLUMNCHECKERFLAG FROM ALL_TAB_COLUMNS WHERE  OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME = UPPER('MAP_SPCFCTN_DTLS_RPRT_GTT') AND COLUMN_NAME=UPPER('TGT_COL_DATATYPE') AND DATA_LENGTH = 50;
   IF COLUMNCHECKERFLAG = 1 THEN
      EXECUTE IMMEDIATE ' ALTER TABLE MAP_SPCFCTN_DTLS_RPRT_GTT  MODIFY (TGT_COL_DATATYPE VARCHAR2(4000 BYTE)) ';
   END IF;
END;
/

DECLARE
   COLUMNCHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO COLUMNCHECKERFLAG FROM ALL_TAB_COLUMNS WHERE  OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME = UPPER('MAP_SPCFCTN_DTLS_RPRT_GTT') AND COLUMN_NAME=UPPER('SRC_COL_DATATYPE') AND DATA_LENGTH = 50;
   IF COLUMNCHECKERFLAG = 1 THEN
      EXECUTE IMMEDIATE ' ALTER TABLE MAP_SPCFCTN_DTLS_RPRT_GTT  MODIFY (SRC_COL_DATATYPE VARCHAR2(4000 BYTE)) ';
   END IF;
END;
/

DECLARE
   COLUMNCHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO COLUMNCHECKERFLAG FROM ALL_TAB_COLUMNS WHERE  OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME = UPPER('MAP_SPCFCTN_DTLS_RPRT_GTT') AND COLUMN_NAME=UPPER('MATCH_SRC_SYS_COL_DTYPE') AND DATA_LENGTH = 50;
   IF COLUMNCHECKERFLAG = 1 THEN
      EXECUTE IMMEDIATE ' ALTER TABLE MAP_SPCFCTN_DTLS_RPRT_GTT  MODIFY (MATCH_SRC_SYS_COL_DTYPE VARCHAR2(4000 BYTE)) ';
   END IF;
END;
/

DECLARE
   COLUMNCHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO COLUMNCHECKERFLAG FROM ALL_TAB_COLUMNS WHERE  OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME = UPPER('MAP_SPCFCTN_DTLS_RPRT_GTT') AND COLUMN_NAME=UPPER('MATCH_TGT_SYS_COL_DTYPE') AND DATA_LENGTH = 50;
   IF COLUMNCHECKERFLAG = 1 THEN
      EXECUTE IMMEDIATE ' ALTER TABLE MAP_SPCFCTN_DTLS_RPRT_GTT  MODIFY (MATCH_TGT_SYS_COL_DTYPE VARCHAR2(4000 BYTE)) ';
   END IF;
END;
/

DECLARE
   COLUMNCHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO COLUMNCHECKERFLAG FROM ALL_TAB_COLUMNS WHERE  OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME = UPPER('CSM_MAPPING_DETAILS') AND COLUMN_NAME=UPPER('CSM_MAP_PUBLISH_FLAG');
   IF COLUMNCHECKERFLAG = 1 THEN
      EXECUTE IMMEDIATE 'ALTER TABLE CSM_MAPPING_DETAILS MODIFY CSM_MAP_PUBLISH_FLAG  DEFAULT ''N'' ';
      EXECUTE IMMEDIATE 'UPDATE CSM_MAPPING_DETAILS SET CSM_MAP_PUBLISH_FLAG = ''N'' WHERE CSM_MAP_ID NOT IN
                         (SELECT CSM_MAP_ID FROM CSM_MAP_PUBLISH_HISTORY) and CSM_MAP_PUBLISH_FLAG = ''Y'' ';
   END IF;
END;
/
DECLARE
   COLUMNCHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO COLUMNCHECKERFLAG FROM ALL_TAB_COLUMNS WHERE  OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME = UPPER('MAPPING_SPECIFICATION') AND COLUMN_NAME=UPPER('TGT_TABLE_ALIAS');
   IF COLUMNCHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'ALTER TABLE MAPPING_SPECIFICATION ADD TGT_TABLE_ALIAS varchar2(255) NULL';
      EXECUTE IMMEDIATE 'DELETE FROM USER_PREFERENCES WHERE USER_ID LIKE ''%HEADER_ORDER_PREFERENCE%''';
      EXECUTE IMMEDIATE 'DELETE FROM USER_PREFERENCES WHERE USER_ID IN (SELECT USER_ID FROM USERS)';

   END IF;
END;
/

DECLARE
   COLUMNCHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO COLUMNCHECKERFLAG FROM ALL_TAB_COLUMNS WHERE  OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME = UPPER('MAPPING_SPECIFICATION') AND COLUMN_NAME=UPPER('SRC_TABLE_ALIAS');
   IF COLUMNCHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'ALTER TABLE MAPPING_SPECIFICATION ADD SRC_TABLE_ALIAS varchar2(255) NULL';
   END IF;
END;
/

DECLARE
   COLUMNCHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO COLUMNCHECKERFLAG FROM ALL_TAB_COLUMNS WHERE  OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME = UPPER('MAPPING_SPECIFICATION') AND COLUMN_NAME=UPPER('TGT_COLUMN_ALIAS');
   IF COLUMNCHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'ALTER TABLE MAPPING_SPECIFICATION ADD TGT_COLUMN_ALIAS varchar2(255) NULL';
   END IF;
END;
/

DECLARE
   COLUMNCHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO COLUMNCHECKERFLAG FROM ALL_TAB_COLUMNS WHERE  OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME = UPPER('MAPPING_SPECIFICATION') AND COLUMN_NAME=UPPER('SRC_COLUMN_ALIAS');
   IF COLUMNCHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'ALTER TABLE MAPPING_SPECIFICATION ADD SRC_COLUMN_ALIAS varchar2(255) NULL';
   END IF;
END;
/

DECLARE
   COLUMNCHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO COLUMNCHECKERFLAG FROM ALL_TAB_COLUMNS WHERE  OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME = UPPER('SYSTEM_TABLE_COLUMNS_METADATA') AND COLUMN_NAME=UPPER('COLUMN_ALIAS');
   IF COLUMNCHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'ALTER TABLE SYSTEM_TABLE_COLUMNS_METADATA ADD COLUMN_ALIAS varchar2(255) NULL';
   END IF;
END;
/

DECLARE
   COLUMNCHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO COLUMNCHECKERFLAG FROM ALL_TAB_COLUMNS WHERE  OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME = UPPER('SYSTEM_TABLE_METADATA') AND COLUMN_NAME=UPPER('TABLE_ALIAS');
   IF COLUMNCHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'ALTER TABLE SYSTEM_TABLE_METADATA ADD TABLE_ALIAS varchar2(255) NULL';
   END IF;
END;
/

DECLARE
   TABLECHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO TABLECHECKERFLAG FROM ALL_OBJECTS WHERE OWNER = sys_context('userenv', 'current_schema') AND OBJECT_TYPE = 'FUNCTION' AND OBJECT_NAME = UPPER('FN_ISINT');
   IF TABLECHECKERFLAG = 1 THEN
      EXECUTE IMMEDIATE 'DROP FUNCTION FN_ISINT';
   END IF;
END;
/

CREATE OR REPLACE Function FN_ISINT
   ( STR_LEN_IN IN varchar2 )
   RETURN number
IS
   cnumber number;
   cursor c1 is
   SELECT case when trim(TRANSLATE(STR_LEN_IN,'0123456789', ' ')) is null then STR_LEN_IN else NULL end rData FROM DUAL;
BEGIN
   open c1;
   fetch c1 into cnumber;
   close c1;
RETURN cnumber;
EXCEPTION
WHEN OTHERS THEN
   raise_application_error(-20001,'An error was encountered - '||SQLCODE||' -ERROR- '||SQLERRM);
END;
/
DECLARE
   COLUMNCHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO COLUMNCHECKERFLAG FROM ALL_TAB_COLUMNS WHERE  OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME = UPPER('SM_CLASSIFICATION_TABLE') AND COLUMN_NAME=UPPER('SM_SYSTEM_BASED');
   IF COLUMNCHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'ALTER TABLE SM_CLASSIFICATION_TABLE ADD SM_SYSTEM_BASED varchar(1) NULL';
   END IF;
END;
/
DECLARE
   COLUMNCHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO COLUMNCHECKERFLAG FROM ALL_TAB_COLUMNS WHERE  OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME = UPPER('SM_CLASSIFICATION_COLUMN') AND COLUMN_NAME=UPPER('SM_SYSTEM_BASED');
   IF COLUMNCHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'ALTER TABLE SM_CLASSIFICATION_COLUMN ADD SM_SYSTEM_BASED varchar(1) NULL';
   END IF;
END;
/
DECLARE
   TABLECHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO TABLECHECKERFLAG FROM ALL_TABLES WHERE OWNER = sys_context( 'userenv', 'current_schema' ) AND TABLE_NAME = UPPER('CAT_TEMPLATE_OPTIONS');
   IF TABLECHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'CREATE TABLE "CAT_TEMPLATE_OPTIONS"(
       "CAT_OPTION_ID" NUMBER NOT NULL,
       "CAT_OPTION_NAME" VARCHAR2(255) NOT NULL,
       "CAT_OPTION_TITLE" VARCHAR2(255) NOT NULL,
       "CAT_OPTION_TYPES" VARCHAR2(500) NOT NULL,
       "CAT_OPTION_DEFAULT_VALUE" VARCHAR2(255) NULL,
       "CAT_OPTION_SYSTEM_BASED" CHAR DEFAULT ''0'' NULL,
       "CAT_ID" NUMBER NOT NULL,
       CONSTRAINT "PK_CAT_TEMPLATE_OPTIONS" PRIMARY KEY("CAT_OPTION_ID"),
       CONSTRAINT "FK_CAT_OPTIONS_TEMPLATES" FOREIGN KEY(CAT_ID) REFERENCES "CAT_TEMPLATES" ("CAT_ID") ON DELETE CASCADE ENABLE)';
   END IF;
END;
/
DECLARE
   SEQUENCECHECKERFLAG INT;
BEGIN
    SELECT COUNT(*) INTO SEQUENCECHECKERFLAG FROM ALL_SEQUENCES WHERE SEQUENCE_OWNER = sys_context('userenv', 'current_schema') AND SEQUENCE_NAME = UPPER('CAT_OPTION_ID_SEQ');
   IF SEQUENCECHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'CREATE SEQUENCE   "CAT_OPTION_ID_SEQ"  MINVALUE 1 MAXVALUE 999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE';
   END IF;
END;
/

DECLARE
  TRIGGERCHECKERFLAG INT;
BEGIN
  SELECT COUNT(*)
  INTO TRIGGERCHECKERFLAG
  FROM all_triggers
  WHERE OWNER = sys_context('userenv', 'current_schema') AND trigger_name = UPPER('CAT_OPTION_ID_INSERT');
  IF TRIGGERCHECKERFLAG = 0 THEN
    EXECUTE IMMEDIATE 'CREATE OR REPLACE TRIGGER  "CAT_OPTION_ID_INSERT" BEFORE INSERT ON CAT_TEMPLATE_OPTIONS FOR EACH ROW BEGIN SELECT CAT_OPTION_ID_SEQ.NEXTVAL INTO :new.CAT_OPTION_ID FROM DUAL; END;';
    EXECUTE IMMEDIATE 'ALTER TRIGGER  "CAT_OPTION_ID_INSERT" ENABLE';
  END IF;
END;
/

DECLARE
   TABLECHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO TABLECHECKERFLAG FROM ALL_OBJECTS WHERE OWNER = sys_context('userenv', 'current_schema') AND OBJECT_TYPE = 'PROCEDURE' AND OBJECT_NAME = UPPER('FN_RESTORECSM_PASSIVEMAP');
   IF TABLECHECKERFLAG = 1 THEN
      EXECUTE IMMEDIATE 'DROP PROCEDURE FN_RESTORECSM_PASSIVEMAP';
   END IF;
END;
/

CREATE OR REPLACE PROCEDURE FN_RESTORECSM_PASSIVEMAP(
      V_CSM_MAP_ID IN NUMBER)
      AS
      PRAGMA AUTONOMOUS_TRANSACTION;
  BEGIN
    BEGIN
      INSERT INTO CSM_MAPPING_SPEC(CSM_MAP_ID,CSM_MAP_SOURCE_CODE_ID,CSM_MAP_TARGET_CODE_ID,
      CSM_MAP_DELETE_FLAG,CSM_MAP_PUBLISH_FLAG, CSM_MAP_CREATEDBY,CSM_MAP_CREATED_DATE,
      CSM_MAP_MODIFIEDBY,CSM_MAP_MODIFIED_DATE
      )SELECT * FROM(
          WITH CODEVALUES AS(SELECT CODESET.CATEGORY_ID,CODESET.CODESET_ID,CODEVALUE.CODE_ID,CODEVALUE.CODE_NAME,CODEVALUE.CODE_STND_VALUE,
          CODEVALUE.SYSTEM_ID||coalesce(CODEVALUE.SYSTEM_NAME,NULL,' ') || coalesce(CODEVALUE.SYSTEM_ENV_NAME,NULL,' ') as codesystemenv,CODEVALUE.DELETE_FLAG FROM CSM_CODESET CODESET JOIN CSM_CODE_VALUE CODEVALUE ON
          (CODESET.CODESET_ID = CODEVALUE.CODESET_ID AND CODEVALUE.CODESET_ID IN
          (SELECT SRC_CODESET_ID CODESET_ID FROM CSM_MAPPING_SPEC_READONLY WHERE CSM_MAP_ID = v_csm_map_id
          UNION SELECT TGT_CODESET_ID  FROM CSM_MAPPING_SPEC_READONLY WHERE CSM_MAP_ID = v_csm_map_id))),

          source as (SELECT CVALS.CODE_ID SRC_CODE_ID,MAPSPEC.MAP_SEQ_ID,MAPSPEC.CSM_MAP_ID,MAPSPEC.CREATED_BY , MAPSPEC.CREATED_DATE , MAPSPEC.DELETE_FLAG ,
          MAPSPEC.MODIFIED_BY , MAPSPEC.MODIFIED_DATE , MAPSPEC.PUBLISH_FLAG FROM CSM_MAPPING_SPEC_READONLY MAPSPEC JOIN CODEVALUES CVALS
          ON (MAPSPEC.SRC_CATEGORY_ID = CVALS.CATEGORY_ID AND MAPSPEC.SRC_CODESET_ID = CVALS.CODESET_ID AND
          UPPER(MAPSPEC.SRC_CODE_NAME)    = UPPER(CVALS.CODE_NAME)
 		      AND UPPER(MAPSPEC.SRC_CODE_VALUE)   = UPPER(CVALS.CODE_STND_VALUE)
  		    AND MAPSPEC.SRC_SYSTEM_ID||coalesce(MAPSPEC.SRC_SYSTEM_NAME,NULL,' ')||coalesce(MAPSPEC.SRC_SYS_ENV_NAME,NULL,' ')  = CVALS.codesystemenv
          AND MAPSPEC.CSM_MAP_ID = v_csm_map_id) AND CVALS.DELETE_FLAG = 'N'),

          target as (SELECT CVALS.CODE_ID TGT_CODE_ID,MAPSPEC.MAP_SEQ_ID FROM CSM_MAPPING_SPEC_READONLY MAPSPEC JOIN CODEVALUES CVALS
          ON (MAPSPEC.TGT_CATEGORY_ID = CVALS.CATEGORY_ID AND MAPSPEC.TGT_CODESET_ID = CVALS.CODESET_ID AND
          UPPER(MAPSPEC.TGT_CODE_NAME)    = UPPER(CVALS.CODE_NAME)
          AND UPPER(MAPSPEC.TGT_CODE_VALUE)   = UPPER(CVALS.CODE_STND_VALUE)
          AND MAPSPEC.TGT_SYSTEM_ID||coalesce(MAPSPEC.TGT_SYSTEM_NAME,NULL,' ')||coalesce(MAPSPEC.TGT_SYS_ENV_NAME,NULL,' ') = CVALS.codesystemenv
          AND MAPSPEC.CSM_MAP_ID = v_csm_map_id) AND CVALS.DELETE_FLAG = 'N')

          SELECT SRC.CSM_MAP_ID,SRC.SRC_CODE_ID,TGT.TGT_CODE_ID,SRC.DELETE_FLAG,SRC.PUBLISH_FLAG,
                   SRC.CREATED_BY,SRC.CREATED_DATE,SRC.MODIFIED_BY,SRC.MODIFIED_DATE FROM SOURCE SRC LEFT JOIN
                   TARGET TGT ON (SRC.MAP_SEQ_ID = TGT.MAP_SEQ_ID)
      );
      END;
      COMMIT;
      BEGIN
         DELETE FROM CSM_MAPPING_SPEC_READONLY WHERE CSM_MAP_ID = V_CSM_MAP_ID;
         COMMIT;
      END;
END FN_RESTORECSM_PASSIVEMAP;
/
UPDATE APP_PREFERENCES SET preference_value = 'Copied Mapping Details - DO NOT REPLY' WHERE preference_value = 'Copied Mapping Details – DO NOT REPLY'
/
UPDATE APP_PREFERENCES SET preference_value = 'Merged Mapping Details - DO NOT REPLY' WHERE preference_value = 'Merged Mapping Details – DO NOT REPLY'
/
UPDATE APP_PREFERENCES SET preference_value = 'New Mapping Details - DO NOT REPLY' WHERE preference_value = 'New Mapping Details – DO NOT REPLY'
/
UPDATE APP_PREFERENCES SET preference_value = 'New Version Details - DO NOT REPLY' WHERE preference_value = 'New Version Details – DO NOT REPLY'
/
UPDATE APP_PREFERENCES SET preference_value = 'XML Mapping Details - DO NOT REPLY ' WHERE preference_value = 'XML Mapping Details – DO NOT REPLY '
/
UPDATE APP_PREFERENCES SET preference_value = 'Project Baseline Details - DO NOT REPLY' WHERE preference_value = 'Project Baseline Details – DO NOT REPLY'
/
DECLARE
   TABLECHECKERFLAG INT;
   VERSIONCHECKKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO TABLECHECKERFLAG FROM CAT_TEMPLATE_OPTIONS;
   IF TABLECHECKERFLAG = 0 THEN
    SELECT COUNT(*) INTO VERSIONCHECKKERFLAG FROM ADS_MM_VERSION WHERE VALUE < '6.1';
    IF VERSIONCHECKKERFLAG = 1 THEN
    INSERT INTO CAT_TEMPLATE_OPTIONS(CAT_OPTION_NAME,CAT_OPTION_TITLE,CAT_OPTION_TYPES,CAT_OPTION_SYSTEM_BASED,CAT_ID)
	(
         SELECT 'srcType','Treat SOURCE as Sequential file stage','Check Box', 1,(SELECT CAT_ID FROM CAT_TEMPLATES WHERE CAT_NAME = 'Datastage 7.5 Parallel Job')
         FROM DUAL UNION
         SELECT 'tgtType','Treat TARGET as Sequential file stage','Check Box',1,(SELECT CAT_ID FROM CAT_TEMPLATES WHERE CAT_NAME = 'Datastage 7.5 Parallel Job')
         FROM DUAL UNION
         SELECT 'srcType','Treat SOURCE as Sequential file stage','Check Box', 1,(SELECT CAT_ID FROM CAT_TEMPLATES WHERE CAT_NAME = 'Datastage 7.5 Server Job')
         FROM DUAL UNION
         SELECT 'tgtType','Treat TARGET as Sequential file stage','Check Box',1,(SELECT CAT_ID FROM CAT_TEMPLATES WHERE CAT_NAME = 'Datastage 7.5 Server Job')
         FROM DUAL UNION
         SELECT 'srcType','Treat SOURCE as Sequential file stage','Check Box', 1,(SELECT CAT_ID FROM CAT_TEMPLATES WHERE CAT_NAME = 'Datastage 8.0 Parallel Job')
         FROM DUAL UNION
         SELECT 'tgtType','Treat TARGET as Sequential file stage','Check Box',1,(SELECT CAT_ID FROM CAT_TEMPLATES WHERE CAT_NAME = 'Datastage 8.0 Parallel Job')
         FROM DUAL UNION
         SELECT 'srcType','Treat SOURCE as Sequential file stage','Check Box', 1,(SELECT CAT_ID FROM CAT_TEMPLATES WHERE CAT_NAME = 'Datastage 8.0 Parallel Job Include Sql Expression Datastage 8.0')
         FROM DUAL UNION
         SELECT 'tgtType','Treat TARGET as Sequential file stage','Check Box',1,(SELECT CAT_ID FROM CAT_TEMPLATES WHERE CAT_NAME = 'Datastage 8.0 Parallel Job Include Sql Expression Datastage 8.0')
         FROM DUAL UNION
         SELECT 'srcType','Treat SOURCE as Sequential file stage','Check Box', 1,(SELECT CAT_ID FROM CAT_TEMPLATES WHERE CAT_NAME = 'Datastage 8.0 Server Job')
         FROM DUAL UNION
         SELECT 'tgtType','Treat TARGET as Sequential file stage','Check Box',1,(SELECT CAT_ID FROM CAT_TEMPLATES WHERE CAT_NAME = 'Datastage 8.0 Server Job')
         FROM DUAL UNION
         SELECT 'srcType','Treat SOURCE as Sequential file stage','Check Box', 1,(SELECT CAT_ID FROM CAT_TEMPLATES WHERE CAT_NAME = 'Datastage 8.0 Server Job Include Sql Expression	Datastage 8.0')
         FROM DUAL UNION
         SELECT 'tgtType','Treat TARGET as Sequential file stage','Check Box',1,(SELECT CAT_ID FROM CAT_TEMPLATES WHERE CAT_NAME = 'Datastage 8.0 Server Job Include Sql Expression	Datastage 8.0')
	 FROM DUAL
         );
    END IF;
END IF;
END;
/
CREATE OR REPLACE PROCEDURE CSM_AUTO_MAPPING(
          SRC_CODESET_ID   IN NUMBER,
          SRC_SYSTEM_ID    IN NUMBER,
          SRC_SYS_NAME     IN VARCHAR2,
          SRC_SYS_ENV_NAME IN VARCHAR2,
          TGT_CODESET_ID   IN NUMBER,
          TGT_SYSTEM_ID    IN NUMBER,
          TGT_SYS_NAME     IN VARCHAR2,
          TGT_SYS_ENV_NAME IN VARCHAR2,
          FOR_CSM_MAP_ID IN NUMBER)
      IS
      BEGIN
      MERGE INTO CSM_MAPPING_SPEC CSMMS USING
      (
      WITH CTE AS (SELECT CODE_ID AS SRC_CODE_ID, CODE_STND_VALUE AS SRC_CODE_VALUE, CODE_NAME AS SRC_CODE_NAME
      FROM CSM_CODE_VALUE SRC_CSMCV, CSM_CODESET SRC_CSMC
      WHERE SRC_CSMCV.CODESET_ID = SRC_CSMC.CODESET_ID
      AND SRC_CSMCV.CODESET_ID = SRC_CODESET_ID
      AND SRC_CSMCV.SYSTEM_ID = SRC_SYSTEM_ID
      AND COALESCE(UPPER(SRC_CSMCV.SYSTEM_NAME), NULL, ' ') = COALESCE(UPPER(SRC_SYS_NAME), NULL, ' ')
      AND COALESCE(UPPER(SRC_CSMCV.SYSTEM_ENV_NAME), NULL, ' ') = COALESCE(UPPER(SRC_SYS_ENV_NAME), NULL, ' ')),
      CTEONE AS (SELECT CODE_ID AS TGT_CODE_ID,  CODE_STND_VALUE AS TGT_CODE_VALUE, CODE_NAME AS TGT_CODE_NAME
      FROM CSM_CODE_VALUE TGT_CSMCV, CSM_CODESET TGT_CSMC
      WHERE TGT_CSMCV.CODESET_ID = TGT_CSMC.CODESET_ID
      AND TGT_CSMCV.CODESET_ID = TGT_CODESET_ID
      AND TGT_CSMCV.SYSTEM_ID = TGT_SYSTEM_ID
      AND COALESCE(UPPER(TGT_CSMCV.SYSTEM_NAME), NULL, ' ') = COALESCE(UPPER(TGT_SYS_NAME), NULL, ' ')
      AND COALESCE(UPPER(TGT_CSMCV.SYSTEM_ENV_NAME), NULL, ' ') = COALESCE(UPPER(TGT_SYS_ENV_NAME), NULL, ' '))
      SELECT * FROM CTE, CTEONE WHERE UPPER(CTEONE.TGT_CODE_VALUE) = UPPER(CTE.SRC_CODE_VALUE)
      AND UPPER(CTEONE.TGT_CODE_NAME) = UPPER(CTE.SRC_CODE_NAME)
      ) T ON
      (CSMMS.CSM_MAP_ID = FOR_CSM_MAP_ID AND CSMMS.CSM_MAP_SOURCE_CODE_ID = T.SRC_CODE_ID)
      WHEN MATCHED THEN
        UPDATE
        SET CSMMS.CSM_MAP_TARGET_CODE_ID = T.TGT_CODE_ID;
END;
/
-- New Column Added to CAT Template options to change order
DECLARE
   COLUMNCHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO COLUMNCHECKERFLAG FROM ALL_TAB_COLUMNS WHERE  OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME = UPPER('CAT_TEMPLATE_OPTIONS') AND COLUMN_NAME=UPPER('CAT_OPTION_ORDER');
   IF COLUMNCHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'ALTER TABLE CAT_TEMPLATE_OPTIONS ADD CAT_OPTION_ORDER FLOAT DEFAULT 1.0 NULL';
   END IF;
END;
/
DECLARE
   TABLECHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO TABLECHECKERFLAG FROM all_VIEWS WHERE OWNER = sys_context('userenv', 'current_schema') AND VIEW_NAME = UPPER('IMPACT_ANALYSIS_SUMMARY_V');
   IF TABLECHECKERFLAG = 1 THEN
      EXECUTE IMMEDIATE 'DROP VIEW IMPACT_ANALYSIS_SUMMARY_V';
      EXECUTE IMMEDIATE 'CREATE OR REPLACE FORCE VIEW  "IMPACT_ANALYSIS_SUMMARY_V" ("MAPPINGSCOUNT", "PROJ_ID", "PROJ_NAME", "PROJ_DESCR", "STATUS") AS
                         select count(project.proj_id) as mappingscount,
                         project.proj_id, proj_name, to_char(proj_descr)proj_descr, mapping_Details.status
                         from APPENDED_MAP_SPEC_RCRDS_V mapping_specification
                         left join mapping_details on MAPPING_SPECIFICATION.MAP_ID = MAPPING_DETAILS.MAP_ID
                         left join project on project.proj_id = mapping_Details.project_id
                         where ((SELECT 1 FROM DUAL WHERE REGEXP_LIKE(src_col_length, ''^\d+(\.\d+)?$'', '''')) = 1 and (SELECT 1 FROM DUAL WHERE REGEXP_LIKE(tgt_col_length, ''^\d+(\.\d+)?$'', '''')) = 1 and (FN_ISINT(LTRIM(RTRIM(src_col_length)))  > FN_ISINT(LTRIM(RTRIM(tgt_col_length)))))
                         and length(tgt_col_length) > 0
                         and length(src_col_length) > 0
                         and project.proj_id is not null
                         group by project.proj_id, proj_name, to_char(proj_descr),mapping_Details.status';
   END IF;
END;
/
DECLARE
   TABLECHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO TABLECHECKERFLAG FROM all_VIEWS WHERE OWNER = sys_context('userenv', 'current_schema') AND VIEW_NAME = UPPER('IMPACT_ANALYSIS_DETAILS_V');
   IF TABLECHECKERFLAG = 1 THEN
      EXECUTE IMMEDIATE 'DROP VIEW IMPACT_ANALYSIS_DETAILS_V';
      EXECUTE IMMEDIATE 'CREATE OR REPLACE FORCE VIEW  "IMPACT_ANALYSIS_DETAILS_V" ("MAP_ID", "SRC_COL_LENGTH", "SRC_COL_PRECISION", "TGT_COL_LENGTH","TGT_COL_PRECISION","PROJ_ID","PROJ_NAME", "PROJ_DESCR", "STATUS","MAP_NAME","MAP_SPEC_VERSION","VERSIONLABEL","MAP_SEQ_ID","SRC_TABLE_NAME","TGT_TABLE_NAME","SRC_COLUMN_NAME","TGT_COLUMN_NAME") AS
                         select MAPPING_SPECIFICATION.MAP_ID, src_col_length, src_col_precision, tgt_col_length, tgt_col_precision, project.proj_id ,
                         proj_name, proj_descr,mapping_Details.status, mapping_Details.map_name, mapping_Details.map_spec_version,mapping_Details.versionlabel, MAPPING_SPECIFICATION.MAP_seq_ID,
                         MAPPING_SPECIFICATION.SRC_table_NAME, MAPPING_SPECIFICATION.TGT_table_NAME,
                         MAPPING_SPECIFICATION.SRC_COLUMN_NAME, MAPPING_SPECIFICATION.TGT_COLUMN_NAME
                         from APPENDED_MAP_SPEC_RCRDS_V mapping_specification
                         left join mapping_details on MAPPING_SPECIFICATION.MAP_ID = MAPPING_DETAILS.MAP_ID
                         left join project on project.proj_id = mapping_Details.project_id
                         where ((SELECT 1 FROM DUAL WHERE REGEXP_LIKE(src_col_length, ''^\d+(\.\d+)?$'', '''')) = 1 and (SELECT 1 FROM DUAL WHERE REGEXP_LIKE(tgt_col_length, ''^\d+(\.\d+)?$'', '''')) = 1 and (FN_ISINT(LTRIM(RTRIM(src_col_length)))  > FN_ISINT(LTRIM(RTRIM(tgt_col_length)))))
                         and length(tgt_col_length) > 0
                         and length(src_col_length) > 0';
   END IF;
END;
/
ALTER TABLE "SYSTEM_TABLE_COLUMNS_METADATA" MODIFY "TABLE_NAME" VARCHAR2(255)
/
CREATE OR REPLACE PROCEDURE CSM_AUTO_MAPPING(
          SRC_CODESET_ID   IN NUMBER,
          SRC_SYSTEM_ID    IN NUMBER,
          SRC_SYS_NAME     IN VARCHAR2,
          SRC_SYS_ENV_NAME IN VARCHAR2,
          TGT_CODESET_ID   IN NUMBER,
          TGT_SYSTEM_ID    IN NUMBER,
          TGT_SYS_NAME     IN VARCHAR2,
          TGT_SYS_ENV_NAME IN VARCHAR2,
          FOR_CSM_MAP_ID IN NUMBER)
      IS
      BEGIN
      MERGE INTO CSM_MAPPING_SPEC CSMMS USING
      (
      WITH CTE AS (SELECT CODE_ID AS SRC_CODE_ID, CODE_STND_VALUE AS SRC_CODE_VALUE
      FROM CSM_CODE_VALUE SRC_CSMCV, CSM_CODESET SRC_CSMC
      WHERE SRC_CSMCV.CODESET_ID = SRC_CSMC.CODESET_ID
      AND SRC_CSMCV.CODESET_ID = SRC_CODESET_ID
      AND SRC_CSMCV.SYSTEM_ID = SRC_SYSTEM_ID
      AND COALESCE(UPPER(SRC_CSMCV.SYSTEM_NAME), NULL, ' ') = COALESCE(UPPER(SRC_SYS_NAME), NULL, ' ')
      AND COALESCE(UPPER(SRC_CSMCV.SYSTEM_ENV_NAME), NULL, ' ') = COALESCE(UPPER(SRC_SYS_ENV_NAME), NULL, ' ')),
      CTEONE AS (SELECT CODE_ID AS TGT_CODE_ID,  CODE_STND_VALUE AS TGT_CODE_VALUE
      FROM CSM_CODE_VALUE TGT_CSMCV, CSM_CODESET TGT_CSMC
      WHERE TGT_CSMCV.CODESET_ID = TGT_CSMC.CODESET_ID
      AND TGT_CSMCV.CODESET_ID = TGT_CODESET_ID
      AND TGT_CSMCV.SYSTEM_ID = TGT_SYSTEM_ID
      AND COALESCE(UPPER(TGT_CSMCV.SYSTEM_NAME), NULL, ' ') = COALESCE(UPPER(TGT_SYS_NAME), NULL, ' ')
      AND COALESCE(UPPER(TGT_CSMCV.SYSTEM_ENV_NAME), NULL, ' ') = COALESCE(UPPER(TGT_SYS_ENV_NAME), NULL, ' '))
      SELECT * FROM CTE, CTEONE WHERE UPPER(CTEONE.TGT_CODE_VALUE) = UPPER(CTE.SRC_CODE_VALUE)
      ) T ON
      (CSMMS.CSM_MAP_ID = FOR_CSM_MAP_ID AND CSMMS.CSM_MAP_SOURCE_CODE_ID = T.SRC_CODE_ID)
      WHEN MATCHED THEN
        UPDATE
        SET CSMMS.CSM_MAP_TARGET_CODE_ID = T.TGT_CODE_ID;
END;
/

DECLARE
   COLUMNCHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO COLUMNCHECKERFLAG FROM ALL_TAB_COLUMNS WHERE  OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME = UPPER('RM_RELEASE') AND COLUMN_NAME=UPPER('RELEASE_DATE');
   IF COLUMNCHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'ALTER TABLE RM_RELEASE ADD RELEASE_DATE TIMESTAMP NULL';
   END IF;
END;
/
DECLARE
   COLUMNCHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO COLUMNCHECKERFLAG FROM ALL_TAB_COLUMNS WHERE  OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME = UPPER('RM_RELEASE') AND COLUMN_NAME=UPPER('CHANGE_CONTROL_NUMBER');
   IF COLUMNCHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'ALTER TABLE RM_RELEASE ADD CHANGE_CONTROL_NUMBER varchar2(255) NULL';
   END IF;
END;
/
DECLARE
   COLUMNCHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO COLUMNCHECKERFLAG FROM ALL_TAB_COLUMNS WHERE  OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME = UPPER('RM_MIGRATIONOBJECT') AND COLUMN_NAME=UPPER('MIGRATION_OBJECT_OWNER');
   IF COLUMNCHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'ALTER TABLE RM_MIGRATIONOBJECT ADD MIGRATION_OBJECT_OWNER varchar2(255) NULL';
   END IF;
END;
/
DECLARE
   COLUMNCHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO COLUMNCHECKERFLAG FROM ALL_TAB_COLUMNS WHERE  OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME = UPPER('SYS_CON_ENVIRONMENTS') AND COLUMN_NAME=UPPER('SYSTEM_NUMBER');
   IF COLUMNCHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'ALTER TABLE SYS_CON_ENVIRONMENTS ADD SYSTEM_NUMBER NUMBER NULL';
   END IF;
END;
/

DECLARE
   COLUMNCHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO COLUMNCHECKERFLAG FROM ALL_TAB_COLUMNS WHERE  OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME = UPPER('SYS_CON_ENVIRONMENTS') AND COLUMN_NAME=UPPER('DESTINATION');
   IF COLUMNCHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'ALTER TABLE SYS_CON_ENVIRONMENTS ADD DESTINATION varchar2(50) NULL';
   END IF;
END;
/

DECLARE
   COLUMNCHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO COLUMNCHECKERFLAG FROM ALL_TAB_COLUMNS WHERE  OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME = UPPER('SYS_CON_ENVIRONMENTS') AND COLUMN_NAME=UPPER('CLIENT');
   IF COLUMNCHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'ALTER TABLE SYS_CON_ENVIRONMENTS ADD CLIENT NUMBER NULL';
   END IF;
END;
/
DECLARE
   COLUMNCHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO COLUMNCHECKERFLAG FROM ALL_TAB_COLUMNS WHERE  OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME = UPPER('SYS_CON_ENVIRONMENTS') AND COLUMN_NAME=UPPER('DBMS_INSTANCE_SCHEMA') AND DATA_LENGTH=UPPER('50');
   IF COLUMNCHECKERFLAG = 1 THEN
      EXECUTE IMMEDIATE 'ALTER TABLE SYS_CON_ENVIRONMENTS  MODIFY DBMS_INSTANCE_SCHEMA VARCHAR2(4000)';
   END IF;
END;
/
DECLARE
   COLUMNCHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO COLUMNCHECKERFLAG FROM ALL_TAB_COLUMNS WHERE  OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME = UPPER('SYSTEM_TABLE_COLUMNS_METADATA') AND COLUMN_NAME=UPPER('COL_DB_DEFAULT_VALUE') AND DATA_LENGTH=UPPER('50');
   IF COLUMNCHECKERFLAG = 1 THEN
      EXECUTE IMMEDIATE 'ALTER TABLE SYSTEM_TABLE_COLUMNS_METADATA  MODIFY COL_DB_DEFAULT_VALUE VARCHAR2(100)';
   END IF;
END;
/
DECLARE
   COLUMNCHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO COLUMNCHECKERFLAG FROM (SELECT * FROM ALL_TAB_COLUMNS WHERE  OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME = UPPER('SYS_CON_ENVIRONMENTS') AND COLUMN_NAME=UPPER('SAP_DELIMITER') UNION ALL SELECT * FROM ALL_TAB_COLUMNS WHERE  OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME = UPPER('SYS_CON_ENVIRONMENTS') AND COLUMN_NAME=UPPER('FIELD_DELIMITER'));
   IF COLUMNCHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'ALTER TABLE SYS_CON_ENVIRONMENTS ADD SAP_DELIMITER VARCHAR2(1) NULL';
   END IF;
END;
/
DECLARE
   COLUMNCHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO COLUMNCHECKERFLAG FROM ALL_TAB_COLUMNS WHERE  OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME = UPPER('SYS_CON_ENVIRONMENTS') AND COLUMN_NAME=UPPER('SAP_MANUAL_TABLES');
   IF COLUMNCHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'ALTER TABLE SYS_CON_ENVIRONMENTS ADD SAP_MANUAL_TABLES varchar2(4000) NULL';
   END IF;
END;
/
DECLARE
   TABLECHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO TABLECHECKERFLAG FROM all_VIEWS WHERE OWNER = sys_context('userenv', 'current_schema') AND VIEW_NAME = UPPER('VIEW_REF_TABLE');
   IF TABLECHECKERFLAG = 1 THEN
      EXECUTE IMMEDIATE 'DROP VIEW VIEW_REF_TABLE';
      EXECUTE IMMEDIATE 'CREATE VIEW VIEW_REF_TABLE AS SELECT RDM_CATEGORY_NAME,
    RDM_REFERENCE_TABLE.RDM_REF_TABLE_ID,
    RDM_REF_TABLE_NAME,
    RDM_REF_TABLE_DESC,
    RDM_REF_TAB_OWNER,
    RDM_REF_TAB_VERSION,
    RDM_REF_TAB_VER_DESC,
    RDM_REF_TAB_VER_LABEL,
    RDM_REFERENCE_TABLE.CREATED_BY,
    RDM_REFERENCE_TABLE.CREATED_DATE,
    RDM_REFERENCE_TABLE.MODIFIED_BY,
    RDM_REFERENCE_TABLE.MODIFIED_DATE,
    USER_DEFINED_FIELD1,
    USER_DEFINED_FIELD2,
    USER_DEFINED_FIELD3,
    USER_DEFINED_FIELD4,
    USER_DEFINED_FIELD5,
    USER_DEFINED_FIELD6,
    USER_DEFINED_FIELD7,
    USER_DEFINED_FIELD8,
    USER_DEFINED_FIELD9,
    USER_DEFINED_FIELD10
  FROM RDM_REFERENCE_TABLE,
    RDM_CATEGORY,
    RDM_REF_TAB_USERDEFINED
  WHERE RDM_REFERENCE_TABLE.RDM_REF_TABLE_CAT_ID = RDM_CATEGORY.RDM_CATEGORY_ID
  AND RDM_REFERENCE_TABLE.RDM_REF_TABLE_ID       = RDM_REF_TAB_USERDEFINED.RDM_REF_TABLE_ID';
END IF;
END;
/
UPDATE USERS set USER_THEME='dhtmlx_skin_skyblue' where USER_THEME='dhtmlx_skin_air_force_blue';
/
UPDATE USERS set USER_THEME='dhtmlx_skin_skyblue' where USER_THEME='dhtmlx_skin_sky';
/
--VERSION 5.3 DDL START HERE
DECLARE
   TABLECHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO TABLECHECKERFLAG FROM ALL_TABLES WHERE OWNER = sys_context( 'userenv', 'current_schema' ) AND TABLE_NAME = UPPER('CAT_TABS');
   IF TABLECHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'CREATE TABLE CAT_TABS ( CAT_TAB_ID NUMBER NOT NULL, CAT_TAB_NAME varchar2(200) NOT NULL, CAT_TAB_DESCRIPTION varchar2(500) NULL, DISPLAY_ORDER Float  default 1 NOT NULL, TAB_VISIBILITY CHAR(1) default 1 NOT NULL  , CONSTRAINT PK_CATTABSID PRIMARY KEY(CAT_TAB_ID) )';
   END IF;
END;
/
DECLARE
   SEQUENCECHECKERFLAG INT;
BEGIN
    SELECT COUNT(*) INTO SEQUENCECHECKERFLAG FROM ALL_SEQUENCES WHERE SEQUENCE_OWNER = sys_context('userenv', 'current_schema') AND SEQUENCE_NAME = UPPER('CAT_TABS_SEQ');
   IF SEQUENCECHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'CREATE SEQUENCE   "CAT_TABS_SEQ"  MINVALUE 1 MAXVALUE 999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE';
   END IF;
END;
/
DECLARE
  TRIGGERCHECKERFLAG INT;
BEGIN
  SELECT COUNT(*)
  INTO TRIGGERCHECKERFLAG
  FROM all_triggers
  WHERE OWNER = sys_context('userenv', 'current_schema') AND trigger_name = UPPER('CAT_TABS_INSERT');
  IF TRIGGERCHECKERFLAG = 0 THEN
    EXECUTE IMMEDIATE 'CREATE OR REPLACE TRIGGER  "CAT_TABS_INSERT" BEFORE INSERT ON CAT_TABS FOR EACH ROW BEGIN SELECT CAT_TABS_SEQ.NEXTVAL INTO :new.CAT_TAB_ID FROM DUAL; END;';
    EXECUTE IMMEDIATE 'ALTER TRIGGER  "CAT_TABS_INSERT" ENABLE';
    EXECUTE IMMEDIATE 'ALTER TABLE CAT_TEMPLATES RENAME COLUMN CAT_TAB_ID TO TEMP_CAT_TAB_ID';
    EXECUTE IMMEDIATE 'ALTER TABLE CAT_TEMPLATES  ADD CAT_TAB_ID NUMBER';
    EXECUTE IMMEDIATE 'MERGE INTO CAT_TABS CTAB USING (SELECT DISTINCT CAT_TAB_ID,TEMP_CAT_TAB_ID FROM CAT_TEMPLATES ) H ON (CTAB.CAT_TAB_ID = H.CAT_TAB_ID) WHEN NOT MATCHED THEN  INSERT   (CAT_TAB_NAME  ) VALUES   (H.TEMP_CAT_TAB_ID )';
    EXECUTE IMMEDIATE 'MERGE INTO CAT_TEMPLATES M USING (SELECT DISTINCT CAT_TEMPLATES.TEMP_CAT_TAB_ID ,  CAT_TABS.CAT_TAB_ID CAT_TAB_ID_CAT_TABS,  CAT_TABS.CAT_TAB_NAME FROM CAT_TEMPLATES INNER JOIN CAT_TABS ON CAT_TEMPLATES.TEMP_CAT_TAB_ID =  CAT_TABS.CAT_TAB_NAME ) U ON ( M.TEMP_CAT_TAB_ID  = U.CAT_TAB_NAME ) WHEN MATCHED THEN   UPDATE SET M.CAT_TAB_ID = U.CAT_TAB_ID_CAT_TABS';
    EXECUTE IMMEDIATE 'MERGE INTO CAT_TABS M USING (SELECT DISTINCT CAT_TAB_ID,  CAT_TAB_NAME,   ROW_NUMBER() OVER( ORDER BY CASE DISPLAY_ORDER WHEN NULL THEN 0 WHEN 0 THEN 999999999 ELSE DISPLAY_ORDER END )AS  DISPLAY_ORDER        FROM   CAT_TABS ) U ON ( M.CAT_TAB_ID = U.CAT_TAB_ID      AND M.CAT_TAB_NAME = U.CAT_TAB_NAME ) WHEN MATCHED THEN   UPDATE SET M.DISPLAY_ORDER = U.DISPLAY_ORDER';
    EXECUTE IMMEDIATE 'ALTER TABLE CAT_TEMPLATES  DROP COLUMN TEMP_CAT_TAB_ID';
  END IF;
END;
/
DECLARE
   TABLECHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO TABLECHECKERFLAG FROM "APP_PREFERENCES" WHERE PREFERENCE_NAME ='TIME_TOTALFILES';
   IF TABLECHECKERFLAG = 0 THEN
    INSERT INTO APP_PREFERENCES( PREFERENCE_NAME, PREFERENCE_VALUE) VALUES('TIME_TOTALFILES','300:20');
    END IF;
END;
/
DECLARE
   COLUMNCHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO COLUMNCHECKERFLAG FROM ALL_TAB_COLUMNS WHERE  OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME = UPPER('CAT_TEMPLATE_OPTIONS') AND COLUMN_NAME=UPPER('CAT_OPTION_CONTROL_STYLE');
   IF COLUMNCHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'ALTER TABLE CAT_TEMPLATE_OPTIONS ADD CAT_OPTION_CONTROL_STYLE varchar2(1000) NULL';
   END IF;
END;
/
DECLARE
   COLUMNCHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO COLUMNCHECKERFLAG FROM ALL_TAB_COLUMNS WHERE  OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME = UPPER('CAT_TEMPLATE_OPTIONS') AND COLUMN_NAME=UPPER('CAT_OPTION_CONTROL_STYLE_JSON');
   IF COLUMNCHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'ALTER TABLE CAT_TEMPLATE_OPTIONS ADD CAT_OPTION_CONTROL_STYLE_JSON varchar2(1000) NULL';
   END IF;
END;
/
DECLARE
   COLUMNCHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO COLUMNCHECKERFLAG FROM ALL_TAB_COLUMNS WHERE  OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME = UPPER('CAT_TEMPLATE_OPTIONS') AND COLUMN_NAME=UPPER('CAT_OPTION_LABEL_STYLE');
   IF COLUMNCHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'ALTER TABLE CAT_TEMPLATE_OPTIONS ADD CAT_OPTION_LABEL_STYLE varchar2(1000) NULL';
   END IF;
END;
/
DECLARE
   COLUMNCHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO COLUMNCHECKERFLAG FROM ALL_TAB_COLUMNS WHERE  OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME = UPPER('CAT_TEMPLATE_OPTIONS') AND COLUMN_NAME=UPPER('CAT_OPTION_LABEL_STYLE_JSON');
   IF COLUMNCHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'ALTER TABLE CAT_TEMPLATE_OPTIONS ADD CAT_OPTION_LABEL_STYLE_JSON varchar2(1000) NULL';
   END IF;
END;
/
DECLARE
   COLUMNCHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO COLUMNCHECKERFLAG FROM ALL_TAB_COLUMNS WHERE  OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME = UPPER('CAT_TEMPLATE_OPTIONS') AND COLUMN_NAME=UPPER('CAT_OPTION_ENABLE');
   IF COLUMNCHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'ALTER TABLE CAT_TEMPLATE_OPTIONS ADD CAT_OPTION_ENABLE varchar2(50) NULL';
   END IF;
END;
/
DECLARE
   COLUMNCHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO COLUMNCHECKERFLAG FROM ALL_TAB_COLUMNS WHERE  OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME = UPPER('CAT_TEMPLATE_OPTIONS') AND COLUMN_NAME=UPPER('CAT_OPTION_VISIBLE');
   IF COLUMNCHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'ALTER TABLE CAT_TEMPLATE_OPTIONS ADD CAT_OPTION_VISIBLE varchar2(50) NULL';
   END IF;
END;
/
DECLARE
   COLUMNCHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO COLUMNCHECKERFLAG FROM ALL_TAB_COLUMNS WHERE  OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME = UPPER('CAT_TEMPLATE_OPTIONS') AND COLUMN_NAME=UPPER('CAT_OPTION_LIST');
   IF COLUMNCHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'ALTER TABLE CAT_TEMPLATE_OPTIONS ADD CAT_OPTION_LIST varchar2(4000) NULL';
   END IF;
END;
/

DECLARE
TABLECHECKERFLAG INT;
BEGIN
SELECT COUNT(*) INTO TABLECHECKERFLAG FROM ALL_TABLES WHERE OWNER = sys_context( 'userenv', 'current_schema' ) AND TABLE_NAME = UPPER('ADS_KEY_VALUE_OBJECTS');
IF TABLECHECKERFLAG = 0 THEN
EXECUTE IMMEDIATE 'CREATE TABLE "ADS_KEY_VALUE_OBJECTS"(
OBJECT_TYPE_ID INT NOT NULL,
OBJECT_TYPE VARCHAR2(500) NOT NULL,
OBJECT_TABLE VARCHAR2(500) NOT NULL,
OBJECT_TABLE_COLUMN VARCHAR2(500) NOT NULL,
OBJECT_PARENT_TYPE VARCHAR2(500) NULL,
OBJECT_PARENT_COLUMN_ID VARCHAR2(500) NULL,
CONSTRAINT ADS_KEY_VALUE_OBJECTS_PK PRIMARY KEY (OBJECT_TYPE_ID))';
END IF;
END;
/
DECLARE
   SEQUENCECHECKERFLAG INT;
BEGIN
    SELECT COUNT(*) INTO SEQUENCECHECKERFLAG FROM ALL_SEQUENCES WHERE SEQUENCE_OWNER = sys_context('userenv', 'current_schema') AND SEQUENCE_NAME = UPPER('OBJECT_SEQ');
   IF SEQUENCECHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'CREATE SEQUENCE "OBJECT_SEQ"  MINVALUE 1 MAXVALUE 999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE';
   END IF;
END;
/
DECLARE
  TRIGGERCHECKERFLAG INT;
BEGIN
  SELECT COUNT(*)  INTO TRIGGERCHECKERFLAG FROM all_triggers WHERE OWNER = sys_context('userenv', 'current_schema') AND trigger_name = UPPER('OBJECT_INSERT');
  IF TRIGGERCHECKERFLAG = 0 THEN
    EXECUTE IMMEDIATE 'CREATE OR REPLACE TRIGGER  "OBJECT_INSERT" BEFORE INSERT ON ADS_KEY_VALUE_OBJECTS FOR EACH ROW BEGIN SELECT OBJECT_SEQ.NEXTVAL INTO :new.OBJECT_TYPE_ID FROM DUAL; END;';
    EXECUTE IMMEDIATE 'ALTER TRIGGER  "OBJECT_INSERT" ENABLE';
  END IF;
END;
/
DECLARE
TABLECHECKERFLAG INT;
BEGIN
SELECT COUNT(*) INTO TABLECHECKERFLAG FROM ADS_KEY_VALUE_OBJECTS;
IF TABLECHECKERFLAG = 0 THEN
INSERT ALL
INTO ADS_KEY_VALUE_OBJECTS (OBJECT_TYPE,OBJECT_TABLE,OBJECT_TABLE_COLUMN,OBJECT_PARENT_TYPE,OBJECT_PARENT_COLUMN_ID) VALUES
(
'SM_SYSTEM','SYSTEM_DEFINITION_DETAILS','SYSTEM_ID','',''
)
INTO ADS_KEY_VALUE_OBJECTS (OBJECT_TYPE,OBJECT_TABLE,OBJECT_TABLE_COLUMN,OBJECT_PARENT_TYPE,OBJECT_PARENT_COLUMN_ID) VALUES
(
 'SM_ENVIRONMENT','SYS_CON_ENVIRONMENTS','SCE_ID','SM_SYSTEM','SYSTEM_ID'
)
INTO ADS_KEY_VALUE_OBJECTS (OBJECT_TYPE,OBJECT_TABLE,OBJECT_TABLE_COLUMN,OBJECT_PARENT_TYPE,OBJECT_PARENT_COLUMN_ID) VALUES
(
 'SM_TABLE','SYSTEM_TABLE_METADATA','STM_ID','SM_ENVIRONMENT','SCE_ID'
)
INTO ADS_KEY_VALUE_OBJECTS (OBJECT_TYPE,OBJECT_TABLE,OBJECT_TABLE_COLUMN,OBJECT_PARENT_TYPE,OBJECT_PARENT_COLUMN_ID) VALUES
(
 'SM_COLUMN','SYSTEM_TABLE_COLUMNS_METADATA','STCM_ID','SM_TABLE','STM_ID'
)
INTO ADS_KEY_VALUE_OBJECTS (OBJECT_TYPE,OBJECT_TABLE,OBJECT_TABLE_COLUMN,OBJECT_PARENT_TYPE,OBJECT_PARENT_COLUMN_ID) VALUES
(
 'SM_COMPONENT','SYSTEM_TABLE_METADATA','STM_ID','SM_ENVIRONMENT','SCE_ID'
)
INTO ADS_KEY_VALUE_OBJECTS (OBJECT_TYPE,OBJECT_TABLE,OBJECT_TABLE_COLUMN,OBJECT_PARENT_TYPE,OBJECT_PARENT_COLUMN_ID) VALUES
(
 'MM_PROJECT','PROJECT','PROJ_ID','',''
)
INTO ADS_KEY_VALUE_OBJECTS (OBJECT_TYPE,OBJECT_TABLE,OBJECT_TABLE_COLUMN,OBJECT_PARENT_TYPE,OBJECT_PARENT_COLUMN_ID) VALUES
(
 'MM_SUBJECT','SUBJECT_DETAILS','SUBJECT_ID','MM_PROJECT','PROJ_ID'
)
INTO ADS_KEY_VALUE_OBJECTS (OBJECT_TYPE,OBJECT_TABLE,OBJECT_TABLE_COLUMN,OBJECT_PARENT_TYPE,OBJECT_PARENT_COLUMN_ID) VALUES
(
 'MM_MAPPING','MAPPING_DETAILS','MAP_ID','MM_SUBJECT',''
)
INTO ADS_KEY_VALUE_OBJECTS (OBJECT_TYPE,OBJECT_TABLE,OBJECT_TABLE_COLUMN,OBJECT_PARENT_TYPE,OBJECT_PARENT_COLUMN_ID) VALUES
(
 'MM_MAPPING_ROW','MAPPING_SPECIFICATION','MAP_SEQ_ID','MM_MAPPING',''
)
SELECT * FROM DUAL;
END IF;
END;
/
DECLARE
TABLECHECKERFLAG INT;
BEGIN
SELECT COUNT(*) INTO TABLECHECKERFLAG FROM ALL_TABLES WHERE OWNER = sys_context( 'userenv', 'current_schema' ) AND TABLE_NAME = UPPER('AMM_DATATYPES');
IF TABLECHECKERFLAG = 0 THEN
EXECUTE IMMEDIATE 'CREATE TABLE "AMM_DATATYPES"(ADT_ID INT,DATATYPE VARCHAR2(200) NOT NULL ,LENGTH INT DEFAULT 0 NOT NULL ,PRECISION INT DEFAULT 0 NOT NULL,SCALE INT DEFAULT 0 NOT NULL ,CONSTRAINT AMM_DATATYPES_PK PRIMARY KEY(ADT_ID))';
END IF;
END;
/
DECLARE
   SEQUENCECHECKERFLAG INT;
BEGIN
    SELECT COUNT(*) INTO SEQUENCECHECKERFLAG FROM ALL_SEQUENCES WHERE SEQUENCE_OWNER = sys_context('userenv', 'current_schema') AND SEQUENCE_NAME = UPPER('AMM_DATATYPES_SEQ');
   IF SEQUENCECHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'CREATE SEQUENCE "AMM_DATATYPES_SEQ"  MINVALUE 1 MAXVALUE 999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE';
   END IF;
END;
/
DECLARE
  TRIGGERCHECKERFLAG INT;
BEGIN
  SELECT COUNT(*)  INTO TRIGGERCHECKERFLAG FROM all_triggers WHERE OWNER = sys_context('userenv', 'current_schema') AND trigger_name = UPPER('AMM_DATATYPES_SEQ_INSERT');
  IF TRIGGERCHECKERFLAG = 0 THEN
    EXECUTE IMMEDIATE 'CREATE OR REPLACE TRIGGER  "AMM_DATATYPES_SEQ_INSERT" BEFORE INSERT ON AMM_DATATYPES FOR EACH ROW BEGIN SELECT AMM_DATATYPES_SEQ.NEXTVAL INTO :new.ADT_ID FROM DUAL; END;';
    EXECUTE IMMEDIATE 'ALTER TRIGGER  "AMM_DATATYPES_SEQ_INSERT" ENABLE';
  END IF;
END;
/
DECLARE
COLUMNCHECKERFLAG INT;
BEGIN
SELECT COUNT(*) INTO COLUMNCHECKERFLAG FROM AMM_DATATYPES WHERE DATATYPE = 'string';
IF COLUMNCHECKERFLAG = 0 THEN
INSERT INTO AMM_DATATYPES (DATATYPE,PRECISION,SCALE)
 (
  SELECT 'string',0,0
  FROM DUAL UNION
  SELECT 'int',0,0
  FROM DUAL UNION
  SELECT 'boolean',0,0
  FROM DUAL UNION
  SELECT 'datetime',0,0
  FROM DUAL UNION
  SELECT 'timestamp',0,0
  FROM DUAL UNION
  SELECT 'varchar',0,0
  FROM DUAL UNION
  SELECT 'nvarchar',0,0
  FROM DUAL UNION
  SELECT 'text',0,0
  FROM DUAL UNION
  SELECT 'float',0,0
  FROM DUAL UNION
  SELECT 'double',0,0
  FROM DUAL UNION
  SELECT 'decimal',0,0
  FROM DUAL UNION
  SELECT 'money',0,0
  FROM DUAL UNION
  SELECT 'currency',0,0
  FROM DUAL UNION
  SELECT 'smallint',0,0
  FROM DUAL
);
END IF;
END;
/
DECLARE
TABLECHECKERFLAG INT;
BEGIN
SELECT COUNT(*) INTO TABLECHECKERFLAG FROM ALL_TABLES WHERE OWNER = sys_context( 'userenv', 'current_schema' ) AND TABLE_NAME = UPPER('AMM_DATATYPE_CONVERSION');
IF TABLECHECKERFLAG = 0 THEN
EXECUTE IMMEDIATE 'CREATE TABLE "AMM_DATATYPE_CONVERSION"(ADC_ID INT,ETL_TOOL VARCHAR2(500),AMM_DATATYPE VARCHAR2(200),ETL_DATATYPE VARCHAR2(200),ETL_DT_LENGTH INT,ETL_DT_PRECISION INT,ETL_DT_SCALE INT,ETL_DT_CODE_PAGE VARCHAR2(200),ETL_EXP_DATATYPE VARCHAR2(200), ETL_EXP_DT_LENGTH INT,ETL_EXP_DT_PRECISION INT,ETL_EXP_DT_SCALE INT,ETL_DT_CAST VARCHAR2(200),ETL_EXP_DT_CODE_PAGE VARCHAR2(200),
CONSTRAINT AMM_DATATYPE_CONVERSION_PK PRIMARY KEY
  (
    ADC_ID
  )

)';
END IF;
END;
/
DECLARE
   SEQUENCECHECKERFLAG INT;
BEGIN
    SELECT COUNT(*) INTO SEQUENCECHECKERFLAG FROM ALL_SEQUENCES WHERE SEQUENCE_OWNER = sys_context('userenv', 'current_schema') AND SEQUENCE_NAME = UPPER('AMM_DT_CONV_SEQ');
   IF SEQUENCECHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'CREATE SEQUENCE "AMM_DT_CONV_SEQ"  MINVALUE 1 MAXVALUE 999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE';
   END IF;
END;
/
DECLARE
  TRIGGERCHECKERFLAG INT;
BEGIN
  SELECT COUNT(*)  INTO TRIGGERCHECKERFLAG FROM all_triggers WHERE OWNER = sys_context('userenv', 'current_schema') AND trigger_name = UPPER('AMM_DT_CONV_SEQ_INSERT');
  IF TRIGGERCHECKERFLAG = 0 THEN
    EXECUTE IMMEDIATE 'CREATE OR REPLACE TRIGGER  "AMM_DT_CONV_SEQ_INSERT" BEFORE INSERT ON AMM_DATATYPE_CONVERSION FOR EACH ROW BEGIN SELECT AMM_DT_CONV_SEQ.NEXTVAL INTO :new.ADC_ID FROM DUAL; END;';
    EXECUTE IMMEDIATE 'ALTER TRIGGER  "AMM_DT_CONV_SEQ_INSERT" ENABLE';
  END IF;
END;
/
DECLARE
COLUMNCHECKERFLAG INT;
BEGIN
SELECT COUNT(*) INTO COLUMNCHECKERFLAG FROM AMM_DATATYPE_CONVERSION WHERE ETL_TOOL = 'Informatica';
IF COLUMNCHECKERFLAG = 0 THEN
INSERT INTO AMM_DATATYPE_CONVERSION (ETL_TOOL,AMM_DATATYPE,ETL_DATATYPE,ETL_DT_PRECISION,ETL_DT_SCALE,ETL_DT_CODE_PAGE,ETL_EXP_DATATYPE,ETL_EXP_DT_PRECISION,ETL_EXP_DT_SCALE,ETL_DT_CAST,ETL_EXP_DT_CODE_PAGE)
(
SELECT 'Informatica','datetime','datetime',23,3,'','date/time',29,9,'',''
FROM DUAL UNION
SELECT 'SSIS','smallint','i2',0,0,'1252','System.Int16',0,0,'DT_I1',''
FROM DUAL
);
END IF;
END;
/
DECLARE
TABLECHECKERFLAG INT;
BEGIN
SELECT COUNT(*) INTO TABLECHECKERFLAG FROM ALL_TABLES WHERE OWNER = sys_context( 'userenv', 'current_schema' ) AND TABLE_NAME = UPPER('ADS_KEY_VALUE');
IF TABLECHECKERFLAG = 0 THEN
EXECUTE IMMEDIATE 'CREATE TABLE ADS_KEY_VALUE(KV_ID INT NOT NULL, KEY_NAME VARCHAR2(4000) NOT NULL, KEY_VALUE VARCHAR2(4000), OBJECT_TYPE_ID INT NOT NULL, OBJECT_ID VARCHAR2(200) NOT NULL, DATATYPE_ID INT NOT NULL, CONSTRAINT ADS_KEY_VALUE_PK PRIMARY KEY(KV_ID))';
END IF;
END;
/
DECLARE
   SEQUENCECHECKERFLAG INT;
BEGIN
    SELECT COUNT(*) INTO SEQUENCECHECKERFLAG FROM ALL_SEQUENCES WHERE SEQUENCE_OWNER = sys_context('userenv', 'current_schema') AND SEQUENCE_NAME = UPPER('KEYVALUE_SEQ');
   IF SEQUENCECHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'CREATE SEQUENCE   "KEYVALUE_SEQ"  MINVALUE 1 MAXVALUE 999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE';
   END IF;
END;
/
DECLARE
  TRIGGERCHECKERFLAG INT;
BEGIN
  SELECT COUNT(*)
  INTO TRIGGERCHECKERFLAG
  FROM all_triggers
  WHERE OWNER = sys_context('userenv', 'current_schema') AND trigger_name = UPPER('KEYVALUE_INSERT');
  IF TRIGGERCHECKERFLAG = 0 THEN
    EXECUTE IMMEDIATE 'CREATE OR REPLACE TRIGGER  "KEYVALUE_INSERT" BEFORE INSERT ON ADS_KEY_VALUE FOR EACH ROW BEGIN SELECT KEYVALUE_SEQ.NEXTVAL INTO :new.KV_ID FROM DUAL; END;';
    EXECUTE IMMEDIATE 'ALTER TRIGGER  "KEYVALUE_INSERT" ENABLE';
  END IF;
END;
/
DECLARE
TABLECHECKERFLAG INT;
COLUMNCHECKERFLAG INT;
BEGIN
SELECT COUNT(*) INTO COLUMNCHECKERFLAG FROM ADS_MM_VERSION WHERE VALUE <= '5.0';
IF COLUMNCHECKERFLAG = 1 THEN
 SELECT COUNT(*) INTO TABLECHECKERFLAG FROM ALL_CONS_COLUMNS WHERE OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME = UPPER('SYSTEM_DOCUMENTS') AND CONSTRAINT_NAME = UPPER('R_15');
  IF TABLECHECKERFLAG > 0 THEN
      EXECUTE IMMEDIATE 'ALTER TABLE SYSTEM_DOCUMENTS DROP CONSTRAINT R_15';
   END IF;
   EXECUTE IMMEDIATE 'ALTER TABLE SYSTEM_DOCUMENTS RENAME CONSTRAINT XPKSYSTEM_DOCUMENTS TO TEMP_XPKSYS_DOCS';
   EXECUTE IMMEDIATE 'ALTER TABLE SYSTEM_DOCUMENTS RENAME TO TEMP_SYSTEM_DOCUMENTS';
   EXECUTE IMMEDIATE 'CREATE TABLE "SYSTEM_DOCUMENTS"(
SYS_DOC_NAME VARCHAR2(255) NULL,
SYS_DOC_TYPE VARCHAR2(20) NULL,
SYS_DOC_INTEDED_USE_DESCR VARCHAR2(4000) NULL,
PROJ_DOC_OWNER VARCHAR2(50) NULL,
SYSTEM_DOC_ID INT NOT NULL,
SYSTEM_ID int NOT NULL,
CREATED_DATE_TIME  TIMESTAMP(6) NOT NULL,
LAST_MODIFIED_BY VARCHAR2(20) NULL,
LAST_MODIFIED_DATE_TIME  TIMESTAMP(6) NULL,
CREATED_BY VARCHAR2(20) NOT NULL,
PROJECT_DOC_OBJECT VARCHAR2(4000) NOT NULL,
APPROVAL_REQD_FLAG char(1) NULL,
APPROVED_BY VARCHAR2(20) NULL,
APROVAL_DATETIME TIMESTAMP(6) NULL,
DOCUMENT_STATUS VARCHAR2(20) NULL
)';
END IF;
END;
/
DECLARE
COLUMNCHECKERFLAG INT;
BEGIN
SELECT COUNT(*) INTO COLUMNCHECKERFLAG FROM ADS_MM_VERSION WHERE VALUE <= '5.0';
IF COLUMNCHECKERFLAG = 1 THEN
EXECUTE IMMEDIATE('INSERT INTO SYSTEM_DOCUMENTS (
SYS_DOC_NAME,
SYS_DOC_TYPE,
SYS_DOC_INTEDED_USE_DESCR,
PROJ_DOC_OWNER,
SYSTEM_DOC_ID,
SYSTEM_ID,
CREATED_DATE_TIME,
LAST_MODIFIED_BY,
LAST_MODIFIED_DATE_TIME,
CREATED_BY,
PROJECT_DOC_OBJECT,
APPROVAL_REQD_FLAG,
APPROVED_BY,
APROVAL_DATETIME,
DOCUMENT_STATUS)
SELECT SYS_DOC_NAME,
SYS_DOC_TYPE,
SYS_DOC_INTEDED_USE_DESCR,
PROJ_DOC_OWNER,
SYSTEM_DOC_ID,
SYSTEM_ID,
CREATED_DATE_TIME,
LAST_MODIFIED_BY,
LAST_MODIFIED_DATE_TIME,
CREATED_BY,
PROJECT_DOC_OBJECT,
APPROVAL_REQD_FLAG,
APPROVED_BY,
APROVAL_DATETIME,
DOCUMENT_STATUS FROM TEMP_SYSTEM_DOCUMENTS');
EXECUTE IMMEDIATE ('DROP TABLE TEMP_SYSTEM_DOCUMENTS');
END IF;
END;
/
DECLARE
   SEQUENCECHECKERFLAG INT;
   STARTWITHNO NUMBER;
BEGIN
    SELECT COUNT(*) INTO SEQUENCECHECKERFLAG FROM ALL_SEQUENCES WHERE SEQUENCE_OWNER = sys_context('userenv', 'current_schema') AND SEQUENCE_NAME = UPPER('SYS_DOC_SEQ');
	SELECT NVL(MAX(SYSTEM_DOC_ID),0)+1 INTO STARTWITHNO FROM SYSTEM_DOCUMENTS;
   IF SEQUENCECHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'CREATE SEQUENCE "SYS_DOC_SEQ"  MINVALUE 1 MAXVALUE 999999999999999999999999999 INCREMENT BY 1 START WITH '||STARTWITHNO||' CACHE 20 NOORDER  NOCYCLE';
   END IF;
END;
/
DECLARE
  TRIGGERCHECKERFLAG INT;
BEGIN
  SELECT COUNT(*)  INTO TRIGGERCHECKERFLAG FROM all_triggers WHERE OWNER = sys_context('userenv', 'current_schema') AND trigger_name = UPPER('SYS_DOC_INS');
  IF TRIGGERCHECKERFLAG = 0 THEN
    EXECUTE IMMEDIATE 'CREATE OR REPLACE TRIGGER  "SYS_DOC_INS" BEFORE INSERT ON SYSTEM_DOCUMENTS FOR EACH ROW BEGIN SELECT SYS_DOC_SEQ.NEXTVAL INTO :new.SYSTEM_DOC_ID FROM DUAL; END;';
    EXECUTE IMMEDIATE 'ALTER TRIGGER  "SYS_DOC_INS" ENABLE';
  END IF;
END;
/
DECLARE
TABLECHECKERFLAG INT;
COLUMNCHECKERFLAG INT;
BEGIN
SELECT COUNT(*) INTO COLUMNCHECKERFLAG FROM ADS_MM_VERSION WHERE VALUE <= '5.0';
IF COLUMNCHECKERFLAG = 1 THEN
SELECT COUNT(*) INTO TABLECHECKERFLAG FROM ALL_CONS_COLUMNS WHERE OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME = UPPER('SYSTEM_TABLE_COLUMNS_METADATA') AND CONSTRAINT_NAME = UPPER('R_14');
IF TABLECHECKERFLAG > 0 THEN
      EXECUTE IMMEDIATE 'ALTER TABLE SYSTEM_TABLE_COLUMNS_METADATA DROP CONSTRAINT "R_14"';
   END IF;
   EXECUTE IMMEDIATE 'ALTER TABLE SYSTEM_TABLE_COLUMNS_METADATA RENAME CONSTRAINT XPKSYS_TAB_COL_METADATA TO TEMP_XPKSYS_TAB_COL_METADATA';
   EXECUTE IMMEDIATE 'ALTER TABLE SYSTEM_TABLE_COLUMNS_METADATA RENAME TO TEMP_SYS_TABLE_COL_MD';
   EXECUTE IMMEDIATE 'CREATE TABLE "SYSTEM_TABLE_COLUMNS_METADATA"(
TABLE_NAME VARCHAR2(255) NOT NULL,
COLUMN_NAME VARCHAR2(255) NOT NULL,
COL_DATATYPE VARCHAR2(50) NULL,
COL_LENGTH VARCHAR2(20) NULL,
COL_PRECISION VARCHAR2(20) NULL,
COL_DB_DEFAULT_VALUE VARCHAR2(100) NULL,
COL_ETL_DEFAULT_VALUE VARCHAR2(50) NULL,
COL_IDENTITY_FLAG VARCHAR2(1) NULL,
SYSTEM_ID int NOT NULL,
SYSTEM_ENV_NAME VARCHAR2(50) NOT NULL,
COL_DEF VARCHAR2(4000) NULL,
CREATED_DATETIME TIMESTAMP(6)  NOT NULL,
LAST_MODIFIED_BY VARCHAR2(20) NULL,
LAST_MODIFIED_DATE_TIME TIMESTAMP(6) NULL ,
CREATED_BY VARCHAR2(20) NOT NULL,
COL_NULLABLE_FLAG VARCHAR2(1) NULL,
MIN_VALUE VARCHAR2(200) NULL,
MAX_VALUE VARCHAR2(200) NULL,
PERCENT_NULL_VALUE VARCHAR2(20) NULL,
COL_SCALE VARCHAR2(50) NULL,
PRIMARY_KEY_FLAG VARCHAR2(1) NULL,
NATURAL_KEY_FLAG VARCHAR2(1) NULL,
FOREIGN_KEY_FLAG VARCHAR2(1) NULL,
FK_TABLE_NAME VARCHAR2(50) NULL,
FK_COLUMN_NAME VARCHAR2(255) NULL,
COL_DATA_DOMAIN VARCHAR2(50) NULL,
LOGICAL_COLUMN_NAME VARCHAR2(255) NULL,
SDI_FLAG VARCHAR2(1) NULL,
SDI_DESCRIPTION VARCHAR2(4000) NULL,
VALID char(1) NULL,
INSERT_ORDER int NULL,
COLUMN_COMMENTS VARCHAR2(4000) NULL,
USER_DEFINATION1 VARCHAR2(4000) NULL,
USER_DEFINATION2 VARCHAR2(4000) NULL,
USER_DEFINATION3 VARCHAR2(4000) NULL,
USER_DEFINATION4 VARCHAR2(4000) NULL,
USER_DEFINATION5 VARCHAR2(4000) NULL,
COLUMN_REF_ID VARCHAR2(255) NULL,
TYPE VARCHAR2(4000) NULL,
XPATH VARCHAR2(4000) NULL,
USED_IN_GAP_ANALYSIS char(1) DEFAULT ''Y'' NOT NULL,
USER_DEFINATION6 VARCHAR2(4000) NULL,
USER_DEFINATION7 VARCHAR2(4000) NULL,
USER_DEFINATION8 VARCHAR2(4000) NULL,
USER_DEFINATION9 VARCHAR2(4000) NULL,
USER_DEFINATION10 VARCHAR2(4000) NULL,
FILE_STARTING_POSITION VARCHAR2(255) NULL,
COLUMN_CLASS VARCHAR2(255) NULL,
BUSINESS_KEY_FLAG char(1) NULL,
COLUMN_ALIAS VARCHAR2(255) NULL,
STATUS VARCHAR(50) DEFAULT ''Active'' NOT NULL,
STCM_ID INT NOT NULL)';
END IF;
END;
/
DECLARE
 SEQUENCECHECKERFLAG INT;
BEGIN
    SELECT COUNT(*) INTO SEQUENCECHECKERFLAG FROM ALL_SEQUENCES WHERE SEQUENCE_OWNER = sys_context('userenv', 'current_schema') AND SEQUENCE_NAME = UPPER('SYS_TAB_COL_MD_SEQ');
   IF SEQUENCECHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'CREATE SEQUENCE "SYS_TAB_COL_MD_SEQ"  MINVALUE 1 MAXVALUE 999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE';
   END IF;
END;
/
DECLARE
  TRIGGERCHECKERFLAG INT;
BEGIN
  SELECT COUNT(*)  INTO TRIGGERCHECKERFLAG FROM all_triggers WHERE OWNER = sys_context('userenv', 'current_schema') AND trigger_name = UPPER('SYS_TAB_COL_MD_INS');
  IF TRIGGERCHECKERFLAG = 0 THEN
    EXECUTE IMMEDIATE 'CREATE OR REPLACE TRIGGER  "SYS_TAB_COL_MD_INS" BEFORE INSERT ON SYSTEM_TABLE_COLUMNS_METADATA FOR EACH ROW BEGIN SELECT SYS_TAB_COL_MD_SEQ.NEXTVAL INTO :new.STCM_ID FROM DUAL; END;';
    EXECUTE IMMEDIATE 'ALTER TRIGGER  "SYS_TAB_COL_MD_INS" ENABLE';
  END IF;
END;
/
DECLARE
COLUMNCHECKERFLAG INT;
BEGIN
SELECT COUNT(*) INTO COLUMNCHECKERFLAG FROM ADS_MM_VERSION WHERE VALUE <= '5.0';
IF COLUMNCHECKERFLAG = 1 THEN
EXECUTE IMMEDIATE('INSERT INTO SYSTEM_TABLE_COLUMNS_METADATA (
TABLE_NAME,
COLUMN_NAME,
COL_DATATYPE,
COL_LENGTH,
COL_PRECISION,
COL_DB_DEFAULT_VALUE,
COL_ETL_DEFAULT_VALUE,
COL_IDENTITY_FLAG,
SYSTEM_ID,
SYSTEM_ENV_NAME,
COL_DEF,
CREATED_DATETIME,
LAST_MODIFIED_BY,
LAST_MODIFIED_DATE_TIME,
CREATED_BY,
COL_NULLABLE_FLAG,
MIN_VALUE,
MAX_VALUE,
PERCENT_NULL_VALUE,
COL_SCALE,
PRIMARY_KEY_FLAG,
NATURAL_KEY_FLAG,
FOREIGN_KEY_FLAG,
FK_TABLE_NAME,
FK_COLUMN_NAME,
COL_DATA_DOMAIN,
LOGICAL_COLUMN_NAME,
SDI_FLAG,
SDI_DESCRIPTION,
VALID,
INSERT_ORDER,
COLUMN_COMMENTS,
USER_DEFINATION1,
USER_DEFINATION2,
USER_DEFINATION3,
USER_DEFINATION4,
USER_DEFINATION5,
COLUMN_REF_ID,
TYPE,
XPATH,
USED_IN_GAP_ANALYSIS,
USER_DEFINATION6,
USER_DEFINATION7,
USER_DEFINATION8,
USER_DEFINATION9,
USER_DEFINATION10,
FILE_STARTING_POSITION,
COLUMN_CLASS,
BUSINESS_KEY_FLAG,
COLUMN_ALIAS
)
SELECT
TABLE_NAME,
COLUMN_NAME,
COL_DATATYPE,
COL_LENGTH,
COL_PRECISION,
COL_DB_DEFAULT_VALUE,
COL_ETL_DEFAULT_VALUE,
COL_IDENTITY_FLAG,
SYSTEM_ID,
SYSTEM_ENV_NAME,
COL_DEF,
CREATED_DATETIME,
LAST_MODIFIED_BY,
LAST_MODIFIED_DATE_TIME,
CREATED_BY,
COL_NULLABLE_FLAG,
MIN_VALUE,
MAX_VALUE,
PERCENT_NULL_VALUE,
COL_SCALE,
PRIMARY_KEY_FLAG,
NATURAL_KEY_FLAG,
FOREIGN_KEY_FLAG,
FK_TABLE_NAME,
FK_COLUMN_NAME,
COL_DATA_DOMAIN,
LOGICAL_COLUMN_NAME,
SDI_FLAG,
SDI_DESCRIPTION,
VALID,
INSERT_ORDER,
COLUMN_COMMENTS,
USER_DEFINATION1,
USER_DEFINATION2,
USER_DEFINATION3,
USER_DEFINATION4,
USER_DEFINATION5,
COLUMN_REF_ID,
TYPE,
XPATH,
USED_IN_GAP_ANALYSIS,
USER_DEFINATION6,
USER_DEFINATION7,
USER_DEFINATION8,
USER_DEFINATION9,
USER_DEFINATION10,
FILE_STARTING_POSITION,
COLUMN_CLASS,
BUSINESS_KEY_FLAG,
COLUMN_ALIAS
FROM TEMP_SYS_TABLE_COL_MD');
EXECUTE IMMEDIATE('DROP TABLE TEMP_SYS_TABLE_COL_MD');
END IF;
END;
/
DECLARE
COLUMNCHECKERFLAG INT;
TABLECHECKERFLAG INT;
BEGIN
SELECT COUNT(*) INTO COLUMNCHECKERFLAG FROM ADS_MM_VERSION WHERE VALUE <= '5.0';
IF COLUMNCHECKERFLAG = 1 THEN
SELECT COUNT(*) INTO TABLECHECKERFLAG FROM ALL_CONS_COLUMNS WHERE OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME = UPPER('SYSTEM_TABLE_METADATA') AND CONSTRAINT_NAME = UPPER('R_13');
IF TABLECHECKERFLAG > 0 THEN
      EXECUTE IMMEDIATE 'ALTER TABLE SYSTEM_TABLE_METADATA DROP CONSTRAINT "R_13"';
   END IF;
   EXECUTE IMMEDIATE 'ALTER TABLE SYSTEM_TABLE_METADATA RENAME CONSTRAINT XPKSYSTEM_TABLE_METADATA TO TEMP_XPKSYS_TABLE_MD';
   EXECUTE IMMEDIATE 'ALTER TABLE SYSTEM_TABLE_METADATA RENAME TO TEMP_SYSTEM_TABLE_METADATA';
  EXECUTE IMMEDIATE ('CREATE TABLE SYSTEM_TABLE_METADATA(
SYSTEM_ID int NOT NULL,
TABLE_NAME VARCHAR2(255) NOT NULL,
SYSTEM_ENV_NAME VARCHAR2(50) NOT NULL,
TABLE_DEF VARCHAR2(4000) NULL,
CREATED_DATETIME TIMESTAMP(6) NOT NULL,
LAST_MODIFIED_BY VARCHAR2(20) NULL,
LAST_MODIFIED_DATE_TIME TIMESTAMP(6) NULL,
CREATED_BY VARCHAR2(20) NOT NULL,
NUMBER_ROWS INT NULL,
TYPE VARCHAR2(20) NULL,
LOGICAL_TABLE_NAME VARCHAR2(255) NULL,
VALID CHAR(1) NULL,
ACTUAL_TABLE_NAME VARCHAR2(100) NULL,
TABLE_REF_ID VARCHAR2(255) NULL,
USER_DEFINED1 VARCHAR2(4000) NULL,
USER_DEFINED2 VARCHAR2(4000) NULL,
USER_DEFINED3 VARCHAR2(4000) NULL,
USER_DEFINED4 VARCHAR2(4000) NULL,
USER_DEFINED5 VARCHAR2(4000) NULL,
USED_IN_GAP_ANALYSIS char(1) DEFAULT ''Y'' NOT NULL,
TABLE_COMMENTS VARCHAR2(4000) NULL,
USER_DEFINED6 VARCHAR2(4000) NULL,
USER_DEFINED7 VARCHAR2(4000) NULL,
USER_DEFINED8 VARCHAR2(4000) NULL,
USER_DEFINED9 VARCHAR2(4000) NULL,
USER_DEFINED10 VARCHAR2(4000) NULL,
FILE_TYPE VARCHAR2(255) NULL,
TABLE_CLASS VARCHAR2(255) NULL,
TABLE_ALIAS VARCHAR2(255) NULL,
STATUS VARCHAR(50) DEFAULT ''Active'' NOT NULL,
STM_ID INT NOT NULL)');
END IF;
END;
/
DECLARE
 SEQUENCECHECKERFLAG INT;
BEGIN
    SELECT COUNT(*) INTO SEQUENCECHECKERFLAG FROM ALL_SEQUENCES WHERE SEQUENCE_OWNER = sys_context('userenv', 'current_schema') AND SEQUENCE_NAME = UPPER('SYS_TAB_MD_SEQ');
   IF SEQUENCECHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'CREATE SEQUENCE "SYS_TAB_MD_SEQ"  MINVALUE 1 MAXVALUE 999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE';
   END IF;
END;
/
DECLARE
  TRIGGERCHECKERFLAG INT;
BEGIN
  SELECT COUNT(*)  INTO TRIGGERCHECKERFLAG FROM all_triggers WHERE OWNER = sys_context('userenv', 'current_schema') AND trigger_name = UPPER('SYS_TAB_MD_INS');
  IF TRIGGERCHECKERFLAG = 0 THEN
    EXECUTE IMMEDIATE 'CREATE OR REPLACE TRIGGER  "SYS_TAB_MD_INS" BEFORE INSERT ON SYSTEM_TABLE_METADATA FOR EACH ROW BEGIN SELECT SYS_TAB_MD_SEQ.NEXTVAL INTO :new.STM_ID FROM DUAL; END;';
    EXECUTE IMMEDIATE 'ALTER TRIGGER  "SYS_TAB_MD_INS" ENABLE';
  END IF;
END;
/
DECLARE
COLUMNCHECKERFLAG INT;
BEGIN
SELECT COUNT(*) INTO COLUMNCHECKERFLAG FROM ADS_MM_VERSION WHERE VALUE <= '5.0';
IF COLUMNCHECKERFLAG = 1 THEN
EXECUTE IMMEDIATE 'INSERT INTO SYSTEM_TABLE_METADATA (
SYSTEM_ID,
TABLE_NAME,
SYSTEM_ENV_NAME,
TABLE_DEF,
CREATED_DATETIME,
LAST_MODIFIED_BY,
LAST_MODIFIED_DATE_TIME,
CREATED_BY,
NUMBER_ROWS,
TYPE,
LOGICAL_TABLE_NAME,
VALID,
ACTUAL_TABLE_NAME,
TABLE_REF_ID,
USER_DEFINED1,
USER_DEFINED2,
USER_DEFINED3,
USER_DEFINED4,
USER_DEFINED5,
USED_IN_GAP_ANALYSIS,
TABLE_COMMENTS,
USER_DEFINED6,
USER_DEFINED7,
USER_DEFINED8,
USER_DEFINED9,
USER_DEFINED10,
FILE_TYPE,
TABLE_CLASS,
TABLE_ALIAS)
SELECT
SYSTEM_ID,
TABLE_NAME,
SYSTEM_ENV_NAME,
TABLE_DEF,
CREATED_DATETIME,
LAST_MODIFIED_BY,
LAST_MODIFIED_DATE_TIME,
CREATED_BY,
NUMBER_ROWS,
TYPE,
LOGICAL_TABLE_NAME,
VALID,
ACTUAL_TABLE_NAME,
TABLE_REF_ID,
USER_DEFINED1,
USER_DEFINED2,
USER_DEFINED3,
USER_DEFINED4,
USER_DEFINED5,
USED_IN_GAP_ANALYSIS,
TABLE_COMMENTS,
USER_DEFINED6,
USER_DEFINED7,
USER_DEFINED8,
USER_DEFINED9,
USER_DEFINED10,
FILE_TYPE,
TABLE_CLASS,
TABLE_ALIAS
FROM TEMP_SYSTEM_TABLE_METADATA';
EXECUTE IMMEDIATE 'DROP TABLE TEMP_SYSTEM_TABLE_METADATA';
END IF;
END;
/
DECLARE
TABLECHECKERFLAG INT;
VERSIONCHECKERFLAG INT;
BEGIN
SELECT COUNT(*) INTO VERSIONCHECKERFLAG FROM ADS_MM_VERSION WHERE VALUE <= '5.0';
IF VERSIONCHECKERFLAG = 1 THEN
 SELECT COUNT(*) INTO TABLECHECKERFLAG FROM ALL_CONS_COLUMNS WHERE OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME = UPPER('SYS_CON_ENVIRONMENTS') AND CONSTRAINT_NAME = UPPER('R_11');
  IF TABLECHECKERFLAG > 0 THEN
      EXECUTE IMMEDIATE 'ALTER TABLE SYS_CON_ENVIRONMENTS DROP CONSTRAINT R_11';
   END IF;
 SELECT COUNT(*) INTO TABLECHECKERFLAG FROM ALL_CONS_COLUMNS WHERE OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME = UPPER('SYS_CON_ENVIRONMENTS') AND CONSTRAINT_NAME = UPPER('RM_SYSCON_FK1');
  IF TABLECHECKERFLAG > 0 THEN
      EXECUTE IMMEDIATE 'ALTER TABLE RM_PROMOTE_SYS_CON_ENVS DROP CONSTRAINT RM_SYSCON_FK1';
   END IF;
   EXECUTE IMMEDIATE 'ALTER TABLE SYS_CON_ENVIRONMENTS RENAME CONSTRAINT XPKSYS_CON_ENVIRONMENTS TO TEMP_XPKSYS_CON_ENV';
   EXECUTE IMMEDIATE 'ALTER TABLE SYS_CON_ENVIRONMENTS RENAME TO TEMP_SYS_CON_ENV';
   EXECUTE IMMEDIATE ('CREATE TABLE SYS_CON_ENVIRONMENTS (
SYSTEM_ENVIRONMENT_TYPE VARCHAR2(50) NULL,
SYSTEM_ENVIRONMENT_NAME VARCHAR2(50) NOT NULL,
SYSTEM_ID int NOT NULL,
SYSTEM_NAME VARCHAR2(50) NULL,
SERVER_PLATFORM VARCHAR2(50) NULL,
SERVER_OS_VERSION VARCHAR2(50) NULL,
SPECIAL_APP_CON_INSTS VARCHAR2(4000) NULL,
CREATED_DATETIME TIMESTAMP(6) NOT NULL,
LAST_MODIFIED_BY VARCHAR2(20) NULL,
LAST_MODIFIED_DATE_TIME TIMESTAMP(6) NULL,
CREATED_BY VARCHAR2(20) NOT NULL,
IP_ADDRESS VARCHAR2(50) NULL,
PORT VARCHAR2(10) NULL,
DBMS_NAME VARCHAR2(50) NULL,
DBMS_INSTANCE_SCHEMA VARCHAR2(4000) NULL,
ENV_INTENDED_USE_DESCR VARCHAR2(4000) NULL,
ENVIRONMENT_NOTES VARCHAR2(4000) NULL,
USER_NAME VARCHAR2(50) NULL,
PASSWORD VARCHAR2(50) NULL,
DATABASE_TYPE VARCHAR2(50) NULL,
DATABASE_URL VARCHAR2(255) NULL,
DATABASE_DRIVER VARCHAR2(50) NULL,
LAST_LOADING_TIME TIMESTAMP(6) NULL,
USER_ID VARCHAR2(50) NULL,
DB_DOMAIN VARCHAR2(255) NULL,
DATA_FILE_NAME VARCHAR2(255) NULL,
DATA_FILE BLOB NULL,
PWD_ENCRYPT_FLAG char(1) DEFAULT ''N'' NOT NULL,
FILE_MANAGEMENT_SYSTEM_TYPE VARCHAR2(50) NULL,
FILE_LOCATION VARCHAR2(50) NULL,
PROD_SYSTEM_ID int NULL,
PROD_SYSTEM_NAME VARCHAR2(50) NULL,
PROD_ENVIRONMENT_NAME VARCHAR2(50) NULL,
TABLE_DISPLAY_FLAG char(1) DEFAULT ''N'' NOT NULL,
VIEW_DISPLAY_FLAG char(1) DEFAULT ''N'' NOT NULL,
SYNONYM_DISPLAY_FLAG char(1) DEFAULT ''N'' NOT NULL,
STATUS VARCHAR2(50) DEFAULT ''Active'' NOT NULL,
SYSTEM_NUMBER INT NULL,
DESTINATION VARCHAR2(50) NULL,
CLIENT INT NULL,
SAP_DELIMITER CHAR(1) NULL,
SAP_MANUAL_TABLES VARCHAR2(4000) NULL,
SCE_ID INT  NOT NULL)');
END IF;
END;
/
DECLARE
   SEQUENCECHECKERFLAG INT;
BEGIN
    SELECT COUNT(*) INTO SEQUENCECHECKERFLAG FROM ALL_SEQUENCES WHERE SEQUENCE_OWNER = sys_context('userenv', 'current_schema') AND SEQUENCE_NAME = UPPER('SYS_CON_SEQ');
   IF SEQUENCECHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'CREATE SEQUENCE "SYS_CON_SEQ"  MINVALUE 1 MAXVALUE 999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE';
   END IF;
END;
/
DECLARE
  TRIGGERCHECKERFLAG INT;
BEGIN
  SELECT COUNT(*)  INTO TRIGGERCHECKERFLAG FROM all_triggers WHERE OWNER = sys_context('userenv', 'current_schema') AND trigger_name = UPPER('SYS_CON_INSERT');
  IF TRIGGERCHECKERFLAG = 0 THEN
    EXECUTE IMMEDIATE 'CREATE OR REPLACE TRIGGER  "SYS_CON_INSERT" BEFORE INSERT ON SYS_CON_ENVIRONMENTS FOR EACH ROW BEGIN SELECT SYS_CON_SEQ.NEXTVAL INTO :new.SCE_ID FROM DUAL; END;';
    EXECUTE IMMEDIATE 'ALTER TRIGGER  "SYS_CON_INSERT" ENABLE';
  END IF;
END;
/
DECLARE
COLUMNCHECKERFLAG INT;
BEGIN
SELECT COUNT(*) INTO COLUMNCHECKERFLAG FROM ADS_MM_VERSION WHERE VALUE <= '5.0';
IF COLUMNCHECKERFLAG = 1 THEN
EXECUTE IMMEDIATE 'ALTER TABLE SYSTEM_DEFINITION_DETAILS RENAME CONSTRAINT XPKSYSTEM_DEFINITION_DETAILS TO TEMP_XPKSYSTEM_DEF_DETAILS';
EXECUTE IMMEDIATE 'ALTER TABLE SYSTEM_DEFINITION_DETAILS RENAME TO TEMP_SYSTEM_DEF_DETAILS';
EXECUTE IMMEDIATE 'CREATE TABLE SYSTEM_DEFINITION_DETAILS(
SYSTEM_NAME VARCHAR2(50) NOT NULL,
SYSTEM_MOVE_TYPE_SRC_TGT VARCHAR2(20) NULL,
SYSTEM_BUSINESS_PURPOSE_SHORT VARCHAR2(4000) NULL,
SYSTEM_DESCRIPTION_LONG VARCHAR2(4000) NULL,
SERVER_PLATFORM VARCHAR2(20) NULL,
SERVER_OS_VERSION VARCHAR2(20) NULL,
DBMS_PLATFORM VARCHAR2(20) NULL,
DBMS_VERSION VARCHAR2(20) NULL,
FILE_MANAGMENT_SYSTEM_TYPE VARCHAR2(20) NULL,
FILE_LOCATION VARCHAR2(255) NULL,
ESB_PLATFORM_TYPE VARCHAR2(20) NULL,
ESB_Q_MGR_NAME VARCHAR2(20) NULL,
RELEASE VARCHAR2(20) NULL,
TOTAL_NUM_TABLES int NULL,
TOTAL_DB_SIZE_GIGABYTES VARCHAR2(20) NULL,
DEFINITION_OF_END_OF_DAY VARCHAR2(4000) NULL,
DAILY_BATCH_EXTRACT_WINDOW VARCHAR2(4000) NULL,
AVG_NUM_NAMED_USERS VARCHAR2(20) NULL,
AVG_NUM_CONCURRENT_USERS VARCHAR2(20) NULL,
SPECIAL_INSRUCTIONS_COMMENTS VARCHAR2(4000) NULL,
SYSTEM_OWNER_FULL_NAME VARCHAR2(255) NULL,
SYSTEM_OWNER_TEL VARCHAR2(20) NULL,
SYSTEM_OWNER_EMAIL VARCHAR2(255) NULL,
CREATED_BY VARCHAR2(20) NOT NULL,
CREATED_DATETIME TIMESTAMP(6) NOT NULL,
LAST_MODIFIED_BY VARCHAR2(20) NULL,
LAST_MODIFIED_DATE_TIME TIMESTAMP(6) NULL,
SYSTEM_ID int  NOT NULL)';
EXECUTE IMMEDIATE 'ALTER TABLE SYSTEM_DEFINITION_DETAILS ADD CONSTRAINT UK_SYS_NAME UNIQUE (SYSTEM_NAME)';
END IF;
END;
/
DECLARE
COLUMNCHECKERFLAG INT;
BEGIN
SELECT COUNT(*) INTO COLUMNCHECKERFLAG FROM ADS_MM_VERSION WHERE VALUE <= '5.0';
IF COLUMNCHECKERFLAG = 1 THEN
EXECUTE IMMEDIATE 'INSERT INTO SYSTEM_DEFINITION_DETAILS (
SYSTEM_NAME,
SYSTEM_MOVE_TYPE_SRC_TGT,
SYSTEM_BUSINESS_PURPOSE_SHORT,
SYSTEM_DESCRIPTION_LONG,
SERVER_PLATFORM,
SERVER_OS_VERSION,
DBMS_PLATFORM,
DBMS_VERSION,
FILE_MANAGMENT_SYSTEM_TYPE,
FILE_LOCATION,
ESB_PLATFORM_TYPE,
ESB_Q_MGR_NAME,
RELEASE,
TOTAL_NUM_TABLES,
TOTAL_DB_SIZE_GIGABYTES,
DEFINITION_OF_END_OF_DAY,
DAILY_BATCH_EXTRACT_WINDOW,
AVG_NUM_NAMED_USERS,
AVG_NUM_CONCURRENT_USERS,
SPECIAL_INSRUCTIONS_COMMENTS,
SYSTEM_OWNER_FULL_NAME,
SYSTEM_OWNER_TEL,
SYSTEM_OWNER_EMAIL,
CREATED_BY,
CREATED_DATETIME,
LAST_MODIFIED_BY,
LAST_MODIFIED_DATE_TIME,
SYSTEM_ID)
SELECT SYSTEM_NAME,
SYSTEM_MOVE_TYPE_SRC_TGT,
SYSTEM_BUSINESS_PURPOSE_SHORT,
SYSTEM_DESCRIPTION_LONG,
SERVER_PLATFORM,
SERVER_OS_VERSION,
DBMS_PLATFORM,
DBMS_VERSION,
FILE_MANAGMENT_SYSTEM_TYPE,
FILE_LOCATION,
ESB_PLATFORM_TYPE,
ESB_Q_MGR_NAME,
RELEASE,
TOTAL_NUM_TABLES,
TOTAL_DB_SIZE_GIGABYTES,
DEFINITION_OF_END_OF_DAY,
DAILY_BATCH_EXTRACT_WINDOW,
AVG_NUM_NAMED_USERS,
AVG_NUM_CONCURRENT_USERS,
SPECIAL_INSRUCTIONS_COMMENTS,
SYSTEM_OWNER_FULL_NAME,
SYSTEM_OWNER_TEL,
SYSTEM_OWNER_EMAIL,
CREATED_BY,
CREATED_DATETIME,
LAST_MODIFIED_BY,
LAST_MODIFIED_DATE_TIME,
SYSTEM_ID FROM TEMP_SYSTEM_DEF_DETAILS';
EXECUTE IMMEDIATE 'INSERT INTO SYS_CON_ENVIRONMENTS (
  SYSTEM_ENVIRONMENT_TYPE
      ,SYSTEM_ENVIRONMENT_NAME
      ,SYSTEM_ID
      ,SYSTEM_NAME
      ,SERVER_PLATFORM
      ,SERVER_OS_VERSION
      ,SPECIAL_APP_CON_INSTS
      ,CREATED_DATETIME
      ,LAST_MODIFIED_BY
      ,LAST_MODIFIED_DATE_TIME
      ,CREATED_BY
      ,IP_ADDRESS
      ,PORT
      ,DBMS_NAME
      ,DBMS_INSTANCE_SCHEMA
      ,ENV_INTENDED_USE_DESCR
      ,ENVIRONMENT_NOTES
      ,USER_NAME
      ,PASSWORD
      ,DATABASE_TYPE
      ,DATABASE_URL
      ,DATABASE_DRIVER
      ,LAST_LOADING_TIME
      ,USER_ID
      ,DB_DOMAIN
      ,DATA_FILE_NAME
      ,DATA_FILE
      ,PWD_ENCRYPT_FLAG
      ,FILE_MANAGEMENT_SYSTEM_TYPE
      ,FILE_LOCATION
      ,PROD_SYSTEM_ID
      ,PROD_SYSTEM_NAME
      ,PROD_ENVIRONMENT_NAME
      ,TABLE_DISPLAY_FLAG
      ,VIEW_DISPLAY_FLAG
      ,SYNONYM_DISPLAY_FLAG
      ,SAP_DELIMITER
      ,SAP_MANUAL_TABLES
      ,SYSTEM_NUMBER
      ,DESTINATION
      ,CLIENT)
SELECT SYSTEM_ENVIRONMENT_TYPE
      ,SYSTEM_ENVIRONMENT_NAME
      ,SYSTEM_ID
      ,SYSTEM_NAME
      ,SERVER_PLATFORM
      ,SERVER_OS_VERSION
      ,SPECIAL_APP_CON_INSTS
      ,CREATED_DATETIME
      ,LAST_MODIFIED_BY
      ,LAST_MODIFIED_DATE_TIME
      ,CREATED_BY
      ,IP_ADDRESS
      ,PORT
      ,DBMS_NAME
      ,DBMS_INSTANCE_SCHEMA
      ,ENV_INTENDED_USE_DESCR
      ,ENVIRONMENT_NOTES
      ,USER_NAME
      ,PASSWORD
      ,DATABASE_TYPE
      ,DATABASE_URL
      ,DATABASE_DRIVER
      ,LAST_LOADING_TIME
      ,USER_ID
      ,DB_DOMAIN
      ,DATA_FILE_NAME
      ,DATA_FILE
      ,PWD_ENCRYPT_FLAG
      ,FILE_MANAGEMENT_SYSTEM_TYPE
      ,FILE_LOCATION
      ,PROD_SYSTEM_ID
      ,PROD_SYSTEM_NAME
      ,PROD_ENVIRONMENT_NAME
      ,TABLE_DISPLAY_FLAG
      ,VIEW_DISPLAY_FLAG
      ,SYNONYM_DISPLAY_FLAG
      ,SAP_DELIMITER
      ,SAP_MANUAL_TABLES
      ,SYSTEM_NUMBER
      ,DESTINATION
      ,CLIENT
      FROM TEMP_SYS_CON_ENV';

END IF;
END;
/
DECLARE
   SEQUENCECHECKERFLAG INT;
   STARTWITHNO NUMBER;
BEGIN
    SELECT COUNT(*) INTO SEQUENCECHECKERFLAG FROM ALL_SEQUENCES WHERE SEQUENCE_OWNER = sys_context('userenv', 'current_schema') AND SEQUENCE_NAME = UPPER('SYS_DEF_DETAILS_SEQ');
	SELECT NVL(MAX(SYSTEM_ID),0)+1 INTO STARTWITHNO FROM SYSTEM_DEFINITION_DETAILS;
   IF SEQUENCECHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'CREATE SEQUENCE "SYS_DEF_DETAILS_SEQ"  MINVALUE 1 MAXVALUE 999999999999999999999999999 INCREMENT BY 1 START WITH '||STARTWITHNO||' CACHE 20 NOORDER  NOCYCLE';
   END IF;
END;
/
DECLARE
  TRIGGERCHECKERFLAG INT;
BEGIN
  SELECT COUNT(*)  INTO TRIGGERCHECKERFLAG FROM all_triggers WHERE OWNER = sys_context('userenv', 'current_schema') AND trigger_name = UPPER('SYS_DEF_DETAILS_INSERT');
  IF TRIGGERCHECKERFLAG = 0 THEN
    EXECUTE IMMEDIATE 'CREATE OR REPLACE TRIGGER  "SYS_DEF_DETAILS_INSERT" BEFORE INSERT ON SYSTEM_DEFINITION_DETAILS FOR EACH ROW BEGIN SELECT SYS_DEF_DETAILS_SEQ.NEXTVAL INTO :new.SYSTEM_ID FROM DUAL; END;';
    EXECUTE IMMEDIATE 'ALTER TRIGGER  "SYS_DEF_DETAILS_INSERT" ENABLE';
  END IF;
END;
/
DECLARE
COLUMNCHECKERFLAG INT;
TABLECHECKERFLAG INT;
BEGIN
SELECT COUNT(*) INTO COLUMNCHECKERFLAG FROM ADS_MM_VERSION WHERE VALUE <= '5.0';
IF COLUMNCHECKERFLAG = 1 THEN
 SELECT COUNT(*) INTO TABLECHECKERFLAG FROM ALL_CONS_COLUMNS WHERE OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME = UPPER('TEMP_SYSTEM_DEF_DETAILS') AND CONSTRAINT_NAME = UPPER('TEMP_XPKSYSTEM_DEF_DETAILS');
  IF TABLECHECKERFLAG > 0 THEN
    EXECUTE IMMEDIATE 'ALTER TABLE TEMP_SYSTEM_DEF_DETAILS DROP PRIMARY KEY CASCADE';
  END IF;
 SELECT COUNT(*) INTO TABLECHECKERFLAG FROM ALL_CONS_COLUMNS WHERE OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME = UPPER('TEMP_SYS_CON_ENV') AND CONSTRAINT_NAME = UPPER('TEMP_XPKSYS_CON_ENV');
IF TABLECHECKERFLAG > 0 THEN
    EXECUTE IMMEDIATE 'ALTER TABLE TEMP_SYS_CON_ENV DROP PRIMARY KEY CASCADE';
END IF;
 SELECT COUNT(*) INTO TABLECHECKERFLAG FROM ALL_CONS_COLUMNS WHERE OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME = UPPER('TEMP_SYSTEM_DOCUMENTS') AND CONSTRAINT_NAME = UPPER('TEMP_XPKSYS_DOCS');
IF TABLECHECKERFLAG > 0 THEN
    EXECUTE IMMEDIATE 'ALTER TABLE TEMP_SYSTEM_DOCUMENTS DROP PRIMAY KEY CASCADE';
END IF;
EXECUTE IMMEDIATE 'DROP TABLE TEMP_SYS_CON_ENV';
EXECUTE IMMEDIATE 'DROP TABLE TEMP_SYSTEM_DEF_DETAILS';
EXECUTE IMMEDIATE 'ALTER TABLE SYSTEM_DEFINITION_DETAILS ADD CONSTRAINT XPKSYSTEM_DEFINITION_DETAILS PRIMARY KEY (SYSTEM_ID)';
EXECUTE IMMEDIATE 'ALTER TABLE SYS_CON_ENVIRONMENTS ADD CONSTRAINT XPK_SYS_CON_ENVIRONMENTS PRIMARY KEY
(
SCE_ID
)';
EXECUTE IMMEDIATE 'ALTER TABLE SYS_CON_ENVIRONMENTS  ADD  CONSTRAINT FK_ENV_SYS_ID FOREIGN KEY(SYSTEM_ID) REFERENCES SYSTEM_DEFINITION_DETAILS (SYSTEM_ID)';
EXECUTE IMMEDIATE 'ALTER TABLE SYS_CON_ENVIRONMENTS ADD  CONSTRAINT UK_SYS_CON_ENV UNIQUE
(
SYSTEM_ID,
SYSTEM_ENVIRONMENT_NAME
)';
EXECUTE IMMEDIATE 'ALTER TABLE RM_PROMOTE_SYS_CON_ENVS  ADD  CONSTRAINT RM_SYSCON_FK1 FOREIGN KEY(SYSTEM_ID, SYSTEM_ENVIRONMENT_NAME) REFERENCES SYS_CON_ENVIRONMENTS (SYSTEM_ID, SYSTEM_ENVIRONMENT_NAME) ON DELETE CASCADE';
EXECUTE IMMEDIATE 'ALTER TABLE SYSTEM_TABLE_METADATA ADD  CONSTRAINT UK_SYSID_ENV_TAB_NAME UNIQUE
(
SYSTEM_ID,
SYSTEM_ENV_NAME,
TABLE_NAME
)';
EXECUTE IMMEDIATE 'ALTER TABLE SYSTEM_TABLE_METADATA  ADD  CONSTRAINT FK_SYS_CON_ENV FOREIGN KEY(SYSTEM_ID, SYSTEM_ENV_NAME) REFERENCES SYS_CON_ENVIRONMENTS (SYSTEM_ID, SYSTEM_ENVIRONMENT_NAME)';
EXECUTE IMMEDIATE 'ALTER TABLE SYSTEM_TABLE_COLUMNS_METADATA ADD  CONSTRAINT UK_SYS_ID_ENV_TAB_COL UNIQUE
(
SYSTEM_ID,
SYSTEM_ENV_NAME,
TABLE_NAME,
COLUMN_NAME
)';
EXECUTE IMMEDIATE 'ALTER TABLE SYSTEM_TABLE_COLUMNS_METADATA  ADD  CONSTRAINT FK_SYS_TAB_METADATA FOREIGN KEY(SYSTEM_ID, SYSTEM_ENV_NAME, TABLE_NAME) REFERENCES SYSTEM_TABLE_METADATA (SYSTEM_ID, SYSTEM_ENV_NAME, TABLE_NAME)';
EXECUTE IMMEDIATE 'ALTER TABLE SYSTEM_DOCUMENTS  ADD  CONSTRAINT R_15 FOREIGN KEY(SYSTEM_ID) REFERENCES SYSTEM_DEFINITION_DETAILS (SYSTEM_ID)';
EXECUTE IMMEDIATE 'ALTER TABLE SYSTEM_DOCUMENTS ADD  CONSTRAINT XPK_SYS_DOCS PRIMARY KEY
(
SYSTEM_DOC_ID
)';
END IF;
END;
/
DECLARE
   COLUMNCHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO COLUMNCHECKERFLAG FROM ALL_TAB_COLUMNS WHERE  OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME = UPPER('SYS_CON_ENVIRONMENTS') AND COLUMN_NAME=UPPER('MAX_NO_OF_CONNECTIONS');
   IF COLUMNCHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'ALTER TABLE SYS_CON_ENVIRONMENTS ADD MAX_NO_OF_CONNECTIONS INT DEFAULT 10 NULL';
      EXECUTE IMMEDIATE 'UPDATE SYS_CON_ENVIRONMENTS SET MAX_NO_OF_CONNECTIONS = 10 WHERE MAX_NO_OF_CONNECTIONS IS NULL';
   END IF;
END;
/
DECLARE
   COLUMNCHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO COLUMNCHECKERFLAG FROM ALL_TAB_COLUMNS WHERE  OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME = UPPER('SYS_CON_ENVIRONMENTS') AND COLUMN_NAME=UPPER('MIN_NO_OF_CONNECTIONS');
   IF COLUMNCHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'ALTER TABLE SYS_CON_ENVIRONMENTS ADD MIN_NO_OF_CONNECTIONS INT DEFAULT 3 NULL';
      EXECUTE IMMEDIATE 'UPDATE SYS_CON_ENVIRONMENTS SET MIN_NO_OF_CONNECTIONS = 3 WHERE MIN_NO_OF_CONNECTIONS IS NULL';
   END IF;
END;
/
DECLARE
   COLUMNCHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO COLUMNCHECKERFLAG FROM ALL_TAB_COLUMNS WHERE  OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME = UPPER('SYS_CON_ENVIRONMENTS') AND COLUMN_NAME=UPPER('NO_OF_PARTITIONS');
   IF COLUMNCHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'ALTER TABLE SYS_CON_ENVIRONMENTS ADD NO_OF_PARTITIONS INT DEFAULT 2 NULL';
      EXECUTE IMMEDIATE 'UPDATE SYS_CON_ENVIRONMENTS SET NO_OF_PARTITIONS = 2 WHERE NO_OF_PARTITIONS IS NULL';
   END IF;
END;
/
DECLARE
   COLUMNCHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO COLUMNCHECKERFLAG FROM ALL_TAB_COLUMNS WHERE  OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME = UPPER('RM_RELEASE') AND COLUMN_NAME=UPPER('RELEASE_OWNER');
   IF COLUMNCHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'ALTER TABLE RM_RELEASE ADD RELEASE_OWNER varchar2(255) NULL';
   END IF;
END;
/
DECLARE
   COLUMNCHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO COLUMNCHECKERFLAG FROM ALL_TAB_COLUMNS WHERE  OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME = UPPER('RM_PROJECT') AND COLUMN_NAME=UPPER('CREATED_BY');
   IF COLUMNCHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'ALTER TABLE RM_PROJECT ADD CREATED_BY VARCHAR2(50) NULL';
   END IF;
END;
/
DECLARE
   COLUMNCHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO COLUMNCHECKERFLAG FROM ALL_TAB_COLUMNS WHERE  OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME = UPPER('RM_PROJECT') AND COLUMN_NAME=UPPER('CREATED_DATE_TIME');
   IF COLUMNCHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'ALTER TABLE RM_PROJECT ADD CREATED_DATE_TIME TIMESTAMP(6) NULL';
   END IF;
END;
/
DECLARE
   COLUMNCHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO COLUMNCHECKERFLAG FROM ALL_TAB_COLUMNS WHERE  OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME = UPPER('RM_PROJECT') AND COLUMN_NAME=UPPER('LAST_MODIFIED_BY');
   IF COLUMNCHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'ALTER TABLE RM_PROJECT ADD LAST_MODIFIED_BY VARCHAR2(50) NULL';
   END IF;
END;
/
DECLARE
   COLUMNCHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO COLUMNCHECKERFLAG FROM ALL_TAB_COLUMNS WHERE  OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME = UPPER('RM_PROJECT') AND COLUMN_NAME=UPPER('LAST_MODIFIED_DATE_TIME');
   IF COLUMNCHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'ALTER TABLE RM_PROJECT ADD LAST_MODIFIED_DATE_TIME TIMESTAMP(6) NULL';
   END IF;
END;
/
DECLARE
   COLUMNCHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO COLUMNCHECKERFLAG FROM ALL_TAB_COLUMNS WHERE  OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME = UPPER('RM_RELEASE') AND COLUMN_NAME=UPPER('CREATED_BY');
   IF COLUMNCHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'ALTER TABLE RM_RELEASE ADD CREATED_BY VARCHAR2(50) NULL';
   END IF;
END;
/
DECLARE
   COLUMNCHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO COLUMNCHECKERFLAG FROM ALL_TAB_COLUMNS WHERE  OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME = UPPER('RM_RELEASE') AND COLUMN_NAME=UPPER('CREATED_DATE_TIME');
   IF COLUMNCHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'ALTER TABLE RM_RELEASE ADD CREATED_DATE_TIME TIMESTAMP(6) NULL';
   END IF;
END;
/

DECLARE
   COLUMNCHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO COLUMNCHECKERFLAG FROM ALL_TAB_COLUMNS WHERE  OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME = UPPER('RM_RELEASE') AND COLUMN_NAME=UPPER('LAST_MODIFIED_BY');
   IF COLUMNCHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'ALTER TABLE RM_RELEASE ADD LAST_MODIFIED_BY VARCHAR2(50) NULL';
   END IF;
END;
/
DECLARE
   COLUMNCHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO COLUMNCHECKERFLAG FROM ALL_TAB_COLUMNS WHERE  OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME = UPPER('RM_RELEASE') AND COLUMN_NAME=UPPER('LAST_MODIFIED_DATE_TIME');
   IF COLUMNCHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'ALTER TABLE RM_RELEASE ADD LAST_MODIFIED_DATE_TIME TIMESTAMP(6) NULL';
   END IF;
END;
/
DECLARE
   COLUMNCHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO COLUMNCHECKERFLAG FROM ALL_TAB_COLUMNS WHERE  OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME = UPPER('RM_MIGRATIONOBJECT') AND COLUMN_NAME=UPPER('CREATED_BY');
   IF COLUMNCHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'ALTER TABLE RM_MIGRATIONOBJECT ADD CREATED_BY VARCHAR2(50) NULL';
   END IF;
END;
/
DECLARE
   COLUMNCHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO COLUMNCHECKERFLAG FROM ALL_TAB_COLUMNS WHERE  OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME = UPPER('RM_MIGRATIONOBJECT') AND COLUMN_NAME=UPPER('CREATED_DATE_TIME');
   IF COLUMNCHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'ALTER TABLE RM_MIGRATIONOBJECT ADD CREATED_DATE_TIME TIMESTAMP(6) NULL';
   END IF;
END;
/
DECLARE
   COLUMNCHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO COLUMNCHECKERFLAG FROM ALL_TAB_COLUMNS WHERE  OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME = UPPER('RM_MIGRATIONOBJECT') AND COLUMN_NAME=UPPER('LAST_MODIFIED_BY');
   IF COLUMNCHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'ALTER TABLE RM_MIGRATIONOBJECT ADD LAST_MODIFIED_BY VARCHAR2(50) NULL';
   END IF;
END;
/
DECLARE
   COLUMNCHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO COLUMNCHECKERFLAG FROM ALL_TAB_COLUMNS WHERE  OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME = UPPER('RM_MIGRATIONOBJECT') AND COLUMN_NAME=UPPER('LAST_MODIFIED_DATE_TIME');
   IF COLUMNCHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'ALTER TABLE RM_MIGRATIONOBJECT ADD LAST_MODIFIED_DATE_TIME TIMESTAMP(6) NULL';
   END IF;
END;
/
DECLARE
   COLUMNCHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO COLUMNCHECKERFLAG FROM ALL_TAB_COLUMNS WHERE  OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME = UPPER('RM_MIGRATIONOBJECT') AND COLUMN_NAME=UPPER('PROJECT_ID');
   IF COLUMNCHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'ALTER TABLE RM_MIGRATIONOBJECT ADD PROJECT_ID NUMBER NULL';
   END IF;
END;
/
DECLARE
   COLUMNCHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO COLUMNCHECKERFLAG FROM ALL_TAB_COLUMNS WHERE  OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME = UPPER('RM_MIGRATIONOBJECT') AND COLUMN_NAME=UPPER('SUBJECT_ID');
   IF COLUMNCHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'ALTER TABLE RM_MIGRATIONOBJECT ADD SUBJECT_ID NUMBER NULL';
   END IF;
END;
/
DECLARE
   COLUMNCHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO COLUMNCHECKERFLAG FROM ALL_TAB_COLUMNS WHERE  OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME = UPPER('RM_MIGRATIONOBJECT') AND COLUMN_NAME=UPPER('MIGRATIONOBJECTVERSION');
   IF COLUMNCHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'ALTER TABLE RM_MIGRATIONOBJECT ADD MIGRATIONOBJECTVERSION NUMBER(18,2) NULL';
   END IF;
END;
/
DECLARE
COLUMNCHECKERFLAG INT;
BEGIN
SELECT COUNT(*) INTO COLUMNCHECKERFLAG FROM ADS_MM_VERSION WHERE VALUE <= '5.0';
IF COLUMNCHECKERFLAG = 1 THEN
        MERGE INTO RM_MIGRATIONOBJECT M USING
        (
          SELECT DISTINCT PROJECT_ID, SUBJECT_ID, MAP_ID,MAP_SPEC_VERSION
          FROM MAPPING_DETAILS
        ) U ON (M.MAP_ID = U.MAP_ID)
        WHEN MATCHED THEN
          UPDATE SET M.PROJECT_ID = U.PROJECT_ID, M.SUBJECT_ID = U.SUBJECT_ID, M.MIGRATIONOBJECTVERSION = U.MAP_SPEC_VERSION;
          COMMIT;
        MERGE INTO RM_MIGRATIONOBJECT M USING
        (
          SELECT DISTINCT CSM_MAP_CAT_ID,CSM_MAP_VERSION,CSM_MAP_ID
          FROM CSM_MAPPING_DETAILS
        ) U ON (M.CSM_MAP_ID = U.CSM_MAP_ID)
        WHEN MATCHED THEN
          UPDATE SET M.PROJECT_ID = U.CSM_MAP_CAT_ID, M.SUBJECT_ID = 0, M.MIGRATIONOBJECTVERSION = U.CSM_MAP_VERSION;
          COMMIT;
        MERGE INTO RM_MIGRATIONOBJECT M USING
        (
          SELECT DISTINCT CATEGORY_ID,CODESET_VERSION,CODESET_ID
          FROM CSM_CODESET
        ) U ON (M.CODESET_ID = U.CODESET_ID)
        WHEN MATCHED THEN
        UPDATE SET M.PROJECT_ID = U.CATEGORY_ID, M.SUBJECT_ID = 0, M.MIGRATIONOBJECTVERSION = U.CODESET_VERSION;
        COMMIT;
END IF;
END;
/
DECLARE
   COLUMNCHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO COLUMNCHECKERFLAG FROM ALL_TAB_COLUMNS WHERE  OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME = UPPER('SYSTEM_TABLE_COLUMNS_METADATA') AND COLUMN_NAME=UPPER('MIN_VALUE') AND DATA_LENGTH=UPPER('20');
   IF COLUMNCHECKERFLAG = 1 THEN
      EXECUTE IMMEDIATE 'ALTER TABLE SYSTEM_TABLE_COLUMNS_METADATA MODIFY(MIN_VALUE VARCHAR2(200))';
   END IF;
END;
/
DECLARE
   COLUMNCHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO COLUMNCHECKERFLAG FROM ALL_TAB_COLUMNS WHERE  OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME = UPPER('SYSTEM_TABLE_COLUMNS_METADATA') AND COLUMN_NAME=UPPER('MAX_VALUE') AND DATA_LENGTH=UPPER('20');
   IF COLUMNCHECKERFLAG = 1 THEN
      EXECUTE IMMEDIATE 'ALTER TABLE SYSTEM_TABLE_COLUMNS_METADATA MODIFY(MAX_VALUE VARCHAR2(200))';
   END IF;
END;
/
DECLARE
   COLUMNCHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO COLUMNCHECKERFLAG FROM ALL_TAB_COLUMNS WHERE  OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME = UPPER('CAT_TEMPLATE_OPTIONS') AND COLUMN_NAME=UPPER('CAT_OPTION_CONTROL_WIDTH');
   IF COLUMNCHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'ALTER TABLE CAT_TEMPLATE_OPTIONS ADD CAT_OPTION_CONTROL_WIDTH varchar2(20) NULL';
   END IF;
END;
/
DECLARE
   COLUMNCHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO COLUMNCHECKERFLAG FROM ALL_TAB_COLUMNS WHERE  OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME = UPPER('CAT_TEMPLATES') AND COLUMN_NAME=UPPER('CAT_FORM_PROPERTIES');
   IF COLUMNCHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'ALTER TABLE CAT_TEMPLATES ADD CAT_FORM_PROPERTIES varchar2(500) NULL';
   END IF;
END;
/
--Test Manager DDL
DECLARE
  TABLECHECKERFLAG INT;
BEGIN
  SELECT COUNT(*) INTO TABLECHECKERFLAG FROM ALL_TABLES WHERE OWNER = sys_context( 'userenv', 'current_schema' ) AND TABLE_NAME = UPPER('TCM_VALIDATION_TYPE');
  IF TABLECHECKERFLAG = 0 THEN
    EXECUTE IMMEDIATE  'CREATE TABLE "TCM_VALIDATION_TYPE" (
"VALIDATION_TYPE_ID" NUMBER NOT NULL,
"VALIDATION_TYPE_NAME" VARCHAR2(400) NOT NULL,
 CONSTRAINT PK_VALIDATION_TYPE PRIMARY KEY(VALIDATION_TYPE_ID),
 CONSTRAINT "UK_VALID_TYPE" UNIQUE ("VALIDATION_TYPE_NAME"))';
  END IF;
END;
/
DECLARE
   SEQUENCECHECKERFLAG INT;
BEGIN
    SELECT COUNT(*) INTO SEQUENCECHECKERFLAG FROM ALL_SEQUENCES WHERE SEQUENCE_OWNER = sys_context('userenv', 'current_schema') AND SEQUENCE_NAME = UPPER('TCM_VAL_TYPE_SEQ');
   IF SEQUENCECHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'CREATE SEQUENCE "TCM_VAL_TYPE_SEQ"  MINVALUE 1 MAXVALUE 999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE';
   END IF;
END;
/
DECLARE
  TRIGGERCHECKERFLAG INT;
BEGIN
  SELECT COUNT(*)  INTO TRIGGERCHECKERFLAG FROM all_triggers WHERE OWNER = sys_context('userenv', 'current_schema') AND trigger_name = UPPER('TCM_VAL_TYPE_INSERT');
  IF TRIGGERCHECKERFLAG = 0 THEN
    EXECUTE IMMEDIATE 'CREATE OR REPLACE TRIGGER  "TCM_VAL_TYPE_INSERT" BEFORE INSERT ON TCM_VALIDATION_TYPE FOR EACH ROW BEGIN SELECT TCM_VAL_TYPE_SEQ.NEXTVAL INTO :new.VALIDATION_TYPE_ID FROM DUAL; END;';
    EXECUTE IMMEDIATE 'ALTER TRIGGER  "TCM_VAL_TYPE_INSERT" ENABLE';
  END IF;
END;
/
DECLARE
TABLECHECKERFLAG INT;
BEGIN
SELECT COUNT(*) INTO TABLECHECKERFLAG FROM ALL_TABLES WHERE OWNER = sys_context( 'userenv', 'current_schema' ) AND TABLE_NAME = UPPER('TCM_TESTCASE_TYPE');
IF TABLECHECKERFLAG = 0 THEN
EXECUTE IMMEDIATE  'CREATE TABLE "TCM_TESTCASE_TYPE"
(
 "TESTCASE_TYPE_ID" NUMBER NOT NULL,
"TESTCASE_TYPE_NAME" varchar2(400) NOT NULL,
CONSTRAINT PK_TESTCASE_TYPE PRIMARY KEY(TESTCASE_TYPE_ID),
CONSTRAINT "UK_TESTCASE_TYPE" UNIQUE ("TESTCASE_TYPE_NAME"))';
END IF;
END;
/
DECLARE
   SEQUENCECHECKERFLAG INT;
BEGIN
    SELECT COUNT(*) INTO SEQUENCECHECKERFLAG FROM ALL_SEQUENCES WHERE SEQUENCE_OWNER = sys_context('userenv', 'current_schema') AND SEQUENCE_NAME = UPPER('TCM_TESTCASE_TYPE_SEQ');
   IF SEQUENCECHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'CREATE SEQUENCE "TCM_TESTCASE_TYPE_SEQ"  MINVALUE 1 MAXVALUE 999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE';
   END IF;
END;
/
DECLARE
  TRIGGERCHECKERFLAG INT;
BEGIN
  SELECT COUNT(*)  INTO TRIGGERCHECKERFLAG FROM all_triggers WHERE OWNER = sys_context('userenv', 'current_schema') AND trigger_name = UPPER('TCM_TESTCASE_TYPE_INSERT');
  IF TRIGGERCHECKERFLAG = 0 THEN
    EXECUTE IMMEDIATE 'CREATE OR REPLACE TRIGGER  "TCM_TESTCASE_TYPE_INSERT" BEFORE INSERT ON TCM_TESTCASE_TYPE FOR EACH ROW BEGIN SELECT TCM_TESTCASE_TYPE_SEQ.NEXTVAL INTO :new.TESTCASE_TYPE_ID FROM DUAL; END;';
    EXECUTE IMMEDIATE 'ALTER TRIGGER  "TCM_TESTCASE_TYPE_INSERT" ENABLE';
  END IF;
END;
/
DECLARE
TABLECHECKERFLAG INT;
BEGIN
SELECT COUNT(*) INTO TABLECHECKERFLAG FROM ALL_TABLES WHERE OWNER = sys_context( 'userenv', 'current_schema' ) AND TABLE_NAME = UPPER('TCM_TESTCASE_STATUS');
IF TABLECHECKERFLAG = 0 THEN
EXECUTE IMMEDIATE  'CREATE TABLE "TCM_TESTCASE_STATUS"
(
    "STATUS_ID" NUMBER NOT NULL,
    "STATUS_NAME" varchar2(400) NOT NULL,
    CONSTRAINT PK_TC_STATUS PRIMARY KEY(STATUS_ID),
    CONSTRAINT "UK_TC_STATUS" UNIQUE ("STATUS_NAME")
)';
  END IF;
END;
/
DECLARE
   SEQUENCECHECKERFLAG INT;
BEGIN
    SELECT COUNT(*) INTO SEQUENCECHECKERFLAG FROM ALL_SEQUENCES WHERE SEQUENCE_OWNER = sys_context('userenv', 'current_schema') AND SEQUENCE_NAME = UPPER('TCM_STATUS_SEQ');
   IF SEQUENCECHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'CREATE SEQUENCE "TCM_STATUS_SEQ"  MINVALUE 1 MAXVALUE 999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE';
   END IF;
END;
/
DECLARE
  TRIGGERCHECKERFLAG INT;
BEGIN
  SELECT COUNT(*)  INTO TRIGGERCHECKERFLAG FROM all_triggers WHERE OWNER = sys_context('userenv', 'current_schema') AND trigger_name = UPPER('TCM_STATUS_INSERT');
  IF TRIGGERCHECKERFLAG = 0 THEN
    EXECUTE IMMEDIATE 'CREATE OR REPLACE TRIGGER  "TCM_STATUS_INSERT" BEFORE INSERT ON TCM_TESTCASE_STATUS FOR EACH ROW BEGIN SELECT TCM_STATUS_SEQ.NEXTVAL INTO :new.STATUS_ID FROM DUAL; END;';
    EXECUTE IMMEDIATE 'ALTER TRIGGER  "TCM_STATUS_INSERT" ENABLE';
  END IF;
END;
/
DECLARE
TABLECHECKERFLAG INT;
BEGIN
SELECT COUNT(*) INTO TABLECHECKERFLAG FROM ALL_TABLES WHERE OWNER = sys_context( 'userenv', 'current_schema' ) AND TABLE_NAME = UPPER('TCM_TESTCASE_PRIORITY');
IF TABLECHECKERFLAG = 0 THEN
EXECUTE IMMEDIATE  'CREATE TABLE "TCM_TESTCASE_PRIORITY"
 (
    "PRIORITY_ID" NUMBER NOT NULL,
    "PRIORITY_NAME" varchar2(400) NOT NULL,
    CONSTRAINT PK_TC_PRIORITY PRIMARY KEY(PRIORITY_ID),
    CONSTRAINT "UK_TC_PRIORITY" UNIQUE ("PRIORITY_NAME"))';
END IF;
END;
/
DECLARE
   SEQUENCECHECKERFLAG INT;
BEGIN
    SELECT COUNT(*) INTO SEQUENCECHECKERFLAG FROM ALL_SEQUENCES WHERE SEQUENCE_OWNER = sys_context('userenv', 'current_schema') AND SEQUENCE_NAME = UPPER('TCM_PRIORITY_SEQ');
   IF SEQUENCECHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'CREATE SEQUENCE "TCM_PRIORITY_SEQ"  MINVALUE 1 MAXVALUE 999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE';
   END IF;
END;
/
DECLARE
  TRIGGERCHECKERFLAG INT;
BEGIN
  SELECT COUNT(*)  INTO TRIGGERCHECKERFLAG FROM all_triggers WHERE OWNER = sys_context('userenv', 'current_schema') AND trigger_name = UPPER('TCM_PRIORITY_INSERT');
  IF TRIGGERCHECKERFLAG = 0 THEN
    EXECUTE IMMEDIATE 'CREATE OR REPLACE TRIGGER  "TCM_PRIORITY_INSERT" BEFORE INSERT ON TCM_TESTCASE_PRIORITY FOR EACH ROW BEGIN SELECT TCM_PRIORITY_SEQ.NEXTVAL INTO :new.PRIORITY_ID FROM DUAL; END;';
    EXECUTE IMMEDIATE 'ALTER TRIGGER  "TCM_PRIORITY_INSERT" ENABLE';
  END IF;
END;
/
DECLARE
	TABLECHECKERFLAG INT;
BEGIN
	SELECT COUNT(*) INTO TABLECHECKERFLAG FROM ALL_TABLES WHERE OWNER = sys_context( 'userenv', 'current_schema' ) AND TABLE_NAME = UPPER('TCM_TESTCASE');
	IF TABLECHECKERFLAG = 0 THEN
		EXECUTE IMMEDIATE  'CREATE TABLE "TCM_TESTCASE" (
                "TESTCASE_ID" NUMBER NOT NULL,
		"TESTCASE_LABEL" varchar2(400) NULL,
		"TESTCASE_TYPE_ID" NUMBER  NULL,
		"TESTCASE_NAME" varchar2(400) NOT NULL,
		"STATUS_ID" NUMBER  NULL,
		"PRIORITY_ID" NUMBER  NULL,
		"TEST_SQL_SCRIPT" varchar2(4000) NULL,
		"DESCRIPTION" varchar2(4000) NULL,
		"CREATED_BY" VARCHAR2 (400) NULL,
		"CREATED_DATE" TIMESTAMP NULL,
		"MODIFIED_BY" VARCHAR2(400) NULL,
		"MODIFIED_DATE" TIMESTAMP NULL,
		"EXTENDABLE" VARCHAR2(50) NULL,
                "TESTCASE_ROOT_ID" NUMBER NULL,
                EXPECTED_RESULT VARCHAR2(4000) NULL,
                ACTUAL_RESULT VARCHAR2(4000),
                TEST_COMMENTS VARCHAR2(4000),
                CONSTRAINT PK_TESTCASE PRIMARY KEY(TESTCASE_ID),
		CONSTRAINT "FK_TESTCASE_TYPE" FOREIGN KEY("TESTCASE_TYPE_ID") REFERENCES TCM_TESTCASE_TYPE("TESTCASE_TYPE_ID"),
		CONSTRAINT "FK_TESTCASE_STATUS" FOREIGN KEY("STATUS_ID") REFERENCES TCM_TESTCASE_STATUS("STATUS_ID"),
		CONSTRAINT "FK_PRIORITY" FOREIGN KEY("PRIORITY_ID") REFERENCES TCM_TESTCASE_PRIORITY("PRIORITY_ID"))';
	END IF;
END;
/
DECLARE
   SEQUENCECHECKERFLAG INT;
BEGIN
    SELECT COUNT(*) INTO SEQUENCECHECKERFLAG FROM ALL_SEQUENCES WHERE SEQUENCE_OWNER = sys_context('userenv', 'current_schema') AND SEQUENCE_NAME = UPPER('TCM_TESTCASE_SEQ');
   IF SEQUENCECHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'CREATE SEQUENCE "TCM_TESTCASE_SEQ"  MINVALUE 1 MAXVALUE 999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE';
   END IF;
END;
/
DECLARE
  TRIGGERCHECKERFLAG INT;
BEGIN
  SELECT COUNT(*)  INTO TRIGGERCHECKERFLAG FROM all_triggers WHERE OWNER = sys_context('userenv', 'current_schema') AND trigger_name = UPPER('TCM_TESTCASE_INSERT');
  IF TRIGGERCHECKERFLAG = 0 THEN
    EXECUTE IMMEDIATE 'CREATE OR REPLACE TRIGGER  "TCM_TESTCASE_INSERT" BEFORE INSERT ON TCM_TESTCASE FOR EACH ROW BEGIN SELECT TCM_TESTCASE_SEQ.NEXTVAL INTO :new.TESTCASE_ID FROM DUAL; END;';
    EXECUTE IMMEDIATE 'ALTER TRIGGER  "TCM_TESTCASE_INSERT" ENABLE';
  END IF;
END;
/
DECLARE
	TABLECHECKERFLAG INT;
BEGIN
	SELECT COUNT(*) INTO TABLECHECKERFLAG FROM ALL_TABLES WHERE OWNER = sys_context( 'userenv', 'current_schema' ) AND TABLE_NAME = UPPER('TCM_TESTCASE_STEP');
	IF TABLECHECKERFLAG = 0 THEN
		EXECUTE IMMEDIATE 'CREATE TABLE "TCM_TESTCASE_STEP" ( "STEP_ID" NUMBER NOT NULL,
		"TESTCASE_ID" NUMBER NOT NULL,
		"STEP_NAME" VARCHAR2(400) NOT NULL,
		"STATUS_ID" NUMBER NULL,
		"DESCRIPTION" VARCHAR2(4000) NULL,
		"EXPECTED_RESULT" VARCHAR2(4000) NULL,
		"ACTUAL_RESULT" VARCHAR2(4000) NULL,
                "TEST_STEP_COMMENTS" VARCHAR2(4000) NULL,
		"VALIDATION_TYPE_ID" NUMBER NULL,
		"CREATED_BY" VARCHAR2(400) NULL,
		"CREATED_DATE" TIMESTAMP NULL,
		"MODIFIED_BY" VARCHAR2(400) NULL,
		"MODIFIED_DATE" TIMESTAMP NULL,
		CONSTRAINT "FK_TESTCASE_ID" FOREIGN KEY("TESTCASE_ID") REFERENCES TCM_TESTCASE("TESTCASE_ID"),
                CONSTRAINT "FK_TESTSTEP_STATUS" FOREIGN KEY("STATUS_ID") REFERENCES TCM_TESTCASE_STATUS("STATUS_ID"),
                CONSTRAINT "FK_VALIDATION_TYPE" FOREIGN KEY("VALIDATION_TYPE_ID") REFERENCES TCM_VALIDATION_TYPE("VALIDATION_TYPE_ID"))';
	END IF;
END;
/
DECLARE
   SEQUENCECHECKERFLAG INT;
BEGIN
    SELECT COUNT(*) INTO SEQUENCECHECKERFLAG FROM ALL_SEQUENCES WHERE SEQUENCE_OWNER = sys_context('userenv', 'current_schema') AND SEQUENCE_NAME = UPPER('TCM_TESTCASE_STEP_SEQ');
   IF SEQUENCECHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'CREATE SEQUENCE "TCM_TESTCASE_STEP_SEQ"  MINVALUE 1 MAXVALUE 999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE';
   END IF;
END;
/
DECLARE
  TRIGGERCHECKERFLAG INT;
BEGIN
  SELECT COUNT(*)  INTO TRIGGERCHECKERFLAG FROM all_triggers WHERE OWNER = sys_context('userenv', 'current_schema') AND trigger_name = UPPER('TCM_TESTCASE_STEP_INSERT');
  IF TRIGGERCHECKERFLAG = 0 THEN
    EXECUTE IMMEDIATE 'CREATE OR REPLACE TRIGGER  "TCM_TESTCASE_STEP_INSERT" BEFORE INSERT ON TCM_TESTCASE_STEP FOR EACH ROW BEGIN SELECT TCM_TESTCASE_STEP_SEQ.NEXTVAL INTO :new.STEP_ID FROM DUAL; END;';
    EXECUTE IMMEDIATE 'ALTER TRIGGER  "TCM_TESTCASE_STEP_INSERT" ENABLE';
  END IF;
END;
/
DECLARE
	TABLECHECKERFLAG INT;
BEGIN
	SELECT COUNT(*) INTO TABLECHECKERFLAG FROM ALL_TABLES WHERE OWNER = sys_context( 'userenv', 'current_schema' ) AND TABLE_NAME = UPPER('TCM_OBJECT_TESTCASE');
	IF TABLECHECKERFLAG = 0 THEN
		EXECUTE IMMEDIATE 'CREATE TABLE "TCM_OBJECT_TESTCASE" ("OBJECT_ID"  NUMBER  NOT NULL,
		"OBJECT_TYPE_ID"  NUMBER  NOT NULL,
		"TESTCASE_ID" NUMBER  NOT NULL,
		CONSTRAINT "PK_TCM_OBJECT_TESTCASE" PRIMARY KEY ("OBJECT_ID", "OBJECT_TYPE_ID","TESTCASE_ID"))';
	END IF;
END;
/
DECLARE
	TABLECHECKERFLAG INT;
BEGIN
	SELECT COUNT(*) INTO TABLECHECKERFLAG FROM ALL_TABLES WHERE OWNER = sys_context( 'userenv', 'current_schema' ) AND TABLE_NAME = UPPER('TCM_TESTCASE_DOCS');
	IF TABLECHECKERFLAG = 0 THEN
		EXECUTE IMMEDIATE 'CREATE TABLE "TCM_TESTCASE_DOCS" (
		"TESTCASE_DOC_NAME" VARCHAR2(50) NOT NULL,
		"TESTCASE_DOC_TYPE" VARCHAR2 (20) NULL,
		"TEST_DOC_INTE_USE_DESC" VARCHAR2 (4000) NULL,
		"TESTCASE_DOC_OWNER" VARCHAR2 (50) NULL,
		"OBJECT_ID" NUMBER NOT NULL,
		"OBJECT_TYPE_ID" NUMBER NOT NULL,
		"TESTCASE_ID" NUMBER NOT NULL,
		"TESTCASE_DOC_ID" NUMBER NOT NULL,
		"CREATED_DATE_TIME" TIMESTAMP NOT NULL,
		"LAST_MODIFIED_BY" VARCHAR2(20) NULL,
		"LAST_MODIFIED_DATE_TIME" TIMESTAMP NULL,
		"CREATED_BY" VARCHAR2(20) NOT NULL,
		"TESTCASE_DOC_OBJECT" VARCHAR2 (4000) NOT NULL,
		"APPROVAL_REQD_FLAG" CHAR(1) NULL,
		"APPROVED_BY"  VARCHAR2(20) NULL,
		"APROVAL_DATETIME" TIMESTAMP NULL,
		"DOCUMENT_STATUS" VARCHAR2(20) NULL,
		CONSTRAINT "XPK_TCM_TESTCASE_DOC" PRIMARY KEY("OBJECT_ID","OBJECT_TYPE_ID" ,"TESTCASE_ID" ,"TESTCASE_DOC_ID"),
		CONSTRAINT "FK_DOC_TESTCASE_ID" FOREIGN KEY("TESTCASE_ID") REFERENCES TCM_TESTCASE("TESTCASE_ID"))';
	END IF;
END;
/
DECLARE
   SEQUENCECHECKERFLAG INT;
BEGIN
    SELECT COUNT(*) INTO SEQUENCECHECKERFLAG FROM ALL_SEQUENCES WHERE SEQUENCE_OWNER = sys_context('userenv', 'current_schema') AND SEQUENCE_NAME = UPPER('TCM_DOC_SEQ');
   IF SEQUENCECHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'CREATE SEQUENCE "TCM_DOC_SEQ"  MINVALUE 1 MAXVALUE 999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE';
   END IF;
END;
/
DECLARE
  TRIGGERCHECKERFLAG INT;
BEGIN
  SELECT COUNT(*)  INTO TRIGGERCHECKERFLAG FROM all_triggers WHERE OWNER = sys_context('userenv', 'current_schema') AND trigger_name = UPPER('TCM_DOC_INSERT');
  IF TRIGGERCHECKERFLAG = 0 THEN
    EXECUTE IMMEDIATE 'CREATE OR REPLACE TRIGGER  "TCM_DOC_INSERT" BEFORE INSERT ON TCM_TESTCASE_DOCS FOR EACH ROW BEGIN SELECT TCM_DOC_SEQ.NEXTVAL INTO :new.TESTCASE_DOC_ID FROM DUAL; END;';
    EXECUTE IMMEDIATE 'ALTER TRIGGER  "TCM_DOC_INSERT" ENABLE';
  END IF;
END;
/
DECLARE
   COLUMNCHECKERFLAG INT;
BEGIN
  SELECT COUNT(*) INTO COLUMNCHECKERFLAG FROM TCM_TESTCASE_PRIORITY;
    IF COLUMNCHECKERFLAG = 0 THEN
      INSERT INTO TCM_TESTCASE_PRIORITY(PRIORITY_NAME)
      (
          SELECT 'High'
          FROM DUAL UNION
          SELECT 'Medium'
          FROM DUAL UNION
          SELECT 'Low'
          FROM DUAL UNION
          SELECT 'Critical'
          FROM DUAL
      );
    END IF;
END;
/
DECLARE
   COLUMNCHECKERFLAG INT;
BEGIN
  SELECT COUNT(*) INTO COLUMNCHECKERFLAG FROM TCM_TESTCASE_STATUS;
    IF COLUMNCHECKERFLAG = 0 THEN
      INSERT ALL
      INTO TCM_TESTCASE_STATUS(STATUS_NAME) VALUES
      (
        'Pass'
      )
      INTO TCM_TESTCASE_STATUS(STATUS_NAME) VALUES
      (
        'Fail'
      )
      INTO TCM_TESTCASE_STATUS(STATUS_NAME) VALUES
      (
        'UnSpecified'
      )
      INTO TCM_TESTCASE_STATUS(STATUS_NAME) VALUES
      (
        'Need Analysis'
      )
SELECT * FROM DUAL;
    END IF;
END;
/
DECLARE
   COLUMNCHECKERFLAG INT;
BEGIN
  SELECT COUNT(*) INTO COLUMNCHECKERFLAG FROM TCM_TESTCASE_TYPE;
    IF COLUMNCHECKERFLAG = 0 THEN
      INSERT INTO TCM_TESTCASE_TYPE(TESTCASE_TYPE_NAME)
      (
        SELECT 'Production Validation Testing'
        FROM DUAL UNION
        SELECT 'Source to Target Testing'
        FROM DUAL UNION
        SELECT 'Application Upgrades'
        FROM DUAL UNION
        SELECT 'Metadata Testing'
        FROM DUAL UNION
        SELECT 'Data Transformation Testing'
        FROM DUAL UNION
        SELECT 'Data Completeness Testing'
        FROM DUAL UNION
        SELECT 'Incremental ETL Testing'
        FROM DUAL UNION
        SELECT 'GUI/Navigation Testing'
        FROM DUAL
      );
    END IF;
END;
/
DECLARE
   COLUMNCHECKERFLAG INT;
BEGIN
  SELECT COUNT(*) INTO COLUMNCHECKERFLAG FROM TCM_VALIDATION_TYPE;
    IF COLUMNCHECKERFLAG = 0 THEN
      INSERT INTO TCM_VALIDATION_TYPE(VALIDATION_TYPE_NAME)
      (
        SELECT 'Structure Validation'
        FROM DUAL UNION
        SELECT 'Constraint Validation'
        FROM DUAL UNION
        SELECT 'Business Rule Validation'
        FROM DUAL UNION
        SELECT 'Null Validation'
        FROM DUAL UNION
        SELECT 'Duplicate Check'
        FROM DUAL UNION
        SELECT 'Data Check'
        FROM DUAL UNION
        SELECT 'Others'
        FROM DUAL
      );
    END IF;
END;
/
DECLARE
   COLUMNCHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO COLUMNCHECKERFLAG FROM ALL_TAB_COLUMNS WHERE  OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME = UPPER('SYS_CON_ENVIRONMENTS') AND COLUMN_NAME=UPPER('IP_ADDRESS') AND DATA_LENGTH=UPPER('50');
   IF COLUMNCHECKERFLAG = 1 THEN
      EXECUTE IMMEDIATE 'ALTER TABLE SYS_CON_ENVIRONMENTS MODIFY (IP_ADDRESS VARCHAR2(250))';
   END IF;
END;
/
DECLARE
   COLUMNCHECKERFLAG INT;
   VIEWCHECKERFLAG INT;
BEGIN
SELECT COUNT(*) INTO COLUMNCHECKERFLAG FROM ALL_MVIEW_LOGS WHERE  LOG_OWNER = sys_context('userenv', 'current_schema') AND  "MASTER" = UPPER('SYSTEM_TABLE_METADATA');
SELECT COUNT(*) INTO VIEWCHECKERFLAG FROM ALL_MVIEWS WHERE  OWNER = sys_context('userenv', 'current_schema') AND  MVIEW_NAME = UPPER('MD_SYSTEM_OBJS');
    IF COLUMNCHECKERFLAG = 1 AND VIEWCHECKERFLAG = 1 THEN
	EXECUTE IMMEDIATE 'DROP MATERIALIZED VIEW MD_SYSTEM_OBJS';
	EXECUTE IMMEDIATE 'DROP MATERIALIZED VIEW LOG ON SYS_CON_ENVIRONMENTS';
	EXECUTE IMMEDIATE 'DROP MATERIALIZED VIEW LOG ON SYSTEM_TABLE_COLUMNS_METADATA';
	EXECUTE IMMEDIATE 'DROP MATERIALIZED VIEW LOG ON SYSTEM_TABLE_METADATA';
    END IF;
END;
/
DECLARE
   COLUMNCHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO COLUMNCHECKERFLAG FROM ALL_TAB_COLUMNS WHERE  OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME = UPPER('SYS_CON_ENVIRONMENTS' ) AND COLUMN_NAME=UPPER('SYSTEM_NUMBER' );
   IF COLUMNCHECKERFLAG = 1 THEN
   EXECUTE IMMEDIATE 'ALTER TABLE SYS_CON_ENVIRONMENTS  ADD SYSTEM_NUMBER_TEMP  varchar2(50) NULL';
   EXECUTE IMMEDIATE 'UPDATE SYS_CON_ENVIRONMENTS SET SYSTEM_NUMBER_TEMP = SYSTEM_NUMBER';
   EXECUTE IMMEDIATE 'ALTER TABLE SYS_CON_ENVIRONMENTS DROP COLUMN SYSTEM_NUMBER';
   EXECUTE IMMEDIATE 'ALTER TABLE SYS_CON_ENVIRONMENTS RENAME COLUMN "SYSTEM_NUMBER_TEMP" TO "SYSTEM_NUMBER"';
   END IF;
END;
/
DECLARE
   COLUMNCHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO COLUMNCHECKERFLAG FROM ALL_TAB_COLUMNS WHERE  OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME = UPPER('SYS_CON_ENVIRONMENTS' ) AND COLUMN_NAME=UPPER('CLIENT' );
   IF COLUMNCHECKERFLAG = 1 THEN
   EXECUTE IMMEDIATE 'ALTER TABLE SYS_CON_ENVIRONMENTS  ADD CLIENT_TEMP  varchar2(50) NULL';
   EXECUTE IMMEDIATE 'UPDATE SYS_CON_ENVIRONMENTS SET CLIENT_TEMP = CLIENT';
   EXECUTE IMMEDIATE 'ALTER TABLE SYS_CON_ENVIRONMENTS DROP COLUMN CLIENT';
   EXECUTE IMMEDIATE 'ALTER TABLE SYS_CON_ENVIRONMENTS RENAME COLUMN "CLIENT_TEMP" TO "CLIENT"';
   END IF;
END;
/
DECLARE
   TABLECHECKERFLAG INT;
BEGIN
SELECT COUNT(*) INTO TABLECHECKERFLAG FROM Cat_tabs WHERE CAT_TAB_NAME = 'com.ads.mm.stb.talend';
 IF TABLECHECKERFLAG = 0 THEN
	INSERT INTO CAT_TABS ( CAT_TAB_NAME, CAT_TAB_DESCRIPTION ,  DISPLAY_ORDER , TAB_VISIBILITY) VALUES ( 'com.ads.mm.stb.talend', '' , '5' , '1');
END IF;
END;
/
DECLARE
   TABLECHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO TABLECHECKERFLAG FROM CAT_TEMPLATES where cat_name = 'Talend Cat SSST SQL';
   IF TABLECHECKERFLAG = 0 THEN
    INSERT INTO CAT_TEMPLATES(CAT_NAME,CAT_DESC,CAT_IMAGE,CAT_STOCK_IMAGE,CAT_ENABLED,CAT_TAB_ID,CAT_SYSTEM_BASED,CAT_SCRIPT,CAT_ACTION,CREATED_BY,CREATED_DATE_TIME,LAST_MODIFIED_BY,LAST_MODIFIED_DATE_TIME,CAT_TEMPLATE_ORDER,CAT_SCRIPTING_LANGUAGE,CAT_OUTPUT_CONTENT_TYPE,CAT_OUTPUT_FILE_EXTENSION,CAT_ENABLE_MAPPING_DIALOG)
	(
  	SELECT 'Talend Cat SSST SQL', 'Talend Cat SSST SQL', NULL, 'defaultCatImage.png', '1', (select max(CAT_TAB_ID) from cat_tabs), '1', NULL, 'NULL', 'AnalytiX Data Services', CURRENT_TIMESTAMP, 'AnalytiX Data Services', CURRENT_TIMESTAMP, '1', 'Javascript', 'Plain Text', '.txt', 1
	FROM DUAL
);     END IF;
END;
/
DECLARE
COLUMNCHECKERFLAG INT;
TABLECHECKERFLAG INT;
BEGIN
    SELECT COUNT(*) INTO COLUMNCHECKERFLAG FROM ADS_MM_VERSION WHERE VALUE <= '5.0';
    IF COLUMNCHECKERFLAG = 1 THEN
    BEGIN
       SELECT COUNT(*) INTO TABLECHECKERFLAG FROM CAT_TABS WHERE CAT_TAB_NAME ='com.ads.mm.stb.mappingmanager';
       IF TABLECHECKERFLAG = 1 THEN
            update CAT_TABS SET  display_order=9 where display_order = 8;
            update CAT_TABS SET  display_order=9 where display_order = 7;
            update CAT_TABS SET  display_order=9 where display_order = 6;
            update CAT_TABS SET  display_order=9 where display_order = 5;
            update CAT_TABS SET  display_order=9 where display_order = 4;
            update CAT_TABS SET  display_order=9 where display_order = 3;
            update CAT_TABS SET  display_order=9 where display_order = 2;
            update CAT_TABS SET  display_order=9 where display_order = 1;
            update CAT_TABS set DISPLAY_ORDER = 1 where CAT_TAB_NAME ='com.ads.mm.stb.mappingmanager';
            update CAT_TABS set DISPLAY_ORDER = 2 where CAT_TAB_NAME ='com.ads.mm.stb.informatica';
            update CAT_TABS set DISPLAY_ORDER = 3 where CAT_TAB_NAME ='com.ads.mm.stb.datastage';
            update CAT_TABS set DISPLAY_ORDER = 4 where CAT_TAB_NAME ='com.ads.mm.stb.ssis';
            update CAT_TABS set DISPLAY_ORDER = 5 where CAT_TAB_NAME ='com.ads.mm.stb.talend';
            update CAT_TABS set DISPLAY_ORDER = 6 where CAT_TAB_NAME ='com.ads.mm.stb.odi';
            update CAT_TABS set DISPLAY_ORDER = 7 where CAT_TAB_NAME ='com.ads.mm.stb.rapidgends';
            update CAT_TABS set DISPLAY_ORDER = 8 where CAT_TAB_NAME ='com.ads.mm.stb.dataprofiling';
            EXECUTE IMMEDIATE 'MERGE INTO CAT_TABS M USING (SELECT DISTINCT CAT_TAB_ID,  CAT_TAB_NAME,   ROW_NUMBER() OVER( ORDER BY CASE DISPLAY_ORDER WHEN NULL THEN 0 WHEN 0 THEN 999999999 ELSE DISPLAY_ORDER END )AS  DISPLAY_ORDER        FROM   CAT_TABS ) U ON ( M.CAT_TAB_ID = U.CAT_TAB_ID      AND M.CAT_TAB_NAME = U.CAT_TAB_NAME ) WHEN MATCHED THEN   UPDATE SET M.DISPLAY_ORDER = U.DISPLAY_ORDER';
       END IF;
    END;
END IF;
END;
/
DECLARE
   TABLECHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO TABLECHECKERFLAG FROM ALL_TABLES WHERE OWNER = sys_context( 'userenv', 'current_schema' ) AND TABLE_NAME = UPPER('CAT_DIALOG');
   IF TABLECHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'CREATE TABLE CAT_DIALOG (
	  CAT_DIALOG_ID NUMBER  NOT NULL  ,
	  CAT_DIALOG_NAME VARCHAR2(50),
	  CAT_DIALOG_PROPERTIES VARCHAR2(4000),
	  CAT_DIALOG_DEFAULT_PROFILE_ID VARCHAR2(50),
	  CAT_ID NUMBER NOT NULL,
	  CREATED_BY VARCHAR2(50)  NOT NULL  ,
	  CREATED_DATE_TIME TIMESTAMP  NOT NULL  ,
	  LAST_MODIFIED_BY VARCHAR2(50)  NOT NULL  ,
	  LAST_MODIFIED_DATE_TIME TIMESTAMP  NOT NULL,
	PRIMARY KEY(CAT_DIALOG_ID),
	FOREIGN KEY(CAT_ID) REFERENCES CAT_TEMPLATES(CAT_ID) ON DELETE CASCADE)';
   END IF;
END;
/

DECLARE
   SEQUENCECHECKERFLAG INT;
BEGIN
    SELECT COUNT(*) INTO SEQUENCECHECKERFLAG FROM ALL_SEQUENCES WHERE SEQUENCE_OWNER = sys_context('userenv', 'current_schema') AND SEQUENCE_NAME = UPPER('CAT_DIALOG_SEQ');
   IF SEQUENCECHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'CREATE SEQUENCE   "CAT_DIALOG_SEQ"  MINVALUE 1 MAXVALUE 999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE';
   END IF;
END;
/

DECLARE
  TRIGGERCHECKERFLAG INT;
BEGIN
  SELECT COUNT(*)
  INTO TRIGGERCHECKERFLAG
  FROM all_triggers
  WHERE OWNER = sys_context('userenv', 'current_schema') AND trigger_name = UPPER('CAT_DIALOG_INSERT');
  IF TRIGGERCHECKERFLAG = 0 THEN
    EXECUTE IMMEDIATE 'CREATE OR REPLACE TRIGGER  "CAT_DIALOG_INSERT" BEFORE INSERT ON CAT_DIALOG FOR EACH ROW BEGIN SELECT CAT_DIALOG_SEQ.NEXTVAL INTO :new.CAT_DIALOG_ID FROM DUAL; END;';
    EXECUTE IMMEDIATE 'ALTER TRIGGER  "CAT_DIALOG_INSERT" ENABLE';
  END IF;
END;
/

DECLARE
   TABLECHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO TABLECHECKERFLAG FROM ALL_TABLES WHERE OWNER = sys_context( 'userenv', 'current_schema' ) AND TABLE_NAME = UPPER('CAT_DIALOG_PROFILE');
   IF TABLECHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'CREATE TABLE CAT_DIALOG_PROFILE (
		CAT_DIALOG_PROFILE_ID NUMBER  NOT NULL ,
		CAT_DIALOG_ID NUMBER  NOT NULL  ,
		CAT_DIALOG_PROFILE_NAME VARCHAR2(50),
		CREATED_BY VARCHAR2(50)  NOT NULL  ,
		CREATED_DATE_TIME TIMESTAMP  NOT NULL  ,
		LAST_MODIFIED_BY VARCHAR2(50)  NOT NULL  ,
		LAST_MODIFIED_DATE_TIME TIMESTAMP  NOT NULL,
		PRIMARY KEY(CAT_DIALOG_PROFILE_ID),
		FOREIGN KEY(CAT_DIALOG_ID) REFERENCES CAT_DIALOG(CAT_DIALOG_ID)	ON DELETE CASCADE)';
 END IF;
END;
/

DECLARE
   SEQUENCECHECKERFLAG INT;
BEGIN
    SELECT COUNT(*) INTO SEQUENCECHECKERFLAG FROM ALL_SEQUENCES WHERE SEQUENCE_OWNER = sys_context('userenv', 'current_schema') AND SEQUENCE_NAME = UPPER('CAT_DIALOG_PROFILE_SEQ');
   IF SEQUENCECHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'CREATE SEQUENCE   "CAT_DIALOG_PROFILE_SEQ"  MINVALUE 1 MAXVALUE 999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE';
   END IF;
END;
/

DECLARE
  TRIGGERCHECKERFLAG INT;
BEGIN
  SELECT COUNT(*)
  INTO TRIGGERCHECKERFLAG
  FROM all_triggers
  WHERE OWNER = sys_context('userenv', 'current_schema') AND trigger_name = UPPER('CAT_DIALOG_PROFILE_INSERT');
  IF TRIGGERCHECKERFLAG = 0 THEN
    EXECUTE IMMEDIATE 'CREATE OR REPLACE TRIGGER  "CAT_DIALOG_PROFILE_INSERT" BEFORE INSERT ON CAT_DIALOG_PROFILE FOR EACH ROW BEGIN SELECT CAT_DIALOG_PROFILE_SEQ.NEXTVAL INTO :new.CAT_DIALOG_PROFILE_ID FROM DUAL; END;';
    EXECUTE IMMEDIATE 'ALTER TRIGGER  "CAT_DIALOG_PROFILE_INSERT" ENABLE';
  END IF;
END;
/

DECLARE
   TABLECHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO TABLECHECKERFLAG FROM ALL_TABLES WHERE OWNER = sys_context( 'userenv', 'current_schema' ) AND TABLE_NAME = UPPER('CAT_DIALOG_TAB');
   IF TABLECHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'CREATE TABLE CAT_DIALOG_TAB (
		CAT_DIALOG_TAB_ID NUMBER  NOT NULL   ,
		CAT_DIALOG_PROFILE_ID NUMBER  NOT NULL  ,
		CAT_DIALOG_TAB_NAME VARCHAR2(50)    ,
		CAT_DIALOG_TAB_PROPERTIES VARCHAR2(4000)      ,
		CREATED_BY VARCHAR2(50)  NOT NULL  ,
		CREATED_DATE_TIME TIMESTAMP  NOT NULL  ,
		LAST_MODIFIED_BY VARCHAR2(50)  NOT NULL  ,
		LAST_MODIFIED_DATE_TIME TIMESTAMP  NOT NULL    ,
		PRIMARY KEY(CAT_DIALOG_TAB_ID),
		FOREIGN KEY(CAT_DIALOG_PROFILE_ID)
		REFERENCES CAT_DIALOG_PROFILE(CAT_DIALOG_PROFILE_ID)
		ON DELETE CASCADE)';
 END IF;
END;
/

DECLARE
   SEQUENCECHECKERFLAG INT;
BEGIN
    SELECT COUNT(*) INTO SEQUENCECHECKERFLAG FROM ALL_SEQUENCES WHERE SEQUENCE_OWNER = sys_context('userenv', 'current_schema') AND SEQUENCE_NAME = UPPER('CAT_DIALOG_TAB_SEQ');
   IF SEQUENCECHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'CREATE SEQUENCE   "CAT_DIALOG_TAB_SEQ"  MINVALUE 1 MAXVALUE 999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE';
   END IF;
END;
/

DECLARE
  TRIGGERCHECKERFLAG INT;
BEGIN
  SELECT COUNT(*)
  INTO TRIGGERCHECKERFLAG
  FROM all_triggers
  WHERE OWNER = sys_context('userenv', 'current_schema') AND trigger_name = UPPER('CAT_DIALOG_TAB_INSERT');
  IF TRIGGERCHECKERFLAG = 0 THEN
    EXECUTE IMMEDIATE 'CREATE OR REPLACE TRIGGER  "CAT_DIALOG_TAB_INSERT" BEFORE INSERT ON CAT_DIALOG_TAB FOR EACH ROW BEGIN SELECT CAT_DIALOG_TAB_SEQ.NEXTVAL INTO :new.CAT_DIALOG_TAB_ID FROM DUAL; END;';
    EXECUTE IMMEDIATE 'ALTER TRIGGER  "CAT_DIALOG_PROFILE_INSERT" ENABLE';
  END IF;
END;
/

DECLARE
   TABLECHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO TABLECHECKERFLAG FROM ALL_TABLES WHERE OWNER = sys_context( 'userenv', 'current_schema' ) AND TABLE_NAME = UPPER('CAT_DIALOG_OPTION');
   IF TABLECHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'CREATE TABLE CAT_DIALOG_OPTION (
		CAT_DIALOG_OPTION_ID NUMBER  NOT NULL,
		CAT_DIALOG_TAB_ID NUMBER  NOT NULL  ,
		CAT_DIALOG_OPTION_PROPERTIES VARCHAR2(4000)    ,
		CAT_DIALOG_OPTION_NAME VARCHAR2(400)      ,
		CREATED_BY VARCHAR2(50)  NOT NULL  ,
		CREATED_DATE_TIME TIMESTAMP  NOT NULL  ,
		LAST_MODIFIED_BY VARCHAR2(50)  NOT NULL  ,
		LAST_MODIFIED_DATE_TIME TIMESTAMP  NOT NULL    ,
		PRIMARY KEY(CAT_DIALOG_OPTION_ID),
		FOREIGN KEY(CAT_DIALOG_TAB_ID)
		REFERENCES CAT_DIALOG_TAB(CAT_DIALOG_TAB_ID)
		ON DELETE CASCADE)';
 END IF;
END;
/

DECLARE
   SEQUENCECHECKERFLAG INT;
BEGIN
    SELECT COUNT(*) INTO SEQUENCECHECKERFLAG FROM ALL_SEQUENCES WHERE SEQUENCE_OWNER = sys_context('userenv', 'current_schema') AND SEQUENCE_NAME = UPPER('CAT_DIALOG_OPTION_SEQ');
   IF SEQUENCECHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'CREATE SEQUENCE   "CAT_DIALOG_OPTION_SEQ"  MINVALUE 1 MAXVALUE 999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE';
   END IF;
END;
/

DECLARE
  TRIGGERCHECKERFLAG INT;
BEGIN
  SELECT COUNT(*)
  INTO TRIGGERCHECKERFLAG
  FROM all_triggers
  WHERE OWNER = sys_context('userenv', 'current_schema') AND trigger_name = UPPER('CAT_DIALOG_OPTION_INSERT');
  IF TRIGGERCHECKERFLAG = 0 THEN
    EXECUTE IMMEDIATE 'CREATE OR REPLACE TRIGGER  "CAT_DIALOG_OPTION_INSERT" BEFORE INSERT ON CAT_DIALOG_OPTION FOR EACH ROW BEGIN SELECT CAT_DIALOG_OPTION_SEQ.NEXTVAL INTO :new.CAT_DIALOG_OPTION_ID FROM DUAL; END;';
    EXECUTE IMMEDIATE 'ALTER TRIGGER  "CAT_DIALOG_PROFILE_INSERT" ENABLE';
  END IF;
END;
/

-- DECLARE
--    INDEXCHECKERFLAG INT;
-- BEGIN
--     SELECT COUNT(*) INTO INDEXCHECKERFLAG FROM USER_INDEXES WHERE INDEX_NAME = UPPER('CAT_DIALOG_PROFILE_INDX');
--    IF INDEXCHECKERFLAG = 0 THEN
--       EXECUTE IMMEDIATE 'CREATE INDEX "CAT_DIALOG_PROFILE_INDX" ON "CAT_DIALOG_PROFILE"("CAT_DIALOG_PROFILE_ID")';
--     END IF;
-- END;
-- /
--
-- DECLARE
--    INDEXCHECKERFLAG INT;
-- BEGIN
--     SELECT COUNT(*) INTO INDEXCHECKERFLAG FROM USER_INDEXES WHERE INDEX_NAME = UPPER('CAT_DIALOG_INDX');
--    IF INDEXCHECKERFLAG = 0 THEN
--       EXECUTE IMMEDIATE 'CREATE INDEX "CAT_DIALOG_INDX" ON "CAT_DIALOG"("CAT_DIALOG_ID")';
--     END IF;
-- END;
-- /
--
-- DECLARE
--    INDEXCHECKERFLAG INT;
-- BEGIN
--     SELECT COUNT(*) INTO INDEXCHECKERFLAG FROM USER_INDEXES WHERE INDEX_NAME = UPPER('CAT_DIALOG_TAB_INDX');
--    IF INDEXCHECKERFLAG = 0 THEN
--       EXECUTE IMMEDIATE 'CREATE INDEX "CAT_DIALOG_TAB_INDX" ON "CAT_DIALOG_TAB"("CAT_DIALOG_TAB_ID")';
--     END IF;
-- END;
-- /
--
-- DECLARE
--    INDEXCHECKERFLAG INT;
-- BEGIN
--     SELECT COUNT(*) INTO INDEXCHECKERFLAG FROM USER_INDEXES WHERE INDEX_NAME = UPPER('CAT_DIALOG_OPTION_INDX');
--    IF INDEXCHECKERFLAG = 0 THEN
--       EXECUTE IMMEDIATE 'CREATE INDEX "CAT_DIALOG_OPTION_INDX" ON "CAT_DIALOG_OPTION"("CAT_DIALOG_OPTION_ID")';
--     END IF;
-- END;
-- /

DECLARE
   TABLECHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO TABLECHECKERFLAG FROM ALL_OBJECTS WHERE OWNER = sys_context('userenv', 'current_schema') AND OBJECT_TYPE = 'PROCEDURE' AND OBJECT_NAME = UPPER('CAT_OPTION_DATA_MGRN_PROC');
   IF TABLECHECKERFLAG = 1 THEN
      EXECUTE IMMEDIATE 'DROP PROCEDURE CAT_OPTION_DATA_MGRN_PROC';
   END IF;
END;
/

CREATE OR REPLACE PROCEDURE CAT_OPTION_DATA_MGRN_PROC
IS
TEMP_CAT_ID INT;
CAT_COUNT INT;
INITIAL_VALUE INT := 1;
TEMP_CAT_DIALOG_ID INT;
TEMP_CAT_DIALOG_PROFILE_ID INT;
TEMP_CAT_DIALOG_TAB_ID INT;
TEMP_CAT_DIALOG_OPTION_LIST VARCHAR2(4000);
TEMP_CAT_DIALOG_OPTION_NAME VARCHAR2(4000);
TEMP_ADMIN VARCHAR2(100) := 'Administrator';
DEFAULT_DIALOG VARCHAR2(100) := 'DefaultDialog';
DEFAULT_PROFILE VARCHAR2(100) := 'Default';
DEFAULT_TAB VARCHAR2(100) := 'DefaultTab';

CURSOR all_cats IS
SELECT CAT_ID FROM CAT_TEMPLATES ORDER BY CAT_ID;

TYPE CUR_TYPE_CAT_ID IS TABLE OF CAT_TEMPLATES.CAT_ID%TYPE;
TEMP_CAT_IDS CUR_TYPE_CAT_ID;
inx1 PLS_INTEGER;
BEGIN

    OPEN all_cats;
    FETCH all_cats BULK COLLECT INTO TEMP_CAT_IDS;
    CLOSE all_cats;

    FOR inx1 IN 1..TEMP_CAT_IDS.count
    LOOP
        TEMP_CAT_ID := TEMP_CAT_IDS(inx1);
        INSERT INTO CAT_DIALOG(CAT_DIALOG_NAME,CAT_DIALOG_PROPERTIES,CAT_ID,CREATED_BY,CREATED_DATE_TIME,LAST_MODIFIED_BY,LAST_MODIFIED_DATE_TIME) VALUES(DEFAULT_DIALOG,'{"fheight":400,"fwidth":600,"flabelwidth":50,"fcontrolwidth":50}',TEMP_CAT_ID,TEMP_ADMIN,sysdate,TEMP_ADMIN,sysdate);
        COMMIT;
        SELECT CAT_DIALOG_ID INTO TEMP_CAT_DIALOG_ID FROM CAT_DIALOG WHERE CAT_DIALOG_NAME = DEFAULT_DIALOG AND CAT_DIALOG_ID = (SELECT MAX(CAT_DIALOG_ID) FROM CAT_DIALOG);
        INSERT INTO CAT_DIALOG_PROFILE(CAT_DIALOG_ID,CAT_DIALOG_PROFILE_NAME,CREATED_BY,CREATED_DATE_TIME,LAST_MODIFIED_BY,LAST_MODIFIED_DATE_TIME) VALUES (TEMP_CAT_DIALOG_ID,DEFAULT_PROFILE,TEMP_ADMIN,sysdate,TEMP_ADMIN,sysdate);
        COMMIT;
        SELECT CAT_DIALOG_PROFILE_ID INTO TEMP_CAT_DIALOG_PROFILE_ID FROM CAT_DIALOG_PROFILE WHERE CAT_DIALOG_PROFILE_NAME = DEFAULT_PROFILE AND CAT_DIALOG_PROFILE_ID  = (SELECT MAX(CAT_DIALOG_PROFILE_ID) FROM CAT_DIALOG_PROFILE);
        UPDATE CAT_DIALOG SET CAT_DIALOG_DEFAULT_PROFILE_ID = TEMP_CAT_DIALOG_PROFILE_ID WHERE CAT_DIALOG_ID = TEMP_CAT_DIALOG_ID;
        COMMIT;
        INSERT INTO CAT_DIALOG_TAB(CAT_DIALOG_PROFILE_ID,CAT_DIALOG_TAB_NAME,CAT_DIALOG_TAB_PROPERTIES,CREATED_BY,CREATED_DATE_TIME,LAST_MODIFIED_BY,LAST_MODIFIED_DATE_TIME) VALUES(TEMP_CAT_DIALOG_PROFILE_ID,DEFAULT_TAB,'',TEMP_ADMIN,sysdate,TEMP_ADMIN,sysdate);
        COMMIT;
        SELECT CAT_DIALOG_TAB_ID INTO TEMP_CAT_DIALOG_TAB_ID FROM CAT_DIALOG_TAB WHERE CAT_DIALOG_TAB_NAME = DEFAULT_TAB AND CAT_DIALOG_TAB_ID = (SELECT MAX(CAT_DIALOG_TAB_ID) FROM CAT_DIALOG_TAB);
                INSERT INTO CAT_DIALOG_OPTION(CAT_DIALOG_TAB_ID,CAT_DIALOG_OPTION_NAME,CAT_DIALOG_OPTION_PROPERTIES,CREATED_BY,CREATED_DATE_TIME,LAST_MODIFIED_BY,LAST_MODIFIED_DATE_TIME)
                SELECT TEMP_CAT_DIALOG_TAB_ID, CAT_OPTION_NAME, replace('{"name":"'|| CAT_OPTION_NAME || '",'
                || '"type":"'||catop.CAT_OPTION_TYPES
                || '","title":"' || catop.CAT_OPTION_TITLE
                ||'","catOptionOrder":'|| COALESCE (LTRIM(TO_NUMBER(catop.CAT_OPTION_ORDER)),'0')
                ||',"defaultValue":"' ||(CASE WHEN (catop.CAT_OPTION_TYPES = 'Combo Box' OR catop.CAT_OPTION_TYPES = 'Radio') THEN ' ' ELSE COALESCE(catop.CAT_OPTION_DEFAULT_VALUE,' ') END)
                ||'","list":"'||(CASE WHEN (catop.CAT_OPTION_TYPES = 'Combo Box' OR catop.CAT_OPTION_TYPES = 'Radio') THEN COALESCE (catop.CAT_OPTION_DEFAULT_VALUE,'') ELSE '' END) || '"}','\','\\'),TEMP_ADMIN,sysdate,TEMP_ADMIN,sysdate
                FROM CAT_TEMPLATE_OPTIONS catop JOIN CAT_TEMPLATES ct on catop.cat_id = ct.CAT_ID AND CT.CAT_ID = TEMP_CAT_ID;
                COMMIT;
          INITIAL_VALUE := INITIAL_VALUE + 1;
    END LOOP;
END;
/
--Have to put if condition here
DECLARE
   TABLECHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO TABLECHECKERFLAG FROM CAT_DIALOG;
   IF TABLECHECKERFLAG = 0 THEN
      BEGIN
      CAT_OPTION_DATA_MGRN_PROC();
      END;
    END IF;
END;
/
DECLARE
   COLUMNCHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO COLUMNCHECKERFLAG FROM ALL_TAB_COLUMNS WHERE  OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME = UPPER('SYSTEM_TABLE_METADATA') AND COLUMN_NAME=UPPER('ROOT_TABLE');
   IF COLUMNCHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'ALTER TABLE SYSTEM_TABLE_METADATA ADD ROOT_TABLE CHAR(1) DEFAULT ''Y'' NULL';
      EXECUTE IMMEDIATE 'UPDATE SYSTEM_TABLE_METADATA SET ROOT_TABLE = ''Y'' WHERE ROOT_TABLE IS NULL';
   END IF;
END;
/

DECLARE
TABLECHECKERFLAG INT;
BEGIN
SELECT COUNT(*) INTO TABLECHECKERFLAG FROM ALL_TABLES WHERE OWNER = sys_context( 'userenv', 'current_schema' ) AND TABLE_NAME=UPPER('CGT_TEMPLATES');
IF TABLECHECKERFLAG = 1 THEN
EXECUTE IMMEDIATE'DROP TABLE CGT_TEMPLATES';
END IF;
END;
/
DECLARE
   COLUMNCHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO COLUMNCHECKERFLAG FROM RM_RELEASE WHERE RELEASE_DATE IS NULL;
   IF COLUMNCHECKERFLAG > 0 THEN
      EXECUTE IMMEDIATE 'UPDATE RM_RELEASE SET RELEASE_DATE = TO_DATE(''12/31/9999'',''MM/DD/YYYY'') WHERE RELEASE_DATE IS NULL';
   END IF;
END;
/
DECLARE
   TABLECHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO TABLECHECKERFLAG FROM ALL_CONS_COLUMNS WHERE OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME = UPPER('RM_RELEASE') AND COLUMN_NAME = UPPER('RELEASESTATUSID') AND CONSTRAINT_NAME = UPPER('FK_RM_REL_STAT_ID');
   IF TABLECHECKERFLAG = 1 THEN
      EXECUTE IMMEDIATE 'ALTER TABLE RM_RELEASE DROP CONSTRAINT FK_RM_REL_STAT_ID';
      EXECUTE IMMEDIATE 'ALTER TABLE RM_RELEASE ADD (CONSTRAINT FK_RM_REL_STAT_ID FOREIGN KEY (RELEASESTATUSID) REFERENCES RM_MIGRATIONSTATUS(MIGRATIONSTATUSID))';
   END IF;
END;
/
DECLARE
   TABLECHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO TABLECHECKERFLAG FROM ALL_CONS_COLUMNS WHERE OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME = UPPER('RM_MIGRATIONOBJECT') AND COLUMN_NAME = UPPER('MIGRATIONSTATUSID') AND CONSTRAINT_NAME = UPPER('FK_RM_MIG_STAT_ID');
   IF TABLECHECKERFLAG = 1 THEN
      EXECUTE IMMEDIATE 'ALTER TABLE RM_MIGRATIONOBJECT DROP CONSTRAINT FK_RM_MIG_STAT_ID';
      EXECUTE IMMEDIATE 'ALTER TABLE RM_MIGRATIONOBJECT ADD (CONSTRAINT FK_RM_MIG_STAT_ID FOREIGN KEY (MIGRATIONSTATUSID) REFERENCES RM_MIGRATIONSTATUS(MIGRATIONSTATUSID))';
   END IF;
END;
/
DECLARE
   COLUMNCHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO COLUMNCHECKERFLAG FROM ALL_TAB_COLUMNS WHERE  OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME = UPPER('SYS_CON_ENVIRONMENTS') AND COLUMN_NAME=UPPER('MODEL_FILE');
   IF COLUMNCHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'ALTER TABLE SYS_CON_ENVIRONMENTS ADD MODEL_FILE BLOB NULL';
   END IF;
END;
/
DECLARE
   COLUMNCHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO COLUMNCHECKERFLAG FROM ALL_TAB_COLUMNS WHERE  OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME = UPPER('SYS_CON_ENVIRONMENTS') AND COLUMN_NAME=UPPER('MODEL_FILE_NAME');
   IF COLUMNCHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'ALTER TABLE SYS_CON_ENVIRONMENTS ADD MODEL_FILE_NAME VARCHAR2(255) NULL';
   END IF;
END;
/
-- CREATE OR REPLACE FORCE VIEW  "MAP_SPEC_SUMMARY_V" ("PROJ_ID","MAP_ID","MAP_SEQ_ID", "ROW_ORDER", "EXTENDED_BUS_RULE",             "SRC_SYSTEM_ID",         "SRC_SYSTEM_NAME",                "SRC_SYSTEM_ENVIRONMENT_NAME",              "SRC_TABLE_NAME",    "SRC_COLUMN_NAME",                "SRC_COL_DATATYPE", "SRC_COL_LENGTH",     "SRC_COL_PRECISION",                "SRC_COL_SCALE",                "SRC_COL_DB_DEFAULT_VALUE",           "SRC_COL_DEF",  "SRC_COL_IDENTITY_FLAG",                "SRC_COL_NULLABLE_FLAG",    "SRC_PERCENT_NULL_VALUE",                "SRC_NATURAL_KEY_FLAG",                "SRC_MIN_VALUE",       "SRC_MAX_VALUE",      "TGT_SYSTEM_ID",         "TGT_SYSTEM_NAME",                "TGT_SYSTEM_ENVIRONMENT_NAME",              "TGT_TABLE_NAME",    "TGT_COLUMN_NAME",                "TGT_COL_DATATYPE",                "TGT_COL_LENGTH",     "TGT_COL_PRECISION",               "TGT_COL_SCALE",                "TGT_COL_ETL_DEFAULT_VALUE",         "TGT_COL_DEF",  "TGT_NATURAL_KEY_FLAG",                "TGT_PRIMARY_KEY_FLAG",   "LOOKUP_COLUMN",   "TRNSF_LOOKUP_CONDITION",   "LOOKUP_ON",            "BUSINESS_RULE",                "COL_MAP_COMPLETE_FLAG",                "LAST_MODIFIED_BY",  "LAST_MODIFIED_DATE_TIME",                "CREATED_BY", "CREATED_DATETIME", "USER_DEFINATION1", "USER_DEFINATION2", "USER_DEFINATION3",                "USER_DEFINATION4", "MAP_SPECROWCOMMENTS", "TGT_COL_NULLABLE_FLAG",   "SRC_SDI_FLAG",                "SRC_SDI_DESCRIPTION",            "TGT_SDI_FLAG",            "TGT_SDI_DESCRIPTION",           "PSUEDO_CODE") AS
--     SELECT proj_id, map_id, map_seq_id, row_order, extended_bus_rule, src_system_id, src_system_name, src_system_environment_name,
--     src_table_name, src_column_name, src_col_datatype, src_col_length, src_col_precision, src_col_scale,
--     src_col_db_default_value, src_col_def, src_col_identity_flag, src_col_nullable_flag, src_percent_null_value,
--     src_natural_key_flag, src_min_value, src_max_value, tgt_system_id, tgt_system_name, tgt_system_environment_name,
--     tgt_table_name, tgt_column_name, tgt_col_datatype, tgt_col_length, tgt_col_precision, tgt_col_scale,
--     tgt_col_etl_default_value, tgt_col_def, tgt_natural_key_flag, tgt_primary_key_flag, LOOKUP_COLUMN,trnsf_lookup_condition,LOOKUP_ON,
--     business_rule, col_map_complete_flag, ms.last_modified_by, ms.last_modified_date_time, ms.created_by, ms.created_datetime,
--     user_defination1, user_defination2, user_defination3, user_defination4, map_specrowcomments, tgt_col_nullable_flag,
--     src_sdi_flag, src_sdi_description, tgt_sdi_flag, tgt_sdi_description,
--     NVL(t.psuedo_code, ' ') psuedo_code
--     FROM MAPPING_SPECIFICATION ms
--     LEFT OUTER JOIN transformations t ON to_char(ms.business_rule) = t.transf_name;
-- /
DECLARE
COLUMNCHECKERFLAG INT;
BEGIN
SELECT COUNT(*) INTO COLUMNCHECKERFLAG FROM ALL_TAB_COLUMNS WHERE  OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME = UPPER('RM_PROJECT') AND COLUMN_NAME=UPPER('CREATED_BY');
  IF COLUMNCHECKERFLAG > 0 THEN
   EXECUTE IMMEDIATE 'ALTER TABLE RM_PROJECT DROP (CREATED_BY,CREATED_DATE_TIME,LAST_MODIFIED_BY,LAST_MODIFIED_DATE_TIME)';
   EXECUTE IMMEDIATE 'ALTER TABLE RM_RELEASE DROP (CREATED_BY,CREATED_DATE_TIME,LAST_MODIFIED_BY,LAST_MODIFIED_DATE_TIME)';
   EXECUTE IMMEDIATE 'ALTER TABLE RM_MIGRATIONOBJECT DROP (CREATED_BY,CREATED_DATE_TIME,LAST_MODIFIED_BY,LAST_MODIFIED_DATE_TIME)';
END IF;
END;
/
DECLARE
TABLECHECKERFLAG INT;
BEGIN
  SELECT COUNT(*) INTO TABLECHECKERFLAG FROM ALL_TABLES WHERE OWNER = sys_context( 'userenv', 'current_schema' ) AND TABLE_NAME = UPPER('MAPPING_DETAILS');
IF TABLECHECKERFLAG = 1 THEN
EXECUTE IMMEDIATE   'ALTER TABLE MAPPING_DETAILS ADD TEMP_SE_QUERY CLOB';
EXECUTE IMMEDIATE   'UPDATE MAPPING_DETAILS SET TEMP_SE_QUERY=SOURCE_EXTRACT_QUERY';
EXECUTE IMMEDIATE   'ALTER TABLE MAPPING_DETAILS DROP COLUMN SOURCE_EXTRACT_QUERY';
EXECUTE IMMEDIATE   'ALTER TABLE MAPPING_DETAILS RENAME COLUMN TEMP_SE_QUERY to SOURCE_EXTRACT_QUERY';
EXECUTE IMMEDIATE   'COMMIT';
  END IF;
END;
/
DECLARE
TABLECHECKERFLAG INT;
BEGIN
  SELECT COUNT(*) INTO TABLECHECKERFLAG FROM ALL_TABLES WHERE OWNER = sys_context( 'userenv', 'current_schema' ) AND TABLE_NAME = UPPER('MAPPING_DETAILS');
IF TABLECHECKERFLAG = 1 THEN
EXECUTE IMMEDIATE   'ALTER TABLE MAPPING_DETAILS ADD TEMP_SR_DESC CLOB';
EXECUTE IMMEDIATE   'UPDATE MAPPING_DETAILS SET TEMP_SR_DESC=SOURCE_EXTRACT_DESCRIPTION';
EXECUTE IMMEDIATE   'ALTER TABLE MAPPING_DETAILS DROP COLUMN SOURCE_EXTRACT_DESCRIPTION';
EXECUTE IMMEDIATE   'ALTER TABLE MAPPING_DETAILS RENAME COLUMN TEMP_SR_DESC to SOURCE_EXTRACT_DESCRIPTION';
EXECUTE IMMEDIATE   'COMMIT';
  END IF;
END;
/
DECLARE
   TABLECHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO TABLECHECKERFLAG FROM ALL_TABLES WHERE OWNER = sys_context( 'userenv', 'current_schema' ) AND TABLE_NAME = UPPER('CAT_TEMPLATE_VERSION');
   IF TABLECHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'CREATE TABLE "CAT_TEMPLATE_VERSION"
        (
          "CAT_ID"                 NUMBER(*,0) NOT NULL ENABLE,
          "VERSION_DESCRIPTION"               VARCHAR2(500) NULL,
          "IS_VERSION"      CHAR DEFAULT 0 NOT NULL,
          "VERSIONED_BY"       VARCHAR2(50) NOT NULL,
          "VERSIONED_DATE_TIME" TIMESTAMP (6) NOT NULL
        )';
   END IF;
END;
/
DECLARE
COLUMNCHECKERFLAG INT;
BEGIN
SELECT COUNT(*) INTO COLUMNCHECKERFLAG FROM ALL_TAB_COLUMNS WHERE  OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME = UPPER('MAPPING_DETAILS') AND COLUMN_NAME = UPPER('USER_DEFINED_FIELD6');
 IF COLUMNCHECKERFLAG = 0 THEN
  EXECUTE IMMEDIATE 'ALTER TABLE MAPPING_DETAILS ADD
   (USER_DEFINED_FIELD1 VARCHAR2(4000),
    USER_DEFINED_FIELD2  VARCHAR2(4000),
    USER_DEFINED_FIELD3  VARCHAR2(4000),
    USER_DEFINED_FIELD4  VARCHAR2(4000),
    USER_DEFINED_FIELD5  VARCHAR2(4000),
    USER_DEFINED_FIELD6  VARCHAR2(4000),
    USER_DEFINED_FIELD7  VARCHAR2(4000),
    USER_DEFINED_FIELD8  VARCHAR2(4000),
    USER_DEFINED_FIELD9  VARCHAR2(4000),
    USER_DEFINED_FIELD10 VARCHAR2(4000),
    USER_DEFINED_FIELD11 VARCHAR2(4000),
    USER_DEFINED_FIELD12 VARCHAR2(4000),
    USER_DEFINED_FIELD13 VARCHAR2(4000),
    USER_DEFINED_FIELD14 VARCHAR2(4000),
    USER_DEFINED_FIELD15 VARCHAR2(4000),
    USER_DEFINED_FIELD16 VARCHAR2(4000),
    USER_DEFINED_FIELD17 VARCHAR2(4000),
    USER_DEFINED_FIELD18 VARCHAR2(4000),
    USER_DEFINED_FIELD19 VARCHAR2(4000),
    USER_DEFINED_FIELD20 VARCHAR2(4000),
    USER_DEFINED_FIELD21 VARCHAR2(4000),
    USER_DEFINED_FIELD22 VARCHAR2(4000),
    USER_DEFINED_FIELD23 VARCHAR2(4000),
    USER_DEFINED_FIELD24 VARCHAR2(4000),
    USER_DEFINED_FIELD25 VARCHAR2(4000),
    USER_DEFINED_FIELD26 VARCHAR2(4000),
    USER_DEFINED_FIELD27 VARCHAR2(4000),
    USER_DEFINED_FIELD28 VARCHAR2(4000),
    USER_DEFINED_FIELD29 VARCHAR2(4000),
    USER_DEFINED_FIELD30 VARCHAR2(4000),
    USER_DEFINED_FIELD31 VARCHAR2(4000),
    USER_DEFINED_FIELD32 VARCHAR2(4000),
    USER_DEFINED_FIELD33 VARCHAR2(4000),
    USER_DEFINED_FIELD34 VARCHAR2(4000),
    USER_DEFINED_FIELD35 VARCHAR2(4000),
    USER_DEFINED_FIELD36 VARCHAR2(4000),
    USER_DEFINED_FIELD37 VARCHAR2(4000),
    USER_DEFINED_FIELD38 VARCHAR2(4000),
    USER_DEFINED_FIELD39 VARCHAR2(4000),
    USER_DEFINED_FIELD40 VARCHAR2(4000))';
  END IF;
END;
/
DECLARE
TABLECHECKERFLAG INT;
COLUMNCHECKERFLAG INT;
BEGIN
SELECT COUNT(*) INTO COLUMNCHECKERFLAG FROM ALL_TAB_COLUMNS WHERE  OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME = UPPER('MAPPING_DETAILS') AND COLUMN_NAME = UPPER('USER_DEFINED_FIELD1');
 IF COLUMNCHECKERFLAG = 1 THEN
  SELECT COUNT(*) INTO TABLECHECKERFLAG FROM ALL_TABLES WHERE OWNER = sys_context( 'userenv', 'current_schema' ) AND TABLE_NAME = UPPER('MAPPING_USER_DEFINED_FIELDS');
   IF TABLECHECKERFLAG = 1 THEN
   EXECUTE IMMEDIATE 'UPDATE MAPPING_DETAILS MD SET
       (MD.USER_DEFINED_FIELD1,
        MD.USER_DEFINED_FIELD2,
        MD.USER_DEFINED_FIELD3,
        MD.USER_DEFINED_FIELD4,
        MD.USER_DEFINED_FIELD5,
        MD.USER_DEFINED_FIELD6,
        MD.USER_DEFINED_FIELD7,
        MD.USER_DEFINED_FIELD8,
        MD.USER_DEFINED_FIELD9,
        MD.USER_DEFINED_FIELD10,
        MD.USER_DEFINED_FIELD11,
        MD.USER_DEFINED_FIELD12,
        MD.USER_DEFINED_FIELD13,
        MD.USER_DEFINED_FIELD14,
        MD.USER_DEFINED_FIELD15,
        MD.USER_DEFINED_FIELD16,
        MD.USER_DEFINED_FIELD17,
        MD.USER_DEFINED_FIELD18,
        MD.USER_DEFINED_FIELD19,
        MD.USER_DEFINED_FIELD20,
        MD.USER_DEFINED_FIELD21,
        MD.USER_DEFINED_FIELD22,
        MD.USER_DEFINED_FIELD23,
        MD.USER_DEFINED_FIELD24,
        MD.USER_DEFINED_FIELD25,
        MD.USER_DEFINED_FIELD26,
        MD.USER_DEFINED_FIELD27,
        MD.USER_DEFINED_FIELD28,
        MD.USER_DEFINED_FIELD29,
        MD.USER_DEFINED_FIELD30,
        MD.USER_DEFINED_FIELD31,
        MD.USER_DEFINED_FIELD32,
        MD.USER_DEFINED_FIELD33,
        MD.USER_DEFINED_FIELD34,
        MD.USER_DEFINED_FIELD35,
        MD.USER_DEFINED_FIELD36,
        MD.USER_DEFINED_FIELD37,
	MD.USER_DEFINED_FIELD38,
        MD.USER_DEFINED_FIELD39,
        MD.USER_DEFINED_FIELD40)=(
	SELECT MUDF.USER_DEFINED_FIELD1,
        MUDF.USER_DEFINED_FIELD2,
        MUDF.USER_DEFINED_FIELD3,
        MUDF.USER_DEFINED_FIELD4,
        MUDF.USER_DEFINED_FIELD5,
        MUDF.USER_DEFINED_FIELD6,
        MUDF.USER_DEFINED_FIELD7,
        MUDF.USER_DEFINED_FIELD8,
        MUDF.USER_DEFINED_FIELD9,
        MUDF.USER_DEFINED_FIELD10,
        MUDF.USER_DEFINED_FIELD11,
        MUDF.USER_DEFINED_FIELD12,
        MUDF.USER_DEFINED_FIELD13,
        MUDF.USER_DEFINED_FIELD14,
        MUDF.USER_DEFINED_FIELD15,
        MUDF.USER_DEFINED_FIELD16,
        MUDF.USER_DEFINED_FIELD17,
        MUDF.USER_DEFINED_FIELD18,
        MUDF.USER_DEFINED_FIELD19,
        MUDF.USER_DEFINED_FIELD20,
        MUDF.USER_DEFINED_FIELD21,
        MUDF.USER_DEFINED_FIELD22,
        MUDF.USER_DEFINED_FIELD23,
        MUDF.USER_DEFINED_FIELD24,
        MUDF.USER_DEFINED_FIELD25,
        MUDF.USER_DEFINED_FIELD26,
        MUDF.USER_DEFINED_FIELD27,
        MUDF.USER_DEFINED_FIELD28,
        MUDF.USER_DEFINED_FIELD29,
        MUDF.USER_DEFINED_FIELD30,
        MUDF.USER_DEFINED_FIELD31,
        MUDF.USER_DEFINED_FIELD32,
        MUDF.USER_DEFINED_FIELD33,
        MUDF.USER_DEFINED_FIELD34,
        MUDF.USER_DEFINED_FIELD35,
        MUDF.USER_DEFINED_FIELD36,
        MUDF.USER_DEFINED_FIELD37,
	MUDF.USER_DEFINED_FIELD38,
        MUDF.USER_DEFINED_FIELD39,
        MUDF.USER_DEFINED_FIELD40 FROM MAPPING_USER_DEFINED_FIELDS MUDF WHERE MUDF.MAP_ID=MD.MAP_ID)';
    EXECUTE IMMEDIATE 'COMMIT';
   END IF;
END IF;
END;
/
DECLARE
TABLECHECKERFLAG INT;
BEGIN
  SELECT COUNT(*) INTO TABLECHECKERFLAG FROM ALL_TABLES WHERE OWNER = sys_context( 'userenv', 'current_schema' ) AND TABLE_NAME = UPPER('MAPPING_USER_DEFINED_FIELDS');
   IF TABLECHECKERFLAG = 1 THEN
    EXECUTE IMMEDIATE 'DROP TABLE MAPPING_USER_DEFINED_FIELDS';
  END IF;
END;
/
DECLARE
COLUMNCHECKERFLAG INT;
BEGIN
SELECT COUNT(*) INTO COLUMNCHECKERFLAG FROM ALL_TAB_COLUMNS WHERE  OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME = UPPER('SUBJECT_DETAILS') AND COLUMN_NAME = UPPER('USER_FIELD1');
IF COLUMNCHECKERFLAG = 0 THEN
  EXECUTE IMMEDIATE 'ALTER TABLE SUBJECT_DETAILS ADD
        (USER_FIELD1 VARCHAR2(4000),
	USER_FIELD2 VARCHAR2(4000),
	USER_FIELD3 VARCHAR2(4000),
	USER_FIELD4 VARCHAR2(4000),
	USER_FIELD5 VARCHAR2(4000),
	USER_FIELD6 VARCHAR2(4000),
	USER_FIELD7 VARCHAR2(4000),
	USER_FIELD8 VARCHAR2(4000),
	USER_FIELD9 VARCHAR2(4000),
	USER_FIELD10 VARCHAR2(4000),
	USER_FIELD11 VARCHAR2(4000),
	USER_FIELD12 VARCHAR2(4000),
	USER_FIELD13 VARCHAR2(4000),
	USER_FIELD14 VARCHAR2(4000),
	USER_FIELD15 VARCHAR2(4000))';
      END IF;
END;
/
DECLARE
TABLECHECKERFLAG INT;
COLUMNCHECKERFLAG INT;
BEGIN
SELECT COUNT(*) INTO COLUMNCHECKERFLAG FROM ALL_TAB_COLUMNS WHERE  OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME = UPPER('SUBJECT_DETAILS') AND COLUMN_NAME = UPPER('USER_FIELD1');
IF COLUMNCHECKERFLAG = 1 THEN
  SELECT COUNT(*) INTO TABLECHECKERFLAG FROM ALL_TABLES WHERE OWNER = sys_context( 'userenv', 'current_schema' ) AND TABLE_NAME = UPPER('SUBJECT_USER_FIELDS');
   IF TABLECHECKERFLAG = 1 THEN
   BEGIN
   SAVEPOINT MOVE_DATA_TO_SUBJECT_DETAILS;
   --dbms_output.put_line('MOVING  START =>');
   EXECUTE IMMEDIATE 'UPDATE SUBJECT_DETAILS SD SET
       (SD.USER_FIELD1,
        SD.USER_FIELD2,
        SD.USER_FIELD3,
        SD.USER_FIELD4,
        SD.USER_FIELD5,
        SD.USER_FIELD6,
        SD.USER_FIELD7,
        SD.USER_FIELD8,
        SD.USER_FIELD9,
        SD.USER_FIELD10,
        SD.USER_FIELD11,
        SD.USER_FIELD12,
        SD.USER_FIELD13,
        SD.USER_FIELD14,
        SD.USER_FIELD15)=(
	SELECT SUDF.USER_FIELD1,
        SUDF.USER_FIELD2,
        SUDF.USER_FIELD3,
        SUDF.USER_FIELD4,
        SUDF.USER_FIELD5,
        SUDF.USER_FIELD6,
        SUDF.USER_FIELD7,
        SUDF.USER_FIELD8,
        SUDF.USER_FIELD9,
        SUDF.USER_FIELD10,
        SUDF.USER_FIELD11,
        SUDF.USER_FIELD12,
        SUDF.USER_FIELD13,
        SUDF.USER_FIELD14,
        SUDF.USER_FIELD15
        FROM SUBJECT_USER_FIELDS SUDF WHERE SUDF.SUBJECT_ID = SD.SUBJECT_ID AND ROWNUM = 1)';
        --dbms_output.put_line('MOVING END =>');
        EXECUTE IMMEDIATE 'COMMIT';
        --dbms_output.put_line('COMMITTED =>');
        BEGIN
        SELECT COUNT(*) INTO TABLECHECKERFLAG FROM ALL_TABLES WHERE OWNER = sys_context( 'userenv', 'current_schema' ) AND TABLE_NAME = UPPER('SUBJECT_USER_FIELDS');
          IF TABLECHECKERFLAG = 1 THEN
              --dbms_output.put_line('DROP =>');
              EXECUTE IMMEDIATE 'DROP TABLE SUBJECT_USER_FIELDS';
          END IF;
        END;
        EXCEPTION
        WHEN TOO_MANY_ROWS THEN
          --dbms_output.put_line('IF BLOCK =>');
          ROLLBACK TO MOVE_DATA_TO_SUBJECT_DETAILS;
        WHEN OTHERS THEN
        --dbms_output.put_line('ELSE BLOCK =>');
        ROLLBACK TO MOVE_DATA_TO_SUBJECT_DETAILS;
       END;
    END IF;
END IF;
END;
/
DECLARE
DATAEXISTANCE INT;
BEGIN
    SELECT COUNT(*) INTO DATAEXISTANCE FROM STATE_DETAILS WHERE UPPER(STATENAME) = UPPER('In Progress');
    IF DATAEXISTANCE = 0 THEN
        INSERT INTO STATE_DETAILS (STATENAME,CREATED_BY,CREATED_DATE_TIME,LAST_MODIFIED_BY,LAST_MODIFIED_DATE_TIME) VALUES ('In Progress','SYSTEM',TO_DATE(SYSDATE,'DD-MM-YY HH24:MI:SS'),'SYSTEM',TO_DATE(SYSDATE,'DD-MM-YY HH24:MI:SS'));
        COMMIT;
    END IF;
END;
/
DECLARE
DATAEXISTANCE INT;
BEGIN
    SELECT COUNT(*) INTO DATAEXISTANCE FROM STATE_DETAILS WHERE UPPER(STATENAME) = UPPER('Approved');
    IF DATAEXISTANCE = 0 THEN
        INSERT INTO STATE_DETAILS (STATENAME,CREATED_BY,CREATED_DATE_TIME,LAST_MODIFIED_BY,LAST_MODIFIED_DATE_TIME) VALUES ('Approved','SYSTEM',TO_DATE(SYSDATE,'DD-MM-YY HH24:MI:SS'),'SYSTEM',TO_DATE(SYSDATE,'DD-MM-YY HH24:MI:SS'));
        COMMIT;
    END IF;
END;
/
DECLARE
STATEID NUMBER;
COLUMNCHECKERFLAG INT;
DATACHECKER INT;
BEGIN
 SELECT COUNT(*) INTO COLUMNCHECKERFLAG FROM ADS_MM_VERSION WHERE VALUE <= '6.0';
 SELECT COUNT(*) INTO DATACHECKER FROM STATE_DETAILS WHERE STATENAME='In Progress';
    IF COLUMNCHECKERFLAG = 1 AND DATACHECKER > 0 THEN
        BEGIN
            SELECT STATE_ID INTO STATEID FROM STATE_DETAILS WHERE STATENAME='In Progress';
            UPDATE MAPPING_DETAILS SET STATE_ID = STATEID WHERE STATE_ID IS NULL;
        END;
    END IF;
END;
/
DECLARE
COLUMNCHECKERFLAG INT;
BEGIN
    SELECT COUNT(*) INTO COLUMNCHECKERFLAG FROM ADS_MM_VERSION WHERE VALUE <= '6.0';
    IF COLUMNCHECKERFLAG = 1 THEN
            EXECUTE IMMEDIATE 'ALTER TABLE SYSTEM_TABLE_METADATA DROP CONSTRAINT FK_SYS_CON_ENV';
    END IF;
END;
/
DECLARE
COLUMNCHECKERFLAG INT;
BEGIN
    SELECT COUNT(*) INTO COLUMNCHECKERFLAG FROM ADS_MM_VERSION WHERE VALUE <= '6.0';
    IF COLUMNCHECKERFLAG = 1 THEN
        EXECUTE IMMEDIATE 'ALTER TABLE SYSTEM_TABLE_COLUMNS_METADATA DROP CONSTRAINT FK_SYS_TAB_METADATA';
    END IF;
END;
/
DECLARE
COLUMNCHECKERFLAG INT;
INDEXEXISTANCEFLAG INT;
BEGIN
    SELECT COUNT(*) INTO COLUMNCHECKERFLAG FROM ADS_MM_VERSION WHERE VALUE <= '6.0';
    IF COLUMNCHECKERFLAG = 1 THEN
        EXECUTE IMMEDIATE 'ALTER TABLE SYSTEM_TABLE_METADATA DROP CONSTRAINT UK_SYSID_ENV_TAB_NAME';
        SELECT COUNT(*) INTO INDEXEXISTANCEFLAG FROM ALL_INDEXES WHERE OWNER = sys_context('userenv', 'current_schema') AND TABLE_NAME='SYSTEM_TABLE_METADATA' AND INDEX_NAME = 'UK_SYSID_ENV_TAB_NAME';
            IF INDEXEXISTANCEFLAG = 1 THEN
                EXECUTE IMMEDIATE 'ALTER INDEX ' || 'UK_SYSID_ENV_TAB_NAME' || ' RENAME TO ' || 'UK_SYSID_ENV_TAB_NAME_TEMP';
            END IF;
    END IF;
END;
/
DECLARE
COLUMNCHECKERFLAG INT;
INDEXEXISTANCEFLAG INT;
BEGIN
    SELECT COUNT(*) INTO COLUMNCHECKERFLAG FROM ADS_MM_VERSION WHERE VALUE <= '6.0';
    IF COLUMNCHECKERFLAG = 1 THEN
        EXECUTE IMMEDIATE 'ALTER TABLE SYSTEM_TABLE_COLUMNS_METADATA DROP CONSTRAINT UK_SYS_ID_ENV_TAB_COL';
        SELECT COUNT(*) INTO INDEXEXISTANCEFLAG FROM ALL_INDEXES WHERE OWNER = sys_context('userenv', 'current_schema') AND TABLE_NAME='SYSTEM_TABLE_COLUMNS_METADATA' AND INDEX_NAME = 'UK_SYS_ID_ENV_TAB_COL';
            IF INDEXEXISTANCEFLAG = 1 THEN
                EXECUTE IMMEDIATE 'ALTER INDEX ' || 'UK_SYS_ID_ENV_TAB_COL' || ' RENAME TO ' || 'UK_SYS_ID_ENV_TAB_COL_TEMP';
            END IF;
    END IF;
END;
/
DECLARE
COLUMNCHECKERFLAG INT;
BEGIN
    SELECT COUNT(*) INTO COLUMNCHECKERFLAG FROM ADS_MM_VERSION WHERE VALUE <= '6.0';
    IF COLUMNCHECKERFLAG = 1 THEN
        EXECUTE IMMEDIATE 'ALTER TABLE SYSTEM_TABLE_METADATA ADD SCE_ID INT';
    END IF;
END;
/
DECLARE
COLUMNCHECKERFLAG INT;
BEGIN
    SELECT COUNT(*) INTO COLUMNCHECKERFLAG FROM ADS_MM_VERSION WHERE VALUE <= '6.0';
    IF COLUMNCHECKERFLAG = 1 THEN
        EXECUTE IMMEDIATE 'ALTER TABLE SYSTEM_TABLE_COLUMNS_METADATA ADD STM_ID INT';
    END IF;
END;
/
DECLARE
COLUMNCHECKERFLAG INT;
BEGIN
    SELECT COUNT(*) INTO COLUMNCHECKERFLAG FROM ADS_MM_VERSION WHERE VALUE <= '6.0';
    IF COLUMNCHECKERFLAG = 1 THEN
        EXECUTE IMMEDIATE 'MERGE INTO SYSTEM_TABLE_METADATA STM USING ( SELECT SCE_ID, SYSTEM_ID, SYSTEM_ENVIRONMENT_NAME FROM SYS_CON_ENVIRONMENTS ) SCE ON (SCE.SYSTEM_ID = STM.SYSTEM_ID AND SCE.SYSTEM_ENVIRONMENT_NAME = STM.SYSTEM_ENV_NAME) WHEN MATCHED THEN UPDATE SET STM.SCE_ID = SCE.SCE_ID';
    END IF;
END;
/
DECLARE
COLUMNCHECKERFLAG INT;
BEGIN
    SELECT COUNT(*) INTO COLUMNCHECKERFLAG FROM ADS_MM_VERSION WHERE VALUE <= '6.0';
    IF COLUMNCHECKERFLAG = 1 THEN
       EXECUTE IMMEDIATE 'MERGE INTO SYSTEM_TABLE_COLUMNS_METADATA STCM USING ( SELECT STM_ID, SYSTEM_ID, SYSTEM_ENV_NAME, TABLE_NAME FROM SYSTEM_TABLE_METADATA ) STM ON ( STM.SYSTEM_ID = STCM.SYSTEM_ID AND STM.SYSTEM_ENV_NAME = STCM.SYSTEM_ENV_NAME AND STM.TABLE_NAME = STCM.TABLE_NAME ) WHEN MATCHED THEN UPDATE SET STCM.STM_ID = STM.STM_ID';
    END IF;
END;
/
DECLARE
COLUMNCHECKERFLAG INT;
BEGIN
    SELECT COUNT(*) INTO COLUMNCHECKERFLAG FROM ADS_MM_VERSION WHERE VALUE <= '6.0';
    IF COLUMNCHECKERFLAG = 1 THEN
        EXECUTE IMMEDIATE 'ALTER TABLE SYSTEM_TABLE_METADATA ADD CONSTRAINT PK_SYS_TBL_MTDT PRIMARY KEY(STM_ID)';
    END IF;
END;
/
DECLARE
COLUMNCHECKERFLAG INT;
BEGIN
    SELECT COUNT(*) INTO COLUMNCHECKERFLAG FROM ADS_MM_VERSION WHERE VALUE <= '6.0';
    IF COLUMNCHECKERFLAG = 1 THEN
        EXECUTE IMMEDIATE 'ALTER TABLE SYSTEM_TABLE_COLUMNS_METADATA ADD CONSTRAINT PK_SYS_TBL_COL_MTDT PRIMARY KEY(STCM_ID)';
    END IF;
END;
/
DECLARE
COLUMNCHECKERFLAG INT;
BEGIN
    SELECT COUNT(*) INTO COLUMNCHECKERFLAG FROM ADS_MM_VERSION WHERE VALUE <= '6.0';
    IF COLUMNCHECKERFLAG = 1 THEN
        EXECUTE IMMEDIATE 'ALTER TABLE SYSTEM_TABLE_METADATA ADD CONSTRAINT FK_SYS_CON_ENV FOREIGN KEY(SCE_ID) REFERENCES SYS_CON_ENVIRONMENTS(SCE_ID)';
    END IF;
END;
/
DECLARE
COLUMNCHECKERFLAG INT;
BEGIN
    SELECT COUNT(*) INTO COLUMNCHECKERFLAG FROM ADS_MM_VERSION WHERE VALUE <= '6.0';
    IF COLUMNCHECKERFLAG = 1 THEN
        EXECUTE IMMEDIATE 'ALTER TABLE SYSTEM_TABLE_COLUMNS_METADATA ADD CONSTRAINT FK_SYS_TAB_METADATA FOREIGN KEY(STM_ID) REFERENCES SYSTEM_TABLE_METADATA(STM_ID)';
    END IF;
END;
/
DECLARE
COLUMNCHECKERFLAG INT;
INDEXEXISTANCEFLAG INT;
BEGIN
    SELECT COUNT(*) INTO COLUMNCHECKERFLAG FROM ADS_MM_VERSION WHERE VALUE <= '6.0';
    IF COLUMNCHECKERFLAG = 1 THEN
        EXECUTE IMMEDIATE 'ALTER TABLE SYSTEM_TABLE_METADATA ADD CONSTRAINT UK_SYSID_ENV_TAB_NAME UNIQUE(SCE_ID,TABLE_NAME)';
        SELECT COUNT(*) INTO INDEXEXISTANCEFLAG FROM ALL_INDEXES WHERE OWNER = sys_context('userenv', 'current_schema') AND TABLE_NAME='SYSTEM_TABLE_METADATA' AND INDEX_NAME = 'UK_SYSID_ENV_TAB_NAME_TEMP';
        IF INDEXEXISTANCEFLAG = 1 THEN
            EXECUTE IMMEDIATE 'DROP INDEX ' || 'UK_SYSID_ENV_TAB_NAME_TEMP';
        END IF;
    END IF;
END;
/
DECLARE
COLUMNCHECKERFLAG INT;
INDEXEXISTANCEFLAG INT;
BEGIN
    SELECT COUNT(*) INTO COLUMNCHECKERFLAG FROM ADS_MM_VERSION WHERE VALUE <= '6.0';
    IF COLUMNCHECKERFLAG = 1 THEN
        EXECUTE IMMEDIATE 'ALTER TABLE SYSTEM_TABLE_COLUMNS_METADATA ADD CONSTRAINT UK_SYS_ID_ENV_TAB_COL UNIQUE(STM_ID, COLUMN_NAME)';
            SELECT COUNT(*) INTO INDEXEXISTANCEFLAG FROM ALL_INDEXES WHERE OWNER = sys_context('userenv', 'current_schema') AND TABLE_NAME='SYSTEM_TABLE_COLUMNS_METADATA' AND INDEX_NAME = 'UK_SYS_ID_ENV_TAB_COL_TEMP';
                IF INDEXEXISTANCEFLAG = 1 THEN
                    EXECUTE IMMEDIATE 'DROP INDEX ' || 'UK_SYS_ID_ENV_TAB_COL_TEMP';
                END IF;
    END IF;
END;
/
DECLARE
COLUMNCHECKERFLAG INT;
BEGIN
    SELECT COUNT(*) INTO COLUMNCHECKERFLAG FROM ADS_MM_VERSION WHERE VALUE <= '6.0';
    IF COLUMNCHECKERFLAG = 1 THEN
        EXECUTE IMMEDIATE 'ALTER TABLE RM_PROMOTE_SYS_CON_ENVS DROP CONSTRAINT RM_SYSCON_FK1';
    END IF;
END;
/
DECLARE
COLUMNCHECKERFLAG INT;
BEGIN
    SELECT COUNT(*) INTO COLUMNCHECKERFLAG FROM ADS_MM_VERSION WHERE VALUE <= '6.0';
    IF COLUMNCHECKERFLAG = 1 THEN
        EXECUTE IMMEDIATE 'ALTER TABLE RM_PROMOTE_SYS_CON_ENVS ADD SCE_ID INT';
    END IF;
END;
/
DECLARE
COLUMNCHECKERFLAG INT;
BEGIN
    SELECT COUNT(*) INTO COLUMNCHECKERFLAG FROM ADS_MM_VERSION WHERE VALUE <= '6.0';
    IF COLUMNCHECKERFLAG = 1 THEN
        EXECUTE IMMEDIATE 'MERGE INTO RM_PROMOTE_SYS_CON_ENVS RM_SCE USING ( SELECT SCE_ID, SYSTEM_ID, SYSTEM_ENVIRONMENT_NAME FROM SYS_CON_ENVIRONMENTS ) SCE ON (SCE.SYSTEM_ID = RM_SCE.SYSTEM_ID AND SCE.SYSTEM_ENVIRONMENT_NAME = RM_SCE.SYSTEM_ENVIRONMENT_NAME) WHEN MATCHED THEN UPDATE SET RM_SCE.SCE_ID = SCE.SCE_ID';
    END IF;
END;
/
DECLARE
COLUMNCHECKERFLAG INT;
BEGIN
    SELECT COUNT(*) INTO COLUMNCHECKERFLAG FROM ADS_MM_VERSION WHERE VALUE <= '6.0';
    IF COLUMNCHECKERFLAG = 1 THEN
        EXECUTE IMMEDIATE 'ALTER TABLE RM_PROMOTE_SYS_CON_ENVS ADD CONSTRAINT RM_SYSCON_FK1 FOREIGN KEY(SCE_ID) REFERENCES SYS_CON_ENVIRONMENTS(SCE_ID)';
    END IF;
END;
/
DECLARE
   COLUMNCHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO COLUMNCHECKERFLAG FROM ALL_TAB_COLUMNS WHERE  OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME = UPPER('SUBJECT_DETAILS') AND COLUMN_NAME=UPPER('SUBJECT_CUSTOM_ORDER');
   IF COLUMNCHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'ALTER TABLE SUBJECT_DETAILS ADD SUBJECT_CUSTOM_ORDER NUMBER(*,2) DEFAULT 0 NULL';
      EXECUTE IMMEDIATE 'ALTER TABLE SUBJECT_DETAILS ADD SUBJECT_ORDER_BY VARCHAR2(100)';
      execute immediate 'ALTER TABLE PROJECT  ADD SUBJECT_ORDER_BY varchar(100) NULL';
      execute immediate 'UPDATE PROJECT SET SUBJECT_ORDER_BY = ''SUBJECT_NAME ASC''';
      EXECUTE IMMEDIATE 'UPDATE SUBJECT_DETAILS SET SUBJECT_ORDER_BY = ''SUBJECT_NAME ASC''';
      EXECUTE IMMEDIATE 'MERGE INTO SUBJECT_DETAILS SD USING
        (SELECT PROJECT_ID,
          SUBJECT_ID,
          PARENT_SUBJECT_ID,
          ROW_NUMBER() OVER (PARTITION BY PROJECT_ID, PARENT_SUBJECT_ID ORDER BY SUBJECT_NAME ASC) SUBJECT_CUSTOM_ORDER
        FROM SUBJECT_DETAILS
        ) CTE ON ( SD.PROJECT_ID = CTE.PROJECT_ID AND SD.PARENT_SUBJECT_ID = CTE.PARENT_SUBJECT_ID AND SD.SUBJECT_ID = CTE.SUBJECT_ID)
        WHEN MATCHED THEN UPDATE SET SD.SUBJECT_CUSTOM_ORDER = CTE.SUBJECT_CUSTOM_ORDER';
   END IF;
END;
/
DECLARE
COLUMNCHECKERFLAG INT;
    BEGIN
        SELECT COUNT(*) INTO COLUMNCHECKERFLAG FROM ADS_MM_VERSION WHERE VALUE <= '7.1';
        IF COLUMNCHECKERFLAG = 1 THEN
            UPDATE USERS SET USER_THEME = 'DHTMLX_SKIN_ANALYTIX';
    END IF;
END;
/
DECLARE
   COLUMNLENGTHFLAG INT;
   CHARCOLLENGTHFLAG INT;
BEGIN
SELECT CHAR_LENGTH INTO CHARCOLLENGTHFLAG FROM ALL_TAB_COLUMNS WHERE  OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME = 'MAPPING_DETAILS' AND COLUMN_NAME = 'MAP_NAME';
  IF (CHARCOLLENGTHFLAG = 50 OR CHARCOLLENGTHFLAG = 4000) THEN
      SELECT MAX(LENGTH(MAP_NAME)) INTO COLUMNLENGTHFLAG FROM MAPPING_DETAILS;
      IF COLUMNLENGTHFLAG != 0 THEN
         IF COLUMNLENGTHFLAG <= 300 THEN
            EXECUTE IMMEDIATE 'ALTER TABLE MAPPING_DETAILS MODIFY(MAP_NAME VARCHAR2(300))';
         END IF;
      ELSE
         EXECUTE IMMEDIATE 'ALTER TABLE MAPPING_DETAILS MODIFY(MAP_NAME VARCHAR2(300))';
      END IF;
END IF;
END;
/
DECLARE
   TABLECHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO TABLECHECKERFLAG FROM all_VIEWS WHERE OWNER = sys_context('userenv', 'current_schema') AND VIEW_NAME = UPPER('SYSTEMDATADICTIONARYSUMMARY');
   IF TABLECHECKERFLAG = 1 THEN
      EXECUTE IMMEDIATE 'DROP VIEW SYSTEMDATADICTIONARYSUMMARY';
   END IF;
END;
/
DECLARE
BEGIN
      EXECUTE IMMEDIATE 'CREATE OR REPLACE FORCE VIEW  "SYSTEMDATADICTIONARYSUMMARY" ("SYSTEM_ID", "SYSTEM_ENV_NAME", "TABLECOUNT", "COLUMNCOUNT") AS
            WITH TABLE_DETAILS AS
            (SELECT SDD.SYSTEM_ID SYSTEM_ID,
            SCE.SYSTEM_ENVIRONMENT_NAME,
            COUNT(STM.TABLE_NAME) COUNT_TABLES
            FROM SYSTEM_DEFINITION_DETAILS SDD
            JOIN SYS_CON_ENVIRONMENTS SCE ON SDD.SYSTEM_ID = SCE.SYSTEM_ID
            JOIN VALID_SYSTEM_TABLE_METADATA STM ON STM.SYSTEM_ID = SDD.SYSTEM_ID
            AND STM.SYSTEM_ENV_NAME = SCE.SYSTEM_ENVIRONMENT_NAME
            GROUP BY SDD.SYSTEM_ID,
            SCE.SYSTEM_ENVIRONMENT_NAME),
            COLUMN_DETAILS AS(SELECT SDD.SYSTEM_ID SYSTEM_ID, SCE.SYSTEM_ENVIRONMENT_NAME,COUNT(STCM.COLUMN_NAME) COUNT_COLUMNS
            FROM SYSTEM_DEFINITION_DETAILS SDD
            JOIN SYS_CON_ENVIRONMENTS SCE ON SDD.SYSTEM_ID = SCE.SYSTEM_ID
            JOIN VALID_SYSTEM_TABLE_METADATA STM ON STM.SYSTEM_ID = SDD.SYSTEM_ID
            AND STM.SYSTEM_ENV_NAME = SCE.SYSTEM_ENVIRONMENT_NAME
            JOIN VALID_SYS_TBL_COL_METADATA STCM ON STCM.SYSTEM_ID = SDD.SYSTEM_ID
            AND STCM.SYSTEM_ENV_NAME = SCE.SYSTEM_ENVIRONMENT_NAME
            AND STCM.TABLE_NAME = STM.TABLE_NAME
            WHERE STCM.type <> ''ENTITY'' OR STCM.type IS NULL
            GROUP BY SDD.SYSTEM_ID,
            SCE.SYSTEM_ENVIRONMENT_NAME)
            SELECT CD.SYSTEM_ID, CD.SYSTEM_ENVIRONMENT_NAME, TD.COUNT_TABLES, CD.COUNT_COLUMNS
            FROM COLUMN_DETAILS CD JOIN TABLE_DETAILS TD ON
            CD.SYSTEM_ID = TD.SYSTEM_ID
            AND CD.SYSTEM_ENVIRONMENT_NAME = TD.SYSTEM_ENVIRONMENT_NAME';
END;
/
DECLARE
   TABLECHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO TABLECHECKERFLAG FROM ALL_TABLES WHERE OWNER = sys_context( 'userenv', 'current_schema' ) AND TABLE_NAME = UPPER('SM_CLASSIFICATION_SDI');
   IF TABLECHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'CREATE TABLE SM_CLASSIFICATION_SDI   (SDI_CLASS_ID  NUMBER NOT NULL ENABLE,
	  SDI_CLASS_NAME VARCHAR2(255)  NULL,     SDI_CLASS_DESCRIPTION VARCHAR2(4000) NULL,
	  CREATED_BY VARCHAR2(100)  NULL,     CREATED_DATE TIMESTAMP  NULL,
	  LAST_MODIFIED_BY VARCHAR2(100)  NULL,     LAST_MODIFIED_DATE TIMESTAMP  NULL,
	  CONSTRAINT "PK_SM_CLASSIFICATION_SDI" PRIMARY KEY ("SDI_CLASS_ID")   )';
   END IF;
END;
/

DECLARE
   SEQUENCECHECKERFLAG INT;
BEGIN
    SELECT COUNT(*) INTO SEQUENCECHECKERFLAG FROM ALL_SEQUENCES WHERE SEQUENCE_OWNER = sys_context('userenv', 'current_schema') AND SEQUENCE_NAME = UPPER('SM_CLASS_SDI_SEQ');
   IF SEQUENCECHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'CREATE SEQUENCE   "SM_CLASS_SDI_SEQ"  MINVALUE 1 MAXVALUE 999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE';
   END IF;
END;
/

DECLARE
  TRIGGERCHECKERFLAG INT;
BEGIN
  SELECT COUNT(*)  INTO TRIGGERCHECKERFLAG  FROM all_triggers WHERE OWNER = sys_context('userenv', 'current_schema') AND trigger_name = UPPER('SM_CLASS_SDI_INSERT');
  IF TRIGGERCHECKERFLAG = 0 THEN
    EXECUTE IMMEDIATE 'CREATE OR REPLACE TRIGGER  "SM_CLASS_SDI_INSERT" BEFORE INSERT ON SM_CLASSIFICATION_SDI FOR EACH ROW BEGIN SELECT SM_CLASS_SDI_SEQ.NEXTVAL INTO :new.SDI_CLASS_ID FROM DUAL; END;';
    EXECUTE IMMEDIATE 'ALTER TRIGGER  "SM_CLASS_SDI_INSERT" ENABLE';
  END IF;
END;
/

DECLARE
   COLUMNCHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO COLUMNCHECKERFLAG FROM ALL_TAB_COLUMNS WHERE  OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME = UPPER('SYSTEM_TABLE_COLUMNS_METADATA') AND COLUMN_NAME=UPPER('SDI_CLASS_ID');
   IF COLUMNCHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'ALTER TABLE SYSTEM_TABLE_COLUMNS_METADATA ADD SDI_CLASS_ID NUMBER NULL';
   END IF;
END;
/
-- DECLARE
-- BEGIN
--     EXECUTE IMMEDIATE 'CREATE OR REPLACE FORCE VIEW  "VALID_SYS_TBL_COL_METADATA"  AS  SELECT * FROM SYSTEM_TABLE_COLUMNS_METADATA WHERE VALID = 1 OR VALID IS NULL';
-- END;
-- /
DECLARE
   COLUMNCHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO COLUMNCHECKERFLAG FROM ALL_TAB_COLUMNS WHERE  OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME = UPPER('SYS_CON_ENVIRONMENTS') AND COLUMN_NAME=UPPER('SAP_DELIMITER');
   IF COLUMNCHECKERFLAG = 1 THEN
    EXECUTE IMMEDIATE 'ALTER TABLE SYS_CON_ENVIRONMENTS MODIFY SAP_DELIMITER VARCHAR2(10)';
    EXECUTE IMMEDIATE 'ALTER TABLE SYS_CON_ENVIRONMENTS RENAME COLUMN SAP_DELIMITER TO FIELD_DELIMITER';
    EXECUTE IMMEDIATE 'ALTER TABLE SYS_CON_ENVIRONMENTS ADD ROW_DELIMITER VARCHAR2(10) NULL';
   END IF;
END;
/
DECLARE
   ROWCHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO ROWCHECKERFLAG FROM CAT_TEMPLATES WHERE CAT_NAME = 'Datastage 7.5 Parallel Job';
   IF ROWCHECKERFLAG <> 0 THEN
        EXECUTE IMMEDIATE 'UPDATE CAT_TEMPLATES SET CAT_NAME = ''Parallel Job (v8.0 & above)'', CAT_TEMPLATE_ORDER = 1  WHERE CAT_NAME = ''Datastage 8.0 Parallel Job''';
        EXECUTE IMMEDIATE 'UPDATE CAT_TEMPLATES SET CAT_NAME = ''Server Job (v8.0 & above)'', CAT_TEMPLATE_ORDER = 2  WHERE CAT_NAME = ''Datastage 8.0 Server Job''';
        EXECUTE IMMEDIATE 'UPDATE CAT_TEMPLATES SET CAT_NAME = ''Parallel Job Include Sql Expression (v8.0 & above)'', CAT_TEMPLATE_ORDER = 3  WHERE CAT_NAME = ''Datastage 8.0 Parallel Job Include Sql Expression Datastage 8.0''';
        EXECUTE IMMEDIATE 'UPDATE CAT_TEMPLATES SET CAT_NAME = ''Server Job Include Sql Expression (v8.0 & above)'', CAT_TEMPLATE_ORDER = 4  WHERE CAT_NAME = ''Datastage 8.0 Server Job Include Sql Expression	Datastage 8.0''';
        EXECUTE IMMEDIATE 'update CAT_TEMPLATES set CAT_NAME = ''Parallel Job (v7.5)'', CAT_TEMPLATE_ORDER = 5  where CAT_NAME = ''Datastage 7.5 Parallel Job''';
        EXECUTE IMMEDIATE 'UPDATE CAT_TEMPLATES SET CAT_NAME = ''Server Job (v7.5)'', CAT_TEMPLATE_ORDER = 6  WHERE CAT_NAME = ''Datastage 7.5 Server Job''';
   END IF;
END;
/
DECLARE
   TABLECHECKERFLAG INT;
   TEMP_CAT_ID NUMBER;
   TEMP_TAB_ID NUMBER;
   TEMP_CAT_DIALOG_ID NUMBER;
   TEMP_CAT_DIALOG_PROFILE_ID NUMBER;
   TEMP_CAT_DIALOG_TAB_ID NUMBER;
   TEMP_CAT_TEMPLATE_ORDER NUMBER;
BEGIN
   SELECT COUNT(*) INTO TABLECHECKERFLAG FROM CAT_TEMPLATES where cat_name = 'Generate JSON Schema';
   IF TABLECHECKERFLAG = 0 THEN
    SELECT CAT_TAB_ID INTO TEMP_TAB_ID FROM CAT_TABS WHERE CAT_TAB_NAME = 'com.ads.mm.stb.mappingmanager';
    SELECT NVL(MAX(CAT_TEMPLATE_ORDER)+1, 1) INTO TEMP_CAT_TEMPLATE_ORDER  FROM CAT_TEMPLATES WHERE CAT_TAB_ID = TEMP_TAB_ID;
    INSERT INTO CAT_TEMPLATES(CAT_NAME,CAT_DESC,CAT_IMAGE,CAT_STOCK_IMAGE,CAT_ENABLED,CAT_TAB_ID,CAT_SYSTEM_BASED,CAT_SCRIPT,CAT_ACTION,CREATED_BY,CREATED_DATE_TIME,LAST_MODIFIED_BY,LAST_MODIFIED_DATE_TIME,CAT_TEMPLATE_ORDER,CAT_SCRIPTING_LANGUAGE,CAT_OUTPUT_CONTENT_TYPE,CAT_OUTPUT_FILE_EXTENSION,CAT_ENABLE_MAPPING_DIALOG)
    VALUES('Generate JSON Schema', 'Generate JSON Schema', NULL, 'defaultCatImage.png', '1', TEMP_TAB_ID, '1', NULL, 'NULL', 'AnalytiX Data Services', CURRENT_TIMESTAMP, 'AnalytiX Data Services', CURRENT_TIMESTAMP, TEMP_CAT_TEMPLATE_ORDER, 'Javascript', 'Plain Text', '.json', 0);
    COMMIT;
    SELECT CAT_ID INTO TEMP_CAT_ID FROM CAT_TEMPLATES WHERE CAT_NAME = 'Generate JSON Schema' AND CAT_TAB_ID = TEMP_TAB_ID;
    INSERT INTO CAT_DIALOG(CAT_DIALOG_NAME,CAT_DIALOG_PROPERTIES,CAT_ID,CREATED_BY,CREATED_DATE_TIME,LAST_MODIFIED_BY,LAST_MODIFIED_DATE_TIME) VALUES('Generate JSON Schema','{"fheight":400,"fwidth":600,"flabelwidth":50,"fcontrolwidth":50}',TEMP_CAT_ID,'Administrator',CURRENT_TIMESTAMP,'Administrator',CURRENT_TIMESTAMP);
    COMMIT;
    SELECT  CAT_DIALOG_ID INTO TEMP_CAT_DIALOG_ID FROM CAT_DIALOG WHERE CAT_DIALOG_NAME = 'Generate JSON Schema' AND CAT_ID = TEMP_CAT_ID;
    INSERT INTO CAT_DIALOG_PROFILE(CAT_DIALOG_ID,CAT_DIALOG_PROFILE_NAME,CREATED_BY,CREATED_DATE_TIME,LAST_MODIFIED_BY,LAST_MODIFIED_DATE_TIME) VALUES (TEMP_CAT_DIALOG_ID,'Default','Administrator',CURRENT_TIMESTAMP,'Administrator',CURRENT_TIMESTAMP);
    COMMIT;
    SELECT CAT_DIALOG_PROFILE_ID INTO TEMP_CAT_DIALOG_PROFILE_ID  FROM CAT_DIALOG_PROFILE WHERE CAT_DIALOG_PROFILE_NAME = 'Default' AND CAT_DIALOG_ID = TEMP_CAT_DIALOG_ID;
    UPDATE CAT_DIALOG SET CAT_DIALOG_DEFAULT_PROFILE_ID = TEMP_CAT_DIALOG_PROFILE_ID WHERE CAT_DIALOG_ID = TEMP_CAT_DIALOG_ID;
    INSERT INTO CAT_DIALOG_TAB(CAT_DIALOG_PROFILE_ID,CAT_DIALOG_TAB_NAME,CAT_DIALOG_TAB_PROPERTIES,CREATED_BY,CREATED_DATE_TIME,LAST_MODIFIED_BY,LAST_MODIFIED_DATE_TIME) VALUES(TEMP_CAT_DIALOG_PROFILE_ID,'DefaultTab','','Administrator',CURRENT_TIMESTAMP,'Administrator',CURRENT_TIMESTAMP);
    COMMIT;
    SELECT CAT_DIALOG_TAB_ID INTO TEMP_CAT_DIALOG_TAB_ID FROM CAT_DIALOG_TAB WHERE CAT_DIALOG_TAB_NAME = 'DefaultTab' AND CAT_DIALOG_PROFILE_ID = TEMP_CAT_DIALOG_PROFILE_ID;
    INSERT INTO CAT_DIALOG_OPTION(CAT_DIALOG_TAB_ID,CAT_DIALOG_OPTION_NAME,CAT_DIALOG_OPTION_PROPERTIES,CREATED_BY,CREATED_DATE_TIME,LAST_MODIFIED_BY,LAST_MODIFIED_DATE_TIME) VALUES(TEMP_CAT_DIALOG_TAB_ID,'checkbox1','{"controlStyle":"font-family:Century Gothic; font-size: 12px;font-weight:regular;text-decoration:none;padding-top:0px;padding-left:0px;padding-right:0px;padding-bottom:0px;text-align: left;vertical-align:center;color:#000000;background-color: #ffffff","showTimer":true,"visible":true,"labelStyleJSON":"{\"font-family\": \"Comic Sans MS\", \"font-size\": \"12px\",\"font-weight\":\"regular\",\"text-decoration\":\"none\",\"padding-top\":\"0\",\"padding-left\":\"0\",\"padding-right\":\"3\",\"padding-bottom\":\"0\",\"text-align\":\" right\",\"vertical-align\":\"center\",\"color\":\"#000000\",\"background-color\": \"#ffffff\"}","labelStyle":"font-family:Comic Sans MS; font-size: 12px;font-weight:regular;text-decoration:none;padding-top:0px;padding-left:0px;padding-right:3px;padding-bottom:0px;text-align: right;vertical-align:center;color:#000000;background-color: #ffffff","catOptionId":2158,"type":"Check Box","buttonClear":true,"title":"Generate Strict JSON Schema","controlStyleJSON":"{\"font-family\": \"Century Gothic\", \"font-size\": \"12px\",\"font-weight\":\"regular\",\"text-decoration\":\"none\",\"padding-top\":\"0\",\"padding-left\":\"0\",\"padding-right\":\"0\",\"padding-bottom\":\"0\",\"text-align\":\" left\",\"vertical-align\":\"center\",\"color\":\"#000000\",\"background-color\": \"#ffffff\"}","filesCount":5,"name":"checkbox1","defaultValue":false,"enabled":true,"controlwidth":"15px","multiValued":false,"tabId":0,"componentObject":"","image":"images/checkbox.jpg","allowDisabling":false,"list":"","maskField":false,"buttonUpload":true,"container":false,"html":"","controlHeight":150,"catOptionOrder":0}','Administrator',CURRENT_TIMESTAMP,'Administrator',CURRENT_TIMESTAMP);
   END IF;
END;
/
DECLARE
TABBCHECKERFLAG NUMBER;
    BEGIN
    SELECT COUNT(*) INTO TABBCHECKERFLAG FROM CAT_TABS WHERE CAT_TAB_NAME = 'com.ads.mm.stb.bigdata';
        IF TABBCHECKERFLAG = 0 THEN
            INSERT INTO CAT_TABS ( CAT_TAB_NAME, CAT_TAB_DESCRIPTION ,  DISPLAY_ORDER , TAB_VISIBILITY) VALUES ( 'com.ads.mm.stb.bigdata', '' , '9' , '1');
            COMMIT;
	END IF;
END;
/
DECLARE
   TABLECHECKERFLAG INT;
   TEMP_CAT_ID NUMBER;
   TEMP_TAB_ID NUMBER;
   TEMP_CAT_DIALOG_ID NUMBER;
   TEMP_CAT_DIALOG_PROFILE_ID NUMBER;
   TEMP_CAT_DIALOG_TAB_ID NUMBER;
   TEMP_CAT_TEMPLATE_ORDER NUMBER;
BEGIN
   SELECT COUNT(*) INTO TABLECHECKERFLAG FROM CAT_TEMPLATES where cat_name = 'Pig '|| '& '||'Sqoop Script';
   SELECT NVL(MAX(CAT_TEMPLATE_ORDER)+1, 1) INTO TEMP_CAT_TEMPLATE_ORDER  FROM CAT_TEMPLATES WHERE CAT_TAB_ID = TEMP_TAB_ID;
   IF TABLECHECKERFLAG = 0 THEN
    SELECT CAT_TAB_ID INTO TEMP_TAB_ID FROM CAT_TABS WHERE CAT_TAB_NAME = 'com.ads.mm.stb.bigdata';
    INSERT INTO CAT_TEMPLATES(CAT_NAME,CAT_DESC,CAT_IMAGE,CAT_STOCK_IMAGE,CAT_ENABLED,CAT_TAB_ID,CAT_SYSTEM_BASED,CAT_SCRIPT,CAT_ACTION,CREATED_BY,CREATED_DATE_TIME,LAST_MODIFIED_BY,LAST_MODIFIED_DATE_TIME,CAT_TEMPLATE_ORDER,CAT_SCRIPTING_LANGUAGE,CAT_OUTPUT_CONTENT_TYPE,CAT_OUTPUT_FILE_EXTENSION,CAT_ENABLE_MAPPING_DIALOG)
    VALUES('Pig '|| '& '||'Sqoop Script', 'Pig '|| '& '||'Sqoop Script', NULL, 'defaultCatImage.png', '1', TEMP_TAB_ID, '1', NULL, 'NULL', 'AnalytiX Data Services', CURRENT_TIMESTAMP, 'AnalytiX Data Services', CURRENT_TIMESTAMP, TEMP_CAT_TEMPLATE_ORDER, 'Javascript', 'Plain Text', '.txt', 0);
    COMMIT;
    SELECT CAT_ID INTO TEMP_CAT_ID FROM CAT_TEMPLATES WHERE CAT_NAME = 'Pig '|| '& '||'Sqoop Script' AND CAT_TAB_ID = TEMP_TAB_ID;
    INSERT INTO CAT_DIALOG(CAT_DIALOG_NAME,CAT_DIALOG_PROPERTIES,CAT_ID,CREATED_BY,CREATED_DATE_TIME,LAST_MODIFIED_BY,LAST_MODIFIED_DATE_TIME) VALUES('Pig '|| '& '||'Sqoop Script','{"fheight":400,"fwidth":600,"flabelwidth":50,"fcontrolwidth":50}',TEMP_CAT_ID,'Administrator',CURRENT_TIMESTAMP,'Administrator',CURRENT_TIMESTAMP);
    COMMIT;
    SELECT  CAT_DIALOG_ID INTO TEMP_CAT_DIALOG_ID FROM CAT_DIALOG WHERE CAT_DIALOG_NAME = 'Pig '|| '& '||'Sqoop Script' AND CAT_ID = TEMP_CAT_ID;
    INSERT INTO CAT_DIALOG_PROFILE(CAT_DIALOG_ID,CAT_DIALOG_PROFILE_NAME,CREATED_BY,CREATED_DATE_TIME,LAST_MODIFIED_BY,LAST_MODIFIED_DATE_TIME) VALUES (TEMP_CAT_DIALOG_ID,'Default','Administrator',CURRENT_TIMESTAMP,'Administrator',CURRENT_TIMESTAMP);
    COMMIT;
    SELECT CAT_DIALOG_PROFILE_ID INTO TEMP_CAT_DIALOG_PROFILE_ID  FROM CAT_DIALOG_PROFILE WHERE CAT_DIALOG_PROFILE_NAME = 'Default' AND CAT_DIALOG_ID = TEMP_CAT_DIALOG_ID;
    UPDATE CAT_DIALOG SET CAT_DIALOG_DEFAULT_PROFILE_ID = TEMP_CAT_DIALOG_PROFILE_ID WHERE CAT_DIALOG_ID = TEMP_CAT_DIALOG_ID;
    INSERT INTO CAT_DIALOG_TAB(CAT_DIALOG_PROFILE_ID,CAT_DIALOG_TAB_NAME,CAT_DIALOG_TAB_PROPERTIES,CREATED_BY,CREATED_DATE_TIME,LAST_MODIFIED_BY,LAST_MODIFIED_DATE_TIME) VALUES(TEMP_CAT_DIALOG_PROFILE_ID,'DefaultTab','','Administrator',CURRENT_TIMESTAMP,'Administrator',CURRENT_TIMESTAMP);
    COMMIT;
    SELECT CAT_DIALOG_TAB_ID INTO TEMP_CAT_DIALOG_TAB_ID FROM CAT_DIALOG_TAB WHERE CAT_DIALOG_TAB_NAME = 'DefaultTab' AND CAT_DIALOG_PROFILE_ID = TEMP_CAT_DIALOG_PROFILE_ID;
    INSERT INTO CAT_DIALOG_OPTION(CAT_DIALOG_TAB_ID,CAT_DIALOG_OPTION_NAME,CAT_DIALOG_OPTION_PROPERTIES,CREATED_BY,CREATED_DATE_TIME,LAST_MODIFIED_BY,LAST_MODIFIED_DATE_TIME) VALUES(TEMP_CAT_DIALOG_TAB_ID,'FILENAME_V','{"enabled":true,"visible":true,"type":"Text Box","title":"FILENAME","name":"FILENAME_V","catOptionOrder":0.0,"defaultValue":"google-allkeyreport-XXX.Tsv"}','Administrator',CURRENT_TIMESTAMP,'Administrator',CURRENT_TIMESTAMP);
    COMMIT;
    SELECT CAT_DIALOG_TAB_ID INTO TEMP_CAT_DIALOG_TAB_ID FROM CAT_DIALOG_TAB WHERE CAT_DIALOG_TAB_NAME = 'DefaultTab' AND CAT_DIALOG_PROFILE_ID = TEMP_CAT_DIALOG_PROFILE_ID;
    INSERT INTO CAT_DIALOG_OPTION(CAT_DIALOG_TAB_ID,CAT_DIALOG_OPTION_NAME,CAT_DIALOG_OPTION_PROPERTIES,CREATED_BY,CREATED_DATE_TIME,LAST_MODIFIED_BY,LAST_MODIFIED_DATE_TIME) VALUES(TEMP_CAT_DIALOG_TAB_ID,'SOURCE_HDFS_FOLDER_V','{"enabled":true,"visible":true,"type":"Text Box","title":"SOURCE_HDFS_FOLDER","name":"SOURCE_HDFS_FOLDER_V","catOptionOrder":0.0,"defaultValue":"feeds/XXX"}','Administrator',CURRENT_TIMESTAMP,'Administrator',CURRENT_TIMESTAMP);
    COMMIT;
    SELECT CAT_DIALOG_TAB_ID INTO TEMP_CAT_DIALOG_TAB_ID FROM CAT_DIALOG_TAB WHERE CAT_DIALOG_TAB_NAME = 'DefaultTab' AND CAT_DIALOG_PROFILE_ID = TEMP_CAT_DIALOG_PROFILE_ID;
    INSERT INTO CAT_DIALOG_OPTION(CAT_DIALOG_TAB_ID,CAT_DIALOG_OPTION_NAME,CAT_DIALOG_OPTION_PROPERTIES,CREATED_BY,CREATED_DATE_TIME,LAST_MODIFIED_BY,LAST_MODIFIED_DATE_TIME) VALUES(TEMP_CAT_DIALOG_TAB_ID,'TARGET_HDFS_FOLDER_V','{"enabled":true,"visible":true,"type":"Text Box","title":"TARGET_HDFS_FOLDER","name":"TARGET_HDFS_FOLDER_V","catOptionOrder":0.0,"defaultValue":"canonicaldata/XXX/search"}','Administrator',CURRENT_TIMESTAMP,'Administrator',CURRENT_TIMESTAMP);
    COMMIT;
    SELECT CAT_DIALOG_TAB_ID INTO TEMP_CAT_DIALOG_TAB_ID FROM CAT_DIALOG_TAB WHERE CAT_DIALOG_TAB_NAME = 'DefaultTab' AND CAT_DIALOG_PROFILE_ID = TEMP_CAT_DIALOG_PROFILE_ID;
    INSERT INTO CAT_DIALOG_OPTION(CAT_DIALOG_TAB_ID,CAT_DIALOG_OPTION_NAME,CAT_DIALOG_OPTION_PROPERTIES,CREATED_BY,CREATED_DATE_TIME,LAST_MODIFIED_BY,LAST_MODIFIED_DATE_TIME) VALUES(TEMP_CAT_DIALOG_TAB_ID,'BATCH_ID_V','{"enabled":true,"visible":true,"type":"Text Box","title":"BATCH_ID","name":"BATCH_ID_V","catOptionOrder":0.0,"defaultValue":"-1"}','Administrator',CURRENT_TIMESTAMP,'Administrator',CURRENT_TIMESTAMP);
    COMMIT;
    SELECT CAT_DIALOG_TAB_ID INTO TEMP_CAT_DIALOG_TAB_ID FROM CAT_DIALOG_TAB WHERE CAT_DIALOG_TAB_NAME = 'DefaultTab' AND CAT_DIALOG_PROFILE_ID = TEMP_CAT_DIALOG_PROFILE_ID;
    INSERT INTO CAT_DIALOG_OPTION(CAT_DIALOG_TAB_ID,CAT_DIALOG_OPTION_NAME,CAT_DIALOG_OPTION_PROPERTIES,CREATED_BY,CREATED_DATE_TIME,LAST_MODIFIED_BY,LAST_MODIFIED_DATE_TIME) VALUES(TEMP_CAT_DIALOG_TAB_ID,'PY_SCRIPT','{"enabled":true,"visible":true,"type":"Text Box","title":"PY_SCRIPT","name":"PY_SCRIPT","catOptionOrder":0.0,"defaultValue":"pig/XXX_search_udf.py"}','Administrator',CURRENT_TIMESTAMP,'Administrator',CURRENT_TIMESTAMP);
    COMMIT;
    SELECT CAT_DIALOG_TAB_ID INTO TEMP_CAT_DIALOG_TAB_ID FROM CAT_DIALOG_TAB WHERE CAT_DIALOG_TAB_NAME = 'DefaultTab' AND CAT_DIALOG_PROFILE_ID = TEMP_CAT_DIALOG_PROFILE_ID;
    INSERT INTO CAT_DIALOG_OPTION(CAT_DIALOG_TAB_ID,CAT_DIALOG_OPTION_NAME,CAT_DIALOG_OPTION_PROPERTIES,CREATED_BY,CREATED_DATE_TIME,LAST_MODIFIED_BY,LAST_MODIFIED_DATE_TIME) VALUES(TEMP_CAT_DIALOG_TAB_ID,'SourceDelim','{"enabled":true,"visible":true,"type":"Text Box","title":"SourceDelim","name":"SourceDelim","catOptionOrder":0.0,"defaultValue":","}','Administrator',CURRENT_TIMESTAMP,'Administrator',CURRENT_TIMESTAMP);
    COMMIT;
   END IF;
END;
/
DECLARE
   TABLECHECKERFLAG INT;
   TEMP_CAT_ID NUMBER;
   TEMP_TAB_ID NUMBER;
   TEMP_CAT_DIALOG_ID NUMBER;
   TEMP_CAT_DIALOG_PROFILE_ID NUMBER;
   TEMP_CAT_DIALOG_TAB_ID NUMBER;
   TEMP_CAT_TEMPLATE_ORDER NUMBER;
BEGIN
   SELECT COUNT(*) INTO TABLECHECKERFLAG FROM CAT_TEMPLATES where cat_name = 'Forward Engineering - Simple Pattern';
   IF TABLECHECKERFLAG = 0 THEN
    SELECT CAT_TAB_ID INTO TEMP_TAB_ID FROM CAT_TABS WHERE CAT_TAB_NAME = 'com.ads.mm.stb.talend';
    SELECT NVL(MAX(CAT_TEMPLATE_ORDER)+1, 1) INTO TEMP_CAT_TEMPLATE_ORDER  FROM CAT_TEMPLATES WHERE CAT_TAB_ID = TEMP_TAB_ID;
    INSERT INTO CAT_TEMPLATES(CAT_NAME,CAT_DESC,CAT_IMAGE,CAT_STOCK_IMAGE,CAT_ENABLED,CAT_TAB_ID,CAT_SYSTEM_BASED,CAT_SCRIPT,CAT_ACTION,CREATED_BY,CREATED_DATE_TIME,LAST_MODIFIED_BY,LAST_MODIFIED_DATE_TIME,CAT_TEMPLATE_ORDER,CAT_SCRIPTING_LANGUAGE,CAT_OUTPUT_CONTENT_TYPE,CAT_OUTPUT_FILE_EXTENSION,CAT_ENABLE_MAPPING_DIALOG)
    VALUES('Forward Engineering - Simple Pattern', 'Forward Engineering - Simple Pattern', NULL, 'defaultCatImage.png', '1', TEMP_TAB_ID, '1', NULL, 'NULL', 'AnalytiX Data Services', CURRENT_TIMESTAMP, 'AnalytiX Data Services', CURRENT_TIMESTAMP, TEMP_CAT_TEMPLATE_ORDER, 'Javascript', 'XML', '.xml', 0);
    COMMIT;
    SELECT CAT_ID INTO TEMP_CAT_ID FROM CAT_TEMPLATES WHERE CAT_NAME = 'Forward Engineering - Simple Pattern' AND CAT_TAB_ID = TEMP_TAB_ID;
    INSERT INTO CAT_DIALOG(CAT_DIALOG_NAME,CAT_DIALOG_PROPERTIES,CAT_ID,CREATED_BY,CREATED_DATE_TIME,LAST_MODIFIED_BY,LAST_MODIFIED_DATE_TIME) VALUES('Forward Engineering - Simple Pattern','{"fheight":400,"fwidth":600,"flabelwidth":50,"fcontrolwidth":50}',TEMP_CAT_ID,'Administrator',CURRENT_TIMESTAMP,'Administrator',CURRENT_TIMESTAMP);
    COMMIT;
    SELECT  CAT_DIALOG_ID INTO TEMP_CAT_DIALOG_ID FROM CAT_DIALOG WHERE CAT_DIALOG_NAME = 'Forward Engineering - Simple Pattern' AND CAT_ID = TEMP_CAT_ID;
    INSERT INTO CAT_DIALOG_PROFILE(CAT_DIALOG_ID,CAT_DIALOG_PROFILE_NAME,CREATED_BY,CREATED_DATE_TIME,LAST_MODIFIED_BY,LAST_MODIFIED_DATE_TIME) VALUES (TEMP_CAT_DIALOG_ID,'Default','Administrator',CURRENT_TIMESTAMP,'Administrator',CURRENT_TIMESTAMP);
    COMMIT;
    SELECT CAT_DIALOG_PROFILE_ID INTO TEMP_CAT_DIALOG_PROFILE_ID  FROM CAT_DIALOG_PROFILE WHERE CAT_DIALOG_PROFILE_NAME = 'Default' AND CAT_DIALOG_ID = TEMP_CAT_DIALOG_ID;
    UPDATE CAT_DIALOG SET CAT_DIALOG_DEFAULT_PROFILE_ID = TEMP_CAT_DIALOG_PROFILE_ID WHERE CAT_DIALOG_ID = TEMP_CAT_DIALOG_ID;
    INSERT INTO CAT_DIALOG_TAB(CAT_DIALOG_PROFILE_ID,CAT_DIALOG_TAB_NAME,CAT_DIALOG_TAB_PROPERTIES,CREATED_BY,CREATED_DATE_TIME,LAST_MODIFIED_BY,LAST_MODIFIED_DATE_TIME) VALUES(TEMP_CAT_DIALOG_PROFILE_ID,'DefaultTab','','Administrator',CURRENT_TIMESTAMP,'Administrator',CURRENT_TIMESTAMP);
    COMMIT;
    SELECT CAT_DIALOG_TAB_ID INTO TEMP_CAT_DIALOG_TAB_ID FROM CAT_DIALOG_TAB WHERE CAT_DIALOG_TAB_NAME = 'DefaultTab' AND CAT_DIALOG_PROFILE_ID = TEMP_CAT_DIALOG_PROFILE_ID;
    INSERT INTO CAT_DIALOG_OPTION(CAT_DIALOG_TAB_ID,CAT_DIALOG_OPTION_NAME,CAT_DIALOG_OPTION_PROPERTIES,CREATED_BY,CREATED_DATE_TIME,LAST_MODIFIED_BY,LAST_MODIFIED_DATE_TIME) VALUES(TEMP_CAT_DIALOG_TAB_ID,'vAmm_Con_Port','{"controlStyle":"","enabled":true,"controlwidth":"100%","visible":true,"multiValued":false,"labelStyleJSON":"","labelStyle":"","tabId":0,"image":"images/textbox.jpg","allowDisabling":false,"list":"","catOptionId":354,"type":"Text Box","title":"AMM Port","container":false,"controlStyleJSON":"","name":"vAmm_Con_Port","html":"","defaultValue":"1433","catOptionOrder":1}','Administrator',CURRENT_TIMESTAMP,'Administrator',CURRENT_TIMESTAMP);
    COMMIT;
    SELECT CAT_DIALOG_TAB_ID INTO TEMP_CAT_DIALOG_TAB_ID FROM CAT_DIALOG_TAB WHERE CAT_DIALOG_TAB_NAME = 'DefaultTab' AND CAT_DIALOG_PROFILE_ID = TEMP_CAT_DIALOG_PROFILE_ID;
    INSERT INTO CAT_DIALOG_OPTION(CAT_DIALOG_TAB_ID,CAT_DIALOG_OPTION_NAME,CAT_DIALOG_OPTION_PROPERTIES,CREATED_BY,CREATED_DATE_TIME,LAST_MODIFIED_BY,LAST_MODIFIED_DATE_TIME) VALUES(TEMP_CAT_DIALOG_TAB_ID,'vAmm_Con_AdditionalParams','{"controlStyle":"","enabled":true,"controlwidth":"100%","visible":true,"multiValued":false,"labelStyleJSON":"","labelStyle":"","tabId":0,"image":"images/textbox.jpg","allowDisabling":false,"list":"","catOptionId":355,"type":"Text Box","title":"AMM AdditionalParams","container":false,"controlStyleJSON":"","name":"vAmm_Con_AdditionalParams","html":"","defaultValue":"","catOptionOrder":7}','Administrator',CURRENT_TIMESTAMP,'Administrator',CURRENT_TIMESTAMP);
    COMMIT;
    SELECT CAT_DIALOG_TAB_ID INTO TEMP_CAT_DIALOG_TAB_ID FROM CAT_DIALOG_TAB WHERE CAT_DIALOG_TAB_NAME = 'DefaultTab' AND CAT_DIALOG_PROFILE_ID = TEMP_CAT_DIALOG_PROFILE_ID;
    INSERT INTO CAT_DIALOG_OPTION(CAT_DIALOG_TAB_ID,CAT_DIALOG_OPTION_NAME,CAT_DIALOG_OPTION_PROPERTIES,CREATED_BY,CREATED_DATE_TIME,LAST_MODIFIED_BY,LAST_MODIFIED_DATE_TIME) VALUES(TEMP_CAT_DIALOG_TAB_ID,'vAmm_Con_Server','{"controlStyle":"","enabled":true,"controlwidth":"100%","visible":true,"multiValued":false,"labelStyleJSON":"","labelStyle":"","tabId":0,"image":"images/textbox.jpg","allowDisabling":false,"list":"","catOptionId":356,"type":"Text Box","title":"AMM Server","container":false,"controlStyleJSON":"","name":"vAmm_Con_Server","html":"","defaultValue":"localhost","catOptionOrder":0}','Administrator',CURRENT_TIMESTAMP,'Administrator',CURRENT_TIMESTAMP);
    COMMIT;
    SELECT CAT_DIALOG_TAB_ID INTO TEMP_CAT_DIALOG_TAB_ID FROM CAT_DIALOG_TAB WHERE CAT_DIALOG_TAB_NAME = 'DefaultTab' AND CAT_DIALOG_PROFILE_ID = TEMP_CAT_DIALOG_PROFILE_ID;
    INSERT INTO CAT_DIALOG_OPTION(CAT_DIALOG_TAB_ID,CAT_DIALOG_OPTION_NAME,CAT_DIALOG_OPTION_PROPERTIES,CREATED_BY,CREATED_DATE_TIME,LAST_MODIFIED_BY,LAST_MODIFIED_DATE_TIME) VALUES(TEMP_CAT_DIALOG_TAB_ID,'vAmm_Con_Database','{"controlStyle":"","enabled":true,"controlwidth":"100%","visible":true,"multiValued":false,"labelStyleJSON":"","labelStyle":"","tabId":0,"image":"images/textbox.jpg","allowDisabling":false,"list":"","catOptionId":357,"type":"Text Box","title":"AMM Database","container":false,"controlStyleJSON":"","name":"vAmm_Con_Database","html":"","defaultValue":"AMM","catOptionOrder":2}','Administrator',CURRENT_TIMESTAMP,'Administrator',CURRENT_TIMESTAMP);
    COMMIT;
    SELECT CAT_DIALOG_TAB_ID INTO TEMP_CAT_DIALOG_TAB_ID FROM CAT_DIALOG_TAB WHERE CAT_DIALOG_TAB_NAME = 'DefaultTab' AND CAT_DIALOG_PROFILE_ID = TEMP_CAT_DIALOG_PROFILE_ID;
    INSERT INTO CAT_DIALOG_OPTION(CAT_DIALOG_TAB_ID,CAT_DIALOG_OPTION_NAME,CAT_DIALOG_OPTION_PROPERTIES,CREATED_BY,CREATED_DATE_TIME,LAST_MODIFIED_BY,LAST_MODIFIED_DATE_TIME) VALUES(TEMP_CAT_DIALOG_TAB_ID,'vAmm_Con_Login','{"controlStyle":"","enabled":true,"controlwidth":"100%","visible":true,"multiValued":false,"labelStyleJSON":"","labelStyle":"","tabId":0,"image":"images/textbox.jpg","allowDisabling":false,"list":"","catOptionId":358,"type":"Text Box","title":"AMM Login","controlStyleJSON":"","container":false,"name":"vAmm_Con_Login","html":"","defaultValue":"amm","catOptionOrder":4}','Administrator',CURRENT_TIMESTAMP,'Administrator',CURRENT_TIMESTAMP);
    COMMIT;
    SELECT CAT_DIALOG_TAB_ID INTO TEMP_CAT_DIALOG_TAB_ID FROM CAT_DIALOG_TAB WHERE CAT_DIALOG_TAB_NAME = 'DefaultTab' AND CAT_DIALOG_PROFILE_ID = TEMP_CAT_DIALOG_PROFILE_ID;
    INSERT INTO CAT_DIALOG_OPTION(CAT_DIALOG_TAB_ID,CAT_DIALOG_OPTION_NAME,CAT_DIALOG_OPTION_PROPERTIES,CREATED_BY,CREATED_DATE_TIME,LAST_MODIFIED_BY,LAST_MODIFIED_DATE_TIME) VALUES(TEMP_CAT_DIALOG_TAB_ID,'vAmm_Con_Schema','{"controlStyle":"","enabled":true,"controlwidth":"100%","visible":true,"multiValued":false,"labelStyleJSON":"","labelStyle":"","tabId":0,"image":"images/textbox.jpg","allowDisabling":false,"list":"","catOptionId":359,"type":"Text Box","title":"Amm Schema","controlStyleJSON":"","container":false,"name":"vAmm_Con_Schema","html":"","defaultValue":"dbo","catOptionOrder":3}','Administrator',CURRENT_TIMESTAMP,'Administrator',CURRENT_TIMESTAMP);
    COMMIT;
    SELECT CAT_DIALOG_TAB_ID INTO TEMP_CAT_DIALOG_TAB_ID FROM CAT_DIALOG_TAB WHERE CAT_DIALOG_TAB_NAME = 'DefaultTab' AND CAT_DIALOG_PROFILE_ID = TEMP_CAT_DIALOG_PROFILE_ID;
    INSERT INTO CAT_DIALOG_OPTION(CAT_DIALOG_TAB_ID,CAT_DIALOG_OPTION_NAME,CAT_DIALOG_OPTION_PROPERTIES,CREATED_BY,CREATED_DATE_TIME,LAST_MODIFIED_BY,LAST_MODIFIED_DATE_TIME) VALUES(TEMP_CAT_DIALOG_TAB_ID,'vAmm_Con_Password','{"controlStyle":"","enabled":true,"controlwidth":"100%","visible":true,"multiValued":false,"labelStyleJSON":"","labelStyle":"","tabId":0,"image":"images/textbox.jpg","allowDisabling":false,"list":"","catOptionId":360,"type":"Text Box","title":"AMM Password","controlStyleJSON":"","container":false,"name":"vAmm_Con_Password","html":"","defaultValue":"amm","catOptionOrder":5}','Administrator',CURRENT_TIMESTAMP,'Administrator',CURRENT_TIMESTAMP);
    COMMIT;
    SELECT CAT_DIALOG_TAB_ID INTO TEMP_CAT_DIALOG_TAB_ID FROM CAT_DIALOG_TAB WHERE CAT_DIALOG_TAB_NAME = 'DefaultTab' AND CAT_DIALOG_PROFILE_ID = TEMP_CAT_DIALOG_PROFILE_ID;
    INSERT INTO CAT_DIALOG_OPTION(CAT_DIALOG_TAB_ID,CAT_DIALOG_OPTION_NAME,CAT_DIALOG_OPTION_PROPERTIES,CREATED_BY,CREATED_DATE_TIME,LAST_MODIFIED_BY,LAST_MODIFIED_DATE_TIME) VALUES(TEMP_CAT_DIALOG_TAB_ID,'vsrc_col_count','{"controlStyle":"","enabled":true,"controlwidth":"100%","visible":false,"multiValued":false,"labelStyleJSON":"","labelStyle":"","tabId":0,"image":"images/textbox.jpg","allowDisabling":false,"list":"","catOptionId":361,"type":"Text Box","title":"src_col_count","controlStyleJSON":"","container":false,"name":"vsrc_col_count","html":"","defaultValue":"","catOptionOrder":8}','Administrator',CURRENT_TIMESTAMP,'Administrator',CURRENT_TIMESTAMP);
    COMMIT;
    SELECT CAT_DIALOG_TAB_ID INTO TEMP_CAT_DIALOG_TAB_ID FROM CAT_DIALOG_TAB WHERE CAT_DIALOG_TAB_NAME = 'DefaultTab' AND CAT_DIALOG_PROFILE_ID = TEMP_CAT_DIALOG_PROFILE_ID;
    INSERT INTO CAT_DIALOG_OPTION(CAT_DIALOG_TAB_ID,CAT_DIALOG_OPTION_NAME,CAT_DIALOG_OPTION_PROPERTIES,CREATED_BY,CREATED_DATE_TIME,LAST_MODIFIED_BY,LAST_MODIFIED_DATE_TIME) VALUES(TEMP_CAT_DIALOG_TAB_ID,'vtgt_col_count','{"controlStyle":"","enabled":true,"controlwidth":"100%","visible":false,"multiValued":false,"labelStyleJSON":"","labelStyle":"","tabId":0,"image":"images/textbox.jpg","allowDisabling":false,"list":"","catOptionId":362,"type":"Text Box","title":"tgt_col_count","controlStyleJSON":"","container":false,"name":"vtgt_col_count","html":"","defaultValue":"","catOptionOrder":9}','Administrator',CURRENT_TIMESTAMP,'Administrator',CURRENT_TIMESTAMP);
    COMMIT;
    SELECT CAT_DIALOG_TAB_ID INTO TEMP_CAT_DIALOG_TAB_ID FROM CAT_DIALOG_TAB WHERE CAT_DIALOG_TAB_NAME = 'DefaultTab' AND CAT_DIALOG_PROFILE_ID = TEMP_CAT_DIALOG_PROFILE_ID;
    INSERT INTO CAT_DIALOG_OPTION(CAT_DIALOG_TAB_ID,CAT_DIALOG_OPTION_NAME,CAT_DIALOG_OPTION_PROPERTIES,CREATED_BY,CREATED_DATE_TIME,LAST_MODIFIED_BY,LAST_MODIFIED_DATE_TIME) VALUES(TEMP_CAT_DIALOG_TAB_ID,'vMap_ID','{"controlStyle":"","enabled":true,"controlwidth":"100%","visible":false,"multiValued":false,"labelStyleJSON":"","labelStyle":"","tabId":0,"image":"images/textbox.jpg","allowDisabling":false,"list":"","catOptionId":363,"type":"Text Box","title":"Map_ID","controlStyleJSON":"","container":false,"name":"vMap_ID","html":"","defaultValue":"","catOptionOrder":10}','Administrator',CURRENT_TIMESTAMP,'Administrator',CURRENT_TIMESTAMP);
    COMMIT;
    SELECT CAT_DIALOG_TAB_ID INTO TEMP_CAT_DIALOG_TAB_ID FROM CAT_DIALOG_TAB WHERE CAT_DIALOG_TAB_NAME = 'DefaultTab' AND CAT_DIALOG_PROFILE_ID = TEMP_CAT_DIALOG_PROFILE_ID;
    INSERT INTO CAT_DIALOG_OPTION(CAT_DIALOG_TAB_ID,CAT_DIALOG_OPTION_NAME,CAT_DIALOG_OPTION_PROPERTIES,CREATED_BY,CREATED_DATE_TIME,LAST_MODIFIED_BY,LAST_MODIFIED_DATE_TIME) VALUES(TEMP_CAT_DIALOG_TAB_ID,'vProj_ID','{"controlStyle":"","enabled":true,"controlwidth":"100%","visible":false,"multiValued":false,"labelStyleJSON":"","labelStyle":"","tabId":0,"image":"images/textbox.jpg","allowDisabling":false,"list":"","catOptionId":364,"type":"Text Box","title":"Proj_ID","controlStyleJSON":"","container":false,"name":"vProj_ID","html":"","defaultValue":"","catOptionOrder":11}','Administrator',CURRENT_TIMESTAMP,'Administrator',CURRENT_TIMESTAMP);
    COMMIT;
    SELECT CAT_DIALOG_TAB_ID INTO TEMP_CAT_DIALOG_TAB_ID FROM CAT_DIALOG_TAB WHERE CAT_DIALOG_TAB_NAME = 'DefaultTab' AND CAT_DIALOG_PROFILE_ID = TEMP_CAT_DIALOG_PROFILE_ID;
    INSERT INTO CAT_DIALOG_OPTION(CAT_DIALOG_TAB_ID,CAT_DIALOG_OPTION_NAME,CAT_DIALOG_OPTION_PROPERTIES,CREATED_BY,CREATED_DATE_TIME,LAST_MODIFIED_BY,LAST_MODIFIED_DATE_TIME) VALUES(TEMP_CAT_DIALOG_TAB_ID,'vMap_Name','{"controlStyle":"","enabled":true,"controlwidth":"100%","visible":true,"multiValued":false,"labelStyleJSON":"","labelStyle":"","tabId":0,"image":"images/textbox.jpg","allowDisabling":false,"list":"","catOptionId":365,"type":"Text Box","title":"Map_Name","controlStyleJSON":"","container":false,"name":"vMap_Name","html":"","defaultValue":"","catOptionOrder":12}','Administrator',CURRENT_TIMESTAMP,'Administrator',CURRENT_TIMESTAMP);
    COMMIT;
    SELECT CAT_DIALOG_TAB_ID INTO TEMP_CAT_DIALOG_TAB_ID FROM CAT_DIALOG_TAB WHERE CAT_DIALOG_TAB_NAME = 'DefaultTab' AND CAT_DIALOG_PROFILE_ID = TEMP_CAT_DIALOG_PROFILE_ID;
    INSERT INTO CAT_DIALOG_OPTION(CAT_DIALOG_TAB_ID,CAT_DIALOG_OPTION_NAME,CAT_DIALOG_OPTION_PROPERTIES,CREATED_BY,CREATED_DATE_TIME,LAST_MODIFIED_BY,LAST_MODIFIED_DATE_TIME) VALUES(TEMP_CAT_DIALOG_TAB_ID,'vProj_Name','{"controlStyle":"","enabled":true,"controlwidth":"100%","visible":true,"multiValued":false,"labelStyleJSON":"","labelStyle":"","tabId":0,"image":"images/textbox.jpg","allowDisabling":false,"list":"","catOptionId":366,"type":"Text Box","title":"Proj_Name","controlStyleJSON":"","container":false,"name":"vProj_Name","html":"","defaultValue":"","catOptionOrder":13}','Administrator',CURRENT_TIMESTAMP,'Administrator',CURRENT_TIMESTAMP);
    COMMIT;
    SELECT CAT_DIALOG_TAB_ID INTO TEMP_CAT_DIALOG_TAB_ID FROM CAT_DIALOG_TAB WHERE CAT_DIALOG_TAB_NAME = 'DefaultTab' AND CAT_DIALOG_PROFILE_ID = TEMP_CAT_DIALOG_PROFILE_ID;
    INSERT INTO CAT_DIALOG_OPTION(CAT_DIALOG_TAB_ID,CAT_DIALOG_OPTION_NAME,CAT_DIALOG_OPTION_PROPERTIES,CREATED_BY,CREATED_DATE_TIME,LAST_MODIFIED_BY,LAST_MODIFIED_DATE_TIME) VALUES(TEMP_CAT_DIALOG_TAB_ID,'vOutput_file_path','{"controlStyle":"","enabled":true,"controlwidth":"100%","visible":true,"multiValued":false,"labelStyleJSON":"","labelStyle":"","tabId":0,"image":"images/textbox.jpg","allowDisabling":false,"list":"","catOptionId":367,"type":"Text Box","title":"Output_file_path","container":false,"controlStyleJSON":"","name":"vOutput_file_path","html":"","defaultValue":"","catOptionOrder":6}','Administrator',CURRENT_TIMESTAMP,'Administrator',CURRENT_TIMESTAMP);
    COMMIT;
   END IF;
END;
/
DECLARE
   TABLECHECKERFLAG INT;
   TEMP_CAT_ID NUMBER;
   TEMP_TAB_ID NUMBER;
   TEMP_CAT_DIALOG_ID NUMBER;
   TEMP_CAT_DIALOG_PROFILE_ID NUMBER;
   TEMP_CAT_DIALOG_TAB_ID NUMBER;
   TEMP_CAT_TEMPLATE_ORDER NUMBER;
BEGIN
   SELECT COUNT(*) INTO TABLECHECKERFLAG FROM CAT_TEMPLATES where cat_name = 'Reverse Engineering - Simple Pattern';
   IF TABLECHECKERFLAG = 0 THEN
    SELECT CAT_TAB_ID INTO TEMP_TAB_ID FROM CAT_TABS WHERE CAT_TAB_NAME = 'com.ads.mm.stb.talend';
    SELECT NVL(MAX(CAT_TEMPLATE_ORDER)+1, 1) INTO TEMP_CAT_TEMPLATE_ORDER  FROM CAT_TEMPLATES WHERE CAT_TAB_ID = TEMP_TAB_ID;
    INSERT INTO CAT_TEMPLATES(CAT_NAME,CAT_DESC,CAT_IMAGE,CAT_STOCK_IMAGE,CAT_ENABLED,CAT_TAB_ID,CAT_SYSTEM_BASED,CAT_SCRIPT,CAT_ACTION,CREATED_BY,CREATED_DATE_TIME,LAST_MODIFIED_BY,LAST_MODIFIED_DATE_TIME,CAT_TEMPLATE_ORDER,CAT_SCRIPTING_LANGUAGE,CAT_OUTPUT_CONTENT_TYPE,CAT_OUTPUT_FILE_EXTENSION,CAT_ENABLE_MAPPING_DIALOG)
    VALUES('Reverse Engineering - Simple Pattern', 'Reverse Engineering - Simple Pattern', NULL, 'defaultCatImage.png', '1', TEMP_TAB_ID, '1', NULL, 'NULL', 'AnalytiX Data Services', CURRENT_TIMESTAMP, 'AnalytiX Data Services', CURRENT_TIMESTAMP, TEMP_CAT_TEMPLATE_ORDER, 'Javascript', 'Plain Text', '.txt', 0);
    COMMIT;
    SELECT CAT_ID INTO TEMP_CAT_ID FROM CAT_TEMPLATES WHERE CAT_NAME = 'Reverse Engineering - Simple Pattern' AND CAT_TAB_ID = TEMP_TAB_ID;
    INSERT INTO CAT_DIALOG(CAT_DIALOG_NAME,CAT_DIALOG_PROPERTIES,CAT_ID,CREATED_BY,CREATED_DATE_TIME,LAST_MODIFIED_BY,LAST_MODIFIED_DATE_TIME) VALUES('Reverse Engineering - Simple Pattern','{"fheight":400,"fwidth":600,"flabelwidth":50,"fcontrolwidth":50}',TEMP_CAT_ID,'Administrator',CURRENT_TIMESTAMP,'Administrator',CURRENT_TIMESTAMP);
    COMMIT;
    SELECT  CAT_DIALOG_ID INTO TEMP_CAT_DIALOG_ID FROM CAT_DIALOG WHERE CAT_DIALOG_NAME = 'Reverse Engineering - Simple Pattern' AND CAT_ID = TEMP_CAT_ID;
    INSERT INTO CAT_DIALOG_PROFILE(CAT_DIALOG_ID,CAT_DIALOG_PROFILE_NAME,CREATED_BY,CREATED_DATE_TIME,LAST_MODIFIED_BY,LAST_MODIFIED_DATE_TIME) VALUES (TEMP_CAT_DIALOG_ID,'Default','Administrator',CURRENT_TIMESTAMP,'Administrator',CURRENT_TIMESTAMP);
    COMMIT;
    SELECT CAT_DIALOG_PROFILE_ID INTO TEMP_CAT_DIALOG_PROFILE_ID  FROM CAT_DIALOG_PROFILE WHERE CAT_DIALOG_PROFILE_NAME = 'Default' AND CAT_DIALOG_ID = TEMP_CAT_DIALOG_ID;
    UPDATE CAT_DIALOG SET CAT_DIALOG_DEFAULT_PROFILE_ID = TEMP_CAT_DIALOG_PROFILE_ID WHERE CAT_DIALOG_ID = TEMP_CAT_DIALOG_ID;
    INSERT INTO CAT_DIALOG_TAB(CAT_DIALOG_PROFILE_ID,CAT_DIALOG_TAB_NAME,CAT_DIALOG_TAB_PROPERTIES,CREATED_BY,CREATED_DATE_TIME,LAST_MODIFIED_BY,LAST_MODIFIED_DATE_TIME) VALUES(TEMP_CAT_DIALOG_PROFILE_ID,'DefaultTab','','Administrator',CURRENT_TIMESTAMP,'Administrator',CURRENT_TIMESTAMP);
    COMMIT;
    SELECT CAT_DIALOG_TAB_ID INTO TEMP_CAT_DIALOG_TAB_ID FROM CAT_DIALOG_TAB WHERE CAT_DIALOG_TAB_NAME = 'DefaultTab' AND CAT_DIALOG_PROFILE_ID = TEMP_CAT_DIALOG_PROFILE_ID;
    INSERT INTO CAT_DIALOG_OPTION(CAT_DIALOG_TAB_ID,CAT_DIALOG_OPTION_NAME,CAT_DIALOG_OPTION_PROPERTIES,CREATED_BY,CREATED_DATE_TIME,LAST_MODIFIED_BY,LAST_MODIFIED_DATE_TIME) VALUES(TEMP_CAT_DIALOG_TAB_ID,'vAMM_tables_AdditionalParams','{"controlStyle":"","enabled":true,"controlwidth":"100%","visible":false,"multiValued":false,"labelStyleJSON":"","labelStyle":"","tabId":0,"image":"images/textbox.jpg","allowDisabling":false,"list":"","catOptionId":205,"type":"Text Box","title":"AMM AdditionalParams","container":false,"controlStyleJSON":"","name":"vAMM_tables_AdditionalParams","html":"","defaultValue":"","catOptionOrder":9}','Administrator',CURRENT_TIMESTAMP,'Administrator',CURRENT_TIMESTAMP);
    COMMIT;
    SELECT CAT_DIALOG_TAB_ID INTO TEMP_CAT_DIALOG_TAB_ID FROM CAT_DIALOG_TAB WHERE CAT_DIALOG_TAB_NAME = 'DefaultTab' AND CAT_DIALOG_PROFILE_ID = TEMP_CAT_DIALOG_PROFILE_ID;
    INSERT INTO CAT_DIALOG_OPTION(CAT_DIALOG_TAB_ID,CAT_DIALOG_OPTION_NAME,CAT_DIALOG_OPTION_PROPERTIES,CREATED_BY,CREATED_DATE_TIME,LAST_MODIFIED_BY,LAST_MODIFIED_DATE_TIME) VALUES(TEMP_CAT_DIALOG_TAB_ID,'vAMM_tables_Database','{"controlStyle":"","enabled":true,"controlwidth":"100%","visible":true,"multiValued":false,"labelStyleJSON":"","labelStyle":"","tabId":0,"image":"images/textbox.jpg","allowDisabling":false,"list":"","catOptionId":206,"type":"Text Box","title":"AMM Database","container":false,"controlStyleJSON":"","name":"vAMM_tables_Database","html":"","defaultValue":"AMM6","catOptionOrder":1}','Administrator',CURRENT_TIMESTAMP,'Administrator',CURRENT_TIMESTAMP);
    COMMIT;
    SELECT CAT_DIALOG_TAB_ID INTO TEMP_CAT_DIALOG_TAB_ID FROM CAT_DIALOG_TAB WHERE CAT_DIALOG_TAB_NAME = 'DefaultTab' AND CAT_DIALOG_PROFILE_ID = TEMP_CAT_DIALOG_PROFILE_ID;
    INSERT INTO CAT_DIALOG_OPTION(CAT_DIALOG_TAB_ID,CAT_DIALOG_OPTION_NAME,CAT_DIALOG_OPTION_PROPERTIES,CREATED_BY,CREATED_DATE_TIME,LAST_MODIFIED_BY,LAST_MODIFIED_DATE_TIME) VALUES(TEMP_CAT_DIALOG_TAB_ID,'vAMM_tables_Login','{"controlStyle":"","enabled":true,"controlwidth":"100%","visible":true,"multiValued":false,"labelStyleJSON":"","labelStyle":"","tabId":0,"image":"images/textbox.jpg","allowDisabling":false,"list":"","catOptionId":207,"type":"Text Box","title":"AMM Login","container":false,"controlStyleJSON":"","name":"vAMM_tables_Login","html":"","defaultValue":"jay","catOptionOrder":4}','Administrator',CURRENT_TIMESTAMP,'Administrator',CURRENT_TIMESTAMP);
    COMMIT;
    SELECT CAT_DIALOG_TAB_ID INTO TEMP_CAT_DIALOG_TAB_ID FROM CAT_DIALOG_TAB WHERE CAT_DIALOG_TAB_NAME = 'DefaultTab' AND CAT_DIALOG_PROFILE_ID = TEMP_CAT_DIALOG_PROFILE_ID;
    INSERT INTO CAT_DIALOG_OPTION(CAT_DIALOG_TAB_ID,CAT_DIALOG_OPTION_NAME,CAT_DIALOG_OPTION_PROPERTIES,CREATED_BY,CREATED_DATE_TIME,LAST_MODIFIED_BY,LAST_MODIFIED_DATE_TIME) VALUES(TEMP_CAT_DIALOG_TAB_ID,'vAMM_tables_Password','{"controlStyle":"","enabled":true,"controlwidth":"100%","visible":true,"multiValued":false,"labelStyleJSON":"","labelStyle":"","tabId":0,"image":"images/textbox.jpg","allowDisabling":false,"list":"","catOptionId":208,"type":"Text Box","title":"AMM Password","container":false,"controlStyleJSON":"","name":"vAMM_tables_Password","html":"","defaultValue":"jay","catOptionOrder":5}','Administrator',CURRENT_TIMESTAMP,'Administrator',CURRENT_TIMESTAMP);
    COMMIT;
    SELECT CAT_DIALOG_TAB_ID INTO TEMP_CAT_DIALOG_TAB_ID FROM CAT_DIALOG_TAB WHERE CAT_DIALOG_TAB_NAME = 'DefaultTab' AND CAT_DIALOG_PROFILE_ID = TEMP_CAT_DIALOG_PROFILE_ID;
    INSERT INTO CAT_DIALOG_OPTION(CAT_DIALOG_TAB_ID,CAT_DIALOG_OPTION_NAME,CAT_DIALOG_OPTION_PROPERTIES,CREATED_BY,CREATED_DATE_TIME,LAST_MODIFIED_BY,LAST_MODIFIED_DATE_TIME) VALUES(TEMP_CAT_DIALOG_TAB_ID,'vAMM_tables_Port','{"controlStyle":"","enabled":true,"controlwidth":"100%","visible":true,"multiValued":false,"labelStyleJSON":"","labelStyle":"","tabId":0,"image":"images/textbox.jpg","allowDisabling":false,"list":"","catOptionId":209,"type":"Text Box","title":"AMM Port","container":false,"controlStyleJSON":"","name":"vAMM_tables_Port","html":"","defaultValue":"1433","catOptionOrder":2}','Administrator',CURRENT_TIMESTAMP,'Administrator',CURRENT_TIMESTAMP);
    COMMIT;
    SELECT CAT_DIALOG_TAB_ID INTO TEMP_CAT_DIALOG_TAB_ID FROM CAT_DIALOG_TAB WHERE CAT_DIALOG_TAB_NAME = 'DefaultTab' AND CAT_DIALOG_PROFILE_ID = TEMP_CAT_DIALOG_PROFILE_ID;
    INSERT INTO CAT_DIALOG_OPTION(CAT_DIALOG_TAB_ID,CAT_DIALOG_OPTION_NAME,CAT_DIALOG_OPTION_PROPERTIES,CREATED_BY,CREATED_DATE_TIME,LAST_MODIFIED_BY,LAST_MODIFIED_DATE_TIME) VALUES(TEMP_CAT_DIALOG_TAB_ID,'vAMM_tables_Schema','{"controlStyle":"","enabled":true,"controlwidth":"100%","visible":true,"multiValued":false,"labelStyleJSON":"","labelStyle":"","tabId":0,"image":"images/textbox.jpg","allowDisabling":false,"list":"","catOptionId":210,"type":"Text Box","title":"AMM Schema","container":false,"controlStyleJSON":"","name":"vAMM_tables_Schema","html":"","defaultValue":"dbo","catOptionOrder":3}','Administrator',CURRENT_TIMESTAMP,'Administrator',CURRENT_TIMESTAMP);
    COMMIT;
    SELECT CAT_DIALOG_TAB_ID INTO TEMP_CAT_DIALOG_TAB_ID FROM CAT_DIALOG_TAB WHERE CAT_DIALOG_TAB_NAME = 'DefaultTab' AND CAT_DIALOG_PROFILE_ID = TEMP_CAT_DIALOG_PROFILE_ID;
    INSERT INTO CAT_DIALOG_OPTION(CAT_DIALOG_TAB_ID,CAT_DIALOG_OPTION_NAME,CAT_DIALOG_OPTION_PROPERTIES,CREATED_BY,CREATED_DATE_TIME,LAST_MODIFIED_BY,LAST_MODIFIED_DATE_TIME) VALUES(TEMP_CAT_DIALOG_TAB_ID,'vAMM_tables_Server','{"controlStyle":"","enabled":true,"controlwidth":"100%","visible":true,"multiValued":false,"labelStyleJSON":"","labelStyle":"","tabId":0,"image":"images/textbox.jpg","allowDisabling":false,"list":"","catOptionId":211,"type":"Text Box","title":"AMM Server","container":false,"controlStyleJSON":"","name":"vAMM_tables_Server","html":"","defaultValue":"localhost","catOptionOrder":0}','Administrator',CURRENT_TIMESTAMP,'Administrator',CURRENT_TIMESTAMP);
    COMMIT;
    SELECT CAT_DIALOG_TAB_ID INTO TEMP_CAT_DIALOG_TAB_ID FROM CAT_DIALOG_TAB WHERE CAT_DIALOG_TAB_NAME = 'DefaultTab' AND CAT_DIALOG_PROFILE_ID = TEMP_CAT_DIALOG_PROFILE_ID;
    INSERT INTO CAT_DIALOG_OPTION(CAT_DIALOG_TAB_ID,CAT_DIALOG_OPTION_NAME,CAT_DIALOG_OPTION_PROPERTIES,CREATED_BY,CREATED_DATE_TIME,LAST_MODIFIED_BY,LAST_MODIFIED_DATE_TIME) VALUES(TEMP_CAT_DIALOG_TAB_ID,'vMap_ID','{"controlStyle":"","enabled":true,"controlwidth":"100%","visible":false,"multiValued":false,"labelStyleJSON":"","labelStyle":"","tabId":0,"image":"images/textbox.jpg","allowDisabling":false,"list":"","catOptionId":212,"type":"Text Box","title":"vMap_ID","container":false,"controlStyleJSON":"","name":"vMap_ID","html":"","defaultValue":"","catOptionOrder":10}','Administrator',CURRENT_TIMESTAMP,'Administrator',CURRENT_TIMESTAMP);
    COMMIT;
    SELECT CAT_DIALOG_TAB_ID INTO TEMP_CAT_DIALOG_TAB_ID FROM CAT_DIALOG_TAB WHERE CAT_DIALOG_TAB_NAME = 'DefaultTab' AND CAT_DIALOG_PROFILE_ID = TEMP_CAT_DIALOG_PROFILE_ID;
    INSERT INTO CAT_DIALOG_OPTION(CAT_DIALOG_TAB_ID,CAT_DIALOG_OPTION_NAME,CAT_DIALOG_OPTION_PROPERTIES,CREATED_BY,CREATED_DATE_TIME,LAST_MODIFIED_BY,LAST_MODIFIED_DATE_TIME) VALUES(TEMP_CAT_DIALOG_TAB_ID,'vMap_Name','{"controlStyle":"","enabled":true,"controlwidth":"100%","visible":true,"multiValued":false,"labelStyleJSON":"","labelStyle":"","tabId":0,"image":"images/textbox.jpg","allowDisabling":false,"list":"","catOptionId":213,"type":"Text Box","title":"AMM MapName","container":false,"controlStyleJSON":"","name":"vMap_Name","html":"","defaultValue":"","catOptionOrder":8}','Administrator',CURRENT_TIMESTAMP,'Administrator',CURRENT_TIMESTAMP);
    COMMIT;
    SELECT CAT_DIALOG_TAB_ID INTO TEMP_CAT_DIALOG_TAB_ID FROM CAT_DIALOG_TAB WHERE CAT_DIALOG_TAB_NAME = 'DefaultTab' AND CAT_DIALOG_PROFILE_ID = TEMP_CAT_DIALOG_PROFILE_ID;
    INSERT INTO CAT_DIALOG_OPTION(CAT_DIALOG_TAB_ID,CAT_DIALOG_OPTION_NAME,CAT_DIALOG_OPTION_PROPERTIES,CREATED_BY,CREATED_DATE_TIME,LAST_MODIFIED_BY,LAST_MODIFIED_DATE_TIME) VALUES(TEMP_CAT_DIALOG_TAB_ID,'vProj_ID','{"controlStyle":"","enabled":true,"controlwidth":"100%","visible":false,"multiValued":false,"labelStyleJSON":"","labelStyle":"","tabId":0,"image":"images/textbox.jpg","allowDisabling":false,"list":"","catOptionId":214,"type":"Text Box","title":"vProj_ID","container":false,"controlStyleJSON":"","name":"vProj_ID","html":"","defaultValue":"","catOptionOrder":11}','Administrator',CURRENT_TIMESTAMP,'Administrator',CURRENT_TIMESTAMP);
    COMMIT;
    SELECT CAT_DIALOG_TAB_ID INTO TEMP_CAT_DIALOG_TAB_ID FROM CAT_DIALOG_TAB WHERE CAT_DIALOG_TAB_NAME = 'DefaultTab' AND CAT_DIALOG_PROFILE_ID = TEMP_CAT_DIALOG_PROFILE_ID;
    INSERT INTO CAT_DIALOG_OPTION(CAT_DIALOG_TAB_ID,CAT_DIALOG_OPTION_NAME,CAT_DIALOG_OPTION_PROPERTIES,CREATED_BY,CREATED_DATE_TIME,LAST_MODIFIED_BY,LAST_MODIFIED_DATE_TIME) VALUES(TEMP_CAT_DIALOG_TAB_ID,'vProj_Name','{"controlStyle":"","enabled":true,"controlwidth":"100%","visible":true,"multiValued":false,"labelStyleJSON":"","labelStyle":"","tabId":0,"image":"images/textbox.jpg","allowDisabling":false,"list":"","catOptionId":215,"type":"Text Box","title":"AMM ProjName","container":false,"controlStyleJSON":"","name":"vProj_Name","html":"","defaultValue":"Talend_To_Amm","catOptionOrder":7}','Administrator',CURRENT_TIMESTAMP,'Administrator',CURRENT_TIMESTAMP);
    COMMIT;
    SELECT CAT_DIALOG_TAB_ID INTO TEMP_CAT_DIALOG_TAB_ID FROM CAT_DIALOG_TAB WHERE CAT_DIALOG_TAB_NAME = 'DefaultTab' AND CAT_DIALOG_PROFILE_ID = TEMP_CAT_DIALOG_PROFILE_ID;
    INSERT INTO CAT_DIALOG_OPTION(CAT_DIALOG_TAB_ID,CAT_DIALOG_OPTION_NAME,CAT_DIALOG_OPTION_PROPERTIES,CREATED_BY,CREATED_DATE_TIME,LAST_MODIFIED_BY,LAST_MODIFIED_DATE_TIME) VALUES(TEMP_CAT_DIALOG_TAB_ID,'vSource_DB','{"controlStyle":"","enabled":true,"controlwidth":"100%","visible":false,"multiValued":false,"labelStyleJSON":"","labelStyle":"","tabId":0,"image":"images/textbox.jpg","allowDisabling":false,"list":"","catOptionId":216,"type":"Text Box","title":"vSource_DB","container":false,"controlStyleJSON":"","name":"vSource_DB","html":"","defaultValue":"MSSQL","catOptionOrder":12}','Administrator',CURRENT_TIMESTAMP,'Administrator',CURRENT_TIMESTAMP);
    COMMIT;
    SELECT CAT_DIALOG_TAB_ID INTO TEMP_CAT_DIALOG_TAB_ID FROM CAT_DIALOG_TAB WHERE CAT_DIALOG_TAB_NAME = 'DefaultTab' AND CAT_DIALOG_PROFILE_ID = TEMP_CAT_DIALOG_PROFILE_ID;
    INSERT INTO CAT_DIALOG_OPTION(CAT_DIALOG_TAB_ID,CAT_DIALOG_OPTION_NAME,CAT_DIALOG_OPTION_PROPERTIES,CREATED_BY,CREATED_DATE_TIME,LAST_MODIFIED_BY,LAST_MODIFIED_DATE_TIME) VALUES(TEMP_CAT_DIALOG_TAB_ID,'vTaland_SRC_File_Path','{"controlStyle":"","enabled":true,"controlwidth":"100%","visible":true,"multiValued":false,"labelStyleJSON":"","labelStyle":"","tabId":0,"image":"images/textbox.jpg","allowDisabling":false,"list":"","catOptionId":217,"type":"Text Box","title":"Taland Source File Path","container":false,"controlStyleJSON":"","name":"vTaland_SRC_File_Path","html":"","defaultValue":" C:/Users/Analytix/Desktop/Subbu/TALEND_TO_AMM_0.1(1)/Input_file/Talend_amm.xml","catOptionOrder":6}','Administrator',CURRENT_TIMESTAMP,'Administrator',CURRENT_TIMESTAMP);
    COMMIT;
    SELECT CAT_DIALOG_TAB_ID INTO TEMP_CAT_DIALOG_TAB_ID FROM CAT_DIALOG_TAB WHERE CAT_DIALOG_TAB_NAME = 'DefaultTab' AND CAT_DIALOG_PROFILE_ID = TEMP_CAT_DIALOG_PROFILE_ID;
    INSERT INTO CAT_DIALOG_OPTION(CAT_DIALOG_TAB_ID,CAT_DIALOG_OPTION_NAME,CAT_DIALOG_OPTION_PROPERTIES,CREATED_BY,CREATED_DATE_TIME,LAST_MODIFIED_BY,LAST_MODIFIED_DATE_TIME) VALUES(TEMP_CAT_DIALOG_TAB_ID,'vTarget_DB','{"controlStyle":"","enabled":true,"controlwidth":"100%","visible":false,"multiValued":false,"labelStyleJSON":"","labelStyle":"","tabId":0,"image":"images/textbox.jpg","allowDisabling":false,"list":"","catOptionId":218,"type":"Text Box","title":"vTarget_DB","container":false,"controlStyleJSON":"","name":"vTarget_DB","html":"","defaultValue":"MSSQL","catOptionOrder":13}','Administrator',CURRENT_TIMESTAMP,'Administrator',CURRENT_TIMESTAMP);
    COMMIT;
   END IF;
END;
/
DECLARE
   TABLECHECKERFLAG INT;
   TEMP_CAT_ID NUMBER;
   TEMP_TAB_ID NUMBER;
   TEMP_CAT_DIALOG_ID NUMBER;
   TEMP_CAT_DIALOG_PROFILE_ID NUMBER;
   TEMP_CAT_DIALOG_TAB_ID NUMBER;
   TEMP_CAT_TEMPLATE_ORDER NUMBER;
BEGIN
   SELECT COUNT(*) INTO TABLECHECKERFLAG FROM CAT_TEMPLATES where cat_name = 'Import Microsoft SSIS DTSX';
   IF TABLECHECKERFLAG = 0 THEN
    SELECT CAT_TAB_ID INTO TEMP_TAB_ID FROM CAT_TABS WHERE CAT_TAB_NAME = 'com.ads.mm.stb.ssis';
    SELECT NVL(MAX(CAT_TEMPLATE_ORDER)+1, 1) INTO TEMP_CAT_TEMPLATE_ORDER  FROM CAT_TEMPLATES WHERE CAT_TAB_ID = TEMP_TAB_ID;
    INSERT INTO CAT_TEMPLATES(CAT_NAME,CAT_DESC,CAT_IMAGE,CAT_STOCK_IMAGE,CAT_ENABLED,CAT_TAB_ID,CAT_SYSTEM_BASED,CAT_SCRIPT,CAT_ACTION,CREATED_BY,CREATED_DATE_TIME,LAST_MODIFIED_BY,LAST_MODIFIED_DATE_TIME,CAT_TEMPLATE_ORDER,CAT_SCRIPTING_LANGUAGE,CAT_OUTPUT_CONTENT_TYPE,CAT_OUTPUT_FILE_EXTENSION,CAT_ENABLE_MAPPING_DIALOG)
    VALUES('Import Microsoft SSIS DTSX', 'Import SSIS DTSX Packages for 2005, 2008, 2010, 2012 & 2014 Versions of Microsoft SQL Server', NULL, 'defaultCatImage.png', '1', TEMP_TAB_ID, '1', NULL, 'NULL', 'AnalytiX Data Services', CURRENT_TIMESTAMP, 'AnalytiX Data Services', CURRENT_TIMESTAMP, TEMP_CAT_TEMPLATE_ORDER, 'Javascript', 'Plain Text', '.log', 0);
    COMMIT;
    SELECT CAT_ID INTO TEMP_CAT_ID FROM CAT_TEMPLATES WHERE CAT_NAME = 'Import Microsoft SSIS DTSX' AND CAT_TAB_ID = TEMP_TAB_ID;
    INSERT INTO CAT_DIALOG(CAT_DIALOG_NAME,CAT_DIALOG_PROPERTIES,CAT_ID,CREATED_BY,CREATED_DATE_TIME,LAST_MODIFIED_BY,LAST_MODIFIED_DATE_TIME) VALUES('DTSX Multi Import Java','{"fheight":385,"fwidth":369,"flabelwidth":"35","fcontrolwidth":"65"}',TEMP_CAT_ID,'Administrator',CURRENT_TIMESTAMP,'Administrator',CURRENT_TIMESTAMP);
    COMMIT;
    SELECT  CAT_DIALOG_ID INTO TEMP_CAT_DIALOG_ID FROM CAT_DIALOG WHERE CAT_DIALOG_NAME = 'DTSX Multi Import Java' AND CAT_ID = TEMP_CAT_ID;
    INSERT INTO CAT_DIALOG_PROFILE(CAT_DIALOG_ID,CAT_DIALOG_PROFILE_NAME,CREATED_BY,CREATED_DATE_TIME,LAST_MODIFIED_BY,LAST_MODIFIED_DATE_TIME) VALUES (TEMP_CAT_DIALOG_ID,'Default','Administrator',CURRENT_TIMESTAMP,'Administrator',CURRENT_TIMESTAMP);
    COMMIT;
    SELECT CAT_DIALOG_PROFILE_ID INTO TEMP_CAT_DIALOG_PROFILE_ID  FROM CAT_DIALOG_PROFILE WHERE CAT_DIALOG_PROFILE_NAME = 'Default' AND CAT_DIALOG_ID = TEMP_CAT_DIALOG_ID;
    UPDATE CAT_DIALOG SET CAT_DIALOG_DEFAULT_PROFILE_ID = TEMP_CAT_DIALOG_PROFILE_ID WHERE CAT_DIALOG_ID = TEMP_CAT_DIALOG_ID;
    COMMIT;
    INSERT INTO CAT_DIALOG_TAB(CAT_DIALOG_PROFILE_ID,CAT_DIALOG_TAB_NAME,CAT_DIALOG_TAB_PROPERTIES,CREATED_BY,CREATED_DATE_TIME,LAST_MODIFIED_BY,LAST_MODIFIED_DATE_TIME) VALUES(TEMP_CAT_DIALOG_PROFILE_ID,'DefaultTab','','Administrator',CURRENT_TIMESTAMP,'Administrator',CURRENT_TIMESTAMP);
    COMMIT;
    SELECT CAT_DIALOG_TAB_ID INTO TEMP_CAT_DIALOG_TAB_ID FROM CAT_DIALOG_TAB WHERE CAT_DIALOG_TAB_NAME = 'DefaultTab' AND CAT_DIALOG_PROFILE_ID = TEMP_CAT_DIALOG_PROFILE_ID;
    INSERT INTO CAT_DIALOG_OPTION(CAT_DIALOG_TAB_ID,CAT_DIALOG_OPTION_NAME,CAT_DIALOG_OPTION_PROPERTIES,CREATED_BY,CREATED_DATE_TIME,LAST_MODIFIED_BY,LAST_MODIFIED_DATE_TIME) VALUES(TEMP_CAT_DIALOG_TAB_ID,'DTSXFILES','{"controlStyle":"font-family:Century Gothic; font-size: 12px;font-weight:regular;text-decoration:none;padding-top:0px;padding-left:0px;padding-right:0px;padding-bottom:0px;text-align:left;vertical-align:top;color:#000000;","showTimer":true,"visible":true,"labelStyleJSON":"{\"font-family\": \"Comic Sans MS\", \"font-size\": \"12px\",\"font-weight\":\"bold\",\"text-decoration\":\"none\",\"padding-top\":\"0\",\"padding-left\":\"0\",\"padding-right\":\"3\",\"padding-bottom\":\"0\",\"text-align\":\" right\",\"vertical-align\":\"center\",\"color\":\"#000000\",\"background-color\": \"#ffffff\"}","labelStyle":"font-family:Comic Sans MS; font-size: 12px;font-weight:bold;text-decoration:none;padding-top:0px;padding-left:0px;padding-right:3px;padding-bottom:0px;text-align: right;vertical-align:center;color:#000000;background-color: #ffffff","catOptionId":2157,"type":"Upload","buttonClear":true,"title":"Upload DTSX","controlStyleJSON":{"vertical-align":"top","padding-right":"0","padding-left":"0","padding-top":"0","color":"#000000","text-align":"left","font-size":"12px","text-decoration":"none","font-family":"Century Gothic","font-weight":"regular","padding-bottom":"0"},"filesCount":"50","name":"DTSXFILES","defaultValue":"","enabled":true,"controlwidth":"100%","multiValued":false,"tabId":0,"componentObject":"","image":"images/uploader.jpg","allowDisabling":false,"list":"","maskField":false,"buttonUpload":true,"container":false,"html":"","controlHeight":"300","catOptionOrder":0}','Administrator',CURRENT_TIMESTAMP,'Administrator',CURRENT_TIMESTAMP);
    COMMIT;
   END IF;
END;
/

DECLARE
   TABLECHECKERFLAG INT;
   TEMP_CAT_ID NUMBER;
   TEMP_TAB_ID NUMBER;
   TEMP_CAT_DIALOG_ID NUMBER;
   TEMP_CAT_DIALOG_PROFILE_ID NUMBER;
   TEMP_CAT_DIALOG_TAB_ID NUMBER;
   TEMP_CAT_TEMPLATE_ORDER NUMBER;
BEGIN
   SELECT COUNT(*) INTO TABLECHECKERFLAG FROM CAT_TEMPLATES where cat_name = 'Generate Microsoft SSIS DTSX';
   IF TABLECHECKERFLAG = 0 THEN
    SELECT CAT_TAB_ID INTO TEMP_TAB_ID FROM CAT_TABS WHERE CAT_TAB_NAME = 'com.ads.mm.stb.ssis';
    SELECT NVL(MAX(CAT_TEMPLATE_ORDER)+1, 1) INTO TEMP_CAT_TEMPLATE_ORDER  FROM CAT_TEMPLATES WHERE CAT_TAB_ID = TEMP_TAB_ID;
    INSERT INTO CAT_TEMPLATES(CAT_NAME,CAT_DESC,CAT_IMAGE,CAT_STOCK_IMAGE,CAT_ENABLED,CAT_TAB_ID,CAT_SYSTEM_BASED,CAT_SCRIPT,CAT_ACTION,CREATED_BY,CREATED_DATE_TIME,LAST_MODIFIED_BY,LAST_MODIFIED_DATE_TIME,CAT_TEMPLATE_ORDER,CAT_SCRIPTING_LANGUAGE,CAT_OUTPUT_CONTENT_TYPE,CAT_OUTPUT_FILE_EXTENSION,CAT_ENABLE_MAPPING_DIALOG)
    VALUES('Generate Microsoft SSIS DTSX', 'Generate SSIS DTSX Packages for 2012 & 2014 Versions of Microsoft SQL Server', NULL, 'defaultCatImage.png', '1', TEMP_TAB_ID, '1', NULL, 'NULL', 'AnalytiX Data Services', CURRENT_TIMESTAMP, 'AnalytiX Data Services', CURRENT_TIMESTAMP, TEMP_CAT_TEMPLATE_ORDER, 'Javascript', 'XML', '.dtsx', 0);
    COMMIT;
    SELECT CAT_ID INTO TEMP_CAT_ID FROM CAT_TEMPLATES WHERE CAT_NAME = 'Generate Microsoft SSIS DTSX' AND CAT_TAB_ID = TEMP_TAB_ID;
    INSERT INTO CAT_DIALOG(CAT_DIALOG_NAME,CAT_DIALOG_PROPERTIES,CAT_ID,CREATED_BY,CREATED_DATE_TIME,LAST_MODIFIED_BY,LAST_MODIFIED_DATE_TIME) VALUES('Generate Microsoft SSIS DTSX','{"fheight":385,"fwidth":369,"flabelwidth":"35","fcontrolwidth":"65"}',TEMP_CAT_ID,'Administrator',CURRENT_TIMESTAMP,'Administrator',CURRENT_TIMESTAMP);
    COMMIT;
    SELECT  CAT_DIALOG_ID INTO TEMP_CAT_DIALOG_ID FROM CAT_DIALOG WHERE CAT_DIALOG_NAME = 'Generate Microsoft SSIS DTSX' AND CAT_ID = TEMP_CAT_ID;
    INSERT INTO CAT_DIALOG_PROFILE(CAT_DIALOG_ID,CAT_DIALOG_PROFILE_NAME,CREATED_BY,CREATED_DATE_TIME,LAST_MODIFIED_BY,LAST_MODIFIED_DATE_TIME) VALUES (TEMP_CAT_DIALOG_ID,'Default','Administrator',CURRENT_TIMESTAMP,'Administrator',CURRENT_TIMESTAMP);
    COMMIT;
    SELECT CAT_DIALOG_PROFILE_ID INTO TEMP_CAT_DIALOG_PROFILE_ID  FROM CAT_DIALOG_PROFILE WHERE CAT_DIALOG_PROFILE_NAME = 'Default' AND CAT_DIALOG_ID = TEMP_CAT_DIALOG_ID;
    UPDATE CAT_DIALOG SET CAT_DIALOG_DEFAULT_PROFILE_ID = TEMP_CAT_DIALOG_PROFILE_ID WHERE CAT_DIALOG_ID = TEMP_CAT_DIALOG_ID;
    COMMIT;
    INSERT INTO CAT_DIALOG_TAB(CAT_DIALOG_PROFILE_ID,CAT_DIALOG_TAB_NAME,CAT_DIALOG_TAB_PROPERTIES,CREATED_BY,CREATED_DATE_TIME,LAST_MODIFIED_BY,LAST_MODIFIED_DATE_TIME) VALUES(TEMP_CAT_DIALOG_PROFILE_ID,'DefaultTab','','Administrator',CURRENT_TIMESTAMP,'Administrator',CURRENT_TIMESTAMP);
    COMMIT;
   END IF;
END;
/
DECLARE
   V_CHECK INT;
BEGIN
    BEGIN
      SELECT 1 INTO V_CHECK  FROM DUAL  WHERE EXISTS ( SELECT *  FROM USER_PREFERENCES WHERE USER_ID LIKE 'SETTINGS_MM_DASHBOARD_LAYOUT_PATTERN%' AND COLUMN_PREFERENCES NOT LIKE '%"id":"g"%');
  EXCEPTION
  WHEN OTHERS THEN
   NULL;
  END;
     IF V_CHECK = 1 THEN
      UPDATE USER_PREFERENCES SET COLUMN_PREFERENCES = REPLACE(COLUMN_PREFERENCES, '}]]}', '}],[{"id":"g"}],[{"id": "h"}, {"id": "i"}, {"id": "j"}]]}' )
      WHERE USER_ID LIKE 'SETTINGS_MM_DASHBOARD_LAYOUT_PATTERN%' AND COLUMN_PREFERENCES NOT LIKE '%"id":"g"%';
   END IF;
END;
/
DECLARE
   COLUMNCHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO COLUMNCHECKERFLAG FROM ALL_TAB_COLUMNS WHERE  OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME = UPPER('RDM_REFERENCE_TABLE') AND COLUMN_NAME=UPPER('RDM_REF_TAB_DATA_STEWARD');
   IF COLUMNCHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'ALTER TABLE RDM_REFERENCE_TABLE ADD RDM_REF_TAB_DATA_STEWARD VARCHAR(100) NULL';
   END IF;
END;
/
DECLARE
   COLUMNCHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO COLUMNCHECKERFLAG FROM ALL_TAB_COLUMNS WHERE  OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME = UPPER('USERS') AND COLUMN_NAME IN ('ISLDAP_USER','EXTERNAL_USER');
   IF COLUMNCHECKERFLAG = 0 THEN
    EXECUTE IMMEDIATE 'ALTER TABLE USERS ADD ISLDAP_USER VARCHAR(1) NULL';
   END IF;
END;
/

DECLARE
   COLUMNCHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO COLUMNCHECKERFLAG FROM ALL_TAB_COLUMNS WHERE  OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME = UPPER('SYSTEM_DOCUMENTS') AND COLUMN_NAME=UPPER('OBJECT_DOC_LINK');
   IF COLUMNCHECKERFLAG = 0 THEN
    EXECUTE IMMEDIATE 'ALTER TABLE SYSTEM_DOCUMENTS ADD OBJECT_DOC_LINK VARCHAR2(2083) NULL';
    EXECUTE IMMEDIATE 'ALTER TABLE MAPPING_DOCUMENTS ADD OBJECT_DOC_LINK VARCHAR2(2083) NULL';
    EXECUTE IMMEDIATE 'ALTER TABLE PROJECT_DOCUMENTS ADD OBJECT_DOC_LINK VARCHAR2(2083) NULL';
    EXECUTE IMMEDIATE 'ALTER TABLE TCM_TESTCASE_DOCS ADD OBJECT_DOC_LINK VARCHAR2(2083) NULL';
   END IF;
END;
/
DECLARE
   COLUMNCHECKERFLAG  INT;
BEGIN
    SELECT COUNT(*) INTO COLUMNCHECKERFLAG FROM ALL_TAB_COLUMNS WHERE  OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME = UPPER('TCM_TESTCASE') AND COLUMN_NAME=UPPER('EXTERNAL_TESTCASE_ID');
   IF COLUMNCHECKERFLAG = 0 THEN
        EXECUTE IMMEDIATE 'ALTER TABLE TCM_TESTCASE ADD EXTERNAL_TESTCASE_ID NUMBER';
    END IF;
END;
/
DECLARE
   COLUMNCHECKERFLAG  INT;
BEGIN
    SELECT COUNT(*) INTO COLUMNCHECKERFLAG FROM ALL_TAB_COLUMNS WHERE  OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME = UPPER('TCM_TESTCASE_STEP') AND COLUMN_NAME=UPPER('EXTERNAL_STEP_ID');
    IF COLUMNCHECKERFLAG = 0 THEN
        EXECUTE IMMEDIATE 'ALTER TABLE TCM_TESTCASE_STEP ADD EXTERNAL_STEP_ID NUMBER';
    END IF;
END;
/
DECLARE
    VERSIONCHECKKERFLAG INT;
    TABLECHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO VERSIONCHECKKERFLAG FROM ADS_MM_VERSION WHERE VALUE <= '6.1';
   IF VERSIONCHECKKERFLAG = 1 THEN
   SELECT COUNT(*) INTO TABLECHECKERFLAG FROM ALL_TABLES WHERE OWNER = sys_context( 'userenv', 'current_schema' ) AND TABLE_NAME = UPPER('TCM_TESTCASE_TYPE');
   IF TABLECHECKERFLAG = 1 THEN
   EXECUTE IMMEDIATE 'INSERT INTO TCM_TESTCASE_TYPE(TESTCASE_TYPE_NAME)
      (
        SELECT ''MANUAL''
        FROM DUAL UNION
        SELECT ''ALT-SCENARIO''
        FROM DUAL UNION
        SELECT ''LR-SCENARIO''
        FROM DUAL UNION
        SELECT ''PERFORMANCE-TEST''
        FROM DUAL UNION
        SELECT ''QAINSPECT-TEST''
        FROM DUAL UNION
        SELECT ''SYSTEM-TEST''
        FROM DUAL UNION
        SELECT ''VAPI-XP-TEST''
        FROM DUAL
      )';
      END IF;
    END IF;
END;
/
DECLARE
TABLECHECKERFLAG INT;
BEGIN
    SELECT COUNT(*) INTO TABLECHECKERFLAG FROM ALL_TABLES WHERE OWNER = sys_context( 'userenv', 'current_schema' ) AND TABLE_NAME = UPPER('OBJECT_USER');
    IF TABLECHECKERFLAG = 0 THEN
        EXECUTE IMMEDIATE  'CREATE TABLE "OBJECT_USER"(
	"OBJECT_ID" NUMBER NOT NULL,
	"OBJECT_TYPE_ID" INT NOT NULL,
	"USER_ID" VARCHAR2(20) NOT NULL,
        "CREATED_BY" VARCHAR2(100) NOT NULL,
        "CREATED_DATE" TIMESTAMP  NOT NULL ENABLE,
        "LAST_MODIFIED_BY" VARCHAR2(100) NULL,
        "LAST_MODIFIED_DATE" TIMESTAMP NOT NULL ENABLE,
        CONSTRAINT "FK_OBJECT_USER_OID" FOREIGN KEY("OBJECT_TYPE_ID") REFERENCES ADS_KEY_VALUE_OBJECTS("OBJECT_TYPE_ID"),
        CONSTRAINT "FK_OBJECT_USER_UID" FOREIGN KEY("USER_ID") REFERENCES USERS("USER_ID"),
        CONSTRAINT "UK_OBJ_USER_OID_OTID_UID" UNIQUE ("OBJECT_ID", "OBJECT_TYPE_ID", "USER_ID"))';
    END IF;
END;
/
DECLARE
TABLECHECKERFLAG INT;
BEGIN
    SELECT COUNT(*) INTO TABLECHECKERFLAG FROM ALL_TABLES WHERE OWNER = sys_context( 'userenv', 'current_schema' ) AND TABLE_NAME = UPPER('OBJECT_DOCUMENT');
        IF TABLECHECKERFLAG = 0 THEN
        EXECUTE IMMEDIATE  'CREATE TABLE "OBJECT_DOCUMENT"(
            "OBJECT_DOC_ID" NUMBER  NOT NULL,
            "OBJECT_ID" NUMBER  NOT NULL,
            "OBJECT_TYPE_ID" INT  NOT NULL,
            "OBJECT_DOC_NAME" VARCHAR2(20) NOT NULL,
            "OBJECT_DOC_TYPE" VARCHAR2(20) NULL,
            "OBJECT_DOC_LINK" VARCHAR2(2083) NULL,
            "OBJ_DOC_INTEDED_USE_DESC" VARCHAR2(4000) NULL,
            "OBJECT_DOC_REFERENCE" VARCHAR2(50)  NULL,
            "OBJECT_DOC_REF_NUMBER" VARCHAR2(20) NULL,
            "OBJECT_DOC_OWNER" VARCHAR2(50) NULL,
            "DOCUMENT_OBJECT" VARCHAR2(4000) NULL,
            "APPROVAL_REQD_FLAG"  VARCHAR2(1) NULL,
            "APPROVED_BY" VARCHAR2(20) NULL,
            "APROVAL_DATE" TIMESTAMP NULL,
            "DOCUMENT_STATUS" VARCHAR2(20) DEFAULT ''InProgress'' NOT NULL,
            "CREATED_BY" VARCHAR2(20) NOT NULL,
            "CREATED_DATE" TIMESTAMP NOT NULL ENABLE,
            "LAST_MODIFIED_BY" VARCHAR2(20) NULL,
            "LAST_MODIFIED_DATE" TIMESTAMP NULL ,
            CONSTRAINT "PK_OBJ_DOC_ODOC_ID" PRIMARY KEY("OBJECT_DOC_ID"),
            CONSTRAINT "FK_OBJ_DOC_OTID" FOREIGN KEY("OBJECT_TYPE_ID") REFERENCES ADS_KEY_VALUE_OBJECTS("OBJECT_TYPE_ID"),
            CONSTRAINT "UK_OBJ_DOC_OTDOC_NAME" UNIQUE ("OBJECT_ID", "OBJECT_TYPE_ID", "OBJECT_DOC_NAME"))';
    END IF;
END;
/
DECLARE
   SEQUENCECHECKERFLAG INT;
BEGIN
    SELECT COUNT(*) INTO SEQUENCECHECKERFLAG FROM ALL_SEQUENCES WHERE SEQUENCE_OWNER = sys_context('userenv', 'current_schema') AND SEQUENCE_NAME = UPPER('OBJECT_DOCUMENT_SEQ');
   IF SEQUENCECHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'CREATE SEQUENCE "OBJECT_DOCUMENT_SEQ"  MINVALUE 1 MAXVALUE 999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE';
   END IF;
END;
/
DECLARE
  TRIGGERCHECKERFLAG INT;
BEGIN
  SELECT COUNT(*)  INTO TRIGGERCHECKERFLAG FROM all_triggers WHERE OWNER = sys_context('userenv', 'current_schema') AND trigger_name = UPPER('OBJECT_DOCUMENT_INSERT');
  IF TRIGGERCHECKERFLAG = 0 THEN
    EXECUTE IMMEDIATE 'CREATE OR REPLACE TRIGGER  "OBJECT_DOCUMENT_INSERT" BEFORE INSERT ON OBJECT_DOCUMENT FOR EACH ROW BEGIN SELECT OBJECT_DOCUMENT_SEQ.NEXTVAL INTO :new.OBJECT_DOC_ID FROM DUAL; END;';
    EXECUTE IMMEDIATE 'ALTER TRIGGER  "OBJECT_DOCUMENT_INSERT" ENABLE';
  END IF;
END;
/
DECLARE
   TABLECHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO TABLECHECKERFLAG FROM "ADS_MODULES";
   IF TABLECHECKERFLAG = 7 THEN
        INSERT INTO ADS_MODULES(MODULE_ID, MODULE_NAME, MODULE_KEY, MODULE_ORDER, MODULE_FORWARD)
        (SELECT 8, 'Test Manager', 'com.ads.mm.permission.tm', 8, 'Test Manager' FROM DUAL);
    END IF;
END;
/
DECLARE
TABLECHECKERFLAG INT;
BEGIN
SELECT COUNT(*) INTO TABLECHECKERFLAG FROM ALL_TABLES WHERE OWNER = sys_context( 'userenv', 'current_schema' ) AND TABLE_NAME = UPPER('AMM_SDLR_JOB_DETAILS');
IF TABLECHECKERFLAG = 0 THEN
    EXECUTE IMMEDIATE  'CREATE TABLE AMM_SDLR_JOB_DETAILS
  (
    OBJECT_ID NUMBER  NULL ,
    SCHED_NAME VARCHAR2(120) NOT NULL,
    JOB_NAME  VARCHAR2(200) NOT NULL,
    JOB_GROUP VARCHAR2(200) NOT NULL,
    DESCRIPTION VARCHAR2(250) NULL,
    JOB_CLASS_NAME   VARCHAR2(250) NOT NULL,
    IS_DURABLE VARCHAR2(1) NOT NULL,
    IS_NONCONCURRENT VARCHAR2(1) NOT NULL,
    IS_UPDATE_DATA VARCHAR2(1) NOT NULL,
    REQUESTS_RECOVERY VARCHAR2(1) NOT NULL,
    JOB_DATA BLOB NULL,
    CONSTRAINT AMM_SDLR_JOB_DETAILS_PK PRIMARY KEY (SCHED_NAME,JOB_NAME,JOB_GROUP))';
END IF;
END;
/
DECLARE
TABLECHECKERFLAG INT;
BEGIN
SELECT COUNT(*) INTO TABLECHECKERFLAG FROM ALL_TABLES WHERE OWNER = sys_context( 'userenv', 'current_schema' ) AND TABLE_NAME = UPPER('AMM_SDLR_TRIGGERS');
IF TABLECHECKERFLAG = 0 THEN
    EXECUTE IMMEDIATE  'CREATE TABLE AMM_SDLR_TRIGGERS
  (
    SCHED_NAME VARCHAR2(120) NOT NULL,
    TRIGGER_NAME VARCHAR2(200) NOT NULL,
    TRIGGER_GROUP VARCHAR2(200) NOT NULL,
    JOB_NAME  VARCHAR2(200) NOT NULL,
    JOB_GROUP VARCHAR2(200) NOT NULL,
    DESCRIPTION VARCHAR2(250) NULL,
    NEXT_FIRE_TIME NUMBER(13) NULL,
    PREV_FIRE_TIME NUMBER(13) NULL,
    PRIORITY NUMBER(13) NULL,
    TRIGGER_STATE VARCHAR2(16) NOT NULL,
    TRIGGER_TYPE VARCHAR2(8) NOT NULL,
    START_TIME NUMBER(13) NOT NULL,
    END_TIME NUMBER(13) NULL,
    CALENDAR_NAME VARCHAR2(200) NULL,
    MISFIRE_INSTR NUMBER(2) NULL,
    JOB_DATA BLOB NULL,
    CONSTRAINT AMM_SDLR_TRIGGERS_PK PRIMARY KEY (SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP),
    CONSTRAINT AMM_SDLR_TRIGGER_TO_JOBS_FK FOREIGN KEY (SCHED_NAME,JOB_NAME,JOB_GROUP)
      REFERENCES AMM_SDLR_JOB_DETAILS(SCHED_NAME,JOB_NAME,JOB_GROUP))';
END IF;
END;
/
DECLARE
TABLECHECKERFLAG INT;
BEGIN
SELECT COUNT(*) INTO TABLECHECKERFLAG FROM ALL_TABLES WHERE OWNER = sys_context( 'userenv', 'current_schema' ) AND TABLE_NAME = UPPER('AMM_SDLR_SIMPLE_TRIGGERS');
IF TABLECHECKERFLAG = 0 THEN
    EXECUTE IMMEDIATE  'CREATE TABLE AMM_SDLR_SIMPLE_TRIGGERS
  (
    SCHED_NAME VARCHAR2(120) NOT NULL,
    TRIGGER_NAME VARCHAR2(200) NOT NULL,
    TRIGGER_GROUP VARCHAR2(200) NOT NULL,
    REPEAT_COUNT NUMBER(7) NOT NULL,
    REPEAT_INTERVAL NUMBER(12) NOT NULL,
    TIMES_TRIGGERED NUMBER(10) NOT NULL,
    CONSTRAINT AMM_SDLR_SIMPLE_TRIG_PK PRIMARY KEY (SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP),
    CONSTRAINT AMM_SDLR_SIMP_TRI_TO_TRI_FK FOREIGN KEY (SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP)
	REFERENCES AMM_SDLR_TRIGGERS(SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP))';
END IF;
END;
/
DECLARE
TABLECHECKERFLAG INT;
BEGIN
SELECT COUNT(*) INTO TABLECHECKERFLAG FROM ALL_TABLES WHERE OWNER = sys_context( 'userenv', 'current_schema' ) AND TABLE_NAME = UPPER('AMM_SDLR_CRON_TRIGGERS');
IF TABLECHECKERFLAG = 0 THEN
    EXECUTE IMMEDIATE  'CREATE TABLE AMM_SDLR_CRON_TRIGGERS
  (
    SCHED_NAME VARCHAR2(120) NOT NULL,
    TRIGGER_NAME VARCHAR2(200) NOT NULL,
    TRIGGER_GROUP VARCHAR2(200) NOT NULL,
    CRON_EXPRESSION VARCHAR2(120) NOT NULL,
    TIME_ZONE_ID VARCHAR2(80),
    CONSTRAINT AMM_SDLR_CRON_TRIG_PK PRIMARY KEY (SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP),
    CONSTRAINT AMM_SDLR_CRON_TR_TO_TR_FK FOREIGN KEY (SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP)
      REFERENCES AMM_SDLR_TRIGGERS(SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP))';
END IF;
END;
/
DECLARE
TABLECHECKERFLAG INT;
BEGIN
SELECT COUNT(*) INTO TABLECHECKERFLAG FROM ALL_TABLES WHERE OWNER = sys_context( 'userenv', 'current_schema' ) AND TABLE_NAME = UPPER('AMM_SDLR_SIMPROP_TRIGGERS');
IF TABLECHECKERFLAG = 0 THEN
    EXECUTE IMMEDIATE  'CREATE TABLE AMM_SDLR_SIMPROP_TRIGGERS
  (
    SCHED_NAME VARCHAR2(120) NOT NULL,
    TRIGGER_NAME VARCHAR2(200) NOT NULL,
    TRIGGER_GROUP VARCHAR2(200) NOT NULL,
    STR_PROP_1 VARCHAR2(512) NULL,
    STR_PROP_2 VARCHAR2(512) NULL,
    STR_PROP_3 VARCHAR2(512) NULL,
    INT_PROP_1 NUMBER(10) NULL,
    INT_PROP_2 NUMBER(10) NULL,
    LONG_PROP_1 NUMBER(13) NULL,
    LONG_PROP_2 NUMBER(13) NULL,
    DEC_PROP_1 NUMERIC(13,4) NULL,
    DEC_PROP_2 NUMERIC(13,4) NULL,
    BOOL_PROP_1 VARCHAR2(1) NULL,
    BOOL_PROP_2 VARCHAR2(1) NULL,
    CONSTRAINT AMM_SDLR_SIMPROP_TRIG_PK PRIMARY KEY (SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP),
    CONSTRAINT AMM_SDLR_SIMPROP_TR_TO_TR_FK FOREIGN KEY (SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP)
      REFERENCES AMM_SDLR_TRIGGERS(SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP))';
END IF;
END;
/
DECLARE
TABLECHECKERFLAG INT;
BEGIN
SELECT COUNT(*) INTO TABLECHECKERFLAG FROM ALL_TABLES WHERE OWNER = sys_context( 'userenv', 'current_schema' ) AND TABLE_NAME = UPPER('AMM_SDLR_BLOB_TRIGGERS');
IF TABLECHECKERFLAG = 0 THEN
    EXECUTE IMMEDIATE  'CREATE TABLE AMM_SDLR_BLOB_TRIGGERS
  (
    SCHED_NAME VARCHAR2(120) NOT NULL,
    TRIGGER_NAME VARCHAR2(200) NOT NULL,
    TRIGGER_GROUP VARCHAR2(200) NOT NULL,
    BLOB_DATA BLOB NULL,
    CONSTRAINT AMM_SDLR_BLOB_TRIG_PK PRIMARY KEY (SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP),
    CONSTRAINT AMM_SDLR_BLOB_TR_TO_TR_FK FOREIGN KEY (SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP)
        REFERENCES AMM_SDLR_TRIGGERS(SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP))';
END IF;
END;
/
DECLARE
TABLECHECKERFLAG INT;
BEGIN
SELECT COUNT(*) INTO TABLECHECKERFLAG FROM ALL_TABLES WHERE OWNER = sys_context( 'userenv', 'current_schema' ) AND TABLE_NAME = UPPER('AMM_SDLR_CALENDARS');
IF TABLECHECKERFLAG = 0 THEN
    EXECUTE IMMEDIATE  'CREATE TABLE AMM_SDLR_CALENDARS
  (
    SCHED_NAME VARCHAR2(120) NOT NULL,
    CALENDAR_NAME  VARCHAR2(200) NOT NULL,
    CALENDAR BLOB NOT NULL,
    CONSTRAINT AMM_SDLR_CALENDARS_PK PRIMARY KEY (SCHED_NAME,CALENDAR_NAME))';
END IF;
END;
/
DECLARE
TABLECHECKERFLAG INT;
BEGIN
SELECT COUNT(*) INTO TABLECHECKERFLAG FROM ALL_TABLES WHERE OWNER = sys_context( 'userenv', 'current_schema' ) AND TABLE_NAME = UPPER('AMM_SDLR_PAUSED_TRIGGER_GRPS');
IF TABLECHECKERFLAG = 0 THEN
    EXECUTE IMMEDIATE  'CREATE TABLE AMM_SDLR_PAUSED_TRIGGER_GRPS
  (
    SCHED_NAME VARCHAR2(120) NOT NULL,
    TRIGGER_GROUP  VARCHAR2(200) NOT NULL,
    CONSTRAINT AMM_SDLR_PAUSED_TR_GRPS_PK PRIMARY KEY (SCHED_NAME,TRIGGER_GROUP))';
END IF;
END;
/
DECLARE
TABLECHECKERFLAG INT;
BEGIN
SELECT COUNT(*) INTO TABLECHECKERFLAG FROM ALL_TABLES WHERE OWNER = sys_context( 'userenv', 'current_schema' ) AND TABLE_NAME = UPPER('AMM_SDLR_FIRED_TRIGGERS');
IF TABLECHECKERFLAG = 0 THEN
    EXECUTE IMMEDIATE  'CREATE TABLE AMM_SDLR_FIRED_TRIGGERS
  (
    SCHED_NAME VARCHAR2(120) NOT NULL,
    ENTRY_ID VARCHAR2(95) NOT NULL,
    TRIGGER_NAME VARCHAR2(200) NOT NULL,
    TRIGGER_GROUP VARCHAR2(200) NOT NULL,
    INSTANCE_NAME VARCHAR2(200) NOT NULL,
    FIRED_TIME NUMBER(13) NOT NULL,
    SCHED_TIME NUMBER(13) NOT NULL,
    PRIORITY NUMBER(13) NOT NULL,
    STATE VARCHAR2(16) NOT NULL,
    JOB_NAME VARCHAR2(200) NULL,
    JOB_GROUP VARCHAR2(200) NULL,
    IS_NONCONCURRENT VARCHAR2(1) NULL,
    REQUESTS_RECOVERY VARCHAR2(1) NULL,
    CONSTRAINT AMM_SDLR_FIRED_TRIGGER_PK PRIMARY KEY (SCHED_NAME,ENTRY_ID))';
END IF;
END;
/
DECLARE
TABLECHECKERFLAG INT;
BEGIN
SELECT COUNT(*) INTO TABLECHECKERFLAG FROM ALL_TABLES WHERE OWNER = sys_context( 'userenv', 'current_schema' ) AND TABLE_NAME = UPPER('AMM_SDLR_SCHEDULER_STATE');
IF TABLECHECKERFLAG = 0 THEN
    EXECUTE IMMEDIATE  'CREATE TABLE AMM_SDLR_SCHEDULER_STATE
  (
    SCHED_NAME VARCHAR2(120) NOT NULL,
    INSTANCE_NAME VARCHAR2(200) NOT NULL,
    LAST_CHECKIN_TIME NUMBER(13) NOT NULL,
    CHECKIN_INTERVAL NUMBER(13) NOT NULL,
    CONSTRAINT AMM_SDLR_SCHEDULER_STATE_PK PRIMARY KEY (SCHED_NAME,INSTANCE_NAME))';
END IF;
END;
/
DECLARE
TABLECHECKERFLAG INT;
BEGIN
SELECT COUNT(*) INTO TABLECHECKERFLAG FROM ALL_TABLES WHERE OWNER = sys_context( 'userenv', 'current_schema' ) AND TABLE_NAME = UPPER('AMM_SDLR_LOCKS');
IF TABLECHECKERFLAG = 0 THEN
    EXECUTE IMMEDIATE  'CREATE TABLE AMM_SDLR_LOCKS
  (
    SCHED_NAME VARCHAR2(120) NOT NULL,
    LOCK_NAME  VARCHAR2(40) NOT NULL,
    CONSTRAINT AMM_SDLR_LOCKS_PK PRIMARY KEY (SCHED_NAME,LOCK_NAME))';
END IF;
END;
/
DECLARE
  COUNT_INDEXES INTEGER;
BEGIN
  SELECT COUNT(*) INTO COUNT_INDEXES FROM ALL_INDEXES WHERE OWNER = sys_context('userenv', 'current_schema') AND INDEX_NAME = 'IDX_AMM_SDLR_J_REQ_RECOVERY';
  IF COUNT_INDEXES = 0 THEN
    EXECUTE IMMEDIATE 'CREATE INDEX IDX_AMM_SDLR_J_REQ_RECOVERY ON AMM_SDLR_JOB_DETAILS(SCHED_NAME,REQUESTS_RECOVERY)';
  END IF;
END;
/
DECLARE
  COUNT_INDEXES INTEGER;
BEGIN
  SELECT COUNT(*) INTO COUNT_INDEXES FROM ALL_INDEXES WHERE OWNER = sys_context('userenv', 'current_schema') AND INDEX_NAME = 'IDX_AMM_SDLR_J_GRP';
  IF COUNT_INDEXES = 0 THEN
    EXECUTE IMMEDIATE 'CREATE INDEX IDX_AMM_SDLR_J_GRP ON AMM_SDLR_JOB_DETAILS(SCHED_NAME,JOB_GROUP)';
  END IF;
END;
/
DECLARE
  COUNT_INDEXES INTEGER;
BEGIN
  SELECT COUNT(*) INTO COUNT_INDEXES FROM ALL_INDEXES WHERE OWNER = sys_context('userenv', 'current_schema') AND INDEX_NAME = 'IDX_AMM_SDLR_T_J';
  IF COUNT_INDEXES = 0 THEN
    EXECUTE IMMEDIATE 'CREATE INDEX IDX_AMM_SDLR_T_J ON AMM_SDLR_TRIGGERS(SCHED_NAME,JOB_NAME,JOB_GROUP)';
  END IF;
END;
/
DECLARE
  COUNT_INDEXES INTEGER;
BEGIN
  SELECT COUNT(*) INTO COUNT_INDEXES FROM ALL_INDEXES WHERE OWNER = sys_context('userenv', 'current_schema') AND INDEX_NAME = 'IDX_AMM_SDLR_T_JG';
  IF COUNT_INDEXES = 0 THEN
    EXECUTE IMMEDIATE 'CREATE INDEX IDX_AMM_SDLR_T_JG ON AMM_SDLR_TRIGGERS(SCHED_NAME,JOB_GROUP)';
  END IF;
END;
/
DECLARE
  COUNT_INDEXES INTEGER;
BEGIN
  SELECT COUNT(*) INTO COUNT_INDEXES FROM ALL_INDEXES WHERE OWNER = sys_context('userenv', 'current_schema') AND INDEX_NAME = 'IDX_AMM_SDLR_T_C';
  IF COUNT_INDEXES = 0 THEN
    EXECUTE IMMEDIATE 'CREATE INDEX IDX_AMM_SDLR_T_C ON AMM_SDLR_TRIGGERS(SCHED_NAME,CALENDAR_NAME)';
  END IF;
END;
/
DECLARE
  COUNT_INDEXES INTEGER;
BEGIN
  SELECT COUNT(*) INTO COUNT_INDEXES FROM ALL_INDEXES WHERE OWNER = sys_context('userenv', 'current_schema') AND INDEX_NAME = 'IDX_AMM_SDLR_T_G';
  IF COUNT_INDEXES = 0 THEN
    EXECUTE IMMEDIATE 'CREATE INDEX IDX_AMM_SDLR_T_G ON AMM_SDLR_TRIGGERS(SCHED_NAME,TRIGGER_GROUP)';
  END IF;
END;
/
DECLARE
  COUNT_INDEXES INTEGER;
BEGIN
  SELECT COUNT(*) INTO COUNT_INDEXES FROM ALL_INDEXES WHERE OWNER = sys_context('userenv', 'current_schema') AND INDEX_NAME = 'IDX_AMM_SDLR_T_STATE';
  IF COUNT_INDEXES = 0 THEN
    EXECUTE IMMEDIATE 'CREATE INDEX IDX_AMM_SDLR_T_STATE ON AMM_SDLR_TRIGGERS(SCHED_NAME,TRIGGER_STATE)';
  END IF;
END;
/
DECLARE
  COUNT_INDEXES INTEGER;
BEGIN
  SELECT COUNT(*) INTO COUNT_INDEXES FROM ALL_INDEXES WHERE OWNER = sys_context('userenv', 'current_schema') AND INDEX_NAME = 'IDX_AMM_SDLR_T_N_STATE';
  IF COUNT_INDEXES = 0 THEN
    EXECUTE IMMEDIATE 'CREATE INDEX IDX_AMM_SDLR_T_N_STATE ON AMM_SDLR_TRIGGERS(SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP,TRIGGER_STATE)';
  END IF;
END;
/
DECLARE
  COUNT_INDEXES INTEGER;
BEGIN
  SELECT COUNT(*) INTO COUNT_INDEXES FROM ALL_INDEXES WHERE OWNER = sys_context('userenv', 'current_schema') AND INDEX_NAME = 'IDX_AMM_SDLR_T_N_G_STATE';
  IF COUNT_INDEXES = 0 THEN
    EXECUTE IMMEDIATE 'CREATE INDEX IDX_AMM_SDLR_T_N_G_STATE ON AMM_SDLR_TRIGGERS(SCHED_NAME,TRIGGER_GROUP,TRIGGER_STATE)';
  END IF;
END;
/
DECLARE
  COUNT_INDEXES INTEGER;
BEGIN
  SELECT COUNT(*) INTO COUNT_INDEXES FROM ALL_INDEXES WHERE OWNER = sys_context('userenv', 'current_schema') AND INDEX_NAME = 'IDX_AMM_SDLR_T_NEXT_FIRE_TIME';
  IF COUNT_INDEXES = 0 THEN
    EXECUTE IMMEDIATE 'CREATE INDEX IDX_AMM_SDLR_T_NEXT_FIRE_TIME ON AMM_SDLR_TRIGGERS(SCHED_NAME,NEXT_FIRE_TIME)';
  END IF;
END;
/
DECLARE
  COUNT_INDEXES INTEGER;
BEGIN
  SELECT COUNT(*) INTO COUNT_INDEXES FROM ALL_INDEXES WHERE OWNER = sys_context('userenv', 'current_schema') AND INDEX_NAME = 'IDX_AMM_SDLR_T_NFT_ST';
  IF COUNT_INDEXES = 0 THEN
    EXECUTE IMMEDIATE 'CREATE INDEX IDX_AMM_SDLR_T_NFT_ST ON AMM_SDLR_TRIGGERS(SCHED_NAME,TRIGGER_STATE,NEXT_FIRE_TIME)';
  END IF;
END;
/
DECLARE
  COUNT_INDEXES INTEGER;
BEGIN
  SELECT COUNT(*) INTO COUNT_INDEXES FROM ALL_INDEXES WHERE OWNER = sys_context('userenv', 'current_schema') AND INDEX_NAME = 'IDX_AMM_SDLR_T_NFT_MISFIRE';
  IF COUNT_INDEXES = 0 THEN
    EXECUTE IMMEDIATE 'CREATE INDEX IDX_AMM_SDLR_T_NFT_MISFIRE ON AMM_SDLR_TRIGGERS(SCHED_NAME,MISFIRE_INSTR,NEXT_FIRE_TIME)';
  END IF;
END;
/
DECLARE
  COUNT_INDEXES INTEGER;
BEGIN
  SELECT COUNT(*) INTO COUNT_INDEXES FROM ALL_INDEXES WHERE OWNER = sys_context('userenv', 'current_schema') AND INDEX_NAME = 'IDX_AMM_SDLR_T_NFT_ST_MISFI';
  IF COUNT_INDEXES = 0 THEN
    EXECUTE IMMEDIATE 'CREATE INDEX IDX_AMM_SDLR_T_NFT_ST_MISFI ON AMM_SDLR_TRIGGERS(SCHED_NAME,MISFIRE_INSTR,NEXT_FIRE_TIME,TRIGGER_STATE)';
  END IF;
END;
/
DECLARE
  COUNT_INDEXES INTEGER;
BEGIN
  SELECT COUNT(*) INTO COUNT_INDEXES FROM ALL_INDEXES WHERE OWNER = sys_context('userenv', 'current_schema') AND INDEX_NAME = 'IDX_AMM_SDLR_NFT_ST_MISFI_GRP';
  IF COUNT_INDEXES = 0 THEN
    EXECUTE IMMEDIATE 'CREATE INDEX IDX_AMM_SDLR_NFT_ST_MISFI_GRP ON AMM_SDLR_TRIGGERS(SCHED_NAME,MISFIRE_INSTR,NEXT_FIRE_TIME,TRIGGER_GROUP,TRIGGER_STATE)';
  END IF;
END;
/
DECLARE
  COUNT_INDEXES INTEGER;
BEGIN
  SELECT COUNT(*) INTO COUNT_INDEXES FROM ALL_INDEXES WHERE OWNER = sys_context('userenv', 'current_schema') AND INDEX_NAME = 'IDX_AMM_SDLR_FT_TR_INST_NAME';
  IF COUNT_INDEXES = 0 THEN
    EXECUTE IMMEDIATE 'CREATE INDEX IDX_AMM_SDLR_FT_TR_INST_NAME ON AMM_SDLR_FIRED_TRIGGERS(SCHED_NAME,INSTANCE_NAME)';
  END IF;
END;
/
DECLARE
  COUNT_INDEXES INTEGER;
BEGIN
  SELECT COUNT(*) INTO COUNT_INDEXES FROM ALL_INDEXES WHERE OWNER = sys_context('userenv', 'current_schema') AND INDEX_NAME = 'IDX_AMM_SDLR_FT_INST_JOB_REQ';
  IF COUNT_INDEXES = 0 THEN
    EXECUTE IMMEDIATE 'CREATE INDEX IDX_AMM_SDLR_FT_INST_JOB_REQ ON AMM_SDLR_FIRED_TRIGGERS(SCHED_NAME,INSTANCE_NAME,REQUESTS_RECOVERY)';
  END IF;
END;
/
DECLARE
  COUNT_INDEXES INTEGER;
BEGIN
  SELECT COUNT(*) INTO COUNT_INDEXES FROM ALL_INDEXES WHERE OWNER = sys_context('userenv', 'current_schema') AND INDEX_NAME = 'IDX_AMM_SDLR_FT_J_G';
  IF COUNT_INDEXES = 0 THEN
    EXECUTE IMMEDIATE 'CREATE INDEX IDX_AMM_SDLR_FT_J_G ON AMM_SDLR_FIRED_TRIGGERS(SCHED_NAME,JOB_NAME,JOB_GROUP)';
  END IF;
END;
/
DECLARE
  COUNT_INDEXES INTEGER;
BEGIN
  SELECT COUNT(*) INTO COUNT_INDEXES FROM ALL_INDEXES WHERE OWNER = sys_context('userenv', 'current_schema') AND INDEX_NAME = 'IDX_AMM_SDLR_FT_JG';
  IF COUNT_INDEXES = 0 THEN
    EXECUTE IMMEDIATE 'CREATE INDEX IDX_AMM_SDLR_FT_JG ON AMM_SDLR_FIRED_TRIGGERS(SCHED_NAME,JOB_GROUP)';
  END IF;
END;
/
DECLARE
  COUNT_INDEXES INTEGER;
BEGIN
  SELECT COUNT(*) INTO COUNT_INDEXES FROM ALL_INDEXES WHERE OWNER = sys_context('userenv', 'current_schema') AND INDEX_NAME = 'IDX_AMM_SDLR_FT_T_G';
  IF COUNT_INDEXES = 0 THEN
    EXECUTE IMMEDIATE 'CREATE INDEX IDX_AMM_SDLR_FT_T_G ON AMM_SDLR_FIRED_TRIGGERS(SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP)';
  END IF;
END;
/
DECLARE
  COUNT_INDEXES INTEGER;
BEGIN
  SELECT COUNT(*) INTO COUNT_INDEXES FROM ALL_INDEXES WHERE OWNER = sys_context('userenv', 'current_schema') AND INDEX_NAME = 'IDX_AMM_SDLR_FT_TG';
  IF COUNT_INDEXES = 0 THEN
    EXECUTE IMMEDIATE 'CREATE INDEX IDX_AMM_SDLR_FT_TG ON AMM_SDLR_FIRED_TRIGGERS(SCHED_NAME,TRIGGER_GROUP)';
  END IF;
END;
/
DECLARE
   KEYCHECKER INT;
BEGIN
SELECT COUNT(*) INTO KEYCHECKER FROM CAT_TABS WHERE CAT_TAB_NAME = 'com.ads.mm.stb.testauto';
 IF KEYCHECKER = 0 THEN
	INSERT INTO CAT_TABS ( CAT_TAB_NAME, CAT_TAB_DESCRIPTION ,  DISPLAY_ORDER , TAB_VISIBILITY) VALUES ( 'com.ads.mm.stb.testauto', '' , '10' , '1');
END IF;
END;
/
DECLARE
   TABLECHECKERFLAG INT;
   TEMP_CAT_ID NUMBER;
   TEMP_TAB_ID NUMBER;
   TEMP_CAT_DIALOG_ID NUMBER;
   TEMP_CAT_DIALOG_PROFILE_ID NUMBER;
   TEMP_CAT_DIALOG_TAB_ID NUMBER;
   TEMP_CAT_TEMPLATE_ORDER NUMBER;
BEGIN
   SELECT COUNT(*) INTO TABLECHECKERFLAG FROM CAT_TEMPLATES where cat_name = 'Automated Test Case Generation';
   IF TABLECHECKERFLAG = 0 THEN
    SELECT CAT_TAB_ID INTO TEMP_TAB_ID FROM CAT_TABS WHERE CAT_TAB_NAME = 'com.ads.mm.stb.testauto';
    SELECT NVL(MAX(CAT_TEMPLATE_ORDER)+1, 1) INTO TEMP_CAT_TEMPLATE_ORDER  FROM CAT_TEMPLATES WHERE CAT_TAB_ID = TEMP_TAB_ID;
    INSERT INTO CAT_TEMPLATES(CAT_NAME,CAT_DESC,CAT_IMAGE,CAT_STOCK_IMAGE,CAT_ENABLED,CAT_TAB_ID,CAT_SYSTEM_BASED,CAT_SCRIPT,CAT_ACTION,CREATED_BY,CREATED_DATE_TIME,LAST_MODIFIED_BY,LAST_MODIFIED_DATE_TIME,CAT_TEMPLATE_ORDER,CAT_SCRIPTING_LANGUAGE,CAT_OUTPUT_CONTENT_TYPE,CAT_OUTPUT_FILE_EXTENSION,CAT_ENABLE_MAPPING_DIALOG)
    VALUES('Automated Test Case Generation', '', NULL, 'defaultCatImage.png', '1', TEMP_TAB_ID, '1', NULL, 'NULL', 'AnalytiX Data Services', CURRENT_TIMESTAMP, 'AnalytiX Data Services', CURRENT_TIMESTAMP, TEMP_CAT_TEMPLATE_ORDER, 'Javascript', 'CSV', '.csv', 0);
    COMMIT;
    SELECT CAT_ID INTO TEMP_CAT_ID FROM CAT_TEMPLATES WHERE CAT_NAME = 'Automated Test Case Generation' AND CAT_TAB_ID = TEMP_TAB_ID;
    INSERT INTO CAT_DIALOG(CAT_DIALOG_NAME,CAT_DIALOG_PROPERTIES,CAT_ID,CREATED_BY,CREATED_DATE_TIME,LAST_MODIFIED_BY,LAST_MODIFIED_DATE_TIME) VALUES('Automated Test Case Generation','{"fheight":385,"fwidth":369,"flabelwidth":"35","fcontrolwidth":"65"}',TEMP_CAT_ID,'Administrator',CURRENT_TIMESTAMP,'Administrator',CURRENT_TIMESTAMP);
    COMMIT;
    SELECT  CAT_DIALOG_ID INTO TEMP_CAT_DIALOG_ID FROM CAT_DIALOG WHERE CAT_DIALOG_NAME = 'Automated Test Case Generation' AND CAT_ID = TEMP_CAT_ID;
    INSERT INTO CAT_DIALOG_PROFILE(CAT_DIALOG_ID,CAT_DIALOG_PROFILE_NAME,CREATED_BY,CREATED_DATE_TIME,LAST_MODIFIED_BY,LAST_MODIFIED_DATE_TIME) VALUES (TEMP_CAT_DIALOG_ID,'Default','Administrator',CURRENT_TIMESTAMP,'Administrator',CURRENT_TIMESTAMP);
    COMMIT;
    SELECT CAT_DIALOG_PROFILE_ID INTO TEMP_CAT_DIALOG_PROFILE_ID  FROM CAT_DIALOG_PROFILE WHERE CAT_DIALOG_PROFILE_NAME = 'Default' AND CAT_DIALOG_ID = TEMP_CAT_DIALOG_ID;
    UPDATE CAT_DIALOG SET CAT_DIALOG_DEFAULT_PROFILE_ID = TEMP_CAT_DIALOG_PROFILE_ID WHERE CAT_DIALOG_ID = TEMP_CAT_DIALOG_ID;
    COMMIT;
    INSERT INTO CAT_DIALOG_TAB(CAT_DIALOG_PROFILE_ID,CAT_DIALOG_TAB_NAME,CAT_DIALOG_TAB_PROPERTIES,CREATED_BY,CREATED_DATE_TIME,LAST_MODIFIED_BY,LAST_MODIFIED_DATE_TIME) VALUES(TEMP_CAT_DIALOG_PROFILE_ID,'DefaultTab','','Administrator',CURRENT_TIMESTAMP,'Administrator',CURRENT_TIMESTAMP);
    COMMIT;
   END IF;
END;
/
DECLARE
   CHARCOLLENGTHFLAG INT;
BEGIN
SELECT CHAR_LENGTH INTO CHARCOLLENGTHFLAG FROM ALL_TAB_COLUMNS WHERE  OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME = 'SYS_CON_ENVIRONMENTS' AND COLUMN_NAME = 'USER_NAME';
    IF (CHARCOLLENGTHFLAG <250) THEN
        EXECUTE IMMEDIATE 'ALTER TABLE SYS_CON_ENVIRONMENTS MODIFY(USER_NAME VARCHAR2(250))';
	EXECUTE IMMEDIATE 'ALTER TABLE SYS_CON_ENVIRONMENTS MODIFY(PASSWORD VARCHAR2(250))';
    END IF;
END;
/
DECLARE
    VERSIONCHECKKERFLAG INT;
    TABLECHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO VERSIONCHECKKERFLAG FROM ADS_MM_VERSION WHERE VALUE <= '6.1';
   IF VERSIONCHECKKERFLAG = 1 THEN
   SELECT COUNT(*) INTO TABLECHECKERFLAG FROM ALL_TABLES WHERE OWNER = sys_context( 'userenv', 'current_schema' ) AND TABLE_NAME = UPPER('TCM_TESTCASE_STATUS');
   IF TABLECHECKERFLAG = 1 THEN
        EXECUTE IMMEDIATE 'INSERT INTO TCM_TESTCASE_STATUS(STATUS_NAME)(SELECT ''No Run'' FROM DUAL)';
        EXECUTE IMMEDIATE 'UPDATE TCM_TESTCASE_STATUS SET STATUS_NAME = ''Passed'' WHERE STATUS_NAME = ''Pass''';
        EXECUTE IMMEDIATE 'UPDATE TCM_TESTCASE_STATUS SET STATUS_NAME = ''Failed'' WHERE STATUS_NAME = ''Fail''';
   END IF;
  END IF;
END;
/
DECLARE
    VERSIONCHECKKERFLAG INT;
    COLUMNCHECKERFLAG INT;
BEGIN
    SELECT COUNT(*) INTO VERSIONCHECKKERFLAG FROM ADS_MM_VERSION WHERE VALUE <= '6.1';
    IF VERSIONCHECKKERFLAG = 1 THEN
      SELECT COUNT(*) INTO COLUMNCHECKERFLAG FROM ALL_TAB_COLUMNS WHERE  OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME = UPPER('USERS') AND COLUMN_NAME=UPPER('ISLDAP_USER');
        IF COLUMNCHECKERFLAG = 1 THEN
            EXECUTE IMMEDIATE 'UPDATE USERS SET ISLDAP_USER = ''N''';
        END IF;
    END IF;
END;
/
DECLARE
    DATACHECKERFLAG INT;
BEGIN
    SELECT COUNT(*) INTO DATACHECKERFLAG FROM APP_PREFERENCES WHERE PREFERENCE_NAME = 'USER_CREATION_MESSAGE' AND PREFERENCE_VALUE = 'Hello <B>@userFullName@</B>,<BR><BR>User <B>@userid@</B> has been successfully&nbsp;added to mapping manager.This user has been granted with role(s) <B>@roles@.</B><BR><BR>The default role for this user is <B>@defaultrole@.</B><BR><BR><I>Note: This is an auto generated email notification and this mailbox is not monitored.<BR>Please do not reply to this email.</I><BR><BR>Regards,<BR><B>Mapping Manager System Administrator</B>';
    IF DATACHECKERFLAG = 1 THEN
        UPDATE APP_PREFERENCES SET PREFERENCE_VALUE = 'Hello <B>@UserFullName@</B>,<BR><BR>User <B>@UserId@</B> has been successfully added to mapping manager with password <B>@Password@<B>.This user has been granted with role(s) <B>@Roles@.</B><BR><BR>The default role for this user is <B>@DefaultRole@.</B><BR><BR><I>Note: This is an auto generated email notification and this mailbox is not monitored.<BR>Please do not reply to this email.</I><BR><BR>Regards,<BR><B>Mapping Manager System Administrator</B>' WHERE PREFERENCE_NAME='USER_CREATION_MESSAGE';
    END IF;
END;
/
DECLARE
    DATACHECKERFLAG INT;
BEGIN
    SELECT COUNT(*) INTO DATACHECKERFLAG FROM ALL_TAB_COLUMNS WHERE OWNER = sys_context('userenv', 'current_schema') AND TABLE_NAME = 'SYSTEM_DOCUMENTS' AND COLUMN_NAME = 'PROJECT_DOC_OBJECT' AND NULLABLE='Y';
    IF DATACHECKERFLAG = 0 THEN
        EXECUTE IMMEDIATE 'ALTER TABLE SYSTEM_DOCUMENTS MODIFY PROJECT_DOC_OBJECT VARCHAR2(4000) NULL';
        EXECUTE IMMEDIATE 'ALTER TABLE MAPPING_DOCUMENTS MODIFY MAP_DOC_OBJECT VARCHAR2(4000) NULL';
        EXECUTE IMMEDIATE 'ALTER TABLE PROJECT_DOCUMENTS MODIFY PROJECT_DOC_OBJECT VARCHAR2(4000) NULL';
        EXECUTE IMMEDIATE 'ALTER TABLE TCM_TESTCASE_DOCS MODIFY TESTCASE_DOC_OBJECT VARCHAR2(4000) NULL';
    END IF;
END;
/
DECLARE
   TABLECHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO TABLECHECKERFLAG FROM all_VIEWS WHERE OWNER = sys_context('userenv', 'current_schema') AND VIEW_NAME = UPPER('TESTERMAPPINGS');
   IF TABLECHECKERFLAG = 1 THEN
        EXECUTE IMMEDIATE 'DROP VIEW TESTERMAPPINGS';
        EXECUTE IMMEDIATE 'CREATE OR REPLACE FORCE VIEW  "TESTERMAPPINGS" ("MAP_ID", "PROJ_ID", "USER_ID", "RESPONSIABLES", "STATUS", "LOGIN_USER", "ASSIGNMENT_CHANGES") AS
                            SELECT "MAP_ID","PROJ_ID","USER_ID","RESPONSIABLES","STATUS","LOGIN_USER","ASSIGNMENT_CHANGES"
                            FROM   MAPPING_STATUS WHERE  UPPER(TO_CHAR(RESPONSIABLES)) = ''MAPPING TESTER''';
    END IF;
END;
/
DECLARE
TABLECHECKERFLAG INT;
COLVALUECOUNT INT;
BEGIN
    SELECT COUNT(*) INTO TABLECHECKERFLAG  FROM ALL_TAB_COLUMNS  WHERE OWNER = sys_context('userenv', 'current_schema') AND TABLE_NAME = UPPER('APP_PREFERENCES');
    IF TABLECHECKERFLAG > 0 THEN
        SELECT COUNT(PREFERENCE_NAME) INTO COLVALUECOUNT FROM APP_PREFERENCES WHERE PREFERENCE_NAME = 'ADS_MM_VERSION_FIRST_LOGIN';
        IF COLVALUECOUNT = 0 THEN
            EXECUTE IMMEDIATE 'INSERT INTO APP_PREFERENCES(PREFERENCE_NAME,PREFERENCE_VALUE) VALUES(''ADS_MM_VERSION_FIRST_LOGIN'', ''true'')';
        END IF;
    END IF;
END;
/
DECLARE
COLUMNCHECKERFLAG INT;
BEGIN
    SELECT COUNT(*) INTO COLUMNCHECKERFLAG  FROM ADS_MODULES WHERE MODULE_FORWARD = 'Test Manager';
    IF COLUMNCHECKERFLAG = 1 THEN
        EXECUTE IMMEDIATE 'UPDATE ADS_MODULES SET MODULE_FORWARD = ''testmanager'' where MODULE_KEY =''com.ads.mm.permission.tm''';
    END IF;
END;
/
DECLARE
VERSIONCHECKERFLAG INT;
COLUMNCHECKERFLAG INT;
BEGIN
    SELECT COUNT(*) INTO VERSIONCHECKERFLAG FROM ADS_MM_VERSION WHERE VALUE <= '6.2';
    IF VERSIONCHECKERFLAG = 1 THEN
    SELECT COUNT(*) INTO COLUMNCHECKERFLAG  FROM ALL_TAB_COLUMNS  WHERE OWNER = sys_context('userenv', 'current_schema') AND TABLE_NAME = UPPER('LANGUAGE_PREFERENCES')  AND COLUMN_NAME      =UPPER('LANG_PREF_ID');
    IF COLUMNCHECKERFLAG > 0 THEN
        EXECUTE IMMEDIATE 'ALTER TABLE LANGUAGE_PREFERENCES ADD PARENT_ID_DUP VARCHAR2(4000) DEFAULT 0 NOT NULL';
        EXECUTE IMMEDIATE 'DELETE LANGUAGE_PREFERENCES WHERE LANG_PREF_ID IN (52,1070,1077,782,506,601,461,547,465,575,862,1526,1561,1528,1576,3741,2613,2612,161,144,1384,1120,545,1244,1033,1833,1840,2000,2623)';
        EXECUTE IMMEDIATE 'UPDATE LANGUAGE_PREFERENCES SET KEY_DESCRIPTION = '' System Document name will not allow special characters  except hyphen(-) and underscore(_)'', ENGLISH = '' System Document name will not allow special characters  except hyphen(-) and underscore(_)'' where key_id = ''com.ads.mm.stb.alert.sysdocnospeclchars'' AND ENGLISH = '' System Document name will not allow special characters except Except @ $ & / _ and -.''';
        EXECUTE IMMEDIATE 'UPDATE LANGUAGE_PREFERENCES SET KEY_DESCRIPTION = ''Please enter Plugin URL'', ENGLISH = ''Please enter Plugin URL'' where key_id = ''com.ads.mm.stb.pluginentrurl'' AND ENGLISH = ''Please Upload Plugin URL''';
        EXECUTE IMMEDIATE 'UPDATE LANGUAGE_PREFERENCES SET KEY_DESCRIPTION = ''Please enter System Name'', ENGLISH = ''Please enter System Name'' where key_id = ''com.ads.mm.stb.alert.sysname'' AND ENGLISH = ''Please Enter System Name''';
        EXECUTE IMMEDIATE 'UPDATE LANGUAGE_PREFERENCES SET KEY_DESCRIPTION = ''Please select image file (gif,png,jpeg,tiff,jpg)'', ENGLISH = ''Please select image file (gif,png,jpeg,tiff,jpg)'' where key_id = ''com.ads.mm.stb.pluginuplcrtricon'' AND ENGLISH = '' Please select image file (gif,png,jpeg,tif,jpg''';
        EXECUTE IMMEDIATE 'UPDATE LANGUAGE_PREFERENCES SET KEY_DESCRIPTION = ''Map/Table/Project'', ENGLISH = ''Map/Table/Project'' where key_id = ''com.ads.mm.th.tcm.maptcmaptarpro'' AND ENGLISH = ''Map/Target Table/Project''';
        EXECUTE IMMEDIATE 'UPDATE LANGUAGE_PREFERENCES SET KEY_DESCRIPTION = ''Dual Combined View'', ENGLISH = ''Dual Combined View'' where key_id = ''com.ads.mm.permission.mm.metadata.lineagereport.dual'' AND ENGLISH = ''Dual''';
        EXECUTE IMMEDIATE 'UPDATE LANGUAGE_PREFERENCES SET KEY_DESCRIPTION = ''Table & Column Class'', ENGLISH = ''Table & Column Class'' where key_id = ''com.ads.mm.settgs.sm.systemmanager'' AND ENGLISH = ''System Manager''';
        EXECUTE IMMEDIATE 'UPDATE LANGUAGE_PREFERENCES SET KEY_DESCRIPTION = ''name already exists'', ENGLISH = ''name already exists'' where key_id = ''com.ads.mm.settgs.sm.alert.tablecolumnclass.nameexist'' AND ENGLISH = ''name already exist!''';
        EXECUTE IMMEDIATE 'UPDATE LANGUAGE_PREFERENCES SET KEY_DESCRIPTION = ''Last Modified Date Time'', ENGLISH = ''Last Modified Date Time'' where key_id = ''com.ads.mm.settgs.sm.th.sdiclassgrid.modifieddaatetime'' AND ENGLISH = ''Last Modified Data Time''';
    END IF;
END IF;
END;
/
DECLARE
LANGPREFCHEKER INT;
BEGIN
    SELECT COUNT(*) INTO LANGPREFCHEKER  FROM ALL_TAB_COLUMNS  WHERE OWNER = sys_context('userenv', 'current_schema') AND TABLE_NAME = UPPER('LANGUAGE_PREFERENCES')  AND COLUMN_NAME      =UPPER('LANG_PREF_ID');
	IF LANGPREFCHEKER = 0 THEN
            EXECUTE IMMEDIATE 'ALTER TABLE LANGUAGE_PREFERENCES ADD  LANG_PREF_ID VARCHAR2(4000)';
	END IF;
END;
/
DECLARE
LANGPREFCHEKER INT;
BEGIN
    SELECT COUNT(*) INTO LANGPREFCHEKER  FROM ALL_TAB_COLUMNS  WHERE OWNER = sys_context('userenv', 'current_schema') AND TABLE_NAME = UPPER('LANGUAGE_PREFERENCES')  AND COLUMN_NAME      =UPPER('PARENT_ID_DUP');
	IF LANGPREFCHEKER = 0 THEN
            EXECUTE IMMEDIATE 'ALTER TABLE LANGUAGE_PREFERENCES ADD PARENT_ID_DUP VARCHAR2(4000) DEFAULT 0 NOT NULL';
	END IF;
END;
/
DECLARE
VERSIONCHECKERFLAG INT;
COLUMNCHECKERFLAG INT;
BEGIN
    SELECT COUNT(*) INTO VERSIONCHECKERFLAG FROM ADS_MM_VERSION WHERE VALUE <= '6.2';
    IF VERSIONCHECKERFLAG = 1 THEN
    SELECT COUNT(*) INTO COLUMNCHECKERFLAG  FROM ALL_TAB_COLUMNS  WHERE OWNER = sys_context('userenv', 'current_schema') AND TABLE_NAME = UPPER('LANGUAGE_PREFERENCES')  AND COLUMN_NAME      =UPPER('PARENT_ID_DUP');
    IF COLUMNCHECKERFLAG > 0 THEN
        SELECT COUNT(*) INTO COLUMNCHECKERFLAG  FROM ALL_TAB_COLUMNS  WHERE OWNER = sys_context('userenv', 'current_schema') AND TABLE_NAME = UPPER('LANGUAGE_PREFERENCES')  AND COLUMN_NAME      =UPPER('PARENT_ID');
    IF COLUMNCHECKERFLAG > 1 THEN
        FOR I IN (SELECT KEY_ID,LANG_PREF_ID FROM LANGUAGE_PREFERENCES)
        LOOP
            UPDATE LANGUAGE_PREFERENCES SET PARENT_ID_DUP = I.KEY_ID WHERE PARENT_ID = I.LANG_PREF_ID;
        END LOOP;
    END IF;
    END IF;
END IF;
END;
/

DECLARE
VERSIONCHECKERFLAG INT;
TABLECHECKERFLAG INT;
COLUMNCHECKERFLAG INT;
CONSTRAINTCHECKERFLAG INT;
SEQUENCECHECKERFLAG INT;
TRIGGERCHECKERFLAG INT;
FLAG NUMBER;
BEGIN
    SELECT COUNT(*) INTO VERSIONCHECKERFLAG FROM ADS_MM_VERSION WHERE VALUE <= '6.2';
    IF VERSIONCHECKERFLAG = 1 THEN
        BEGIN
        SAVEPOINT MOVE_PERM_LANG_TO_PROPS;
            SELECT COUNT(*) INTO COLUMNCHECKERFLAG  FROM ALL_TAB_COLUMNS  WHERE OWNER = sys_context('userenv', 'current_schema') AND
            TABLE_NAME = UPPER('LANGUAGE_PREFERENCES')  AND COLUMN_NAME      =UPPER('LANG_PREF_ID');
            IF COLUMNCHECKERFLAG > 0 THEN
                EXECUTE IMMEDIATE 'UPDATE LANGUAGE_PREFERENCES SET KEY_ID = ''com.ads.rm.buttons.tooltip'' where key_id =''com.ads.rm.buttons,tooltip''';
                EXECUTE IMMEDIATE 'UPDATE LANGUAGE_PREFERENCES SET KEY_ID = ''com.ads.rm.buttons.tooltip.delete'' where key_id =''com.ads.rm.buttons,tooltip.delete''';
               -- EXECUTE IMMEDIATE 'DELETE LANGUAGE_PREFERENCES WHERE LANG_PREF_ID IN (52,1070,1077,782,506,601,461,547,465,575,862,1526,1561,1528,1576,3741,2613,2612,161,144,1384,1120,545,1244,1033,1833,1840,2000,2623)';
                --EXECUTE IMMEDIATE 'ALTER TABLE LANGUAGE_PREFERENCES ADD PARENT_ID_DUP VARCHAR2(4000) DEFAULT 0 NOT NULL';
                --EXECUTE IMMEDIATE 'UPDATE LANGUAGE_PREFERENCES T1 SET T1.PARENT_ID_DUP = (SELECT T2.KEY_ID FROM LANGUAGE_PREFERENCES T2 WHERE T1.LANG_PREF_ID = T2.LANG_PREF_ID AND ROWNUM <= 1)';
                EXECUTE IMMEDIATE 'ALTER TABLE LANGUAGE_PREFERENCES DROP COLUMN PARENT_ID';
                EXECUTE IMMEDIATE 'ALTER TABLE LANGUAGE_PREFERENCES RENAME COLUMN PARENT_ID_DUP TO PARENT_ID';
                EXECUTE IMMEDIATE 'ALTER TABLE LANGUAGE_PREFERENCES DROP COLUMN LANG_PREF_ID';
                EXECUTE IMMEDIATE 'UPDATE LANGUAGE_PREFERENCES set parent_id = ''com.ads'' where parent_id = ''0''';
               -- EXECUTE IMMEDIATE 'DROP PROCEDURE AMM_LANG_MIG_PROCE';
            END IF;
            SELECT COUNT(*) INTO CONSTRAINTCHECKERFLAG FROM ALL_CONS_COLUMNS WHERE OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME = UPPER('USER_ASSIGNED_ROLES') AND CONSTRAINT_NAME = UPPER('R_5');
            IF CONSTRAINTCHECKERFLAG > 0 THEN
            EXECUTE IMMEDIATE 'ALTER TABLE  USER_ASSIGNED_ROLES DROP CONSTRAINT R_5';
            END IF;
            SELECT COUNT(*) INTO CONSTRAINTCHECKERFLAG FROM ALL_CONS_COLUMNS WHERE OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME = UPPER('PROJECT_RESOURCES') AND CONSTRAINT_NAME = UPPER('R_9');
            IF CONSTRAINTCHECKERFLAG > 0 THEN
                EXECUTE IMMEDIATE 'ALTER TABLE  PROJECT_RESOURCES DROP CONSTRAINT R_9';
            END IF;
            SELECT COUNT(*) INTO CONSTRAINTCHECKERFLAG FROM ALL_CONS_COLUMNS WHERE OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME = UPPER('USER_ASSIGNED_ROLES') AND CONSTRAINT_NAME = UPPER('R_6');
            IF CONSTRAINTCHECKERFLAG > 0 THEN
                EXECUTE IMMEDIATE 'ALTER TABLE  USER_ASSIGNED_ROLES DROP CONSTRAINT R_6';
            END IF;
            SELECT COUNT(*) INTO CONSTRAINTCHECKERFLAG FROM ALL_CONS_COLUMNS WHERE OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME = UPPER('USER_ASSIGNED_ROLES') AND CONSTRAINT_NAME = UPPER('XPKUSER_ASSIGNED_ROLES');
            IF CONSTRAINTCHECKERFLAG > 0 THEN
                EXECUTE IMMEDIATE 'ALTER TABLE  USER_ASSIGNED_ROLES DROP CONSTRAINT XPKUSER_ASSIGNED_ROLES';
            END IF;
            SELECT COUNT(*) INTO CONSTRAINTCHECKERFLAG FROM ALL_CONS_COLUMNS WHERE OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME = UPPER('PROJECT_RESOURCES') AND CONSTRAINT_NAME = UPPER('XPKPROJECT_RESOURCES');
            IF CONSTRAINTCHECKERFLAG > 0 THEN
                EXECUTE IMMEDIATE 'ALTER TABLE  PROJECT_RESOURCES DROP CONSTRAINT XPKPROJECT_RESOURCES';
            END IF;
            SELECT COUNT(*) INTO CONSTRAINTCHECKERFLAG FROM ALL_CONS_COLUMNS WHERE OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME = UPPER('SECURITY_ROLES') AND CONSTRAINT_NAME = UPPER('XPKSECURITY_ROLES');
            IF CONSTRAINTCHECKERFLAG > 0 THEN
                EXECUTE IMMEDIATE 'ALTER TABLE  SECURITY_ROLES DROP CONSTRAINT XPKSECURITY_ROLES';
            END IF;

            SELECT COUNT(*) INTO SEQUENCECHECKERFLAG FROM ALL_SEQUENCES WHERE SEQUENCE_OWNER = sys_context('userenv', 'current_schema') AND SEQUENCE_NAME = UPPER('SECURITY_ROLES_SEQ');
            IF SEQUENCECHECKERFLAG > 0 THEN
                EXECUTE IMMEDIATE 'DROP SEQUENCE SECURITY_ROLES_SEQ';
            END IF;

             SELECT COUNT(*) INTO TRIGGERCHECKERFLAG FROM all_triggers WHERE OWNER = sys_context('userenv', 'current_schema') AND trigger_name = UPPER('SECURITY_ROLES_INSERT');
            IF TRIGGERCHECKERFLAG > 0 THEN
                EXECUTE IMMEDIATE 'DROP TRIGGER  SECURITY_ROLES_INSERT';
            END IF;

            SELECT COUNT(*) INTO COLUMNCHECKERFLAG FROM ALL_CONS_COLUMNS WHERE OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME = UPPER('SECURITY_ROLES') AND COLUMN_NAME  = UPPER('ROLE_ID_TEMP');
            IF COLUMNCHECKERFLAG = 0 THEN
                EXECUTE IMMEDIATE 'DELETE FROM MMROLE_PERMISSIONS WHERE MMROLE_ID IN  (SELECT ROLE_ID FROM SECURITY_ROLES WHERE LAST_MODIFIED_BY = ''System'')';
                EXECUTE IMMEDIATE 'ALTER TABLE SECURITY_ROLES RENAME COLUMN ROLE_ID TO ROLE_ID_TEMP';
                EXECUTE IMMEDIATE 'ALTER TABLE SECURITY_ROLES ADD ROLE_ID VARCHAR2(100) DEFAULT 0 NOT NULL';
                EXECUTE IMMEDIATE 'UPDATE SECURITY_ROLES SET ROLE_ID = ROLE_ID_TEMP';
                EXECUTE IMMEDIATE 'ALTER TABLE SECURITY_ROLES DROP COLUMN ROLE_ID_TEMP';
                EXECUTE IMMEDIATE 'ALTER TABLE SECURITY_ROLES ADD TEMP_ROLE_ID VARCHAR2(100) DEFAULT 0 NOT NULL';
                EXECUTE IMMEDIATE 'UPDATE SECURITY_ROLES SET TEMP_ROLE_ID = ''com.ads.roles.''||REPLACE(ROLE_NAME, '' '', '''')';
            END IF;

            SELECT COUNT(*) INTO COLUMNCHECKERFLAG FROM ALL_CONS_COLUMNS WHERE OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME = UPPER('MMROLE_PERMISSIONS') AND COLUMN_NAME  = UPPER('MMROLE_ID_TEMP');
            IF COLUMNCHECKERFLAG = 0 THEN
                EXECUTE IMMEDIATE 'ALTER TABLE MMROLE_PERMISSIONS RENAME COLUMN MMROLE_ID TO MMROLE_ID_TEMP';
                EXECUTE IMMEDIATE 'ALTER TABLE MMROLE_PERMISSIONS ADD MMROLE_ID VARCHAR2(100) DEFAULT 0 NOT NULL';
                EXECUTE IMMEDIATE 'UPDATE MMROLE_PERMISSIONS SET MMROLE_ID = MMROLE_ID_TEMP';
                --EXECUTE IMMEDIATE 'ALTER TABLE MMROLE_PERMISSIONS DROP COLUMN MMROLE_ID_TEMP';
                EXECUTE IMMEDIATE 'ALTER TABLE MMROLE_PERMISSIONS RENAME COLUMN PERMISSION_ID TO PERMISSION_ID_TEMP';
                EXECUTE IMMEDIATE 'ALTER TABLE MMROLE_PERMISSIONS ADD PERMISSION_ID VARCHAR2(4000) DEFAULT 0 NOT NULL';
                EXECUTE IMMEDIATE 'UPDATE MMROLE_PERMISSIONS SET PERMISSION_ID = PERMISSION_ID_TEMP';
                EXECUTE IMMEDIATE 'ALTER TABLE MMROLE_PERMISSIONS DROP COLUMN PERMISSION_ID_TEMP';
            END IF;

            SELECT COUNT(*) INTO COLUMNCHECKERFLAG FROM ALL_CONS_COLUMNS WHERE OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME = UPPER('USER_ASSIGNED_ROLES') AND COLUMN_NAME  = UPPER('ROLE_ID_TEMP');
            IF COLUMNCHECKERFLAG = 0 THEN
                EXECUTE IMMEDIATE 'ALTER TABLE USER_ASSIGNED_ROLES RENAME COLUMN ROLE_ID TO ROLE_ID_TEMP';
                EXECUTE IMMEDIATE 'ALTER TABLE USER_ASSIGNED_ROLES ADD ROLE_ID VARCHAR2(100) DEFAULT 0 NOT NULL';
                EXECUTE IMMEDIATE 'UPDATE USER_ASSIGNED_ROLES SET ROLE_ID = ROLE_ID_TEMP';
                EXECUTE IMMEDIATE 'ALTER TABLE USER_ASSIGNED_ROLES DROP COLUMN ROLE_ID_TEMP';
            END IF;

            SELECT COUNT(*) INTO COLUMNCHECKERFLAG FROM ALL_CONS_COLUMNS WHERE OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME = UPPER('PROJECT_RESOURCES') AND COLUMN_NAME  = UPPER('ROLE_ID_TEMP');
            IF COLUMNCHECKERFLAG = 0 THEN
                EXECUTE IMMEDIATE 'ALTER TABLE PROJECT_RESOURCES RENAME COLUMN ROLE_ID TO ROLE_ID_TEMP';
                EXECUTE IMMEDIATE 'ALTER TABLE PROJECT_RESOURCES ADD ROLE_ID VARCHAR2(100) DEFAULT 0 NOT NULL';
                EXECUTE IMMEDIATE 'UPDATE PROJECT_RESOURCES SET ROLE_ID = ROLE_ID_TEMP';
                EXECUTE IMMEDIATE 'ALTER TABLE PROJECT_RESOURCES DROP COLUMN ROLE_ID_TEMP';
                END IF;
            SELECT COUNT(*) INTO COLUMNCHECKERFLAG FROM ALL_CONS_COLUMNS WHERE OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME = UPPER('MMROLE_PERMISSIONS') AND COLUMN_NAME  = UPPER('MMROLE_ID');
            IF COLUMNCHECKERFLAG > 0 THEN
                EXECUTE IMMEDIATE 'DELETE FROM MMROLE_PERMISSIONS WHERE MMrole_id NOT IN  (SELECT role_id FROM SECURITY_ROLES)';
                EXECUTE IMMEDIATE 'UPDATE USER_ASSIGNED_ROLES SET ROLE_ID = (SELECT TEMP_ROLE_ID FROM SECURITY_ROLES SR WHERE SR.ROLE_ID = USER_ASSIGNED_ROLES.ROLE_ID)';
                EXECUTE IMMEDIATE 'UPDATE PROJECT_RESOURCES SET ROLE_ID = (SELECT TEMP_ROLE_ID FROM SECURITY_ROLES SR WHERE SR.ROLE_ID = PROJECT_RESOURCES.ROLE_ID)';
                --EXECUTE IMMEDIATE 'UPDATE MMROLE_PERMISSIONS SET MMROLE_ID = (SELECT TEMP_ROLE_ID FROM SECURITY_ROLES SR WHERE SR.ROLE_ID = MMROLE_PERMISSIONS.MMROLE_ID)';
                EXECUTE IMMEDIATE 'MERGE INTO MMROLE_PERMISSIONS MP USING (SELECT TEMP_ROLE_ID,ROLE_ID FROM SECURITY_ROLES)U ON (MP.MMROLE_ID_TEMP = U.ROLE_ID) WHEN MATCHED THEN  UPDATE SET MP.MMROLE_ID = U.TEMP_ROLE_ID';
                EXECUTE IMMEDIATE 'ALTER TABLE MMROLE_PERMISSIONS DROP COLUMN MMROLE_ID_TEMP';
            END IF;

            SELECT COUNT(*) INTO COLUMNCHECKERFLAG FROM ALL_CONS_COLUMNS WHERE OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME = UPPER('APP_PERMISSIONS') AND COLUMN_NAME  = UPPER('PERMISSION_ID');
            IF COLUMNCHECKERFLAG > 0 THEN
                EXECUTE IMMEDIATE 'DELETE FROM MMROLE_PERMISSIONS WHERE PERMISSION_ID NOT IN  (SELECT PERMISSION_ID FROM APP_PERMISSIONS)';
                EXECUTE IMMEDIATE 'UPDATE MMROLE_PERMISSIONS SET PERMISSION_ID = (SELECT PERMISSION_NAME FROM APP_PERMISSIONS AP WHERE AP.PERMISSION_ID = MMROLE_PERMISSIONS.PERMISSION_ID)';
                EXECUTE IMMEDIATE 'DROP TABLE APP_PERMISSIONS';
            END IF;

--             SELECT COUNT(*) INTO COLUMNCHECKERFLAG FROM LANGUAGE_PREFERENCES WHERE KEY_ID = 'com.ads.mm.stb.dataprofiling';
--             IF COLUMNCHECKERFLAG = 1 THEN
--                 EXECUTE IMMEDIATE 'DELETE FROM LANGUAGE_PREFERENCES WHERE KEY_ID = ''com.ads.mm.stb.dataprofiling''';
--                 EXECUTE IMMEDIATE 'DELETE FROM LANGUAGE_PREFERENCES WHERE KEY_ID = ''com.ads.mm.stb.datastage''';
--                 EXECUTE IMMEDIATE 'DELETE FROM LANGUAGE_PREFERENCES WHERE KEY_ID = ''com.ads.mm.stb.informatica''';
--                 EXECUTE IMMEDIATE 'DELETE FROM LANGUAGE_PREFERENCES WHERE KEY_ID = ''com.ads.mm.stb.mappingmanager''';
--                 EXECUTE IMMEDIATE 'DELETE FROM LANGUAGE_PREFERENCES WHERE KEY_ID = ''com.ads.mm.stb.odi''';
--                 EXECUTE IMMEDIATE 'DELETE FROM LANGUAGE_PREFERENCES WHERE KEY_ID = ''com.ads.mm.stb.rapidgends''';
--                 EXECUTE IMMEDIATE 'DELETE FROM LANGUAGE_PREFERENCES WHERE KEY_ID = ''com.ads.mm.stb.ssis''';
--                 EXECUTE IMMEDIATE 'DELETE FROM LANGUAGE_PREFERENCES WHERE KEY_ID = ''com.ads.mm.stb.talend''';
--                 EXECUTE IMMEDIATE 'DELETE FROM LANGUAGE_PREFERENCES WHERE KEY_ID = ''com.ads.mm.stb.bigdata''';
--                 EXECUTE IMMEDIATE 'DELETE FROM LANGUAGE_PREFERENCES WHERE KEY_ID = ''com.ads.mm.stb.testauto''';
--             END IF;

            SELECT COUNT(*) INTO COLUMNCHECKERFLAG FROM ALL_CONS_COLUMNS WHERE OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME = UPPER('SECURITY_ROLES') AND COLUMN_NAME  = UPPER('ROLE_ID');
            IF COLUMNCHECKERFLAG > 0 THEN
                EXECUTE IMMEDIATE 'ALTER TABLE SECURITY_ROLES DROP COLUMN ROLE_ID';
                EXECUTE IMMEDIATE 'ALTER TABLE SECURITY_ROLES RENAME COLUMN TEMP_ROLE_ID TO ROLE_ID';
            END IF;

            SELECT COUNT(*) INTO CONSTRAINTCHECKERFLAG FROM ALL_CONS_COLUMNS WHERE OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME = UPPER('SECURITY_ROLES') AND CONSTRAINT_NAME = UPPER('XPKSECURITY_ROLES');
            IF CONSTRAINTCHECKERFLAG = 0 THEN
                EXECUTE IMMEDIATE 'ALTER TABLE SECURITY_ROLES ADD CONSTRAINT XPKSECURITY_ROLES PRIMARY KEY (ROLE_ID) ENABLE';
            END IF;
            SELECT COUNT(*) INTO CONSTRAINTCHECKERFLAG FROM ALL_CONS_COLUMNS WHERE OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME = UPPER('USER_ASSIGNED_ROLES') AND CONSTRAINT_NAME = UPPER('ROLE_ID');
            IF CONSTRAINTCHECKERFLAG = 0 THEN
                EXECUTE IMMEDIATE 'ALTER TABLE USER_ASSIGNED_ROLES ADD CONSTRAINT R_5 FOREIGN KEY (ROLE_ID) REFERENCES SECURITY_ROLES (ROLE_ID) ENABLE';
            END IF;
            SELECT COUNT(*) INTO CONSTRAINTCHECKERFLAG FROM ALL_CONS_COLUMNS WHERE OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME = UPPER('PROJECT_RESOURCES') AND CONSTRAINT_NAME = UPPER('XPKPROJECT_RESOURCES');
            IF CONSTRAINTCHECKERFLAG = 0 THEN
                EXECUTE IMMEDIATE 'ALTER TABLE PROJECT_RESOURCES ADD CONSTRAINT XPKPROJECT_RESOURCES PRIMARY KEY (PROJ_ID, USER_ID, ROLE_ID) ENABLE';
            END IF;
            SELECT COUNT(*) INTO CONSTRAINTCHECKERFLAG FROM ALL_CONS_COLUMNS WHERE OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME = UPPER('USER_ASSIGNED_ROLES') AND CONSTRAINT_NAME = UPPER('XPKUSER_ASSIGNED_ROLES');
            IF CONSTRAINTCHECKERFLAG = 0 THEN
                EXECUTE IMMEDIATE 'ALTER TABLE USER_ASSIGNED_ROLES ADD CONSTRAINT R_6 FOREIGN KEY (USER_ID) REFERENCES USERS(USER_ID) ON DELETE CASCADE ENABLE';
            END IF;
            SELECT COUNT(*) INTO CONSTRAINTCHECKERFLAG FROM ALL_CONS_COLUMNS WHERE OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME = UPPER('USER_ASSIGNED_ROLES') AND CONSTRAINT_NAME = UPPER('XPKUSER_ASSIGNED_ROLES');
            IF CONSTRAINTCHECKERFLAG = 0 THEN
                EXECUTE IMMEDIATE 'ALTER TABLE USER_ASSIGNED_ROLES ADD CONSTRAINT XPKUSER_ASSIGNED_ROLES PRIMARY KEY (USER_ID, ROLE_ID) ENABLE';
            END IF;
            SELECT COUNT(*) INTO CONSTRAINTCHECKERFLAG FROM ALL_CONS_COLUMNS WHERE OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME = UPPER('PROJECT_RESOURCES') AND CONSTRAINT_NAME = UPPER('R_9');
            IF CONSTRAINTCHECKERFLAG = 0 THEN
                EXECUTE IMMEDIATE 'ALTER TABLE PROJECT_RESOURCES ADD CONSTRAINT R_9 FOREIGN KEY (USER_ID, ROLE_ID) REFERENCES USER_ASSIGNED_ROLES (USER_ID, ROLE_ID) ENABLE';
            END IF;

            EXCEPTION
                WHEN TOO_MANY_ROWS THEN
                dbms_output.put_line('TOO_MANY_ROWS Error while migrating the language preferencss and permissions to properties file block '||SQLERRM(SQLCODE));
                ROLLBACK TO MOVE_PERM_LANG_TO_PROPS;
                WHEN ACCESS_INTO_NULL THEN
                dbms_output.put_line('ACCESS_INTO_NULL Error while migrating the language preferencss and permissions to properties file block '||SQLERRM(SQLCODE));
                ROLLBACK TO MOVE_PERM_LANG_TO_PROPS;
                WHEN INVALID_NUMBER THEN
                dbms_output.put_line('INVALID_NUMBER Error while migrating the language preferencss and permissions to properties file block '||SQLERRM(SQLCODE));
                ROLLBACK TO MOVE_PERM_LANG_TO_PROPS;
                WHEN NO_DATA_FOUND THEN
                dbms_output.put_line('NO_DATA_FOUND Error while migrating the language preferencss and permissions to properties file block '||SQLERRM(SQLCODE));
                ROLLBACK TO MOVE_PERM_LANG_TO_PROPS;
                WHEN OTHERS THEN
                dbms_output.put_line('OTHERS Error while migrating the language preferencss and permissions to properties file block '||SQLERRM(SQLCODE));
                ROLLBACK TO MOVE_PERM_LANG_TO_PROPS;
        END;
    END IF;
END;
/
DECLARE
LANGPREFCHEKER INT;
BEGIN
    SELECT COUNT(*) INTO LANGPREFCHEKER  FROM ALL_TAB_COLUMNS  WHERE OWNER = sys_context('userenv', 'current_schema') AND TABLE_NAME = UPPER('LANGUAGE_PREFERENCES')  AND COLUMN_NAME      =UPPER('LANG_PREF_ID');
    IF LANGPREFCHEKER = 1 THEN
        EXECUTE IMMEDIATE 'ALTER TABLE LANGUAGE_PREFERENCES DROP COLUMN LANG_PREF_ID';
    END IF;
END;
/
DECLARE
LANGPREFCHEKER INT;
BEGIN
    SELECT COUNT(*) INTO LANGPREFCHEKER  FROM ALL_TAB_COLUMNS  WHERE OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME = UPPER('LANGUAGE_PREFERENCES')  AND COLUMN_NAME      =UPPER('PARENT_ID_DUP');
    IF LANGPREFCHEKER = 1 THEN
        EXECUTE IMMEDIATE 'ALTER TABLE LANGUAGE_PREFERENCES DROP COLUMN PARENT_ID_DUP';
    END IF;
END;
/
DECLARE
   COLLENCHECKER INT;
BEGIN
   SELECT DATA_LENGTH INTO COLLENCHECKER FROM ALL_TAB_COLUMNS WHERE  OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME = UPPER('RM_MIGRATIONOBJECT') AND COLUMN_NAME=UPPER('MIGRATIONOBJECTNAME');
   IF COLLENCHECKER < 300 THEN
      EXECUTE IMMEDIATE 'ALTER TABLE RM_MIGRATIONOBJECT MODIFY MIGRATIONOBJECTNAME VARCHAR2(300)';
   END IF;
END;
/
DECLARE
   COLUMNCHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO COLUMNCHECKERFLAG FROM ALL_TAB_COLUMNS WHERE  OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME = UPPER('TRANSFORMATIONS') AND COLUMN_NAME=UPPER('ISPUBLISHED');
   IF COLUMNCHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'ALTER TABLE TRANSFORMATIONS ADD ISPUBLISHED char(1) DEFAULT ''N''';
      EXECUTE IMMEDIATE 'UPDATE TRANSFORMATIONS SET ISPUBLISHED = ''Y''';

   END IF;
END;
/
DECLARE
   COLUMNCHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO COLUMNCHECKERFLAG FROM ALL_TAB_COLUMNS WHERE  OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME = UPPER('TCM_TESTCASE_TYPE') AND COLUMN_NAME=UPPER('CREATED_BY');
    IF COLUMNCHECKERFLAG = 0 THEN
        EXECUTE IMMEDIATE 'ALTER TABLE TCM_TESTCASE_TYPE ADD (
                            ISPUBLISHED char(1) NULL,
                            ISSYSTEMBASED char(1) NULL,
                            CREATED_BY varchar(20) NULL,
                            CREATED_DATE TIMESTAMP (6),
                            MODIFIED_BY varchar(20) NULL,
                            MODIFIED_DATE TIMESTAMP (6))';
        EXECUTE IMMEDIATE 'UPDATE TCM_TESTCASE_TYPE SET ISPUBLISHED = ''Y'',ISSYSTEMBASED = ''Y'',CREATED_BY = ''SYSTEM'' ,CREATED_DATE = CURRENT_TIMESTAMP, MODIFIED_BY = ''SYSTEM'', MODIFIED_DATE = CURRENT_TIMESTAMP';
END IF;
END;
/
DECLARE
   COLLENCHECKER INT;
BEGIN
   SELECT DATA_LENGTH INTO COLLENCHECKER FROM ALL_TAB_COLUMNS WHERE  OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME = UPPER('MAPPING_SPECIFICATION') AND COLUMN_NAME=UPPER('SRC_COL_LENGTH');
   IF COLLENCHECKER < 4000 THEN
      EXECUTE IMMEDIATE 'ALTER TABLE MAPPING_SPECIFICATION MODIFY SRC_COL_LENGTH VARCHAR(4000)';
      EXECUTE IMMEDIATE 'ALTER TABLE MAPPING_SPECIFICATION MODIFY SRC_COL_PRECISION VARCHAR(4000)';
      EXECUTE IMMEDIATE 'ALTER TABLE MAPPING_SPECIFICATION MODIFY SRC_COL_SCALE VARCHAR(4000)';
      EXECUTE IMMEDIATE 'ALTER TABLE MAPPING_SPECIFICATION MODIFY SRC_XPATH VARCHAR(4000)';
      EXECUTE IMMEDIATE 'ALTER TABLE MAPPING_SPECIFICATION MODIFY TGT_COL_LENGTH VARCHAR(4000)';
      EXECUTE IMMEDIATE 'ALTER TABLE MAPPING_SPECIFICATION MODIFY TGT_COL_PRECISION VARCHAR(4000)';
      EXECUTE IMMEDIATE 'ALTER TABLE MAPPING_SPECIFICATION MODIFY TGT_COL_SCALE VARCHAR(4000)';
      EXECUTE IMMEDIATE 'ALTER TABLE MAPPING_SPECIFICATION MODIFY TGT_XPATH VARCHAR(4000)';
   END IF;
END;
/
DECLARE
   COLUMNCHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO COLUMNCHECKERFLAG FROM ALL_TAB_COLUMNS WHERE  OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME = UPPER('TCM_TESTCASE') AND COLUMN_NAME=UPPER('APPROVED');
   IF COLUMNCHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'ALTER TABLE TCM_TESTCASE ADD APPROVED char(1) DEFAULT ''N''';
   END IF;
END;
/
DECLARE
   PREFERENCECHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO PREFERENCECHECKERFLAG FROM APP_PREFERENCES WHERE PREFERENCE_NAME = 'SEND_EMAIL_ON_SAVE_MAPPING';
   IF PREFERENCECHECKERFLAG = 0 THEN
      INSERT INTO APP_PREFERENCES( PREFERENCE_NAME, PREFERENCE_VALUE)
      (SELECT 'SEND_EMAIL_ON_SAVE_MAPPING','false' FROM DUAL
         UNION
         SELECT 'ADD_COMMENTS_ON_SAVE_MAPPING','false' FROM DUAL
         UNION
         SELECT 'SEND_EMAIL_ON_SAVE_MAPPING_SUBJECT','Save Mapping Details - DO NOT REPLY' FROM DUAL
         UNION
         SELECT 'SEND_EMAIL_ON_SAVE_MAPPING_MESSAGE','Hi,<br><br>This is a system generated email notification. <br><br><b>A MAPPING HAS BEEN SAVED.</b><br> <br><TABLE style=''border-bottom: #600 1px solid; border-left: #600 1px solid; border-spacing: 1px; font-family: Century Gothic; font-size: 10pt; border-top: #600 1px solid; border-right: #600 1px solid'' border=1 cellPadding=5>
                                                    <TR><TD><B>Project Name:</B></TD><TD>@targetProjectName@</TD></TR>
                                                    <TR><TD><B>Subject Name:</B></TD><TD>@targetSubjectName@</TD></TR>
                                                    <TR><TD><B>Mapping Name:</B></TD><TD>@targetMappingName@</TD></TR>
                                                    <TR><TD><B>Mapping Id:</B></TD><TD>@targetMappingId@</TD></TR>
                                                    <TR><TD><B>Mapping Version:</B></TD><TD>@targetMappingVersion@</TD></TR>
                                                    <TR><TD><B>Created By:</B></TD><TD>@targetMappingCreatedBy@</TD></TR>
                                                    <TR><TD><B>Created Date:</B></TD><TD>@targetMappingCreatedDate@</TD></TR>
                                                    <TR><TD><B>Modifed By:</B></TD><TD>@targetMappingModifiedBy@</TD></TR>
                                                    <TR><TD><B>Modified Date:</B></TD><TD>@targetMappingModifiedDate@</TD></TR>
                                                    <TR><TD><B>Inserted Mapping Sequence Id(s):</B></TD><TD>@targetInsertedMappingSequenceId@</TD></TR>
                                                    <TR><TD><B>Updated Mapping Sequence Id(s):</B></TD><TD>@targetUpdatedMappingSequenceId@</TD></TR>
                                                    <TR><TD><B>Share Link:</B></TD><TD>@shareLinkUrl@</TD></TR></TABLE>
                                                    <BR><br><b>Comments:<b><br>@comments@ <BR><BR>Note: This mailbox is not monitored. DO NOT REPLY TO THIS EMAIL.' FROM DUAL
         );
   END IF;
END;
/
DECLARE
   COLUMNCHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO COLUMNCHECKERFLAG FROM ALL_TAB_COLUMNS WHERE  OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME = UPPER('SPECIFICATION_LOCK') AND COLUMN_NAME=UPPER('LOCKED_DATE_TIME');
   IF COLUMNCHECKERFLAG = 0 THEN
        EXECUTE IMMEDIATE 'ALTER TABLE SPECIFICATION_LOCK ADD LOCKED_DATE_TIME TIMESTAMP (6)';
   END IF;
END;
/
DECLARE
   TABLECHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO TABLECHECKERFLAG FROM ALL_TABLES WHERE OWNER = sys_context( 'userenv', 'current_schema' ) AND TABLE_NAME = UPPER('CHAT_THREAD');
   IF TABLECHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'CREATE TABLE  "CHAT_THREAD"
	  (	"CHAT_THREAD_ID" NUMBER NOT NULL ENABLE,
	  "CHAT_THREAD_NAME" VARCHAR2(200) NOT NULL,
	  "CHAT_THREAD_DESCRIPTION" VARCHAR2(500) NULL,
	  "ARCHIVED" CHAR(1) DEFAULT ''N'' NULL,
	  "CREATED_BY" VARCHAR2(20) NOT NULL,
	  "CREATED_DATETIME" TIMESTAMP (6) NOT NULL,
	  "MODIFIED_BY" varchar2(20) NULL,
	  "MODIFIED_DATETIME" TIMESTAMP (6) NULL,
	  CONSTRAINT "PK_CHAT_THREAD_ID" PRIMARY KEY ("CHAT_THREAD_ID"),
	  CONSTRAINT "FK_CREATED_BY_CHAT_THREAD" FOREIGN KEY("CREATED_BY") REFERENCES USERS("USER_ID"))';
   END IF;
END;
/
DECLARE
   TABLECHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO TABLECHECKERFLAG FROM ALL_TABLES WHERE OWNER = sys_context( 'userenv', 'current_schema' ) AND TABLE_NAME = UPPER('CHAT_THREAD_USER');
   IF TABLECHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'CREATE TABLE  "CHAT_THREAD_USER"
	  (	"CHAT_THREAD_ID" NUMBER NOT NULL ENABLE,
	  "USER_ID" VARCHAR2(20) NOT NULL,
	  "CHAT_THREAD_MUTED" CHAR(1) DEFAULT ''N'' NULL,
	   CONSTRAINT "FK_CHAT_THREAD_USER_CHAT_THRD" FOREIGN KEY("CHAT_THREAD_ID") REFERENCES CHAT_THREAD("CHAT_THREAD_ID"),
	   CONSTRAINT "FK_CHAT_THREAD_USER_USERS" FOREIGN KEY("USER_ID") REFERENCES USERS("USER_ID"))';
   END IF;
END;
/

DECLARE
   TABLECHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO TABLECHECKERFLAG FROM ALL_TABLES WHERE OWNER = sys_context( 'userenv', 'current_schema' ) AND TABLE_NAME = UPPER('CHAT_MESSAGES');
   IF TABLECHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'CREATE TABLE  "CHAT_MESSAGES"
	  ( "CHAT_MSG_ID" NUMBER NOT NULL ENABLE,
	    "CHAT_MSG_CONTENT" VARCHAR2(4000) NOT NULL,
	  "CREATED_BY" VARCHAR2(20) NOT NULL,
	   "CREATED_DATETIME" TIMESTAMP (6) NOT NULL,
	   "CHAT_MSG_DELETED" CHAR(1) DEFAULT ''N'' NULL,
	  	  "CHAT_THREAD_ID" NUMBER NOT NULL,
	    CONSTRAINT "PK_CHAT_MESSAGES" PRIMARY KEY ("CHAT_MSG_ID"),
	  CONSTRAINT "FK_CHAT_MESSAGES_CHAT_THREAD" FOREIGN KEY("CHAT_THREAD_ID") REFERENCES CHAT_THREAD("CHAT_THREAD_ID"),
	  CONSTRAINT "FK_CHAT_MESSAGES_USERS" FOREIGN KEY("CREATED_BY") REFERENCES USERS("USER_ID"))';
   END IF;
END;
/

DECLARE
   TABLECHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO TABLECHECKERFLAG FROM ALL_TABLES WHERE OWNER = sys_context( 'userenv', 'current_schema' ) AND TABLE_NAME = UPPER('CHAT_THREAD_OBJECT');
   IF TABLECHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'CREATE TABLE  "CHAT_THREAD_OBJECT"
	  (
		"OBJECT_TYPE_ID" NUMBER NOT NULL,
		"OBJECT_ID" NUMBER ,
	  "CHAT_THREAD_ID" NUMBER NOT NULL,
	    CONSTRAINT "FK_CHT_TRD_OBJ_ADS_KEY_VAL_OBJ" FOREIGN KEY("OBJECT_TYPE_ID") REFERENCES ADS_KEY_VALUE_OBJECTS("OBJECT_TYPE_ID"),
	   CONSTRAINT "FK_CHAT_THREAD_OBJ_CHAT_THREAD" FOREIGN KEY("CHAT_THREAD_ID") REFERENCES CHAT_THREAD("CHAT_THREAD_ID"))';
   END IF;
END;
/

DECLARE
   TABLECHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO TABLECHECKERFLAG FROM ALL_TABLES WHERE OWNER = sys_context( 'userenv', 'current_schema' ) AND TABLE_NAME = UPPER('CHAT_USER_MESSAGES');
   IF TABLECHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'CREATE TABLE  "CHAT_USER_MESSAGES"
	  ( "CHAT_MSG_ID" NUMBER NOT NULL,
	  "USER_ID" VARCHAR2(20) NOT NULL,
	   "CHAT_MSG_STATUS" INTEGER  NULL,
	    CONSTRAINT "PK_CHAT_USER_MESSAGES" PRIMARY KEY ("CHAT_MSG_ID","USER_ID"),
	  CONSTRAINT "FK_CHAT_USER_MESSAGES_USERS" FOREIGN KEY("USER_ID") REFERENCES USERS("USER_ID"))';
   END IF;
END;
/

DECLARE
   SEQUENCECHECKERFLAG INT;
BEGIN
    SELECT COUNT(*) INTO SEQUENCECHECKERFLAG FROM ALL_SEQUENCES WHERE SEQUENCE_OWNER = sys_context('userenv', 'current_schema') AND SEQUENCE_NAME = UPPER('CHAT_THREAD_ID_SEQ');
   IF SEQUENCECHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'CREATE SEQUENCE   "CHAT_THREAD_ID_SEQ"  MINVALUE 1 MAXVALUE 999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE';
   END IF;
END;
/

DECLARE
  TRIGGERCHECKERFLAG INT;
BEGIN
  SELECT COUNT(*)  INTO TRIGGERCHECKERFLAG  FROM all_triggers WHERE OWNER = sys_context('userenv', 'current_schema') AND trigger_name = UPPER('CHAT_THREAD_ID_INSERT');
  IF TRIGGERCHECKERFLAG = 0 THEN
    EXECUTE IMMEDIATE 'CREATE OR REPLACE TRIGGER  "CHAT_THREAD_ID_INSERT" BEFORE INSERT ON CHAT_THREAD FOR EACH ROW BEGIN SELECT CHAT_THREAD_ID_SEQ.NEXTVAL INTO :new.CHAT_THREAD_ID FROM DUAL; END;';
    EXECUTE IMMEDIATE 'ALTER TRIGGER  "CHAT_THREAD_ID_INSERT" ENABLE';
  END IF;
END;
/
DECLARE
   SEQUENCECHECKERFLAG INT;
BEGIN
    SELECT COUNT(*) INTO SEQUENCECHECKERFLAG FROM ALL_SEQUENCES WHERE SEQUENCE_OWNER = sys_context('userenv', 'current_schema') AND SEQUENCE_NAME = UPPER('CHAT_MSG_ID_SEQ');
   IF SEQUENCECHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'CREATE SEQUENCE   "CHAT_MSG_ID_SEQ"  MINVALUE 1 MAXVALUE 999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE';
   END IF;
END;
/

DECLARE
  TRIGGERCHECKERFLAG INT;
BEGIN
  SELECT COUNT(*)  INTO TRIGGERCHECKERFLAG  FROM all_triggers WHERE OWNER = sys_context('userenv', 'current_schema') AND trigger_name = UPPER('CHAT_MSG_ID_INSERT');
  IF TRIGGERCHECKERFLAG = 0 THEN
    EXECUTE IMMEDIATE 'CREATE OR REPLACE TRIGGER  "CHAT_MSG_ID_INSERT" BEFORE INSERT ON CHAT_MESSAGES FOR EACH ROW BEGIN SELECT CHAT_MSG_ID_SEQ.NEXTVAL INTO :new.CHAT_MSG_ID FROM DUAL; END;';
    EXECUTE IMMEDIATE 'ALTER TRIGGER  "CHAT_MSG_ID_INSERT" ENABLE';
  END IF;
END;
/
DECLARE
   TABLECHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO TABLECHECKERFLAG FROM ALL_TABLES WHERE OWNER = sys_context( 'userenv', 'current_schema' ) AND TABLE_NAME = UPPER('FORM_FIELD');
   IF TABLECHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'CREATE TABLE  FORM_FIELD(
	FIELD_ID NUMBER NOT NULL,
	 FIELD_NAME varchar2(250) NOT NULL,
	 FIELD_DESCRIPTION varchar2(4000) NULL,
	 FIELD_TYPE NUMBER NOT NULL,
	 IS_SYSTEM_BASED CHAR(1) DEFAULT ''N'' NOT NULL,
	 CONSTRAINT PK_FORM_FIELD_FIELD_ID PRIMARY KEY(FIELD_ID),
	 CONSTRAINT FK_FORM_FIELD_FIELDTYPE FOREIGN KEY(FIELD_TYPE)
	 REFERENCES AMM_DATATYPES (ADT_ID)
      )';
   END IF;
END;
/

DECLARE
   SEQUENCECHECKERFLAG INT;
BEGIN
    SELECT COUNT(*) INTO SEQUENCECHECKERFLAG FROM ALL_SEQUENCES WHERE SEQUENCE_OWNER = sys_context('userenv', 'current_schema') AND SEQUENCE_NAME = UPPER('FORM_FIELD_SEQ');
   IF SEQUENCECHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'CREATE SEQUENCE   "FORM_FIELD_SEQ"  MINVALUE 1 MAXVALUE 999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE';
   END IF;
END;
/
DECLARE
  TRIGGERCHECKERFLAG INT;
BEGIN
  SELECT COUNT(*)
  INTO TRIGGERCHECKERFLAG
  FROM all_triggers
  WHERE OWNER = sys_context('userenv', 'current_schema') AND trigger_name = UPPER('FORM_FIELD_INSERT');
  IF TRIGGERCHECKERFLAG = 0 THEN
    EXECUTE IMMEDIATE 'CREATE OR REPLACE TRIGGER  "FORM_FIELD_INSERT" BEFORE INSERT ON FORM_FIELD FOR EACH ROW BEGIN SELECT FORM_FIELD_SEQ.NEXTVAL INTO :new.FIELD_ID FROM DUAL; END;';
    EXECUTE IMMEDIATE 'ALTER TRIGGER  "FORM_FIELD_INSERT" ENABLE';
  END IF;
END;
/

DECLARE
COLUMNCHECKERFLAG INT;
BEGIN
SELECT COUNT(*) INTO COLUMNCHECKERFLAG FROM FORM_FIELD WHERE FIELD_NAME = 'DATASTEWARD';
IF COLUMNCHECKERFLAG = 0 THEN
INSERT INTO FORM_FIELD (FIELD_NAME,FIELD_DESCRIPTION,FIELD_TYPE,IS_SYSTEM_BASED)
 (
  SELECT 'DATASTEWARD','The Data Steward is a role/person responsible for the management of the metadata and for administering the organizations'' entire data in compliance with policy and/or regulatory obligations',(SELECT ADT_ID FROM AMM_DATATYPES WHERE DATATYPE = 'float'),'Y'
  FROM DUAL);
END IF;
END;
/

DECLARE
   TABLECHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO TABLECHECKERFLAG FROM ALL_TABLES WHERE OWNER = sys_context( 'userenv', 'current_schema' ) AND TABLE_NAME = UPPER('FORM_FIELD_DATA');
   IF TABLECHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'CREATE TABLE FORM_FIELD_DATA(
	FIELD_DATA_ID NUMBER NOT NULL,
	 FIELD_ID NUMBER NOT NULL,
	 FIELD_DATA varchar2(4000) NOT NULL,
	 FIELD_DESCRIPTION varchar2(4000) NULL,
	 IS_PUBLISHED char(1) DEFAULT ''N'' NOT NULL,
	 IS_SYSTEM_BASED char(1) DEFAULT ''N'' NOT NULL,
	 CREATED_BY varchar2(20) NOT NULL,
	 CREATED_DATE TIMESTAMP(6) NOT NULL,
	 LAST_MODIFIED_BY varchar2(20) NULL,
	 LAST_MODIFIED_DATE TIMESTAMP(6) NULL,
	 CONSTRAINT UK_FID_FDATA UNIQUE(FIELD_ID,FIELD_DATA),
	 CONSTRAINT PK_FIELD_DATA_ID PRIMARY KEY (FIELD_DATA_ID),
	 CONSTRAINT FK_FORM_FIELD_DATA_FIELDID FOREIGN KEY(FIELD_ID) REFERENCES FORM_FIELD (FIELD_ID)
      )';
   END IF;
END;
/

DECLARE
   SEQUENCECHECKERFLAG INT;
BEGIN
    SELECT COUNT(*) INTO SEQUENCECHECKERFLAG FROM ALL_SEQUENCES WHERE SEQUENCE_OWNER = sys_context('userenv', 'current_schema') AND SEQUENCE_NAME = UPPER('FORM_FIELD_DATA_SEQ');
   IF SEQUENCECHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'CREATE SEQUENCE   "FORM_FIELD_DATA_SEQ"  MINVALUE 1 MAXVALUE 999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE';
   END IF;
END;
/
DECLARE
  TRIGGERCHECKERFLAG INT;
BEGIN
  SELECT COUNT(*)
  INTO TRIGGERCHECKERFLAG
  FROM all_triggers
  WHERE OWNER = sys_context('userenv', 'current_schema') AND trigger_name = UPPER('FORM_FIELD_DATA_INSERT');
  IF TRIGGERCHECKERFLAG = 0 THEN
    EXECUTE IMMEDIATE 'CREATE OR REPLACE TRIGGER  "FORM_FIELD_DATA_INSERT" BEFORE INSERT ON FORM_FIELD_DATA FOR EACH ROW BEGIN SELECT FORM_FIELD_DATA_SEQ.NEXTVAL INTO :new.FIELD_DATA_ID FROM DUAL; END;';
    EXECUTE IMMEDIATE 'ALTER TRIGGER  "FORM_FIELD_DATA_INSERT" ENABLE';
  END IF;
END;
/

DECLARE
   COLUMNCHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO COLUMNCHECKERFLAG FROM ALL_TAB_COLUMNS WHERE  OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME = UPPER('SYS_CON_ENVIRONMENTS') AND COLUMN_NAME=UPPER('DATA_STEWARD_NAME');
   IF COLUMNCHECKERFLAG = 0 THEN
        EXECUTE IMMEDIATE 'ALTER TABLE SYS_CON_ENVIRONMENTS ADD DATA_STEWARD_NAME VARCHAR2(4000) NULL';
        EXECUTE IMMEDIATE 'ALTER TABLE SYS_CON_ENVIRONMENTS ADD USE_DATA_STEWARD_FOR_CHILDS CHAR(1) NULL';
   END IF;
END;
/

DECLARE
   COLUMNCHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO COLUMNCHECKERFLAG FROM ALL_TAB_COLUMNS WHERE  OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME = UPPER('SYSTEM_DEFINITION_DETAILS') AND COLUMN_NAME=UPPER('DATA_STEWARD_NAME');
   IF COLUMNCHECKERFLAG = 0 THEN
        EXECUTE IMMEDIATE 'ALTER TABLE SYSTEM_DEFINITION_DETAILS ADD DATA_STEWARD_NAME VARCHAR2(4000) NULL';
   END IF;
END;
/

DECLARE
   COLUMNCHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO COLUMNCHECKERFLAG FROM ALL_TAB_COLUMNS WHERE  OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME = UPPER('SYSTEM_TABLE_METADATA') AND COLUMN_NAME=UPPER('DATA_STEWARD_NAME');
   IF COLUMNCHECKERFLAG = 0 THEN
        EXECUTE IMMEDIATE 'ALTER TABLE SYSTEM_TABLE_METADATA ADD DATA_STEWARD_NAME VARCHAR2(4000) NULL';
   END IF;
END;
/

DECLARE
   COLUMNCHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO COLUMNCHECKERFLAG FROM ALL_TAB_COLUMNS WHERE  OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME = UPPER('SYSTEM_TABLE_COLUMNS_METADATA') AND COLUMN_NAME=UPPER('DATA_STEWARD_NAME');
   IF COLUMNCHECKERFLAG = 0 THEN
        EXECUTE IMMEDIATE 'ALTER TABLE SYSTEM_TABLE_COLUMNS_METADATA ADD DATA_STEWARD_NAME VARCHAR2(4000) NULL';
   END IF;
END;
/

-- CREATE OR REPLACE FORCE VIEW  "VALID_SYSTEM_TABLE_METADATA" AS
--                         SELECT * FROM SYSTEM_TABLE_METADATA WHERE  VALID = 1 OR VALID IS NULL
-- /
-- CREATE OR REPLACE FORCE VIEW  "VALID_SYS_TBL_COL_METADATA"  AS
--                        SELECT * FROM SYSTEM_TABLE_COLUMNS_METADATA WHERE VALID = 1 OR VALID IS NULL
-- /
DECLARE
    PREFERENCECHECKERFLAG INT;
BEGIN
    SELECT COUNT(*) INTO PREFERENCECHECKERFLAG FROM APP_PREFERENCES WHERE PREFERENCE_NAME = 'SEND_EMAIL_ON_NEW_MAP_CREATION_MESSAGE' AND PREFERENCE_VALUE = 'Hi,<br><br>This is a system generated email notification. <br><br><b>A NEW MAPPING HAS BEEN CREATED.</b><br><br><B>Project Name :</B>@targetProjectName@ <br><B>Subject Name:</B> @targetSubjectName@ <br><B>Mapping Name:</B>@targetMappingName@ <br><B>Mapping Id:</B> @targetMappingId@ <br><B>Mapping Version:</B>@targetMappingVersion@ <br><B>Created By:</B> @targetMappingCreatedBy@ <br><B>Created Date:</B>@targetMappingCreatedDate@ <br><B>Modified By:</B>@targetMappingModifiedBy@<br><B>Modified Date:</B> @targetMappingModifiedDate@<br><br><b>Comments:<b><br>@comments@<BR><BR>Note: This mailbox is not monitored. DO NOT REPLY TO THIS EMAIL.';
    IF PREFERENCECHECKERFLAG = 1 THEN
        UPDATE APP_PREFERENCES SET PREFERENCE_VALUE = 'Hi,<br><br>This is a system generated email notification. <br><br><b>NEW MAPPING(s) HAS BEEN CREATED.</b><br><br><b>Project Name :</b>@targetProjectName@ <br><b>Subject Name:</b> @targetSubjectName@ <br><b>Mapping Name(s):</b>@targetMappingName@ <br><b>Mapping Id(s):</b> @targetMappingId@ <br><b>Mapping Version:</b>@targetMappingVersion@ <br><b>Created By:</b> @targetMappingCreatedBy@ <br><b>Created Date:</b>@targetMappingCreatedDate@ <br><b>Modified By:</b>@targetMappingModifiedBy@<br><b>Modified Date:</b> @targetMappingModifiedDate@<br><br><b>Comments:<b><br>@comments@<br><br>Note: This mailbox is not monitored. DO NOT REPLY TO THIS EMAIL.</b></b>'  WHERE PREFERENCE_NAME='SEND_EMAIL_ON_NEW_MAP_CREATION_MESSAGE';
    END IF;
END;
/
DECLARE
VERSIONCHECKERFLAG INT;
COLUMNCHECKERFLAG INT;
BEGIN
SELECT COUNT(*) INTO VERSIONCHECKERFLAG FROM ADS_MM_VERSION WHERE VALUE <= '6.2';
    IF VERSIONCHECKERFLAG = 1 THEN
        SELECT COUNT(*) INTO COLUMNCHECKERFLAG FROM APP_PREFERENCES WHERE PREFERENCE_NAME = 'CONST_LOGIN_IMAGE_STYLE';
        IF COLUMNCHECKERFLAG = 1 THEN
            EXECUTE IMMEDIATE 'UPDATE APP_PREFERENCES SET PREFERENCE_VALUE = '''' WHERE PREFERENCE_NAME = ''CONST_LOGIN_IMAGE_STYLE''';
        END IF;
        SELECT COUNT(*) INTO COLUMNCHECKERFLAG FROM LANGUAGE_PREFERENCES WHERE KEY_ID = 'com.ads.mm.stb.bstviewresieexpabove';
        IF COLUMNCHECKERFLAG = 1 THEN
            EXECUTE IMMEDIATE 'UPDATE LANGUAGE_PREFERENCES SET KEY_DESCRIPTION = ''Best viewed in 1280 x 1024 resolution in IE 10.0, Firefox 16.0, Chrome 28.0, Safari 5.1 &amp; above''  ,  ENGLISH = ''Best viewed in 1280 x 1024 resolution in IE 10.0, Firefox 16.0, Chrome 28.0, Safari 5.1 &amp; above'' where KEY_ID = ''com.ads.mm.stb.bstviewresieexpabove''';
        END IF;
    END IF;
END;
/
DECLARE
TABLECHECKERFLAG INT;
BEGIN
    SELECT COUNT(*) INTO TABLECHECKERFLAG FROM ALL_TABLES WHERE OWNER = sys_context( 'userenv', 'current_schema' ) AND TABLE_NAME = UPPER('OBJECT_CONFIGURATIONS');
    IF TABLECHECKERFLAG = 0 THEN
        EXECUTE IMMEDIATE 'CREATE TABLE "OBJECT_CONFIGURATIONS"(
		CONFIGURATION_ID NUMBER NOT NULL,
		OBJECT_ID varchar2(4000) NOT NULL,
		OBJECT_TYPE_ID INT NOT NULL,
		CONFIGURATION_USER VARCHAR2(20) NOT NULL,
		CONFIGURATION_TYPE VARCHAR2(4000) NOT NULL,
		CONSTRAINT UK_OBJECT_CONFIG_USERID UNIQUE (OBJECT_ID,OBJECT_TYPE_ID,CONFIGURATION_USER),
		CONSTRAINT FK_OBJECT_CONFIG_USERID FOREIGN KEY (CONFIGURATION_USER) REFERENCES USERS(USER_ID)  ON DELETE CASCADE ENABLE,
		CONSTRAINT FK_OBJECT_CONFIG_OBJ_ID FOREIGN KEY( OBJECT_TYPE_ID) REFERENCES ADS_KEY_VALUE_OBJECTS(OBJECT_TYPE_ID))';
    END IF;
END;
/
DECLARE
   SEQUENCECHECKERFLAG INT;
BEGIN
    SELECT COUNT(*) INTO SEQUENCECHECKERFLAG FROM ALL_SEQUENCES WHERE SEQUENCE_OWNER = sys_context('userenv', 'current_schema') AND SEQUENCE_NAME = UPPER('OBJECT_CONFIG_SEQ');
    IF SEQUENCECHECKERFLAG = 0 THEN
        EXECUTE IMMEDIATE 'CREATE SEQUENCE "OBJECT_CONFIG_SEQ"  MINVALUE 1 MAXVALUE 999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE';
    END IF;
END;
/
DECLARE
  TRIGGERCHECKERFLAG INT;
BEGIN
    SELECT COUNT(*)  INTO TRIGGERCHECKERFLAG FROM all_triggers WHERE OWNER = sys_context('userenv', 'current_schema') AND trigger_name = UPPER('OBJECT_CONFIG_INSERT');
    IF TRIGGERCHECKERFLAG = 0 THEN
        EXECUTE IMMEDIATE 'CREATE OR REPLACE TRIGGER  "OBJECT_CONFIG_INSERT" BEFORE INSERT ON OBJECT_CONFIGURATIONS FOR EACH ROW BEGIN SELECT OBJECT_CONFIG_SEQ.NEXTVAL INTO :new.CONFIGURATION_ID FROM DUAL; END;';
        EXECUTE IMMEDIATE 'ALTER TRIGGER  "OBJECT_CONFIG_INSERT" ENABLE';
    END IF;
END;
/
DECLARE
   PREFERENCECHECKER INT;
BEGIN
   SELECT COUNT(*) INTO PREFERENCECHECKER FROM "APP_PREFERENCES" WHERE PREFERENCE_NAME ='SEND_EMAIL_ON_METADATA_SCAN_JOB_EXECUTED_MESSAGE';
   IF PREFERENCECHECKER = 0 THEN
        INSERT INTO APP_PREFERENCES(PREFERENCE_NAME,PREFERENCE_VALUE) VALUES ('SEND_EMAIL_ON_METADATA_SCAN_JOB_EXECUTION_SUBJECT','Metadata Scan Job Execution Status - DO NOT REPLY');
        INSERT INTO APP_PREFERENCES(PREFERENCE_NAME,PREFERENCE_VALUE) VALUES ('SEND_EMAIL_ON_METADATA_SCAN_JOB_EXECUTED_MESSAGE','Hi,<br><br>This is a system generated email notification.<br><br><b>@executionMessage@</b></br><br><table border = 1><tr><th colspan = 2><b>Job Details</b></th></tr><tr><td>Job Name :</td><td>@jobName@</td><tr><td>Job Owner : </td><td>@jobOwner@</td></tr><tr><td>System Name: </td><td>@systemName@</td></tr><tr><td>Environment Name : </td><td>@environmentName@</td></tr><tr><td>Scheduled Schemas : </td><td>@scheduledObjects@</td></tr><tr><td>Job Scheduled Date Time : </td><td>@scheduledDateTime@</td></tr><tr><td>Job Completed Date Time : </td><td>@jobExecutedDateTime@</td></tr><tr><td>Job Next Executed Date Time : </td><td>@jobNextExecutedDateTime@</td></tr></table><BR><BR><I><font color =red>Note</font>: This is an auto generated email notification and this mailbox is not monitored.<BR>Please do not reply to this email.</I>');
        INSERT INTO APP_PREFERENCES(PREFERENCE_NAME,PREFERENCE_VALUE) VALUES ('SEND_EMAIL_ON_METADATA_SCAN','true');
    END IF;
END;
/
DECLARE
   COLUMNCHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO COLUMNCHECKERFLAG FROM ALL_TAB_COLUMNS WHERE  OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME = UPPER('MAPPING_SPECIFICATION') AND COLUMN_NAME=UPPER('SRC_PRIMARY_KEY_FLAG');
   IF COLUMNCHECKERFLAG = 0 THEN
    EXECUTE IMMEDIATE 'ALTER TABLE MAPPING_SPECIFICATION ADD SRC_PRIMARY_KEY_FLAG char(1) NULL';
    EXECUTE IMMEDIATE 'UPDATE USER_PREFERENCES SET COLUMN_PREFERENCES = COLUMN_PREFERENCES || '',SrcPrimaryKeyFlag:0'' WHERE USER_ID like ''HEADER_ORDER_PREFERENCE_%''';
    EXECUTE IMMEDIATE'UPDATE USER_PREFERENCES SET COLUMN_PREFERENCES = COLUMN_PREFERENCES || '','' WHERE USER_ID LIKE ''HEADER_VISIBILITY_PREFERENCE_%''';
    EXECUTE IMMEDIATE'UPDATE USER_PREFERENCES SET COLUMN_PREFERENCES = COLUMN_PREFERENCES || '',SrcPrimaryKeyFlag'' WHERE USER_ID LIKE ''SETTINGS_MM_DASHBOARD_NOTMAPPED_SOURCES_GRID_HEADER_PREF_%''';
   END IF;
END;
/
-- CREATE OR REPLACE FORCE VIEW  "MAP_SPEC_SUMMARY_V" ("PROJ_ID","MAP_ID","MAP_SEQ_ID", "ROW_ORDER", "EXTENDED_BUS_RULE",             "SRC_SYSTEM_ID",         "SRC_SYSTEM_NAME",                "SRC_SYSTEM_ENVIRONMENT_NAME",              "SRC_TABLE_NAME",    "SRC_COLUMN_NAME",                "SRC_COL_DATATYPE", "SRC_COL_LENGTH",     "SRC_COL_PRECISION",                "SRC_COL_SCALE",                "SRC_COL_DB_DEFAULT_VALUE",           "SRC_COL_DEF",  "SRC_COL_IDENTITY_FLAG", "SRC_PRIMARY_KEY_FLAG",            "SRC_COL_NULLABLE_FLAG",    "SRC_PERCENT_NULL_VALUE",                "SRC_NATURAL_KEY_FLAG",                "SRC_MIN_VALUE",       "SRC_MAX_VALUE",      "TGT_SYSTEM_ID",         "TGT_SYSTEM_NAME",                "TGT_SYSTEM_ENVIRONMENT_NAME",              "TGT_TABLE_NAME",    "TGT_COLUMN_NAME",                "TGT_COL_DATATYPE",                "TGT_COL_LENGTH",     "TGT_COL_PRECISION",               "TGT_COL_SCALE",                "TGT_COL_ETL_DEFAULT_VALUE",         "TGT_COL_DEF",  "TGT_NATURAL_KEY_FLAG",                "TGT_PRIMARY_KEY_FLAG",   "LOOKUP_COLUMN",   "TRNSF_LOOKUP_CONDITION",   "LOOKUP_ON",            "BUSINESS_RULE",                "COL_MAP_COMPLETE_FLAG",                "LAST_MODIFIED_BY",  "LAST_MODIFIED_DATE_TIME",                "CREATED_BY", "CREATED_DATETIME", "USER_DEFINATION1", "USER_DEFINATION2", "USER_DEFINATION3",                "USER_DEFINATION4", "MAP_SPECROWCOMMENTS", "TGT_COL_NULLABLE_FLAG",   "SRC_SDI_FLAG",                "SRC_SDI_DESCRIPTION",            "TGT_SDI_FLAG",            "TGT_SDI_DESCRIPTION",           "PSUEDO_CODE") AS
--     SELECT proj_id, map_id, map_seq_id, row_order, extended_bus_rule, src_system_id, src_system_name, src_system_environment_name,
--     src_table_name, src_column_name, src_col_datatype, src_col_length, src_col_precision, src_col_scale,
--     src_col_db_default_value, src_col_def, src_col_identity_flag,src_primary_key_flag, src_col_nullable_flag, src_percent_null_value,
--     src_natural_key_flag, src_min_value, src_max_value, tgt_system_id, tgt_system_name, tgt_system_environment_name,
--     tgt_table_name, tgt_column_name, tgt_col_datatype, tgt_col_length, tgt_col_precision, tgt_col_scale,
--     tgt_col_etl_default_value, tgt_col_def, tgt_natural_key_flag, tgt_primary_key_flag, LOOKUP_COLUMN,trnsf_lookup_condition,LOOKUP_ON,
--     business_rule, col_map_complete_flag, ms.last_modified_by, ms.last_modified_date_time, ms.created_by, ms.created_datetime,
--     user_defination1, user_defination2, user_defination3, user_defination4, map_specrowcomments, tgt_col_nullable_flag,
--     src_sdi_flag, src_sdi_description, tgt_sdi_flag, tgt_sdi_description,
--     NVL(t.psuedo_code, ' ') psuedo_code
--     FROM MAPPING_SPECIFICATION ms
--     LEFT OUTER JOIN transformations t ON to_char(ms.business_rule) = t.transf_name;
-- /
--DECLARE
--    TABLECHECKERFLAG INT;
-- BEGIN
--    SELECT COUNT(*) INTO TABLECHECKERFLAG FROM "ADS_MODULES" WHERE MODULE_KEY = 'com.ads.mm.permission.dm';
--    IF TABLECHECKERFLAG = 0 THEN
--         INSERT INTO ADS_MODULES(MODULE_ID, MODULE_NAME, MODULE_KEY, MODULE_ORDER, MODULE_FORWARD)
--         (SELECT 10, 'Desktop Manager', 'com.ads.mm.permission.dm', 10, 'desktopmanager' FROM DUAL);
--     END IF;
-- END;
-- /
DECLARE
VERSIONCHECKERFLAG INT;
BEGIN
SELECT COUNT(*) INTO VERSIONCHECKERFLAG FROM ADS_MM_VERSION WHERE VALUE <= '6.2';
    IF VERSIONCHECKERFLAG = 1 THEN
	EXECUTE IMMEDIATE 'MERGE INTO CAT_TABS M USING (SELECT DISTINCT CAT_TAB_ID,  CAT_TAB_NAME,   ROW_NUMBER() OVER( ORDER BY CASE DISPLAY_ORDER WHEN NULL THEN 0 WHEN 0 THEN 999999999 ELSE DISPLAY_ORDER END )AS  DISPLAY_ORDER        FROM   CAT_TABS ) U ON ( M.CAT_TAB_ID = U.CAT_TAB_ID      AND M.CAT_TAB_NAME = U.CAT_TAB_NAME ) WHEN MATCHED THEN   UPDATE SET M.DISPLAY_ORDER = U.DISPLAY_ORDER';
    END IF;
END;
/
DECLARE
CONSTRAINTCHECKERFLAG INT;
DATALENGTHCHECKERFLAG INT;
BEGIN
SELECT COUNT(*) INTO CONSTRAINTCHECKERFLAG FROM ALL_CONS_COLUMNS WHERE OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME = UPPER('CSM_CODESET') AND CONSTRAINT_NAME = UPPER('UK_CODENAME_CAT_VER_ID');
IF CONSTRAINTCHECKERFLAG = 1 THEN
    SELECT DATA_LENGTH INTO DATALENGTHCHECKERFLAG FROM ALL_TAB_COLUMNS WHERE  OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME = UPPER('CSM_CODESET') AND COLUMN_NAME=UPPER('CODESET_NAME');
    IF DATALENGTHCHECKERFLAG < 100 THEN
        EXECUTE IMMEDIATE 'ALTER TABLE CSM_CODESET DROP CONSTRAINT "UK_CODENAME_CAT_VER_ID"';
        EXECUTE IMMEDIATE 'ALTER TABLE CSM_CODESET MODIFY CODESET_NAME VARCHAR2(100)';
        EXECUTE IMMEDIATE 'ALTER TABLE "CSM_CODESET"  ADD  CONSTRAINT "UK_CODENAME_CAT_VER_ID" UNIQUE (CATEGORY_ID,CODESET_NAME,CODESET_VERSION)';
    END IF;
END IF;
END;
/
DECLARE
   DATALENGTHCHECKERFLAG INT;
BEGIN
   SELECT DATA_LENGTH INTO DATALENGTHCHECKERFLAG FROM ALL_TAB_COLUMNS WHERE  OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME = UPPER('CSM_CODE_VALUE') AND COLUMN_NAME=UPPER('CODE_STND_VALUE');
   IF DATALENGTHCHECKERFLAG <100 THEN
    EXECUTE IMMEDIATE 'ALTER TABLE CSM_CODE_VALUE MODIFY CODE_STND_VALUE VARCHAR2(100)';
   END IF;
END;
/
DECLARE
   COLLENCHECKER INT;
BEGIN
   SELECT DATA_LENGTH INTO COLLENCHECKER FROM ALL_TAB_COLUMNS WHERE  OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME = UPPER('USERS') AND COLUMN_NAME=UPPER('DEFAULT_ROLE');
   IF COLLENCHECKER < 50 THEN
      EXECUTE IMMEDIATE 'ALTER TABLE USERS MODIFY DEFAULT_ROLE VARCHAR2(50)';
   END IF;
END;
/
DECLARE
   TABLECHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO TABLECHECKERFLAG FROM ALL_TABLES WHERE OWNER = sys_context( 'userenv', 'current_schema' ) AND TABLE_NAME = UPPER('APPEND_SPEC_G_TBL');
   IF TABLECHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'create global temporary table APPEND_SPEC_G_TBL (
  SRC_SYSTEM_NAME varchar2(4000),
  SRC_SYSTEM_ENVIRONMENT_NAME VARCHAR2(4000),
  SRC_TABLE_NAME varchar2(4000),
  SRC_COLUMN_NAME varchar2(4000),
  TGT_SYSTEM_NAME varchar2(4000),
  TGT_SYSTEM_ENVIRONMENT_NAME varchar2(4000),
  TGT_TABLE_NAME varchar2(4000),
  TGT_COLUMN_NAME varchar2(4000),
  MAP_SEQ_ID NUMBER,
  MAP_ID NUMBER,
  PROJ_ID NUMBER
)ON COMMIT PRESERVE ROWS
';
   END IF;
END;
/

DECLARE
   TABLECHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO TABLECHECKERFLAG FROM ALL_TABLES WHERE OWNER = sys_context( 'userenv', 'current_schema' ) AND TABLE_NAME = UPPER('LIN_RES_G_TBL');
   IF TABLECHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'create global temporary table LIN_RES_G_TBL(
  SRC_SYSTEM_NAME varchar2(4000),
  SRC_SYSTEM_ENVIRONMENT_NAME VARCHAR2(4000),
  SRC_TABLE_NAME varchar2(4000),
  SRC_COLUMN_NAME varchar2(4000),
  TGT_SYSTEM_NAME varchar2(4000),
  TGT_SYSTEM_ENVIRONMENT_NAME varchar2(4000),
  TGT_TABLE_NAME varchar2(4000),
  TGT_COLUMN_NAME varchar2(4000)
)ON COMMIT PRESERVE ROWS';
   END IF;
END;
/

-- DECLARE
--    COLUMNCHECKERFLAG INT;
-- BEGIN
--    SELECT COUNT(*) INTO COLUMNCHECKERFLAG FROM ALL_TAB_COLUMNS WHERE  OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME = UPPER('CAT_DIALOG_PROFILE') AND COLUMN_NAME=UPPER('PROFILE_STATUS');
--    IF COLUMNCHECKERFLAG = 0 THEN
--       EXECUTE IMMEDIATE 'ALTER TABLE CAT_DIALOG_PROFILE ADD PROFILE_STATUS varchar(10) DEFAULT ''NEW'' NOT NULL';
--       EXECUTE IMMEDIATE 'UPDATE CAT_DIALOG_PROFILE SET PROFILE_STATUS=''OLD''';
--    END IF;
-- END;
-- /
DECLARE
    DATACHECKERFLAG INT;
BEGIN
    SELECT COUNT(*) INTO DATACHECKERFLAG FROM ALL_TAB_COLUMNS WHERE OWNER = sys_context('userenv', 'current_schema') AND TABLE_NAME = 'ADS_KEY_VALUE_OBJECTS' AND COLUMN_NAME = 'OBJECT_TABLE' AND NULLABLE='N';
    IF DATACHECKERFLAG = 1 THEN
        EXECUTE IMMEDIATE 'ALTER TABLE ADS_KEY_VALUE_OBJECTS MODIFY OBJECT_TABLE VARCHAR2(500) NULL';
        EXECUTE IMMEDIATE 'ALTER TABLE ADS_KEY_VALUE_OBJECTS MODIFY OBJECT_TABLE_COLUMN VARCHAR2(500) NULL';
    END IF;
END;
/
DECLARE
    TRIGGERSTATECHECKER INT;
BEGIN
    SELECT count(*) INTO TRIGGERSTATECHECKER FROM all_triggers WHERE OWNER = sys_context('userenv', 'current_schema') AND trigger_name = UPPER('OBJECT_INSERT') AND STATUS = UPPER('DISABLED');
    IF TRIGGERSTATECHECKER = 1 THEN
        EXECUTE IMMEDIATE 'ALTER TRIGGER OBJECT_INSERT ENABLE';
    END IF;
END;
/
DECLARE
   TABLECHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO TABLECHECKERFLAG FROM ALL_TABLES WHERE OWNER = sys_context( 'userenv', 'current_schema' ) AND TABLE_NAME = UPPER('MT_DEFINITION');
   IF TABLECHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'CREATE TABLE MT_DEFINITION  (
                "MTD_ID"          INT NOT NULL,
                "MTD_NAME"                   VARCHAR2(250) NOT NULL,
                "MTD_DESC"                     VARCHAR2(4000) NULL,
                "ADS_MODULE"               VARCHAR2(50) NULL,
                CONSTRAINT PK_MT_DEF_MTD_ID PRIMARY KEY ("MTD_ID") ENABLE)';
   END IF;
END;
/
DECLARE
   SEQUENCECHECKERFLAG INT;
BEGIN
    SELECT COUNT(*) INTO SEQUENCECHECKERFLAG FROM ALL_SEQUENCES WHERE SEQUENCE_OWNER = sys_context('userenv', 'current_schema') AND SEQUENCE_NAME = UPPER('MT_DEFINITION_SEQ');
   IF SEQUENCECHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'CREATE SEQUENCE   "MT_DEFINITION_SEQ"  MINVALUE 1 MAXVALUE 999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE';
   END IF;
END;
/
DECLARE
  TRIGGERCHECKERFLAG INT;
BEGIN
  SELECT COUNT(*)
  INTO TRIGGERCHECKERFLAG
  FROM all_triggers
  WHERE OWNER = sys_context('userenv', 'current_schema') AND trigger_name = UPPER('MT_DEFINITION_INSERT');
  IF TRIGGERCHECKERFLAG = 0 THEN
    EXECUTE IMMEDIATE 'CREATE OR REPLACE TRIGGER  "MT_DEFINITION_INSERT" BEFORE INSERT ON MT_DEFINITION FOR EACH ROW BEGIN SELECT MT_DEFINITION_SEQ.NEXTVAL INTO :new.MTD_ID FROM DUAL; END;';
    EXECUTE IMMEDIATE 'ALTER TRIGGER  "MT_DEFINITION_INSERT" ENABLE';
  END IF;
END;
/
DECLARE
TABLECHECKERFLAG INT;
BEGIN
    SELECT COUNT(*) INTO TABLECHECKERFLAG FROM ADS_KEY_VALUE_OBJECTS WHERE  OBJECT_TYPE = 'MT_DEFINITION';
    IF TABLECHECKERFLAG = 0 THEN
        EXECUTE IMMEDIATE 'INSERT INTO ADS_KEY_VALUE_OBJECTS (OBJECT_TYPE,OBJECT_TABLE,OBJECT_TABLE_COLUMN,OBJECT_PARENT_TYPE,OBJECT_PARENT_COLUMN_ID) VALUES (''MT_DEFINITION'',''MT_DEFINITION'',''MTD_ID'','''','''')';
	EXECUTE IMMEDIATE 'INSERT INTO ADS_KEY_VALUE_OBJECTS (OBJECT_TYPE,OBJECT_TABLE,OBJECT_TABLE_COLUMN,OBJECT_PARENT_TYPE,OBJECT_PARENT_COLUMN_ID) VALUES (''MT_DEFINITION_VALUE'','''','''','''','''')';
	EXECUTE IMMEDIATE 'INSERT INTO ADS_KEY_VALUE_OBJECTS (OBJECT_TYPE,OBJECT_TABLE,OBJECT_TABLE_COLUMN,OBJECT_PARENT_TYPE,OBJECT_PARENT_COLUMN_ID) VALUES (''ADS_KEY_VALUE'',''ADS_KEY_VALUE'','''','''','''')';
    END IF;
END;
/
DECLARE
   COLUMNCHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO COLUMNCHECKERFLAG FROM ALL_TAB_COLUMNS WHERE  OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME = UPPER('ADS_KEY_VALUE') AND COLUMN_NAME=UPPER('KV_TYPE');
   IF COLUMNCHECKERFLAG = 0 THEN
         EXECUTE IMMEDIATE 'ALTER TABLE ADS_KEY_VALUE ADD (KV_TYPE VARCHAR2(50) NULL ,LABEL_WIDTH VARCHAR2(50) NULL ,CONTROL_WIDTH VARCHAR2(50) NULL ,KV_ORDER VARCHAR2(50) NULL , COMPONENT VARCHAR2(4000) NULL,DEFAULTVALUE VARCHAR2(50) NULL)';
   END IF;
END;
/
DECLARE
   TABLECHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO TABLECHECKERFLAG FROM ALL_TABLES WHERE OWNER = sys_context( 'userenv', 'current_schema' ) AND TABLE_NAME = UPPER('REQM_PROJECT');
   IF TABLECHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'CREATE TABLE REQM_PROJECT  (
	"PROJECT_ID"          	NUMBER NOT NULL ENABLE,
	"PROJECT_NAME"        	VARCHAR2(250) NOT NULL,
	"PROJECT_DESCRIPTION"        	VARCHAR2(4000) NULL,
	CONSTRAINT REQM_PROJECT_ID PRIMARY KEY ("PROJECT_ID") ENABLE ,
	CONSTRAINT UK_REQM_PROJECT_NAME UNIQUE ("PROJECT_NAME") ENABLE)';
   END IF;
END;
/
DECLARE
   SEQUENCECHECKERFLAG INT;
BEGIN
    SELECT COUNT(*) INTO SEQUENCECHECKERFLAG FROM ALL_SEQUENCES WHERE SEQUENCE_OWNER = sys_context('userenv', 'current_schema') AND SEQUENCE_NAME = UPPER('REQM_PROJECT_SEQ');
   IF SEQUENCECHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'CREATE SEQUENCE   "REQM_PROJECT_SEQ"  MINVALUE 1 MAXVALUE 999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE';
   END IF;
END;
/
DECLARE
  TRIGGERCHECKERFLAG INT;
BEGIN
  SELECT COUNT(*)  INTO TRIGGERCHECKERFLAG FROM all_triggers WHERE OWNER = sys_context('userenv', 'current_schema') AND trigger_name = UPPER('REQM_PROJECT_INSERT');
  IF TRIGGERCHECKERFLAG = 0 THEN
    EXECUTE IMMEDIATE 'CREATE OR REPLACE TRIGGER  "REQM_PROJECT_INSERT" BEFORE INSERT ON REQM_PROJECT FOR EACH ROW BEGIN SELECT REQM_PROJECT_SEQ.NEXTVAL INTO :new.PROJECT_ID FROM DUAL; END;';
    EXECUTE IMMEDIATE 'ALTER TRIGGER  "REQM_PROJECT_INSERT" ENABLE';
  END IF;
END;
/
DECLARE
   TABLECHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO TABLECHECKERFLAG FROM ALL_TABLES WHERE OWNER = sys_context( 'userenv', 'current_schema' ) AND TABLE_NAME = UPPER('REQM_SUBJECT');
   IF TABLECHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'CREATE TABLE REQM_SUBJECT  (
	"SUBJECT_ID"          	NUMBER NOT NULL ENABLE,
	"SUBJECT_NAME"        	VARCHAR2(250) NOT NULL,
	"SUBJECT_DESCRIPTION"        	VARCHAR2(4000) NULL,
	"PARENT_SUBJECT_ID"          	NUMBER DEFAULT -1 NOT NULL ENABLE,
	"PROJECT_ID"          	NUMBER NOT NULL ENABLE,
	CONSTRAINT REQM_SUBJECT_ID PRIMARY KEY ("SUBJECT_ID") ENABLE ,
	CONSTRAINT FK_REQM_PROJECT_ID FOREIGN KEY("PROJECT_ID") REFERENCES REQM_PROJECT (PROJECT_ID) ON DELETE CASCADE ENABLE,
	CONSTRAINT UK_REQM_SUBJECT_ID_NAME UNIQUE ("PROJECT_ID", "PARENT_SUBJECT_ID", "SUBJECT_NAME") )';
   END IF;
END;
/
DECLARE
   SEQUENCECHECKERFLAG INT;
BEGIN
    SELECT COUNT(*) INTO SEQUENCECHECKERFLAG FROM ALL_SEQUENCES WHERE SEQUENCE_OWNER = sys_context('userenv', 'current_schema') AND SEQUENCE_NAME = UPPER('REQM_SUBJECT_SEQ');
   IF SEQUENCECHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'CREATE SEQUENCE   "REQM_SUBJECT_SEQ"  MINVALUE 1 MAXVALUE 999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE';
   END IF;
END;
/
DECLARE
  TRIGGERCHECKERFLAG INT;
BEGIN
  SELECT COUNT(*)  INTO TRIGGERCHECKERFLAG FROM all_triggers WHERE OWNER = sys_context('userenv', 'current_schema') AND trigger_name = UPPER('REQM_SUBJECT_INSERT');
  IF TRIGGERCHECKERFLAG = 0 THEN
    EXECUTE IMMEDIATE 'CREATE OR REPLACE TRIGGER  "REQM_SUBJECT_INSERT" BEFORE INSERT ON REQM_SUBJECT FOR EACH ROW BEGIN SELECT REQM_SUBJECT_SEQ.NEXTVAL INTO :new.SUBJECT_ID FROM DUAL; END;';
    EXECUTE IMMEDIATE 'ALTER TRIGGER  "REQM_SUBJECT_INSERT" ENABLE';
  END IF;
END;
/
DECLARE
   TABLECHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO TABLECHECKERFLAG FROM ALL_TABLES WHERE OWNER = sys_context( 'userenv', 'current_schema' ) AND TABLE_NAME = UPPER('REQM_SPECIFICATION_TEMPLATE');
   IF TABLECHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'CREATE TABLE REQM_SPECIFICATION_TEMPLATE  (
	"SPEC_TEMPLATE_ID"          	NUMBER NOT NULL ENABLE,
	"SPEC_TEMPLATE_NAME"        	VARCHAR2(250) NOT NULL,
	"SPEC_TEMPLATE_DESCRIPTION"        	VARCHAR2(4000) NULL,
	"SYSTEM_BASED"          	char(1) DEFAULT ''0'' NOT NULL ENABLE,

	CONSTRAINT REQM_SPEC_TEMPLATE_ID PRIMARY KEY ("SPEC_TEMPLATE_ID") ,
	CONSTRAINT UK_REQM_SPEC_TEMPLATE_NAME UNIQUE ("SPEC_TEMPLATE_NAME") )';
   END IF;
END;
/
DECLARE
   SEQUENCECHECKERFLAG INT;
BEGIN
    SELECT COUNT(*) INTO SEQUENCECHECKERFLAG FROM ALL_SEQUENCES WHERE SEQUENCE_OWNER = sys_context('userenv', 'current_schema') AND SEQUENCE_NAME = UPPER('REQM_SPEC_TEMP_SEQ');
   IF SEQUENCECHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'CREATE SEQUENCE   "REQM_SPEC_TEMP_SEQ"  MINVALUE 1 MAXVALUE 999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE';
   END IF;
END;
/
DECLARE
  TRIGGERCHECKERFLAG INT;
BEGIN
  SELECT COUNT(*)  INTO TRIGGERCHECKERFLAG FROM all_triggers WHERE OWNER = sys_context('userenv', 'current_schema') AND trigger_name = UPPER('REQM_SPEC_TEMP_INSERT');
  IF TRIGGERCHECKERFLAG = 0 THEN
    EXECUTE IMMEDIATE 'CREATE OR REPLACE TRIGGER  "REQM_SPEC_TEMP_INSERT" BEFORE INSERT ON REQM_SPECIFICATION_TEMPLATE FOR EACH ROW BEGIN SELECT REQM_SPEC_TEMP_SEQ.NEXTVAL INTO :new.SPEC_TEMPLATE_ID FROM DUAL; END;';
    EXECUTE IMMEDIATE 'ALTER TRIGGER  "REQM_SPEC_TEMP_INSERT" ENABLE';
  END IF;
END;
/
DECLARE
TABLECHECKERFLAG INT;
BEGIN
    SELECT COUNT(*) INTO TABLECHECKERFLAG FROM ALL_TABLES WHERE OWNER = sys_context( 'userenv', 'current_schema' ) AND TABLE_NAME = UPPER('REQM_SPECIFICATION');
    IF TABLECHECKERFLAG = 0 THEN
    EXECUTE IMMEDIATE 'CREATE TABLE REQM_SPECIFICATION (
    "SPEC_ID" NUMBER NOT NULL,
     "SPEC_TEMPLATE_ID" NUMBER NOT NULL,
    "SPEC_NAME" VARCHAR2(250) NOT NULL,
 "SPEC_DESCRIPTION" VARCHAR2(4000) NULL ,
  "PROJECT_ID" NUMBER NOT NULL ,
      "SUBJECT_ID" NUMBER NOT NULL ,
      "OWNER" VARCHAR2(50) NULL ,
   "STATUS" NUMBER NOT NULL ,
   CONSTRAINT REQM_SPEC_ID PRIMARY KEY(SPEC_ID) ,
      CONSTRAINT FK_REQM_SPEC_TEMPLATE_ID FOREIGN KEY(SPEC_TEMPLATE_ID) REFERENCES REQM_SPECIFICATION_TEMPLATE(SPEC_TEMPLATE_ID) ON DELETE CASCADE,
      CONSTRAINT FK_REQM_SPEC_PROJECT_ID FOREIGN KEY(PROJECT_ID) REFERENCES REQM_PROJECT(PROJECT_ID) ON DELETE CASCADE ,
      CONSTRAINT UK_REQM_SPECIFICATION_NAME UNIQUE (SPEC_NAME, PROJECT_ID,SUBJECT_ID)
    )';
    END IF;
END;
/
DECLARE
   SEQUENCECHECKERFLAG INT;
BEGIN
    SELECT COUNT(*) INTO SEQUENCECHECKERFLAG FROM ALL_SEQUENCES WHERE SEQUENCE_OWNER = sys_context('userenv', 'current_schema') AND SEQUENCE_NAME = UPPER('REQM_SPEC_SEQ');
    IF SEQUENCECHECKERFLAG = 0 THEN
        EXECUTE IMMEDIATE 'CREATE SEQUENCE "REQM_SPEC_SEQ"  MINVALUE 1 MAXVALUE 999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE';
    END IF;
END;
/
DECLARE
  TRIGGERCHECKERFLAG INT;
BEGIN
    SELECT COUNT(*)  INTO TRIGGERCHECKERFLAG FROM all_triggers WHERE OWNER = sys_context('userenv', 'current_schema') AND trigger_name = UPPER('REQM_SPEC_INSERT');
    IF TRIGGERCHECKERFLAG = 0 THEN
        EXECUTE IMMEDIATE 'CREATE OR REPLACE TRIGGER  "REQM_SPEC_INSERT" BEFORE INSERT ON REQM_SPECIFICATION FOR EACH ROW BEGIN SELECT REQM_SPEC_SEQ.NEXTVAL INTO :new.SPEC_ID FROM DUAL; END;';
        EXECUTE IMMEDIATE 'ALTER TRIGGER  "REQM_SPEC_INSERT" ENABLE';
    END IF;
END;
/
DECLARE
TABLECHECKERFLAG INT;
BEGIN
    SELECT COUNT(*) INTO TABLECHECKERFLAG FROM ALL_TABLES WHERE OWNER = sys_context( 'userenv', 'current_schema' ) AND TABLE_NAME = UPPER('REQM_ARTIFACT');
    IF TABLECHECKERFLAG = 0 THEN
    EXECUTE IMMEDIATE 'CREATE TABLE "REQM_ARTIFACT" (
    "ARTIFACT_ID" NUMBER NOT NULL,
    "SPEC_TEMPLATE_ID" NUMBER NOT NULL,
    "ARTIFACT_NAME" VARCHAR2(250) NOT NULL,
 "ARTIFACT_DESCRIPTION" VARCHAR2(4000) NULL ,
 "PARENT_ARTIFACT_ID"  NUMBER  DEFAULT -1 NOT NULL ,
 "TREE_NODE_POLICY" NUMBER NOT NULL ,
  "MTD_ID" NUMBER NOT NULL ,
  "SUPPORT_DOCUMENT_UPLOAD" CHAR(1) DEFAULT ''N'' NOT NULL  ,
    ENABLE_DESCRIPTION CHAR(1) DEFAULT ''N'' NOT NULL,
    CONSTRAINT REQM_ARTIFACT_ID PRIMARY KEY(ARTIFACT_ID) ,
    CONSTRAINT FK_REQM_ARTIFACT_SPEC_TEMP_ID FOREIGN KEY(SPEC_TEMPLATE_ID) REFERENCES REQM_SPECIFICATION_TEMPLATE(SPEC_TEMPLATE_ID) ON DELETE CASCADE,
    CONSTRAINT UK_REQM_ARTIFACT_NAME UNIQUE (SPEC_TEMPLATE_ID ,ARTIFACT_NAME, PARENT_ARTIFACT_ID)
  )';
    END IF;
END;
/
DECLARE
   SEQUENCECHECKERFLAG INT;
BEGIN
    SELECT COUNT(*) INTO SEQUENCECHECKERFLAG FROM ALL_SEQUENCES WHERE SEQUENCE_OWNER = sys_context('userenv', 'current_schema') AND SEQUENCE_NAME = UPPER('REQM_ART_SEQ');
    IF SEQUENCECHECKERFLAG = 0 THEN
        EXECUTE IMMEDIATE 'CREATE SEQUENCE "REQM_ART_SEQ"  MINVALUE 1 MAXVALUE 999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE';
    END IF;
END;
/
DECLARE
  TRIGGERCHECKERFLAG INT;
BEGIN
    SELECT COUNT(*)  INTO TRIGGERCHECKERFLAG FROM all_triggers WHERE OWNER = sys_context('userenv', 'current_schema') AND trigger_name = UPPER('REQM_ART_INSERT');
    IF TRIGGERCHECKERFLAG = 0 THEN
        EXECUTE IMMEDIATE 'CREATE OR REPLACE TRIGGER  "REQM_ART_INSERT" BEFORE INSERT ON REQM_ARTIFACT FOR EACH ROW BEGIN SELECT REQM_ART_SEQ.NEXTVAL INTO :new.ARTIFACT_ID FROM DUAL; END;';
        EXECUTE IMMEDIATE 'ALTER TRIGGER  "REQM_ART_INSERT" ENABLE';
    END IF;
END;
/
DECLARE
TABLECHECKERFLAG INT;
BEGIN
    SELECT COUNT(*) INTO TABLECHECKERFLAG FROM ALL_TABLES WHERE OWNER = sys_context( 'userenv', 'current_schema' ) AND TABLE_NAME = UPPER('REQM_SPECIFICATION_ARTIFACT');
    IF TABLECHECKERFLAG = 0 THEN
    EXECUTE IMMEDIATE 'CREATE TABLE "REQM_SPECIFICATION_ARTIFACT" (
    "SPEC_ARTIFACT_ID" NUMBER NOT NULL,
    "SPEC_ID" NUMBER NOT NULL,
    "ARTIFACT_ID" NUMBER NOT NULL,
    "SPEC_ARTIFACT_NAME" VARCHAR2(250) NOT NULL,
    DESCRIPTION VARCHAR(4000),
   CONSTRAINT REQM_SPEC_ARTIFACT_ID PRIMARY KEY(SPEC_ARTIFACT_ID),
   CONSTRAINT FK_REQM_SPEC_ID FOREIGN KEY(SPEC_ID) REFERENCES  REQM_SPECIFICATION(SPEC_ID) ON DELETE CASCADE ,
   CONSTRAINT FK_REQM_ARTIFACT_ID FOREIGN KEY(ARTIFACT_ID) REFERENCES REQM_ARTIFACT(ARTIFACT_ID),
   CONSTRAINT UK_REQM_SPEC_ARTIFACT_NAME UNIQUE (SPEC_ID,ARTIFACT_ID,SPEC_ARTIFACT_NAME))
   ';
    END IF;
END;
/
DECLARE
   SEQUENCECHECKERFLAG INT;
BEGIN
    SELECT COUNT(*) INTO SEQUENCECHECKERFLAG FROM ALL_SEQUENCES WHERE SEQUENCE_OWNER = sys_context('userenv', 'current_schema') AND SEQUENCE_NAME = UPPER('REQM_SPEC_ART_SEQ');
    IF SEQUENCECHECKERFLAG = 0 THEN
        EXECUTE IMMEDIATE 'CREATE SEQUENCE "REQM_SPEC_ART_SEQ"  MINVALUE 1 MAXVALUE 999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE';
    END IF;
END;
/
DECLARE
  TRIGGERCHECKERFLAG INT;
BEGIN
    SELECT COUNT(*)  INTO TRIGGERCHECKERFLAG FROM all_triggers WHERE OWNER = sys_context('userenv', 'current_schema') AND trigger_name = UPPER('REQM_SPEC_ART_INSERT');
    IF TRIGGERCHECKERFLAG = 0 THEN
        EXECUTE IMMEDIATE 'CREATE OR REPLACE TRIGGER  "REQM_SPEC_ART_INSERT" BEFORE INSERT ON REQM_SPECIFICATION_ARTIFACT FOR EACH ROW BEGIN SELECT REQM_SPEC_ART_SEQ.NEXTVAL INTO :new.SPEC_ARTIFACT_ID FROM DUAL; END;';
        EXECUTE IMMEDIATE 'ALTER TRIGGER  "REQM_SPEC_ART_INSERT" ENABLE';
    END IF;
END;
/
DECLARE
TABLECHECKERFLAG INT;
BEGIN
SELECT COUNT(*) INTO TABLECHECKERFLAG FROM ADS_KEY_VALUE_OBJECTS WHERE  OBJECT_TYPE = 'REQM_PROJECT';
IF TABLECHECKERFLAG = 0 THEN
INSERT ALL
INTO ADS_KEY_VALUE_OBJECTS (OBJECT_TYPE,OBJECT_TABLE,OBJECT_TABLE_COLUMN,OBJECT_PARENT_TYPE,OBJECT_PARENT_COLUMN_ID) VALUES
(
 'REQM_PROJECT','REQM_PROJECT','PROJECT_ID','',''
)
INTO ADS_KEY_VALUE_OBJECTS (OBJECT_TYPE,OBJECT_TABLE,OBJECT_TABLE_COLUMN,OBJECT_PARENT_TYPE,OBJECT_PARENT_COLUMN_ID) VALUES
(
 'REQM_SUBJECT','REQM_SUBJECT','SUBJECT_ID','REQM_PROJECT','PROJECT_ID'
)
INTO ADS_KEY_VALUE_OBJECTS (OBJECT_TYPE,OBJECT_TABLE,OBJECT_TABLE_COLUMN,OBJECT_PARENT_TYPE,OBJECT_PARENT_COLUMN_ID) VALUES
(
 'REQM_SPECIFICATION','REQM_SPECIFICATION','SPEC_ID','',''
)
INTO ADS_KEY_VALUE_OBJECTS (OBJECT_TYPE,OBJECT_TABLE,OBJECT_TABLE_COLUMN,OBJECT_PARENT_TYPE,OBJECT_PARENT_COLUMN_ID) VALUES
(
 'REQM_SPECIFICATION_TEMPLATE','REQM_SPECIFICATION_TEMPLATE','SPEC_TEMPLATE_ID','',''
)
INTO ADS_KEY_VALUE_OBJECTS (OBJECT_TYPE,OBJECT_TABLE,OBJECT_TABLE_COLUMN,OBJECT_PARENT_TYPE,OBJECT_PARENT_COLUMN_ID) VALUES
(
 'REQM_ARTIFACT','REQM_ARTIFACT','ARTIFACT_ID','REQM_SPECIFICATION_TEMPLATE','SPEC_TEMPLATE_ID'
)
INTO ADS_KEY_VALUE_OBJECTS (OBJECT_TYPE,OBJECT_TABLE,OBJECT_TABLE_COLUMN,OBJECT_PARENT_TYPE,OBJECT_PARENT_COLUMN_ID) VALUES
(
 'REQM_SPECIFICATION_ARTIFACT','REQM_SPECIFICATION_ARTIFACT','SPEC_ARTIFACT_ID','',''
)
SELECT * FROM DUAL;
END IF;
END;
/

DECLARE
   TABLECHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO TABLECHECKERFLAG FROM ALL_OBJECTS WHERE OWNER = sys_context('userenv', 'current_schema') AND OBJECT_TYPE = 'FUNCTION' AND OBJECT_NAME = UPPER('SPEC_COUNT');
   IF TABLECHECKERFLAG = 1 THEN
      EXECUTE IMMEDIATE 'DROP FUNCTION SPEC_COUNT';
   END IF;
END;
/

CREATE OR REPLACE FUNCTION SPEC_COUNT(v_SUBJECT_ID IN NUMBER,V_STATUS_FLAG in varchar2 )     RETURN NUMBER   AS     V_SPEC_COUNT   NUMBER;
V_CHILD_COUNT NUMBER:=0;
CURSOR c1_childs(p_subject_id NUMBER)     IS       SELECT subject_id FROM REQM_SUBJECT
WHERE parent_subject_id = p_subject_id;
BEGIN     BEGIN       SELECT COUNT(*)       INTO V_spec_COUNT       FROM REQM_SPECIFICATION A1 WHERE A1.STATUS = V_STATUS_FLAG AND
 A1.SUBJECT_ID      = V_SUBJECT_ID;
EXCEPTION     WHEN OTHERS THEN       v_spec_count := 0;     END;
FOR R1_CHILDS IN C1_CHILDS(V_SUBJECT_ID)     LOOP
v_child_count := v_child_count + spec_count(r1_childs.subject_id,V_STATUS_FLAG);     END LOOP;
RETURN (V_CHILD_COUNT + V_SPEC_COUNT);   END SPEC_COUNT;
/

DECLARE
   TABLECHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO TABLECHECKERFLAG FROM "REQM_SPECIFICATION_TEMPLATE" where SPEC_TEMPLATE_NAME = 'Default';
   IF TABLECHECKERFLAG = 0 THEN

  INSERT INTO REQM_SPECIFICATION_TEMPLATE (SPEC_TEMPLATE_NAME,SPEC_TEMPLATE_DESCRIPTION,SYSTEM_BASED)
  (SELECT 'Default', 'Default Template', '1' FROM DUAL);

   INSERT INTO RM_HISTORY
           (HISTORYTYPEID ,HISTORYDESC ,OBJECTID ,OBJECTTYPEID ,HISTORYDATESTAMP ,USER_ID)
  (SELECT 1 ,  (SELECT '{ specificationTemplateId: '  ||  SPEC_TEMPLATE_ID  || ', specificationTemplateName: Default, description: Default Template, isSystemBased: true }' FROM REQM_SPECIFICATION_TEMPLATE WHERE SPEC_TEMPLATE_NAME= 'Default' AND SYSTEM_BASED = 1)
           , (select  SPEC_TEMPLATE_ID from REQM_SPECIFICATION_TEMPLATE where SPEC_TEMPLATE_NAME= 'Default' and  SYSTEM_BASED = 1)
           ,(select OBJECT_TYPE_ID from ADS_KEY_VALUE_OBJECTS where OBJECT_TYPE = 'REQM_SPECIFICATION_TEMPLATE' and OBJECT_TABLE = 'REQM_SPECIFICATION_TEMPLATE')
           ,CURRENT_TIMESTAMP,'Administrator'
            FROM DUAL);

 END IF;
END;
/
-- DECLARE
--    TABLECHECKERFLAG INT;
-- BEGIN
--    SELECT COUNT(*) INTO TABLECHECKERFLAG FROM ALL_TABLES WHERE OWNER = sys_context( 'userenv', 'current_schema' ) AND TABLE_NAME = UPPER('CAT_WORKFLOW_SCRIPTS');
--    IF TABLECHECKERFLAG = 0 THEN
--        EXECUTE IMMEDIATE 'CREATE TABLE CAT_WORKFLOW_SCRIPTS
--         (
--             SCRIPT_ID INT,
--             CAT_ID INT ,
--             SCRIPT_NAME VARCHAR2(20),
--             CONSTRAINT PK_WORK_SCRIPT_ID PRIMARY KEY (SCRIPT_ID),
--             CONSTRAINT FK_WORK_SCRIPT_CAT_ID FOREIGN KEY(CAT_ID) REFERENCES CAT_TEMPLATES(CAT_ID) ON DELETE CASCADE
--         )';
--        END IF;
-- END;
-- /
-- DECLARE
--    SEQUENCECHECKERFLAG INT;
-- BEGIN
--     SELECT COUNT(*) INTO SEQUENCECHECKERFLAG FROM ALL_SEQUENCES WHERE SEQUENCE_OWNER = sys_context('userenv', 'current_schema') AND SEQUENCE_NAME = UPPER('CAT_WORKFLOW_SCRIPTS_SEQ');
--    IF SEQUENCECHECKERFLAG = 0 THEN
--       EXECUTE IMMEDIATE 'CREATE SEQUENCE   "CAT_WORKFLOW_SCRIPTS_SEQ"  MINVALUE 1 MAXVALUE 999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE';
--    END IF;
-- END;
-- /
-- DECLARE
--   TRIGGERCHECKERFLAG INT;
-- BEGIN
--   SELECT COUNT(*)
--   INTO TRIGGERCHECKERFLAG
--   FROM all_triggers
--   WHERE trigger_name = UPPER('CAT_WORKFLOW_SCRIPTS_INSERT');
--   IF TRIGGERCHECKERFLAG = 0 THEN
--     EXECUTE IMMEDIATE 'CREATE OR REPLACE TRIGGER  "CAT_WORKFLOW_SCRIPTS_INSERT" BEFORE INSERT ON CAT_WORKFLOW_SCRIPTS FOR EACH ROW BEGIN SELECT CAT_WORKFLOW_SCRIPTS_SEQ.NEXTVAL INTO :new.SCRIPT_ID FROM DUAL; END;';
--     EXECUTE IMMEDIATE 'ALTER TRIGGER  "CAT_WORKFLOW_SCRIPTS_INSERT" ENABLE';
--   END IF;
-- END;
-- /
DECLARE
   COLUMNCHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO COLUMNCHECKERFLAG FROM ALL_TAB_COLUMNS WHERE  OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME = UPPER('MAPPING_SPECIFICATION') AND COLUMN_NAME=UPPER('USER_DEFINITION11');
   IF COLUMNCHECKERFLAG = 0 THEN
	  EXECUTE IMMEDIATE 'ALTER TABLE MAPPING_SPECIFICATION ADD USER_DEFINITION11 VARCHAR2(4000) NULL';
	  EXECUTE IMMEDIATE 'ALTER TABLE MAPPING_SPECIFICATION ADD USER_DEFINITION12 VARCHAR2(4000) NULL';
	  EXECUTE IMMEDIATE 'ALTER TABLE MAPPING_SPECIFICATION ADD USER_DEFINITION13 VARCHAR2(4000) NULL';
	  EXECUTE IMMEDIATE 'ALTER TABLE MAPPING_SPECIFICATION ADD USER_DEFINITION14 VARCHAR2(4000) NULL';
	  EXECUTE IMMEDIATE 'ALTER TABLE MAPPING_SPECIFICATION ADD USER_DEFINITION15 VARCHAR2(4000) NULL';
	  EXECUTE IMMEDIATE 'ALTER TABLE MAPPING_SPECIFICATION ADD USER_DEFINITION16 VARCHAR2(4000) NULL';
	  EXECUTE IMMEDIATE 'ALTER TABLE MAPPING_SPECIFICATION ADD USER_DEFINITION17 VARCHAR2(4000) NULL';
	  EXECUTE IMMEDIATE 'ALTER TABLE MAPPING_SPECIFICATION ADD USER_DEFINITION18 VARCHAR2(4000) NULL';
	  EXECUTE IMMEDIATE 'ALTER TABLE MAPPING_SPECIFICATION ADD USER_DEFINITION19 VARCHAR2(4000) NULL';
	  EXECUTE IMMEDIATE 'ALTER TABLE MAPPING_SPECIFICATION ADD USER_DEFINITION20 VARCHAR2(4000) NULL';
	  EXECUTE IMMEDIATE 'ALTER TABLE MAPPING_SPECIFICATION ADD USER_DEFINITION21 VARCHAR2(4000) NULL';
	  EXECUTE IMMEDIATE 'ALTER TABLE MAPPING_SPECIFICATION ADD USER_DEFINITION22 VARCHAR2(4000) NULL';
	  EXECUTE IMMEDIATE 'ALTER TABLE MAPPING_SPECIFICATION ADD USER_DEFINITION23 VARCHAR2(4000) NULL';
	  EXECUTE IMMEDIATE 'ALTER TABLE MAPPING_SPECIFICATION ADD USER_DEFINITION24 VARCHAR2(4000) NULL';
	  EXECUTE IMMEDIATE 'ALTER TABLE MAPPING_SPECIFICATION ADD USER_DEFINITION25 VARCHAR2(4000) NULL';
	  EXECUTE IMMEDIATE 'ALTER TABLE MAPPING_SPECIFICATION ADD USER_DEFINITION26 VARCHAR2(4000) NULL';
	  EXECUTE IMMEDIATE 'ALTER TABLE MAPPING_SPECIFICATION ADD USER_DEFINITION27 VARCHAR2(4000) NULL';
	  EXECUTE IMMEDIATE 'ALTER TABLE MAPPING_SPECIFICATION ADD USER_DEFINITION28 VARCHAR2(4000) NULL';
	  EXECUTE IMMEDIATE 'ALTER TABLE MAPPING_SPECIFICATION ADD USER_DEFINITION29 VARCHAR2(4000) NULL';
	  EXECUTE IMMEDIATE 'ALTER TABLE MAPPING_SPECIFICATION ADD USER_DEFINITION30 VARCHAR2(4000) NULL';
	  EXECUTE IMMEDIATE 'ALTER TABLE MAPPING_SPECIFICATION ADD USER_DEFINITION31 VARCHAR2(4000) NULL';
	  EXECUTE IMMEDIATE 'ALTER TABLE MAPPING_SPECIFICATION ADD USER_DEFINITION32 VARCHAR2(4000) NULL';
	  EXECUTE IMMEDIATE 'ALTER TABLE MAPPING_SPECIFICATION ADD USER_DEFINITION33 VARCHAR2(4000) NULL';
	  EXECUTE IMMEDIATE 'ALTER TABLE MAPPING_SPECIFICATION ADD USER_DEFINITION34 VARCHAR2(4000) NULL';
	  EXECUTE IMMEDIATE 'ALTER TABLE MAPPING_SPECIFICATION ADD USER_DEFINITION35 VARCHAR2(4000) NULL';
	  EXECUTE IMMEDIATE 'ALTER TABLE MAPPING_SPECIFICATION ADD USER_DEFINITION36 VARCHAR2(4000) NULL';
	  EXECUTE IMMEDIATE 'ALTER TABLE MAPPING_SPECIFICATION ADD USER_DEFINITION37 VARCHAR2(4000) NULL';
	  EXECUTE IMMEDIATE 'ALTER TABLE MAPPING_SPECIFICATION ADD USER_DEFINITION38 VARCHAR2(4000) NULL';
	  EXECUTE IMMEDIATE 'ALTER TABLE MAPPING_SPECIFICATION ADD USER_DEFINITION39 VARCHAR2(4000) NULL';
	  EXECUTE IMMEDIATE 'ALTER TABLE MAPPING_SPECIFICATION ADD USER_DEFINITION40 VARCHAR2(4000) NULL';
	  EXECUTE IMMEDIATE 'ALTER TABLE MAPPING_SPECIFICATION ADD USER_DEFINITION41 VARCHAR2(4000) NULL';
	  EXECUTE IMMEDIATE 'ALTER TABLE MAPPING_SPECIFICATION ADD USER_DEFINITION42 VARCHAR2(4000) NULL';
	  EXECUTE IMMEDIATE 'ALTER TABLE MAPPING_SPECIFICATION ADD USER_DEFINITION43 VARCHAR2(4000) NULL';
	  EXECUTE IMMEDIATE 'ALTER TABLE MAPPING_SPECIFICATION ADD USER_DEFINITION44 VARCHAR2(4000) NULL';
	  EXECUTE IMMEDIATE 'ALTER TABLE MAPPING_SPECIFICATION ADD USER_DEFINITION45 VARCHAR2(4000) NULL';
	  EXECUTE IMMEDIATE 'ALTER TABLE MAPPING_SPECIFICATION ADD USER_DEFINITION46 VARCHAR2(4000) NULL';
	  EXECUTE IMMEDIATE 'ALTER TABLE MAPPING_SPECIFICATION ADD USER_DEFINITION47 VARCHAR2(4000) NULL';
	  EXECUTE IMMEDIATE 'ALTER TABLE MAPPING_SPECIFICATION ADD USER_DEFINITION48 VARCHAR2(4000) NULL';
	  EXECUTE IMMEDIATE 'ALTER TABLE MAPPING_SPECIFICATION ADD USER_DEFINITION49 VARCHAR2(4000) NULL';
	  EXECUTE IMMEDIATE 'ALTER TABLE MAPPING_SPECIFICATION ADD USER_DEFINITION50 VARCHAR2(4000) NULL';
   END IF;
END;
/
DECLARE
VERSIONCHECKERFLAG INT;
BEGIN
SELECT COUNT(*) INTO VERSIONCHECKERFLAG FROM ADS_MM_VERSION WHERE VALUE <= '7.1';
    IF VERSIONCHECKERFLAG = 1 THEN
    EXECUTE IMMEDIATE 'UPDATE USER_PREFERENCES SET COLUMN_PREFERENCES = COLUMN_PREFERENCES || '',UserDefinition11:0,UserDefinition12:0,UserDefinition13:0,UserDefinition14:0,UserDefinition15:0,UserDefinition16:0,UserDefinition17:0,UserDefinition18:0,UserDefinition19:0,UserDefinition20:0,UserDefinition21:0,UserDefinition22:0,UserDefinition23:0,UserDefinition24:0,UserDefinition25:0,UserDefinition26:0,UserDefinition27:0,UserDefinition28:0,UserDefinition29:0,UserDefinition30:0,UserDefinition31:0,UserDefinition32:0,UserDefinition33:0,UserDefinition34:0,UserDefinition35:0,UserDefinition36:0,UserDefinition37:0,UserDefinition38:0,UserDefinition39:0,UserDefinition40:0,UserDefinition41:0,UserDefinition42:0,UserDefinition43:0,UserDefinition44:0,UserDefinition45:0,UserDefinition46:0,UserDefinition47:0,UserDefinition48:0,UserDefinition49:0,UserDefinition50:0,SpecificationArtifacts:0'' WHERE USER_ID like ''HEADER_ORDER_PREFERENCE_%''';
    EXECUTE IMMEDIATE 'UPDATE USER_PREFERENCES SET COLUMN_PREFERENCES = COLUMN_PREFERENCES || '',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,'' WHERE USER_ID LIKE ''HEADER_VISIBILITY_PREFERENCE_%''';
   END IF;
END;
/
DECLARE
   TABLECHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO TABLECHECKERFLAG FROM "ADS_MODULES" WHERE MODULE_KEY = 'com.ads.mm.permission.rqm';
   IF TABLECHECKERFLAG = 0 THEN
        INSERT INTO ADS_MODULES(MODULE_ID, MODULE_NAME, MODULE_KEY, MODULE_ORDER, MODULE_FORWARD)
        (SELECT 11, 'Requirements Manager', 'com.ads.mm.permission.rqm', 11, 'requirementsmanager' FROM DUAL);
    END IF;
END;
/
DECLARE
   COLUMNCHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO COLUMNCHECKERFLAG FROM ALL_TAB_COLUMNS WHERE  OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME = UPPER('SYSTEM_TABLE_COLUMNS_METADATA') AND COLUMN_NAME=UPPER('FK_TABLE_NAME') AND DATA_LENGTH=UPPER('50');
   IF COLUMNCHECKERFLAG = 1 THEN
      EXECUTE IMMEDIATE 'ALTER TABLE SYSTEM_TABLE_COLUMNS_METADATA MODIFY (FK_TABLE_NAME VARCHAR2(250))';
   END IF;
END;
/
DECLARE
TABLECHECKERFLAG INT;
BEGIN
    SELECT COUNT(*) INTO TABLECHECKERFLAG FROM ADS_KEY_VALUE_OBJECTS WHERE  OBJECT_TYPE = 'MM_GRAPHICAL_PROPERTIES';
    IF TABLECHECKERFLAG = 0 THEN
        EXECUTE IMMEDIATE 'INSERT INTO ADS_KEY_VALUE_OBJECTS (OBJECT_TYPE,OBJECT_TABLE,OBJECT_TABLE_COLUMN,OBJECT_PARENT_TYPE,OBJECT_PARENT_COLUMN_ID) VALUES (''MM_GRAPHICAL_PROPERTIES'',''MM_GRAPHICAL_PROPERTIES'',''MAP_ID'','''','''')';
    END IF;
END;
/
DECLARE
   TABLECHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO TABLECHECKERFLAG FROM ALL_TABLES WHERE OWNER = sys_context( 'userenv', 'current_schema' ) AND TABLE_NAME = UPPER('REPM_CATEGORY');
   IF TABLECHECKERFLAG = 0 THEN
        EXECUTE IMMEDIATE 'CREATE TABLE  "REPM_CATEGORY" ("CATEGORY_ID" NUMBER NOT NULL ,
            "CATEGORY_NAME" VARCHAR2(300) NOT NULL ,
            "DESCRIPTION" VARCHAR2(4000),
            "PARENT_CATEGORY_ID" NUMBER NOT NULL,
            CONSTRAINT "UK_REPM_CATEGORY_CIDCN"  UNIQUE(CATEGORY_ID,CATEGORY_NAME),
            CONSTRAINT "PK_REPM_CATEGORY_CID" PRIMARY KEY(CATEGORY_ID))';
    END IF;
END;
/
DECLARE
   SEQUENCECHECKERFLAG INT;
BEGIN
    SELECT COUNT(*) INTO SEQUENCECHECKERFLAG FROM ALL_SEQUENCES WHERE SEQUENCE_OWNER = sys_context('userenv', 'current_schema') AND SEQUENCE_NAME = UPPER('REPM_CATEGORY_SEQ');
    IF SEQUENCECHECKERFLAG = 0 THEN
        EXECUTE IMMEDIATE 'CREATE SEQUENCE "REPM_CATEGORY_SEQ"  MINVALUE 1 MAXVALUE 999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE';
    END IF;
END;
/
DECLARE
  TRIGGERCHECKERFLAG INT;
BEGIN
  SELECT COUNT(*)  INTO TRIGGERCHECKERFLAG FROM all_triggers WHERE OWNER = sys_context('userenv', 'current_schema') AND trigger_name = UPPER('REPM_CATEGORY_INSERT');
  IF TRIGGERCHECKERFLAG = 0 THEN
    EXECUTE IMMEDIATE 'CREATE OR REPLACE TRIGGER  "REPM_CATEGORY_INSERT" BEFORE INSERT ON REPM_CATEGORY FOR EACH ROW BEGIN SELECT REPM_CATEGORY_SEQ.NEXTVAL INTO :new.CATEGORY_ID FROM DUAL; END;';
    EXECUTE IMMEDIATE 'ALTER TRIGGER  "REPM_CATEGORY_INSERT" ENABLE';
  END IF;
END;
/
DECLARE
   TABLECHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO TABLECHECKERFLAG FROM ALL_TABLES WHERE OWNER = sys_context( 'userenv', 'current_schema' ) AND TABLE_NAME = UPPER('REPM_REPORTS');
   IF TABLECHECKERFLAG = 0 THEN
    EXECUTE IMMEDIATE 'CREATE TABLE  "REPM_REPORTS" ("REPORT_ID" NUMBER NOT NULL ,
        "REPORT_NAME" VARCHAR2(300) NOT NULL ,
        "DESCRIPTION" VARCHAR2(4000),
        "PUBLIC_ACCESS" CHAR DEFAULT ''0'' NOT NULL,
        "CATEGORY_ID" NUMBER NOT NULL,
        CONSTRAINT "UK_REPM_REPORTS_CIDRN" UNIQUE(CATEGORY_ID,REPORT_NAME),
        CONSTRAINT "FK_REPM_REPORTS_CAT_ID" FOREIGN KEY(CATEGORY_ID) REFERENCES REPM_CATEGORY(CATEGORY_ID) ON DELETE CASCADE,
        CONSTRAINT "PK_REPM_REPORTS_RID" PRIMARY KEY(REPORT_ID))';
    END IF;
END;
/

DECLARE
   SEQUENCECHECKERFLAG INT;
BEGIN
    SELECT COUNT(*) INTO SEQUENCECHECKERFLAG FROM ALL_SEQUENCES WHERE SEQUENCE_OWNER = sys_context('userenv', 'current_schema') AND SEQUENCE_NAME = UPPER('REPM_REPORTS_SEQ');
   IF SEQUENCECHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'CREATE SEQUENCE "REPM_REPORTS_SEQ"  MINVALUE 1 MAXVALUE 999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE';
   END IF;
END;
/
DECLARE
  TRIGGERCHECKERFLAG INT;
BEGIN
  SELECT COUNT(*)  INTO TRIGGERCHECKERFLAG FROM all_triggers WHERE OWNER = sys_context('userenv', 'current_schema') AND trigger_name = UPPER('REPM_REPORTS_INSERT');
  IF TRIGGERCHECKERFLAG = 0 THEN
    EXECUTE IMMEDIATE 'CREATE OR REPLACE TRIGGER  "REPM_REPORTS_INSERT" BEFORE INSERT ON REPM_REPORTS FOR EACH ROW BEGIN SELECT REPM_REPORTS_SEQ.NEXTVAL INTO :new.REPORT_ID FROM DUAL; END;';
    EXECUTE IMMEDIATE 'ALTER TRIGGER  "REPM_REPORTS_INSERT" ENABLE';
  END IF;
END;
/
DECLARE
   TABLECHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO TABLECHECKERFLAG FROM ALL_TABLES WHERE OWNER = sys_context( 'userenv', 'current_schema' ) AND TABLE_NAME = UPPER('REPM_CHARTS');
   IF TABLECHECKERFLAG = 0 THEN
    EXECUTE IMMEDIATE 'CREATE TABLE  "REPM_CHARTS" ("CHART_ID" NUMBER NOT NULL ,
        "CHART_NAME" VARCHAR2(300) NOT NULL ,
        "DESCRIPTION" VARCHAR2(4000),
        "CHART_QUERY" VARCHAR2(4000),
        "CHART_TYPE"  VARCHAR2(100) NOT  NULL,
        "CHART_COLORS"  VARCHAR2(500) NULL  ,
        "PUBLIC_ACCESS" CHAR DEFAULT ''0'' NOT NULL,
        "CATEGORY_ID" NUMBER NOT NULL,
        CONSTRAINT "UK_REPM_CHARTS_CIDCN" UNIQUE(CATEGORY_ID,CHART_NAME),
        CONSTRAINT "FK_REPM_CHARTS_CAT_ID" FOREIGN KEY(CATEGORY_ID) REFERENCES REPM_CATEGORY(CATEGORY_ID) ON DELETE CASCADE,
        CONSTRAINT "PK_REPM_CHARTS_CID" PRIMARY KEY(CHART_ID))';
    END IF;
END;
/

DECLARE
   SEQUENCECHECKERFLAG INT;
BEGIN
    SELECT COUNT(*) INTO SEQUENCECHECKERFLAG FROM ALL_SEQUENCES WHERE SEQUENCE_OWNER = sys_context('userenv', 'current_schema') AND SEQUENCE_NAME = UPPER('REPM_CHARTS_SEQ');
   IF SEQUENCECHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'CREATE SEQUENCE "REPM_CHARTS_SEQ"  MINVALUE 1 MAXVALUE 999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE';
   END IF;
END;
/
DECLARE
  TRIGGERCHECKERFLAG INT;
BEGIN
  SELECT COUNT(*)  INTO TRIGGERCHECKERFLAG FROM all_triggers WHERE OWNER = sys_context('userenv', 'current_schema') AND trigger_name = UPPER('REPM_CHARTS_INSERT');
  IF TRIGGERCHECKERFLAG = 0 THEN
    EXECUTE IMMEDIATE 'CREATE OR REPLACE TRIGGER  "REPM_CHARTS_INSERT" BEFORE INSERT ON REPM_CHARTS FOR EACH ROW BEGIN SELECT REPM_CHARTS_SEQ.NEXTVAL INTO :new.CHART_ID FROM DUAL; END;';
    EXECUTE IMMEDIATE 'ALTER TRIGGER  "REPM_CHARTS_INSERT" ENABLE';
  END IF;
END;
/
DECLARE
   TABLECHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO TABLECHECKERFLAG FROM ALL_TABLES WHERE OWNER = sys_context( 'userenv', 'current_schema' ) AND TABLE_NAME = UPPER('REPM_DASHBOARDS');
   IF TABLECHECKERFLAG = 0 THEN
    EXECUTE IMMEDIATE 'CREATE TABLE  "REPM_DASHBOARDS" ("DASHBOARD_ID" NUMBER NOT NULL ,
        "DASHBOARD_NAME" VARCHAR2(300) NOT NULL ,
	"DESCRIPTION" VARCHAR2(4000),
        "PUBLIC_ACCESS" CHAR DEFAULT ''0'' NOT NULL,
        "CATEGORY_ID" NUMBER NOT NULL,
        CONSTRAINT "UK_REPM_DASHBOARDS_CIDDN" UNIQUE(CATEGORY_ID,DASHBOARD_NAME),
        CONSTRAINT "FK_REPM_DASHBOARDS_CAT_ID" FOREIGN KEY(CATEGORY_ID) REFERENCES REPM_CATEGORY(CATEGORY_ID) ON DELETE CASCADE,
        CONSTRAINT "PK_REPM_DASHBOARDS_DID" PRIMARY KEY(DASHBOARD_ID))';
    END IF;
END;
/
DECLARE
   SEQUENCECHECKERFLAG INT;
BEGIN
    SELECT COUNT(*) INTO SEQUENCECHECKERFLAG FROM ALL_SEQUENCES WHERE SEQUENCE_OWNER = sys_context('userenv', 'current_schema') AND SEQUENCE_NAME = UPPER('REPM_DASHBOARDS_SEQ');
   IF SEQUENCECHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'CREATE SEQUENCE "REPM_DASHBOARDS_SEQ"  MINVALUE 1 MAXVALUE 999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE';
   END IF;
END;
/
DECLARE
  TRIGGERCHECKERFLAG INT;
BEGIN
  SELECT COUNT(*)  INTO TRIGGERCHECKERFLAG FROM all_triggers WHERE OWNER = sys_context('userenv', 'current_schema') AND trigger_name = UPPER('REPM_DASHBOARDS_INSERT');
  IF TRIGGERCHECKERFLAG = 0 THEN
    EXECUTE IMMEDIATE 'CREATE OR REPLACE TRIGGER  "REPM_DASHBOARDS_INSERT" BEFORE INSERT ON REPM_DASHBOARDS FOR EACH ROW BEGIN SELECT REPM_DASHBOARDS_SEQ.NEXTVAL INTO :new.DASHBOARD_ID FROM DUAL; END;';
    EXECUTE IMMEDIATE 'ALTER TRIGGER  "REPM_DASHBOARDS_INSERT" ENABLE';
  END IF;
END;
/
DECLARE
   TABLECHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO TABLECHECKERFLAG FROM ALL_TABLES WHERE OWNER = sys_context( 'userenv', 'current_schema' ) AND TABLE_NAME = UPPER('REPM_DASHBAORD_COMPONENT');
   IF TABLECHECKERFLAG = 0 THEN
    EXECUTE IMMEDIATE 'CREATE TABLE  "REPM_DASHBAORD_COMPONENT" ("DASHBOARD_ID" NUMBER NOT NULL ,
	"OBJECT_TYPE_ID" NUMBER NOT NULL,
        "OBJECT_ID" NUMBER NOT NULL,
        CONSTRAINT "FK_REPM_DB_CNT_OTID" FOREIGN KEY(OBJECT_TYPE_ID) REFERENCES ADS_KEY_VALUE_OBJECTS(OBJECT_TYPE_ID),
        CONSTRAINT "FK_REPM_DB_CNT_DID" FOREIGN KEY(DASHBOARD_ID) REFERENCES REPM_DASHBOARDS(DASHBOARD_ID) ON DELETE CASCADE)';
    END IF;
END;
/
DECLARE
   TABLECHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO TABLECHECKERFLAG FROM ALL_TABLES WHERE OWNER = sys_context( 'userenv', 'current_schema' ) AND TABLE_NAME = UPPER('REPM_COLOR_PALLETTE');
   IF TABLECHECKERFLAG = 0 THEN
    EXECUTE IMMEDIATE 'CREATE TABLE  "REPM_COLOR_PALLETTE" ("COLOR_PALLETTE_ID" NUMBER NOT NULL ,
	"COLOR_PALLETTE_NAME" VARCHAR2(250) NOT NULL ,
        "COLOR_PALLETTE_DATA" VARCHAR2(1000) NULL,
        "COLOR_PALLETTE_THUMBNAIL" BLOB NULL,
        CONSTRAINT "PK_REPM_CP_CPID" PRIMARY KEY(COLOR_PALLETTE_ID))';
    END IF;
END;
/
DECLARE
   SEQUENCECHECKERFLAG INT;
BEGIN
    SELECT COUNT(*) INTO SEQUENCECHECKERFLAG FROM ALL_SEQUENCES WHERE SEQUENCE_OWNER = sys_context('userenv', 'current_schema') AND SEQUENCE_NAME = UPPER('REPM_COLOR_PALLETTE_SEQ');
   IF SEQUENCECHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'CREATE SEQUENCE "REPM_COLOR_PALLETTE_SEQ"  MINVALUE 1 MAXVALUE 999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE';
   END IF;
END;
/
DECLARE
  TRIGGERCHECKERFLAG INT;
BEGIN
  SELECT COUNT(*)  INTO TRIGGERCHECKERFLAG FROM all_triggers WHERE OWNER = sys_context('userenv', 'current_schema') AND trigger_name = UPPER('REPM_COLOR_PALLETTE_INSERT');
  IF TRIGGERCHECKERFLAG = 0 THEN
    EXECUTE IMMEDIATE 'CREATE OR REPLACE TRIGGER  "REPM_COLOR_PALLETTE_INSERT" BEFORE INSERT ON REPM_COLOR_PALLETTE FOR EACH ROW BEGIN SELECT REPM_COLOR_PALLETTE_SEQ.NEXTVAL INTO :new.COLOR_PALLETTE_ID FROM DUAL; END;';
    EXECUTE IMMEDIATE 'ALTER TRIGGER  "REPM_COLOR_PALLETTE_INSERT" ENABLE';
  END IF;
END;
/

DECLARE
TABLECHECKERFLAG INT;
BEGIN
    SELECT COUNT(*) INTO TABLECHECKERFLAG FROM ADS_KEY_VALUE_OBJECTS WHERE  OBJECT_TYPE = 'REPM_REPORT';
    IF TABLECHECKERFLAG = 0 THEN
        EXECUTE IMMEDIATE 'INSERT INTO ADS_KEY_VALUE_OBJECTS (OBJECT_TYPE,OBJECT_TABLE,OBJECT_TABLE_COLUMN,OBJECT_PARENT_TYPE,OBJECT_PARENT_COLUMN_ID) VALUES (''REPM_REPORT'',''REPM_REPORTS'',''REPORT_ID'','''','''')';
	EXECUTE IMMEDIATE 'INSERT INTO ADS_KEY_VALUE_OBJECTS (OBJECT_TYPE,OBJECT_TABLE,OBJECT_TABLE_COLUMN,OBJECT_PARENT_TYPE,OBJECT_PARENT_COLUMN_ID) VALUES (''REPM_CHART'',''REPM_CHARTS'',''CHART_ID'','''','''')';
    END IF;
END;
/
DECLARE
   PREFERENCECHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO PREFERENCECHECKERFLAG FROM APP_PREFERENCES WHERE PREFERENCE_NAME = 'SETTING_REPM_GRID_DEFAULT_PAGE_SIZE';
   IF PREFERENCECHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'INSERT INTO APP_PREFERENCES( PREFERENCE_NAME, PREFERENCE_VALUE) VALUES (''SETTING_REPM_GRID_DEFAULT_PAGE_SIZE'',''100'')';
   END IF;
END;
/
DECLARE
   TABLECHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO TABLECHECKERFLAG FROM "ADS_MODULES" WHERE MODULE_KEY = 'com.ads.mm.permission.rpm';
   IF TABLECHECKERFLAG = 0 THEN
        INSERT INTO ADS_MODULES(MODULE_ID, MODULE_NAME, MODULE_KEY, MODULE_ORDER, MODULE_FORWARD)
        (SELECT 12, 'Reporting Manager', 'com.ads.mm.permission.rpm', 12, 'reportingmanager' FROM DUAL);
    END IF;
END;
/
DECLARE
TABLECHECKERFLAG INT;
BEGIN
    SELECT COUNT(*) INTO TABLECHECKERFLAG FROM ALL_TABLES WHERE OWNER = sys_context( 'userenv', 'current_schema' ) AND TABLE_NAME = UPPER('ADS_OBJECT_TO_OBJECT_SCOPE');
    IF TABLECHECKERFLAG = 0 THEN
        EXECUTE IMMEDIATE 'CREATE TABLE  "ADS_OBJECT_TO_OBJECT_SCOPE"    ( "OBJECT_TYPE_ID" VARCHAR2(200)  NULL,
	"OBJECT_ID" VARCHAR2(200)  NULL,
	"SCOPE_OBJECT_TYPE_ID" VARCHAR2(200) NULL,
	"SCOPE_OBJECT_ID" VARCHAR2(200)  NULL)';
    END IF;
END;
/
DECLARE
TABLECHECKERFLAG INT;
BEGIN
    SELECT COUNT(*) INTO TABLECHECKERFLAG FROM ALL_TABLES WHERE OWNER = sys_context( 'userenv', 'current_schema' ) AND TABLE_NAME = UPPER('ADS_PROFILES');
    IF TABLECHECKERFLAG = 0 THEN
        EXECUTE IMMEDIATE 'CREATE TABLE  "ADS_PROFILES"    ( "PROFILE_ID" INT NOT NULL,
            "PROFILE_NAME" VARCHAR2(300 BYTE) NOT NULL,
            "PROFILE_TYPE" VARCHAR2(100) NOT NULL,
            "DESCRIPTION" VARCHAR2(4000) NULL,
            "OWNER_USER_ID" VARCHAR2(20) NOT NULL,
            CONSTRAINT "FK_ADS_PROFILES_OUID" FOREIGN KEY(OWNER_USER_ID) REFERENCES USERS(USER_ID) ON DELETE CASCADE,
            CONSTRAINT "UK_ADS_PROFILES_PN" UNIQUE(PROFILE_NAME,OWNER_USER_ID,PROFILE_TYPE),
            CONSTRAINT "PK_ADS_PROFILES_PID" PRIMARY KEY(PROFILE_ID))';
    END IF;
END;
/
DECLARE
SEQUENCECHECKERFLAG INT;
BEGIN
    SELECT COUNT(*) INTO SEQUENCECHECKERFLAG FROM ALL_SEQUENCES WHERE SEQUENCE_OWNER = sys_context('userenv', 'current_schema') AND SEQUENCE_NAME = UPPER('ADS_PROFILES_SEQ');
    IF SEQUENCECHECKERFLAG = 0 THEN
        EXECUTE IMMEDIATE 'CREATE SEQUENCE "ADS_PROFILES_SEQ"  MINVALUE 1 MAXVALUE 999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE';
    END IF;
END;
/
DECLARE
TRIGGERCHECKERFLAG INT;
BEGIN
    SELECT COUNT(*)  INTO TRIGGERCHECKERFLAG FROM all_triggers WHERE OWNER = sys_context('userenv', 'current_schema') AND trigger_name = UPPER('ADS_PROFILES_INSERT');
    IF TRIGGERCHECKERFLAG = 0 THEN
        EXECUTE IMMEDIATE 'CREATE OR REPLACE TRIGGER  "ADS_PROFILES_INSERT" BEFORE INSERT ON ADS_PROFILES FOR EACH ROW BEGIN SELECT ADS_PROFILES_SEQ.NEXTVAL INTO :new.PROFILE_ID FROM DUAL; END;';
        EXECUTE IMMEDIATE 'ALTER TRIGGER  "ADS_PROFILES_INSERT" ENABLE';
    END IF;
END;
/
DECLARE
TABLECHECKERFLAG INT;
BEGIN
    SELECT COUNT(*) INTO TABLECHECKERFLAG FROM ALL_TABLES WHERE OWNER = sys_context( 'userenv', 'current_schema' ) AND TABLE_NAME = UPPER('ADS_PROFILES_DETAILS');
    IF TABLECHECKERFLAG = 0 THEN
        EXECUTE IMMEDIATE 'CREATE TABLE  "ADS_PROFILES_DETAILS"    ( "PROFILE_DETAILS_ID" INT NOT NULL,
        "PROFILE_ID" INT  NOT NULL,
        "PROFILE_DETAILS_NAME" VARCHAR2(400) NOT NULL,
        "PROFILE_DETAILS_VALUE" VARCHAR2(4000) NOT NULL,
        CONSTRAINT "FK_ADS_PROF_DET_PID" FOREIGN KEY(PROFILE_ID) REFERENCES ADS_PROFILES(PROFILE_ID) ON DELETE CASCADE,
        CONSTRAINT "UK_ADS_PROF_DET_PDN"  UNIQUE(PROFILE_ID,PROFILE_DETAILS_NAME),
        CONSTRAINT "PK_ADS_PROF_DET_PID" PRIMARY KEY(PROFILE_DETAILS_ID))';
    END IF;
END;
/
DECLARE
SEQUENCECHECKERFLAG INT;
BEGIN
    SELECT COUNT(*) INTO SEQUENCECHECKERFLAG FROM ALL_SEQUENCES WHERE SEQUENCE_OWNER = sys_context('userenv', 'current_schema') AND SEQUENCE_NAME = UPPER('ADS_PROFILES_DETAILS_SEQ');
    IF SEQUENCECHECKERFLAG = 0 THEN
        EXECUTE IMMEDIATE 'CREATE SEQUENCE "ADS_PROFILES_DETAILS_SEQ"  MINVALUE 1 MAXVALUE 999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE';
    END IF;
END;
/
DECLARE
TRIGGERCHECKERFLAG INT;
BEGIN
    SELECT COUNT(*)  INTO TRIGGERCHECKERFLAG FROM all_triggers WHERE OWNER = sys_context('userenv', 'current_schema') AND trigger_name = UPPER('ADS_PROFILES_DETAILS_INSERT');
    IF TRIGGERCHECKERFLAG = 0 THEN
        EXECUTE IMMEDIATE 'CREATE OR REPLACE TRIGGER  "ADS_PROFILES_DETAILS_INSERT" BEFORE INSERT ON ADS_PROFILES_DETAILS FOR EACH ROW BEGIN SELECT ADS_PROFILES_DETAILS_SEQ.NEXTVAL INTO :new.PROFILE_DETAILS_ID FROM DUAL; END;';
        EXECUTE IMMEDIATE 'ALTER TRIGGER  "ADS_PROFILES_DETAILS_INSERT" ENABLE';
    END IF;
END;
/
DECLARE
TABLECHECKERFLAG INT;
BEGIN
    SELECT COUNT(*) INTO TABLECHECKERFLAG FROM ADS_KEY_VALUE_OBJECTS WHERE  OBJECT_TYPE = 'ADS_USER';
    IF TABLECHECKERFLAG = 0 THEN
        EXECUTE IMMEDIATE 'INSERT INTO ADS_KEY_VALUE_OBJECTS (OBJECT_TYPE,OBJECT_TABLE,OBJECT_TABLE_COLUMN,OBJECT_PARENT_TYPE,OBJECT_PARENT_COLUMN_ID) VALUES 	(''ADS_USER'',''USERS'',''USER_ID'','''','''')';
    END IF;
END;
/
DECLARE
TABLECHECKERFLAG INT;
BEGIN
    SELECT COUNT(*) INTO TABLECHECKERFLAG FROM ADS_KEY_VALUE_OBJECTS WHERE  OBJECT_TYPE = 'ADS_PROFILE';
    IF TABLECHECKERFLAG = 0 THEN
        EXECUTE IMMEDIATE 'INSERT INTO ADS_KEY_VALUE_OBJECTS (OBJECT_TYPE,OBJECT_TABLE,OBJECT_TABLE_COLUMN,OBJECT_PARENT_TYPE,OBJECT_PARENT_COLUMN_ID) VALUES 	(''ADS_PROFILE'',''ADS_PROFILES'',''PROFILE_ID'','''','''')';
    END IF;
END;
/
DECLARE
TABLECHECKERFLAG INT;
BEGIN
    SELECT COUNT(*) INTO TABLECHECKERFLAG FROM ALL_TABLES WHERE OWNER = sys_context( 'userenv', 'current_schema' ) AND TABLE_NAME = UPPER('ADS_OBJECT_CODESETS');
    IF TABLECHECKERFLAG = 0 THEN
        EXECUTE IMMEDIATE 'CREATE TABLE  "ADS_OBJECT_CODESETS"    (
        "OBJECT_TYPE_ID" INT  NOT NULL,
        "OBJECT_ID" INT NOT NULL,
        "CODESET_ID" INT NOT NULL,
        CONSTRAINT FK_OBJ_CDST_OBJ_TYPE_ID FOREIGN KEY(OBJECT_TYPE_ID) REFERENCES ADS_KEY_VALUE_OBJECTS(OBJECT_TYPE_ID) ON DELETE CASCADE,
        CONSTRAINT FK_OBJ_CDST_ID FOREIGN KEY(CODESET_ID) REFERENCES CSM_CODESET(CODESET_ID) ON DELETE CASCADE,
        CONSTRAINT UK_ADS_OBJ_CDST UNIQUE(OBJECT_TYPE_ID,OBJECT_ID,CODESET_ID))';
    END IF;
END;
/
DECLARE
    TABLECHECKERFLAG INT;
BEGIN
    SELECT COUNT(*) INTO TABLECHECKERFLAG FROM ALL_TABLES WHERE OWNER = sys_context( 'userenv', 'current_schema' ) AND TABLE_NAME = UPPER('CAT_WORKFLOWS');
    IF TABLECHECKERFLAG = 0 THEN
        EXECUTE IMMEDIATE 'CREATE TABLE "CAT_WORKFLOWS"(
        "WFLOW_ID" NUMBER NOT NULL ,
        "WFLOW_MODULE" VARCHAR2(50) NOT NULL ,
        "WFLOW_NAME" VARCHAR2(50) NULL,
        "WFLOW_PARENT_ID" NUMBER DEFAULT -1 NOT NULL ,
        "CREATED_BY" VARCHAR2(20) NOT NULL,
        "CREATED_DATETIME" TIMESTAMP(6) NOT NULL,
        "MODIFIED_BY" VARCHAR2(20) NULL,
        "MODIFIED_DATETIME" TIMESTAMP(6) NULL ,
        CONSTRAINT "PK_WFLOW_ID" PRIMARY KEY("WFLOW_ID"))';
    END IF;
END;
/
DECLARE
   SEQUENCECHECKERFLAG INT;
BEGIN
    SELECT COUNT(*) INTO SEQUENCECHECKERFLAG FROM ALL_SEQUENCES WHERE SEQUENCE_OWNER = sys_context('userenv', 'current_schema') AND SEQUENCE_NAME = UPPER('WFLOW_ID_SEQ');
    IF SEQUENCECHECKERFLAG = 0 THEN
        EXECUTE IMMEDIATE 'CREATE SEQUENCE   "WFLOW_ID_SEQ"  MINVALUE 1 MAXVALUE 999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE';
    END IF;
END;
/
DECLARE
  TRIGGERCHECKERFLAG INT;
BEGIN
  SELECT COUNT(*) INTO TRIGGERCHECKERFLAG  FROM all_triggers WHERE OWNER = sys_context('userenv', 'current_schema') AND trigger_name = UPPER('CAT_WORKFLOWS_INSERT');
  IF TRIGGERCHECKERFLAG = 0 THEN
    EXECUTE IMMEDIATE 'CREATE OR REPLACE TRIGGER  "CAT_WORKFLOWS_INSERT" BEFORE INSERT ON CAT_WORKFLOWS FOR EACH ROW BEGIN SELECT WFLOW_ID_SEQ.NEXTVAL INTO :new.WFLOW_ID FROM DUAL; END;';
    EXECUTE IMMEDIATE 'ALTER TRIGGER  "CAT_WORKFLOWS_INSERT" ENABLE';
  END IF;
END;
/
DECLARE
   TABLECHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO TABLECHECKERFLAG FROM ALL_TABLES WHERE OWNER = sys_context( 'userenv', 'current_schema' ) AND TABLE_NAME = UPPER('CAT_WORKFLOW_PROPERTIES');
   IF TABLECHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'CREATE TABLE CAT_WORKFLOW_PROPERTIES(
        WFLOW_PROPERTIES_ID NUMBER NOT NULL ,
        CAT_WORKFLOW_ID NUMBER NOT NULL ,
        WFLOW_PROPERTIES_TYPE VARCHAR2(50) NOT NULL ,
        WFLOW_PROPERTIES_VALUE VARCHAR2(4000),
        CREATED_BY VARCHAR2(20) NOT NULL,
        CREATED_DATETIME TIMESTAMP (6) NOT NULL,
        CONSTRAINT PK_WFLOW_PROPERTIES_ID PRIMARY KEY(WFLOW_PROPERTIES_ID),
        CONSTRAINT FK_CAT_WORKFLOW_ID FOREIGN KEY(CAT_WORKFLOW_ID) REFERENCES CAT_WORKFLOWS(WFLOW_ID))';
 END IF;
END;
/
DECLARE
   SEQUENCECHECKERFLAG INT;
BEGIN
    SELECT COUNT(*) INTO SEQUENCECHECKERFLAG FROM ALL_SEQUENCES WHERE SEQUENCE_OWNER = sys_context('userenv', 'current_schema') AND SEQUENCE_NAME = UPPER('WFLOW_PROPERTIES_ID_SEQ');
    IF SEQUENCECHECKERFLAG = 0 THEN
        EXECUTE IMMEDIATE 'CREATE SEQUENCE   "WFLOW_PROPERTIES_ID_SEQ"  MINVALUE 1 MAXVALUE 999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE';
    END IF;
END;
/
DECLARE
  TRIGGERCHECKERFLAG INT;
BEGIN
  SELECT COUNT(*)  INTO TRIGGERCHECKERFLAG  FROM all_triggers WHERE OWNER = sys_context('userenv', 'current_schema') AND trigger_name = UPPER('CAT_WORKFLOW_PROPERTIES_INSERT');
  IF TRIGGERCHECKERFLAG = 0 THEN
    EXECUTE IMMEDIATE 'CREATE OR REPLACE TRIGGER  "CAT_WORKFLOW_PROPERTIES_INSERT" BEFORE INSERT ON CAT_WORKFLOW_PROPERTIES FOR EACH ROW BEGIN SELECT WFLOW_PROPERTIES_ID_SEQ.NEXTVAL INTO :new.WFLOW_PROPERTIES_ID FROM DUAL; END;';
    EXECUTE IMMEDIATE 'ALTER TRIGGER  "CAT_WORKFLOW_PROPERTIES_INSERT" ENABLE';
  END IF;
END;
/
DECLARE
   COLUMNCHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO COLUMNCHECKERFLAG FROM ALL_TAB_COLUMNS WHERE  OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME = UPPER('MAPPING_SPECIFICATION') AND COLUMN_NAME=UPPER('SPEC_ARTIFACTS_REFERENCE');
   IF COLUMNCHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'ALTER TABLE MAPPING_SPECIFICATION ADD SPEC_ARTIFACTS_REFERENCE varchar2(4000) NULL';
   END IF;
END;
/
DECLARE
TABLECHECKERFLAG INT;
BEGIN
    SELECT COUNT(*) INTO TABLECHECKERFLAG FROM ADS_KEY_VALUE_OBJECTS WHERE  OBJECT_TYPE = 'REPM_CATEGORY';
    IF TABLECHECKERFLAG = 0 THEN
        EXECUTE IMMEDIATE 'INSERT INTO ADS_KEY_VALUE_OBJECTS (OBJECT_TYPE,OBJECT_TABLE,OBJECT_TABLE_COLUMN,OBJECT_PARENT_TYPE,OBJECT_PARENT_COLUMN_ID) VALUES (''REPM_CATEGORY'',''REPM_CATEGORIES'',''CATEGORY_ID'','''','''')';
    END IF;
END;
/
DECLARE
   TABLECHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO TABLECHECKERFLAG FROM "RM_HISTORYTYPE" where HISTORYTYPENAME = 'EXECUTE';
    IF TABLECHECKERFLAG = 0 THEN
        INSERT INTO RM_HISTORYTYPE (HISTORYTYPENAME, HISTORYTYPEDESC)
        (SELECT 'EXECUTE', 'Execute Query'    FROM DUAL );
    END IF;
END;
/
DECLARE
   COLUMNCHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO COLUMNCHECKERFLAG FROM ALL_TAB_COLUMNS WHERE  OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME = UPPER('CAT_TEMPLATES') AND COLUMN_NAME=UPPER('CAT_TEMPLATE_VERSION');
   IF COLUMNCHECKERFLAG = 0 THEN
    EXECUTE IMMEDIATE 'ALTER TABLE CAT_TEMPLATES ADD CAT_TEMPLATE_VERSION varchar2(50) NULL';
    EXECUTE IMMEDIATE 'UPDATE CAT_TEMPLATES SET CAT_TEMPLATE_VERSION = ''7.0''';
   END IF;
END;
/
DECLARE
    TABLECHECKERFLAG INT;
BEGIN
    SELECT COUNT(*) INTO TABLECHECKERFLAG FROM ALL_TABLES WHERE OWNER = sys_context( 'userenv', 'current_schema' ) AND TABLE_NAME = UPPER('CATFX_WORKFLOW');
    IF TABLECHECKERFLAG = 0 THEN
        EXECUTE IMMEDIATE 'CREATE TABLE "CATFX_WORKFLOW"(
        "CATFX_WORKFLOW_ID" NUMBER NOT NULL ,
        "CATFX_TAB_ID" NUMBER NULL,
        "CATFX_WORKFLOW_NAME" VARCHAR2(100) NULL,
        "CATFX_WORKFLOW_DESCRIPTION" VARCHAR2(4000) NULL,
        "CREATED_BY"  VARCHAR2(20)  NOT NULL,
        "CREATED_DATE" TIMESTAMP(6)  NOT NULL,
        "LAST_MODIFIED_BY" VARCHAR2(20)  NULL,
        "LAST_MODIFIED_DATE" TIMESTAMP(6)  NULL,
        CONSTRAINT "PK_CATFX_WORKFLOW_ID" PRIMARY KEY("CATFX_WORKFLOW_ID"))';
    END IF;
END;
/
DECLARE
   SEQUENCECHECKERFLAG INT;
BEGIN
    SELECT COUNT(*) INTO SEQUENCECHECKERFLAG FROM ALL_SEQUENCES WHERE SEQUENCE_OWNER = sys_context('userenv', 'current_schema') AND SEQUENCE_NAME = UPPER('CATFX_WORKFLOW_ID_SEQ');
    IF SEQUENCECHECKERFLAG = 0 THEN
        EXECUTE IMMEDIATE 'CREATE SEQUENCE   "CATFX_WORKFLOW_ID_SEQ"  MINVALUE 1 MAXVALUE 999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE';
    END IF;
END;
/
DECLARE
  TRIGGERCHECKERFLAG INT;
BEGIN
  SELECT COUNT(*) INTO TRIGGERCHECKERFLAG  FROM all_triggers WHERE OWNER = sys_context('userenv', 'current_schema') AND trigger_name = UPPER('CATFX_WF_INSERT');
  IF TRIGGERCHECKERFLAG = 0 THEN
    EXECUTE IMMEDIATE 'CREATE OR REPLACE TRIGGER  "CATFX_WF_INSERT" BEFORE INSERT ON CATFX_WORKFLOW FOR EACH ROW BEGIN SELECT CATFX_WORKFLOW_ID_SEQ.NEXTVAL INTO :new.CATFX_WORKFLOW_ID FROM DUAL; END;';
    EXECUTE IMMEDIATE 'ALTER TRIGGER  "CATFX_WF_INSERT" ENABLE';
  END IF;
END;
/
DECLARE
    TABLECHECKERFLAG INT;
BEGIN
    SELECT COUNT(*) INTO TABLECHECKERFLAG FROM ALL_TABLES WHERE OWNER = sys_context( 'userenv', 'current_schema' ) AND TABLE_NAME = UPPER('CATFX_WORKFLOW_COMPONENT');
    IF TABLECHECKERFLAG = 0 THEN
        EXECUTE IMMEDIATE 'CREATE TABLE "CATFX_WORKFLOW_COMPONENT"(
        "CATFX_WORKFLOW_COMPONENT_ID" NUMBER NOT NULL ,
        "CATFX_COMPONENT_ID" NUMBER NOT NULL ,
        "CATFX_COMPONENT_TYPE" VARCHAR2(100) NOT NULL ,
        "CATFX_WORKFLOW_ID" NUMBER NULL,
        "CATFX_WORKFLOW_COMPONENT_NAME" VARCHAR2(100) NULL,
        "CATFX_WORKFLOW_COMP_PROPS" varchar2(4000) NULL,
        "CREATED_BY"  VARCHAR2(20)  NOT NULL,
        "CREATED_DATE" TIMESTAMP(6)  NOT NULL,
        "LAST_MODIFIED_BY" VARCHAR2(20)  NULL,
        "LAST_MODIFIED_DATE" TIMESTAMP(6)  NULL,
        CONSTRAINT "PK_CATFX_WORKFLOW_COMP_ID" PRIMARY KEY("CATFX_WORKFLOW_COMPONENT_ID"),
        CONSTRAINT "FK_CATFX_WORKFLOW_COMP_ID" FOREIGN KEY("CATFX_WORKFLOW_ID") REFERENCES "CATFX_WORKFLOW" ("CATFX_WORKFLOW_ID") ON DELETE CASCADE)';
    END IF;
END;
/
DECLARE
   SEQUENCECHECKERFLAG INT;
BEGIN
    SELECT COUNT(*) INTO SEQUENCECHECKERFLAG FROM ALL_SEQUENCES WHERE SEQUENCE_OWNER = sys_context('userenv', 'current_schema') AND SEQUENCE_NAME = UPPER('CATFX_WORKFLOW_COMP_ID_SEQ');
    IF SEQUENCECHECKERFLAG = 0 THEN
        EXECUTE IMMEDIATE 'CREATE SEQUENCE   "CATFX_WORKFLOW_COMP_ID_SEQ"  MINVALUE 1 MAXVALUE 999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE';
    END IF;
END;
/
DECLARE
  TRIGGERCHECKERFLAG INT;
BEGIN
  SELECT COUNT(*) INTO TRIGGERCHECKERFLAG  FROM all_triggers WHERE OWNER = sys_context('userenv', 'current_schema') AND trigger_name = UPPER('CATFX_WORKFLOW_COMP_INSERT');
  IF TRIGGERCHECKERFLAG = 0 THEN
    EXECUTE IMMEDIATE 'CREATE OR REPLACE TRIGGER  "CATFX_WORKFLOW_COMP_INSERT" BEFORE INSERT ON CATFX_WORKFLOW_COMPONENT FOR EACH ROW BEGIN SELECT CATFX_WORKFLOW_COMP_ID_SEQ.NEXTVAL INTO :new.CATFX_WORKFLOW_COMPONENT_ID FROM DUAL; END;';
    EXECUTE IMMEDIATE 'ALTER TRIGGER  "CATFX_WORKFLOW_COMP_INSERT" ENABLE';
  END
IF;
END;
/
DECLARE
    TABLECHECKERFLAG INT;
BEGIN
    SELECT COUNT(*) INTO TABLECHECKERFLAG FROM ALL_TABLES WHERE OWNER = sys_context( 'userenv', 'current_schema' ) AND TABLE_NAME = UPPER('CATFX_WORKFLOW_CONNECTION');
    IF TABLECHECKERFLAG = 0 THEN
        EXECUTE IMMEDIATE 'CREATE TABLE "CATFX_WORKFLOW_CONNECTION"(
        "CATFX_WORKFLOW_CONNECTION_ID" NUMBER NOT NULL ,
        "CATFX_WORKFLOW_ID" NUMBER NULL,
        "CATFX_WORKFLOW_CONN_PROPS" varchar2(4000) NULL,
        "CREATED_BY"  VARCHAR2(20)  NOT NULL,
        "CREATED_DATE" TIMESTAMP(6)  NOT NULL,
        "LAST_MODIFIED_BY" VARCHAR2(20)  NULL,
        "LAST_MODIFIED_DATE" TIMESTAMP(6)  NULL,
        CONSTRAINT "PK_CATFX_WORKFLOW_CON_ID" PRIMARY KEY("CATFX_WORKFLOW_CONNECTION_ID"),
        CONSTRAINT "FK_CATFX_WORKFLOW_CON_ID" FOREIGN KEY("CATFX_WORKFLOW_ID") REFERENCES "CATFX_WORKFLOW" ("CATFX_WORKFLOW_ID") ON DELETE CASCADE)';
    END IF;
END;
/
DECLARE
   SEQUENCECHECKERFLAG INT;
BEGIN
    SELECT COUNT(*) INTO SEQUENCECHECKERFLAG FROM ALL_SEQUENCES WHERE SEQUENCE_OWNER = sys_context('userenv', 'current_schema') AND SEQUENCE_NAME = UPPER('CATFX_WORKFLOW_CON_ID_SEQ');
    IF SEQUENCECHECKERFLAG = 0 THEN
        EXECUTE IMMEDIATE 'CREATE SEQUENCE   "CATFX_WORKFLOW_CON_ID_SEQ"  MINVALUE 1 MAXVALUE 999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE';
    END IF;
END;
/
DECLARE
  TRIGGERCHECKERFLAG INT;
BEGIN
  SELECT COUNT(*) INTO TRIGGERCHECKERFLAG  FROM all_triggers WHERE OWNER = sys_context('userenv', 'current_schema') AND trigger_name = UPPER('CATFX_WORKFLOW_CON_INSERT');
  IF TRIGGERCHECKERFLAG = 0 THEN
    EXECUTE IMMEDIATE 'CREATE OR REPLACE TRIGGER  "CATFX_WORKFLOW_CON_INSERT" BEFORE INSERT ON CATFX_WORKFLOW_CONNECTION FOR EACH ROW BEGIN SELECT CATFX_WORKFLOW_CON_ID_SEQ.NEXTVAL INTO :new.CATFX_WORKFLOW_CONNECTION_ID FROM DUAL; END;';
    EXECUTE IMMEDIATE 'ALTER TRIGGER  "CATFX_WORKFLOW_CON_INSERT" ENABLE';
  END
IF;
END;
/
DECLARE
    TABLECHECKERFLAG INT;
BEGIN
    SELECT COUNT(*) INTO TABLECHECKERFLAG FROM ALL_TABLES WHERE OWNER = sys_context( 'userenv', 'current_schema' ) AND TABLE_NAME = UPPER('CATFX_WORKFLOW_CON_COMPONENT');
    IF TABLECHECKERFLAG = 0 THEN
        EXECUTE IMMEDIATE 'CREATE TABLE "CATFX_WORKFLOW_CON_COMPONENT"(
        "CATFX_WORKFLOW_CON_COMP_ID" NUMBER NOT NULL ,
        "CATFX_WORKFLOW_COMPONENT_ID" NUMBER NULL,
        "CATFX_WORKFLOW_CONNECTION_ID" NUMBER NULL,
        "CATFX_WORKFLOW_CON_COMP_TYPE"  CHAR(1) NULL,
        CONSTRAINT "PK_CATFX_WORKFLOW_CON_COMP_ID" PRIMARY KEY("CATFX_WORKFLOW_CON_COMP_ID"),
        CONSTRAINT "FK_CATFX_WORKFLOW_COMP_ID_COMP" FOREIGN KEY("CATFX_WORKFLOW_CONNECTION_ID") REFERENCES "CATFX_WORKFLOW_CONNECTION" ("CATFX_WORKFLOW_CONNECTION_ID"),
        CONSTRAINT "FK_CATFX_WORKFLOW_CON_ID_COMP" FOREIGN KEY("CATFX_WORKFLOW_COMPONENT_ID") REFERENCES "CATFX_WORKFLOW_COMPONENT" ("CATFX_WORKFLOW_COMPONENT_ID") ON DELETE CASCADE)';
    END IF;
END;
/
DECLARE
   SEQUENCECHECKERFLAG INT;
BEGIN
    SELECT COUNT(*) INTO SEQUENCECHECKERFLAG FROM ALL_SEQUENCES WHERE SEQUENCE_OWNER = sys_context('userenv', 'current_schema') AND SEQUENCE_NAME = UPPER('CATFX_WORKFLOW_CON_COMP_ID_SEQ');
    IF SEQUENCECHECKERFLAG = 0 THEN
        EXECUTE IMMEDIATE 'CREATE SEQUENCE   "CATFX_WORKFLOW_CON_COMP_ID_SEQ"  MINVALUE 1 MAXVALUE 999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE';
    END IF;
END;
/
DECLARE
  TRIGGERCHECKERFLAG INT;
BEGIN
  SELECT COUNT(*) INTO TRIGGERCHECKERFLAG  FROM all_triggers WHERE OWNER = sys_context('userenv', 'current_schema') AND trigger_name = UPPER('CATFX_WORKFLOW_CON_COMP_INSERT');
  IF TRIGGERCHECKERFLAG = 0 THEN
    EXECUTE IMMEDIATE 'CREATE OR REPLACE TRIGGER  "CATFX_WORKFLOW_CON_COMP_INSERT" BEFORE INSERT ON CATFX_WORKFLOW_CON_COMPONENT FOR EACH ROW BEGIN SELECT CATFX_WORKFLOW_CON_COMP_ID_SEQ.NEXTVAL INTO :new.CATFX_WORKFLOW_CON_COMP_ID FROM DUAL; END;';
    EXECUTE IMMEDIATE 'ALTER TRIGGER  "CATFX_WORKFLOW_CON_COMP_INSERT" ENABLE';
  END
IF;
END;
/
DECLARE
    TABLECHECKERFLAG INT;
BEGIN
    SELECT COUNT(*) INTO TABLECHECKERFLAG FROM ALL_TABLES WHERE OWNER = sys_context( 'userenv', 'current_schema' ) AND TABLE_NAME = UPPER('CATFX_SCRIPT');
    IF TABLECHECKERFLAG = 0 THEN
        EXECUTE IMMEDIATE 'CREATE TABLE "CATFX_SCRIPT"(
        "CATFX_SCRIPT_ID" NUMBER NOT NULL ,
        "CATFX_TAB_ID" NUMBER NULL,
        "CATFX_SCRIPT_NAME" VARCHAR2(100) NULL,
        "CREATED_BY"  VARCHAR2(20)  NOT NULL,
        "CREATED_DATE" TIMESTAMP(6)  NULL,
        "LAST_MODIFIED_BY" VARCHAR2(20)  NOT NULL,
        "LAST_MODIFIED_DATE" TIMESTAMP(6)  NULL)';
    END IF;
END;
/
DECLARE
   SEQUENCECHECKERFLAG INT;
BEGIN
    SELECT COUNT(*) INTO SEQUENCECHECKERFLAG FROM ALL_SEQUENCES WHERE SEQUENCE_OWNER = sys_context('userenv', 'current_schema') AND SEQUENCE_NAME = UPPER('CATFX_SCRIPT_ID_SEQ');
    IF SEQUENCECHECKERFLAG = 0 THEN
        EXECUTE IMMEDIATE 'CREATE SEQUENCE   "CATFX_SCRIPT_ID_SEQ"  MINVALUE 1 MAXVALUE 999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE';
    END IF;
END;
/
DECLARE
  TRIGGERCHECKERFLAG INT;
BEGIN
  SELECT COUNT(*) INTO TRIGGERCHECKERFLAG  FROM all_triggers WHERE OWNER = sys_context('userenv', 'current_schema') AND trigger_name = UPPER('CATFX_SCRIPT_INSERT');
  IF TRIGGERCHECKERFLAG = 0 THEN
    EXECUTE IMMEDIATE 'CREATE OR REPLACE TRIGGER  "CATFX_SCRIPT_INSERT" BEFORE INSERT ON CATFX_SCRIPT FOR EACH ROW BEGIN SELECT CATFX_SCRIPT_ID_SEQ.NEXTVAL INTO :new.CATFX_SCRIPT_ID FROM DUAL; END;';
    EXECUTE IMMEDIATE 'ALTER TRIGGER  "CATFX_SCRIPT_INSERT" ENABLE';
  END
IF;
END;
/
DECLARE
    TABLECHECKERFLAG INT;
BEGIN
    SELECT COUNT(*) INTO TABLECHECKERFLAG FROM ALL_TABLES WHERE OWNER = sys_context( 'userenv', 'current_schema' ) AND TABLE_NAME = UPPER('CATFX_CAT_COMPONENT');
    IF TABLECHECKERFLAG = 0 THEN
        EXECUTE IMMEDIATE 'CREATE TABLE "CATFX_CAT_COMPONENT"(
        "CATFX_CAT_COMPONENT_ID" NUMBER NOT NULL,
        "CAT_ID" NUMBER NOT NULL,
        "CAT_COMPONENT_ID" NUMBER NOT NULL,
        "CAT_COMPONENT_TYPE" CHAR(1) NOT NULL,
        CONSTRAINT "PK_CATFX_CAT_COMP_ID" PRIMARY KEY("CATFX_CAT_COMPONENT_ID"),
        CONSTRAINT "FK_CATFX_CAT_COMP_CAT_ID" FOREIGN KEY("CAT_ID") REFERENCES "CAT_TEMPLATES" ("CAT_ID") ON DELETE CASCADE)';
    END IF;
END;
/
DECLARE
   SEQUENCECHECKERFLAG INT;
BEGIN
    SELECT COUNT(*) INTO SEQUENCECHECKERFLAG FROM ALL_SEQUENCES WHERE SEQUENCE_OWNER = sys_context('userenv', 'current_schema') AND SEQUENCE_NAME = UPPER('CATFX_CAT_COMPONENT_ID_SEQ');
    IF SEQUENCECHECKERFLAG = 0 THEN
        EXECUTE IMMEDIATE 'CREATE SEQUENCE   "CATFX_CAT_COMPONENT_ID_SEQ"  MINVALUE 1 MAXVALUE 999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE';
    END IF;
END;
/
DECLARE
  TRIGGERCHECKERFLAG INT;
BEGIN
  SELECT COUNT(*) INTO TRIGGERCHECKERFLAG  FROM all_triggers WHERE OWNER = sys_context('userenv', 'current_schema') AND trigger_name = UPPER('CATFX_CAT_COMPONENT_INSERT');
  IF TRIGGERCHECKERFLAG = 0 THEN
    EXECUTE IMMEDIATE 'CREATE OR REPLACE TRIGGER  "CATFX_CAT_COMPONENT_INSERT" BEFORE INSERT ON CATFX_CAT_COMPONENT FOR EACH ROW BEGIN SELECT CATFX_CAT_COMPONENT_ID_SEQ.NEXTVAL INTO :new.CATFX_CAT_COMPONENT_ID FROM DUAL; END;';
    EXECUTE IMMEDIATE 'ALTER TRIGGER  "CATFX_CAT_COMPONENT_INSERT" ENABLE';
  END
IF;
END;
/
DECLARE
    TABLECHECKERFLAG INT;
BEGIN
    SELECT COUNT(*) INTO TABLECHECKERFLAG FROM ALL_TABLES WHERE OWNER = sys_context( 'userenv', 'current_schema' ) AND TABLE_NAME = UPPER('CATFX_PROFILE_COMPONENT');
    IF TABLECHECKERFLAG = 0 THEN
        EXECUTE IMMEDIATE 'CREATE TABLE "CATFX_PROFILE_COMPONENT"(
        "CATFX_PROFILE_COMPONENT_ID" NUMBER NOT NULL,
        "CAT_DIALOG_PROFILE_ID" NUMBER NULL,
        "CAT_COMPONENT_ID" NUMBER NULL,
        "CAT_COMPONENT_TYPE" VARCHAR2(1) NULL,
        "CREATED_BY"  VARCHAR2(20)  NOT NULL,
        "CREATED_DATE" TIMESTAMP(6)  NOT NULL,
        "LAST_MODIFIED_BY" VARCHAR2(20)  NULL,
        "LAST_MODIFIED_DATE" TIMESTAMP(6)  NULL,
        CONSTRAINT "PK_CATFX_PROFILE_COMPONENT_ID" PRIMARY KEY("CATFX_PROFILE_COMPONENT_ID"),
        CONSTRAINT "FK_CATFX_DIALOG_PROFILE_ID" FOREIGN KEY("CAT_DIALOG_PROFILE_ID") REFERENCES "CAT_DIALOG_PROFILE" ("CAT_DIALOG_PROFILE_ID") ON DELETE CASCADE)';
    END IF;
END;
/
DECLARE
   SEQUENCECHECKERFLAG INT;
BEGIN
    SELECT COUNT(*) INTO SEQUENCECHECKERFLAG FROM ALL_SEQUENCES WHERE SEQUENCE_OWNER = sys_context('userenv', 'current_schema') AND SEQUENCE_NAME = UPPER('CATFX_PROFILE_COMPONENT_ID_SEQ');
    IF SEQUENCECHECKERFLAG = 0 THEN
        EXECUTE IMMEDIATE 'CREATE SEQUENCE   "CATFX_PROFILE_COMPONENT_ID_SEQ"  MINVALUE 1 MAXVALUE 999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE';
    END IF;
END;
/
DECLARE
  TRIGGERCHECKERFLAG INT;
BEGIN
  SELECT COUNT(*) INTO TRIGGERCHECKERFLAG  FROM all_triggers WHERE OWNER = sys_context('userenv', 'current_schema') AND trigger_name = UPPER('CATFX_PROFILE_COMPONENT_INSERT');
  IF TRIGGERCHECKERFLAG = 0 THEN
    EXECUTE IMMEDIATE 'CREATE OR REPLACE TRIGGER  "CATFX_PROFILE_COMPONENT_INSERT" BEFORE INSERT ON CATFX_PROFILE_COMPONENT FOR EACH ROW BEGIN SELECT CATFX_PROFILE_COMPONENT_ID_SEQ.NEXTVAL INTO :new.CATFX_PROFILE_COMPONENT_ID FROM DUAL; END;';
    EXECUTE IMMEDIATE 'ALTER TRIGGER  "CATFX_PROFILE_COMPONENT_INSERT" ENABLE';
  END
IF;
END;
/
DECLARE
    TABLECHECKERFLAG INT;
BEGIN
    SELECT COUNT(*) INTO TABLECHECKERFLAG FROM ALL_TABLES WHERE OWNER = sys_context( 'userenv', 'current_schema' ) AND TABLE_NAME = UPPER('CATFX_DIALOG_COMPONENT');
    IF TABLECHECKERFLAG = 0 THEN
        EXECUTE IMMEDIATE 'CREATE TABLE "CATFX_DIALOG_COMPONENT"(
        "CATFX_DIALOG_COMPONENT_ID" NUMBER NOT NULL,
        "CAT_DIALOG_ID" NUMBER NULL,
        "CAT_COMPONENT_ID" NUMBER NULL,
        "CAT_COMPONENT_TYPE" VARCHAR2(1) NULL,
        "CREATED_BY"  VARCHAR2(20)  NOT NULL,
        "CREATED_DATE" TIMESTAMP(6)  NOT NULL,
        "LAST_MODIFIED_BY" VARCHAR2(20)  NULL,
        "LAST_MODIFIED_DATE" TIMESTAMP(6)  NULL,
        CONSTRAINT "PK_CATFX_DIALOG_COMPONENT_ID" PRIMARY KEY("CATFX_DIALOG_COMPONENT_ID"),
        CONSTRAINT "FK_CATFX_DIALOG_ID" FOREIGN KEY("CAT_DIALOG_ID") REFERENCES "CAT_DIALOG" ("CAT_DIALOG_ID") ON DELETE CASCADE)';
    END IF;
END;
/
DECLARE
   SEQUENCECHECKERFLAG INT;
BEGIN
    SELECT COUNT(*) INTO SEQUENCECHECKERFLAG FROM ALL_SEQUENCES WHERE SEQUENCE_OWNER = sys_context('userenv', 'current_schema') AND SEQUENCE_NAME = UPPER('CATFX_DIALOG_COMPONENT_ID_SEQ');
    IF SEQUENCECHECKERFLAG = 0 THEN
        EXECUTE IMMEDIATE 'CREATE SEQUENCE   "CATFX_DIALOG_COMPONENT_ID_SEQ"  MINVALUE 1 MAXVALUE 999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE';
    END IF;
END;
/
DECLARE
  TRIGGERCHECKERFLAG INT;
BEGIN
  SELECT COUNT(*) INTO TRIGGERCHECKERFLAG  FROM all_triggers WHERE OWNER = sys_context('userenv', 'current_schema') AND trigger_name = UPPER('CATFX_DIALOG_COMPONENT_INSERT');
  IF TRIGGERCHECKERFLAG = 0 THEN
    EXECUTE IMMEDIATE 'CREATE OR REPLACE TRIGGER  "CATFX_DIALOG_COMPONENT_INSERT" BEFORE INSERT ON CATFX_DIALOG_COMPONENT FOR EACH ROW BEGIN SELECT CATFX_DIALOG_COMPONENT_ID_SEQ.NEXTVAL INTO :new.CATFX_DIALOG_COMPONENT_ID FROM DUAL; END;';
    EXECUTE IMMEDIATE 'ALTER TRIGGER  "CATFX_DIALOG_COMPONENT_INSERT" ENABLE';
  END
IF;
END;
/
DECLARE
    TABLECHECKERFLAG INT;
BEGIN
    SELECT COUNT(*) INTO TABLECHECKERFLAG FROM ALL_TABLES WHERE OWNER = sys_context( 'userenv', 'current_schema' ) AND TABLE_NAME = UPPER('CATFX_DIALOG_COMPONENT');
    IF TABLECHECKERFLAG = 0 THEN
        EXECUTE IMMEDIATE 'CREATE TABLE "CATFX_DIALOG_COMPONENT"(
        "CATFX_DIALOG_COMPONENT_ID" NUMBER NOT NULL,
        "CAT_DIALOG_ID" NUMBER NULL,
        "CAT_COMPONENT_ID" NUMBER NULL,
        "CAT_COMPONENT_TYPE" VARCHAR2(1) NULL,
        "CREATED_BY"  VARCHAR2(20)  NOT NULL,
        "CREATED_DATE" TIMESTAMP(6) NOT NULL,
        "LAST_MODIFIED_BY" VARCHAR2(20)  NULL,
        "LAST_MODIFIED_DATE" TIMESTAMP(6)  NULL,
        CONSTRAINT "PK_CATFX_DIALOG_COMPONENT_ID" PRIMARY KEY("CATFX_DIALOG_COMPONENT_ID"),
        CONSTRAINT "FK_CATFX_DIALOG_ID" FOREIGN KEY("CAT_DIALOG_ID") REFERENCES "CAT_DIALOG" ("CAT_DIALOG_ID") ON DELETE CASCADE)';
    END IF;
END;
/
DECLARE
   SEQUENCECHECKERFLAG INT;
BEGIN
    SELECT COUNT(*) INTO SEQUENCECHECKERFLAG FROM ALL_SEQUENCES WHERE SEQUENCE_OWNER = sys_context('userenv', 'current_schema') AND SEQUENCE_NAME = UPPER('CATFX_DIALOG_COMPONENT_ID_SEQ');
    IF SEQUENCECHECKERFLAG = 0 THEN
        EXECUTE IMMEDIATE 'CREATE SEQUENCE   "CATFX_DIALOG_COMPONENT_ID_SEQ"  MINVALUE 1 MAXVALUE 999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE';
    END IF;
END;
/
DECLARE
  TRIGGERCHECKERFLAG INT;
BEGIN
  SELECT COUNT(*) INTO TRIGGERCHECKERFLAG  FROM all_triggers WHERE OWNER = sys_context('userenv', 'current_schema') AND trigger_name = UPPER('CATFX_DIALOG_COMPONENT_INSERT');
  IF TRIGGERCHECKERFLAG = 0 THEN
    EXECUTE IMMEDIATE 'CREATE OR REPLACE TRIGGER  "CATFX_DIALOG_COMPONENT_INSERT" BEFORE INSERT ON CATFX_DIALOG_COMPONENT FOR EACH ROW BEGIN SELECT CATFX_DIALOG_COMPONENT_ID_SEQ.NEXTVAL INTO :new.CATFX_DIALOG_COMPONENT_ID FROM DUAL; END;';
    EXECUTE IMMEDIATE 'ALTER TRIGGER  "CATFX_DIALOG_COMPONENT_INSERT" ENABLE';
  END IF;
END;
/
DECLARE
VERSIONCHECKERFLAG INT;
CURSOR ALL_DIALOGS IS
SELECT CAT_ID, CAT_DIALOG_ID FROM CAT_DIALOG ORDER BY CAT_ID;
BEGIN
SELECT COUNT(*) INTO VERSIONCHECKERFLAG FROM ADS_MM_VERSION WHERE VALUE <= '7.1';
    IF VERSIONCHECKERFLAG > 0 THEN
        FOR DIALOG IN ALL_DIALOGS
        LOOP
            INSERT INTO CATFX_CAT_COMPONENT(CAT_ID, CAT_COMPONENT_ID, CAT_COMPONENT_TYPE) VALUES (DIALOG.CAT_ID,DIALOG.CAT_DIALOG_ID,'D');
            COMMIT;
        END LOOP;
    END IF;
END;
/
DECLARE
VERSIONCHECKERFLAG INT;
  ORD_PREF_VAL VARCHAR2(100) := 'HEADER_ORDER_PREFERENCE';
  VIS_PREF_VAL VARCHAR2(100) := 'HEADER_VISIBILITY_PREFERENCE';
  DATACHECKERFLAG INT;
  USER_ID VARCHAR2(100);
  PROJ_ID VARCHAR2(100);
  PROF_TYPE VARCHAR2(10);
  CUR_PREF_HISTDESC VARCHAR2(4000);
  PROF_ID NUMBER;
  PROJ_DET SYS_REFCURSOR;
  CURSOR USR_MAP IS
   SELECT DISTINCT UM.USER_ID FROM (
    SELECT RTRIM(LTRIM(REPLACE(USER_ID, ORD_PREF_VAL || '_', ''))) USER_ID, COLUMN_PREFERENCES, ORD_PREF_VAL  AS PREF_NAME   FROM USER_PREFERENCES
    WHERE USER_ID LIKE ORD_PREF_VAL || '_' ||'%'
    UNION
    SELECT RTRIM(LTRIM(REPLACE(USER_ID, VIS_PREF_VAL || '_', ''))) USER_ID, COLUMN_PREFERENCES, VIS_PREF_VAL  AS PREF_NAME   FROM USER_PREFERENCES
    WHERE USER_ID LIKE VIS_PREF_VAL || '_' ||'%'
  ) UM JOIN USERS U ON  UM.USER_ID = U.USER_ID;
   CURSOR USR_PREF_MAP
  IS
    SELECT DISTINCT RTRIM(LTRIM(REPLACE(USER_ID, ORD_PREF_VAL || '_', ''))) USER_ID, COLUMN_PREFERENCES, ORD_PREF_VAL  AS PREF_NAME   FROM USER_PREFERENCES
    WHERE USER_ID LIKE ORD_PREF_VAL || '_' ||'%'
    UNION
    SELECT RTRIM(LTRIM(REPLACE(USER_ID, VIS_PREF_VAL || '_', ''))) USER_ID, COLUMN_PREFERENCES, VIS_PREF_VAL  AS PREF_NAME   FROM USER_PREFERENCES
    WHERE USER_ID LIKE VIS_PREF_VAL || '_' ||'%';
BEGIN
SELECT COUNT(*) INTO VERSIONCHECKERFLAG FROM ADS_MM_VERSION WHERE VALUE <= '7.1';
    IF VERSIONCHECKERFLAG > 0 THEN
  FOR UM IN USR_MAP
    LOOP
    PROF_TYPE := 'User';
    USER_ID := UM.USER_ID;
    EXECUTE IMMEDIATE 'INSERT INTO ADS_PROFILES (PROFILE_NAME,PROFILE_TYPE,DESCRIPTION,OWNER_USER_ID) VALUES (''Default'','''||PROF_TYPE||''',''System Generated Profile'','''||USER_ID||''')';
    SELECT ADS_PROFILES_SEQ.CURRVAL INTO PROF_ID FROM DUAL;
    FOR UP IN USR_PREF_MAP
      LOOP
      IF USER_ID = UP.USER_ID
        THEN
          EXECUTE IMMEDIATE 'INSERT INTO ADS_PROFILES_DETAILS (PROFILE_ID,PROFILE_DETAILS_NAME,PROFILE_DETAILS_VALUE) VALUES ('||PROF_ID||','''||UP.PREF_NAME||''','''||UP.COLUMN_PREFERENCES||''')';
        END IF;
    END LOOP;
    FOR PROJ_DET IN (SELECT DISTINCT PROJ_ID FROM PROJECT)
      LOOP
        EXECUTE IMMEDIATE 'INSERT INTO USER_PREFERENCES (USER_ID,COLUMN_PREFERENCES) VALUES (''MM_PROJECT_USER_PROFILE_PREFERENCE_'|| USER_ID || '_' || PROJ_DET.PROJ_ID || ''','''||PROF_ID||''')';
    END LOOP;
    EXECUTE IMMEDIATE 'INSERT INTO ADS_OBJECT_TO_OBJECT_SCOPE (OBJECT_TYPE_ID,OBJECT_ID,SCOPE_OBJECT_TYPE_ID,SCOPE_OBJECT_ID)
		SELECT (SELECT OBJECT_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE = ''ADS_PROFILE''),'||PROF_ID||',
		(SELECT OBJECT_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE = ''MM_PROJECT''),-1 FROM DUAL';
		CUR_PREF_HISTDESC := '{profileId:'||PROF_ID||',profileName:Default,profileType:'||PROF_TYPE||',description:System Generated Profile, ownerUserId:'||USER_ID||'}';
		EXECUTE IMMEDIATE 'INSERT INTO RM_HISTORY (HISTORYTYPEID ,HISTORYDESC ,OBJECTID ,OBJECTTYPEID ,HISTORYDATESTAMP ,USER_ID) SELECT (SELECT HISTORYTYPEID FROM RM_HISTORYTYPE WHERE HISTORYTYPENAME = ''ADD''),'''||CUR_PREF_HISTDESC||''','''||PROF_ID||''', (SELECT OBJECT_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE = ''ADS_PROFILE''),SYSDATE,'''||USER_ID||''' FROM DUAL';
    END LOOP;
    USER_ID:= 'Administrator';
    PROF_TYPE:= 'Site';
    EXECUTE IMMEDIATE 'INSERT INTO ADS_PROFILES (PROFILE_NAME,PROFILE_TYPE,DESCRIPTION,OWNER_USER_ID) VALUES (''Default'','''||PROF_TYPE||''',''System Generated Profile'',''Administrator'')';
    SELECT ADS_PROFILES_SEQ.CURRVAL INTO PROF_ID FROM DUAL;
    EXECUTE IMMEDIATE 'INSERT INTO ADS_PROFILES_DETAILS (PROFILE_ID,PROFILE_DETAILS_NAME,PROFILE_DETAILS_VALUE) VALUES ('||PROF_ID||','''||ORD_PREF_VAL||''',''-:0,slNo:40,SrcSysName:100,SrcEnvName:100,SrcTabName:100,SrcColName:100,SrcColDataType:100,SrcColLen:100,BusinessRule:200,ExtendedBusRuleTransformation:200,TgtSysName:100,TgtEnvName:100,TgtTabName:100,TgtColName:100,TgtColDataType:100,TgtColLen:100,CreatedBy:100,CreatedDate:100,TgtColPrecision:0,TgtColScale:0,TgtColNullableFlag:0,TgtColETLDefaultValue:0,TgtColDef:0,TgtColComments:0,TgtNaturalKeyFlag:0,TgtPrimaryKeyFlag:0,TgtLogicalColName:0,TgtSdiFlag:0,TgtSdiDescription:0,TgtXPath:0,TgtTableClass:0,TgtTableAlias:0,TgtColumnClass:0,TgtColumnAlias:0,TgtBusinessKeyFlag:0,CSMMapping:0,SpecificationArtifacts:0,LookupReferenceColumn:0,LookupOn:0,TransLookupCondition:0,SrcColPrecision:0,SrcColScale:0,SrcColDBDefaultValue:0,SrcColDef:0,SrcColComments:0,SrcColIdentityFlag:0,SrcColNullableFlag:0,SrcPercentNullValue:0,SrcNaturalKeyFlag:0,SrcPrimaryKeyFlag:0,SrcLogicalColName:0,SrcSdiFlag:0,SrcSdiDescription:0,SrcXPath:0,SrcTableClass:0,SrcTableAlias:0,SrcColumnClass:0,SrcColumnAlias:0,SrcBusinessKeyFlag:0,SrcMinValue:0,SrcMaxValue:0,Status:0,LastModifiedBy:100,LastmodifiedDateTime:100,MapSeqId:0,UserDefination1:0,UserDefination2:0,UserDefination3:0,UserDefination4:0,UserDefination5:0,UserDefination6:0,UserDefination7:0,UserDefination8:0,UserDefination9:0,UserDefination10:0,UserDefinition11:0,UserDefinition12:0,UserDefinition13:0,UserDefinition14:0,UserDefinition15:0,UserDefinition16:0,UserDefinition17:0,UserDefinition18:0,UserDefinition19:0,UserDefinition20:0,UserDefinition21:0,UserDefinition22:0,UserDefinition23:0,UserDefinition24:0,UserDefinition25:0,UserDefinition26:0,UserDefinition27:0,UserDefinition28:0,UserDefinition29:0,UserDefinition30:0,UserDefinition31:0,UserDefinition32:0,UserDefinition33:0,UserDefinition34:0,UserDefinition35:0,UserDefinition36:0,UserDefinition37:0,UserDefinition38:0,UserDefinition39:0,UserDefinition40:0,UserDefinition41:0,UserDefinition42:0,UserDefinition43:0,UserDefinition44:0,UserDefinition45:0,UserDefinition46:0,UserDefinition47:0,UserDefinition48:0,UserDefinition49:0,UserDefinition50:0,MappingSpecRowComments:0,RowOrder:0'')';
    EXECUTE IMMEDIATE 'INSERT INTO ADS_PROFILES_DETAILS (PROFILE_ID,PROFILE_DETAILS_NAME,PROFILE_DETAILS_VALUE) VALUES ('||PROF_ID||','''||VIS_PREF_VAL||''',''-,slNo,TgtSysName,TgtEnvName,TgtTabName,TgtColName,TgtColDataType,TgtColLen,,,,,,,,,,,,,,,,,,,,BusinessRule,ExtendedBusRuleTransformation,,,,SrcSysName,SrcEnvName,SrcTabName,SrcColName,SrcColDataType,SrcColLen,,,,,,,,,,,,,,,,,,,,,,,LastModifiedBy,LastmodifiedDateTime,CreatedBy,CreatedDate,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,'')';
    EXECUTE IMMEDIATE 'INSERT INTO ADS_OBJECT_TO_OBJECT_SCOPE (OBJECT_TYPE_ID,OBJECT_ID,SCOPE_OBJECT_TYPE_ID,SCOPE_OBJECT_ID) SELECT (SELECT OBJECT_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE = ''ADS_PROFILE''),'||PROF_ID||',(SELECT OBJECT_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE = ''MM_PROJECT''),-1 FROM DUAL';
    EXECUTE IMMEDIATE 'INSERT INTO ADS_OBJECT_TO_OBJECT_SCOPE (OBJECT_TYPE_ID,OBJECT_ID,SCOPE_OBJECT_TYPE_ID,SCOPE_OBJECT_ID) SELECT (SELECT OBJECT_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE = ''ADS_PROFILE''),'||PROF_ID||',(SELECT OBJECT_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE = ''ADS_USER''),-1 FROM DUAL';
	CUR_PREF_HISTDESC := '{profileId:'||PROF_ID||',profileName:Default,profileType:'||PROF_TYPE||',description:System Generated Profile, ownerUserId:'||USER_ID||'}';
	EXECUTE IMMEDIATE 'INSERT INTO RM_HISTORY (HISTORYTYPEID ,HISTORYDESC ,OBJECTID ,OBJECTTYPEID ,HISTORYDATESTAMP ,USER_ID) SELECT (SELECT HISTORYTYPEID FROM RM_HISTORYTYPE WHERE HISTORYTYPENAME = ''ADD''),'''||CUR_PREF_HISTDESC||''','''||PROF_ID||''', (SELECT OBJECT_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE = ''ADS_PROFILE''),SYSDATE,'''||USER_ID||''' FROM DUAL';
 END IF;
 SELECT COUNT(*) INTO DATACHECKERFLAG FROM USER_PREFERENCES WHERE USER_ID LIKE 'HEADER_ORDER_PREFERENCE%' OR USER_ID LIKE 'HEADER_VISIBILITY_PREFERENCE%';
  IF DATACHECKERFLAG > 0 THEN
    EXECUTE IMMEDIATE 'DELETE FROM USER_PREFERENCES WHERE USER_ID LIKE ''%HEADER_ORDER_PREFERENCE%''';
   EXECUTE IMMEDIATE 'DELETE FROM USER_PREFERENCES WHERE USER_ID LIKE ''HEADER_VISIBILITY_PREFERENCE%''';
END IF;
END;
/
DECLARE
   COLUMNCHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO COLUMNCHECKERFLAG FROM ALL_TAB_COLUMNS WHERE  OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME = UPPER('REQM_SPECIFICATION') AND COLUMN_NAME=UPPER('PROGRESS_STATUS');
   IF COLUMNCHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'ALTER TABLE REQM_SPECIFICATION RENAME COLUMN STATUS TO PROGRESS_STATUS';
   END IF;
END;
/
DECLARE
   COLUMNCHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO COLUMNCHECKERFLAG FROM ALL_TAB_COLUMNS WHERE  OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME = UPPER('REQM_SPECIFICATION') AND COLUMN_NAME=UPPER('STATUS');
   IF COLUMNCHECKERFLAG = 0 THEN
        EXECUTE IMMEDIATE 'ALTER TABLE REQM_SPECIFICATION ADD STATUS VARCHAR2(20) DEFAULT ''Active''';
        EXECUTE IMMEDIATE 'UPDATE REQM_SPECIFICATION SET STATUS = ''Active''';
        EXECUTE IMMEDIATE 'ALTER TABLE REQM_SPECIFICATION ADD SPEC_VERSION NUMBER(16,2) DEFAULT 1.00 ';
        EXECUTE IMMEDIATE 'UPDATE REQM_SPECIFICATION SET SPEC_VERSION = 1.00';
        EXECUTE IMMEDIATE 'ALTER TABLE REQM_SPECIFICATION DROP CONSTRAINT UK_REQM_SPECIFICATION_NAME';
        EXECUTE IMMEDIATE 'ALTER TABLE REQM_SPECIFICATION ADD CONSTRAINT UK_REQM_SPEC_NAME UNIQUE(SPEC_NAME, SPEC_VERSION ,PROJECT_ID,SUBJECT_ID) ENABLE';
        EXECUTE IMMEDIATE 'ALTER TABLE REQM_SPECIFICATION ADD SPEC_VERSION_LABEL VARCHAR2(50)';
        EXECUTE IMMEDIATE 'ALTER TABLE REQM_SPECIFICATION ADD SPEC_CHANGED_DESC VARCHAR2(4000)';
   END IF;
END;
/
-- DECLARE
--    COLUMNCHECKERFLAG INT;
-- BEGIN
--    SELECT COUNT(*) INTO COLUMNCHECKERFLAG FROM ALL_TAB_COLUMNS WHERE  OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME = UPPER('REPM_CHARTS') AND COLUMN_NAME=UPPER('CHART_PROPERTIES');
--    IF COLUMNCHECKERFLAG = 0 THEN
--         EXECUTE IMMEDIATE 'ALTER TABLE REPM_CHARTS ADD CHART_PROPERTIES varchar2(4000) NULL';
--         EXECUTE IMMEDIATE 'ALTER TABLE REPM_DASHBOARDS ADD LAYOUT_PATTERN varchar2(500) NULL';
--         EXECUTE IMMEDIATE 'ALTER TABLE REPM_REPORTS ADD COLUMNS_WIDTH varchar2(4000) NULL';
--         EXECUTE IMMEDIATE 'ALTER TABLE REPM_CHARTS  DROP COLUMN CHART_QUERY';
--    END IF;
-- END;
-- /
DECLARE
TABLECHECKERFLAG INT;
BEGIN
    SELECT COUNT(*) INTO TABLECHECKERFLAG FROM ADS_KEY_VALUE_OBJECTS WHERE  OBJECT_TYPE = 'REPM_DASHBOARD';
    IF TABLECHECKERFLAG = 0 THEN
        EXECUTE IMMEDIATE 'INSERT INTO ADS_KEY_VALUE_OBJECTS (OBJECT_TYPE,OBJECT_TABLE,OBJECT_TABLE_COLUMN,OBJECT_PARENT_TYPE,OBJECT_PARENT_COLUMN_ID) VALUES (''REPM_DASHBOARD'',''REPM_DASHBOARDS'',''DASHBOARD_ID'','''','''')';

	EXECUTE IMMEDIATE 'INSERT INTO ADS_KEY_VALUE_OBJECTS (OBJECT_TYPE,OBJECT_TABLE,OBJECT_TABLE_COLUMN,OBJECT_PARENT_TYPE,OBJECT_PARENT_COLUMN_ID) VALUES (''REPM_CHART'',''REPM_CHARTS'',''CHART_ID'','''','''')';
    END IF;
END;
/
DECLARE
   V_CHECK INT;
BEGIN
	BEGIN
      SELECT 1 INTO V_CHECK
        FROM DUAL
       WHERE NOT EXISTS ( SELECT *
                          FROM USER_PREFERENCES
                             WHERE USER_ID LIKE 'RQM_SPECIFICATION_VERSION_LABEL_PREFERENCE%' );
		EXCEPTION
		WHEN OTHERS THEN
		 NULL;
		END;
     IF V_CHECK = 1 THEN
      INSERT INTO USER_PREFERENCES (USER_ID,COLUMN_PREFERENCES)
        VALUES ( 'RQM_SPECIFICATION_VERSION_LABEL_PREFERENCE_REQUIREMENTS_MANAGER_Administrator', 'true' );
   END IF;
END;
/
DECLARE
    TABLECHECKERFLAG INT;
BEGIN
    SELECT COUNT(*) INTO TABLECHECKERFLAG FROM ALL_TABLES WHERE OWNER = sys_context( 'userenv', 'current_schema' ) AND TABLE_NAME = UPPER('BG_CATEGORIES');
    IF TABLECHECKERFLAG = 0 THEN
        EXECUTE IMMEDIATE 'CREATE TABLE "BG_CATEGORIES"(
        "CATEGORY_ID" NUMBER NOT NULL ENABLE,
        "PARENT_CATEGORY_ID" NUMBER  DEFAULT -1 NOT NULL,
        "CATEGORY_NAME" VARCHAR2(250) NULL,
        "DESCRIPTION" VARCHAR2(4000) NULL,
        CONSTRAINT "BG_CATEGORIES_CATEGORY_ID" PRIMARY KEY("CATEGORY_ID"),
        CONSTRAINT "UK_BGM_CATEGORIES_CAT_ID_NAME" UNIQUE (CATEGORY_ID, CATEGORY_NAME))';
    END IF;
END;
/
DECLARE
   SEQUENCECHECKERFLAG INT;
BEGIN
    SELECT COUNT(*) INTO SEQUENCECHECKERFLAG FROM ALL_SEQUENCES WHERE SEQUENCE_OWNER = sys_context('userenv', 'current_schema') AND SEQUENCE_NAME = UPPER('BG_CATEGORIES_SEQ');
    IF SEQUENCECHECKERFLAG = 0 THEN
        EXECUTE IMMEDIATE 'CREATE SEQUENCE   "BG_CATEGORIES_SEQ"  MINVALUE 1 MAXVALUE 999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE';
    END IF;
END;
/
DECLARE
  TRIGGERCHECKERFLAG INT;
BEGIN
  SELECT COUNT(*) INTO TRIGGERCHECKERFLAG  FROM all_triggers WHERE OWNER = sys_context('userenv', 'current_schema') AND trigger_name = UPPER('BG_CATEGORIES_INSERT');
  IF TRIGGERCHECKERFLAG = 0 THEN
    EXECUTE IMMEDIATE 'CREATE OR REPLACE TRIGGER  "BG_CATEGORIES_INSERT" BEFORE INSERT ON BG_CATEGORIES FOR EACH ROW BEGIN SELECT BG_CATEGORIES_SEQ.NEXTVAL INTO :new.CATEGORY_ID FROM DUAL; END;';
    EXECUTE IMMEDIATE 'ALTER TRIGGER  "BG_CATEGORIES_INSERT" ENABLE';
  END IF;
END;
/
DECLARE
    TABLECHECKERFLAG INT;
BEGIN
    SELECT COUNT(*) INTO TABLECHECKERFLAG FROM ALL_TABLES WHERE OWNER = sys_context( 'userenv', 'current_schema' ) AND TABLE_NAME = UPPER('BUSINESS_TERMS');
    IF TABLECHECKERFLAG = 0 THEN
        EXECUTE IMMEDIATE 'CREATE TABLE "BUSINESS_TERMS"(
        "BUS_TERM_ID"	NUMBER  NOT NULL ENABLE,
        "CATEGORY_ID" NUMBER NOT NULL ,
        "BUS_TERM_NAME" VARCHAR2(250) NOT NULL ,
        "DEFINITION"	VARCHAR2(4000) NULL ,
        "DESCRIPTION"	VARCHAR2(4000) NULL ,
        "ACRONYM" VARCHAR2(1) DEFAULT ''N'' NOT NULL ,
        "PUBLISH" VARCHAR2(1) DEFAULT ''N'' NOT NULL ,
        "VALID" VARCHAR2(1) DEFAULT ''1'' ,
        "NOTES"	VARCHAR2(4000) NULL ,
        "TERM_IMAGE" VARCHAR2(4000) NULL ,
        "STATUS"  NUMBER DEFAULT 1 NOT NULL ,
        "DATA_CLASSIFICATION_TYPE"   NUMBER  DEFAULT -1 NOT NULL ,
        "DATA_OBJECT_TYPE"   NUMBER  DEFAULT -1 NOT NULL ,
        "DATA_COLLECTION_TYPE"   NUMBER  DEFAULT -1 NOT NULL ,
        "MEANING_CATEGORY_TYPE"   NUMBER  DEFAULT -1 NOT NULL ,
        "DATA_STEWARD_NAME"   NUMBER  DEFAULT -1 NOT NULL ,
        "USER_DEFINED_1"   VARCHAR2(4000) NULL ,
        "USER_DEFINED_2"   VARCHAR2(4000) NULL ,
        "USER_DEFINED_3"   VARCHAR2(4000) NULL ,
        "USER_DEFINED_4"   VARCHAR2(4000) NULL ,
        "USER_DEFINED_5"   VARCHAR2(4000) NULL ,
        "USER_DEFINED_6"   VARCHAR2(4000) NULL ,
        "USER_DEFINED_7"   VARCHAR2(4000) NULL ,
        "USER_DEFINED_8"   VARCHAR2(4000) NULL ,
        "USER_DEFINED_9"   VARCHAR2(4000) NULL ,
        "USER_DEFINED_10"   VARCHAR2(4000) NULL ,
        CONSTRAINT "BUSINESS_TERMS_BUS_TERM_ID" PRIMARY KEY(BUS_TERM_ID) ,
        CONSTRAINT "FK_BT_CATEGORY_ID" FOREIGN KEY(CATEGORY_ID) REFERENCES BG_CATEGORIES(CATEGORY_ID) ON DELETE CASCADE,
        CONSTRAINT "UK_BGM_TERMS_CAT_ID_NAME" UNIQUE (CATEGORY_ID, BUS_TERM_NAME))';
    END IF;
END;
/
DECLARE
   SEQUENCECHECKERFLAG INT;
BEGIN
    SELECT COUNT(*) INTO SEQUENCECHECKERFLAG FROM ALL_SEQUENCES WHERE SEQUENCE_OWNER = sys_context('userenv', 'current_schema') AND SEQUENCE_NAME = UPPER('BUSINESS_TERMS_SEQ');
    IF SEQUENCECHECKERFLAG = 0 THEN
        EXECUTE IMMEDIATE 'CREATE SEQUENCE   "BUSINESS_TERMS_SEQ"  MINVALUE 1 MAXVALUE 999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE';
    END IF;
END;
/
DECLARE
  TRIGGERCHECKERFLAG INT;
BEGIN
  SELECT COUNT(*) INTO TRIGGERCHECKERFLAG  FROM all_triggers WHERE OWNER = sys_context('userenv', 'current_schema') AND trigger_name = UPPER('BUSINESS_TERMS_INSERT');
  IF TRIGGERCHECKERFLAG = 0 THEN
    EXECUTE IMMEDIATE 'CREATE OR REPLACE TRIGGER  "BUSINESS_TERMS_INSERT" BEFORE INSERT ON BUSINESS_TERMS FOR EACH ROW BEGIN SELECT BUSINESS_TERMS_SEQ.NEXTVAL INTO :new.BUS_TERM_ID FROM DUAL; END;';
    EXECUTE IMMEDIATE 'ALTER TRIGGER  "BUSINESS_TERMS_INSERT" ENABLE';
  END IF;
END;
/
DECLARE
   TABLECHECKERFLAG INT;
   TABLEVERCHECKFLAG INT;
BEGIN
   SELECT COUNT(*) INTO TABLEVERCHECKFLAG FROM ALL_TABLES WHERE OWNER = sys_context( 'userenv', 'current_schema' ) AND TABLE_NAME = UPPER('ADS_ASSOCIATIONS');
   SELECT COUNT(*) INTO TABLECHECKERFLAG FROM ALL_TABLES WHERE OWNER = sys_context( 'userenv', 'current_schema' ) AND TABLE_NAME = UPPER('BG_ASSOCIATED_BUSINESS_TERMS');
   IF TABLECHECKERFLAG = 0 AND TABLEVERCHECKFLAG = 0 THEN
      EXECUTE IMMEDIATE 'CREATE TABLE  "BG_ASSOCIATED_BUSINESS_TERMS"    (
        "ASSOC_BUS_TERM_ID" NUMBER NOT NULL ENABLE,
        "BUS_TERM_ID" NUMBER NOT NULL ENABLE ,
	CONSTRAINT "ASSOC_BUS_TERMS_ABT_ID" PRIMARY KEY(ASSOC_BUS_TERM_ID, BUS_TERM_ID) ,
	CONSTRAINT "FK_ABT_BUS_TERM_ID" FOREIGN KEY(BUS_TERM_ID) REFERENCES BUSINESS_TERMS(BUS_TERM_ID),
	CONSTRAINT "FK_ABT_ASSOC_BUS_TERM_ID" FOREIGN KEY(ASSOC_BUS_TERM_ID) REFERENCES BUSINESS_TERMS(BUS_TERM_ID)   )';
   END IF;
END;
/
DECLARE
   TABLECHECKERFLAG INT;
   TABLEVERCHECKFLAG INT;
BEGIN
   SELECT COUNT(*) INTO TABLEVERCHECKFLAG FROM ALL_TABLES WHERE OWNER = sys_context( 'userenv', 'current_schema' ) AND TABLE_NAME = UPPER('ADS_ASSOCIATIONS');
   SELECT COUNT(*) INTO TABLECHECKERFLAG FROM ALL_TABLES WHERE OWNER = sys_context( 'userenv', 'current_schema' ) AND TABLE_NAME = UPPER('BG_ASSO_TECHNICAL_METADATA');
   IF TABLECHECKERFLAG = 0 AND TABLEVERCHECKFLAG = 0 THEN
      EXECUTE IMMEDIATE 'CREATE TABLE  "BG_ASSO_TECHNICAL_METADATA"(
        "ASSOC_TECH_META_DATA_ID" NUMBER NOT NULL ENABLE,
        "BUS_TERM_ID" NUMBER NOT NULL,
        "OBJECT_TYPE_ID" NUMBER NOT NULL ,
        "OBJECT_ID" VARCHAR2(4000) NOT NULL ,
        CONSTRAINT "BG_ASSOC_TECH_MD_ATM_ID" PRIMARY KEY(ASSOC_TECH_META_DATA_ID) ,
        CONSTRAINT "FK_ATM_BT_ID" FOREIGN KEY(BUS_TERM_ID) REFERENCES BUSINESS_TERMS(BUS_TERM_ID) ON DELETE CASCADE,
        CONSTRAINT "FK_BG_ATM_OBJECT_TYPE_ID" FOREIGN KEY(OBJECT_TYPE_ID) REFERENCES ADS_KEY_VALUE_OBJECTS(OBJECT_TYPE_ID) ON DELETE CASCADE)';
   END IF;
END;
/
DECLARE
   COLUMNCHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO COLUMNCHECKERFLAG FROM ALL_TAB_COLUMNS WHERE  OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME = UPPER('ADS_KEY_VALUE') AND COLUMN_NAME=UPPER('ISPUBLISHED');
   IF COLUMNCHECKERFLAG = 0 THEN
         EXECUTE IMMEDIATE 'ALTER TABLE ADS_KEY_VALUE ADD (ISPUBLISHED INT NULL)';
   END IF;
END;
/
DECLARE
   COLUMNCHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO COLUMNCHECKERFLAG FROM ALL_TAB_COLUMNS WHERE  OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME = UPPER('ADS_KEY_VALUE') AND COLUMN_NAME=UPPER('ISSYSTEMBASED');
   IF COLUMNCHECKERFLAG = 0 THEN
         EXECUTE IMMEDIATE 'ALTER TABLE ADS_KEY_VALUE ADD (ISSYSTEMBASED INT NULL)';
   END IF;
END;
/
DECLARE
TABLECHECKERFLAG INT;
BEGIN
    SELECT COUNT(*) INTO TABLECHECKERFLAG FROM ADS_KEY_VALUE_OBJECTS WHERE  OBJECT_TYPE = 'BGM_CATEGORY';
    IF TABLECHECKERFLAG = 0 THEN
        EXECUTE IMMEDIATE 'INSERT INTO ADS_KEY_VALUE_OBJECTS (OBJECT_TYPE,OBJECT_TABLE,OBJECT_TABLE_COLUMN,OBJECT_PARENT_TYPE,OBJECT_PARENT_COLUMN_ID) VALUES (''BGM_CATEGORY'',''BG_CATEGORIES'',''CATEGORY_ID'','''','''')';
        EXECUTE IMMEDIATE 'INSERT INTO ADS_KEY_VALUE_OBJECTS (OBJECT_TYPE,OBJECT_TABLE,OBJECT_TABLE_COLUMN,OBJECT_PARENT_TYPE,OBJECT_PARENT_COLUMN_ID) VALUES (''BGM_TERM'',''BUSINESS_TERMS'',''BUS_TERM_ID'',''BGM_CATEGORY'',''CATEGORY_ID'')';
    END IF;
END;
/
DECLARE
TABLECHECKERFLAG INT;
BEGIN
    SELECT COUNT(*) INTO TABLECHECKERFLAG FROM MT_DEFINITION WHERE  MTD_NAME = 'BGM_DATA_CLASSIFICATION_TYPE';
    IF TABLECHECKERFLAG = 0 THEN
        EXECUTE IMMEDIATE 'INSERT INTO MT_DEFINITION (MTD_NAME,MTD_DESC,ADS_MODULE)
        VALUES (''BGM_DATA_CLASSIFICATION_TYPE'',''BGM_DATA_CLASSIFICATION_TYPE'',''BGM'')';
        EXECUTE IMMEDIATE 'INSERT INTO MT_DEFINITION (MTD_NAME,MTD_DESC,ADS_MODULE)
        VALUES (''BGM_DATA_OBJECT_TYPE'',''BGM_DATA_OBJECT_TYPE'',''BGM'')';
        EXECUTE IMMEDIATE 'INSERT INTO MT_DEFINITION (MTD_NAME,MTD_DESC,ADS_MODULE)
        VALUES (''BGM_DATA_COLLECTION_TYPE'',''BGM_DATA_COLLECTION_TYPE'',''BGM'')';
        EXECUTE IMMEDIATE 'INSERT INTO MT_DEFINITION (MTD_NAME,MTD_DESC,ADS_MODULE)
        VALUES (''BGM_MEANING_CATEGORY_TYPE'',''BGM_MEANING_CATEGORY_TYPE'',''BGM'')';
        EXECUTE IMMEDIATE 'INSERT INTO MT_DEFINITION (MTD_NAME,MTD_DESC,ADS_MODULE)
        VALUES (''BGM_GLOSSARY_STATUS'',''BGM_GLOSSARY_STATUS'',''BGM'')';
    END IF;
END;
/
DECLARE
TABLECHECKERFLAG INT;
TEMP_OBJECT_TYPE_ID INT;
TEMP_OBJECT_ID INT;
BEGIN
    SELECT OBJECT_TYPE_ID INTO TEMP_OBJECT_TYPE_ID  FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE='MT_DEFINITION';
    SELECT MTD_ID INTO TEMP_OBJECT_ID FROM MT_DEFINITION WHERE  MTD_NAME = 'BGM_DATA_CLASSIFICATION_TYPE' AND ADS_MODULE = 'BGM';
    SELECT COUNT(*) INTO TABLECHECKERFLAG FROM ADS_KEY_VALUE WHERE  KEY_NAME = 'Master' and OBJECT_TYPE_ID = TEMP_OBJECT_TYPE_ID;
    IF TABLECHECKERFLAG = 0 THEN
        INSERT INTO ADS_KEY_VALUE(KEY_NAME,KEY_VALUE,OBJECT_TYPE_ID,OBJECT_ID,DATATYPE_ID,KV_ORDER,ISPUBLISHED)
            VALUES('Master','Master',TEMP_OBJECT_TYPE_ID,TEMP_OBJECT_ID,'1','1','1');
        INSERT INTO ADS_KEY_VALUE(KEY_NAME,KEY_VALUE,OBJECT_TYPE_ID,OBJECT_ID,DATATYPE_ID,KV_ORDER,ISPUBLISHED)
            VALUES('Reference','Reference',TEMP_OBJECT_TYPE_ID,TEMP_OBJECT_ID,'1','2','1');
        INSERT INTO ADS_KEY_VALUE(KEY_NAME,KEY_VALUE,OBJECT_TYPE_ID,OBJECT_ID,DATATYPE_ID,KV_ORDER,ISPUBLISHED)
            VALUES('Derived','Derived',TEMP_OBJECT_TYPE_ID,TEMP_OBJECT_ID,'1','3','1');
        INSERT INTO ADS_KEY_VALUE(KEY_NAME,KEY_VALUE,OBJECT_TYPE_ID,OBJECT_ID,DATATYPE_ID,KV_ORDER,ISPUBLISHED)
            VALUES('Transactional','Transactional',TEMP_OBJECT_TYPE_ID,TEMP_OBJECT_ID,'1','4','1');
        INSERT INTO ADS_KEY_VALUE(KEY_NAME,KEY_VALUE,OBJECT_TYPE_ID,OBJECT_ID,DATATYPE_ID,KV_ORDER,ISPUBLISHED)
            VALUES('Operational','Operational',TEMP_OBJECT_TYPE_ID,TEMP_OBJECT_ID,'1','5','1');
    END IF;
END;
/
DECLARE
TABLECHECKERFLAG INT;
TEMP_OBJECT_TYPE_ID INT;
TEMP_OBJECT_ID INT;
BEGIN
    SELECT OBJECT_TYPE_ID INTO TEMP_OBJECT_TYPE_ID  FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE='MT_DEFINITION';
    SELECT MTD_ID INTO TEMP_OBJECT_ID FROM MT_DEFINITION WHERE  MTD_NAME = 'BGM_DATA_OBJECT_TYPE' AND ADS_MODULE = 'BGM';
    SELECT COUNT(*) INTO TABLECHECKERFLAG FROM ADS_KEY_VALUE WHERE  KEY_NAME = 'Business Data Element' and OBJECT_TYPE_ID = TEMP_OBJECT_TYPE_ID;
    IF TABLECHECKERFLAG = 0 THEN
        INSERT INTO ADS_KEY_VALUE(KEY_NAME,KEY_VALUE,OBJECT_TYPE_ID,OBJECT_ID,DATATYPE_ID,KV_ORDER,ISPUBLISHED)
        VALUES('Business Data Element','Business Data Element',TEMP_OBJECT_TYPE_ID,TEMP_OBJECT_ID,'1','1','1');
        INSERT INTO ADS_KEY_VALUE(KEY_NAME,KEY_VALUE,OBJECT_TYPE_ID,OBJECT_ID,DATATYPE_ID,KV_ORDER,ISPUBLISHED)
        VALUES('Data Collection','Data Collection',TEMP_OBJECT_TYPE_ID,TEMP_OBJECT_ID,'1','2','1');
        INSERT INTO ADS_KEY_VALUE(KEY_NAME,KEY_VALUE,OBJECT_TYPE_ID,OBJECT_ID,DATATYPE_ID,KV_ORDER,ISPUBLISHED)
        VALUES('Physical Data Element','Physical Data Element',TEMP_OBJECT_TYPE_ID,TEMP_OBJECT_ID,'1','3','1');
    END IF;
END;
/
DECLARE
TABLECHECKERFLAG INT;
TEMP_OBJECT_TYPE_ID INT;
TEMP_OBJECT_ID INT;
BEGIN
    SELECT OBJECT_TYPE_ID INTO TEMP_OBJECT_TYPE_ID  FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE='MT_DEFINITION';
    SELECT MTD_ID INTO TEMP_OBJECT_ID FROM MT_DEFINITION WHERE  MTD_NAME = 'BGM_DATA_COLLECTION_TYPE' AND ADS_MODULE = 'BGM';
    SELECT COUNT(*) INTO TABLECHECKERFLAG FROM ADS_KEY_VALUE WHERE  KEY_NAME = 'Report' and OBJECT_TYPE_ID = TEMP_OBJECT_TYPE_ID;
    IF TABLECHECKERFLAG = 0 THEN
        INSERT INTO ADS_KEY_VALUE(KEY_NAME,KEY_VALUE,OBJECT_TYPE_ID,OBJECT_ID,DATATYPE_ID,KV_ORDER,ISPUBLISHED)
        VALUES('Report','Report',TEMP_OBJECT_TYPE_ID,TEMP_OBJECT_ID,'1','1','1');
        INSERT INTO ADS_KEY_VALUE(KEY_NAME,KEY_VALUE,OBJECT_TYPE_ID,OBJECT_ID,DATATYPE_ID,KV_ORDER,ISPUBLISHED)
        VALUES('Report Section','Report Section',TEMP_OBJECT_TYPE_ID,TEMP_OBJECT_ID,'1','2','1');
        INSERT INTO ADS_KEY_VALUE(KEY_NAME,KEY_VALUE,OBJECT_TYPE_ID,OBJECT_ID,DATATYPE_ID,KV_ORDER,ISPUBLISHED)
        VALUES('Screen','Screen',TEMP_OBJECT_TYPE_ID,TEMP_OBJECT_ID,'1','3','1');
        INSERT INTO ADS_KEY_VALUE(KEY_NAME,KEY_VALUE,OBJECT_TYPE_ID,OBJECT_ID,DATATYPE_ID,KV_ORDER,ISPUBLISHED)
        VALUES('Dashboard','Dashboard',TEMP_OBJECT_TYPE_ID,TEMP_OBJECT_ID,'1','4','1');
        INSERT INTO ADS_KEY_VALUE(KEY_NAME,KEY_VALUE,OBJECT_TYPE_ID,OBJECT_ID,DATATYPE_ID,KV_ORDER,ISPUBLISHED)
        VALUES('Extract','Extract',TEMP_OBJECT_TYPE_ID,TEMP_OBJECT_ID,'1','5','1');
        INSERT INTO ADS_KEY_VALUE(KEY_NAME,KEY_VALUE,OBJECT_TYPE_ID,OBJECT_ID,DATATYPE_ID,KV_ORDER,ISPUBLISHED)
        VALUES('API','API',TEMP_OBJECT_TYPE_ID,TEMP_OBJECT_ID,'1','6','1');
    END IF;
END;
/
DECLARE
TABLECHECKERFLAG INT;
TEMP_OBJECT_TYPE_ID INT;
TEMP_OBJECT_ID INT;
BEGIN
    SELECT OBJECT_TYPE_ID INTO TEMP_OBJECT_TYPE_ID  FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE='MT_DEFINITION';
    SELECT MTD_ID INTO TEMP_OBJECT_ID FROM MT_DEFINITION WHERE  MTD_NAME = 'BGM_MEANING_CATEGORY_TYPE' AND ADS_MODULE = 'BGM';
    SELECT COUNT(*) INTO TABLECHECKERFLAG FROM ADS_KEY_VALUE WHERE  KEY_NAME = 'Conceptual' and OBJECT_TYPE_ID = TEMP_OBJECT_TYPE_ID;
    IF TABLECHECKERFLAG = 0 THEN
        INSERT INTO ADS_KEY_VALUE(KEY_NAME,KEY_VALUE,OBJECT_TYPE_ID,OBJECT_ID,DATATYPE_ID,KV_ORDER,ISPUBLISHED)
        VALUES('Conceptual','Conceptual',TEMP_OBJECT_TYPE_ID,TEMP_OBJECT_ID,'1','1','1');
        INSERT INTO ADS_KEY_VALUE(KEY_NAME,KEY_VALUE,OBJECT_TYPE_ID,OBJECT_ID,DATATYPE_ID,KV_ORDER,ISPUBLISHED)
        VALUES('Logical','Logical',TEMP_OBJECT_TYPE_ID,TEMP_OBJECT_ID,'1','2','1');
        INSERT INTO ADS_KEY_VALUE(KEY_NAME,KEY_VALUE,OBJECT_TYPE_ID,OBJECT_ID,DATATYPE_ID,KV_ORDER,ISPUBLISHED)
        VALUES('Physical','Physical',TEMP_OBJECT_TYPE_ID,TEMP_OBJECT_ID,'1','3','1');
    END IF;
END;
/
DECLARE
   TABLECHECKERFLAG INT;
   TEMP_OBJECT_TYPE_ID INT;
   TEMP_OBJECT_ID INT;
BEGIN
    SELECT OBJECT_TYPE_ID INTO TEMP_OBJECT_TYPE_ID  FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE='MT_DEFINITION';
    SELECT MTD_ID INTO TEMP_OBJECT_ID FROM MT_DEFINITION WHERE  MTD_NAME = 'BGM_GLOSSARY_STATUS' AND ADS_MODULE = 'BGM';
    SELECT COUNT(*) INTO TABLECHECKERFLAG FROM ADS_KEY_VALUE WHERE  KEY_NAME = 'Pending Review' and OBJECT_TYPE_ID = TEMP_OBJECT_TYPE_ID;
    IF TABLECHECKERFLAG = 0 THEN
        INSERT INTO ADS_KEY_VALUE(KEY_NAME,KEY_VALUE,OBJECT_TYPE_ID,OBJECT_ID,DATATYPE_ID,KV_ORDER,ISPUBLISHED)
        VALUES('Pending Review','#3385c1',TEMP_OBJECT_TYPE_ID,TEMP_OBJECT_ID,'1','1','1');
        INSERT INTO ADS_KEY_VALUE(KEY_NAME,KEY_VALUE,OBJECT_TYPE_ID,OBJECT_ID,DATATYPE_ID,KV_ORDER,ISPUBLISHED)
        VALUES('Pending Approval','#eeea36',TEMP_OBJECT_TYPE_ID,TEMP_OBJECT_ID,'1','2','1');
        INSERT INTO ADS_KEY_VALUE(KEY_NAME,KEY_VALUE,OBJECT_TYPE_ID,OBJECT_ID,DATATYPE_ID,KV_ORDER,ISPUBLISHED)
        VALUES('Approved','#00B152',TEMP_OBJECT_TYPE_ID,TEMP_OBJECT_ID,'1','3','1');
        INSERT INTO ADS_KEY_VALUE(KEY_NAME,KEY_VALUE,OBJECT_TYPE_ID,OBJECT_ID,DATATYPE_ID,KV_ORDER,ISPUBLISHED)
        VALUES('Published','#a9ee36',TEMP_OBJECT_TYPE_ID,TEMP_OBJECT_ID,'1','4','1');
        INSERT INTO ADS_KEY_VALUE(KEY_NAME,KEY_VALUE,OBJECT_TYPE_ID,OBJECT_ID,DATATYPE_ID,KV_ORDER,ISPUBLISHED)
        VALUES('Rejected','#ee3639',TEMP_OBJECT_TYPE_ID,TEMP_OBJECT_ID,'1','5','1');
    END IF;
END;
/
DECLARE
   TABLECHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO TABLECHECKERFLAG FROM all_VIEWS WHERE OWNER = sys_context('userenv', 'current_schema') AND VIEW_NAME = UPPER('V_STCM_JSON');
   IF TABLECHECKERFLAG = 1 THEN
      EXECUTE IMMEDIATE 'DROP VIEW V_STCM_JSON';
   END IF;
END;
/
CREATE OR REPLACE FORCE VIEW  "V_STCM_JSON" AS
        SELECT sdd.SYSTEM_ID,sdd.SYSTEM_NAME,sce.SCE_ID, sce.SYSTEM_ENVIRONMENT_NAME,stm.STM_ID,stm.TABLE_NAME, stcm.COLUMN_NAME,
       (concat(concat(concat('{SDD:',sdd.SYSTEM_NAME)  , concat(',SCE:' , sce.SYSTEM_ENVIRONMENT_NAME) ),concat(',STM:' ,concat( stm.TABLE_NAME ,concat(',SCTM:' , concat(stcm.COLUMN_NAME,'}')))))) as json, stcm.valid, stcm.stcm_id
        FROM   SYSTEM_TABLE_COLUMNS_METADATA  STCM
        left join SYSTEM_TABLE_METADATA  STM on STM.stm_id = STCM.STM_ID
        left join SYS_CON_ENVIRONMENTS  SCE on SCE.sce_id = STM.sce_id
        left join SYSTEM_DEFINITION_DETAILS  SDD on SDD.SYSTEM_ID = SCE.SYSTEM_ID;
/
DECLARE
DATACHECKERFLAG INT;
BEGIN
    SELECT COUNT(*) INTO DATACHECKERFLAG  FROM APP_PREFERENCES  WHERE PREFERENCE_NAME = 'BGM_DATA_COLLECTION_TYPE';
    IF DATACHECKERFLAG = 0 THEN
        EXECUTE IMMEDIATE 'INSERT INTO APP_PREFERENCES(PREFERENCE_NAME,PREFERENCE_VALUE) VALUES(''BGM_DATA_COLLECTION_TYPE'', ''true'')';
        EXECUTE IMMEDIATE 'INSERT INTO APP_PREFERENCES(PREFERENCE_NAME,PREFERENCE_VALUE) VALUES(''BGM_DATA_OBJECT_TYPE'', ''true'')';
        EXECUTE IMMEDIATE 'INSERT INTO APP_PREFERENCES(PREFERENCE_NAME,PREFERENCE_VALUE) VALUES(''BGM_MEANING_CATEGORY_TYPE'', ''true'')';
    END IF;
END;
/
DECLARE
DATACHECKERFLAG INT;
BEGIN
    SELECT COUNT(*) INTO DATACHECKERFLAG FROM "ADS_MODULES" WHERE MODULE_KEY = 'com.ads.mm.permission.bgm';
    IF DATACHECKERFLAG = 0 THEN
        INSERT INTO ADS_MODULES(MODULE_ID, MODULE_NAME, MODULE_KEY, MODULE_ORDER, MODULE_FORWARD)
        (SELECT 13,'Business Glossary Manager', 'com.ads.mm.permission.bgm', 13, 'businessglossarymanager' FROM DUAL);
    END IF;
END;
/
DECLARE
   COLUMNCHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO COLUMNCHECKERFLAG FROM ALL_TAB_COLUMNS WHERE  OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME = UPPER('SYS_CON_ENVIRONMENTS') AND COLUMN_NAME=UPPER('DATABASE_OPTIONS');
   IF COLUMNCHECKERFLAG = 0 THEN
    EXECUTE IMMEDIATE 'ALTER TABLE SYS_CON_ENVIRONMENTS ADD DATABASE_OPTIONS  VARCHAR2(4000) NULL ';
    EXECUTE IMMEDIATE 'ALTER TABLE SYS_CON_ENVIRONMENTS ADD DATABASE_POOL_TYPE  VARCHAR2(100) NULL ';
   END IF;
END;
/
DECLARE
   TABLECHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO TABLECHECKERFLAG FROM "ADS_KEY_VALUE_OBJECTS" WHERE  OBJECT_TYPE = 'SM_DATABASE_OPTIONS';
   IF TABLECHECKERFLAG = 0 THEN
        INSERT INTO ADS_KEY_VALUE_OBJECTS (OBJECT_TYPE,OBJECT_TABLE,OBJECT_TABLE_COLUMN,OBJECT_PARENT_TYPE,OBJECT_PARENT_COLUMN_ID)
        (SELECT 'SM_DATABASE_OPTIONS','','','','' FROM DUAL);
    END IF;
END;
/
DECLARE
   TABLECHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO TABLECHECKERFLAG FROM MT_DEFINITION WHERE  MTD_NAME = 'SM_DATABASE_OPTIONS' AND ADS_MODULE = 'SM';
    IF TABLECHECKERFLAG = 0 THEN
        INSERT INTO MT_DEFINITION (MTD_NAME,MTD_DESC,ADS_MODULE)
        (SELECT 'SM_DATABASE_OPTIONS','','SM' FROM DUAL);
    END IF;
END;
/
DECLARE
TABLECHECKERFLAG1 INT;
TABLECHECKERFLAG2 INT;
TABLECHECKERFLAG3 INT;
TEMP_OBJECT_TYPE_ID INT;
TEMP_OBJECT_ID INT;
BEGIN
    SELECT COUNT(*) INTO TABLECHECKERFLAG1  FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE='SM_DATABASE_OPTIONS';
    SELECT COUNT(*) INTO TABLECHECKERFLAG2 FROM MT_DEFINITION WHERE  MTD_NAME = 'SM_DATABASE_OPTIONS' AND ADS_MODULE = 'SM';
    SELECT OBJECT_TYPE_ID INTO TEMP_OBJECT_TYPE_ID  FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE='SM_DATABASE_OPTIONS';
    SELECT MTD_ID INTO TEMP_OBJECT_ID FROM MT_DEFINITION WHERE  MTD_NAME = 'SM_DATABASE_OPTIONS' AND ADS_MODULE = 'SM';
    SELECT COUNT(*) INTO TABLECHECKERFLAG3 FROM ADS_KEY_VALUE WHERE OBJECT_TYPE_ID  = TEMP_OBJECT_TYPE_ID AND OBJECT_ID = TEMP_OBJECT_ID;
    IF TABLECHECKERFLAG1 = 1 AND TABLECHECKERFLAG2 = 1 AND TABLECHECKERFLAG3 = 0 THEN
        INSERT INTO ADS_KEY_VALUE(KEY_NAME,KEY_VALUE,OBJECT_TYPE_ID,OBJECT_ID,DATATYPE_ID,KV_TYPE,LABEL_WIDTH,CONTROL_WIDTH,KV_ORDER,COMPONENT,DEFAULTVALUE)      VALUES('TransactionIsolation','Transaction Isolation',TEMP_OBJECT_TYPE_ID,TEMP_OBJECT_ID,'1','Combo Box','','','0','','TRANSACTION_READ_COMMITTED');
        INSERT INTO ADS_KEY_VALUE(KEY_NAME,KEY_VALUE,OBJECT_TYPE_ID,OBJECT_ID,DATATYPE_ID,KV_TYPE,LABEL_WIDTH,CONTROL_WIDTH,KV_ORDER,COMPONENT,DEFAULTVALUE)      VALUES('IsReadOnly','Read Only',TEMP_OBJECT_TYPE_ID,TEMP_OBJECT_ID,'1','Check Box','','','1','','false');
        INSERT INTO ADS_KEY_VALUE(KEY_NAME,KEY_VALUE,OBJECT_TYPE_ID,OBJECT_ID,DATATYPE_ID,KV_TYPE,LABEL_WIDTH,CONTROL_WIDTH,KV_ORDER,COMPONENT,DEFAULTVALUE)      VALUES('IsAutoCommit','Auto Commit',TEMP_OBJECT_TYPE_ID,TEMP_OBJECT_ID,'1','Check Box','','','2','','true');
        INSERT INTO ADS_KEY_VALUE(KEY_NAME,KEY_VALUE,OBJECT_TYPE_ID,OBJECT_ID,DATATYPE_ID,KV_TYPE,LABEL_WIDTH,CONTROL_WIDTH,KV_ORDER,COMPONENT,DEFAULTVALUE)      VALUES('TestConnectionQuery','Test Connection Query',TEMP_OBJECT_TYPE_ID,TEMP_OBJECT_ID,'1','Text Box','','','3','','');
        SELECT KV_ID INTO TEMP_OBJECT_ID FROM ADS_KEY_VALUE WHERE  KEY_NAME = 'TransactionIsolation' AND  TEMP_OBJECT_TYPE_ID IS NOT NULL AND TEMP_OBJECT_ID IS NOT NULL;
        SELECT OBJECT_TYPE_ID INTO TEMP_OBJECT_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE='ADS_KEY_VALUE';
        INSERT INTO ADS_KEY_VALUE(KEY_NAME,KEY_VALUE,OBJECT_TYPE_ID,OBJECT_ID,DATATYPE_ID,KV_TYPE,LABEL_WIDTH,CONTROL_WIDTH,KV_ORDER,COMPONENT,DEFAULTVALUE)      VALUES('TRANSACTION_NONE','TRANSACTION_NONE',TEMP_OBJECT_TYPE_ID,TEMP_OBJECT_ID,'1','combovalues','','','1','','');
        INSERT INTO ADS_KEY_VALUE(KEY_NAME,KEY_VALUE,OBJECT_TYPE_ID,OBJECT_ID,DATATYPE_ID,KV_TYPE,LABEL_WIDTH,CONTROL_WIDTH,KV_ORDER,COMPONENT,DEFAULTVALUE)      VALUES('TRANSACTION_READ_COMMITTED','TRANSACTION_READ_COMMITTED',TEMP_OBJECT_TYPE_ID,TEMP_OBJECT_ID,'1','combovalues','','','1','','');
        INSERT INTO ADS_KEY_VALUE(KEY_NAME,KEY_VALUE,OBJECT_TYPE_ID,OBJECT_ID,DATATYPE_ID,KV_TYPE,LABEL_WIDTH,CONTROL_WIDTH,KV_ORDER,COMPONENT,DEFAULTVALUE)      VALUES('TRANSACTION_READ_UNCOMMITTED','TRANSACTION_READ_UNCOMMITTED',TEMP_OBJECT_TYPE_ID,TEMP_OBJECT_ID,'1','combovalues','','','1','','');
        INSERT INTO ADS_KEY_VALUE(KEY_NAME,KEY_VALUE,OBJECT_TYPE_ID,OBJECT_ID,DATATYPE_ID,KV_TYPE,LABEL_WIDTH,CONTROL_WIDTH,KV_ORDER,COMPONENT,DEFAULTVALUE)      VALUES('TRANSACTION_REPEATABLE_READ','TRANSACTION_REPEATABLE_READ',TEMP_OBJECT_TYPE_ID,TEMP_OBJECT_ID,'1','combovalues','','','1','','');
        INSERT INTO ADS_KEY_VALUE(KEY_NAME,KEY_VALUE,OBJECT_TYPE_ID,OBJECT_ID,DATATYPE_ID,KV_TYPE,LABEL_WIDTH,CONTROL_WIDTH,KV_ORDER,COMPONENT,DEFAULTVALUE)      VALUES('TRANSACTION_SERIALIZABLE','TRANSACTION_SERIALIZABLE',TEMP_OBJECT_TYPE_ID,TEMP_OBJECT_ID,'1','combovalues','','','1','','');
    END IF;
END;
/
DECLARE
   PREFERENCECHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO PREFERENCECHECKERFLAG FROM APP_PREFERENCES WHERE PREFERENCE_NAME = 'ADS_EMAIL_SETTINGS';
   IF PREFERENCECHECKERFLAG = 0 THEN
      INSERT INTO APP_PREFERENCES( PREFERENCE_NAME, PREFERENCE_VALUE)
      (SELECT 'ADS_EMAIL_SETTINGS','smtp' FROM DUAL);
   END IF;
END;
/
DECLARE
   COLUMNCHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO COLUMNCHECKERFLAG FROM ALL_TAB_COLUMNS WHERE  OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME = UPPER('SYSTEM_TABLE_METADATA') AND COLUMN_NAME=UPPER('METADATA_SOURCE');
   IF COLUMNCHECKERFLAG = 0 THEN
    EXECUTE IMMEDIATE 'ALTER TABLE SYSTEM_TABLE_METADATA ADD METADATA_SOURCE CHAR(1) DEFAULT ''S'' NULL';
   END IF;
END;
/
DECLARE
   COLUMNCHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO COLUMNCHECKERFLAG FROM ALL_TAB_COLUMNS WHERE  OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME = UPPER('SYSTEM_TABLE_COLUMNS_METADATA') AND COLUMN_NAME=UPPER('METADATA_SOURCE');
   IF COLUMNCHECKERFLAG = 0 THEN
    EXECUTE IMMEDIATE 'ALTER TABLE SYSTEM_TABLE_COLUMNS_METADATA ADD METADATA_SOURCE CHAR(1) DEFAULT ''S'' NULL';
   END IF;
END;
/
DECLARE
TABLECHECKERFLAG INT;
BEGIN
    SELECT COUNT(*) INTO TABLECHECKERFLAG FROM ALL_TABLES WHERE OWNER = sys_context( 'userenv', 'current_schema' ) AND TABLE_NAME = UPPER('REQM_EMAIL_TEMPLATE');
    IF TABLECHECKERFLAG = 0 THEN
        EXECUTE IMMEDIATE 'CREATE TABLE REQM_EMAIL_TEMPLATE  (
            "REQM_ET_ID"    NUMBER NOT NULL ENABLE,
            "TEMPLATE_NAME"    VARCHAR2(250) NOT NULL,
            "TEMPLATE_ENABLED"  char(1) DEFAULT ''1'' NOT NULL ENABLE,
            "TRIGGER_ON"         VARCHAR2(250) NULL,
            "EMAIL_SUBJECT"      VARCHAR2(4000) NOT NULL,
            "ENABLE_COMMENTS"    char(1) DEFAULT ''1'' NOT NULL ENABLE,
            "TEMPLATE_TYPE_ID"	  NUMBER NOT NULL,
            CONSTRAINT REQM_ET_ID PRIMARY KEY ("REQM_ET_ID") ENABLE ,
            CONSTRAINT UK_REQM_TEMPLATE_NAME UNIQUE ("TEMPLATE_NAME") ENABLE)';
    END IF;
END;
/
DECLARE
SEQUENCECHECKERFLAG INT;
BEGIN
    SELECT COUNT(*) INTO SEQUENCECHECKERFLAG FROM ALL_SEQUENCES WHERE SEQUENCE_OWNER = sys_context('userenv', 'current_schema') AND SEQUENCE_NAME = UPPER('REQM_EMAIL_TEMPLATE_SEQ');
    IF SEQUENCECHECKERFLAG = 0 THEN
        EXECUTE IMMEDIATE 'CREATE SEQUENCE   "REQM_EMAIL_TEMPLATE_SEQ"  MINVALUE 1 MAXVALUE 999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE';
    END IF;
END;
/
DECLARE
TRIGGERCHECKERFLAG INT;
BEGIN
  SELECT COUNT(*)  INTO TRIGGERCHECKERFLAG FROM all_triggers WHERE OWNER = sys_context('userenv', 'current_schema') AND trigger_name = UPPER('REQM_EMAIL_TEMPLATE_INSERT');
    IF TRIGGERCHECKERFLAG = 0 THEN
        EXECUTE IMMEDIATE 'CREATE OR REPLACE TRIGGER  "REQM_EMAIL_TEMPLATE_INSERT" BEFORE INSERT ON REQM_EMAIL_TEMPLATE FOR EACH ROW BEGIN SELECT REQM_EMAIL_TEMPLATE_SEQ.NEXTVAL INTO :new.REQM_ET_ID FROM DUAL; END;';
        EXECUTE IMMEDIATE 'ALTER TRIGGER  "REQM_EMAIL_TEMPLATE_INSERT" ENABLE';
    END IF;
END;
/
DECLARE
TABLECHECKERFLAG INT;
BEGIN
    SELECT COUNT(*) INTO TABLECHECKERFLAG FROM ADS_KEY_VALUE_OBJECTS WHERE  OBJECT_TYPE = 'REQM_EMAIL_TEMPLATE';
    IF TABLECHECKERFLAG = 0 THEN
            EXECUTE IMMEDIATE 'INSERT INTO ADS_KEY_VALUE_OBJECTS (OBJECT_TYPE,OBJECT_TABLE,OBJECT_TABLE_COLUMN,OBJECT_PARENT_TYPE,OBJECT_PARENT_COLUMN_ID) VALUES (''REQM_EMAIL_TEMPLATE'',''REQM_EMAIL_TEMPLATE'',''REQM_ET_ID'','''','''')';
    END IF;
END;
/
DECLARE
   PREFERENCECHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO PREFERENCECHECKERFLAG FROM APP_PREFERENCES WHERE PREFERENCE_NAME = 'SEND_EMAIL_ON_NEW_SPECIFICATION_SUBJECT';
   IF PREFERENCECHECKERFLAG = 0 THEN
      INSERT INTO APP_PREFERENCES( PREFERENCE_NAME, PREFERENCE_VALUE)
      (SELECT 'SEND_EMAIL_ON_NEW_SPECIFICATION_SUBJECT','Requirements Manager Specification Status - DO NOT REPLY' FROM DUAL
        UNION
        SELECT 'ADD_COMMENTS_ON_NEW_SPECIFICATION_CREATION','true' FROM DUAL
	UNION
	SELECT 'SEND_EMAIL_ON_NEW_SPECIFICATION_CREATION','true' FROM DUAL
	UNION
	SELECT 'SEND_EMAIL_ON_NEW_SPECIFICATION_MESSAGE','<font style="font-family: Century Gothic; font-size: 10pt;" >Hi,<br><br> This is a system generated email notification.</font> <font style="font-family: Century Gothic; font-size: 11pt;" ><br><br><b>Action Performed:</b> @ACTIONTYPE@ @ACTION@ </font><br><br><TABLE style=''font-family: Century Gothic; font-size: 11pt;'' border=1 cellPadding=5>
												<tr><th colspan = 2><b>Specification Details</b></th>
												<TR><TD><B>Name </B></TD><TD>@SpecificationName@</TD></TR>
                                                <TR><TD><B>Id </B></TD><TD>@SpecificationId@</TD></TR>
												<TR><TD><B>Version </B></TD><TD>@Version@</TD></TR>
                                                <TR><TD><B>Project Name </B></TD><TD>@ProjectName@</TD></TR>
                                                <TR><TD><B>Subject Name </B></TD><TD>@SubjectName@</TD></TR>
                                                <TR><TD><B>Created By </B></TD><TD>@CreatedBy@</TD></TR>
                                                <TR><TD><B>Created Date </B></TD><TD>@CreatedDate@</TD></TR>
                                                <TR><TD><B>Modified By </B></TD><TD>@ModifiedBy@</TD></TR>
                                                <TR><TD><B>Modified Date </B></TD><TD>@ModifiedDate@</TD></TR>
                                                </TABLE>
												<BR><font style="font-family: Century Gothic; font-size: 11pt;" ><b>Note: </b>This mailbox is not monitored. DO NOT REPLY TO THIS EMAIL.</font>' FROM DUAL
	UNION
	SELECT 'SEND_EMAIL_ON_NEW_SPECIFICATION_COMMENTS_MESSAGE','<BR><b><font style="font-family: Century Gothic; font-size: 11pt;" >Comments:</b><br>@comments@ </font><BR>' FROM DUAL
	UNION
	SELECT 'SEND_EMAIL_ON_NEW_ARTIFACT_SUBJECT','Requirements Manager Artifact Status - DO NOT REPLY' FROM DUAL
	UNION
	SELECT 'ADD_COMMENTS_ON_NEW_ARTIFACT_CREATION','true' FROM DUAL
	UNION
	SELECT 'SEND_EMAIL_ON_NEW_ARTIFACT_CREATION','true' FROM DUAL
	UNION
	SELECT 'SEND_EMAIL_ON_NEW_ARTIFACT_MESSAGE','<font style="font-family: Century Gothic; font-size: 10pt;" >Hi,<br><br> This is a system generated email notification.</font> <font style="font-family: Century Gothic; font-size: 11pt;" ><br><br><b>Action Performed:</b> @ACTIONTYPE@ @ACTION@ </font><br><br><TABLE style=''font-family: Century Gothic; font-size: 11pt;'' border=1 cellPadding=5>
												<tr><th colspan = 2><b>Artifact Details</b></th>
                                                <TR><TD><B>Name</B></TD><TD>@ArtifactName@</TD></TR>
												<TR><TD><B>Id</B></TD><TD>@ArtifactId@</TD></TR>
                                                <TR><TD><B>Created By</B></TD><TD>@CreatedBy@</TD></TR>
                                                <TR><TD><B>Created Date</B></TD><TD>@CreatedDate@</TD></TR>
                                                <TR><TD><B>Modified By</B></TD><TD>@ModifiedBy@</TD></TR>
                                                <TR><TD><B>Modified Date</B></TD><TD>@ModifiedDate@</TD></TR>
                                                </TABLE>
                                              <BR><font style="font-family: Century Gothic; font-size: 11pt;" ><b>Note: </b>This mailbox is not monitored. DO NOT REPLY TO THIS EMAIL.</font>' FROM DUAL
	UNION
	SELECT 'SEND_EMAIL_ON_NEW_ARTIFACT_COMMENTS_MESSAGE','<BR><b><font style="font-family: Century Gothic; font-size: 11pt;" >Comments:</b><br>@comments@ </font><BR>' FROM DUAL
	UNION
	SELECT 'SEND_EMAIL_ON_NEW_SPECIFICATION_ARTIFACT_SUBJECT','Requirements Manager Specification Artifact Status - DO NOT REPLY' FROM DUAL
        UNION
        SELECT 'ADD_COMMENTS_ON_NEW_SPECIFICATION_ARTIFACT_CREATION','true' FROM DUAL
	UNION
	SELECT 'SEND_EMAIL_ON_NEW_SPECIFICATION_ARTIFACT_CREATION','true' FROM DUAL
	UNION
	SELECT 'SEND_EMAIL_ON_NEW_SPECIFICATION_ARTIFACT_MESSAGE','<font style="font-family: Century Gothic; font-size: 10pt;" >Hi,<br><br> This is a system generated email notification.</font> <font style="font-family: Century Gothic; font-size: 11pt;" ><br><br><b>Action Performed:</b> @ACTIONTYPE@ @ACTION@ </font><br><br><TABLE style=''font-family: Century Gothic; font-size: 11pt;'' border=1 cellPadding=5>
												<tr><th colspan = 2><b>Specification Artifact Details</b></th>
												<TR><TD><B>Name</B></TD><TD>@SpecArtifactName@</TD></TR>
                                                <TR><TD><B>Id</B></TD><TD>@SpecArtifactId@</TD></TR>
                                                <TR><TD><B>Created By</B></TD><TD>@CreatedBy@</TD></TR>
                                                <TR><TD><B>Created Date</B></TD><TD>@CreatedDate@</TD></TR>
                                                <TR><TD><B>Modified By</B></TD><TD>@ModifiedBy@</TD></TR>
                                                <TR><TD><B>Modified Date</B></TD><TD>@ModifiedDate@</TD></TR>
                                                </TABLE>
                                                <BR><font style="font-family: Century Gothic; font-size: 11pt;" ><b>Note: </b>This mailbox is not monitored. DO NOT REPLY TO THIS EMAIL.</font>' FROM DUAL
	UNION
	SELECT 'SEND_EMAIL_ON_NEW_SPECIFICATION_ARTIFACT_COMMENTS_MESSAGE','<BR><b><font style="font-family: Century Gothic; font-size: 11pt;" >Comments:</b><br>@comments@ </font><BR>' FROM DUAL);
   END IF;
END;
/
DECLARE
COLUMNCHECKERFLAG INT;
VERSIONCHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO COLUMNCHECKERFLAG FROM ALL_TAB_COLUMNS WHERE  OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME = UPPER('REPM_REPORTS') AND COLUMN_NAME=UPPER('CHART_COLORS');
   IF COLUMNCHECKERFLAG = 0 THEN
        EXECUTE IMMEDIATE 'ALTER TABLE REPM_REPORTS ADD CHART_COLORS varchar2(500) NULL';
        EXECUTE IMMEDIATE 'ALTER TABLE REPM_REPORTS ADD CHART_TYPE varchar2(100) NULL';
        EXECUTE IMMEDIATE 'ALTER TABLE REPM_REPORTS ADD CHART_PROPERTIES varchar2(4000) NULL';
        EXECUTE IMMEDIATE 'ALTER TABLE REPM_REPORTS ADD ENABLE CHAR DEFAULT ''0'' NOT NULL';
        EXECUTE IMMEDIATE 'ALTER TABLE REPM_REPORTS ADD REPORT_ENABLE CHAR DEFAULT ''0'' NOT NULL';
        EXECUTE IMMEDIATE 'ALTER TABLE REPM_REPORTS ADD CHART_ENABLE CHAR DEFAULT ''0'' NOT NULL';
        EXECUTE IMMEDIATE 'ALTER TABLE REPM_REPORTS ADD ROWS_LIMIT varchar2(50) NULL';
        EXECUTE IMMEDIATE 'ALTER TABLE REPM_DASHBAORD_COMPONENT ADD DASHBOARD_COMPONENT_ID NUMBER NOT NULL';
        EXECUTE IMMEDIATE 'ALTER TABLE REPM_DASHBAORD_COMPONENT ADD NAME varchar2(300)  NULL';
        EXECUTE IMMEDIATE 'ALTER TABLE REPM_COLOR_PALLETTE  MODIFY COLOR_PALLETTE_DATA VARCHAR2(4000)';
        EXECUTE IMMEDIATE 'ALTER TABLE REPM_REPORTS ADD COLUMNS_WIDTH VARCHAR(4000) NULL';
        EXECUTE IMMEDIATE 'ALTER TABLE REPM_DASHBAORD_COMPONENT ADD LAYOUT_CELL CHAR(1) NULL';
        EXECUTE IMMEDIATE 'ALTER TABLE REPM_DASHBOARDS ADD LAYOUT_PATTERN varchar2(500) NULL';
   END IF;
END;
/
DECLARE
   TABLECHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO TABLECHECKERFLAG FROM ALL_TABLES WHERE OWNER = sys_context( 'userenv', 'current_schema' ) AND TABLE_NAME = UPPER('REPM_CHARTS');
   IF TABLECHECKERFLAG = 1 THEN
    EXECUTE IMMEDIATE 'DROP TABLE REPM_CHARTS';
   END IF;
END;
/
DECLARE
   SEQUENCECHECKERFLAG INT;
BEGIN
    SELECT COUNT(*) INTO SEQUENCECHECKERFLAG FROM ALL_SEQUENCES WHERE SEQUENCE_OWNER = sys_context('userenv', 'current_schema') AND SEQUENCE_NAME = UPPER('REPM_DB_COMPONENT_SEQ');
   IF SEQUENCECHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'CREATE SEQUENCE "REPM_DB_COMPONENT_SEQ"  MINVALUE 1 MAXVALUE 999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE';
   END IF;
END;
/
DECLARE
  TRIGGERCHECKERFLAG INT;
BEGIN
  SELECT COUNT(*)  INTO TRIGGERCHECKERFLAG FROM all_triggers WHERE OWNER = sys_context('userenv', 'current_schema') AND trigger_name = UPPER('REPM_DB_COMPONENT_INSERT');
  IF TRIGGERCHECKERFLAG = 0 THEN
    EXECUTE IMMEDIATE 'CREATE OR REPLACE TRIGGER  "REPM_DB_COMPONENT_INSERT" BEFORE INSERT ON REPM_DASHBAORD_COMPONENT FOR EACH ROW BEGIN SELECT REPM_DB_COMPONENT_SEQ.NEXTVAL INTO :new.DASHBOARD_COMPONENT_ID FROM DUAL; END;';
    EXECUTE IMMEDIATE 'ALTER TRIGGER  "REPM_DB_COMPONENT_INSERT" ENABLE';
  END IF;
END;
/
DECLARE
    DATACHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO DATACHECKERFLAG  FROM APP_PREFERENCES  WHERE PREFERENCE_NAME = 'SEND_EMAIL_ON_REPM_REPORT_MESSAGE';
       IF DATACHECKERFLAG = 0 THEN
        EXECUTE IMMEDIATE 'INSERT INTO APP_PREFERENCES VALUES(''SEND_EMAIL_ON_REPM_EXPORT_PDF_EXCEL'',''Reporting Manager Export Status - DO NOT REPLY'')';
	INSERT INTO APP_PREFERENCES(PREFERENCE_NAME,PREFERENCE_VALUE) VALUES ('SEND_EMAIL_ON_REPM_REPORT_MESSAGE','Hi,<br><br>This is a system generated email notification. <br><TABLE style=''font-family: Tahoma; font-size: 10pt;'' border=1 cellPadding=5>
            <tr><th colspan = 2><b>REPORT DETAILS</b></th>
                                                <TR><TD><B>Category Name</B></TD><TD>@categoryName@</TD></TR>
                                                <TR><TD><B>Report Name</B></TD><TD>@reportName@</TD></TR>
                                                <TR><TD><B>Created By</B></TD><TD>@createdBy@</TD></TR>
                                                <TR><TD><B>Created Date</B></TD><TD>@createdDate@</TD></TR>
                                                <TR><TD><B>Modified By</B></TD><TD>@modifiedBy@</TD></TR>
                                                <TR><TD><B>Modified Date</B></TD><TD>@modifiedDate@</TD></TR>
                                                </TABLE>
            <BR>Note: This mailbox is not monitored. DO NOT REPLY TO THIS EMAIL.');

 END IF;
END;
/
DECLARE
TABLECHECKERFLAG INT;
BEGIN
    SELECT COUNT(*) INTO TABLECHECKERFLAG FROM ADS_KEY_VALUE_OBJECTS WHERE  OBJECT_TYPE = 'ADS_MAIL_CMD';
    IF TABLECHECKERFLAG = 0 THEN
        EXECUTE IMMEDIATE 'INSERT INTO ADS_KEY_VALUE_OBJECTS (OBJECT_TYPE,OBJECT_TABLE,OBJECT_TABLE_COLUMN,OBJECT_PARENT_TYPE,OBJECT_PARENT_COLUMN_ID) VALUES (''ADS_MAIL_CMD'','''','''','''','''')';
    END IF;
END;
/
DECLARE
COLUMNCHECKERFLAG INT;
BEGIN
    SELECT COUNT(*) INTO COLUMNCHECKERFLAG  FROM ADS_MODULES WHERE MODULE_NAME = 'System Manager';
    IF COLUMNCHECKERFLAG = 1 THEN
        EXECUTE IMMEDIATE 'UPDATE ADS_MODULES SET MODULE_NAME = ''Metadata Manager'' where MODULE_KEY =''com.ads.mm.permission.sm''';
    END IF;
END;
/
DECLARE
COLUMNCHECKERFLAG INT;
BEGIN
    SELECT COUNT(*) INTO COLUMNCHECKERFLAG  FROM SECURITY_ROLES WHERE  ROLE_NAME = 'SYSTEM ADMIN';
    IF COLUMNCHECKERFLAG = 1 THEN
        EXECUTE IMMEDIATE 'UPDATE SECURITY_ROLES SET ROLE_DESCR = ''Administers Metadata Manager module to define new systems/environments and import and manage metadata for source and target systems'' WHERE  ROLE_NAME = ''SYSTEM ADMIN''';
    END IF;
END;
/
DECLARE
   TABLECHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO TABLECHECKERFLAG FROM "ADS_MODULES" WHERE MODULE_KEY = 'com.ads.mm.permission.dm';
   IF TABLECHECKERFLAG = 1 THEN
        EXECUTE IMMEDIATE 'DELETE FROM ADS_MODULES WHERE MODULE_KEY = ''com.ads.mm.permission.dm''';
    END IF;
END;
/
DECLARE
	VERSIONCHECKKERFLAG INT;
BEGIN
	SELECT COUNT(*) INTO VERSIONCHECKKERFLAG FROM ADS_MM_VERSION WHERE VALUE < '8.0';
	IF VERSIONCHECKKERFLAG = 1 THEN
                UPDATE CAT_TEMPLATES SET CAT_ENABLED = 0 WHERE CAT_NAME='Standard Informatica' AND CAT_SYSTEM_BASED = 1;
		UPDATE CAT_TEMPLATES SET CAT_ENABLED = 0 WHERE CAT_NAME='Parallel Job (v8.0 & above)' AND CAT_SYSTEM_BASED = 1;
		UPDATE CAT_TEMPLATES SET CAT_ENABLED = 0 WHERE CAT_NAME='Server Job (v8.0 & above)' AND CAT_SYSTEM_BASED = 1;
		UPDATE CAT_TEMPLATES SET CAT_ENABLED = 0 WHERE CAT_NAME='Parallel Job Include Sql Expression (v8.0 & above)' AND CAT_SYSTEM_BASED = 1;
		UPDATE CAT_TEMPLATES SET CAT_ENABLED = 0 WHERE CAT_NAME='Server Job Include Sql Expression (v8.0 & above)' AND CAT_SYSTEM_BASED = 1;
		UPDATE CAT_TEMPLATES SET CAT_ENABLED = 0 WHERE CAT_NAME='Parallel Job (v7.5)' AND CAT_SYSTEM_BASED = 1;
		UPDATE CAT_TEMPLATES SET CAT_ENABLED = 0 WHERE CAT_NAME='Server Job (v7.5)' AND CAT_SYSTEM_BASED = 1;
		UPDATE CAT_TEMPLATES SET CAT_ENABLED = 0 WHERE CAT_NAME='Microsoft SSIS DTSX' AND CAT_SYSTEM_BASED = 1;
		UPDATE CAT_TEMPLATES SET CAT_ENABLED = 0 WHERE CAT_NAME='Generate Microsoft SSIS DTSX'  AND CAT_SYSTEM_BASED = 1;
		UPDATE CAT_TEMPLATES SET CAT_ENABLED = 0 WHERE CAT_NAME='Talend Cat SSST SQL' AND CAT_SYSTEM_BASED = 1;
		UPDATE CAT_TEMPLATES SET CAT_ENABLED = 0 WHERE CAT_NAME='Forward Engineering - Simple Pattern' AND CAT_SYSTEM_BASED = 1;
		UPDATE CAT_TEMPLATES SET CAT_ENABLED = 0 WHERE CAT_NAME='Reverse Engineering - Simple Pattern' AND CAT_SYSTEM_BASED = 1;
		UPDATE CAT_TEMPLATES SET CAT_ENABLED = 0 WHERE CAT_NAME='Sample Data Profile By ColumnName' AND CAT_SYSTEM_BASED = 1;
		UPDATE CAT_TEMPLATES SET CAT_ENABLED = 0 WHERE CAT_NAME='Pig & Sqoop Script' AND CAT_SYSTEM_BASED = 1;
	END IF;
END;
/
DECLARE
	VERSIONCHECKKERFLAG INT;
BEGIN
	SELECT COUNT(*) INTO VERSIONCHECKKERFLAG FROM ADS_MM_VERSION WHERE VALUE < '8.0';
	IF VERSIONCHECKKERFLAG = 1 THEN
		UPDATE CAT_TABS SET DISPLAY_ORDER = 1 WHERE CAT_TAB_NAME = 'com.ads.mm.stb.mappingmanager';
		UPDATE CAT_TABS SET DISPLAY_ORDER = 1.1 WHERE CAT_TAB_NAME = 'com.ads.mm.stb.testauto';
		INSERT INTO CAT_TABS ( CAT_TAB_NAME, CAT_TAB_DESCRIPTION ,  DISPLAY_ORDER , TAB_VISIBILITY) VALUES ( 'com.ads.mm.stb.etlengineering', '' , 1.2 , '1');
		UPDATE CAT_TABS SET DISPLAY_ORDER = 1.3 WHERE CAT_TAB_NAME = 'com.ads.mm.stb.rapidgends';
		EXECUTE IMMEDIATE 'MERGE INTO CAT_TABS M USING (SELECT DISTINCT CAT_TAB_ID,  CAT_TAB_NAME,   ROW_NUMBER() OVER( ORDER BY CASE DISPLAY_ORDER WHEN NULL THEN 0 WHEN 0 THEN 999999999 ELSE DISPLAY_ORDER END )AS  DISPLAY_ORDER        FROM   CAT_TABS ) U ON ( M.CAT_TAB_ID = U.CAT_TAB_ID      AND M.CAT_TAB_NAME = U.CAT_TAB_NAME ) WHEN MATCHED THEN   UPDATE SET M.DISPLAY_ORDER = U.DISPLAY_ORDER';
	END IF;
END;
/
DECLARE
   VERSIONCHECKKERFLAG INT;
   ETL_TAB_ID INT;
BEGIN
	SELECT CAT_TAB_ID INTO ETL_TAB_ID FROM Cat_tabs WHERE CAT_TAB_NAME = 'com.ads.mm.stb.etlengineering';
	SELECT COUNT(*) INTO VERSIONCHECKKERFLAG FROM ADS_MM_VERSION WHERE VALUE < '8.0';
	IF VERSIONCHECKKERFLAG = 1 THEN
		INSERT INTO CAT_TEMPLATES(CAT_NAME,CAT_DESC,CAT_IMAGE,CAT_STOCK_IMAGE,CAT_ENABLED,CAT_TAB_ID,CAT_SYSTEM_BASED,CAT_SCRIPT,CAT_ACTION,CREATED_BY,CREATED_DATE_TIME,LAST_MODIFIED_BY,LAST_MODIFIED_DATE_TIME,CAT_TEMPLATE_ORDER,CAT_SCRIPTING_LANGUAGE,CAT_OUTPUT_CONTENT_TYPE,CAT_OUTPUT_FILE_EXTENSION,CAT_ENABLE_MAPPING_DIALOG)
		(
		SELECT 'Informatica 9x', 'This template creates a simple ETL job for the selected Mappings', NULL, 'cat/ETL_CATS_Images/informatica-cat-2.png', '1', ETL_TAB_ID, '1', NULL, 'NULL', 'AnalytiX Data Services', CURRENT_TIMESTAMP, 'AnalytiX Data Services', CURRENT_TIMESTAMP, '1', 'Javascript', 'XML', '.xml', 1
		FROM DUAL DUAL UNION
		SELECT 'SSIS Forward 2012', 'This template creates a simple ETL job for the selected Mappings', NULL, 'cat/ETL_CATS_Images/SSIS.png', '1', ETL_TAB_ID, '1', NULL, 'NULL', 'AnalytiX Data Services', CURRENT_TIMESTAMP, 'AnalytiX Data Services', CURRENT_TIMESTAMP, '2', 'Javascript', 'XML', '.dtsx', 1
		FROM DUAL DUAL UNION
		SELECT 'Talend 6.2', 'This template creates a simple ETL job for the selected Mappings', NULL, 'cat/ETL_CATS_Images/Talend-cat.png', '1', ETL_TAB_ID, '1', NULL, 'NULL', 'AnalytiX Data Services', CURRENT_TIMESTAMP, 'AnalytiX Data Services', CURRENT_TIMESTAMP, '4', 'Javascript', 'Plain Text', '.txt', 1
		FROM DUAL DUAL UNION
		SELECT 'Datastage 8.5', 'This template creates a simple ETL job for the selected Mappings', NULL, 'cat/ETL_CATS_Images/data-stage-1.png', '1', ETL_TAB_ID, '1', NULL, 'NULL', 'AnalytiX Data Services', CURRENT_TIMESTAMP, 'AnalytiX Data Services', CURRENT_TIMESTAMP, '5', 'Javascript', 'XML', '.xml', 1
		FROM DUAL
		);
		UPDATE CAT_TEMPLATES SET CAT_TAB_ID = ETL_TAB_ID, CAT_TEMPLATE_ORDER = 3  WHERE CAT_NAME = 'Import Microsoft SSIS DTSX' AND CAT_SYSTEM_BASED = 1;
		UPDATE CAT_TEMPLATES SET CAT_DESC = 'This template creates a simple ETL job for the selected Mappings', CAT_TAB_ID = ETL_TAB_ID, CAT_TEMPLATE_ORDER = 6  WHERE CAT_NAME = 'Standard ODI' AND CAT_SYSTEM_BASED = 1;
	END IF;
END;
/
DECLARE
COLUMNCHECKERFLAG INT;
BEGIN
  SELECT COUNT(*) INTO COLUMNCHECKERFLAG FROM ALL_TAB_COLUMNS WHERE  OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME = UPPER('PROJECT') AND COLUMN_NAME=UPPER('ETL_TOOL');
    IF COLUMNCHECKERFLAG = 0 THEN
        EXECUTE IMMEDIATE   'ALTER TABLE PROJECT ADD ETL_TOOL VARCHAR2(100) DEFAULT ''INFORMATICA_PSEUDOCODE''';
        EXECUTE IMMEDIATE   'ALTER TABLE PROJECT ADD ETL_SHOW_EMPTY_PSEUDOCODE VARCHAR2(1)DEFAULT 0';
    END IF;
END;
/
DECLARE
   COLUMNCHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO COLUMNCHECKERFLAG FROM PROJECT WHERE ETL_TOOL IS NULL;
   IF COLUMNCHECKERFLAG <> 0 THEN
    UPDATE PROJECT SET ETL_TOOL = 'INFORMATICA_PSEUDOCODE', ETL_SHOW_EMPTY_PSEUDOCODE = '0' WHERE ETL_TOOL IS NULL;
   END IF;
END;
/
DECLARE
COLUMNCHECKERFLAG INT;
BEGIN
  SELECT COUNT(*) INTO COLUMNCHECKERFLAG FROM ALL_TAB_COLUMNS WHERE  OWNER = sys_context('userenv', 'current_schema') AND TABLE_NAME = UPPER('TRANSFORMATIONS') AND COLUMN_NAME=UPPER('DATASTAGE_PSEUDOCODE');
    IF COLUMNCHECKERFLAG = 0 THEN
	EXECUTE IMMEDIATE   'ALTER TABLE TRANSFORMATIONS RENAME COLUMN PSUEDO_CODE to INFORMATICA_PSEUDOCODE';
	EXECUTE IMMEDIATE   'ALTER TABLE TRANSFORMATIONS ADD DATASTAGE_PSEUDOCODE VARCHAR2(4000)';
	EXECUTE IMMEDIATE   'ALTER TABLE TRANSFORMATIONS ADD TALEND_PSEUDOCODE VARCHAR2(4000)';
	EXECUTE IMMEDIATE   'ALTER TABLE TRANSFORMATIONS ADD SSIS_PSEUDOCODE VARCHAR2(4000)';
	EXECUTE IMMEDIATE   'ALTER TABLE TRANSFORMATIONS ADD ODI_PSEUDOCODE VARCHAR2(4000)';
	EXECUTE IMMEDIATE   'ALTER TABLE TRANSFORMATIONS ADD BODS_PSEUDOCODE VARCHAR2(4000)';
  END IF;
END;
/

DECLARE
   TABLECHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO TABLECHECKERFLAG FROM "TRANSFORMATIONS";
   IF TABLECHECKERFLAG = 0 THEN
   INSERT INTO TRANSFORMATIONS (TRANSF_NAME, INFORMATICA_PSEUDOCODE, TRANSF_USE_DESCR, ISPUBLISHED, CREATED_DATETIME, LAST_MODIFIED_BY, LAST_MODIFIED_DATE_TIME, CREATED_BY)
   	(SELECT  '1-DataGov(HighDate:12/31/9999)', 'To_date(mm/dd/yyyy,12/31/9999)', 'DataGovernance rule - use on all projects', 'Y', CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
	FROM DUAL UNION
	SELECT  '2-DataGov(LowDate01/01/0001)', 'To_date(mm/dd/yyyy, 01/01/0001)', 'DataGovernance rule - use on all projects', 'Y', CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
	FROM DUAL UNION
	SELECT  '3-DataGov(AverageChurn)', 'Count(active customers)/(Count of Cancelled Customers for current month)', 'DataGovernance rule - use on all projects where financial reports are viewed and Churn KPIs are used.', 'Y', CURRENT_TIMESTAMP, ' Administrator',CURRENT_TIMESTAMP, 'Administrator'
	FROM DUAL UNION
	SELECT  'ABORT', 'ABORT(%1)', 'ETL Built-In Transformation: Stops the session and issues a specified error message to the session log file. When the Integration Service encounters an ABORT function it stops transforming data at that row. It processes any rows read before the session aborts and loads them based on the source- or target-based commit interval and the buffer block size defined for the session.', 'Y', CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
	FROM DUAL UNION
	SELECT  'ABS', 'ABS(%1)', 'ETL Built-In Transformation: Returns the absolute value of a numeric value.Arguments: %1 = numeric field', 'Y', CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
	FROM DUAL UNION
	SELECT  'ADD_TO_DATE', 'ADD_TO_DATE(%1, format, amount)', 'ETL Built-In Transformation: Adds a specified amount to one part of a datetime value and returns a date in the same format as the date you pass to the function. Arguments: %1 = date field', 'Y', CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
	FROM DUAL UNION
	SELECT  'AES_DECRYPT', 'AES_DECRYPT(%1, key)', 'ETL Built-In Transformation: Returns decrypted data to string format. The Integration Service uses Advanced Encryption Standard (AES) algorithm with 128-bit encoding. The AES algorithm is a FIPS-approved cryptographic algorithm.Arguments: %1 = encrypted text field', 'Y', CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
	FROM DUAL UNION
	SELECT  'ASCII', 'ASCII(%1)', 'ETL Built-In Transformation: Record handling and processing rule for all projects. When you configure the Integration Service to run in ASCII mode, the ASCII function returns the numeric ASCII value of the first character of the string passed to the function. When you configure the Integration Service to run in Unicode mode, the ASCII function returns the numeric Unicode value of the first character of the string passed to the function. Unicode values fall in the range 0 to 65,535. Arguments: %1 = text field', 'Y', CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
	FROM DUAL UNION
	SELECT  'AVG', 'AVG(%1 [, filter_condition ])', 'ETL Built in transformation (Aggregation). Returns the average of all values in a group of rows. Optionally, you can apply a filter to limit the rows you read to calculate the average. You can nest only one other aggregate function within AVG, and the nested function must return a Numeric datatype', 'Y', CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
	FROM DUAL UNION
	SELECT  'CEIL', 'CEIL(%1)', 'ETL Built-In Transformation: Record handling and processing rule for all projects. Returns the smallest integer greater than or equal to the numeric value passed to this function. For example, if you pass 3.14 to CEIL, the function returns 4. If you pass 3.98 to CEIL, the function returns 4. Likewise, if you pass -3.17 to CEIL, the function returns -3.', 'Y', CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
	FROM DUAL UNION
	SELECT  'CHOOSE', 'CHOOSE(index, string1 [, string2, ..., stringN])', 'ETL Built-In Transformation: Record handling and processing rule for all projects.Chooses a string from a list of strings based on a given position. You specify the position and the value. If the value matches the position, the Integration Service returns the value.', 'Y', CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
	FROM DUAL UNION
	SELECT  'CHR', 'CHR(%1)', 'ETL Built-In Transformation: Record handling and processing rule for all projects. When you configure the Integration Service to move data in ASCII mode, CHR returns the ASCII character corresponding to the numeric value you pass to this function. ASCII values fall in the range 0 to 255. You can pass any integer to CHR, but only ASCII codes 32 to 126 are printable characters. When you configure the Integration Service to move data in Unicode mode, CHR returns the Unicode character corresponding to the numeric value you pass to this function. Unicode values fall in the range 0 to 65,535.', 'Y', CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
	FROM DUAL UNION
	SELECT  'CHRCODE', 'CHRCODE(%1)','ETL Built-In Transformation: Record handling and processing rule for all projects. When you configure the Integration Service to run in ASCII mode, CHRCODE returns the numeric ASCII value of the first character of the string passed to the function. ASCII values fall in the range 0 to 255.When you configure the Integration Service to run in Unicode mode, CHRCODE returns the numeric Unicode value of the first character of the string passed to the function. Unicode values fall in the range 0 to 65,535.Normally, before you pass any string value to CHRCODE, you parse out the specific character you want to convert to an ASCII or Unicode value. For example, you might use RTRIM or another string-manipulation function. If you pass a numeric value, CHRCODE converts it to a character string and returns the ASCII or Unicode value of the first character in the string.This function is identical in behavior to the ASCII function. If you currently use ASCII in expressions, it will still work correctly. However, when you create new expressions, use the CHRCODE function instead of the ASCII function.', 'Y', CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
	FROM DUAL UNION
	SELECT  'COMPRESS', 'COMPRESS(%1)', 'ETL Built-In Transformation: Record handling and processing rule for all projects. Compresses data using the zlib 1.2.1 compression algorithm.Use the COMPRESS function before you send large amounts of data over a wide area network', 'Y', CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
	FROM DUAL UNION
	SELECT  'CONCAT', 'CONCAT(string1,string2)', 'ETL Built-In Transformation: Record handling and processing rule for all projects.Concatenates two strings. CONCAT converts all data to text before concatenating the strings. Alternatively, use the || string operator to concatenate strings. Using the || string operator instead of CONCAT improves Integration Service performance when you run sessions.', 'Y', CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
	FROM DUAL UNION
	SELECT  'CONVERT_BASE', 'CONVERT_BASE(%1,source_base,dest_base)', 'ETL Built-In Transformation: Record handling and processing rule for all projects. Converts a number from one base value to another base value.', 'Y', CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
	FROM DUAL UNION
	SELECT  'COS', 'COS(%1)', 'ETL Built-In Transformation: Record handling and processing rule for all projects. Returns the cosine of a numeric value (%1 is expressed in radians).', 'Y', CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
	FROM DUAL UNION
	SELECT  'COSH', 'COSH(%1)', 'ETL Built-In Transformation: Record handling and processing rule for all projects. Returns the hyperbolic cosine of a numeric value (%1 is expressed in radians).', 'Y', CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
	FROM DUAL UNION
	SELECT  'COUNT', 'COUNT(*[,filter_condition])', 'ETL Built in transformation (Aggregation). Returns the number of rows that have non-null values in a group. Optionally, you can include the asterisk (*) argument to count all input values in a transformation. You can nest only one other aggregate function within COUNT. You can apply a condition to filter rows before counting them.', 'Y', CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
	FROM DUAL UNION
	SELECT  'CRC32', 'CRC32(%1)', 'ETL Built-In Transformation: Record handling and processing rule for all projects.Returns a 32-bit Cyclic Redundancy Check (CRC32) value. Use CRC32 to find data transmission errors. You can also use CRC32 if you want to verify that data stored in a file has not been modified. If you use CRC32 to perform a redundancy check on data in ASCII mode and Unicode mode, the Integration Service may generate different results on the same input value.Note: CRC32 can return the same output for different input strings. If you want to generate keys in a mapping, use a Sequence Generator transformation. If you use CRC32 to generate keys in a mapping, you may receive unexpected results.', 'Y', CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
	FROM DUAL UNION
	SELECT  'CUME', 'CUME(%1[,filter_condition])', 'ETL Built-In Transformation: Record handling and processing rule for all projects. Returns a running total. A running total means CUME returns a total each time it adds a value. You can add a condition to filter rows out of the row set before calculating the running total.ETL Built-In Transformation: Use CUME and similar functions (such as MOVINGAVG and MOVINGSUM) to simplify reporting by calculating running values.', 'Y', CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
	FROM DUAL UNION
	SELECT  'DATE_COMPARE', 'DATE_COMPARE(%1,%2)', 'ETL Built-In Transformation: Record handling and processing rule for all projects. Returns an integer indicating which of two dates is earlier.DATE_COMPARE returns an integer value rather than a date value.', 'Y', CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
	FROM DUAL UNION
	SELECT  'DATE_DIFF', 'DATE_DIFF(%1,%2,format)', 'ETL Built-In Transformation: Record handling and processing rule for all projects. Returns the length of time between two dates. You can request the format to be years, months, days, hours, minutes, seconds, milliseconds, microseconds, or nanoseconds. The Integration Service subtracts the second date from the first date and returns the difference.Effective in version 8.5, the DATE_COMPARE function can compare dates that include subseconds. If you do not want to include subseconds in a date comparison, use the TRUNC (Dates) function to truncate the subsecond portion of the date, and then compare the dates.', 'Y', CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
	FROM DUAL UNION
	SELECT  'DEC_BASE64', 'DEC_BASE64(%1)', 'ETL Built-In Transformation: Record handling and processing rule for all projects. Decodes a base 64 encoded value and returns a string with the binary data representation of the data. If you encode data using ENC_BASE64, and you want to decode data using DEC_BASE64, you must run the decoding session using the same data movement mode.Otherwise, the output of the decoded data may differ from the original data.', 'Y', CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
	FROM DUAL UNION
	SELECT  'DECODE', 'DECODE(%1,first_search,first_result[,second_search,second_result]...[,default])', 'ETL Built-In Transformation: Record handling and processing rule for all projects. Searches a port for a value you specify. If the function finds the value, it returns a result value, which you define. You can build an unlimited number of searches within a DECODE function.If you use DECODE to search for a value in a string port, you can either trim trailing blanks with the RTRIM function or include the blanks in the search string.', 'Y', CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
	FROM DUAL UNION
	SELECT  'DECOMPRESS', 'DECOMPRESS(%1,precision)', 'ETL Built-In Transformation: Record handling and processing rule for all projects.Decompresses data using the zlib 1.2.1 compression algorithm.Use the DECOMPRESS function on data that has been compressed with the COMPRESS function or a compression tool that uses the zlib 1.2.1 algorithm.If the session that decompresses the data uses a different data movement mode than the session that compressed the data, the output of the decompressed data may differ from the original data.', 'Y', CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
	FROM DUAL UNION
	SELECT  'ENC_BASE64', 'ENC_BASE64(%1)', 'ETL Built-In Transformation: Record handling and processing rule for all projects. Encodes data by converting binary data to string data using Multipurpose Internet Mail Extensions (MIME) encoding. Encode data when you want to store data in a database or file that does not allow binary data. You can also encode data to pass binary data through PowerCenter transformations in string format. The encoded data is approximately 33% longer than the original data. It displays as a set of random characters.', 'Y', CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
	FROM DUAL UNION
	SELECT  'ERROR', 'ERROR(%1)', 'ETL Built-In Transformation: Record handling and processing rule for all projects. Causes the Integration Service to skip a row and issue an error message, which you define. The error message displays in the session log. The Integration Service does not write these skipped rows to the session reject file.Use ERROR in Expression transformations to validate data. Generally, you use ERROR within an IIF or DECODE function to set rules for skipping rows.Use the ERROR function for both input and output port default values. You might use ERROR for input ports to keep null values from passing into a transformation.Use ERROR for output ports to handle any kind of transformation error, including ERROR function calls within an expression. When you use the ERROR function in an expression and in the output port default value, the Integration Service skips the row and logs both the error message from the expression and the error message from the default value. If you want to ensure the Integration Service skips rows that produce an error, assign ERROR as the default value.f you use an output default value other than ERROR, the default value overrides the ERROR function in an expression. For example, you use the ERROR function in an expression, and you assign the default value, ‘1234’, to the output port. Each time the Integration Service encounters the ERROR function in the expression, it overrides the error with the value ‘1234’ and passes ‘1234’ to the next transformation. It does not skip the row, and it does not log an error in the session log.', 'Y', CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
	FROM DUAL UNION
	SELECT  'EXP', 'EXP(%1)', 'ETL Built-In Transformation: Record handling and processing rule for all projects. Returns e raised to the specified power (exponent), where e=2.71828183. For example, EXP(2) returns 7.38905609893065. You might use this function to analyze scientific and technical data rather than business data. EXP is the reciprocal of the LN function, which returns the natural logarithm of a numeric value.', 'Y', CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
	FROM DUAL UNION
	SELECT  'FIRST', 'FIRST(%1 [,filter_condition])', 'ETL Built in transformation (Aggregation). Returns the first value found within a port or group. Optionally, you can apply a filter to limit the rows the Integration Service reads.You can nest only one other aggregate function within FIRST.', 'Y', CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
	FROM DUAL UNION
	SELECT  'FLOOR', 'FLOOR(%1)', 'ETL Built-In Transformation: Record handling and processing rule for all projects. Returns the largest integer less than or equal to the numeric value you pass to this function. For example, if you pass 3.14 to FLOOR, the function returns 3. If you pass 3.98 to FLOOR, the function returns 3. Likewise, if you pass -3.17 to FLOOR, the function returns -4.', 'Y', CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
	FROM DUAL UNION
	SELECT  'FV', 'FV(rate,terms,payment[,presentvalue,type])', 'ETL Built-In Transformation: Record handling and processing rule for all projects. Returns the future value of an investment, where you make periodic, constant payments and the investment earns a constant interest rate.', 'Y', CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
	FROM DUAL UNION
	SELECT  'GET_DATE_PART', 'GET_DATE_PART(%1,format)', 'ETL Built-In Transformation: Record handling and processing rule for all projects. Returns the specified part of a date as an integer value. Therefore, if you create an expression that returns the month portion of the date, and pass a date such as Apr 1 1997 00:00:00, GET_DATE_PART returns 4.', 'Y', CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
	FROM DUAL UNION
	SELECT  'GREATEST', 'GREATEST(%1,[value2, ...,valueN,]CaseFlag)', 'ETL Built-In Transformation: Record handling and processing rule for all projects. Returns the greatest value from a list of input values. Use this function to return the greatest string, date, or number.By default, the match is case sensitive.Effective in version 8.5, the GREATEST function returns NULL if any argument is null. Previously, the GREATEST function returned NULL if all arguments were null.', 'Y', CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
	FROM DUAL UNION
	SELECT  'IIF', 'IIF(condition,value1[,value2])', 'ETL Built-In Transformation: Record handling and processing rule for all projects. Returns one of two values you specify, based on the results of a condition.', 'Y', CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
	FROM DUAL UNION
	SELECT  'IN', 'IN(valueToSearch,value1,[value2, ...,valueN,]CaseFlag)', 'ETL Built-In Transformation: Record handling and processing rule for all projects. Matches input data to a list of values. By default, the match is case sensitive', 'Y', CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
	FROM DUAL UNION
	SELECT  'INDEXOF', 'INDEXOF(valueToSearch,string1,[string2, ..., stringN,]CaseFlag)', 'ETL Built-In Transformation: Record handling and processing rule for all projects. Finds the index of a value among a list of values. By default, the match is case sensitive.', 'Y', CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
	FROM DUAL UNION
	SELECT  'INITCAP', 'INITCAP(%1)', 'ETL Built-In Transformation: Record handling and processing rule for all projects. Capitalizes the first letter in each word of a string and converts all other letters to lowercase. Words are delimited by white space (a blank space, formfeed, newline, carriage return, tab, or vertical tab) and characters that are not alphanumeric. For example, if you pass the string ‘…THOMAS’, the function returns Thomas.', 'Y', CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
	FROM DUAL UNION
	SELECT  'INSTR', 'INSTR(string,search_value[,start[,occurrence[,comparison_type]]])', 'ETL Built-In Transformation: Record handling and processing rule for all projects. Returns the position of a character set in a string, counting from left to right.', 'Y', CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
	FROM DUAL UNION
	SELECT  'IS_DATE', 'IS_DATE(value[,format]', 'ETL Built-In Transformation: Record handling and processing rule for all projects. Returns whether a string value is a valid date. A valid date is any string in the date portion of the date time format specified in the session. If the string you want to test is not in this date format, use the TO_DATE format string to specify the date format. If the strings passed to IS_DATE do not match the format string specified, the function returns FALSE (0). If the strings match the format string, the function returns TRUE (1).', 'Y', CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
	FROM DUAL UNION
	SELECT  'IS_NUMBER', 'IS_NUMBER(%1)', 'ETL Built-In Transformation: Record handling and processing rule for all projects. Returns whether a string is a valid number. A valid number consists of the following parts:Optional space before the number Optional sign (+/-) One or more digits with an optional decimal point Optional scientific notation, such as the letter ‘e’ or ‘E’ (and the letter ‘d’ or ‘D’ on Windows) followed by an optional sign (+/-), followed by one or more digits Optional white space following the number', 'Y', CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
	FROM DUAL UNION
	SELECT  'IS_SPACES', 'IS_SPACES(%1)', 'ETL Built-In Transformation: Record handling and processing rule for all projects. Returns whether a string value consists entirely of spaces.A space is a blank space, a formfeed, a newline, a carriage return, a tab, or a vertical tab.IS_SPACES evaluates an empty string as FALSE because there are no spaces. To test for an empty string, use LENGTH.', 'Y', CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
	FROM DUAL UNION
	SELECT  'ISNULL', 'ISNULL(%1)', 'ETL Built-In Transformation: Record handling and processing rule for all projects. Returns whether a value is NULL. ISNULL evaluates an empty string as FALSE. Note: To test for empty strings, use LENGTH.', 'Y', CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
	FROM DUAL UNION
	SELECT  'LAST', 'LAST(value[,filter_condition])', 'ETL Built in transformation (Aggregation). Returns the last row in the selected port. Optionally, you can apply a filter to limit the rows the PowerCenter Integration Service reads. You can nest only one other aggregate function within LAST.', 'Y', CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
	FROM DUAL UNION
	SELECT  'LAST_DAY', 'LAST_DAY(%1)', 'ETL Built-In Transformation: Record handling and processing rule for all projects. Returns the date of the last day of the month for each date in a port where %1 is a date.', 'Y', CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
	FROM DUAL UNION
	SELECT  'LEAST', 'LEAST(value1,[value2, ...,valueN,]CaseFlag)', 'ETL Built-In Transformation: Record handling and processing rule for all projects. Returns the smallest value from a list of input values. By default, the match is case sensitive.Effective in version 8.5, the GREATEST function returns NULL if any argument is null. Previously, the GREATEST function returned NULL if all arguments were null.', 'Y', CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
	FROM DUAL UNION
	SELECT  'LENGTH', 'LENGTH(%1)', 'ETL Built-In Transformation: Record handling and processing rule for all projects. Returns the number of characters in a string ( %1 ), including trailing blanks.', 'Y', CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
	FROM DUAL UNION
	SELECT  'LN', 'LN(%1)', 'ETL Built-In Transformation: Record handling and processing rule for all projects. Returns the natural logarithm of a numeric value ( %1 ).For example, LN(3) returns 1.098612. You usually use this function to analyze scientific data rather than business data.This function is the reciprocal of the function EXP.', 'Y', CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
	FROM DUAL UNION
	SELECT  'LOG', 'LOG(%1,%2)', 'ETL Built-In Transformation: Record handling and processing rule for all projects. Returns the logarithm of a base numeric value ( %1 ) with an exponent ( %2 ) . Most often, you use this function to analyze scientific data rather than business data.', 'Y', CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
	FROM DUAL UNION
	SELECT  'LOOKUP', 'LOOKUP(result,search1,value1[,search2,value2]...)', 'ETL Built-In Transformation: Record handling and processing rule for all projects. Searches for a value in a lookup source column. The LOOKUP function compares data in a lookup source to a value you specify. When the PowerCenter Integration Service finds the search value in the lookup table, it returns the value from a specified column in the same row in the lookup table. When you create a session based on a mapping that uses the LOOKUP function, you must specify the database connections for $Source Connection Value and $Target Connection Value in the session properties. To validate a lookup function in an Expression transformation, verify that the lookup definition is in the mapping. Note: This function is not supported in mapplets.', 'Y', CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
	FROM DUAL UNION
	SELECT  'LOWER', 'LOWER(%1)', 'ETL Built-In Transformation: Record handling and processing rule for all projects. Converts uppercase string characters ( %1 ) to lowercase', 'Y', CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
	FROM DUAL UNION
	SELECT  'LPAD', 'LPAD(first_string,length[,second_string])', 'ETL Built-In Transformation: Record handling and processing rule for all projects. Adds a set of blanks or characters to the beginning of a string to set the string to a specified length.', 'Y', CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
	FROM DUAL UNION
	SELECT  'LTRIM', 'LTRIM(string[,trim_set])', 'ETL Built-In Transformation: Record handling and processing rule for all projects. Removes blanks or characters from the beginning of a string. You can use LTRIM with IIF or DECODE in an Expression or Update Strategy transformation to avoid spaces in a target table. If you do not specify a trim_set parameter in the expression: In UNICODE mode, LTRIM removes both single- and double-byte spaces from the beginning of a string. In ASCII mode, LTRIM removes only single-byte spaces. If you use LTRIM to remove characters from a string, LTRIM compares the trim_set to each character in the string argument, character-by-character, starting with the left side of the string. If the character in the string matches any character in the trim_set, LTRIM removes it. LTRIM continues comparing and removing characters until it fails to find a matching character in the trim_set. Then it returns the string, which does not include matching characters.', 'Y', CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
	FROM DUAL UNION
	SELECT  'MAKE_DATE_TIME', 'MAKE_DATE_TIME(year,month,day,hour,minute,second,nanosecond)', 'ETL Built-In Transformation: Record handling and processing rule for all projects. Returns the date and time based on the input values. Effective in version 8.5, the MAKE_DATE_TIME function can return the date and time based on input values up to nanoseconds. Previously, MAKE_DATE_TIME returned the date and time based on input values up to seconds.', 'Y', CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
	FROM DUAL UNION
	SELECT  'MAX', 'MAX', 'ETL Built in transformation (Aggregation)', 'Y', CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
	FROM DUAL UNION
	SELECT  'MD5', 'MD5(value)', 'ETL Built-In Transformation: Record handling and processing rule for all projects. Calculates the checksum of the input value. The function uses Message-Digest algorithm 5 (MD5). MD5 is a one-way cryptographic hash function with a 128-bit hash value. You can conclude that input values are different when the checksums of the input values are different. Use MD5 to verify data integrity.', 'Y', CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
	FROM DUAL UNION
	SELECT  'MEDIAN', 'MEDIAN(numeric_value[,filter_condition])', 'ETL Built in transformation (Aggregation). Returns the median of all values in a selected port.If there is an even number of values in the port, the median is the average of the middle two values when all values are placed ordinally on a number line.If there is an odd number of values in the port, the median is the middle number.You can nest only one other aggregate function within MEDIAN, and the nested function must return a Numeric datatype.The PowerCenter Integration Service reads all rows of data to perform the median calculation. The process of reading rows of data to perform the calculation may affect performance. Optionally, you can apply a filter to limit the rows you read to calculate the median.', 'Y', CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
	FROM DUAL UNION
	SELECT  'METAPHONE', 'METAPHONE(string[,length])', 'ETL Built-In Transformation: Record handling and processing rule for all projects. Encodes string values. You can specify the length of the string that you want to encode.METAPHONE encodes characters of the English language alphabet (A-Z). It encodes both uppercase and lowercase letters in uppercase.METAPHONE encodes characters according to the following list of rules:Skips vowels (A, E, I, O, and U) unless one of them is the first character of the input string. METAPHONE(‘CAR’) returns ‘KR’ and METAPHONE(‘AAR’) returns ‘AR’.Uses special encoding guidelines.', 'Y', CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
	FROM DUAL UNION
	SELECT  'MIN', 'MIN', 'ETL Built in transformation (Aggregation)', 'Y', CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
	FROM DUAL UNION
	SELECT  'MOD', 'MOD(numeric_value,divisor)', 'ETL Built-In Transformation: Record handling and processing rule for all projects. Returns the remainder of a division calculation. For example, MOD(8,5) returns 3.', 'Y', CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
	FROM DUAL UNION
	SELECT  'MOVINGAVG', 'MOVINGAVG(numeric_value,rowset[,filter_condition])', 'ETL Built-In Transformation: Record handling and processing rule for all projects. Returns the average (row-by-row) of a specified set of rows. Optionally, you can apply a condition to filter rows before calculating the moving average.', 'Y', CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
	FROM DUAL UNION
	SELECT  'MOVINGSUM', 'MOVINGSUM(numeric_value,rowset[,filter_condition])', 'ETL Built-In Transformation: Record handling and processing rule for all projects. Returns the sum (row-by-row) of a specified set of rows.Optionally, you can apply a condition to filter rows before calculating the moving sum.', 'Y', CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
	FROM DUAL UNION
	SELECT  'NPER', 'NPER(rate,presentvalue,payment[,futurevalue,type])', 'ETL Built-In Transformation: Record handling and processing rule for all projects. Returns the number of periods for an investment based on a constant interest rate and periodic, constant payments.', 'Y', CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
	FROM DUAL UNION
	SELECT  'PERCENTILE', 'PERCENTILE(numeric_value,percentile[,filter_condition])', 'ETL Built in transformation (Aggregation). Record handling and processing rule for all projects. Calculates the value that falls at a given percentile in a group of numbers. You can nest only one other aggregate function within PERCENTILE, and the nested function must return a Numeric datatype.The PowerCenter Integration Service reads all rows of data to perform the percentile calculation. The process of reading rows to perform the calculation may affect performance. Optionally, you can apply a filter to limit the rows you read to calculate the percentile.', 'Y', CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
	FROM DUAL UNION
	SELECT  'PMT', 'PMT(rate,terms,presentvalue[,futurevalue,type])', 'ETL Built-In Transformation: Record handling and processing rule for all projects. Returns the payment for a loan based on constant payments and a constant interest rate.', 'Y', CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
	FROM DUAL UNION
	SELECT  'POWER', 'POWER(base,exponent)', 'ETL Built-In Transformation: Record handling and processing rule for all projects. Returns a value raised to the exponent you pass to the function.', 'Y', CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
	FROM DUAL UNION
	SELECT  'PV', 'PV(rate,terms,payment[,futurevalue,type])', 'ETL Built-In Transformation: Record handling and processing rule for all projects. Returns the present value of an investment.', 'Y', CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
	FROM DUAL UNION
	SELECT  'RAND', 'RAND(seed)', 'ETL Built-In Transformation: Record handling and processing rule for all projects. Returns a random number between 0 and 1. This is useful for probability scenarios.', 'Y', CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
	FROM DUAL UNION
	SELECT  'RATE', 'RATE(terms,payment,presentvalue[,futurevalue,type])', 'ETL Built-In Transformation: Record handling and processing rule for all projects. Returns the interest rate earned per period by a security.', 'Y', CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
	FROM DUAL UNION
	SELECT  'REG_EXTRACT', 'REG_EXTRACT( subject,''pattern'',subPatternNum)', 'ETL Built-In Transformation: Record handling and processing rule for all projects. Extracts subpatterns of a regular expression within an input value. For example, from a regular expression pattern for a full name, you can extract the first name or last name.Note: Use the REG_REPLACE function to replace a character pattern in a string with another character pattern', 'Y', CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
	FROM DUAL UNION
	SELECT  'REG_MATCH', 'REG_MATCH(subject,pattern)', 'ETL Built-In Transformation: Record handling and processing rule for all projects. Returns whether a value matches a regular expression pattern. This lets you validate data patterns, such as IDs, telephone numbers, postal codes, and state names.Note: Use the REG_REPLACE function to replace a character pattern in a string with a new character pattern.', 'Y', CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
	FROM DUAL UNION
	SELECT  'REG_REPLACE', 'REG_REPLACE(subject,pattern,replace,numReplacements', 'ETL Built-In Transformation: Record handling and processing rule for all projects. Replaces characters in a string with another character pattern. By default, REG_REPLACE searches the input string for the character pattern you specify and replaces all occurrences with the replacement pattern. You can also indicate the number of occurrences of the pattern you want to replace in the string.', 'Y', CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
	FROM DUAL UNION
	SELECT  'REPLACECHR', 'REPLACECHR(CaseFlag,InputString,OldCharSet,NewChar )', 'ETL Built-In Transformation: Record handling and processing rule for all projects. Replaces characters in a string with a single character or no character. REPLACECHR searches the input string for the characters you specify and replaces all occurrences of all characters with the new character you specify.', 'Y', CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
	FROM DUAL UNION
	SELECT  'REPLACESTR', 'REPLACESTR(CaseFlag,InputString,OldString1,[OldString2, ... OldStringN,]NewString)', 'ETL Built-In Transformation: Record handling and processing rule for all projects. Replaces characters in a string with a single character, multiple characters, or no character. REPLACESTR searches the input string for all strings you specify and replaces them with the new string you specify.', 'Y', CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
	FROM DUAL UNION
	SELECT  'REVERSE', 'REVERSE(string)', 'ETL Built-In Transformation: Record handling and processing rule for all projects. Reverses the input string.', 'Y', CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
	FROM DUAL UNION
	SELECT  'ROUND', 'ROUND', 'ETL Built-In Transformation: Record handling and processing rule for all projects', 'Y', CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
	FROM DUAL UNION
	SELECT  'RPAD', 'RPAD(first_string,length[,second_string])', 'ETL Built-In Transformation: Record handling and processing rule for all projects. Converts a string to a specified length by adding blanks or characters to the end of the string.', 'Y', CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
	FROM DUAL UNION
	SELECT  'RTRIM', 'RTRIM(string[,trim_set])', 'ETL Built-In Transformation: Record handling and processing rule for all projects. Removes blanks or characters from the end of a string.', 'Y', CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
	FROM DUAL UNION
	SELECT  'SET_DATE_PART', 'SET_DATE_PART(date,format,value)', 'ETL Built-In Transformation: Record handling and processing rule for all projects. Sets one part of a Date/Time value to a value you specify.', 'Y', CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
	FROM DUAL UNION
	SELECT  'SETCOUNTVARIABLE', 'SETCOUNTVARIABLE($$Variable)', 'ETL Built-In Transformation: Record handling and processing rule for all projects. Counts the rows evaluated by the function and increments the current value of a mapping variable based on the count. Increases the current value by one for each row marked for insertion. Decreases the current value by one for each row marked for deletion. Keeps the current value the same for each row marked for update or reject. Returns the new current value.', 'Y', CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
	FROM DUAL UNION
	SELECT  'SETMAXVARIABLE', 'SETMAXVARIABLE($$Variable,value)', 'ETL Built-In Transformation: Record handling and processing rule for all projects. Sets the current value of a mapping variable to the higher of two values: the current value of the variable or the value you specify. Returns the new current value. The function executes only if a row is marked as insert. SETMAXVARIABLE ignores all other row types and the current value remains unchanged.', 'Y', CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
	FROM DUAL UNION
	SELECT  'SETMINVARIABLE', 'SETMINVARIABLE($$Variable,value)', 'ETL Built-In Transformation: Record handling and processing rule for all projects. Sets the current value of a mapping variable to the lower of two values: the current value of the variable or the value you specify. Returns the new current value. The SETMINVARIABLE function executes only if a row is marked as insert. SETMINVARIABLE ignores all other row types and the current value remains unchanged.', 'Y', CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
	FROM DUAL UNION
	SELECT  'SETVARIABLE', 'SETVARIABLE($$Variable,value)', 'ETL Built-In Transformation: Record handling and processing rule for all projects. Sets the current value of a mapping variable to a value you specify. Returns the specified value. The SETVARIABLE function executes only if a row is marked as insert or update. SETVARIABLE ignores all other row types and the current value remains unchanged.', 'Y', CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
	FROM DUAL UNION
	SELECT  'SIGN', 'SIGN(numeric_value)', 'ETL Built-In Transformation: Record handling and processing rule for all projects. Returns whether a numeric value is positive, negative, or 0.', 'Y', CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
	FROM DUAL UNION
	SELECT  'SIN', 'SIN(numeric_value)', 'ETL Built-In Transformation: Record handling and processing rule for all projects. Returns the sine of a numeric value (expressed in radians).', 'Y', CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
	FROM DUAL UNION
	SELECT  'SINH', 'SINH(numeric_value)', 'ETL Built-In Transformation: Record handling and processing rule for all projects. Returns the hyperbolic sine of the numeric value.', 'Y', CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
	FROM DUAL UNION
	SELECT  'SOUNDEX', 'SOUNDEX(string)', 'ETL Built-In Transformation: Record handling and processing rule for all projects. Encodes a string value into a four-character string.SOUNDEX works for characters in the English alphabet (A-Z). It uses the first character of the input string as the first character in the return value and encodes the remaining three unique consonants as numbers.', 'Y', CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
	FROM DUAL UNION
	SELECT  'SQRT', 'SQRT(numeric_value)', 'ETL Built-In Transformation: Record handling and processing rule for all projects. Returns the square root of a non-negative numeric value.', 'Y', CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
	FROM DUAL UNION
	SELECT  'STDDEV', 'STDDEV(numeric_value[,filter_condition])', 'ETL Built in transformation (Aggregation). Returns the standard deviation of the numeric values you pass to this function. STDDEV is used to analyze statistical data. You can nest only one other aggregate function within STDDEV, and the nested function must return a Numeric datatype.', 'Y', CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
	FROM DUAL UNION
	SELECT  'SUBSTR', 'SUBSTR(string,start[,length])', 'ETL Built-In Transformation: Record handling and processing rule for all projects. Returns a portion of a string. SUBSTR counts all characters, including blanks, starting at the beginning of the string.', 'Y', CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
	FROM DUAL UNION
	SELECT  'SUM', 'SUM(numeric_value[,filter_condition])', 'ETL Built in transformation (Aggregation).Returns the sum of all values in the selected port. Optionally, you can apply a filter to limit the rows you read to calculate the total. You can nest only one other aggregate function within SUM, and the nested function must return a Numeric datatype.', 'Y', CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
	FROM DUAL UNION
	SELECT  'SYSTIMESTAMP', 'SYSTIMESTAMP([format])', 'ETL Built-In Transformation: Record handling and processing rule for all projects. Returns the current date and time of the node hosting the PowerCenter Integration Service with precision to the nanosecond. The precision to which you display the date and time depends on the platform.', 'Y', CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
	FROM DUAL UNION
	SELECT  'TAN', 'TAN(numeric_value)', 'TL Built-In Transformation: Record handling and processing rule for all projects. Returns the tangent of a numeric value (expressed in radians).', 'Y', CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
	FROM DUAL UNION
	SELECT  'TANH', 'TANH(numeric_value)', 'ETL Built-In Transformation: Record handling and processing rule for all projects. Returns the hyperbolic tangent of the numeric value passed to this function.', 'Y', CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
	FROM DUAL UNION
	SELECT  'TO_BIGINT', 'TO_BIGINT(value[,flag])', 'ETL Built-In Transformation: Record handling and processing rule for all projects. Converts a string or numeric value to a bigint value. TO_BIGINT syntax contains an optional argument that you can choose to round the number to the nearest integer or truncate the decimal portion. TO_BIGINT ignores leading blanks.', 'Y', CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
	FROM DUAL UNION
	SELECT  'TO_CHAR', 'TO_CHAR', 'ETL Built-In Transformation: Record handling and processing rule for all projects', 'Y', CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
	FROM DUAL UNION
	SELECT  'TO_DATE', 'TO_DATE(string[,format])', 'ETL Built-In Transformation: Record handling and processing rule for all projects. Converts a character string to a Date/Time datatype. You use the TO_DATE format strings to specify the format of the source strings.', 'Y', CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
	FROM DUAL UNION
	SELECT  'TO_DECIMAL', 'TO_DECIMAL(value[,scale])', 'ETL Built-In Transformation: Record handling and processing rule for all projects. Converts a string or numeric value to a decimal value. TO_DECIMAL ignores leading blanks.', 'Y', CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
	FROM DUAL UNION
	SELECT  'TO_FLOAT', 'TO_FLOAT(value)', 'ETL Built-In Transformation: Record handling and processing rule for all projects. Converts a string or numeric value to a double-precision floating point number (the Double datatype). TO_FLOAT ignores leading blanks.', 'Y', CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
	FROM DUAL UNION
	SELECT  'TO_INTEGER', 'TO_INTEGER(value[,flag])', 'ETL Built-In Transformation: Record handling and processing rule for all projects. Converts a string or numeric value to an integer. TO_INTEGER syntax contains an optional argument that you can choose to round the number to the nearest integer or truncate the decimal portion. TO_INTEGER ignores leading blanks.', 'Y', CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
	FROM DUAL UNION
	SELECT  'TRUNC', 'TRUNC', 'ETL Built-In Transformation: Record handling and processing rule for all projects', 'Y', CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
	FROM DUAL UNION
	SELECT  'UPPER', 'UPPER(string)', 'ETL Built-In Transformation: Record handling and processing rule for all projects. Converts lowercase string characters to uppercase.', 'Y', CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator'
	FROM DUAL UNION
	SELECT  'VARIANCE', 'VARIANCE(numeric_value[,filter_condition])', 'ETL Built in transformation (Aggregation). Returns the variance of a value you pass to it. VARIANCE is used to analyze statistical data. You can nest only one other aggregate function within VARIANCE, and the nested function must return a Numeric datatype', 'Y', CURRENT_TIMESTAMP, 'Administrator',CURRENT_TIMESTAMP, 'Administrator' FROM DUAL);
END IF;
END;
/
DECLARE
COLUMNCHECKERFLAG INT;
BEGIN
  SELECT COUNT(*) INTO COLUMNCHECKERFLAG FROM ALL_TAB_COLUMNS WHERE  OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME = UPPER('TRANSFORMATIONS_HISTORY') AND COLUMN_NAME=UPPER('ETL_TOOL');
    IF COLUMNCHECKERFLAG = 0 THEN
	EXECUTE IMMEDIATE   'ALTER TABLE TRANSFORMATIONS_HISTORY ADD ETL_TOOL VARCHAR2(100)';
  END IF;
END;
/
DECLARE
DATAEXISTANCE INT;
BEGIN
    SELECT COUNT(*) INTO DATAEXISTANCE FROM APP_PREFERENCES WHERE UPPER(PREFERENCE_NAME) = UPPER('ETL_TRANSFORMATION_SETTINGS');
    IF DATAEXISTANCE = 0 THEN
        INSERT INTO APP_PREFERENCES (PREFERENCE_NAME,PREFERENCE_VALUE) VALUES ('ETL_TRANSFORMATION_SETTINGS','{"com.ads.mm.transformation.pseudocode.informatica":1}');
    END IF;
END;
/
DECLARE
   COLUMNCHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO COLUMNCHECKERFLAG FROM TRANSFORMATIONS_HISTORY WHERE ETL_TOOL IS NULL;
   IF COLUMNCHECKERFLAG <> 0 THEN
    UPDATE TRANSFORMATIONS_HISTORY SET ETL_TOOL = 'INFORMATICA_PSEUDOCODE' WHERE ETL_TOOL IS NULL;
   END IF;
END;
/
DECLARE
   COLUMNCHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO COLUMNCHECKERFLAG FROM ALL_TAB_COLUMNS WHERE  OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME = UPPER('SYS_CON_ENVIRONMENTS') AND COLUMN_NAME=UPPER('VERSION');
   IF COLUMNCHECKERFLAG = 0 THEN
        EXECUTE IMMEDIATE 'ALTER TABLE SYS_CON_ENVIRONMENTS ADD VERSION NUMBER(16,2) DEFAULT 1.00';
        EXECUTE IMMEDIATE 'UPDATE SYS_CON_ENVIRONMENTS SET VERSION = 1.00';
        EXECUTE IMMEDIATE 'ALTER TABLE SYS_CON_ENVIRONMENTS DROP CONSTRAINT UK_SYS_CON_ENV';
        EXECUTE IMMEDIATE 'ALTER TABLE SYS_CON_ENVIRONMENTS ADD CONSTRAINT UK_SYS_CON_ENVRON UNIQUE (SYSTEM_ID, SYSTEM_ENVIRONMENT_NAME, VERSION)';
        EXECUTE IMMEDIATE 'ALTER TABLE SYS_CON_ENVIRONMENTS ADD VERSION_LABEL VARCHAR2(50)';
        EXECUTE IMMEDIATE 'ALTER TABLE SYS_CON_ENVIRONMENTS ADD CHANGED_DESC VARCHAR2(4000)';
   END IF;
END;
/
DECLARE
INDEXEXISTANCEFLAG INT;
BEGIN
    SELECT COUNT(*) INTO INDEXEXISTANCEFLAG FROM ALL_INDEXES WHERE OWNER = sys_context('userenv', 'current_schema') AND TABLE_NAME='SYS_CON_ENVIRONMENTS' AND INDEX_NAME = 'UK_SYS_CON_ENV';
    IF INDEXEXISTANCEFLAG = 1 THEN
        EXECUTE IMMEDIATE 'DROP INDEX UK_SYS_CON_ENV';
    END IF;
END;
/
DECLARE
   COLUMNCHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO COLUMNCHECKERFLAG FROM ALL_TAB_COLUMNS WHERE  OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME = UPPER('SYSTEM_TABLE_COLUMNS_METADATA') AND COLUMN_NAME=UPPER('SCE_ID');
   IF COLUMNCHECKERFLAG = 0 THEN
        EXECUTE IMMEDIATE 'ALTER TABLE SYSTEM_TABLE_COLUMNS_METADATA ADD SCE_ID INT NULL';
        EXECUTE IMMEDIATE 'ALTER TABLE SYSTEM_TABLE_COLUMNS_METADATA ADD CONSTRAINT FK_SYS_CON_ENV_COL FOREIGN KEY(SCE_ID) REFERENCES SYS_CON_ENVIRONMENTS(SCE_ID)';
   END IF;
END;
/
DECLARE
   COLUMNCHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO COLUMNCHECKERFLAG FROM ALL_TAB_COLUMNS WHERE  OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME = UPPER('SYSTEM_TABLE_COLUMNS_METADATA') AND COLUMN_NAME=UPPER('SCE_ID');
   IF COLUMNCHECKERFLAG = 1 THEN
        EXECUTE IMMEDIATE 'MERGE INTO SYSTEM_TABLE_COLUMNS_METADATA STCM USING (SELECT SCE_ID, STM_ID FROM SYSTEM_TABLE_METADATA) STM ON (STM.STM_ID = STCM.STM_ID) WHEN MATCHED THEN UPDATE SET STCM.SCE_ID = STM.SCE_ID';
   END IF;
END;
/
DECLARE
   V_CHECK INT;
BEGIN
	BEGIN
      SELECT 1 INTO V_CHECK FROM DUAL WHERE NOT EXISTS ( SELECT * FROM USER_PREFERENCES
                             WHERE USER_ID LIKE 'SM_ENVIRONMENT_SETTINGS_VERSION_LABEL%' );
		EXCEPTION
		WHEN OTHERS THEN
		 NULL;
		END;
     IF V_CHECK = 1 THEN
      INSERT INTO USER_PREFERENCES (USER_ID,COLUMN_PREFERENCES) VALUES ( 'SM_ENVIRONMENT_SETTINGS_VERSION_LABEL_Administrator', 'true' );
   END IF;
END;
/

DECLARE
   TABLECHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO TABLECHECKERFLAG FROM ALL_OBJECTS WHERE OWNER = sys_context('userenv', 'current_schema') AND OBJECT_TYPE = 'FUNCTION' AND OBJECT_NAME = UPPER('FN_REPLACE_SYS_NAME');
   IF TABLECHECKERFLAG = 1 THEN
      EXECUTE IMMEDIATE 'DROP FUNCTION FN_REPLACE_SYS_NAME';
   END IF;
END;
/

CREATE OR REPLACE
FUNCTION FN_REPLACE_SYS_NAME(
    i_sys_name     VARCHAR2,
    i_old_sys_name VARCHAR2,
    i_new_sys_name VARCHAR2)
  RETURN VARCHAR2
IS
  v_sys_name         VARCHAR2(4000) :=i_sys_name;
  v_old_upd_sys_name VARCHAR2(4000) :=i_old_sys_name;
  v_new_sys_name     VARCHAR2(4000) :=i_new_sys_name;
  v_space_count      NUMBER(3);
  v_t_sys_name       VARCHAR2(4000);
  o_sys_name         VARCHAR2(4000);
BEGIN
  SELECT LENGTH (v_sys_name) - LENGTH (REPLACE (v_sys_name, CHR (10)))
  INTO v_space_count
  FROM DUAL;
  IF (NVL(v_space_count,0) = 0) THEN
    o_sys_name            := v_sys_name;
    IF (UPPER (v_sys_name) = UPPER (v_old_upd_sys_name)) THEN
      o_sys_name          := v_new_sys_name;
      -- RETURN o_sys_name;
    END IF;
    RETURN o_sys_name;
  ELSE
    FOR i IN 1 .. v_space_count
    LOOP
      SELECT SUBSTR (v_sys_name, DECODE (i, 1, 1, INSTR (v_sys_name, CHR (10), 1, i - 1) + 1), DECODE (i, 1, INSTR (v_sys_name, CHR (10), 1, 1), ( INSTR (v_sys_name, CHR (10), 1, i) - INSTR (v_sys_name, CHR (10), 1, i - 1))))
      INTO v_t_sys_name
      FROM DUAL;
      IF (UPPER (v_t_sys_name) = UPPER (v_old_upd_sys_name) || CHR (10)) THEN
        v_t_sys_name          := v_new_sys_name || CHR (10);
      END IF;
      o_sys_name := o_sys_name || v_t_sys_name;
    END LOOP;
    SELECT SUBSTR (v_sys_name, INSTR (v_sys_name, CHR (10), -1) + 1)
    INTO v_t_sys_name
    FROM DUAL;
    IF (UPPER (v_t_sys_name) = UPPER (v_old_upd_sys_name)) THEN
      v_t_sys_name          := v_new_sys_name;
    END IF;
    o_sys_name := o_sys_name || v_t_sys_name;
    RETURN o_sys_name;
  END IF;
EXCEPTION
WHEN OTHERS THEN
  RAISE_APPLICATION_ERROR(-20001,'Please check parameter values: Error code'||SQLCODE||'-Error Msg:'||SQLERRM);
END FN_REPLACE_SYS_NAME;
/

DECLARE
   TABLECHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO TABLECHECKERFLAG FROM ALL_OBJECTS WHERE OWNER = sys_context('userenv', 'current_schema') AND OBJECT_TYPE = 'FUNCTION' AND OBJECT_NAME = UPPER('FN_APND_SYS_ENV_CHECK');
   IF TABLECHECKERFLAG = 1 THEN
      EXECUTE IMMEDIATE 'DROP FUNCTION FN_APND_SYS_ENV_CHECK';
   END IF;
END;
/

CREATE OR REPLACE
FUNCTION FN_APND_SYS_ENV_CHECK(
    i_sys_name     VARCHAR2,
    i_env_name     VARCHAR2,
    i_old_sys_name VARCHAR2,
    i_old_env_name VARCHAR2 )
  RETURN VARCHAR2
IS
  v_sys_name              VARCHAR2 (4000) := i_sys_name;
  v_env_name              VARCHAR2 (4000) := i_env_name;
  v_old_upd_sys_name      VARCHAR2 (4000) := i_old_sys_name;
  v_old_upd_sys_env_name  VARCHAR2 (4000) := i_old_env_name;
  v_space_count           NUMBER (3);
  v_t_sys_name_last_place NUMBER (3);
  v_t_sys_name            VARCHAR (4000);
  o_sys_name              VARCHAR (4000);
  v_space_env_count       NUMBER (3);
  v_t_sys_env_name        VARCHAR (4000);
  o_sys_env_name          VARCHAR (4000);
BEGIN
  SELECT NVL(LENGTH (v_sys_name) - LENGTH (REPLACE (v_sys_name, CHR (10))), 0),
    NVL(LENGTH (v_env_name)      - LENGTH (REPLACE (v_env_name, CHR (10))), 0)
  INTO v_space_count,
    v_space_env_count
  FROM DUAL;
  DBMS_OUTPUT.put_line (v_space_count);
  IF (NVL(v_space_count,0)  = 0 AND NVL(v_space_env_count,0) = 0) THEN
    IF ( UPPER (v_sys_name) = UPPER (v_old_upd_sys_name) AND UPPER (v_env_name) = UPPER (v_old_upd_sys_env_name)) THEN
      GOTO flag_cond_s;
    ELSE
      GOTO flag_cond_f;
    END IF;
  ELSE
    FOR i IN 1 .. v_space_env_count
    LOOP
      SELECT SUBSTR (v_sys_name, DECODE (i, 1, 1, INSTR (v_sys_name, CHR (10), 1, i - 1) + 1), DECODE (i, 1, INSTR (v_sys_name, CHR (10), 1, 1), ( INSTR (v_sys_name, CHR (10), 1, i) - INSTR (v_sys_name, CHR (10), 1, i - 1)))),
        SUBSTR (v_env_name, DECODE (i, 1, 1, INSTR (v_env_name, CHR (10), 1, i      - 1) + 1), DECODE (i, 1, INSTR (v_env_name, CHR (10), 1, 1), ( INSTR (v_env_name, CHR (10), 1, i) - INSTR (v_env_name, CHR (10), 1, i - 1))))
      INTO v_t_sys_name,
        v_t_sys_env_name
      FROM DUAL;
      IF(v_space_count                                          +1=i) THEN
        SELECT SUBSTR (v_sys_name, INSTR (v_sys_name, CHR (10), -1) + 1)
        INTO v_t_sys_name
        FROM DUAL;
        v_t_sys_name_last_place:=i;
      END IF;
      IF ( RTRIM (UPPER (v_t_sys_name), CHR (10)) = RTRIM (UPPER (v_old_upd_sys_name), CHR (10)) AND RTRIM (UPPER (v_t_sys_env_name), CHR (10)) = RTRIM (UPPER (v_old_upd_sys_env_name), CHR (10))) THEN
        GOTO flag_cond_s;
      END IF;
    END LOOP;
    SELECT SUBSTR (v_sys_name, INSTR (v_sys_name, CHR (10), -1) + 1),
      SUBSTR (v_env_name, INSTR (v_env_name, CHR (10),      -1) + 1)
    INTO v_t_sys_name,
      v_t_sys_env_name
    FROM DUAL;
    IF(v_space_count+1=v_t_sys_name_last_place) THEN
      v_t_sys_name   :=NULL;
    END IF;
    IF ( UPPER (v_t_sys_name) = UPPER (v_old_upd_sys_name) AND UPPER (v_t_sys_env_name) = UPPER (v_old_upd_sys_env_name)) THEN
      GOTO flag_cond_s;
    ELSE
      GOTO flag_cond_f;
    END IF;
  END IF;
  <<flag_cond_s>>
  RETURN 1;
  <<flag_cond_f>>
  RETURN 0;
EXCEPTION
WHEN OTHERS THEN
  RAISE_APPLICATION_ERROR(-20001,'Please check parameter values: Error code'||SQLCODE||'-Error Msg:'||SQLERRM);
END FN_APND_SYS_ENV_CHECK;
/

DECLARE
   TABLECHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO TABLECHECKERFLAG FROM ALL_OBJECTS WHERE OWNER = sys_context('userenv', 'current_schema') AND OBJECT_TYPE = 'FUNCTION' AND OBJECT_NAME = UPPER('FN_REPLACE_ENVIRONMENT_NAME');
   IF TABLECHECKERFLAG = 1 THEN
      EXECUTE IMMEDIATE 'DROP FUNCTION FN_REPLACE_ENVIRONMENT_NAME';
   END IF;
END;
/

CREATE OR REPLACE
FUNCTION FN_REPLACE_ENVIRONMENT_NAME(
    i_sys_name     VARCHAR2,
    i_env_name     VARCHAR2,
    i_old_sys_name VARCHAR2,
    i_old_env_name VARCHAR2,
    i_new_env_name VARCHAR2)
  RETURN VARCHAR2
IS
  v_sys_name              VARCHAR2 (4000) := i_sys_name;
  v_env_name              VARCHAR2 (4000) := i_env_name;
  v_old_upd_sys_name      VARCHAR2 (4000) := i_old_sys_name;
  v_old_upd_sys_env_name  VARCHAR2 (4000) := i_old_env_name;
  v_new_sys_env_name      VARCHAR2 (4000) := i_new_env_name;
  v_space_count           NUMBER (3);
  v_t_sys_name_last_place NUMBER (3);
  v_t_sys_name            VARCHAR (4000);
  o_sys_name              VARCHAR (4000);
  v_space_env_count       NUMBER (3);
  v_t_sys_env_name        VARCHAR (4000);
  o_sys_env_name          VARCHAR (4000);
BEGIN
  SELECT LENGTH (v_sys_name) - LENGTH (REPLACE (v_sys_name, CHR (10))),
    LENGTH (v_env_name)      - LENGTH (REPLACE (v_env_name, CHR (10)))
  INTO v_space_count,
    v_space_env_count
  FROM DUAL;
  DBMS_OUTPUT.put_line (v_space_count);
  IF (v_space_count         = 0 AND v_space_env_count = 0) THEN
    o_sys_env_name         :=i_env_name;
    IF ( UPPER (v_sys_name) = UPPER (v_old_upd_sys_name) AND UPPER (v_env_name) = UPPER (v_old_upd_sys_env_name)) THEN
      o_sys_env_name       := v_new_sys_env_name;
    END IF;
    RETURN o_sys_env_name;
  ELSE
    FOR i IN 1 .. v_space_env_count
    LOOP
      SELECT SUBSTR (v_sys_name, DECODE (i, 1, 1, INSTR (v_sys_name, CHR (10), 1, i - 1) + 1), DECODE (i, 1, INSTR (v_sys_name, CHR (10), 1, 1), ( INSTR (v_sys_name, CHR (10), 1, i) - INSTR (v_sys_name, CHR (10), 1, i - 1)))),
        SUBSTR (v_env_name, DECODE (i, 1, 1, INSTR (v_env_name, CHR (10), 1, i      - 1) + 1), DECODE (i, 1, INSTR (v_env_name, CHR (10), 1, 1), ( INSTR (v_env_name, CHR (10), 1, i) - INSTR (v_env_name, CHR (10), 1, i - 1))))
      INTO v_t_sys_name,
        v_t_sys_env_name
      FROM DUAL;
      IF(v_space_count                                          +1=i) THEN
        SELECT SUBSTR (v_sys_name, INSTR (v_sys_name, CHR (10), -1) + 1)
        INTO v_t_sys_name
        FROM DUAL;
        v_t_sys_name_last_place:=i;
      END IF;
      IF ( RTRIM (UPPER (v_t_sys_name), CHR (10)) = RTRIM (UPPER (v_old_upd_sys_name), CHR (10)) AND RTRIM (UPPER (v_t_sys_env_name), CHR (10)) = RTRIM (UPPER (v_old_upd_sys_env_name), CHR (10))) THEN
        v_t_sys_env_name                         := v_new_sys_env_name || CHR (10);
      END IF;
      o_sys_env_name := o_sys_env_name || v_t_sys_env_name;
    END LOOP;
    SELECT SUBSTR (v_sys_name, INSTR (v_sys_name, CHR (10), -1) + 1),
      SUBSTR (v_env_name, INSTR (v_env_name, CHR (10),      -1) + 1)
    INTO v_t_sys_name,
      v_t_sys_env_name
    FROM DUAL;
    IF(v_space_count > v_space_env_count AND v_space_env_count > 0) THEN
      SELECT SUBSTR (v_sys_name, INSTR (v_sys_name, CHR (10), 1, v_space_env_count), INSTR (v_sys_name, CHR (10), 1, v_space_env_count + 1) - INSTR (v_sys_name, CHR (10), 1, v_space_env_count))
      INTO v_t_sys_name
      FROM dual;
      v_t_sys_name:= REPLACE(v_t_sys_name, CHR(10), '');
    END IF;
    IF(v_space_count+1=v_t_sys_name_last_place) THEN
      v_t_sys_name   :=NULL;
    END IF;
    IF ( UPPER (v_t_sys_name) = UPPER (v_old_upd_sys_name) AND UPPER (v_t_sys_env_name) = UPPER (v_old_upd_sys_env_name)) THEN
      v_t_sys_env_name       := v_new_sys_env_name;
    END IF;
    o_sys_env_name := o_sys_env_name || v_t_sys_env_name;
    RETURN o_sys_env_name;
  END IF;
EXCEPTION
WHEN OTHERS THEN
  RAISE_APPLICATION_ERROR(-20001,'Please check parameter values: Error code'||SQLCODE||'-Error Msg:'||SQLERRM);
END FN_REPLACE_ENVIRONMENT_NAME;
/

DECLARE
   TABLECHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO TABLECHECKERFLAG FROM ALL_OBJECTS WHERE OWNER = sys_context('userenv', 'current_schema') AND OBJECT_TYPE = 'FUNCTION' AND OBJECT_NAME = UPPER('FN_GET_MAP_SPEC_WITH_BR');
   IF TABLECHECKERFLAG = 1 THEN
      EXECUTE IMMEDIATE 'DROP FUNCTION FN_GET_MAP_SPEC_WITH_BR';
   END IF;
END;
/

CREATE OR REPLACE FUNCTION FN_GET_MAP_SPEC_WITH_BR
(
vMAP_ID VARCHAR2
)
  RETURN SYS_REFCURSOR
AS
my_cursor SYS_REFCURSOR;
vColumnName VARCHAR2(1000) := '';
vDynamicQuery VARCHAR2(4000) := '';
BEGIN
   SELECT DISTINCT ETL_TOOL INTO vColumnName FROM PROJECT P, MAPPING_DETAILS MD WHERE P.PROJ_ID = MD.PROJECT_ID AND MAP_ID = vMAP_ID;
   IF(vColumnName IS NULL OR vColumnName = ' ')
   THEN
   vColumnName :='INFORMATICA_PSEUDOCODE';
   END IF;
  vDynamicQuery :=
'SELECT
  ms.PROJ_ID,
  MAP_ID,
  MAP_SEQ_ID,
  ROW_ORDER,
  EXTENDED_BUS_RULE,
  SRC_SYSTEM_ID,
  SRC_SYSTEM_NAME,
  SRC_SYSTEM_ENVIRONMENT_NAME,
  SRC_TABLE_NAME,
  SRC_COLUMN_NAME,
  SRC_COL_DATATYPE,
  SRC_COL_LENGTH,
  SRC_COL_PRECISION,
  SRC_COL_SCALE,
  SRC_COL_DB_DEFAULT_VALUE,
  SRC_COL_DEF,
  SRC_COL_IDENTITY_FLAG,
  SRC_COL_NULLABLE_FLAG,
  SRC_PERCENT_NULL_VALUE,
  SRC_NATURAL_KEY_FLAG,
  SRC_MIN_VALUE,
  SRC_MAX_VALUE,
  TGT_SYSTEM_ID,
  TGT_SYSTEM_NAME,
  TGT_SYSTEM_ENVIRONMENT_NAME,
  TGT_TABLE_NAME,
  TGT_COLUMN_NAME,
  TGT_COL_DATATYPE,
  TGT_COL_LENGTH,
  TGT_COL_PRECISION,
  TGT_COL_SCALE,
  TGT_COL_ETL_DEFAULT_VALUE,
  TGT_COL_DEF,
  TGT_NATURAL_KEY_FLAG,
  TGT_PRIMARY_KEY_FLAG,
  LOOKUP_COLUMN,
  TRNSF_LOOKUP_CONDITION,
  LOOKUP_ON,
  BUSINESS_RULE,
  COL_MAP_COMPLETE_FLAG,
  ms.LAST_MODIFIED_BY,
  ms.LAST_MODIFIED_DATE_TIME,
  ms.CREATED_BY,
  ms.CREATED_DATETIME,
  USER_DEFINATION1,
  USER_DEFINATION2,
  USER_DEFINATION3,
  USER_DEFINATION4,
  MAP_SPECROWCOMMENTS,
  TGT_COL_NULLABLE_FLAG,
  SRC_SDI_FLAG,
  SRC_SDI_DESCRIPTION,
  SRC_PRIMARY_KEY_FLAG,
  TGT_SDI_FLAG,
  TGT_SDI_DESCRIPTION,' || vColumnName || ' AS PSUEDO_CODE FROM MAPPING_SPECIFICATION ms LEFT OUTER JOIN transformations t ON to_char(ms.business_rule) = t.transf_name WHERE MAP_ID = ' || vMAP_ID || ' ORDER BY ROW_ORDER';
  OPEN my_cursor FOR vDynamicQuery;
  RETURN my_cursor;
END FN_GET_MAP_SPEC_WITH_BR;
/

DECLARE
   COLUMNCHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO COLUMNCHECKERFLAG FROM ALL_TAB_COLUMNS WHERE  OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME = UPPER('CSM_CODE_VALUE') AND COLUMN_NAME=UPPER('START_DATE');
   IF COLUMNCHECKERFLAG = 0 THEN
        EXECUTE IMMEDIATE 'ALTER TABLE CSM_CODE_VALUE ADD START_DATE TIMESTAMP NULL';
        EXECUTE IMMEDIATE 'ALTER TABLE CSM_CODE_VALUE ADD END_DATE TIMESTAMP NULL';
	EXECUTE IMMEDIATE 'ALTER TABLE CSM_CODE_VALUE ADD USER_DEFINED_FIELD1 VARCHAR2(4000)';
	EXECUTE IMMEDIATE 'ALTER TABLE CSM_CODE_VALUE ADD USER_DEFINED_FIELD2 VARCHAR2(4000)';
	EXECUTE IMMEDIATE 'ALTER TABLE CSM_CODE_VALUE ADD USER_DEFINED_FIELD3 VARCHAR2(4000)';
	EXECUTE IMMEDIATE 'ALTER TABLE CSM_CODE_VALUE ADD USER_DEFINED_FIELD4 VARCHAR2(4000)';
	EXECUTE IMMEDIATE 'ALTER TABLE CSM_CODE_VALUE ADD USER_DEFINED_FIELD5 VARCHAR2(4000)';
	EXECUTE IMMEDIATE 'ALTER TABLE CSM_CODE_VALUE ADD USER_DEFINED_FIELD6 VARCHAR2(4000)';
	EXECUTE IMMEDIATE 'ALTER TABLE CSM_CODE_VALUE ADD USER_DEFINED_FIELD7 VARCHAR2(4000)';
	EXECUTE IMMEDIATE 'ALTER TABLE CSM_CODE_VALUE ADD USER_DEFINED_FIELD8 VARCHAR2(4000)';
	EXECUTE IMMEDIATE 'ALTER TABLE CSM_CODE_VALUE ADD USER_DEFINED_FIELD9 VARCHAR2(4000)';
	EXECUTE IMMEDIATE 'ALTER TABLE CSM_CODE_VALUE ADD USER_DEFINED_FIELD10 VARCHAR2(4000)';
   END IF;
END;
/
DECLARE
   TABLECHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO TABLECHECKERFLAG FROM all_VIEWS WHERE OWNER = sys_context('userenv', 'current_schema') AND VIEW_NAME = UPPER('V_CODESET_DETAILS');
   IF TABLECHECKERFLAG = 1 THEN
      EXECUTE IMMEDIATE 'DROP VIEW V_CODESET_DETAILS';
   END IF;
END;
/
CREATE OR REPLACE  VIEW "V_CODESET_DETAILS" ("CODESET_ID", "CODESET_NAME", "CODESET_VERSION", "CODE_ID", "CODE_VALUE", "CODE_NAME",
            "CODE_DESC", "SYSTEM_NAME","START_DATE",
	    "END_DATE","USER_DEFINED_FIELD1","USER_DEFINED_FIELD2","USER_DEFINED_FIELD3","USER_DEFINED_FIELD4",
	    "USER_DEFINED_FIELD5","USER_DEFINED_FIELD6","USER_DEFINED_FIELD7","USER_DEFINED_FIELD8",
	    "USER_DEFINED_FIELD9","USER_DEFINED_FIELD10")
AS
  SELECT B.CODESET_ID,
    B.CODESET_NAME,
    CASE
      WHEN instr(B.CODESET_VERSION,'.')=0
      THEN concat(CAST(B.CODESET_VERSION AS VARCHAR2(10)),'.00')
      WHEN instr(SUBSTR(B.CODESET_VERSION,-2),'.')!=0
      THEN concat(CAST(B.CODESET_VERSION AS VARCHAR2(10)),'0')
      ELSE CAST(B.CODESET_VERSION AS VARCHAR2(20))
    END AS CODESET_VERSION,
    C.CODE_ID,
    C.CODE_STND_VALUE AS CODE_VALUE,
    C.CODE_NAME,
    C.CODE_DESC,
    CASE WHEN (C.SYSTEM_ENV_NAME IS NULL OR LTRIM(RTRIM(C.SYSTEM_ENV_NAME)) = '') THEN C.SYSTEM_NAME ELSE C.SYSTEM_ENV_NAME END AS SYSTEM_NAME,
    C.START_DATE,
    C.END_DATE,
    C.USER_DEFINED_FIELD1,
    C.USER_DEFINED_FIELD2,
    C.USER_DEFINED_FIELD3,
    C.USER_DEFINED_FIELD4,
    C.USER_DEFINED_FIELD5,
    C.USER_DEFINED_FIELD6,
    C.USER_DEFINED_FIELD7,
    C.USER_DEFINED_FIELD8,
    C.USER_DEFINED_FIELD9,
    C.USER_DEFINED_FIELD10
  FROM CSM_CODESET B,
    CSM_CODE_VALUE C
  WHERE B.CODESET_ID = C.CODESET_ID AND C.DELETE_FLAG = 'N';
/
DECLARE
TABLECHECKERFLAG INT;
PROFILECHECKER INT;
PROFILEDETAILSCHECKER INT;
BEGIN
   SELECT COUNT(*) INTO TABLECHECKERFLAG FROM ALL_TABLES WHERE OWNER = sys_context( 'userenv', 'current_schema' ) AND TABLE_NAME = UPPER('ADS_PROFILES');
   IF TABLECHECKERFLAG = 1 THEN
      SELECT COUNT(PROFILE_ID) INTO PROFILECHECKER FROM   ADS_PROFILES  WHERE  PROFILE_ID = 1;
        IF PROFILECHECKER > 0 THEN
          SELECT COUNT(PROFILE_DETAILS_NAME) INTO PROFILEDETAILSCHECKER FROM   ADS_PROFILES_DETAILS  WHERE  PROFILE_ID = 1 AND PROFILE_DETAILS_NAME in ('CSM_CODE_VALUE_GRID_HEADER_ORDER_PREFERENCE','CSM_CODE_VALUE_GRID_HEADER_VISIBILITY_PREFERENCE');
            IF PROFILEDETAILSCHECKER = 0 THEN
             EXECUTE IMMEDIATE 'INSERT INTO ADS_PROFILES_DETAILS(PROFILE_ID,PROFILE_DETAILS_NAME,PROFILE_DETAILS_VALUE) VALUES (1,''CSM_CODE_VALUE_GRID_HEADER_ORDER_PREFERENCE'',''codeName:100,codeValue:100,codeDesc:150,codesetName:100,systemEnvName:160,activeFlag:69,deleteFlag:69,startDate:0,endDate:0,userDef1:0,userDef2:0,userDef3:0,userDef4:0,userDef5:0,userDef6:0,userDef7:0,userDef8:0,userDef9:0,userDef10:0,createdBy:100,createdate:150,modifiedby:109,modifieddate:150'')';
             EXECUTE IMMEDIATE 'INSERT INTO ADS_PROFILES_DETAILS(PROFILE_ID,PROFILE_DETAILS_NAME,PROFILE_DETAILS_VALUE) VALUES (1,''CSM_CODE_VALUE_GRID_HEADER_VISIBILITY_PREFERENCE'',''codeName,codeValue,codeDesc,codesetName,systemEnvName,activeFlag,deleteFlag,,,,,,,,,,,,,createdBy,createdate,modifiedby,modifieddate'')';
            END IF;
        END IF;
   END IF;
END;
/
DECLARE
   DATALENGTHCHECKERFLAG INT;
BEGIN
   SELECT DATA_LENGTH INTO DATALENGTHCHECKERFLAG FROM ALL_TAB_COLUMNS WHERE  OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME = UPPER('CSM_CODE_VALUE') AND COLUMN_NAME=UPPER('CODE_NAME');
   IF DATALENGTHCHECKERFLAG < 255 THEN
    EXECUTE IMMEDIATE 'ALTER TABLE CSM_CODE_VALUE MODIFY CODE_NAME VARCHAR2(255)';
   END IF;
END;
/
DECLARE
TABLECHECKERFLAG INT;
BEGIN
    SELECT COUNT(*) INTO TABLECHECKERFLAG FROM ADS_KEY_VALUE_OBJECTS WHERE  OBJECT_TYPE = 'TESTCASE_PLAN';
    IF TABLECHECKERFLAG = 0 THEN
        EXECUTE IMMEDIATE 'INSERT INTO ADS_KEY_VALUE_OBJECTS (OBJECT_TYPE,OBJECT_TABLE,OBJECT_TABLE_COLUMN,OBJECT_PARENT_TYPE,OBJECT_PARENT_COLUMN_ID) VALUES (''TESTCASE_PLAN'',''TCM_TESTCASE'',''TESTCASE_ID'','''','''')';
    END IF;
END;
/
DECLARE
   COLUMNCHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO COLUMNCHECKERFLAG FROM ALL_TAB_COLUMNS WHERE  OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME = UPPER('MAPPING_DETAILS') AND COLUMN_NAME=UPPER('SPEC_ARTIFACTS_REFERENCE');
   IF COLUMNCHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'ALTER TABLE MAPPING_DETAILS ADD SPEC_ARTIFACTS_REFERENCE varchar2(4000) NULL';
   END IF;
END;
/
DECLARE
COLUMNCHECKERFLAG INT;
    BEGIN
        SELECT COUNT(*) INTO COLUMNCHECKERFLAG FROM ADS_MM_VERSION WHERE VALUE = '8.0';
        IF COLUMNCHECKERFLAG = 1 THEN
            UPDATE ADS_PROFILES_DETAILS SET PROFILE_DETAILS_VALUE = PROFILE_DETAILS_VALUE || ',testSpecifications' WHERE PROFILE_DETAILS_NAME = 'TABS_TO_DISPLAY' AND PROFILE_DETAILS_VALUE NOT LIKE '%testSpecifications%';
    END IF;
END;
/
DECLARE
   COLUMNCHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO COLUMNCHECKERFLAG FROM ALL_TAB_COLUMNS WHERE  OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME = UPPER('MAPPING_SPECIFICATION') AND COLUMN_NAME=UPPER('REFERENCE_TABLE');
   IF COLUMNCHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'ALTER TABLE MAPPING_SPECIFICATION ADD REFERENCE_TABLE varchar2(4000) NULL';
   END IF;
END;
/
DECLARE
COLUMNCHECKERFLAG INT;
PROFILECHECKER INT;
    BEGIN
        SELECT COUNT(*) INTO COLUMNCHECKERFLAG FROM ADS_MM_VERSION WHERE VALUE < '8.1';
        IF COLUMNCHECKERFLAG = 1 THEN
        SELECT COUNT(*) INTO PROFILECHECKER FROM ADS_PROFILES_DETAILS WHERE PROFILE_DETAILS_NAME = 'HEADER_VISIBILITY_PREFERENCE' and PROFILE_DETAILS_VALUE LIKE '%ReferenceTable%';
        IF PROFILECHECKER = 0 THEN
            UPDATE ADS_PROFILES_DETAILS SET PROFILE_DETAILS_VALUE = PROFILE_DETAILS_VALUE || ',ReferenceTable' WHERE PROFILE_DETAILS_NAME = 'HEADER_VISIBILITY_PREFERENCE';
    END IF;
 END IF;
END;
/
DECLARE
COLUMNCHECKERFLAG INT;
PROFILECHECKER INT;
    BEGIN
        SELECT COUNT(*) INTO COLUMNCHECKERFLAG FROM ADS_MM_VERSION WHERE VALUE < '8.1';
        IF COLUMNCHECKERFLAG = 1 THEN
        SELECT COUNT(*) INTO PROFILECHECKER FROM ADS_PROFILES_DETAILS WHERE PROFILE_DETAILS_NAME = 'HEADER_ORDER_PREFERENCE' and PROFILE_DETAILS_VALUE LIKE '%ReferenceTable%';
        IF PROFILECHECKER = 0 THEN
            UPDATE ADS_PROFILES_DETAILS SET PROFILE_DETAILS_VALUE = PROFILE_DETAILS_VALUE || ',ReferenceTable:200' WHERE PROFILE_DETAILS_NAME = 'HEADER_ORDER_PREFERENCE';
    END IF;
   END IF;
END;
/

DECLARE
   TABLECHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO TABLECHECKERFLAG FROM ALL_OBJECTS WHERE OWNER = sys_context('userenv', 'current_schema') AND OBJECT_TYPE = 'PROCEDURE' AND OBJECT_NAME = UPPER('RDM_CREATE_COMPARE_TABLES');
   IF TABLECHECKERFLAG = 1 THEN
      EXECUTE IMMEDIATE 'DROP PROCEDURE RDM_CREATE_COMPARE_TABLES';
   END IF;
END;
/

create or replace PROCEDURE RDM_CREATE_COMPARE_TABLES(tab_id in NUMBER, tab_ver in varchar2) AS
      temp_tab rdm_reference_table.RDM_REF_TABLE_CAT_ID%type;
      l_query long := 'select RDM_TAB_COL_VAL_ROW_ORDER as ROW_NUM';
      final_query long :='';
      temp_tab_name varchar2(10) := 'TEMP_';
      flag int;
  Begin
        execute immediate 'truncate table TEMP_STRUT';

        execute immediate 'insert into temp_strut
        SELECT RDM_REF_TAB_COL_NAME, rdm_ref_tab_col_value, RDM_TAB_COL_VAL_ROW_ORDER
        FROM RDM_REFERENCE_TABLE A
        JOIN rdm_ref_tab_columns C
        ON a.rdm_ref_table_id = c.rdm_ref_tab_id
        LEFT JOIN RDM_REF_TAB_COL_VALUES d
        ON c.rdm_ref_tab_col_id = d.rdm_ref_tab_col_id
        WHERE a.rdm_ref_table_id = '||tab_id||'
        ORDER BY RDM_REF_TAB_COL_NAME,RDM_TAB_COL_VAL_ROW_ORDER';

        SELECT RDM_REF_TABLE_CAT_ID into temp_tab FROM RDM_REFERENCE_TABLE WHERE rdm_ref_table_id = tab_id;

        select count(*) into flag from all_tables where OWNER = sys_context('userenv', 'current_schema') AND table_name=upper(''|| temp_tab_name || temp_tab || tab_id || tab_ver ||'');

        IF flag = 1 then
        execute immediate 'drop table ' || temp_tab_name || temp_tab || tab_id || tab_ver;
        end if;

        for x in (select distinct RDM_REF_TAB_COL_NAME from temp_strut order by 1 )
        loop
         l_query := l_query ||
             replace( q'|, max(decode(RDM_REF_TAB_COL_NAME,'$X$',RDM_REF_TAB_COL_VALUE)) "$X$|' || '"', '$X$', x.RDM_REF_TAB_COL_NAME );
        end loop;

        final_query := 'create table '|| temp_tab_name || temp_tab || tab_id || tab_ver ||' as '|| l_query || ' from temp_strut group by RDM_TAB_COL_VAL_ROW_ORDER order by RDM_TAB_COL_VAL_ROW_ORDER';
     execute immediate final_query;
   END;
/
DECLARE
   COLUMNCHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO COLUMNCHECKERFLAG FROM ALL_TAB_COLUMNS WHERE  OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME = UPPER('TEMP_STRUT') AND COLUMN_NAME=UPPER('RDM_TAB_COL_VAL_ROW_ORDER') AND NULLABLE = 'N';
   IF COLUMNCHECKERFLAG = 1 THEN
      EXECUTE IMMEDIATE 'ALTER TABLE TEMP_STRUT MODIFY(RDM_TAB_COL_VAL_ROW_ORDER NULL)';
   END IF;
END;
/
DECLARE
   COLUMNCHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO COLUMNCHECKERFLAG FROM ALL_TAB_COLUMNS WHERE  OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME = UPPER('PROJECT_RESOURCES') AND COLUMN_NAME=UPPER('ASSIGNED_ROLE') AND DATA_LENGTH=UPPER('20');
   IF COLUMNCHECKERFLAG = 1 THEN
      EXECUTE IMMEDIATE 'ALTER TABLE PROJECT_RESOURCES  MODIFY ASSIGNED_ROLE VARCHAR2(50)';
   END IF;
END;
/
DECLARE
DATACHECKERFLAG INT;
BEGIN
  SELECT COUNT(*) INTO DATACHECKERFLAG FROM USERS WHERE LANDED_MODULE IS NULL;
  IF DATACHECKERFLAG > 0 THEN
      EXECUTE IMMEDIATE 'UPDATE USERS SET LANDED_MODULE = ''com.ads.mm.permission.mm'' WHERE LANDED_MODULE IS NULL AND (USER_ID = ''Administrator'' OR USER_ID = ''public'')';
   END IF;
END;
/
DECLARE
   COLUMNCHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO COLUMNCHECKERFLAG FROM ALL_TAB_COLUMNS WHERE  OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME = UPPER('CSM_MAPPING_SPEC_READONLY') AND COLUMN_NAME=UPPER('SRC_START_DATE');
   IF COLUMNCHECKERFLAG = 0 THEN
        EXECUTE IMMEDIATE 'ALTER TABLE CSM_MAPPING_SPEC_READONLY ADD SRC_START_DATE TIMESTAMP NULL';
        EXECUTE IMMEDIATE 'ALTER TABLE CSM_MAPPING_SPEC_READONLY ADD SRC_END_DATE TIMESTAMP NULL';
	EXECUTE IMMEDIATE 'ALTER TABLE CSM_MAPPING_SPEC_READONLY ADD SRC_USER_DEFINED_FIELD1 VARCHAR2(4000)';
	EXECUTE IMMEDIATE 'ALTER TABLE CSM_MAPPING_SPEC_READONLY ADD SRC_USER_DEFINED_FIELD2 VARCHAR2(4000)';
	EXECUTE IMMEDIATE 'ALTER TABLE CSM_MAPPING_SPEC_READONLY ADD SRC_USER_DEFINED_FIELD3 VARCHAR2(4000)';
	EXECUTE IMMEDIATE 'ALTER TABLE CSM_MAPPING_SPEC_READONLY ADD SRC_USER_DEFINED_FIELD4 VARCHAR2(4000)';
	EXECUTE IMMEDIATE 'ALTER TABLE CSM_MAPPING_SPEC_READONLY ADD SRC_USER_DEFINED_FIELD5 VARCHAR2(4000)';
	EXECUTE IMMEDIATE 'ALTER TABLE CSM_MAPPING_SPEC_READONLY ADD SRC_USER_DEFINED_FIELD6 VARCHAR2(4000)';
	EXECUTE IMMEDIATE 'ALTER TABLE CSM_MAPPING_SPEC_READONLY ADD SRC_USER_DEFINED_FIELD7 VARCHAR2(4000)';
	EXECUTE IMMEDIATE 'ALTER TABLE CSM_MAPPING_SPEC_READONLY ADD SRC_USER_DEFINED_FIELD8 VARCHAR2(4000)';
	EXECUTE IMMEDIATE 'ALTER TABLE CSM_MAPPING_SPEC_READONLY ADD SRC_USER_DEFINED_FIELD9 VARCHAR2(4000)';
	EXECUTE IMMEDIATE 'ALTER TABLE CSM_MAPPING_SPEC_READONLY ADD SRC_USER_DEFINED_FIELD10 VARCHAR2(4000)';

	EXECUTE IMMEDIATE 'ALTER TABLE CSM_MAPPING_SPEC_READONLY ADD TGT_START_DATE TIMESTAMP NULL';
	EXECUTE IMMEDIATE 'ALTER TABLE CSM_MAPPING_SPEC_READONLY ADD TGT_END_DATE TIMESTAMP NULL';
	EXECUTE IMMEDIATE 'ALTER TABLE CSM_MAPPING_SPEC_READONLY ADD TGT_USER_DEFINED_FIELD1 VARCHAR2(4000)';
	EXECUTE IMMEDIATE 'ALTER TABLE CSM_MAPPING_SPEC_READONLY ADD TGT_USER_DEFINED_FIELD2 VARCHAR2(4000)';
	EXECUTE IMMEDIATE 'ALTER TABLE CSM_MAPPING_SPEC_READONLY ADD TGT_USER_DEFINED_FIELD3 VARCHAR2(4000)';
	EXECUTE IMMEDIATE 'ALTER TABLE CSM_MAPPING_SPEC_READONLY ADD TGT_USER_DEFINED_FIELD4 VARCHAR2(4000)';
	EXECUTE IMMEDIATE 'ALTER TABLE CSM_MAPPING_SPEC_READONLY ADD TGT_USER_DEFINED_FIELD5 VARCHAR2(4000)';
	EXECUTE IMMEDIATE 'ALTER TABLE CSM_MAPPING_SPEC_READONLY ADD TGT_USER_DEFINED_FIELD6 VARCHAR2(4000)';
	EXECUTE IMMEDIATE 'ALTER TABLE CSM_MAPPING_SPEC_READONLY ADD TGT_USER_DEFINED_FIELD7 VARCHAR2(4000)';
	EXECUTE IMMEDIATE 'ALTER TABLE CSM_MAPPING_SPEC_READONLY ADD TGT_USER_DEFINED_FIELD8 VARCHAR2(4000)';
	EXECUTE IMMEDIATE 'ALTER TABLE CSM_MAPPING_SPEC_READONLY ADD TGT_USER_DEFINED_FIELD9 VARCHAR2(4000)';
	EXECUTE IMMEDIATE 'ALTER TABLE CSM_MAPPING_SPEC_READONLY ADD TGT_USER_DEFINED_FIELD10 VARCHAR2(4000)';
   END IF;
END;
/
DECLARE
   COLUMNCHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO COLUMNCHECKERFLAG FROM ALL_TAB_COLUMNS WHERE  OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME = UPPER('SYSTEM_TABLE_COLUMNS_METADATA') AND COLUMN_NAME=UPPER('COL_DATA_DOMAIN') AND DATA_LENGTH=UPPER('50');
   IF COLUMNCHECKERFLAG = 1 THEN
      EXECUTE IMMEDIATE 'ALTER TABLE SYSTEM_TABLE_COLUMNS_METADATA  MODIFY COL_DATA_DOMAIN VARCHAR2(4000)';
   END IF;
END;
/
DECLARE
   COLUMNCHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO COLUMNCHECKERFLAG FROM ALL_TAB_COLUMNS WHERE  OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME = UPPER('SYS_CON_ENVIRONMENTS') AND COLUMN_NAME=UPPER('SSH_PORT');
   IF COLUMNCHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'ALTER TABLE SYS_CON_ENVIRONMENTS ADD SSH_PORT INT NULL';
   END IF;
END;
/
DECLARE
   COLUMNCHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO COLUMNCHECKERFLAG FROM ALL_TAB_COLUMNS WHERE  OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME = UPPER('SYS_CON_ENVIRONMENTS') AND COLUMN_NAME=UPPER('AUTHENTICATION_TYPE');
   IF COLUMNCHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'ALTER TABLE SYS_CON_ENVIRONMENTS ADD AUTHENTICATION_TYPE varchar2(100) NULL';
   END IF;
END;
/
DECLARE
   COLUMNCHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO COLUMNCHECKERFLAG FROM ALL_TAB_COLUMNS WHERE  OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME = UPPER('SYS_CON_ENVIRONMENTS') AND COLUMN_NAME=UPPER('KERBEROS_PRINCIPAL');
   IF COLUMNCHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'ALTER TABLE SYS_CON_ENVIRONMENTS ADD KERBEROS_PRINCIPAL varchar2(255) NULL';
   END IF;
END;
/
DECLARE
   TABLECHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO TABLECHECKERFLAG FROM all_VIEWS WHERE OWNER = sys_context('userenv', 'current_schema') AND VIEW_NAME = UPPER('ACTIVE_SYS_CON_ENVIRONMENTS');
   IF TABLECHECKERFLAG = 1 THEN
      EXECUTE IMMEDIATE 'DROP VIEW ACTIVE_SYS_CON_ENVIRONMENTS';
   END IF;
END;
/
CREATE OR REPLACE FORCE VIEW  "ACTIVE_SYS_CON_ENVIRONMENTS" AS SELECT * FROM   SYS_CON_ENVIRONMENTS WHERE  STATUS = 'Active';
/
DECLARE
COLUMNCHECKERFLAG INT;
BEGIN
  SELECT COUNT(*) INTO COLUMNCHECKERFLAG FROM ALL_TAB_COLUMNS WHERE  OWNER = sys_context('userenv', 'current_schema') AND TABLE_NAME = UPPER('CATFX_WORKFLOW') AND COLUMN_NAME=UPPER('CATFX_RUN_ON_STARTUP');
    IF COLUMNCHECKERFLAG = 0 THEN
        EXECUTE IMMEDIATE   'ALTER TABLE CATFX_WORKFLOW ADD CATFX_RUN_ON_STARTUP CHAR(1)';
        EXECUTE IMMEDIATE   'ALTER TABLE CATFX_WORKFLOW ADD CATFX_RUN_ON_SHUTDOWN CHAR(1)';
        EXECUTE IMMEDIATE   'ALTER TABLE CATFX_WORKFLOW ADD CATFX_INSTALL_SCRIPT VARCHAR2(4000)';
        EXECUTE IMMEDIATE   'ALTER TABLE CATFX_WORKFLOW ADD CATFX_UNINSTALL_SCRIPT VARCHAR2(4000)';
    END IF;
END;
/
DECLARE
   COLUMNCHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO COLUMNCHECKERFLAG FROM CATFX_WORKFLOW WHERE CATFX_RUN_ON_STARTUP IS NULL;
   IF COLUMNCHECKERFLAG <> 0 THEN
    EXECUTE IMMEDIATE 'UPDATE CATFX_WORKFLOW SET CATFX_RUN_ON_STARTUP = ''0'', CATFX_RUN_ON_SHUTDOWN= ''0'' WHERE CATFX_RUN_ON_STARTUP IS NULL  AND CATFX_RUN_ON_SHUTDOWN IS NULL';
   END IF;
END;
/
DECLARE
COLUMNCHECKERFLAG INT;
BEGIN
  SELECT COUNT(*) INTO COLUMNCHECKERFLAG FROM ALL_TAB_COLUMNS WHERE  OWNER = sys_context('userenv', 'current_schema') AND TABLE_NAME = UPPER('CAT_TEMPLATES') AND COLUMN_NAME=UPPER('CATFX_RUN_ON_STARTUP');
    IF COLUMNCHECKERFLAG = 0 THEN
 EXECUTE IMMEDIATE   'ALTER TABLE CAT_TEMPLATES ADD CATFX_RUN_ON_STARTUP CHAR(1)';
 EXECUTE IMMEDIATE   'ALTER TABLE CAT_TEMPLATES ADD CATFX_RUN_ON_SHUTDOWN CHAR(1)';
 EXECUTE IMMEDIATE   'ALTER TABLE CAT_TEMPLATES ADD CATFX_INSTALL_SCRIPT VARCHAR2(4000)';
 EXECUTE IMMEDIATE   'ALTER TABLE CAT_TEMPLATES ADD CATFX_UNINSTALL_SCRIPT VARCHAR2(4000)';
 EXECUTE IMMEDIATE   'ALTER TABLE CAT_TEMPLATES ADD CATFX_WORKFLOW_ID INT NULL';
  END IF;
END;
/
DECLARE
   COLUMNCHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO COLUMNCHECKERFLAG FROM CAT_TEMPLATES WHERE CATFX_RUN_ON_STARTUP IS NULL;
   IF COLUMNCHECKERFLAG <> 0 THEN
    EXECUTE IMMEDIATE   'UPDATE CAT_TEMPLATES SET CATFX_RUN_ON_STARTUP = ''0'', CATFX_RUN_ON_SHUTDOWN= ''0'' WHERE CATFX_RUN_ON_STARTUP IS NULL  AND CATFX_RUN_ON_SHUTDOWN IS NULL';
   END IF;
END;
/
DECLARE
COLUMNCHECKERFLAG INT;
BEGIN
  SELECT COUNT(*) INTO COLUMNCHECKERFLAG FROM ALL_TAB_COLUMNS WHERE  OWNER = sys_context('userenv', 'current_schema') AND TABLE_NAME = UPPER('CATFX_SCRIPT') AND COLUMN_NAME=UPPER('CATFX_RUN_ON_STARTUP');
    IF COLUMNCHECKERFLAG = 0 THEN
        EXECUTE IMMEDIATE   'ALTER TABLE CATFX_SCRIPT ADD CATFX_SCRIPT_DESCRIPTION VARCHAR2(4000)';
        EXECUTE IMMEDIATE   'ALTER TABLE CATFX_SCRIPT ADD CATFX_RUN_ON_STARTUP CHAR(1)';
        EXECUTE IMMEDIATE   'ALTER TABLE CATFX_SCRIPT ADD CATFX_RUN_ON_SHUTDOWN CHAR(1)';
        EXECUTE IMMEDIATE   'ALTER TABLE CATFX_SCRIPT ADD CATFX_INSTALL_SCRIPT VARCHAR2(4000)';
        EXECUTE IMMEDIATE   'ALTER TABLE CATFX_SCRIPT ADD CATFX_UNINSTALL_SCRIPT VARCHAR2(4000)';
    END IF;
END;
/
DECLARE
   COLUMNCHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO COLUMNCHECKERFLAG FROM CATFX_SCRIPT WHERE CATFX_RUN_ON_STARTUP IS NULL;
   IF COLUMNCHECKERFLAG <> 0 THEN
    EXECUTE IMMEDIATE   'UPDATE CATFX_SCRIPT SET CATFX_RUN_ON_STARTUP = ''0'', CATFX_RUN_ON_SHUTDOWN= ''0'' WHERE CATFX_RUN_ON_STARTUP IS NULL  AND CATFX_RUN_ON_SHUTDOWN IS NULL';
   END IF;
END;
/
DECLARE
   COLUMNCHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO COLUMNCHECKERFLAG FROM ALL_TAB_COLUMNS WHERE  OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME = UPPER('RM_RELEASE') AND COLUMN_NAME=UPPER('USER_DEFINED_FIELD1');
   IF COLUMNCHECKERFLAG = 0 THEN
	EXECUTE IMMEDIATE 'ALTER TABLE RM_RELEASE ADD USER_DEFINED_FIELD1 VARCHAR2(4000)';
	EXECUTE IMMEDIATE 'ALTER TABLE RM_RELEASE ADD USER_DEFINED_FIELD2 VARCHAR2(4000)';
	EXECUTE IMMEDIATE 'ALTER TABLE RM_RELEASE ADD USER_DEFINED_FIELD3 VARCHAR2(4000)';
	EXECUTE IMMEDIATE 'ALTER TABLE RM_RELEASE ADD USER_DEFINED_FIELD4 VARCHAR2(4000)';
	EXECUTE IMMEDIATE 'ALTER TABLE RM_RELEASE ADD USER_DEFINED_FIELD5 VARCHAR2(4000)';
	EXECUTE IMMEDIATE 'ALTER TABLE RM_RELEASE ADD USER_DEFINED_FIELD6 VARCHAR2(4000)';
	EXECUTE IMMEDIATE 'ALTER TABLE RM_RELEASE ADD USER_DEFINED_FIELD7 VARCHAR2(4000)';
	EXECUTE IMMEDIATE 'ALTER TABLE RM_RELEASE ADD USER_DEFINED_FIELD8 VARCHAR2(4000)';
	EXECUTE IMMEDIATE 'ALTER TABLE RM_RELEASE ADD USER_DEFINED_FIELD9 VARCHAR2(4000)';
	EXECUTE IMMEDIATE 'ALTER TABLE RM_RELEASE ADD USER_DEFINED_FIELD10 VARCHAR2(4000)';
   END IF;
END;
/
DECLARE
INDEXEXISTANCEFLAG INT;
BEGIN
    SELECT COUNT(*) INTO INDEXEXISTANCEFLAG FROM ALL_INDEXES WHERE OWNER = sys_context('userenv', 'current_schema') AND TABLE_NAME='REQM_SPECIFICATION' AND INDEX_NAME = 'UK_REQM_SPECIFICATION_NAME';
    IF INDEXEXISTANCEFLAG = 1 THEN
        EXECUTE IMMEDIATE 'DROP INDEX UK_REQM_SPECIFICATION_NAME';
    END IF;
END;
/
DECLARE
VERSIONCHECKERSFLAG INT;
TABLECHECKERFLAG INT;
COLUMNCHECKERFLAG INT;
SEQUENCECHECKERFLAG INT;
TRIGGERCHECKERFLAG INT;
CONSTRAINTCHECKERFLAG INT;
INDEXCHECKERFLAG INT;
BEGIN
 SELECT COUNT(*) INTO VERSIONCHECKERSFLAG FROM ADS_MM_VERSION WHERE VALUE < '8.2';
    IF VERSIONCHECKERSFLAG = 1 THEN
    SELECT COUNT(*) INTO TABLECHECKERFLAG FROM "RM_HISTORYTYPE" where HISTORYTYPENAME = 'Login';
    IF TABLECHECKERFLAG =0 THEN
        INSERT INTO RM_HISTORYTYPE (HISTORYTYPENAME, HISTORYTYPEDESC)
            (SELECT 'Login', 'User Logged In' FROM DUAL
            UNION
            SELECT 'Logout', 'User Logged Out' FROM DUAL
            );
    END IF;
    SELECT COUNT(*) INTO TABLECHECKERFLAG FROM ALL_CONS_COLUMNS WHERE OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME = UPPER('DQ_VALUE_VOTE') AND CONSTRAINT_NAME = UPPER('FK_DQ_VALUE_VOTE_USER_ID');
    IF TABLECHECKERFLAG > 0 THEN
       EXECUTE IMMEDIATE 'ALTER TABLE DQ_VALUE_VOTE DROP CONSTRAINT FK_DQ_VALUE_VOTE_USER_ID';
    END IF;
    SELECT COUNT(*) INTO TABLECHECKERFLAG FROM ALL_CONS_COLUMNS WHERE OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME = UPPER('DQ_COLUMN_RESOURCE') AND CONSTRAINT_NAME = UPPER('FK_DQ_VAL_VOTE_USER_ID');
    IF TABLECHECKERFLAG > 0 THEN
       EXECUTE IMMEDIATE 'ALTER TABLE DQ_COLUMN_RESOURCE DROP CONSTRAINT FK_DQ_VAL_VOTE_USER_ID';
    END IF;
    SELECT COUNT(*) INTO TABLECHECKERFLAG FROM ALL_CONS_COLUMNS WHERE OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME = UPPER('DQ_ATTRIBUTE_VOTE') AND CONSTRAINT_NAME = UPPER('FK_DQ_ATTR_VOTE_USER_ID');
    IF TABLECHECKERFLAG > 0 THEN
       EXECUTE IMMEDIATE 'ALTER TABLE DQ_ATTRIBUTE_VOTE DROP CONSTRAINT FK_DQ_ATTR_VOTE_USER_ID';
    END IF;
    SELECT COUNT(*) INTO TABLECHECKERFLAG FROM ALL_CONS_COLUMNS WHERE OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME = UPPER('RDM_REF_TABLE_USERS') AND CONSTRAINT_NAME = UPPER('FK_RDM_TBL_USER_ID');
    IF TABLECHECKERFLAG > 0 THEN
       EXECUTE IMMEDIATE 'ALTER TABLE RDM_REF_TABLE_USERS DROP CONSTRAINT FK_RDM_TBL_USER_ID';
    END IF;
    SELECT COUNT(*) INTO TABLECHECKERFLAG FROM ALL_CONS_COLUMNS WHERE OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME = UPPER('USER_ASSIGNED_ROLES') AND CONSTRAINT_NAME = UPPER('R_6');
    IF TABLECHECKERFLAG > 0 THEN
       EXECUTE IMMEDIATE 'ALTER TABLE USER_ASSIGNED_ROLES DROP CONSTRAINT R_6';
    END IF;
    SELECT COUNT(*) INTO TABLECHECKERFLAG FROM ALL_CONS_COLUMNS WHERE OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME = UPPER('CSM_MAP_CAT_USERS') AND CONSTRAINT_NAME = UPPER('FK_CSM_MAP_USER_ID');
    IF TABLECHECKERFLAG > 0 THEN
       EXECUTE IMMEDIATE 'ALTER TABLE CSM_MAP_CAT_USERS DROP CONSTRAINT FK_CSM_MAP_USER_ID';
    END IF;
    SELECT COUNT(*) INTO TABLECHECKERFLAG FROM ALL_CONS_COLUMNS WHERE OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME = UPPER('CSM_CODESET_CAT_USERS') AND CONSTRAINT_NAME = UPPER('FK_CSM_CDST_USR_ID');
    IF TABLECHECKERFLAG > 0 THEN
       EXECUTE IMMEDIATE 'ALTER TABLE CSM_CODESET_CAT_USERS DROP CONSTRAINT FK_CSM_CDST_USR_ID';
    END IF;

    SELECT COUNT(*) INTO TABLECHECKERFLAG FROM ALL_CONS_COLUMNS WHERE OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME = UPPER('OBJECT_CONFIGURATIONS') AND CONSTRAINT_NAME = UPPER('FK_OBJECT_CONFIG_USERID');
    IF TABLECHECKERFLAG > 0 THEN
       EXECUTE IMMEDIATE 'ALTER TABLE OBJECT_CONFIGURATIONS DROP CONSTRAINT FK_OBJECT_CONFIG_USERID';
    END IF;

    SELECT COUNT(*) INTO TABLECHECKERFLAG FROM ALL_CONS_COLUMNS WHERE OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME = UPPER('ADS_PROFILES') AND CONSTRAINT_NAME = UPPER('FK_ADS_PROFILES_OUID');
    IF TABLECHECKERFLAG > 0 THEN
       EXECUTE IMMEDIATE 'ALTER TABLE ADS_PROFILES DROP CONSTRAINT FK_ADS_PROFILES_OUID';
    END IF;
    SELECT COUNT(*) INTO TABLECHECKERFLAG FROM ALL_CONS_COLUMNS WHERE OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME = UPPER('CHAT_USER_MESSAGES') AND CONSTRAINT_NAME = UPPER('FK_CHAT_USER_MESSAGES_USERS');
    IF TABLECHECKERFLAG > 0 THEN
       EXECUTE IMMEDIATE 'ALTER TABLE CHAT_USER_MESSAGES DROP CONSTRAINT FK_CHAT_USER_MESSAGES_USERS';
    END IF;
    SELECT COUNT(*) INTO TABLECHECKERFLAG FROM ALL_CONS_COLUMNS WHERE OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME = UPPER('CHAT_MESSAGES') AND CONSTRAINT_NAME = UPPER('FK_CHAT_MESSAGES_USERS');
    IF TABLECHECKERFLAG > 0 THEN
       EXECUTE IMMEDIATE 'ALTER TABLE CHAT_MESSAGES DROP CONSTRAINT FK_CHAT_MESSAGES_USERS';
    END IF;
    SELECT COUNT(*) INTO TABLECHECKERFLAG FROM ALL_CONS_COLUMNS WHERE OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME = UPPER('CHAT_THREAD_USER') AND CONSTRAINT_NAME = UPPER('FK_CHAT_THREAD_USER_USERS');
    IF TABLECHECKERFLAG > 0 THEN
       EXECUTE IMMEDIATE 'ALTER TABLE CHAT_THREAD_USER DROP CONSTRAINT FK_CHAT_THREAD_USER_USERS';
    END IF;
    SELECT COUNT(*) INTO TABLECHECKERFLAG FROM ALL_CONS_COLUMNS WHERE OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME = UPPER('CHAT_THREAD') AND CONSTRAINT_NAME = UPPER('FK_CREATED_BY_CHAT_THREAD');
    IF TABLECHECKERFLAG > 0 THEN
       EXECUTE IMMEDIATE 'ALTER TABLE CHAT_THREAD DROP CONSTRAINT FK_CREATED_BY_CHAT_THREAD';
    END IF;
    SELECT COUNT(*) INTO TABLECHECKERFLAG FROM ALL_CONS_COLUMNS WHERE OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME = UPPER('OBJECT_USER') AND CONSTRAINT_NAME = UPPER('FK_OBJECT_USER_UID');
    IF TABLECHECKERFLAG > 0 THEN
       EXECUTE IMMEDIATE 'ALTER TABLE OBJECT_USER DROP CONSTRAINT FK_OBJECT_USER_UID';
    END IF;
    SELECT COUNT(*) INTO TABLECHECKERFLAG FROM ALL_CONS_COLUMNS WHERE OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME = UPPER('RM_HISTORY') AND CONSTRAINT_NAME = UPPER('FK_RM_USER_ID');
    IF TABLECHECKERFLAG > 0 THEN
       EXECUTE IMMEDIATE 'ALTER TABLE RM_HISTORY DROP CONSTRAINT FK_RM_USER_ID';
    END IF;
    SELECT COUNT(*) INTO TABLECHECKERFLAG FROM ALL_CONS_COLUMNS WHERE OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME = UPPER('USERS') AND CONSTRAINT_NAME = UPPER('XPKUSERS');
    IF TABLECHECKERFLAG > 0 THEN
       EXECUTE IMMEDIATE 'ALTER TABLE USERS DROP CONSTRAINT XPKUSERS';
    END IF;
    EXECUTE IMMEDIATE 'ALTER TABLE USERS RENAME TO TEMP_USERS';
    SELECT COUNT(*) INTO INDEXCHECKERFLAG FROM ALL_INDEXES WHERE OWNER = sys_context('userenv', 'current_schema') AND INDEX_NAME = UPPER('XPKUSERS');
    IF INDEXCHECKERFLAG = 1 THEN
      EXECUTE IMMEDIATE 'ALTER INDEX XPKUSERS RENAME TO TEMP_XPKUSERS';
    END IF;
    EXECUTE IMMEDIATE ('CREATE TABLE "USERS"
    (	"ID" int NOT NULL,
        "USER_ID" VARCHAR2(20) NOT NULL,
	"USER_FULL_NAME" VARCHAR2(50),
	"USER_EMAIL_ADDR" VARCHAR2(50),
	"USER_TEL" VARCHAR2(20),
	"USER_MOBILE" VARCHAR2(20),
	"USER_ALTERNATE_TEL" VARCHAR2(20),
	"DEFAULT_ROLE" VARCHAR2(50),
	"USER_PASSWORD" VARCHAR2(250),
	"USER_COMPANY_TITLE" VARCHAR2(50),
	"USER_COMPANY" VARCHAR2(255),
	"USER_REPORTS_TO_MGR_NAME" VARCHAR2(50),
	"CREATED_BY" VARCHAR2(20 BYTE),
	"CREATED_DATETIME" TIMESTAMP (6),
	"LAST_MODIFIED_DATE_TIME" TIMESTAMP (6),
	"LAST_MODIFIED_BY" VARCHAR2(20),
	"USER_READ_ONLY" VARCHAR2(1),
	"USER_LANGUAGE" VARCHAR2(100) DEFAULT ''English_en_US'',
	"LANDED_MODULE" VARCHAR2(255) DEFAULT NULL,
	"ENABLED" NUMBER(*,0) DEFAULT 1,
	"USER_THEME" VARCHAR2(50),
	"ISLDAP_USER" VARCHAR2(1),CONSTRAINT "XPKUSERS" PRIMARY KEY ("USER_ID") ENABLE
   )');
    SELECT COUNT(*) INTO SEQUENCECHECKERFLAG FROM ALL_SEQUENCES WHERE SEQUENCE_OWNER = sys_context('userenv', 'current_schema') AND SEQUENCE_NAME = UPPER('USERS_TAB_ID_SEQ');
    IF SEQUENCECHECKERFLAG = 0 THEN
        EXECUTE IMMEDIATE 'CREATE SEQUENCE "USERS_TAB_ID_SEQ"  MINVALUE 1 MAXVALUE 999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE';
    END IF;
    SELECT COUNT(*)  INTO TRIGGERCHECKERFLAG FROM all_triggers WHERE OWNER = sys_context('userenv', 'current_schema') AND trigger_name = UPPER('USERS_TAB_ID_INS');
    IF TRIGGERCHECKERFLAG = 0 THEN
        EXECUTE IMMEDIATE 'CREATE OR REPLACE TRIGGER  "USERS_TAB_ID_INS" BEFORE INSERT ON USERS FOR EACH ROW BEGIN SELECT USERS_TAB_ID_SEQ.NEXTVAL INTO :new.ID FROM DUAL; END;';
        EXECUTE IMMEDIATE 'ALTER TRIGGER  "USERS_TAB_ID_INS" ENABLE';
    END IF;
    SELECT COUNT(*) INTO COLUMNCHECKERFLAG FROM  USERS ;
    IF COLUMNCHECKERFLAG = 0 THEN
    EXECUTE IMMEDIATE ('INSERT INTO USERS( USER_ID , USER_FULL_NAME, USER_EMAIL_ADDR, USER_TEL, USER_MOBILE, USER_ALTERNATE_TEL, DEFAULT_ROLE, USER_PASSWORD, USER_COMPANY_TITLE, USER_COMPANY, USER_REPORTS_TO_MGR_NAME, CREATED_BY, CREATED_DATETIME,	LAST_MODIFIED_DATE_TIME, LAST_MODIFIED_BY, USER_READ_ONLY, USER_LANGUAGE, LANDED_MODULE, ENABLED, USER_THEME, ISLDAP_USER)
    SELECT USER_ID , USER_FULL_NAME, USER_EMAIL_ADDR, USER_TEL, USER_MOBILE, USER_ALTERNATE_TEL, DEFAULT_ROLE, USER_PASSWORD, USER_COMPANY_TITLE, USER_COMPANY, USER_REPORTS_TO_MGR_NAME, CREATED_BY, CREATED_DATETIME, LAST_MODIFIED_DATE_TIME, LAST_MODIFIED_BY, USER_READ_ONLY, USER_LANGUAGE, LANDED_MODULE, ENABLED, USER_THEME, ISLDAP_USER FROM TEMP_USERS');
    EXECUTE IMMEDIATE ('DROP TABLE TEMP_USERS');
    END IF;
    SELECT COUNT(*) INTO CONSTRAINTCHECKERFLAG FROM ALL_CONS_COLUMNS WHERE OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME = UPPER('RDM_REF_TABLE_USERS') AND CONSTRAINT_NAME = UPPER('FK_RDM_TBL_USER_ID');
    IF CONSTRAINTCHECKERFLAG = 0 THEN
        EXECUTE IMMEDIATE 'ALTER TABLE RDM_REF_TABLE_USERS ADD CONSTRAINT FK_RDM_TBL_USER_ID FOREIGN KEY(USER_ID) REFERENCES USERS(USER_ID) ON DELETE CASCADE ENABLE';
    END IF;

    SELECT COUNT(*) INTO CONSTRAINTCHECKERFLAG FROM ALL_CONS_COLUMNS WHERE OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME = UPPER('USER_ASSIGNED_ROLES') AND CONSTRAINT_NAME = UPPER('R_6');
    IF CONSTRAINTCHECKERFLAG = 0 THEN
        EXECUTE IMMEDIATE 'ALTER TABLE USER_ASSIGNED_ROLES ADD CONSTRAINT R_6 FOREIGN KEY(USER_ID) REFERENCES USERS(USER_ID) ON DELETE CASCADE ENABLE';
    END IF;

    SELECT COUNT(*) INTO CONSTRAINTCHECKERFLAG FROM ALL_CONS_COLUMNS WHERE OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME = UPPER('CSM_MAP_CAT_USERS') AND CONSTRAINT_NAME = UPPER('FK_CSM_MAP_USER_ID');
    IF CONSTRAINTCHECKERFLAG = 0 THEN
        EXECUTE IMMEDIATE 'ALTER TABLE CSM_MAP_CAT_USERS ADD CONSTRAINT FK_CSM_MAP_USER_ID FOREIGN KEY(USER_ID) REFERENCES USERS(USER_ID) ON DELETE CASCADE ENABLE';
    END IF;

    SELECT COUNT(*) INTO CONSTRAINTCHECKERFLAG FROM ALL_CONS_COLUMNS WHERE OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME = UPPER('CSM_CODESET_CAT_USERS') AND CONSTRAINT_NAME = UPPER('FK_CSM_CDST_USR_ID');
    IF CONSTRAINTCHECKERFLAG = 0 THEN
        EXECUTE IMMEDIATE 'ALTER TABLE CSM_CODESET_CAT_USERS ADD CONSTRAINT FK_CSM_CDST_USR_ID FOREIGN KEY(USER_ID) REFERENCES USERS(USER_ID) ON DELETE CASCADE ENABLE';
    END IF;

    SELECT COUNT(*) INTO CONSTRAINTCHECKERFLAG FROM ALL_CONS_COLUMNS WHERE OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME = UPPER('OBJECT_CONFIGURATIONS') AND CONSTRAINT_NAME = UPPER('FK_OBJECT_CONFIG_USERID');
    IF CONSTRAINTCHECKERFLAG = 0 THEN
        EXECUTE IMMEDIATE 'ALTER TABLE OBJECT_CONFIGURATIONS ADD CONSTRAINT FK_OBJECT_CONFIG_USERID FOREIGN KEY(CONFIGURATION_USER) REFERENCES USERS(USER_ID) ON DELETE CASCADE ENABLE';
    END IF;

    SELECT COUNT(*) INTO CONSTRAINTCHECKERFLAG FROM ALL_CONS_COLUMNS WHERE OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME = UPPER('ADS_PROFILES') AND CONSTRAINT_NAME = UPPER('FK_ADS_PROFILES_OUID');
    IF CONSTRAINTCHECKERFLAG = 0 THEN
        EXECUTE IMMEDIATE 'ALTER TABLE ADS_PROFILES ADD CONSTRAINT FK_ADS_PROFILES_OUID FOREIGN KEY(OWNER_USER_ID) REFERENCES USERS(USER_ID) ON DELETE CASCADE ENABLE';
    END IF;
    SELECT COUNT(*) INTO CONSTRAINTCHECKERFLAG FROM ALL_CONS_COLUMNS WHERE OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME = UPPER('CHAT_USER_MESSAGES') AND CONSTRAINT_NAME = UPPER('FK_CHAT_USER_MESSAGES_USERS');
    IF CONSTRAINTCHECKERFLAG = 0 THEN
        EXECUTE IMMEDIATE 'ALTER TABLE CHAT_USER_MESSAGES ADD CONSTRAINT FK_CHAT_USER_MESSAGES_USERS FOREIGN KEY(USER_ID) REFERENCES USERS(USER_ID) ON DELETE CASCADE ENABLE';
    END IF;

    SELECT COUNT(*) INTO CONSTRAINTCHECKERFLAG FROM ALL_CONS_COLUMNS WHERE OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME = UPPER('CHAT_MESSAGES') AND CONSTRAINT_NAME = UPPER('FK_CHAT_MESSAGES_USERS');
    IF CONSTRAINTCHECKERFLAG = 0 THEN
        EXECUTE IMMEDIATE 'ALTER TABLE CHAT_MESSAGES ADD CONSTRAINT FK_CHAT_MESSAGES_USERS FOREIGN KEY(CREATED_BY) REFERENCES USERS(USER_ID) ON DELETE CASCADE ENABLE';
    END IF;

    SELECT COUNT(*) INTO CONSTRAINTCHECKERFLAG FROM ALL_CONS_COLUMNS WHERE OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME = UPPER('CHAT_THREAD_USER') AND CONSTRAINT_NAME = UPPER('FK_CHAT_THREAD_USER_USERS');
    IF CONSTRAINTCHECKERFLAG = 0 THEN
        EXECUTE IMMEDIATE 'ALTER TABLE CHAT_THREAD_USER ADD CONSTRAINT FK_CHAT_THREAD_USER_USERS FOREIGN KEY(USER_ID) REFERENCES USERS(USER_ID) ON DELETE CASCADE ENABLE';
    END IF;

    SELECT COUNT(*) INTO CONSTRAINTCHECKERFLAG FROM ALL_CONS_COLUMNS WHERE OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME = UPPER('CHAT_THREAD') AND CONSTRAINT_NAME = UPPER('FK_CREATED_BY_CHAT_THREAD');
    IF CONSTRAINTCHECKERFLAG = 0 THEN
        EXECUTE IMMEDIATE 'ALTER TABLE CHAT_THREAD ADD CONSTRAINT FK_CREATED_BY_CHAT_THREAD FOREIGN KEY(CREATED_BY) REFERENCES USERS(USER_ID) ON DELETE CASCADE ENABLE';
    END IF;

    SELECT COUNT(*) INTO CONSTRAINTCHECKERFLAG FROM ALL_CONS_COLUMNS WHERE OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME = UPPER('OBJECT_USER') AND CONSTRAINT_NAME = UPPER('FK_OBJECT_USER_UID');
    IF CONSTRAINTCHECKERFLAG = 0 THEN
        EXECUTE IMMEDIATE 'ALTER TABLE OBJECT_USER ADD CONSTRAINT FK_OBJECT_USER_UID FOREIGN KEY(USER_ID) REFERENCES USERS(USER_ID) ON DELETE CASCADE ENABLE';
    END IF;
    SELECT COUNT(*) INTO CONSTRAINTCHECKERFLAG FROM ALL_CONS_COLUMNS WHERE OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME = UPPER('RM_HISTORY') AND CONSTRAINT_NAME = UPPER('FK_RM_USER_ID');
    IF CONSTRAINTCHECKERFLAG = 0 THEN
        EXECUTE IMMEDIATE 'ALTER TABLE RM_HISTORY ADD CONSTRAINT FK_RM_USER_ID FOREIGN KEY(USER_ID) REFERENCES USERS(USER_ID) ON DELETE CASCADE ENABLE';
    END IF;
    END IF;
END;
/
DECLARE
TABLECHECKERFLAG INT;
BEGIN
    SELECT COUNT(*) INTO TABLECHECKERFLAG FROM ADS_KEY_VALUE_OBJECTS WHERE  OBJECT_TYPE = 'CAT';
    IF TABLECHECKERFLAG = 0 THEN
        EXECUTE IMMEDIATE 'INSERT INTO ADS_KEY_VALUE_OBJECTS (OBJECT_TYPE,OBJECT_TABLE,OBJECT_TABLE_COLUMN,OBJECT_PARENT_TYPE,OBJECT_PARENT_COLUMN_ID) VALUES (''CAT'',''CAT_TEMPLATES'',''CAT_ID'','''','''')';
        EXECUTE IMMEDIATE 'INSERT INTO ADS_KEY_VALUE_OBJECTS (OBJECT_TYPE,OBJECT_TABLE,OBJECT_TABLE_COLUMN,OBJECT_PARENT_TYPE,OBJECT_PARENT_COLUMN_ID) VALUES (''CATFX_WORKFLOW'',''CATFX_WORKFLOW'',''CATFX_WORKFLOW_ID'','''','''')';
    END IF;
END;
/
DECLARE
DATACHECKERFLAG INT;
BEGIN
    SELECT COUNT(*) INTO DATACHECKERFLAG FROM APP_PREFERENCES WHERE PREFERENCE_NAME = 'SEND_EMAIL_ON_CAT_JOB_EXECUTED';
    IF DATACHECKERFLAG = 0 THEN
        INSERT INTO APP_PREFERENCES(PREFERENCE_NAME,PREFERENCE_VALUE) VALUES ('SEND_EMAIL_ON_CAT_JOB_EXECUTED','true');
        INSERT INTO APP_PREFERENCES(PREFERENCE_NAME,PREFERENCE_VALUE) VALUES ('SEND_EMAIL_ON_CAT_JOB_EXECUTED_SUBJECT','@Name@ Job Execution Details - DO NOT REPLY');
        INSERT INTO APP_PREFERENCES(PREFERENCE_NAME,PREFERENCE_VALUE) VALUES ('SEND_EMAIL_ON_CAT_JOB_EXECUTED_MESSAGE','Hi,<br>This is a system generated email notification.<br><br><table border = 1><tr><th colspan = 2><b>Job Details</b></th></tr><tr><td>Workflow Name  </td><td>@workflowName@</td></tr><tr><td>Job Name </td><td>@jobName@</td><tr><td>Job Owner  </td><td>@jobOwner@</td></tr><tr><td>Job Scheduled Date Time  </td><td>@scheduledDateTime@</td></tr><tr><td>Job Completed Date Time  </td><td>@jobExecutedDateTime@</td></tr><tr><td>Job Next Executed Date Time  </td><td>@jobNextExecutedDateTime@</td></tr></table><BR><BR><b>@executionMessage@</b><br><br><I><font color =red>Note</font> This is an auto generated email notification and this mailbox is not monitored.<BR>Please do not reply to this email.</I>');
    END IF;
END;
/
DECLARE
   TABLECHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO TABLECHECKERFLAG FROM all_VIEWS WHERE OWNER = sys_context('userenv', 'current_schema') AND VIEW_NAME = UPPER('MAP_SPEC_SUMMARY_V');
   IF TABLECHECKERFLAG = 1 THEN
      EXECUTE IMMEDIATE 'DROP VIEW MAP_SPEC_SUMMARY_V';
END IF;
END;
/
DECLARE
    VERSIONCHECKKERFLAG INT;
BEGIN
    SELECT COUNT(*) INTO VERSIONCHECKKERFLAG FROM ADS_MM_VERSION WHERE VALUE < '8.2';
    IF VERSIONCHECKKERFLAG = 1 THEN
        EXECUTE IMMEDIATE 'UPDATE ADS_KEY_VALUE t SET t.OBJECT_ID = (SELECT REQM_ARTIFACT.artifact_id FROM REQM_ARTIFACT WHERE t.OBJECT_ID  = CAST(REQM_ARTIFACT.mtd_id AS VARCHAR2(4000))) WHERE t.OBJECT_TYPE_ID =(SELECT OBJECT_TYPE_ID   FROM ADS_KEY_VALUE_OBJECTS   WHERE OBJECT_TYPE = ''REQM_ARTIFACT''   ) AND EXISTS (SELECT t3.artifact_id             FROM REQM_ARTIFACT t3             WHERE t.OBJECT_ID  = CAST(t3.mtd_id AS VARCHAR2(4000)))';
    END IF;
END;
/
DECLARE
   COLUMNCHECKERFLAG INT;
BEGIN
SELECT COUNT(*) INTO COLUMNCHECKERFLAG FROM ALL_TAB_COLUMNS WHERE OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME = UPPER('REQM_ARTIFACT') AND COLUMN_NAME  = UPPER('MTD_ID');
    IF COLUMNCHECKERFLAG > 0 THEN
        EXECUTE IMMEDIATE 'ALTER TABLE REQM_ARTIFACT DROP COLUMN MTD_ID';
    END IF;
END;
/
DECLARE
   COLUMNCHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO COLUMNCHECKERFLAG FROM ALL_TAB_COLUMNS WHERE  OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME = UPPER('BG_CATEGORIES') AND COLUMN_NAME=UPPER('OBJECT_TYPE_ID');
   IF COLUMNCHECKERFLAG = 0 THEN
    EXECUTE IMMEDIATE 'ALTER TABLE BG_CATEGORIES ADD OBJECT_TYPE_ID NUMBER NULL';
    EXECUTE IMMEDIATE 'update  BG_CATEGORIES  set OBJECT_TYPE_ID = (SELECT OBJECT_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE=''BGM_TERM'')';
   END IF;
END;
/
DECLARE
   TABLECHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO TABLECHECKERFLAG FROM ALL_TABLES WHERE OWNER = sys_context( 'userenv', 'current_schema' ) AND TABLE_NAME = UPPER('BG_BUSINESS_RULES');
   IF TABLECHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'CREATE TABLE  "BG_BUSINESS_RULES"  (
	   "ID" NUMBER NOT NULL ENABLE,
	   "CATALOG_ID" NUMBER NOT NULL ENABLE ,
	   "NAME" VARCHAR2(250) NOT NULL ENABLE ,
	   "DEFINITION"	 VARCHAR2(4000) NULL ,
	   "DESCRIPTION" VARCHAR2(4000) NULL ,
	   "NOTES" VARCHAR2(4000) NULL ,
	   "OBJECTIVE"  VARCHAR2(4000) NULL ,
	   "DATA_STEWARD_ID"   NUMBER  DEFAULT -1 NOT NULL,
	   "STATUS_ID"   NUMBER  DEFAULT -1 NOT NULL,
	   "RESPONSIBLE_TEAM"   VARCHAR2(4000) NULL ,
	   "CRITICALITY_ID"   NUMBER NULL,
	   CONSTRAINT "BUSINESS_RULES_BUS_RULE_ID" PRIMARY KEY("ID") ENABLE ,
	   CONSTRAINT "FK_BR_CATEGORY_ID" FOREIGN KEY("CATALOG_ID") REFERENCES BG_CATEGORIES("CATEGORY_ID") ON DELETE CASCADE ENABLE,
	   CONSTRAINT "UK_BR_CATEGORY_ID_NAME" UNIQUE ("CATALOG_ID", "NAME") ENABLE
	  )';
   END IF;
END;
/
DECLARE
   SEQUENCECHECKERFLAG INT;
BEGIN
    SELECT COUNT(*) INTO SEQUENCECHECKERFLAG FROM ALL_SEQUENCES WHERE SEQUENCE_OWNER = sys_context('userenv', 'current_schema') AND SEQUENCE_NAME = UPPER('BG_RULE_SEQ');
   IF SEQUENCECHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'CREATE SEQUENCE   "BG_RULE_SEQ"  MINVALUE 1 MAXVALUE 999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE';
   END IF;
END;
/
DECLARE
  TRIGGERCHECKERFLAG INT;
BEGIN
  SELECT COUNT(*)
  INTO TRIGGERCHECKERFLAG
  FROM all_triggers
  WHERE OWNER = sys_context('userenv', 'current_schema') AND trigger_name = UPPER('BG_RULE_INSERT');
  IF TRIGGERCHECKERFLAG = 0 THEN
    EXECUTE IMMEDIATE 'CREATE OR REPLACE TRIGGER  "BG_RULE_INSERT" BEFORE INSERT ON BG_BUSINESS_RULES FOR EACH ROW BEGIN SELECT BG_RULE_SEQ.NEXTVAL INTO :new.ID FROM DUAL; END;';
    EXECUTE IMMEDIATE 'ALTER TRIGGER  "BG_RULE_INSERT" ENABLE';
  END IF;
END;
/
DECLARE
TABLECHECKERFLAG INT;
BEGIN
    SELECT COUNT(*) INTO TABLECHECKERFLAG FROM ADS_KEY_VALUE_OBJECTS WHERE  OBJECT_TYPE = 'BGM_RULE';
    IF TABLECHECKERFLAG = 0 THEN
        EXECUTE IMMEDIATE 'INSERT INTO ADS_KEY_VALUE_OBJECTS (OBJECT_TYPE,OBJECT_TABLE,OBJECT_TABLE_COLUMN,OBJECT_PARENT_TYPE,OBJECT_PARENT_COLUMN_ID) VALUES (''BGM_RULE'',''BG_BUSINESS_RULES'',''ID'','''','''')';

    END IF;
END;
/
DECLARE
   TABLECHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO TABLECHECKERFLAG FROM ALL_TABLES WHERE OWNER = sys_context( 'userenv', 'current_schema' ) AND TABLE_NAME = UPPER('BG_POLICIES');
   IF TABLECHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'CREATE TABLE  "BG_POLICIES"  (
	   "ID" NUMBER NOT NULL ENABLE,
	   "CATALOG_ID" NUMBER NOT NULL ENABLE ,
	   "NAME" VARCHAR2(250) NOT NULL ENABLE ,
	   "DEFINITION"	VARCHAR2(4000) NULL ,
	   "DESCRIPTION"  VARCHAR2(4000) NULL ,
	   "NOTES" VARCHAR2(4000) NULL ,
	   "DATA_STEWARD_ID"   NUMBER  DEFAULT -1 NOT NULL,
	   "STATUS_ID"   NUMBER  DEFAULT -1 NOT NULL,
	   "RESPONSIBLE_TEAM"   VARCHAR2(4000) NULL ,
	   "POLICY_VALIDITY" VARCHAR2(100) NULL,
	   "POLICY_START_DATE"   TIMESTAMP NULL ,
	   "POLICY_END_DATE" TIMESTAMP NULL,
	   "USER_DEFINED_1" VARCHAR2(4000) NULL,
           "USER_DEFINED_2" VARCHAR2(4000) NULL,
           "USER_DEFINED_3" VARCHAR2(4000) NULL,
           "USER_DEFINED_4" VARCHAR2(4000) NULL,
	   "USER_DEFINED_5" VARCHAR2(4000) NULL,
	   "USER_DEFINED_6" VARCHAR2(4000) NULL,
	   "USER_DEFINED_7" VARCHAR2(4000) NULL,
	   "USER_DEFINED_8" VARCHAR2(4000) NULL,
	   "USER_DEFINED_9" VARCHAR2(4000) NULL,
	   "USER_DEFINED_10" VARCHAR2(4000) NULL,
	   CONSTRAINT "PK_POLICY_ID" PRIMARY KEY("ID") ENABLE ,
	   CONSTRAINT "FK_BP_CATEGORY_ID" FOREIGN KEY("CATALOG_ID") REFERENCES BG_CATEGORIES("CATEGORY_ID") ON DELETE CASCADE ENABLE,
	   CONSTRAINT "UK_BP_CATEGORY_ID_NAME" UNIQUE ("CATALOG_ID", "NAME")
	  )';
   END IF;
END;
/
DECLARE
   SEQUENCECHECKERFLAG INT;
BEGIN
    SELECT COUNT(*) INTO SEQUENCECHECKERFLAG FROM ALL_SEQUENCES WHERE SEQUENCE_OWNER = sys_context('userenv', 'current_schema') AND SEQUENCE_NAME = UPPER('POLICY_SEQ');
   IF SEQUENCECHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'CREATE SEQUENCE   "POLICY_SEQ"  MINVALUE 1 MAXVALUE 999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE';
   END IF;
END;
/
DECLARE
  TRIGGERCHECKERFLAG INT;
BEGIN
  SELECT COUNT(*)
  INTO TRIGGERCHECKERFLAG
  FROM all_triggers
  WHERE OWNER = sys_context('userenv', 'current_schema') AND trigger_name = UPPER('POLICY_INSERT');
  IF TRIGGERCHECKERFLAG = 0 THEN
    EXECUTE IMMEDIATE 'CREATE OR REPLACE TRIGGER  "POLICY_INSERT" BEFORE INSERT ON BG_POLICIES FOR EACH ROW BEGIN SELECT POLICY_SEQ.NEXTVAL INTO :new.ID FROM DUAL; END;';
    EXECUTE IMMEDIATE 'ALTER TRIGGER  "POLICY_INSERT" ENABLE';
  END IF;
END;
/
DECLARE
TABLECHECKERFLAG INT;
BEGIN
    SELECT COUNT(*) INTO TABLECHECKERFLAG FROM ADS_KEY_VALUE_OBJECTS WHERE  OBJECT_TYPE = 'BGM_POLICY';
    IF TABLECHECKERFLAG = 0 THEN
        EXECUTE IMMEDIATE 'INSERT INTO ADS_KEY_VALUE_OBJECTS (OBJECT_TYPE,OBJECT_TABLE,OBJECT_TABLE_COLUMN,OBJECT_PARENT_TYPE,OBJECT_PARENT_COLUMN_ID) VALUES (''BGM_POLICY'',''BG_POLICIES'',''ID'','''','''')';

    END IF;
END;
/
DECLARE
   TABLECHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO TABLECHECKERFLAG FROM ALL_TABLES WHERE OWNER = sys_context( 'userenv', 'current_schema' ) AND TABLE_NAME = UPPER('TAGS');
   IF TABLECHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'CREATE TABLE  "TAGS"  (
	   "ID" NUMBER NOT NULL ENABLE,
	   "NAME" VARCHAR2(250) NOT NULL ENABLE ,
	   "DESCRIPTION" VARCHAR2(4000) NULL ,
	   "STATUS"   VARCHAR2(1) NULL  ,
	   CONSTRAINT "PK_TAG_ID" PRIMARY KEY("ID") ENABLE
	  )';
   END IF;
END;
/
DECLARE
   SEQUENCECHECKERFLAG INT;
BEGIN
    SELECT COUNT(*) INTO SEQUENCECHECKERFLAG FROM ALL_SEQUENCES WHERE SEQUENCE_OWNER = sys_context('userenv', 'current_schema') AND SEQUENCE_NAME = UPPER('TAG_SEQ');
   IF SEQUENCECHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'CREATE SEQUENCE   "TAG_SEQ"  MINVALUE 1 MAXVALUE 999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE';
   END IF;
END;
/
DECLARE
  TRIGGERCHECKERFLAG INT;
BEGIN
  SELECT COUNT(*)
  INTO TRIGGERCHECKERFLAG
  FROM all_triggers
  WHERE OWNER = sys_context('userenv', 'current_schema') AND trigger_name = UPPER('TAG_INSERT');
  IF TRIGGERCHECKERFLAG = 0 THEN
    EXECUTE IMMEDIATE 'CREATE OR REPLACE TRIGGER  "TAG_INSERT" BEFORE INSERT ON TAGS FOR EACH ROW BEGIN SELECT TAG_SEQ.NEXTVAL INTO :new.ID FROM DUAL; END;';
    EXECUTE IMMEDIATE 'ALTER TRIGGER  "TAG_INSERT" ENABLE';
  END IF;
END;
/
DECLARE
TABLECHECKERFLAG INT;
BEGIN
    SELECT COUNT(*) INTO TABLECHECKERFLAG FROM ADS_KEY_VALUE_OBJECTS WHERE  OBJECT_TYPE = 'TAG';
    IF TABLECHECKERFLAG = 0 THEN
        EXECUTE IMMEDIATE 'INSERT INTO ADS_KEY_VALUE_OBJECTS (OBJECT_TYPE,OBJECT_TABLE,OBJECT_TABLE_COLUMN,OBJECT_PARENT_TYPE,OBJECT_PARENT_COLUMN_ID) VALUES (''TAG'',''TAGS'',''ID'','''','''')';

    END IF;
END;
/
DECLARE
   TABLECHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO TABLECHECKERFLAG FROM ALL_TABLES WHERE OWNER = sys_context( 'userenv', 'current_schema' ) AND TABLE_NAME = UPPER('ADS_ASSOCIATIONS');
   IF TABLECHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'CREATE TABLE  "ADS_ASSOCIATIONS"  (
    "ID" NUMBER NOT NULL ENABLE,
    "SOURCE_OBJECT_ID" NUMBER NOT NULL ENABLE,
    "SOURCE_OBJECT_TYPE_ID" NUMBER NOT NULL ENABLE,
    "TARGET_OBJECT_ID" NUMBER NOT NULL ENABLE,
    "TARGET_OBJECT_TYPE_ID" NUMBER NOT NULL ENABLE,
    "RELATIONSHIP"  VARCHAR2(250)  NULL,
    CONSTRAINT "PK_ASSOCIATION_ID" PRIMARY KEY("ID") ENABLE
   )';
   END IF;
END;
/
DECLARE
   SEQUENCECHECKERFLAG INT;
BEGIN
    SELECT COUNT(*) INTO SEQUENCECHECKERFLAG FROM ALL_SEQUENCES WHERE SEQUENCE_OWNER = sys_context('userenv', 'current_schema') AND SEQUENCE_NAME = UPPER('BG_ASSOC_SEQ');
   IF SEQUENCECHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'CREATE SEQUENCE   "BG_ASSOC_SEQ"  MINVALUE 1 MAXVALUE 999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE';
   END IF;
END;
/
DECLARE
  TRIGGERCHECKERFLAG INT;
BEGIN
  SELECT COUNT(*)
  INTO TRIGGERCHECKERFLAG
  FROM all_triggers
  WHERE OWNER = sys_context('userenv', 'current_schema') AND trigger_name = UPPER('BG_ASSOC_INSERT');
  IF TRIGGERCHECKERFLAG = 0 THEN
    EXECUTE IMMEDIATE 'CREATE OR REPLACE TRIGGER  "BG_ASSOC_INSERT" BEFORE INSERT ON ADS_ASSOCIATIONS FOR EACH ROW BEGIN SELECT BG_ASSOC_SEQ.NEXTVAL INTO :new.ID FROM DUAL; END;';
    EXECUTE IMMEDIATE 'ALTER TRIGGER  "BG_ASSOC_INSERT" ENABLE';
  END IF;
END;
/
DECLARE
TABLECHECKERFLAG INT;
BEGIN
    SELECT COUNT(*) INTO TABLECHECKERFLAG FROM MT_DEFINITION WHERE  MTD_NAME = 'CRITICALITY';
    IF TABLECHECKERFLAG = 0 THEN
        EXECUTE IMMEDIATE 'INSERT INTO MT_DEFINITION (MTD_NAME,MTD_DESC,ADS_MODULE)
        VALUES (''CRITICALITY'',''CRITICALITY'',''BGM'')';
    END IF;
END;
/
DECLARE
TABLECHECKERFLAG INT;
TEMP_OBJECT_TYPE_ID INT;
TEMP_OBJECT_ID INT;
BEGIN
    SELECT OBJECT_TYPE_ID INTO TEMP_OBJECT_TYPE_ID  FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE='MT_DEFINITION';
    SELECT MTD_ID INTO TEMP_OBJECT_ID FROM MT_DEFINITION WHERE  MTD_NAME = 'CRITICALITY' AND ADS_MODULE = 'BGM';
    SELECT COUNT(*) INTO TABLECHECKERFLAG FROM ADS_KEY_VALUE WHERE  KEY_NAME = 'High' and OBJECT_TYPE_ID = TEMP_OBJECT_TYPE_ID;
    IF TABLECHECKERFLAG = 0 THEN
        INSERT INTO ADS_KEY_VALUE(KEY_NAME,KEY_VALUE,OBJECT_TYPE_ID,OBJECT_ID,DATATYPE_ID,KV_ORDER,ISPUBLISHED)
            VALUES('High','High',TEMP_OBJECT_TYPE_ID,TEMP_OBJECT_ID,'1','1','1');
        INSERT INTO ADS_KEY_VALUE(KEY_NAME,KEY_VALUE,OBJECT_TYPE_ID,OBJECT_ID,DATATYPE_ID,KV_ORDER,ISPUBLISHED)
            VALUES('Low','Low',TEMP_OBJECT_TYPE_ID,TEMP_OBJECT_ID,'1','2','1');
        INSERT INTO ADS_KEY_VALUE(KEY_NAME,KEY_VALUE,OBJECT_TYPE_ID,OBJECT_ID,DATATYPE_ID,KV_ORDER,ISPUBLISHED)
            VALUES('Medium','Medium',TEMP_OBJECT_TYPE_ID,TEMP_OBJECT_ID,'1','3','1');
    END IF;
END;
/
DECLARE
TABLECHECKERFLAG INT;
BEGIN
    SELECT COUNT(*) INTO TABLECHECKERFLAG FROM ADS_KEY_VALUE_OBJECTS WHERE  OBJECT_TYPE = 'BGM_STEWARDSHIP_GOALS';
    IF TABLECHECKERFLAG = 0 THEN
        EXECUTE IMMEDIATE 'INSERT INTO ADS_KEY_VALUE_OBJECTS (OBJECT_TYPE,OBJECT_TABLE,OBJECT_TABLE_COLUMN,OBJECT_PARENT_TYPE,OBJECT_PARENT_COLUMN_ID) VALUES (''BGM_STEWARDSHIP_GOALS'','''','''','''','''')';
    END IF;
END;
/
DECLARE
COLUMNCHECKERFLAG INT;
	BEGIN
		SELECT COUNT(*) INTO COLUMNCHECKERFLAG FROM ADS_MM_VERSION WHERE VALUE < '8.2';
		IF COLUMNCHECKERFLAG = 1 THEN
			EXECUTE IMMEDIATE 'INSERT INTO ADS_ASSOCIATIONS(SOURCE_OBJECT_ID, SOURCE_OBJECT_TYPE_ID, TARGET_OBJECT_ID,TARGET_OBJECT_TYPE_ID)
			SELECT BUS_TERM_ID,(SELECT OBJECT_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE=''BGM_TERM''),ASSOC_BUS_TERM_ID,(SELECT OBJECT_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE=''BGM_TERM'')
			FROM BG_ASSOCIATED_BUSINESS_TERMS';
			EXECUTE IMMEDIATE 'DROP TABLE BG_ASSOCIATED_BUSINESS_TERMS';
		END IF;
	END;
/
DECLARE
COLUMNCHECKERFLAG INT;
BEGIN
SELECT COUNT(*) INTO COLUMNCHECKERFLAG FROM ADS_MM_VERSION WHERE VALUE < '8.2';
	IF COLUMNCHECKERFLAG = 1 THEN
		EXECUTE IMMEDIATE 'INSERT INTO ADS_ASSOCIATIONS(SOURCE_OBJECT_ID, SOURCE_OBJECT_TYPE_ID, TARGET_OBJECT_ID,TARGET_OBJECT_TYPE_ID)
		SELECT BUS_TERM_ID,(SELECT OBJECT_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE=''BGM_TERM''),stcm_ID,OBJECT_TYPE_ID
		FROM BG_ASSO_TECHNICAL_METADATA batm join V_STCM_JSON vstj on batm.OBJECT_ID = vstj.json';
		EXECUTE IMMEDIATE 'DROP TABLE BG_ASSO_TECHNICAL_METADATA';
	END IF;
END;
/
DECLARE
   COLUMNCHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO COLUMNCHECKERFLAG FROM CAT_TEMPLATES WHERE CAT_TEMPLATE_VERSION IS NULL;
   IF COLUMNCHECKERFLAG <> 0 THEN
      EXECUTE IMMEDIATE 'UPDATE  CAT_TEMPLATES SET CAT_TEMPLATE_VERSION = (SELECT VALUE FROM ADS_MM_VERSION)  WHERE CAT_TEMPLATE_VERSION IS NULL';
   END IF;
END;
/
DECLARE
   COLLENCHECKER INT;
BEGIN
   SELECT DATA_LENGTH INTO COLLENCHECKER FROM ALL_TAB_COLUMNS WHERE  OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME = UPPER('ADS_KEY_VALUE') AND COLUMN_NAME=UPPER('DEFAULTVALUE');
   IF COLLENCHECKER < 4000 THEN
      EXECUTE IMMEDIATE 'ALTER TABLE ADS_KEY_VALUE MODIFY DEFAULTVALUE VARCHAR2(4000)';
   END IF;
END;
/
DECLARE
TABLECHECKERFLAG INT;
BEGIN
    SELECT COUNT(*) INTO TABLECHECKERFLAG FROM MT_DEFINITION WHERE  MTD_NAME = 'RELATIONSHIP';
    IF TABLECHECKERFLAG = 0 THEN
        EXECUTE IMMEDIATE 'INSERT INTO MT_DEFINITION (MTD_NAME,MTD_DESC,ADS_MODULE) VALUES (''RELATIONSHIP'',''RELATIONSHIP'',''BGM'')';
    END IF;
END;
/
DECLARE
   TABLE_CHECK INT;
BEGIN
   SELECT COUNT(*) INTO TABLE_CHECK FROM ALL_TABLES WHERE OWNER = sys_context( 'userenv', 'current_schema' ) AND TABLE_NAME = UPPER('CAT_WORKFLOW_PROPERTIES');
   IF TABLE_CHECK = 1 THEN
      EXECUTE IMMEDIATE 'DROP TABLE CAT_WORKFLOW_PROPERTIES';
   END IF;
END;
/
DECLARE
   TABLE_CHECK INT;
BEGIN
   SELECT COUNT(*) INTO TABLE_CHECK FROM ALL_TABLES WHERE OWNER = sys_context( 'userenv', 'current_schema' ) AND TABLE_NAME = UPPER('CAT_WORKFLOWS');
   IF TABLE_CHECK = 1 THEN
      EXECUTE IMMEDIATE 'DROP TABLE CAT_WORKFLOWS';
   END IF;
END;
/
DECLARE
DATACHECKERFLAG INT;
BEGIN
    SELECT COUNT(*) INTO DATACHECKERFLAG FROM APP_PREFERENCES WHERE PREFERENCE_NAME = 'ADS_MM_LICENSE_EXPIRY_SHOW_POPUP_DAYS';
    IF DATACHECKERFLAG = 0 THEN
        EXECUTE IMMEDIATE 'INSERT INTO APP_PREFERENCES(PREFERENCE_NAME,PREFERENCE_VALUE) VALUES (''ADS_MM_LICENSE_EXPIRY_SHOW_POPUP_DAYS'',''30'')';
        EXECUTE IMMEDIATE 'INSERT INTO APP_PREFERENCES(PREFERENCE_NAME,PREFERENCE_VALUE) VALUES (''AMM_CFX_WORKFLOW_MAX_LOOPS'',''50'')';
    END IF;
END;
/
DECLARE
   COLLENCHECKER INT;
BEGIN
   SELECT DATA_LENGTH INTO COLLENCHECKER FROM USER_TAB_COLUMNS WHERE TABLE_NAME = UPPER('RM_RELEASE') AND COLUMN_NAME=UPPER('RELEASEDESC');
   IF COLLENCHECKER < 4000 THEN
      EXECUTE IMMEDIATE 'ALTER TABLE RM_RELEASE MODIFY RELEASEDESC VARCHAR2(4000)';
   END IF;
End;
/
DECLARE
DATACHECKERFLAG INT;
BEGIN
    SELECT COUNT(*) INTO DATACHECKERFLAG FROM TCM_TESTCASE_STATUS WHERE STATUS_NAME = 'DESIGN';
    IF DATACHECKERFLAG = 0 THEN
        EXECUTE IMMEDIATE 'INSERT INTO TCM_TESTCASE_STATUS(STATUS_NAME) VALUES(''DESIGN'')';
    END IF;
END;
/
DECLARE
TABLECHECKERFLAG INT;
BEGIN
    SELECT COUNT(*) INTO TABLECHECKERFLAG FROM ADS_KEY_VALUE_OBJECTS WHERE  OBJECT_TYPE = 'CSM_CODE_VALUE';
    IF TABLECHECKERFLAG = 0 THEN
        EXECUTE IMMEDIATE 'INSERT INTO ADS_KEY_VALUE_OBJECTS (OBJECT_TYPE,OBJECT_TABLE,OBJECT_TABLE_COLUMN,OBJECT_PARENT_TYPE,OBJECT_PARENT_COLUMN_ID) VALUES (''CSM_CODE_VALUE'',''CSM_CODE_VALUE'',''CODE_ID'','''','''')';
    END IF;
END;
/
DECLARE
COLUMNCHECKERFLAG INT;
PROFILECHECKER INT;
    BEGIN
    SELECT COUNT(*) INTO COLUMNCHECKERFLAG FROM ADS_MM_VERSION WHERE VALUE <= '8.2';
    IF COLUMNCHECKERFLAG = 1 THEN
    SELECT COUNT(*) INTO PROFILECHECKER FROM ADS_PROFILES_DETAILS WHERE PROFILE_DETAILS_NAME = 'CSM_CODE_VALUE_GRID_HEADER_VISIBILITY_PREFERENCE' and PROFILE_DETAILS_VALUE LIKE '%extendedProperties%';
        IF PROFILECHECKER = 0 THEN
            UPDATE ADS_PROFILES_DETAILS SET PROFILE_DETAILS_VALUE = PROFILE_DETAILS_VALUE || ',extendedProperties' WHERE PROFILE_DETAILS_NAME = 'CSM_CODE_VALUE_GRID_HEADER_VISIBILITY_PREFERENCE';
        END IF;
    END IF;
END;
/
DECLARE
COLUMNCHECKERFLAG INT;
PROFILECHECKER INT;
    BEGIN
    SELECT COUNT(*) INTO COLUMNCHECKERFLAG FROM ADS_MM_VERSION WHERE VALUE <= '8.2';
    IF COLUMNCHECKERFLAG = 1 THEN
        SELECT COUNT(*) INTO PROFILECHECKER FROM ADS_PROFILES_DETAILS WHERE PROFILE_DETAILS_NAME = 'CSM_CODE_VALUE_GRID_HEADER_ORDER_PREFERENCE' and PROFILE_DETAILS_VALUE LIKE '%extendedProperties%';
        IF PROFILECHECKER = 0 THEN
            UPDATE ADS_PROFILES_DETAILS SET PROFILE_DETAILS_VALUE = PROFILE_DETAILS_VALUE || ',extendedProperties:120' WHERE PROFILE_DETAILS_NAME = 'CSM_CODE_VALUE_GRID_HEADER_ORDER_PREFERENCE';
        END IF;
    END IF;
END;
/
DECLARE
   COLUMNCHECKERFLAG INT;
BEGIN
    SELECT COUNT(*) INTO COLUMNCHECKERFLAG FROM ADS_MM_VERSION WHERE VALUE < '8.21';
   IF COLUMNCHECKERFLAG = 1 THEN
      EXECUTE IMMEDIATE 'ALTER TABLE ADS_KEY_VALUE ADD DISPLAY_POLICY INT DEFAULT 0 NULL';
   END IF;
END;
/
DECLARE
   COLUMNCHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO COLUMNCHECKERFLAG FROM ADS_KEY_VALUE WHERE KV_TYPE = 'DEFAULT' OR KV_TYPE IS NULL ;
   IF COLUMNCHECKERFLAG > 1 THEN
   UPDATE ADS_KEY_VALUE SET KV_TYPE = 'Text Box' WHERE KV_TYPE = 'DEFAULT' OR KV_TYPE IS NULL;
   END IF;
END;
/
DECLARE
   COLUMNCHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO COLUMNCHECKERFLAG FROM ADS_KEY_VALUE WHERE DISPLAY_POLICY IS NULL;
   IF COLUMNCHECKERFLAG <> 0 THEN
    UPDATE ADS_KEY_VALUE SET DISPLAY_POLICY = '0' WHERE DISPLAY_POLICY IS NULL;
   END IF;
END;
/
DECLARE
   COLUMNCHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO COLUMNCHECKERFLAG FROM ADS_KEY_VALUE WHERE ISPUBLISHED IS NULL;
   IF COLUMNCHECKERFLAG <> 0 THEN
    UPDATE ADS_KEY_VALUE SET ISPUBLISHED = '0' WHERE ISPUBLISHED IS NULL;
   END IF;
END;
/
DECLARE
   COLUMNCHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO COLUMNCHECKERFLAG FROM ADS_KEY_VALUE WHERE ISSYSTEMBASED IS NULL;
   IF COLUMNCHECKERFLAG <> 0 THEN
    UPDATE ADS_KEY_VALUE SET ISSYSTEMBASED = '0' WHERE ISSYSTEMBASED IS NULL;
   END IF;
END;
/

DECLARE
   TABLECHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO TABLECHECKERFLAG FROM ALL_TABLES WHERE OWNER = sys_context( 'userenv', 'current_schema' ) AND TABLE_NAME = UPPER('SM_INDEX');
   IF TABLECHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'CREATE TABLE  "SM_INDEX"    (	"ID" NUMBER NOT NULL ENABLE, 	"OWNER" VARCHAR2(250) NULL, 	"NAME" VARCHAR2(250) NOT NULL, 	"TYPE" VARCHAR2(250) NULL, 	"UNIQUENESS" VARCHAR2(250) NULL, 	"SORT_ORDER" VARCHAR2(5) NULL, 	"ORDINAL_POSITION" NUMBER NULL, "STM_ID" NUMBER NOT NULL,
                        CONSTRAINT "PK_SM_INDX_ID" PRIMARY KEY ("ID") ENABLE,
                        CONSTRAINT "FK_SM_TAB_ID" FOREIGN KEY ("STM_ID") REFERENCES  "SYSTEM_TABLE_METADATA" ("STM_ID") ON DELETE CASCADE ENABLE )';
   END IF;
END;
/
DECLARE
   SEQUENCECHECKERFLAG INT;
BEGIN
    SELECT COUNT(*) INTO SEQUENCECHECKERFLAG FROM ALL_SEQUENCES WHERE SEQUENCE_OWNER = sys_context('userenv', 'current_schema') AND SEQUENCE_NAME = UPPER('SM_INDEX_SEQ');
   IF SEQUENCECHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'CREATE SEQUENCE   "SM_INDEX_SEQ"  MINVALUE 1 MAXVALUE 999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE';
   END IF;
END;
/
DECLARE
  TRIGGERCHECKERFLAG INT;
BEGIN
  SELECT COUNT(*)
  INTO TRIGGERCHECKERFLAG
  FROM all_triggers
  WHERE OWNER = sys_context('userenv', 'current_schema') AND trigger_name = UPPER('SM_INDEX_INSERT');
  IF TRIGGERCHECKERFLAG = 0 THEN
    EXECUTE IMMEDIATE 'CREATE OR REPLACE TRIGGER  "SM_INDEX_INSERT" BEFORE INSERT ON SM_INDEX FOR EACH ROW BEGIN SELECT SM_INDEX_SEQ.NEXTVAL INTO :new.ID FROM DUAL; END;';
    EXECUTE IMMEDIATE 'ALTER TRIGGER  "SM_INDEX_INSERT" ENABLE';
  END IF;
END;
/
DECLARE
TABLECHECKERFLAG INT;
BEGIN
    SELECT COUNT(*) INTO TABLECHECKERFLAG FROM ADS_KEY_VALUE_OBJECTS WHERE  OBJECT_TYPE = 'SM_INDEX';
    IF TABLECHECKERFLAG = 0 THEN
        EXECUTE IMMEDIATE 'INSERT INTO ADS_KEY_VALUE_OBJECTS (OBJECT_TYPE,OBJECT_TABLE,OBJECT_TABLE_COLUMN,OBJECT_PARENT_TYPE,OBJECT_PARENT_COLUMN_ID) VALUES (''SM_INDEX'',''SM_INDEX'',''ID'','''','''')';
    END IF;
END;
/
DECLARE
TABLECHECKERFLAG INT;
BEGIN
    SELECT COUNT(*) INTO TABLECHECKERFLAG FROM ADS_KEY_VALUE_OBJECTS WHERE  OBJECT_TYPE = 'BGM_TERM_CATALOG';
    IF TABLECHECKERFLAG = 0 THEN
        EXECUTE IMMEDIATE 'INSERT INTO ADS_KEY_VALUE_OBJECTS (OBJECT_TYPE,OBJECT_TABLE,OBJECT_TABLE_COLUMN,OBJECT_PARENT_TYPE,OBJECT_PARENT_COLUMN_ID) VALUES (''BGM_TERM_CATALOG'',''BG_CATEGORIES'',''OBJECT_TYPE_ID'','''','''')';
        EXECUTE IMMEDIATE 'INSERT INTO ADS_KEY_VALUE_OBJECTS (OBJECT_TYPE,OBJECT_TABLE,OBJECT_TABLE_COLUMN,OBJECT_PARENT_TYPE,OBJECT_PARENT_COLUMN_ID) VALUES (''BGM_POLICY_CATALOG'',''BG_CATEGORIES'',''OBJECT_TYPE_ID'','''','''')';
        EXECUTE IMMEDIATE 'INSERT INTO ADS_KEY_VALUE_OBJECTS (OBJECT_TYPE,OBJECT_TABLE,OBJECT_TABLE_COLUMN,OBJECT_PARENT_TYPE,OBJECT_PARENT_COLUMN_ID) VALUES (''BGM_RULE_CATALOG'',''BG_CATEGORIES'',''OBJECT_TYPE_ID'','''','''')';
    END IF;
END;
/
DECLARE
    VERSIONCHECKKERFLAG INT;
BEGIN
    SELECT COUNT(*) INTO VERSIONCHECKKERFLAG FROM ADS_MM_VERSION WHERE VALUE <= '8.21';
    IF VERSIONCHECKKERFLAG = 1 THEN
        EXECUTE IMMEDIATE 'UPDATE BG_CATEGORIES SET OBJECT_TYPE_ID = (SELECT OBJECT_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE = ''BGM_TERM_CATALOG'') WHERE OBJECT_TYPE_ID = (SELECT OBJECT_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE = ''BGM_TERM'')';
        EXECUTE IMMEDIATE 'UPDATE BG_CATEGORIES SET OBJECT_TYPE_ID = (SELECT OBJECT_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE = ''BGM_POLICY_CATALOG'') WHERE OBJECT_TYPE_ID = (SELECT OBJECT_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE = ''BGM_POLICY'')';
        EXECUTE IMMEDIATE 'UPDATE BG_CATEGORIES SET OBJECT_TYPE_ID = (SELECT OBJECT_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE = ''BGM_RULE_CATALOG'') WHERE OBJECT_TYPE_ID = (SELECT OBJECT_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE = ''BGM_RULE'')';
    END IF;
END;
/
DECLARE
   TABLECHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO TABLECHECKERFLAG FROM ALL_TAB_COLUMNS WHERE OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME = UPPER('BUSINESS_TERMS') AND COLUMN_NAME = UPPER('SOURCE_ID');
   IF TABLECHECKERFLAG = 0 THEN
        EXECUTE IMMEDIATE 'ALTER TABLE BUSINESS_TERMS ADD SOURCE_ID VARCHAR2(4000) NULL';
        EXECUTE IMMEDIATE 'ALTER TABLE BUSINESS_TERMS ADD SOURCE_REFERENCE VARCHAR2(4000) NULL';
   END IF;
END;
/

DECLARE
   TABLECHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO TABLECHECKERFLAG FROM ALL_OBJECTS WHERE OWNER = sys_context('userenv', 'current_schema') AND OBJECT_TYPE = 'FUNCTION' AND OBJECT_NAME = UPPER('split_String');
   IF TABLECHECKERFLAG = 1 THEN
      EXECUTE IMMEDIATE 'DROP FUNCTION split_String';
   END IF;
END;
/

CREATE OR REPLACE FUNCTION split_String(
  i_str    IN  VARCHAR2,
  i_delim  IN  VARCHAR2 DEFAULT ','
) RETURN SYS.ODCIVARCHAR2LIST DETERMINISTIC
AS
  p_result       SYS.ODCIVARCHAR2LIST := SYS.ODCIVARCHAR2LIST();
  p_start        NUMBER(5) := 1;
  p_end          NUMBER(5);
  c_len CONSTANT NUMBER(5) := LENGTH( i_str );
  c_ld  CONSTANT NUMBER(5) := LENGTH( i_delim );
BEGIN
  IF c_len > 0 THEN
    p_end := INSTR( i_str, i_delim, p_start );
    WHILE p_end > 0 LOOP
      p_result.EXTEND;
      p_result( p_result.COUNT ) := SUBSTR( i_str, p_start, p_end - p_start );
      p_start := p_end + c_ld;
      p_end := INSTR( i_str, i_delim, p_start );
    END LOOP;
    IF p_start <= c_len + 1 THEN
      p_result.EXTEND;
      p_result( p_result.COUNT ) := SUBSTR( i_str, p_start, c_len - p_start + 1 );
    END IF;
  END IF;
  RETURN p_result;
END;
/

DECLARE
   TABLECHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO TABLECHECKERFLAG FROM ALL_OBJECTS WHERE OWNER = sys_context('userenv', 'current_schema') AND OBJECT_TYPE = 'PROCEDURE' AND OBJECT_NAME = UPPER('PROC_DELETE_TECH_PROP');
   IF TABLECHECKERFLAG = 1 THEN
      EXECUTE IMMEDIATE 'DROP PROCEDURE PROC_DELETE_TECH_PROP';
   END IF;
END;
/

create or replace
PROCEDURE PROC_DELETE_TECH_PROP(
 OBJ_ID   IN VARCHAR2,
 ID_Type IN VARCHAR2 )
IS
BEGIN
  CASE WHEN ID_Type='SM_ENVIRONMENT' THEN
   DELETE FROM ADS_OBJECT_CODESETS WHERE OBJECT_ID IN (SELECT STCM_ID FROM SYSTEM_TABLE_COLUMNS_METADATA WHERE sce_ID in (SELECT COLUMN_VALUE AS Data FROM TABLE(split_String(OBJ_ID)))) AND OBJECT_TYPE_ID = (SELECT object_type_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE = 'SM_COLUMN');
   DELETE FROM ADS_ASSOCIATIONS WHERE (SOURCE_OBJECT_ID IN (SELECT ID FROM SM_INDEX WHERE STM_ID IN (SELECT STM_ID FROM SYSTEM_TABLE_METADATA WHERE SCE_ID in (SELECT COLUMN_VALUE AS Data FROM TABLE(split_String(OBJ_ID))))) AND SOURCE_OBJECT_TYPE_ID = (SELECT object_type_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE = 'SM_INDEX')) OR (TARGET_OBJECT_ID IN (SELECT ID FROM SM_INDEX WHERE STM_ID IN (SELECT STM_ID FROM SYSTEM_TABLE_METADATA WHERE SCE_ID in (SELECT COLUMN_VALUE AS Data FROM TABLE(split_String(OBJ_ID))))) AND TARGET_OBJECT_TYPE_ID = (SELECT object_type_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE = 'SM_INDEX'));
   DELETE FROM SM_INDEX WHERE stm_ID IN (SELECT stm_ID FROM SYSTEM_TABLE_METADATA WHERE SCE_ID in (SELECT COLUMN_VALUE AS Data FROM TABLE(split_String(OBJ_ID))));
   DELETE FROM ADS_KEY_VALUE WHERE KV_ID IN (SELECT KV_ID FROM ADS_KEY_VALUE t START WITH t.OBJECT_ID IN (SELECT STCM_ID FROM SYSTEM_TABLE_COLUMNS_METADATA WHERE SCE_ID in (SELECT COLUMN_VALUE AS Data FROM TABLE(split_String(OBJ_ID)))) AND t.OBJECT_TYPE_ID = (SELECT OBJECT_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE = 'SM_COLUMN') CONNECT BY NOCYCLE PRIOR t.KV_ID = OBJECT_ID AND t.OBJECT_TYPE_ID = (SELECT OBJECT_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE = 'ADS_KEY_VALUE'));
   DELETE FROM ADS_KEY_VALUE WHERE KV_ID IN (SELECT KV_ID FROM ADS_KEY_VALUE t START WITH t.OBJECT_ID IN (SELECT STM_ID FROM SYSTEM_TABLE_METADATA WHERE SCE_ID in (SELECT COLUMN_VALUE AS Data FROM TABLE(split_String(OBJ_ID)))) AND t.OBJECT_TYPE_ID = (SELECT OBJECT_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE = 'SM_TABLE') CONNECT BY NOCYCLE PRIOR t.KV_ID = OBJECT_ID AND t.OBJECT_TYPE_ID = (SELECT OBJECT_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE = 'ADS_KEY_VALUE'));
   DELETE FROM ADS_KEY_VALUE WHERE KV_ID IN (SELECT KV_ID FROM ADS_KEY_VALUE t START WITH t.OBJECT_ID IN (SELECT COLUMN_VALUE AS Data FROM TABLE(split_String(OBJ_ID))) AND t.OBJECT_TYPE_ID = (SELECT OBJECT_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE = 'SM_ENVIRONMENT') CONNECT BY NOCYCLE PRIOR t.KV_ID = OBJECT_ID AND t.OBJECT_TYPE_ID = (SELECT OBJECT_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE = 'ADS_KEY_VALUE'));
   DELETE FROM ADS_KEY_VALUE KV WHERE KV.OBJECT_TYPE_ID = (SELECT KVO.OBJECT_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS KVO WHERE KVO.OBJECT_TYPE = 'RELATIONSHIP_DETAILS') AND KV.OBJECT_ID IN (SELECT A.ID FROM ADS_ASSOCIATIONS A  WHERE (A.SOURCE_OBJECT_TYPE_ID = (SELECT object_type_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE = 'SM_COLUMN') AND A.SOURCE_OBJECT_ID IN (SELECT STCM_ID FROM SYSTEM_TABLE_COLUMNS_METADATA WHERE sce_ID in (SELECT COLUMN_VALUE AS Data FROM TABLE(split_String(OBJ_ID))))) OR (A.TARGET_OBJECT_TYPE_ID = (SELECT object_type_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE = 'SM_COLUMN') AND A.TARGET_OBJECT_ID IN (SELECT STCM_ID FROM SYSTEM_TABLE_COLUMNS_METADATA WHERE sce_ID in (SELECT COLUMN_VALUE AS Data FROM TABLE(split_String(OBJ_ID))))));
   DELETE FROM ADS_ASSOCIATIONS WHERE (SOURCE_OBJECT_ID IN (SELECT STCM_ID FROM SYSTEM_TABLE_COLUMNS_METADATA WHERE sce_ID in (SELECT COLUMN_VALUE AS Data FROM TABLE(split_String(OBJ_ID)))) AND SOURCE_OBJECT_TYPE_ID = (SELECT object_type_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE = 'SM_COLUMN')) OR (TARGET_OBJECT_ID IN (SELECT STCM_ID FROM SYSTEM_TABLE_COLUMNS_METADATA WHERE sce_ID in (SELECT COLUMN_VALUE AS Data FROM TABLE(split_String(OBJ_ID)))) AND TARGET_OBJECT_TYPE_ID = (SELECT object_type_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE = 'SM_COLUMN'));
   DELETE FROM ADS_KEY_VALUE KV WHERE KV.OBJECT_TYPE_ID = (SELECT KVO.OBJECT_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS KVO WHERE KVO.OBJECT_TYPE = 'RELATIONSHIP_DETAILS') AND KV.OBJECT_ID IN (SELECT A.ID FROM ADS_ASSOCIATIONS A  WHERE (A.SOURCE_OBJECT_TYPE_ID = (SELECT object_type_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE = 'SM_TABLE') AND A.SOURCE_OBJECT_ID IN (SELECT STM_ID FROM SYSTEM_TABLE_METADATA WHERE sce_ID in (SELECT COLUMN_VALUE AS Data FROM TABLE(split_String(OBJ_ID))))) OR (A.TARGET_OBJECT_TYPE_ID = (SELECT object_type_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE = 'SM_TABLE') AND A.TARGET_OBJECT_ID IN (SELECT STM_ID FROM SYSTEM_TABLE_METADATA WHERE sce_ID in (SELECT COLUMN_VALUE AS Data FROM TABLE(split_String(OBJ_ID))))));
   DELETE FROM ADS_ASSOCIATIONS WHERE (SOURCE_OBJECT_ID IN (SELECT STM_ID FROM SYSTEM_TABLE_METADATA WHERE SCE_ID IN (SELECT COLUMN_VALUE AS Data FROM TABLE(split_String(OBJ_ID)))) AND SOURCE_OBJECT_TYPE_ID = (SELECT object_type_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE = 'SM_TABLE')) OR (TARGET_OBJECT_ID IN (SELECT STM_ID FROM SYSTEM_TABLE_METADATA WHERE SCE_ID IN (SELECT COLUMN_VALUE AS Data FROM TABLE(split_String(OBJ_ID)))) AND TARGET_OBJECT_TYPE_ID = (SELECT object_type_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE = 'SM_TABLE'));
   DELETE FROM ADS_KEY_VALUE KV WHERE KV.OBJECT_TYPE_ID = (SELECT KVO.OBJECT_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS KVO WHERE KVO.OBJECT_TYPE = 'RELATIONSHIP_DETAILS') AND KV.OBJECT_ID IN (SELECT A.ID FROM ADS_ASSOCIATIONS A  WHERE (A.SOURCE_OBJECT_TYPE_ID = (SELECT object_type_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE = 'SM_ENVIRONMENT') AND A.SOURCE_OBJECT_ID IN (SELECT COLUMN_VALUE AS Data FROM TABLE(split_String(OBJ_ID)))) OR (A.TARGET_OBJECT_TYPE_ID = (SELECT object_type_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE = 'SM_ENVIRONMENT') AND A.TARGET_OBJECT_ID IN (SELECT COLUMN_VALUE AS Data FROM TABLE(split_String(OBJ_ID)))));
   DELETE FROM ADS_ASSOCIATIONS WHERE (SOURCE_OBJECT_ID IN (SELECT COLUMN_VALUE AS Data FROM TABLE(split_String(OBJ_ID))) AND SOURCE_OBJECT_TYPE_ID = (SELECT object_type_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE = 'SM_ENVIRONMENT')) OR (TARGET_OBJECT_ID IN (SELECT COLUMN_VALUE AS Data FROM TABLE(split_String(OBJ_ID))) AND TARGET_OBJECT_TYPE_ID = (SELECT object_type_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE = 'SM_ENVIRONMENT'));
  WHEN ID_Type='SM_TABLE' THEN
   DELETE FROM ADS_OBJECT_CODESETS WHERE OBJECT_ID IN (SELECT STCM_ID FROM SYSTEM_TABLE_COLUMNS_METADATA WHERE STM_ID in (SELECT COLUMN_VALUE AS Data FROM TABLE(split_String(OBJ_ID)))) AND OBJECT_TYPE_ID = (SELECT object_type_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE = 'SM_COLUMN');
   DELETE FROM ADS_ASSOCIATIONS WHERE SOURCE_OBJECT_ID IN (SELECT ID FROM SM_INDEX WHERE STM_ID IN (SELECT ID FROM SM_INDEX WHERE STM_ID IN (SELECT COLUMN_VALUE AS Data FROM TABLE(split_String(OBJ_ID)))) AND SOURCE_OBJECT_TYPE_ID = (SELECT object_type_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE = 'SM_INDEX') OR TARGET_OBJECT_ID IN (SELECT ID FROM SM_INDEX WHERE STM_ID IN (SELECT COLUMN_VALUE AS Data FROM TABLE(split_String(OBJ_ID)))) AND TARGET_OBJECT_TYPE_ID = (SELECT object_type_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE = 'SM_INDEX'));
   DELETE FROM SM_INDEX WHERE stm_ID in (SELECT COLUMN_VALUE AS Data FROM TABLE(split_String(OBJ_ID)));
   DELETE FROM ADS_KEY_VALUE WHERE KV_ID IN (SELECT KV_ID FROM ADS_KEY_VALUE t START WITH t.OBJECT_ID IN (SELECT STCM_ID FROM SYSTEM_TABLE_COLUMNS_METADATA WHERE STM_ID in (SELECT COLUMN_VALUE AS Data FROM TABLE(split_String(OBJ_ID)))) AND t.OBJECT_TYPE_ID = (SELECT OBJECT_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE = 'SM_COLUMN') CONNECT BY NOCYCLE PRIOR t.KV_ID = OBJECT_ID AND t.OBJECT_TYPE_ID = (SELECT OBJECT_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE = 'ADS_KEY_VALUE'));
   DELETE FROM ADS_KEY_VALUE WHERE KV_ID IN (SELECT KV_ID FROM ADS_KEY_VALUE t START WITH t.OBJECT_ID in (SELECT COLUMN_VALUE AS Data FROM TABLE(split_String(OBJ_ID))) AND t.OBJECT_TYPE_ID = (SELECT OBJECT_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE = 'SM_TABLE') CONNECT BY NOCYCLE PRIOR t.KV_ID = OBJECT_ID AND t.OBJECT_TYPE_ID = (SELECT OBJECT_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE = 'ADS_KEY_VALUE'));
   DELETE FROM ADS_KEY_VALUE KV WHERE KV.OBJECT_TYPE_ID = (SELECT KVO.OBJECT_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS KVO WHERE KVO.OBJECT_TYPE = 'RELATIONSHIP_DETAILS') AND KV.OBJECT_ID IN (SELECT A.ID FROM ADS_ASSOCIATIONS A WHERE (A.SOURCE_OBJECT_TYPE_ID = (SELECT object_type_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE = 'SM_COLUMN') AND A.SOURCE_OBJECT_ID IN (SELECT STCM_ID FROM SYSTEM_TABLE_COLUMNS_METADATA WHERE STM_ID in (SELECT COLUMN_VALUE AS Data FROM TABLE(split_String(OBJ_ID))))) OR (A.TARGET_OBJECT_TYPE_ID = (SELECT object_type_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE = 'SM_COLUMN') AND A.TARGET_OBJECT_ID IN (SELECT STCM_ID FROM SYSTEM_TABLE_COLUMNS_METADATA WHERE STM_ID in (SELECT COLUMN_VALUE AS Data FROM TABLE(split_String(OBJ_ID))))));
   DELETE FROM ADS_ASSOCIATIONS WHERE (SOURCE_OBJECT_ID IN (SELECT STCM_ID FROM SYSTEM_TABLE_COLUMNS_METADATA WHERE STM_ID in (SELECT COLUMN_VALUE AS Data FROM TABLE(split_String(OBJ_ID)))) AND SOURCE_OBJECT_TYPE_ID = (SELECT object_type_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE = 'SM_COLUMN')) OR (TARGET_OBJECT_ID IN (SELECT STCM_ID FROM SYSTEM_TABLE_COLUMNS_METADATA WHERE STM_ID in (SELECT COLUMN_VALUE AS Data FROM TABLE(split_String(OBJ_ID)))) AND TARGET_OBJECT_TYPE_ID = (SELECT object_type_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE = 'SM_COLUMN'));
   DELETE FROM ADS_KEY_VALUE KV WHERE KV.OBJECT_TYPE_ID = (SELECT KVO.OBJECT_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS KVO WHERE KVO.OBJECT_TYPE = 'RELATIONSHIP_DETAILS') AND KV.OBJECT_ID IN (SELECT A.ID FROM ADS_ASSOCIATIONS A WHERE (A.SOURCE_OBJECT_TYPE_ID = (SELECT object_type_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE = 'SM_TABLE') AND A.SOURCE_OBJECT_ID IN (SELECT COLUMN_VALUE AS Data FROM TABLE(split_String(OBJ_ID)))) OR (A.TARGET_OBJECT_TYPE_ID = (SELECT object_type_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE = 'SM_TABLE') AND A.TARGET_OBJECT_ID IN (SELECT COLUMN_VALUE AS Data FROM TABLE(split_String(OBJ_ID)))));
   DELETE FROM ADS_ASSOCIATIONS WHERE (SOURCE_OBJECT_ID IN (SELECT COLUMN_VALUE AS Data FROM TABLE(split_String(OBJ_ID))) AND SOURCE_OBJECT_TYPE_ID = (SELECT object_type_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE = 'SM_TABLE')) OR (TARGET_OBJECT_ID IN (SELECT COLUMN_VALUE AS Data FROM TABLE(split_String(OBJ_ID))) AND TARGET_OBJECT_TYPE_ID = (SELECT object_type_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE = 'SM_TABLE'));
  ELSE
   DELETE FROM ADS_OBJECT_CODESETS WHERE OBJECT_ID in (SELECT COLUMN_VALUE AS Data FROM TABLE(split_String(OBJ_ID))) AND OBJECT_TYPE_ID = (SELECT object_type_ID  FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE = 'SM_COLUMN');
   DELETE FROM ADS_KEY_VALUE WHERE KV_ID IN (SELECT kv_id FROM ADS_KEY_VALUE t START WITH t.OBJECT_ID in (SELECT COLUMN_VALUE AS Data FROM TABLE(split_String(OBJ_ID))) AND t.OBJECT_TYPE_ID = (SELECT OBJECT_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE = 'SM_COLUMN') CONNECT BY NOCYCLE PRIOR t.KV_ID = OBJECT_ID AND t.OBJECT_TYPE_ID = (SELECT OBJECT_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE = 'ADS_KEY_VALUE'));
   DELETE FROM ADS_ASSOCIATIONS WHERE SOURCE_OBJECT_TYPE_ID = (SELECT OBJECT_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE = 'SM_INDEX') AND TARGET_OBJECT_TYPE_ID = (SELECT OBJECT_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE = 'SM_COLUMN') AND TARGET_OBJECT_ID IN (SELECT COLUMN_VALUE AS Data FROM TABLE(split_String(OBJ_ID)));
   DELETE FROM SM_INDEX WHERE ID IN (SELECT SOURCE_OBJECT_ID FROM ADS_ASSOCIATIONS WHERE SOURCE_OBJECT_TYPE_ID = (SELECT OBJECT_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE = 'SM_INDEX') AND TARGET_OBJECT_TYPE_ID = (SELECT OBJECT_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE = 'SM_COLUMN') AND TARGET_OBJECT_ID IN (SELECT COLUMN_VALUE AS Data FROM TABLE(split_String(OBJ_ID))));
   DELETE FROM ADS_KEY_VALUE KV WHERE KV.OBJECT_TYPE_ID = (SELECT KVO.OBJECT_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS KVO WHERE KVO.OBJECT_TYPE = 'RELATIONSHIP_DETAILS') AND KV.OBJECT_ID IN (SELECT A.ID FROM ADS_ASSOCIATIONS A WHERE (A.SOURCE_OBJECT_TYPE_ID = (SELECT object_type_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE = 'SM_COLUMN') AND A.SOURCE_OBJECT_ID IN (SELECT COLUMN_VALUE AS Data FROM TABLE(split_String(OBJ_ID)))) OR (A.TARGET_OBJECT_TYPE_ID = (SELECT object_type_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE = 'SM_COLUMN') AND A.TARGET_OBJECT_ID IN (SELECT COLUMN_VALUE AS Data FROM TABLE(split_String(OBJ_ID)))));
   DELETE FROM ADS_ASSOCIATIONS WHERE (SOURCE_OBJECT_ID in (SELECT COLUMN_VALUE AS Data FROM TABLE(split_String(OBJ_ID))) AND SOURCE_OBJECT_TYPE_ID = (SELECT object_type_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE = 'SM_COLUMN')) OR (TARGET_OBJECT_ID in (SELECT COLUMN_VALUE AS Data FROM TABLE(split_String(OBJ_ID))) AND TARGET_OBJECT_TYPE_ID = (SELECT object_type_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE = 'SM_COLUMN'));
  END CASE;
END PROC_DELETE_TECH_PROP;
/
DECLARE
   TABLECHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO TABLECHECKERFLAG FROM "APP_PREFERENCES" WHERE PREFERENCE_NAME ='ADS_MM_LICENSE_RENEWAL_REMINDER_SEND';
   IF TABLECHECKERFLAG = 0 THEN
    INSERT INTO APP_PREFERENCES( PREFERENCE_NAME, PREFERENCE_VALUE)
(SELECT 'ADS_MM_LICENSE_RENEWAL_REMINDER_SEND','true' FROM DUAL
 UNION
 SELECT 'ADS_MM_LICENSE_RENEWAL_REMINDER_SNOOZE','3' FROM DUAL
 UNION
 SELECT 'ADS_MM_LICENSE_RENEWAL_REMINDER_EMAIL_TO','false' FROM DUAL
 UNION
 SELECT 'ADS_MM_LICENSE_RENEWAL_REMINDER_EMAIL_IDS','' FROM DUAL
);
    END IF;
END;
/
DECLARE
TABLECHECKERFLAG INT;
BEGIN
    SELECT COUNT(*) INTO TABLECHECKERFLAG FROM ADS_KEY_VALUE_OBJECTS WHERE  OBJECT_TYPE = 'AMM_LICENSE';
    IF TABLECHECKERFLAG = 0 THEN
        EXECUTE IMMEDIATE 'INSERT INTO ADS_KEY_VALUE_OBJECTS (OBJECT_TYPE,OBJECT_TABLE,OBJECT_TABLE_COLUMN,OBJECT_PARENT_TYPE,OBJECT_PARENT_COLUMN_ID) VALUES (''AMM_LICENSE'',''AMM_LICENSE'','''','''','''')';
    END IF;
END;
/

DECLARE
   TABLECHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO TABLECHECKERFLAG FROM ALL_OBJECTS WHERE OWNER = sys_context('userenv', 'current_schema') AND OBJECT_TYPE = 'FUNCTION' AND OBJECT_NAME = UPPER('FN_RUN_QUERY');
   IF TABLECHECKERFLAG = 1 THEN
      EXECUTE IMMEDIATE 'DROP FUNCTION FN_RUN_QUERY';
   END IF;
END;
/

CREATE OR REPLACE FUNCTION FN_RUN_QUERY(IN_QUERY IN VARCHAR)
RETURN SYS_REFCURSOR
IS
        C_RESULT SYS_REFCURSOR;
BEGIN
        OPEN C_RESULT FOR IN_QUERY;
        RETURN C_RESULT;
END;
/

DECLARE
   TABLECHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO TABLECHECKERFLAG FROM ALL_OBJECTS WHERE OWNER = sys_context('userenv', 'current_schema') AND OBJECT_TYPE = 'FUNCTION' AND OBJECT_NAME = UPPER('FN_RUN_DML_QUERY');
   IF TABLECHECKERFLAG = 1 THEN
      EXECUTE IMMEDIATE 'DROP FUNCTION FN_RUN_DML_QUERY';
   END IF;
END;
/

CREATE OR REPLACE FUNCTION FN_RUN_DML_QUERY(IN_QUERY IN VARCHAR)
RETURN INTEGER
IS
BEGIN
  EXECUTE IMMEDIATE IN_QUERY;
  RETURN SQL%ROWCOUNT;
END;
/

DECLARE
   TABLECHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO TABLECHECKERFLAG FROM ALL_OBJECTS WHERE OWNER = sys_context('userenv', 'current_schema') AND OBJECT_TYPE = 'FUNCTION' AND OBJECT_NAME = UPPER('FN_RUN_DML_QM3_QUERY');
   IF TABLECHECKERFLAG = 1 THEN
      EXECUTE IMMEDIATE 'DROP FUNCTION FN_RUN_DML_QM3_QUERY';
   END IF;
END;
/

create or replace FUNCTION FN_RUN_DML_QM3_QUERY(IN_LANG_NAME IN VARCHAR,IN_LANG_VALUE IN VARCHAR,IN_KEY_ID IN VARCHAR)
RETURN INTEGER
AS
TEMP_QUERY VARCHAR(2000);
BEGIN
TEMP_QUERY := 'UPDATE LANGUAGE_PREFERENCES SET ' || IN_LANG_NAME || ' = ''' || IN_LANG_VALUE || ''' WHERE KEY_ID = ''' || IN_KEY_ID || '''';
  EXECUTE IMMEDIATE TEMP_QUERY;
--  dbms_output.put_line(TEMP_QUERY);
  RETURN SQL%ROWCOUNT;
END;
/

DECLARE
   TABLECHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO TABLECHECKERFLAG FROM ALL_OBJECTS WHERE OWNER = sys_context('userenv', 'current_schema') AND OBJECT_TYPE = 'FUNCTION' AND OBJECT_NAME = UPPER('FN_RUN_DML_QM5_QUERY');
   IF TABLECHECKERFLAG = 1 THEN
      EXECUTE IMMEDIATE 'DROP FUNCTION FN_RUN_DML_QM5_QUERY';
   END IF;
END;
/

create or replace FUNCTION FN_RUN_DML_QM5_QUERY(IN_LANG_NAME IN VARCHAR,IN_KEY_ID IN VARCHAR,IN_LANG_VALUE IN VARCHAR,IN_KEY_DESC IN VARCHAR,IN_PARENT_ID IN VARCHAR)
RETURN INTEGER
AS
TEMP_QUERY VARCHAR(2000);
BEGIN
TEMP_QUERY := 'INSERT INTO LANGUAGE_PREFERENCES (KEY_ID, ' || IN_LANG_NAME || ', KEY_DESCRIPTION, PARENT_ID) VALUES (''' || IN_KEY_ID || ''','''|| IN_LANG_VALUE || ''','''|| IN_KEY_DESC || ''','''|| IN_PARENT_ID ||''')';
  EXECUTE IMMEDIATE TEMP_QUERY;
--  DBMS_OUTPUT.PUT_LINE(TEMP_QUERY);
  RETURN SQL%ROWCOUNT;
END;
/
DECLARE
   COLUMNCHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO COLUMNCHECKERFLAG FROM ALL_TAB_COLUMNS WHERE  OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME = UPPER('ADS_KEY_VALUE') AND COLUMN_NAME=UPPER('REGEX');
   IF COLUMNCHECKERFLAG = 0 THEN
        EXECUTE IMMEDIATE 'ALTER TABLE ADS_KEY_VALUE ADD REGEX varchar2(100) NULL';
        EXECUTE IMMEDIATE 'ALTER TABLE ADS_KEY_VALUE ADD MANDATORY NUMBER(3) NULL';
        EXECUTE IMMEDIATE 'ALTER TABLE ADS_KEY_VALUE ADD ENABLED NUMBER(3) NULL';
        EXECUTE IMMEDIATE 'ALTER TABLE ADS_KEY_VALUE ADD FIELD_LENGTH NUMBER(10) NULL';
        EXECUTE IMMEDIATE 'ALTER TABLE ADS_KEY_VALUE ADD PROCESSING_ORDER NUMBER(10) NULL';
   END IF;
END;
/
DECLARE
   TABLECHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO TABLECHECKERFLAG FROM ALL_TABLES WHERE OWNER = sys_context( 'userenv', 'current_schema' ) AND TABLE_NAME = UPPER('ADS_FORM');
   IF TABLECHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'CREATE TABLE "ADS_FORM"(
        "F_ID" NUMBER NOT NULL ENABLE,
        "FORM_NAME" varchar2(250) NOT NULL,
        "DESCRIPTION" varchar2(4000) NULL,
        "BASE_FORM_ID" NUMBER DEFAULT 0 NULL,
        "SYSTEM_BASED" NUMBER(3) DEFAULT 0 NULL,
        CONSTRAINT "PK_ADS_FORM_F_ID" PRIMARY KEY("F_ID") ENABLE,
        CONSTRAINT "UK_ADS_FORM_NAME" UNIQUE ("FORM_NAME") ENABLE)';
   END IF;
END;
/
DECLARE
   SEQUENCECHECKERFLAG INT;
BEGIN
    SELECT COUNT(*) INTO SEQUENCECHECKERFLAG FROM ALL_SEQUENCES WHERE SEQUENCE_OWNER = sys_context('userenv', 'current_schema') AND SEQUENCE_NAME = UPPER('ADS_FORM_TBL_SEQ');
   IF SEQUENCECHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'CREATE SEQUENCE   "ADS_FORM_TBL_SEQ"  MINVALUE 1 MAXVALUE 999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE';
   END IF;
END;
/
DECLARE
  TRIGGERCHECKERFLAG INT;
BEGIN
  SELECT COUNT(*)   INTO TRIGGERCHECKERFLAG   FROM all_triggers   WHERE OWNER = sys_context('userenv', 'current_schema') AND trigger_name = UPPER('ADS_FORM_INSERT');
  IF TRIGGERCHECKERFLAG = 0 THEN
    EXECUTE IMMEDIATE 'CREATE OR REPLACE TRIGGER  "ADS_FORM_INSERT" BEFORE INSERT ON ADS_FORM FOR EACH ROW BEGIN SELECT ADS_FORM_TBL_SEQ.NEXTVAL INTO :new.F_ID FROM DUAL; END;';
    EXECUTE IMMEDIATE 'ALTER TRIGGER  "ADS_FORM_INSERT" ENABLE';
  END IF;
END;
/
DECLARE
   DATACHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO DATACHECKERFLAG FROM "ADS_FORM";
   IF DATACHECKERFLAG = 0 THEN
        INSERT INTO ADS_FORM (FORM_NAME,DESCRIPTION,BASE_FORM_ID,SYSTEM_BASED)
        (SELECT 'Table Properties - Metadata Manager','Default template to configure table field properties', 0,1 FROM DUAL
        UNION
        SELECT 'Column Properties - Metadata Manager','Default template to configure column field properties', 0,1 FROM DUAL);
    END IF;
END;
/
DECLARE
DATACHECKERFLAG INT;
BEGIN
    SELECT COUNT(*) INTO DATACHECKERFLAG FROM ADS_KEY_VALUE_OBJECTS WHERE  OBJECT_TYPE = 'FORM';
    IF DATACHECKERFLAG = 0 THEN
        EXECUTE IMMEDIATE 'INSERT INTO ADS_KEY_VALUE_OBJECTS (OBJECT_TYPE,OBJECT_TABLE,OBJECT_TABLE_COLUMN,OBJECT_PARENT_TYPE,OBJECT_PARENT_COLUMN_ID) VALUES (''FORM'',''ADS_FORM'',''F_ID'','''','''')';
    END IF;
END;
/
DECLARE
DATACHECKERFLAG INT;
FORMOBJECTTYPEID INT;
SCOPEOBJECTTYPEID INT;
FORMID INT;
BEGIN
    SELECT COUNT(OBJECT_ID) INTO DATACHECKERFLAG FROM ADS_OBJECT_TO_OBJECT_SCOPE WHERE OBJECT_ID = (SELECT F_ID FROM ADS_FORM where FORM_NAME = 'Table Properties - Metadata Manager' AND SYSTEM_BASED = 1) AND SCOPE_OBJECT_TYPE_ID = (SELECT OBJECT_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE = 'SM_ENVIRONMENT');
    IF DATACHECKERFLAG = 0 THEN
        SELECT OBJECT_TYPE_ID INTO FORMOBJECTTYPEID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE = 'FORM';
        SELECT OBJECT_TYPE_ID INTO SCOPEOBJECTTYPEID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE = 'SM_ENVIRONMENT';
        SELECT F_ID INTO FORMID FROM ADS_FORM WHERE FORM_NAME = 'Table Properties - Metadata Manager' AND SYSTEM_BASED = 1;
        INSERT INTO ADS_OBJECT_TO_OBJECT_SCOPE(OBJECT_TYPE_ID,OBJECT_ID,SCOPE_OBJECT_TYPE_ID, SCOPE_OBJECT_ID)
        VALUES(FORMOBJECTTYPEID, FORMID, SCOPEOBJECTTYPEID, -1);
        SELECT F_ID INTO FORMID FROM ADS_FORM WHERE FORM_NAME = 'Column Properties - Metadata Manager' AND SYSTEM_BASED = 1;
        INSERT INTO ADS_OBJECT_TO_OBJECT_SCOPE(OBJECT_TYPE_ID,OBJECT_ID,SCOPE_OBJECT_TYPE_ID, SCOPE_OBJECT_ID)
        VALUES(FORMOBJECTTYPEID, FORMID, SCOPEOBJECTTYPEID, -1);
    END IF;
END;
/
DECLARE
DATACHEACKERFLAG INT;
BEGIN
    SELECT COUNT(*) INTO DATACHEACKERFLAG FROM AMM_DATATYPES WHERE DATATYPE = 'numeric';
    IF DATACHEACKERFLAG = 0 THEN
        INSERT INTO AMM_DATATYPES (DATATYPE,PRECISION,SCALE) (SELECT 'numeric',0,0  FROM DUAL);
    END IF;
END;
/
DECLARE
	TABLECHECKERFLAG INT;
BEGIN
	SELECT COUNT(*) INTO TABLECHECKERFLAG FROM ALL_TABLES WHERE OWNER = sys_context( 'userenv', 'current_schema' ) AND TABLE_NAME = UPPER('ADS_WORKFLOW_FOLDER');
	IF TABLECHECKERFLAG = 0 THEN
		EXECUTE IMMEDIATE 'CREATE TABLE "ADS_WORKFLOW_FOLDER"(
			"WFF_ID" NUMBER NOT NULL ENABLE,
			"FOLDER_NAME" VARCHAR2(250) NULL,
			"DESCRIPTION" VARCHAR2(4000) NULL,
			"FOLDER_ORDER" NUMBER  NOT NULL,
			CONSTRAINT PK_ADS_WRKFLW_CAT_ID PRIMARY KEY(WFF_ID),
			CONSTRAINT UK_ADS_WF_FOLDER_NAME UNIQUE (FOLDER_NAME))';
	END IF;
END;
/
DECLARE
	SEQUENCECHECKERFLAG INT;
BEGIN
    SELECT COUNT(*) INTO SEQUENCECHECKERFLAG FROM ALL_SEQUENCES WHERE SEQUENCE_OWNER = sys_context('userenv', 'current_schema') AND SEQUENCE_NAME = UPPER('ADS_WF_FOLDER_TBL_SEQ');
	IF SEQUENCECHECKERFLAG = 0 THEN
		EXECUTE IMMEDIATE 'CREATE SEQUENCE   "ADS_WF_FOLDER_TBL_SEQ"  MINVALUE 1 MAXVALUE 999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE';
	END IF;
END;
/
DECLARE
	TRIGGERCHECKERFLAG INT;
BEGIN
	SELECT COUNT(*)   INTO TRIGGERCHECKERFLAG   FROM all_triggers   WHERE OWNER = sys_context('userenv', 'current_schema') AND trigger_name = UPPER('ADS_WF_FOLDER_INSERT');
	IF TRIGGERCHECKERFLAG = 0 THEN
		EXECUTE IMMEDIATE 'CREATE OR REPLACE TRIGGER  "ADS_WF_FOLDER_INSERT" BEFORE INSERT ON ADS_WORKFLOW_FOLDER FOR EACH ROW BEGIN SELECT ADS_WF_FOLDER_TBL_SEQ.NEXTVAL INTO :new.WFF_ID FROM DUAL; END;';
		EXECUTE IMMEDIATE 'ALTER TRIGGER  "ADS_WF_FOLDER_INSERT" ENABLE';
	END IF;
END;
/
DECLARE
	TABLECHECKERFLAG INT;
BEGIN
	SELECT COUNT(*) INTO TABLECHECKERFLAG FROM ALL_TABLES WHERE OWNER = sys_context( 'userenv', 'current_schema' ) AND TABLE_NAME = UPPER('ADS_WORKFLOW_STAGE');
	IF TABLECHECKERFLAG = 0 THEN
		  EXECUTE IMMEDIATE 'CREATE TABLE "ADS_WORKFLOW_STAGE"(
			"WFS_ID" NUMBER NOT NULL ENABLE,
			"STAGE_NAME" VARCHAR2(250)  NOT NULL,
			"DESCRIPTION" VARCHAR2(4000)  NULL,
			"STATUS_TITLE" VARCHAR2(50)  NOT NULL,
			"MODULE_ID" NUMBER  NOT NULL,
			"STAGE_ORDER" NUMBER  NULL,
			"THUMBNAIL" BLOB  NULL,
                        "VALID" VARCHAR2(1) DEFAULT ''1'' NOT NULL,
			"SYSTEMBASED" char(1) DEFAULT ''0'' NULL,
			CONSTRAINT PK_ADS_WRKFLW_WFS_ID PRIMARY KEY(WFS_ID),
			CONSTRAINT FK_ADS_WRKFLW_MOD_ID FOREIGN KEY(MODULE_ID) REFERENCES ADS_MODULES(MODULE_ID) ON DELETE CASCADE ENABLE)';
	END IF;
END;
/
DECLARE
	SEQUENCECHECKERFLAG INT;
BEGIN
    SELECT COUNT(*) INTO SEQUENCECHECKERFLAG FROM ALL_SEQUENCES WHERE SEQUENCE_OWNER = sys_context('userenv', 'current_schema') AND SEQUENCE_NAME = UPPER('ADS_WF_STAGE_TBL_SEQ');
	IF SEQUENCECHECKERFLAG = 0 THEN
		EXECUTE IMMEDIATE 'CREATE SEQUENCE   "ADS_WF_STAGE_TBL_SEQ"  MINVALUE 1 MAXVALUE 999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE';
	END IF;
END;
/
DECLARE
	TRIGGERCHECKERFLAG INT;
BEGIN
	SELECT COUNT(*)   INTO TRIGGERCHECKERFLAG   FROM all_triggers   WHERE OWNER = sys_context('userenv', 'current_schema') AND trigger_name = UPPER('ADS_WF_STAGE_INSERT');
	IF TRIGGERCHECKERFLAG = 0 THEN
		EXECUTE IMMEDIATE 'CREATE OR REPLACE TRIGGER  "ADS_WF_STAGE_INSERT" BEFORE INSERT ON ADS_WORKFLOW_STAGE FOR EACH ROW BEGIN SELECT ADS_WF_STAGE_TBL_SEQ.NEXTVAL INTO :new.WFS_ID FROM DUAL; END;';
		EXECUTE IMMEDIATE 'ALTER TRIGGER  "ADS_WF_STAGE_INSERT" ENABLE';
	END IF;
END;
/
DECLARE
	TABLECHECKERFLAG INT;
BEGIN
	SELECT COUNT(*) INTO TABLECHECKERFLAG FROM ALL_TABLES WHERE OWNER = sys_context( 'userenv', 'current_schema' ) AND TABLE_NAME = UPPER('ADS_WORKFLOW_STAGE_ROLE');
	IF TABLECHECKERFLAG = 0 THEN
		EXECUTE IMMEDIATE 'CREATE TABLE "ADS_WORKFLOW_STAGE_ROLE"(
			"WFS_ID" NUMBER  NOT NULL ENABLE,
			"ROLE_ID" VARCHAR2(100)  NOT NULL,
			CONSTRAINT FK_ADS_WRKFLW_WFS_ID FOREIGN KEY(WFS_ID) REFERENCES ADS_WORKFLOW_STAGE(WFS_ID) ON DELETE CASCADE ENABLE,
			CONSTRAINT FK_ADS_WRKFLW_ROLE_ID FOREIGN KEY(ROLE_ID) REFERENCES SECURITY_ROLES(ROLE_ID) ON DELETE CASCADE ENABLE,
			CONSTRAINT UK_ADS_WF_STAGE_ROLE_ID UNIQUE(WFS_ID,ROLE_ID))';
	END IF;
END;
/
DECLARE
TABLECHECKERFLAG INT;
VERSIONCHECKER INT;
    BEGIN
        SELECT COUNT(*) INTO VERSIONCHECKER FROM ADS_MM_VERSION WHERE VALUE < '9.2';
        IF VERSIONCHECKER = 1 THEN
        BEGIN
	SELECT COUNT(*) INTO TABLECHECKERFLAG FROM ALL_TABLES WHERE OWNER = sys_context( 'userenv', 'current_schema' ) AND TABLE_NAME = UPPER('ADS_WORKFLOW_TRIGGER');
        IF TABLECHECKERFLAG = 0 THEN
            begin
		EXECUTE IMMEDIATE 'CREATE TABLE "ADS_WORKFLOW_TRIGGER"(
			"WFT_ID" NUMBER(19)   NOT NULL ENABLE,
			"TRIGGER_NAME" VARCHAR2(250)  NOT NULL,
			"TRIGGER_TITLE" VARCHAR2(250)  NOT NULL,
			"DESCRIPTION" VARCHAR2(4000)  NULL,
			"STATUS_TITLE" VARCHAR2(50) DEFAULT ''Draft'' NOT NULL,
			CONSTRAINT PK_ADS_WRKFLW_TRG_ID PRIMARY KEY(WFT_ID))';
            end;
	END IF;
        END;
        END IF;
END;
/
DECLARE
SEQUENCECHECKERFLAG INT;
VERSIONCHECKER INT;
BEGIN
    SELECT COUNT(*) INTO VERSIONCHECKER FROM ADS_MM_VERSION WHERE VALUE < '9.2';
    SELECT COUNT(*) INTO SEQUENCECHECKERFLAG FROM ALL_SEQUENCES WHERE SEQUENCE_OWNER = sys_context('userenv', 'current_schema') AND SEQUENCE_NAME = UPPER('ADS_WF_TRIGGER_TBL_SEQ');
	IF SEQUENCECHECKERFLAG = 0  AND VERSIONCHECKER = 1 THEN
		EXECUTE IMMEDIATE 'CREATE SEQUENCE   "ADS_WF_TRIGGER_TBL_SEQ"  MINVALUE 1 MAXVALUE 999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE';
	END IF;
END;
/
DECLARE
TRIGGERCHECKERFLAG INT;
VERSIONCHECKER INT;
BEGIN
        SELECT COUNT(*) INTO VERSIONCHECKER FROM ADS_MM_VERSION WHERE VALUE < '9.2';
	SELECT COUNT(*)   INTO TRIGGERCHECKERFLAG   FROM all_triggers   WHERE OWNER = sys_context('userenv', 'current_schema') AND trigger_name = UPPER('ADS_WF_TRIGGER_INSERT');
	IF TRIGGERCHECKERFLAG = 0  AND VERSIONCHECKER = 1 THEN
		EXECUTE IMMEDIATE 'CREATE OR REPLACE TRIGGER  "ADS_WF_TRIGGER_INSERT" BEFORE INSERT ON ADS_WORKFLOW_TRIGGER FOR EACH ROW BEGIN SELECT ADS_WF_TRIGGER_TBL_SEQ.NEXTVAL INTO :new.WFT_ID FROM DUAL; END;';
		EXECUTE IMMEDIATE 'ALTER TRIGGER  "ADS_WF_TRIGGER_INSERT" ENABLE';
	END IF;
END;
/
DECLARE
TABLECHECKERFLAG INT;
VERSIONCHECKER INT;
    BEGIN
        SELECT COUNT(*) INTO VERSIONCHECKER FROM ADS_MM_VERSION WHERE VALUE <'9.2';
	SELECT COUNT(*) INTO TABLECHECKERFLAG FROM ALL_TABLES WHERE OWNER = sys_context( 'userenv', 'current_schema' ) AND TABLE_NAME = UPPER('ADS_WORKFLOW_ACTION');
	IF TABLECHECKERFLAG = 0 AND VERSIONCHECKER = 1 THEN
		EXECUTE IMMEDIATE 'CREATE TABLE "ADS_WORKFLOW_ACTION"(
			"WFA_ID" NUMBER   NOT NULL ENABLE,
			"ACTION_NAME" VARCHAR2(250)  NOT NULL,
			"ACTION_TITLE" VARCHAR2(250) NOT NULL,
			"DESCRIPTION" VARCHAR2(4000)  NULL,
			"STATUS_TITLE" VARCHAR2(50)  NOT NULL,
			"MODULE_ID" NUMBER  NOT NULL,
			"ACTION_FILENAME" VARCHAR2(50)  NULL,
			"ACTION_METHOD" VARCHAR2(50)  NULL,
			CONSTRAINT PK_ADS_WF_ACTN_WFA_ID PRIMARY KEY(WFA_ID),
			CONSTRAINT FK_ADS_WF_ACTN_MODULE_ID FOREIGN KEY(MODULE_ID) REFERENCES ADS_MODULES(MODULE_ID) ON DELETE CASCADE ENABLE)';
	END IF;
END;
/
DECLARE
    SEQUENCECHECKERFLAG INT;
    VERSIONCHECKER INT;
BEGIN
    SELECT COUNT(*) INTO VERSIONCHECKER FROM ADS_MM_VERSION WHERE VALUE <'9.2';
    SELECT COUNT(*) INTO SEQUENCECHECKERFLAG FROM ALL_SEQUENCES WHERE SEQUENCE_OWNER = sys_context('userenv', 'current_schema') AND SEQUENCE_NAME = UPPER('ADS_WF_ACTION_TBL_SEQ');
	IF SEQUENCECHECKERFLAG = 0  AND VERSIONCHECKER = 1 THEN
		EXECUTE IMMEDIATE 'CREATE SEQUENCE   "ADS_WF_ACTION_TBL_SEQ"  MINVALUE 1 MAXVALUE 999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE';
	END IF;
END;
/
DECLARE
    TRIGGERCHECKERFLAG INT;
    VERSIONCHECKER INT;
BEGIN
        SELECT COUNT(*) INTO VERSIONCHECKER FROM ADS_MM_VERSION WHERE VALUE < '9.2';
	SELECT COUNT(*)   INTO TRIGGERCHECKERFLAG   FROM all_triggers   WHERE OWNER = sys_context('userenv', 'current_schema') AND trigger_name = UPPER('ADS_WF_ACTION_INSERT');
	IF TRIGGERCHECKERFLAG = 0 AND VERSIONCHECKER = 1 THEN
		EXECUTE IMMEDIATE 'CREATE OR REPLACE TRIGGER  "ADS_WF_ACTION_INSERT" BEFORE INSERT ON ADS_WORKFLOW_ACTION FOR EACH ROW BEGIN SELECT ADS_WF_ACTION_TBL_SEQ.NEXTVAL INTO :new.WFA_ID FROM DUAL; END;';
		EXECUTE IMMEDIATE 'ALTER TRIGGER  "ADS_WF_ACTION_INSERT" ENABLE';
	END IF;
END;
/
DECLARE
	TABLECHECKERFLAG INT;
BEGIN
	SELECT COUNT(*) INTO TABLECHECKERFLAG FROM ALL_TABLES WHERE OWNER = sys_context( 'userenv', 'current_schema' ) AND TABLE_NAME = UPPER('ADS_WORKFLOW');
	IF TABLECHECKERFLAG = 0 THEN
		EXECUTE IMMEDIATE 'CREATE TABLE "ADS_WORKFLOW"(
			"WF_ID" NUMBER   NOT NULL,
			"WORKFLOW_NAME" VARCHAR2(250)  NOT NULL,
			"DESCRIPTION" VARCHAR2(4000)  NULL,
			"WFF_ID" NUMBER  NOT NULL,
			"MODULE_ID" NUMBER  NOT NULL,
			"SYSTEMBASED" char(1) DEFAULT ''0'' NULL,
			"THUMBNAIL" BLOB  NULL,
                        "VALID" char(1) DEFAULT ''1'' NULL,
			CONSTRAINT PK_ADS_WORKFLOW_ID PRIMARY KEY(WF_ID),
                        CONSTRAINT UK_ADS_WORKFLOW_NAME UNIQUE(WORKFLOW_NAME,WFF_ID),
			CONSTRAINT FK_ADS_WF_ACTN_WFF_ID FOREIGN KEY(WFF_ID) REFERENCES ADS_WORKFLOW_FOLDER(WFF_ID) ON DELETE CASCADE ENABLE,
			CONSTRAINT FK_ADS_WF_MOD_ID FOREIGN KEY(MODULE_ID) REFERENCES ADS_MODULES(MODULE_ID) ON DELETE CASCADE ENABLE)';
	END IF;
END;
/
DECLARE
	SEQUENCECHECKERFLAG INT;
BEGIN
    SELECT COUNT(*) INTO SEQUENCECHECKERFLAG FROM ALL_SEQUENCES WHERE SEQUENCE_OWNER = sys_context('userenv', 'current_schema') AND SEQUENCE_NAME = UPPER('ADS_WF_TBL_SEQ');
	IF SEQUENCECHECKERFLAG = 0 THEN
		EXECUTE IMMEDIATE 'CREATE SEQUENCE   "ADS_WF_TBL_SEQ"  MINVALUE 1 MAXVALUE 999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE';
	END IF;
END;
/
DECLARE
	TRIGGERCHECKERFLAG INT;
BEGIN
	SELECT COUNT(*)   INTO TRIGGERCHECKERFLAG   FROM all_triggers   WHERE OWNER = sys_context('userenv', 'current_schema') AND trigger_name = UPPER('ADS_WF_INSERT');
	IF TRIGGERCHECKERFLAG = 0 THEN
		EXECUTE IMMEDIATE 'CREATE OR REPLACE TRIGGER  "ADS_WF_INSERT" BEFORE INSERT ON ADS_WORKFLOW FOR EACH ROW BEGIN SELECT ADS_WF_TBL_SEQ.NEXTVAL INTO :new.WF_ID FROM DUAL; END;';
		EXECUTE IMMEDIATE 'ALTER TRIGGER  "ADS_WF_INSERT" ENABLE';
	END IF;
END;
/


DECLARE
	TABLECHECKERFLAG INT;
BEGIN
	SELECT COUNT(*) INTO TABLECHECKERFLAG FROM ALL_TABLES WHERE OWNER = sys_context( 'userenv', 'current_schema' ) AND TABLE_NAME = UPPER('ADS_WORKFLOW_NODE');
	IF TABLECHECKERFLAG = 0 THEN
		EXECUTE IMMEDIATE 'CREATE TABLE "ADS_WORKFLOW_NODE"(
			"WFN_ID" NUMBER NOT NULL ENABLE,
			"WF_ID" NUMBER NOT NULL,
			"NODE_TYPE" CHAR(1) NOT NULL,
			"NODE_ID" NUMBER  NULL,
			"UI_PROPERTIES" VARCHAR2(4000)  NULL,
			"VALID" VARCHAR2(1) DEFAULT ''1'' NOT NULL,
			CONSTRAINT PK_ADS_WRKFLW_WFN_ID PRIMARY KEY(WFN_ID),
			CONSTRAINT FK_ADS_WRKFLW_WF_ID FOREIGN KEY(WF_ID) REFERENCES ADS_WORKFLOW(WF_ID) ON DELETE CASCADE ENABLE)';
	END IF;
END;
/
DECLARE
	SEQUENCECHECKERFLAG INT;
BEGIN
    SELECT COUNT(*) INTO SEQUENCECHECKERFLAG FROM ALL_SEQUENCES WHERE SEQUENCE_OWNER = sys_context('userenv', 'current_schema') AND SEQUENCE_NAME = UPPER('ADS_WF_NODE_TBL_SEQ');
	IF SEQUENCECHECKERFLAG = 0 THEN
		EXECUTE IMMEDIATE 'CREATE SEQUENCE   "ADS_WF_NODE_TBL_SEQ"  MINVALUE 1 MAXVALUE 999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE';
	END IF;
END;
/
DECLARE
	TRIGGERCHECKERFLAG INT;
BEGIN
	SELECT COUNT(*)   INTO TRIGGERCHECKERFLAG   FROM all_triggers   WHERE OWNER = sys_context('userenv', 'current_schema') AND trigger_name = UPPER('ADS_WF_NODE_INSERT');
	IF TRIGGERCHECKERFLAG = 0 THEN
		EXECUTE IMMEDIATE 'CREATE OR REPLACE TRIGGER  "ADS_WF_NODE_INSERT" BEFORE INSERT ON ADS_WORKFLOW_NODE FOR EACH ROW BEGIN SELECT ADS_WF_NODE_TBL_SEQ.NEXTVAL INTO :new.WFN_ID FROM DUAL; END;';
		EXECUTE IMMEDIATE 'ALTER TRIGGER  "ADS_WF_NODE_INSERT" ENABLE';
	END IF;
END;
/


DECLARE
	TABLECHECKERFLAG INT;
BEGIN
	SELECT COUNT(*) INTO TABLECHECKERFLAG FROM ALL_TABLES WHERE OWNER = sys_context( 'userenv', 'current_schema' ) AND TABLE_NAME = UPPER('ADS_WORKFLOW_NODE_CON');
	IF TABLECHECKERFLAG = 0 THEN
		EXECUTE IMMEDIATE 'CREATE TABLE "ADS_WORKFLOW_NODE_CON"(
			"SOURCE_WFN_ID" NUMBER(19)  NOT NULL,
			"TARGET_WFN_ID" NUMBER(19)  NOT NULL,
			"UI_PROPERTIES" VARCHAR2(4000)  NULL,
			CONSTRAINT FK_ADS_SOURCE_WFN_ID FOREIGN KEY(SOURCE_WFN_ID) REFERENCES ADS_WORKFLOW_NODE(WFN_ID) ON DELETE CASCADE ENABLE)';
	END IF;
END;
/

DECLARE
	TABLECHECKERFLAG INT;
BEGIN
	SELECT COUNT(*) INTO TABLECHECKERFLAG FROM ALL_TABLES WHERE OWNER = sys_context( 'userenv', 'current_schema' ) AND TABLE_NAME = UPPER('ADS_WORKFLOW_NODE_ROLE');
	IF TABLECHECKERFLAG = 0 THEN
		EXECUTE IMMEDIATE 'CREATE TABLE "ADS_WORKFLOW_NODE_ROLE"(
			"WFN_ID" NUMBER  NOT NULL,
			"ROLE_ID" VARCHAR2(100)  NOT NULL,
			CONSTRAINT FK_ADS_WF_NODE_WFN_ID FOREIGN KEY(WFN_ID) REFERENCES ADS_WORKFLOW_NODE(WFN_ID) ON DELETE CASCADE ENABLE,
			CONSTRAINT FK_ADS_WF_NODE_ROLE_ID FOREIGN KEY(ROLE_ID) REFERENCES SECURITY_ROLES(ROLE_ID) ON DELETE CASCADE ENABLE)';
	END IF;
END;
/

DECLARE
	TABLECHECKERFLAG INT;
BEGIN
	SELECT COUNT(*) INTO TABLECHECKERFLAG FROM ALL_TABLES WHERE OWNER = sys_context( 'userenv', 'current_schema' ) AND TABLE_NAME = UPPER('ADS_WORKFLOW_ASSIGNMENT');
	IF TABLECHECKERFLAG = 0 THEN
		EXECUTE IMMEDIATE 'CREATE TABLE "ADS_WORKFLOW_ASSIGNMENT"(
			"WFG_ID" NUMBER   NOT NULL,
			"WF_ID" NUMBER  NOT NULL,
			"OBJECT_ID" NUMBER  NOT NULL,
			"OBJECT_TYPE_ID" NUMBER  NOT NULL,
			"VALID" char(1) DEFAULT ''1'' NULL,
			CONSTRAINT PK_ADS_WF_ASSGN_WFG_ID PRIMARY KEY(WFG_ID),
			CONSTRAINT FK_ADS_WF_ASGN_WF_ID FOREIGN KEY(WF_ID) REFERENCES ADS_WORKFLOW(WF_ID) ON DELETE CASCADE ENABLE,
			CONSTRAINT FK_ADS_WF_OBJECT_TYPE_ID FOREIGN KEY(OBJECT_TYPE_ID) REFERENCES ADS_KEY_VALUE_OBJECTS(OBJECT_TYPE_ID) ON DELETE CASCADE ENABLE)';
	END IF;
END;
/
DECLARE
	SEQUENCECHECKERFLAG INT;
BEGIN
    SELECT COUNT(*) INTO SEQUENCECHECKERFLAG FROM ALL_SEQUENCES WHERE SEQUENCE_OWNER = sys_context('userenv', 'current_schema') AND SEQUENCE_NAME = UPPER('ADS_WF_ASSIGNMENT_TBL_SEQ');
	IF SEQUENCECHECKERFLAG = 0 THEN
		EXECUTE IMMEDIATE 'CREATE SEQUENCE   "ADS_WF_ASSIGNMENT_TBL_SEQ"  MINVALUE 1 MAXVALUE 999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE';
	END IF;
END;
/
DECLARE
	TRIGGERCHECKERFLAG INT;
BEGIN
	SELECT COUNT(*)   INTO TRIGGERCHECKERFLAG   FROM all_triggers   WHERE OWNER = sys_context('userenv', 'current_schema') AND trigger_name = UPPER('ADS_WF_ASSIGNMENT_INSERT');
	IF TRIGGERCHECKERFLAG = 0 THEN
		EXECUTE IMMEDIATE 'CREATE OR REPLACE TRIGGER  "ADS_WF_ASSIGNMENT_INSERT" BEFORE INSERT ON ADS_WORKFLOW_ASSIGNMENT FOR EACH ROW BEGIN SELECT ADS_WF_ASSIGNMENT_TBL_SEQ.NEXTVAL INTO :new.WFG_ID FROM DUAL; END;';
		EXECUTE IMMEDIATE 'ALTER TRIGGER  "ADS_WF_ASSIGNMENT_INSERT" ENABLE';
	END IF;
END;
/


DECLARE
	TABLECHECKERFLAG INT;
BEGIN
	SELECT COUNT(*) INTO TABLECHECKERFLAG FROM ALL_TABLES WHERE OWNER = sys_context( 'userenv', 'current_schema' ) AND TABLE_NAME = UPPER('ADS_WORKFLOW_ASGN_NODE_CONFIG');
	IF TABLECHECKERFLAG = 0 THEN
		EXECUTE IMMEDIATE 'CREATE TABLE "ADS_WORKFLOW_ASGN_NODE_CONFIG"(
			"WFG_ID" NUMBER  NOT NULL,
			"WFN_ID" NUMBER  NOT NULL,
			"CONFIG_TYPE" VARCHAR2(250)  NOT NULL,
			"CONFIG_VALUE" VARCHAR2(250)  NOT NULL,
			CONSTRAINT FK_ADS_WF_ASSGN_WFG_ID FOREIGN KEY(WFG_ID) REFERENCES ADS_WORKFLOW_ASSIGNMENT(WFG_ID) ON DELETE CASCADE ENABLE,
			CONSTRAINT FK_ADS_WF_ASSGN_CONF_WFN_ID FOREIGN KEY(WFN_ID) REFERENCES ADS_WORKFLOW_NODE(WFN_ID))';
	END IF;
END;
/


DECLARE
TABLECHECKERFLAG INT;
VERSIONCHECKER INT;
BEGIN
    SELECT COUNT(*) INTO VERSIONCHECKER FROM ADS_MM_VERSION WHERE VALUE < '9.2';
    SELECT COUNT(*) INTO TABLECHECKERFLAG FROM ALL_TABLES WHERE OWNER = sys_context( 'userenv', 'current_schema' ) AND TABLE_NAME = UPPER('ADS_WORKFLOW_ASGMNT_TRIGGER');
	IF TABLECHECKERFLAG = 0 AND VERSIONCHECKER = 1 THEN
            EXECUTE IMMEDIATE 'CREATE TABLE "ADS_WORKFLOW_ASGMNT_TRIGGER"(
                    "WFG_ID" NUMBER  NOT NULL,
                    "OBJECT_TYPE_ID" NUMBER NOT NULL,
                    "OBJECT_ID" NUMBER  NOT NULL,
                    CONSTRAINT FK_ADS_WF_ASSGN_TRGR_WFA_ID FOREIGN KEY(WFG_ID) REFERENCES ADS_WORKFLOW_ASSIGNMENT(WFG_ID) ON DELETE CASCADE,
                    CONSTRAINT FK_ADS_WF_ASGN_TR_OBTYPE_ID FOREIGN KEY(OBJECT_TYPE_ID) REFERENCES ADS_KEY_VALUE_OBJECTS(OBJECT_TYPE_ID))';
	END IF;
END;
/

DECLARE
	TABLECHECKERFLAG INT;
BEGIN
	SELECT COUNT(*) INTO TABLECHECKERFLAG FROM ALL_TABLES WHERE OWNER = sys_context( 'userenv', 'current_schema' ) AND TABLE_NAME = UPPER('ADS_WORKFLOW_STATUS');
	IF TABLECHECKERFLAG = 0 THEN
		EXECUTE IMMEDIATE 'CREATE TABLE "ADS_WORKFLOW_STATUS"(
			"OBJECT_TYPE_ID" NUMBER  NOT NULL,
			"OBJECT_ID" NUMBER NOT NULL,
			"WFN_ID" NUMBER NOT NULL,
			CONSTRAINT FK_ADS_WF_STATUS_OBJ_TYPE_ID FOREIGN KEY(OBJECT_TYPE_ID) REFERENCES ADS_KEY_VALUE_OBJECTS(OBJECT_TYPE_ID) ON DELETE CASCADE,
			CONSTRAINT FK_ADS_WF_STATUS_WFN_ID FOREIGN KEY(WFN_ID) REFERENCES ADS_WORKFLOW_NODE(WFN_ID))';
	END IF;
END;
/

DECLARE
   COLUMNCHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO COLUMNCHECKERFLAG FROM ALL_TAB_COLUMNS WHERE  OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME = UPPER('SYSTEM_TABLE_METADATA') AND COLUMN_NAME=UPPER('PUBLISH');
   IF COLUMNCHECKERFLAG = 0 THEN
        EXECUTE IMMEDIATE 'ALTER TABLE SYSTEM_TABLE_METADATA ADD PUBLISH NUMBER(3) NULL';
        EXECUTE IMMEDIATE 'UPDATE SYSTEM_TABLE_METADATA SET PUBLISH = 0';
        EXECUTE IMMEDIATE 'ALTER TABLE SYSTEM_TABLE_COLUMNS_METADATA ADD PUBLISH NUMBER(3) NULL';
        EXECUTE IMMEDIATE 'UPDATE SYSTEM_TABLE_COLUMNS_METADATA SET PUBLISH = 0';
   END IF;
END;
/

DECLARE
   ROWCHECKERFLAG INT;
BEGIN
	SELECT count(*) INTO ROWCHECKERFLAG FROM ADS_MODULES WHERE MODULE_KEY = 'com.ads.mm.permission.generic';
	IF ROWCHECKERFLAG = 0 THEN
		INSERT INTO ADS_MODULES(MODULE_ID, MODULE_NAME, MODULE_KEY, MODULE_ORDER, MODULE_FORWARD)
		(SELECT 14, 'Generic', 'com.ads.mm.permission.generic', 14 , 'generic' FROM DUAL
		UNION
		SELECT 15, 'Workflow Manager', 'com.ads.mm.permission.workflow', 15 , 'workflowmanager' FROM DUAL);
	END IF;
END;
/
DECLARE
   VERSIONCHECKERFLAG INT;
   ROWCHECKERFLAG INT;
BEGIN
 SELECT COUNT(*) INTO VERSIONCHECKERFLAG FROM ADS_MM_VERSION WHERE VALUE <= '8.3';
 IF VERSIONCHECKERFLAG = 1 THEN
  SELECT COUNT(*) INTO ROWCHECKERFLAG FROM ADS_WORKFLOW_STAGE WHERE STAGE_NAME = 'Review' AND MODULE_ID = (SELECT MODULE_ID FROM ADS_MODULES WHERE MODULE_NAME = 'Generic');
  IF ROWCHECKERFLAG = 0 THEN
   INSERT INTO ADS_WORKFLOW_STAGE(STAGE_NAME, DESCRIPTION, STATUS_TITLE,MODULE_ID,STAGE_ORDER,VALID,SYSTEMBASED)
   (SELECT 'Review','Review','Pending Review', MODULE_ID, 1,1,1 FROM ADS_MODULES WHERE MODULE_NAME = 'Generic'
   UNION
   SELECT 'Approve','Approve','Pending Approve', MODULE_ID, 2,1,1 FROM ADS_MODULES WHERE MODULE_NAME = 'Generic'
   UNION
   SELECT 'Pending Publish','Pending Publish','Pending Publish', MODULE_ID, 3,1,1 FROM ADS_MODULES WHERE MODULE_NAME = 'Generic');
  END IF;
 END IF;
END;
/
DECLARE
   ROWCHECKERFLAG INT;
BEGIN
	SELECT count(*) INTO ROWCHECKERFLAG FROM ADS_KEY_VALUE_OBJECTS WHERE  OBJECT_TYPE = 'ADS_WORKFLOW_STAGE';
	IF ROWCHECKERFLAG = 0 THEN
		INSERT INTO ADS_KEY_VALUE_OBJECTS (OBJECT_TYPE,OBJECT_TABLE,OBJECT_TABLE_COLUMN,OBJECT_PARENT_TYPE,OBJECT_PARENT_COLUMN_ID)
        SELECT 'ADS_WORKFLOW_STAGE','ADS_WORKFLOW_STAGE','WFS_ID','','' FROM DUAL;
	END IF;
END;
/

DECLARE
   ROWCHECKERFLAG INT;
BEGIN
	SELECT count(*) INTO ROWCHECKERFLAG FROM ADS_KEY_VALUE_OBJECTS WHERE  OBJECT_TYPE = 'ADS_WORKFLOW_FOLDER';
	IF ROWCHECKERFLAG = 0 THEN
		INSERT INTO ADS_KEY_VALUE_OBJECTS (OBJECT_TYPE,OBJECT_TABLE,OBJECT_TABLE_COLUMN,OBJECT_PARENT_TYPE,OBJECT_PARENT_COLUMN_ID)
        SELECT 'ADS_WORKFLOW_FOLDER','ADS_WORKFLOW_FOLDER','WFF_ID','','' FROM DUAL;
	END IF;
END;
/

DECLARE
   ROWCHECKERFLAG INT;
BEGIN
	SELECT count(*) INTO ROWCHECKERFLAG FROM ADS_KEY_VALUE_OBJECTS WHERE  OBJECT_TYPE = 'ADS_WORKFLOW_ASSIGNMENT';
	IF ROWCHECKERFLAG = 0 THEN
		INSERT INTO ADS_KEY_VALUE_OBJECTS (OBJECT_TYPE,OBJECT_TABLE,OBJECT_TABLE_COLUMN,OBJECT_PARENT_TYPE,OBJECT_PARENT_COLUMN_ID)
		SELECT 'ADS_WORKFLOW_ASSIGNMENT','ADS_WORKFLOW_ASSIGNMENT','WFA_ID','','' FROM DUAL;
	END IF;
END;
/

DECLARE
   ROWCHECKERFLAG INT;
BEGIN
	SELECT count(*) INTO ROWCHECKERFLAG FROM ADS_KEY_VALUE_OBJECTS WHERE  OBJECT_TYPE = 'ADS_WORKFLOW';
	IF ROWCHECKERFLAG = 0 THEN
		INSERT INTO ADS_KEY_VALUE_OBJECTS (OBJECT_TYPE,OBJECT_TABLE,OBJECT_TABLE_COLUMN,OBJECT_PARENT_TYPE,OBJECT_PARENT_COLUMN_ID)
		SELECT 'ADS_WORKFLOW','ADS_WORKFLOW','WF_ID','','' FROM DUAL;
	END IF;
END;
/
DECLARE
ROWCHECKERFLAG INT;
VERSIONCHECKER INT;
BEGIN
    SELECT COUNT(*) INTO VERSIONCHECKER FROM ADS_MM_VERSION WHERE VALUE < '9.2';
    IF VERSIONCHECKER = 1 THEN
        BEGIN
            EXECUTE IMMEDIATE 'SELECT count(*) FROM ADS_WORKFLOW_TRIGGER WHERE TRIGGER_NAME = ''ON_CREATE''' INTO ROWCHECKERFLAG;
                IF ROWCHECKERFLAG = 0 THEN
                    BEGIN
                        EXECUTE IMMEDIATE 'INSERT INTO ADS_WORKFLOW_TRIGGER(TRIGGER_NAME, TRIGGER_TITLE, DESCRIPTION, STATUS_TITLE)
                        SELECT ''ON_CREATE'', ''On Create'', ''On Create'', ''Draft'' FROM DUAL';
                    END;
                END IF;
        END;
    END IF;
END;
/
DECLARE
   ROWCHECKERFLAG INT;
   VERSIONCHECKER INT;
BEGIN
    SELECT COUNT(*) INTO VERSIONCHECKER FROM ADS_MM_VERSION WHERE VALUE < '9.2';
        IF VERSIONCHECKER = 1 THEN
        BEGIN
            EXECUTE IMMEDIATE 'SELECT count(*) FROM ADS_WORKFLOW_ACTION WHERE ACTION_NAME = ''PUBLISH''' INTO ROWCHECKERFLAG;
            IF ROWCHECKERFLAG = 0  AND VERSIONCHECKER = 1 THEN
            BEGIN
		EXECUTE IMMEDIATE 'INSERT INTO ADS_WORKFLOW_ACTION(ACTION_NAME, ACTION_TITLE, DESCRIPTION, STATUS_TITLE,MODULE_ID,ACTION_FILENAME, ACTION_METHOD)
		SELECT ''PUBLISH'',''Publish'',''Publish'',''Published'', MODULE_ID, ''MM_Actions.js'', ''onMapPublish'' FROM ADS_MODULES WHERE MODULE_NAME = ''Mapping Manager''
		UNION
		SELECT ''PUBLISH'',''Publish'',''Publish'',''Published'', MODULE_ID, ''SM_Actions.js'', ''onPublish'' FROM ADS_MODULES WHERE MODULE_NAME = ''Metadata Manager''
		UNION
		SELECT ''PUBLISH'',''Publish'',''Publish'',''Published'', MODULE_ID, ''BGM_Actions.js'', ''onBusinessTermPublish'' FROM ADS_MODULES WHERE MODULE_NAME = ''Business Glossary Manager''';
            END;
            END IF;
        END;
	END IF;
END;
/
DECLARE
   ROWCHECKERFLAG INT;
BEGIN
	SELECT count(*) INTO ROWCHECKERFLAG FROM RM_HISTORYTYPE WHERE HISTORYTYPENAME = 'ASSIGNMENT';
	IF ROWCHECKERFLAG = 0 THEN
		INSERT INTO RM_HISTORYTYPE (HISTORYTYPENAME, HISTORYTYPEDESC)
        (SELECT 'ASSIGNMENT', 'Assign Record' FROM DUAL);
	END IF;
END;
/
DECLARE
    VERSIONCHECKER INT;
    VIEW_CHECKER_FLAG INT;
BEGIN
    SELECT COUNT(*) INTO VERSIONCHECKER FROM ADS_MM_VERSION WHERE VALUE < '9.2';
    SELECT COUNT(*) INTO VIEW_CHECKER_FLAG FROM all_VIEWS WHERE OWNER = sys_context('userenv', 'current_schema') AND VIEW_NAME = UPPER('ADS_WORKFLOW_STATUS_V');
	IF VERSIONCHECKER = 1 THEN
        BEGIN
            IF VIEW_CHECKER_FLAG = 1 THEN
                BEGIN
                    EXECUTE IMMEDIATE 'DROP VIEW ADS_WORKFLOW_STATUS_V';
                END;
            END IF;
        EXECUTE IMMEDIATE 'CREATE OR REPLACE FORCE VIEW ADS_WORKFLOW_STATUS_V
        AS
        WITH objectstatus
        AS (SELECT AWN.node_id,
        AWN.node_type,
        awn.wfn_id,
        object_id, wf_id,
        object_type_id
        FROM ADS_WORKFLOW_NODE AWN
        JOIN ADS_WORKFLOW_STATUS AWS
        ON AWN.wfn_id = AWS.wfn_id
        )
        SELECT CASE
        WHEN node_type = ''A'' THEN (SELECT status_title
        FROM ADS_WORKFLOW_ACTION
        WHERE wfa_id = objectstatus.node_id)
        WHEN node_type = ''S'' THEN (SELECT status_title
        FROM ADS_WORKFLOW_STAGE
        WHERE wfs_id = objectstatus.node_id)
        WHEN node_type = ''T'' THEN (SELECT status_title
        FROM ADS_WORKFLOW_TRIGGER
        WHERE wft_id = objectstatus.node_id)
        ELSE ''''
        END AS STATUS_TITLE ,object_id,object_type_id,node_id,objectstatus.WF_ID,aw.WORKFLOW_NAME,
            objectstatus.wfn_id,objectstatus.node_type
        FROM objectstatus join ADS_WORKFLOW aw on objectstatus.WF_ID = aw.WF_ID';
        END;
	END IF;
END;
/
DECLARE
   COLUMNCHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO COLUMNCHECKERFLAG FROM ADS_MM_VERSION WHERE VALUE < '8.3';
   IF COLUMNCHECKERFLAG = 1 THEN
      EXECUTE IMMEDIATE 'DELETE FROM USER_PREFERENCES WHERE USER_ID LIKE ''%BGM_TERM_LAYOUT_VIEW%''';
   END IF;
END;
/
DECLARE
 VERSIONCHECKER INT;
BEGIN
SELECT COUNT(*) INTO VERSIONCHECKER FROM ADS_MM_VERSION WHERE VALUE < '9.2';
IF VERSIONCHECKER = 1 THEN
BEGIN
EXECUTE IMMEDIATE 'CREATE OR REPLACE
PROCEDURE WORKFLOW_INIT IS
ROWCHECKERFLAG INT;
TEMP_WFF_ID INT;
TEMP_WF_ID INT;
TEMP_MM_WF_ID INT;
TEMP_SM_WF_ID INT;
TEMP_TERM_COUNT INT;
TEMP_MAP_COUNT INT;
TEMP_BUS_TERM_ID INT;
TEMP_MAP_ID INT;
TEMP_IS_PUBLISHED VARCHAR2(100);
TEMP_WFG_ID INT;
TEMP_BLOB BLOB;
CURSOR term_cursor IS
SELECT bus_term_id FROM BUSINESS_TERMS WHERE publish = ''Y'' ORDER BY bus_term_id;
TYPE TYPE_TERM_ID IS TABLE OF BUSINESS_TERMS.bus_term_id%TYPE;
TEMP_TERM_IDS TYPE_TERM_ID;
inx1 PLS_INTEGER;

CURSOR map_cursor IS
SELECT MAP_ID FROM MAPPING_DETAILS WHERE ISPUBLISHED = ''Y'' ORDER BY MAP_ID;
TYPE TYPE_MAP_ID IS TABLE OF MAPPING_DETAILS.MAP_ID%TYPE;
TEMP_MAP_IDS TYPE_MAP_ID;
inx2 PLS_INTEGER;
BEGIN
SELECT count(*) INTO ROWCHECKERFLAG FROM ADS_WORKFLOW_FOLDER WHERE folder_name = ''DefaultFolder'';
IF ROWCHECKERFLAG = 0 THEN
BEGIN
INSERT INTO ADS_WORKFLOW_FOLDER (folder_name, description,folder_order)
VALUES (''DefaultFolder'',
        ''DefaultFolder'',
        1);
COMMIT;
SELECT wff_id INTO TEMP_WFF_ID FROM ADS_WORKFLOW_FOLDER WHERE folder_name = ''DefaultFolder'';
INSERT INTO RM_HISTORY(HISTORYTYPEID ,HISTORYDESC ,OBJECTID ,OBJECTTYPEID ,HISTORYDATESTAMP ,USER_ID)
	 VALUES
	   (1 , ''{"id": "'' || TEMP_WFF_ID || ''", "name": "DefaultFolder"}''
	   , TEMP_WFF_ID
	   ,(SELECT OBJECT_TYPE_ID from ADS_KEY_VALUE_OBJECTS where OBJECT_TYPE = ''ADS_WORKFLOW_FOLDER'')
	   ,sysdate,''Administrator''
	   );
COMMIT;
TEMP_BLOB := TO_BLOB(''89504E470D0A1A0A0000000D4948445200000100000001000802000000D3103F31000004F64944415478DAEDDBDB4A5C67188061AFA217D04BE971EFA0F40E7AD4C39EB40ADA26A45A444BC41D1A8C1B045395E0E0AE48DD55D16A1063D368DDA5064DAC4683A3D6F40B3F888426A54DA69DD1E761216BD68C4366E67BFF352393A217708515790A1000080004000200018000400020001000080004000200018000400020001000080004000200018000400020001000080004000200018000400020001000080004000200018000400020001000080004000200018000400020001000080004800040002000100008000400020001800040002000100008000400020001800040002000100008000400020001800040002000100008000400020001800040002000100008000400020001800040002000100008000400020001800040002000100002000180004000200010000800FEB9E59B9DBF7CD392B7DBF1EEBE00C895CCFB1FE6FFB675F70701F0EE2D7DD5501001C426805C393C3CDCDCDC7CF0E0C1DCDCDCF8F8F8F0F0702693E9E9E9E9EAEAEAE8E8B87DFB765353537D7D7D4D4D4D6565657979F9B56BD74A4B4BBF786B6565657187B5B5B5B76EDDEAECECECEDED1D1A1A1A1D1D9D9F9F8F7FCCFAFAFACECECEC1C1414E1FFBD4479F155800377F7DAFE261519E6F43DB9FE4F465DBDEDEBE7FFF7ECC4A7777776363E38D1B375E3764D7AF5FAFAAAA6A6868686F6F8F991E1C1C9C9E9E5E5C5C5C5D5D8D3B89D12F8844777777D7D6D6161616262727070606A2CCE6E6E68A8A8A929292D73DF048ABA5A5A5AFAF6F6A6A6A6B6BEBF4F4F4E21DDEB973A720035839BC9BFFD39FB67FF74AC78217A3393333D3DFDFDFD6D6565D5DFDB7AFEEF2F2F2DEDE9EF3D84567676771F6585A5A1A1B1B8B35229EC6BF4C656565A5C002187FFA79A104F0C78BE337BC42B19EC5FA1D23FECAE21DEF2EEAEAEA62851B191989052F962ED39C0BF154CFCECEBEFD19E0958FD147BFEDA43B9CFFF4EB27A33F1DFCBC7A7EFC8A06B0B1B1313131116FA02FAE40C5C5C5ADADAD31E2B17867B359E3F81F8B7780EFEA33404C760CFAF2B71DB17F963D898B2FCF3FD99314C0467B26F6D3F1F4F30A0530363E1A9F1AE3835DAC34474747C62E3FBD7D00F133DDC9F988C7DC3FCE8CA7005E2E82ED9974FCF4D9736F81B88401A40662BEE3E2C3CAD678E713E78414409AFBFF2D80CE471F3C395E483B3FEE7E991E73BAEADE7EDDC4D392B49F3DDB8F8BCF4E37E2DAB8655C8C9D74317E3DB63822000114DE87E018F198ECB43FBF773346F9FC48ECC7ACA7AB62D6E3787A46520CE960DCA6EFF1C7E9F8792D02104021FD15282DF9ABCF0762942F069056FA748A88598F9DF819B7892DEDA400D2F9E1F79387CE0002F067500108400002B8440AECBB4002E09D2B88E97FF4DDF70220570AE6FF035CFAEF02C11BF83628573E80706FBF36DE0BE5EDF6E478D14B450E0300018000400020001000080004000200018000400020001000080004000200018000400020001000080004000200018000400020001000080004000200018000400020001000080004000200018000400020001000080004000200018000100008000400020001800040002000100008000400020001800040002000100008000400020001800040002000100008000400020001800040002000100008000400020001800040002000100008000400020001800040002000100008000480003C050800040002000180004000200010000800040002000180004000200010000800040002000180004000905FFE040AD43A07BE8E10E50000000049454E44AE426082'');
INSERT INTO ADS_WORKFLOW (workflow_name, wff_id, module_id, description, systembased, thumbnail)
VALUES (''Business_Glossary_Default_Workflow'',
        TEMP_WFF_ID,
          (SELECT module_id
           FROM ads_modules
           WHERE module_name = ''Business Glossary Manager'' ), ''Business_Glossary_Default_Workflow'',
                                                              1,TEMP_BLOB);
COMMIT;
SELECT wf_id INTO TEMP_WF_ID FROM ADS_WORKFLOW WHERE workflow_name = ''Business_Glossary_Default_Workflow'';
INSERT INTO RM_HISTORY(HISTORYTYPEID ,HISTORYDESC ,OBJECTID ,OBJECTTYPEID ,HISTORYDATESTAMP ,USER_ID)
	 VALUES
	   (1 , ''{"id": "'' || TEMP_WF_ID || ''", "name": "Business_Glossary_Default_Workflow"}''
	   , TEMP_WF_ID
	   ,(SELECT OBJECT_TYPE_ID from ADS_KEY_VALUE_OBJECTS where OBJECT_TYPE = ''ADS_WORKFLOW'')
	   ,sysdate,''Administrator''
	   );
COMMIT;
INSERT INTO ADS_WORKFLOW (workflow_name, wff_id, module_id, description, systembased, thumbnail)
VALUES (''Mapping_Manager_Default_Workflow'',
        TEMP_WFF_ID,
          (SELECT module_id
           FROM ads_modules
           WHERE module_name = ''Mapping Manager'' ), ''Mapping_Manager_Default_Workflow'',
                                                              1,TEMP_BLOB);
COMMIT;
SELECT wf_id INTO TEMP_MM_WF_ID FROM ADS_WORKFLOW WHERE workflow_name = ''Mapping_Manager_Default_Workflow'';
INSERT INTO RM_HISTORY(HISTORYTYPEID ,HISTORYDESC ,OBJECTID ,OBJECTTYPEID ,HISTORYDATESTAMP ,USER_ID)
	 VALUES
	   (1 , ''{"id": "'' || TEMP_SM_WF_ID || ''", "name": "Metadata_Manager_Default_Workflow"}''
	   , TEMP_MM_WF_ID
	   ,(SELECT OBJECT_TYPE_ID from ADS_KEY_VALUE_OBJECTS where OBJECT_TYPE = ''ADS_WORKFLOW'')
	   ,sysdate,''Administrator''
	   );
COMMIT;

INSERT INTO ADS_WORKFLOW (workflow_name, wff_id, module_id, description, systembased, thumbnail)
VALUES (''Metadata_Manager_Default_Workflow'',
        TEMP_WFF_ID,
          (SELECT module_id
           FROM ads_modules
           WHERE module_name = ''Metadata Manager'' ), ''Metadata_Manager_Default_Workflow'',
                                                              1,TEMP_BLOB);

SELECT wf_id INTO TEMP_SM_WF_ID FROM ADS_WORKFLOW WHERE workflow_name = ''Metadata_Manager_Default_Workflow'';

INSERT INTO RM_HISTORY(HISTORYTYPEID ,HISTORYDESC ,OBJECTID ,OBJECTTYPEID ,HISTORYDATESTAMP ,USER_ID)
	 VALUES
	   (1 , ''{"id": "''|| TEMP_SM_WF_ID || ''", "name": "Metadata_Manager_Default_Workflow"}''
	   , TEMP_SM_WF_ID
	   ,(SELECT OBJECT_TYPE_ID from ADS_KEY_VALUE_OBJECTS where OBJECT_TYPE = ''ADS_WORKFLOW'')
	   ,CURRENT_TIMESTAMP,''Administrator''
	   );
COMMIT;
INSERT INTO ADS_WORKFLOW_ASSIGNMENT(WF_ID, OBJECT_ID, OBJECT_TYPE_ID)
	VALUES(TEMP_WF_ID, -1, (SELECT OBJECT_TYPE_ID from ADS_KEY_VALUE_OBJECTS where OBJECT_TYPE = ''BGM_TERM_CATALOG''));
COMMIT;
SELECT WFG_ID INTO TEMP_WFG_ID FROM ADS_WORKFLOW_ASSIGNMENT WHERE OBJECT_ID = -1 AND OBJECT_TYPE_ID = (SELECT OBJECT_TYPE_ID from ADS_KEY_VALUE_OBJECTS where OBJECT_TYPE = ''BGM_TERM_CATALOG'');
INSERT INTO ADS_WORKFLOW_ASGMNT_TRIGGER(WFG_ID, OBJECT_TYPE_ID, OBJECT_ID) VALUES
	(TEMP_WFG_ID, (SELECT OBJECT_TYPE_ID from ADS_KEY_VALUE_OBJECTS where OBJECT_TYPE = ''BGM_TERM''),-1);
COMMIT;
INSERT INTO ADS_WORKFLOW_ASSIGNMENT(WF_ID, OBJECT_ID, OBJECT_TYPE_ID)
	VALUES(TEMP_MM_WF_ID, -1, (SELECT OBJECT_TYPE_ID from ADS_KEY_VALUE_OBJECTS where OBJECT_TYPE = ''MM_PROJECT''));
COMMIT;
SELECT WFG_ID INTO TEMP_WFG_ID FROM ADS_WORKFLOW_ASSIGNMENT WHERE OBJECT_ID = -1 AND OBJECT_TYPE_ID = (SELECT OBJECT_TYPE_ID from ADS_KEY_VALUE_OBJECTS where OBJECT_TYPE = ''MM_PROJECT'');
INSERT INTO ADS_WORKFLOW_ASGMNT_TRIGGER(WFG_ID, OBJECT_TYPE_ID, OBJECT_ID) VALUES
	(TEMP_WFG_ID, (SELECT OBJECT_TYPE_ID from ADS_KEY_VALUE_OBJECTS where OBJECT_TYPE = ''MM_MAPPING''),-1);
COMMIT;
INSERT INTO ADS_WORKFLOW_ASSIGNMENT(WF_ID, OBJECT_ID, OBJECT_TYPE_ID)
	VALUES(TEMP_SM_WF_ID, -1, (SELECT OBJECT_TYPE_ID from ADS_KEY_VALUE_OBJECTS where OBJECT_TYPE = ''SM_ENVIRONMENT''));
COMMIT;
SELECT WFG_ID INTO TEMP_WFG_ID FROM ADS_WORKFLOW_ASSIGNMENT WHERE OBJECT_ID = -1 AND OBJECT_TYPE_ID = (SELECT OBJECT_TYPE_ID from ADS_KEY_VALUE_OBJECTS where OBJECT_TYPE = ''SM_ENVIRONMENT'');
INSERT INTO ADS_WORKFLOW_ASGMNT_TRIGGER(WFG_ID, OBJECT_TYPE_ID, OBJECT_ID) VALUES
	(TEMP_WFG_ID, (SELECT OBJECT_TYPE_ID from ADS_KEY_VALUE_OBJECTS where OBJECT_TYPE = ''SM_TABLE''),-1);
COMMIT;
INSERT INTO ADS_WORKFLOW_ASGMNT_TRIGGER(WFG_ID, OBJECT_TYPE_ID, OBJECT_ID) VALUES
	(TEMP_WFG_ID, (SELECT OBJECT_TYPE_ID from ADS_KEY_VALUE_OBJECTS where OBJECT_TYPE = ''SM_COLUMN''),-1);
COMMIT;
INSERT INTO ADS_WORKFLOW_NODE (wf_id, node_type, node_id, ui_properties)
VALUES (TEMP_WF_ID,
        ''T'',
          (SELECT wft_id
           FROM ADS_WORKFLOW_TRIGGER
           WHERE TRIGGER_NAME =''ON_CREATE'' ), ''{"loc":"-137.74667103844354 100.49684550208363","fill":"#8FDD00"}'' );
COMMIT;
INSERT INTO ADS_WORKFLOW_NODE (wf_id, node_type, node_id, ui_properties)
VALUES (TEMP_WF_ID,
        ''A'',
          (SELECT wfa_id
           FROM ADS_WORKFLOW_ACTION
           WHERE action_name =''PUBLISH''
             AND MODULE_ID =
               (SELECT module_id
                FROM ads_modules
                WHERE module_name = ''Business Glossary Manager'' ) ), ''{"loc":"269.0133972240249 99.49684550208343","fromLinkable":false,"fill":"#B9224C","toLinkable":true}'');
COMMIT;
INSERT INTO ADS_WORKFLOW_NODE (wf_id, node_type, node_id, ui_properties)
VALUES (TEMP_MM_WF_ID,
        ''T'',
          (SELECT wft_id
           FROM ADS_WORKFLOW_TRIGGER
           WHERE TRIGGER_NAME =''ON_CREATE'' ), ''{"loc":"-137.74667103844354 100.49684550208363","fill":"#8FDD00"}'' );
COMMIT;
INSERT INTO ADS_WORKFLOW_NODE (wf_id, node_type, node_id, ui_properties)
VALUES (TEMP_MM_WF_ID,
        ''A'',
          (SELECT wfa_id
           FROM ADS_WORKFLOW_ACTION
           WHERE action_name =''PUBLISH''
             AND MODULE_ID =
               (SELECT module_id
                FROM ads_modules
                WHERE module_name = ''Mapping Manager'' ) ), ''{"loc":"269.0133972240249 99.49684550208343","fromLinkable":false,"fill":"#B9224C","toLinkable":true}'');
COMMIT;
INSERT INTO ADS_WORKFLOW_NODE (wf_id, node_type, node_id, ui_properties)
VALUES (TEMP_SM_WF_ID,
        ''T'',
          (SELECT wft_id
           FROM ADS_WORKFLOW_TRIGGER
           WHERE TRIGGER_NAME =''ON_CREATE'' ), ''{"loc":"-137.74667103844354 100.49684550208363","fill":"#8FDD00"}'' );
COMMIT;
INSERT INTO ADS_WORKFLOW_NODE (wf_id, node_type, node_id, ui_properties)
VALUES (TEMP_SM_WF_ID,
        ''A'',
          (SELECT wfa_id
           FROM ads_workflow_action
           WHERE action_name =''PUBLISH''
             AND MODULE_ID =
               (SELECT module_id
                FROM ads_modules
                WHERE module_name = ''Metadata Manager'' ) ), ''{"loc":"269.0133972240249 99.49684550208343","fromLinkable":false,"fill":"#B9224C","toLinkable":true}'');
COMMIT;
INSERT INTO ADS_WORKFLOW_NODE_CON (source_wfn_id, target_wfn_id, ui_properties)
VALUES (
          (SELECT wfn_id
           FROM ADS_WORKFLOW_NODE
           WHERE wf_id = TEMP_WF_ID
             AND node_type=''T''
             AND node_id =
               (SELECT wft_id
                FROM ADS_WORKFLOW_TRIGGER
                WHERE TRIGGER_NAME =''ON_CREATE'' ) ) ,
          (SELECT wfn_id
           FROM ADS_WORKFLOW_NODE
           WHERE wf_id = TEMP_WF_ID
             AND node_type=''A''
             AND node_id =
               (SELECT wfa_id
                FROM ADS_WORKFLOW_ACTION
                WHERE action_name =''PUBLISH''
                  AND MODULE_ID =
                    (SELECT module_id
                     FROM ads_modules
                     WHERE module_name = ''Business Glossary Manager'' ) ) ),''{"controls":[14.634016102984326,84.12217658392561,116.55403986446669,83.87161112356547]}'');
COMMIT;
INSERT INTO ADS_WORKFLOW_NODE_CON (source_wfn_id, target_wfn_id, ui_properties)
VALUES (
          (SELECT wfn_id
           FROM ADS_WORKFLOW_NODE
           WHERE wf_id = TEMP_MM_WF_ID
             AND node_type=''T''
             AND node_id =
               (SELECT wft_id
                FROM ADS_WORKFLOW_TRIGGER
                WHERE TRIGGER_NAME =''ON_CREATE'' ) ) ,
          (SELECT wfn_id
           FROM ADS_WORKFLOW_NODE
           WHERE wf_id = TEMP_MM_WF_ID
             AND node_type=''A''
             AND node_id =
               (SELECT wfa_id
                FROM ADS_WORKFLOW_ACTION
                WHERE action_name =''PUBLISH''
                  AND MODULE_ID =
                    (SELECT module_id
                     FROM ads_modules
                     WHERE module_name = ''Mapping Manager'' ) ) ),''{"controls":[14.634016102984326,84.12217658392561,116.55403986446669,83.87161112356547]}'');
COMMIT;
INSERT INTO ADS_WORKFLOW_NODE_CON (source_wfn_id, target_wfn_id, ui_properties)
VALUES (
          (SELECT wfn_id
           FROM ADS_WORKFLOW_NODE
           WHERE wf_id = TEMP_SM_WF_ID
             AND node_type=''T''
             AND node_id =
               (SELECT wft_id
                FROM ADS_WORKFLOW_TRIGGER
                WHERE TRIGGER_NAME =''ON_CREATE'' ) ) ,
          (SELECT wfn_id
           FROM ADS_WORKFLOW_NODE
           WHERE wf_id = TEMP_SM_WF_ID
             AND node_type=''A''
             AND node_id =
               (SELECT wfa_id
                FROM ADS_WORKFLOW_ACTION
                WHERE action_name =''PUBLISH''
                  AND MODULE_ID =
                    (SELECT module_id
                     FROM ads_modules
                     WHERE module_name = ''Metadata Manager'' ) ) ),''{"controls":[14.634016102984326,84.12217658392561,116.55403986446669,83.87161112356547]}'');
COMMIT;

OPEN term_cursor;
FETCH term_cursor BULK COLLECT INTO TEMP_TERM_IDS;
CLOSE term_cursor;

FOR inx1 IN 1..TEMP_TERM_IDS.count
LOOP
TEMP_BUS_TERM_ID := TEMP_TERM_IDS(inx1);

INSERT INTO ADS_WORKFLOW_STATUS ( object_id, object_type_id, wfn_id )
VALUES ( TEMP_BUS_TERM_ID,
          (SELECT object_type_id
           FROM ads_key_value_objects
           WHERE object_type =''BGM_TERM'' ),
          (SELECT wfn_id
           FROM ADS_WORKFLOW_NODE
           WHERE wf_id = TEMP_WF_ID
             AND node_type=''A''
             AND node_id =
               (SELECT wfa_id
                FROM ADS_WORKFLOW_ACTION
                WHERE action_name =''PUBLISH''
                  AND module_id =
                    (SELECT module_id
                     FROM ads_modules
                     WHERE module_name = ''Business Glossary Manager'' ) ) ) );
INSERT INTO RM_HISTORY(HISTORYTYPEID ,HISTORYDESC ,OBJECTID ,OBJECTTYPEID ,HISTORYDATESTAMP ,USER_ID)
	 VALUES
		   (6 , ''Published''
		   , TEMP_BUS_TERM_ID
		   ,(SELECT OBJECT_TYPE_ID from ADS_KEY_VALUE_OBJECTS where OBJECT_TYPE = ''BGM_TERM'')
		   ,sysdate,''Administrator''
		   );
END LOOP;

OPEN map_cursor;
FETCH map_cursor BULK COLLECT INTO TEMP_MAP_IDS;
CLOSE map_cursor;

FOR inx2 IN 1..TEMP_MAP_IDS.count
LOOP
TEMP_MAP_ID := TEMP_MAP_IDS(inx2);
INSERT INTO ADS_WORKFLOW_STATUS ( object_id, object_type_id, wfn_id )
VALUES ( TEMP_MAP_ID,
          (SELECT object_type_id
           FROM ads_key_value_objects
           WHERE object_type =''MM_MAPPING''),
          (SELECT wfn_id
           FROM ADS_WORKFLOW_NODE
           WHERE wf_id = TEMP_MM_WF_ID
             AND node_type=''A''
             AND node_id =
               (SELECT wfa_id
                FROM ADS_WORKFLOW_ACTION
                WHERE action_name =''PUBLISH''
                  AND module_id =
                    (SELECT module_id
                     FROM ads_modules
                     WHERE module_name = ''Mapping Manager'' ) ) ) );
        INSERT INTO RM_HISTORY(HISTORYTYPEID ,HISTORYDESC ,OBJECTID ,OBJECTTYPEID ,HISTORYDATESTAMP ,USER_ID)
                 VALUES
		   (6 , ''Published''
		   , TEMP_MAP_ID
		   ,(SELECT OBJECT_TYPE_ID from ADS_KEY_VALUE_OBJECTS where OBJECT_TYPE = ''MM_MAPPING'')
		   ,sysdate,''Administrator''
		   );
        END LOOP;
        END;
        END IF;
        END WORKFLOW_INIT;';
END;
END IF;
END;
/
DECLARE
   PROCEDURECHECKER INT;
BEGIN
    SELECT COUNT(*) INTO PROCEDURECHECKER FROM USER_PROCEDURES WHERE OBJECT_TYPE = 'PROCEDURE' AND OBJECT_NAME = 'WORKFLOW_INIT';
    IF PROCEDURECHECKER = 1 THEN
        BEGIN
            EXECUTE IMMEDIATE 'call  WORKFLOW_INIT()';
            EXECUTE IMMEDIATE 'DROP PROCEDURE WORKFLOW_INIT';
        END;
    END IF;
END;
/
DECLARE
   TABLECHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO TABLECHECKERFLAG FROM "APP_PREFERENCES" WHERE PREFERENCE_NAME ='SEND_EMAIL_ON_WORKFLOW_STATUS_UPDATE_SUBJECT';
   IF TABLECHECKERFLAG = 0 THEN
    INSERT INTO APP_PREFERENCES(PREFERENCE_NAME,PREFERENCE_VALUE) VALUES ('SEND_EMAIL_ON_WORKFLOW_STATUS_UPDATE_SUBJECT','Workflow Notification - DO NOT REPLY');
    INSERT INTO APP_PREFERENCES(PREFERENCE_NAME,PREFERENCE_VALUE) VALUES ('SEND_EMAIL_ON_WORKFLOW_STATUS_UPDATE_MESSAGE',
     'Hello,<br><br>
     This is to notify you about status change for the following.<br><br>
     <b>@objectName@</b>
     </br><br>
     <table border = 1>
     <tr><th colspan = 2><b>Details</b></th></tr>
     <tr>
     <td>Object Name :</td>
     <td>@objectName@</td>
     </tr>
     <tr>
     <td>Object Parent : </td>
     <td>@objectParent@</td>
     </tr>
     <tr><th colspan = 2><b>Status Change</b></th></tr>
     <tr>
     <td>From :</td>
     <td>@fromStage@</td>
     </tr>
     <tr>
     <td>To :</td>
     <td>@toStage@</td>
     </tr>

     <tr><th colspan = 2><b>Audit Details</b></th></tr>
     <tr>
     <td>Created By :</td>
     <td>@createdBy@</td>
     </tr>
     <tr>
     <td>Created Date :</td>
     <td>@createdDate@</td>
     </tr>
     <tr>
     <td>Status Updated By :</td>
     <td>@statusUpdatedBy@</td>
     </tr>
     <tr>
     <td>Status Updated Date :</td>
     <td>@statusUpdatedDate@</td>
     </tr>
     </table>
     <BR><BR>@objectName@
     <BR><BR><I><font color =red>Note</font>: This is an auto generated email notification and this mailbox is not monitored.<BR>Please do not reply to this email.</I>');
    END IF;
END;
/
DECLARE
   COLUMNCHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO COLUMNCHECKERFLAG FROM ALL_TAB_COLUMNS WHERE  OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME = UPPER('ADS_KEY_VALUE') AND COLUMN_NAME=UPPER('VISIBLE');
   IF COLUMNCHECKERFLAG = 0 THEN
        EXECUTE IMMEDIATE 'ALTER TABLE ADS_KEY_VALUE ADD VISIBLE NUMBER(3) DEFAULT 1';
        EXECUTE IMMEDIATE 'ALTER TABLE ADS_KEY_VALUE ADD LOAD_ON_STARTUP NUMBER(3) DEFAULT 0';
        EXECUTE IMMEDIATE 'UPDATE ADS_KEY_VALUE SET VISIBLE = 1';
   END IF;
END;
/
DECLARE
   COLUMNCHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO COLUMNCHECKERFLAG FROM ALL_TAB_COLUMNS WHERE  OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME = UPPER('ADS_KEY_VALUE_OBJECTS') AND COLUMN_NAME=UPPER('OBJECT_LEVEL');
   IF COLUMNCHECKERFLAG = 0 THEN
        EXECUTE IMMEDIATE 'ALTER TABLE ADS_KEY_VALUE_OBJECTS ADD OBJECT_LEVEL INT DEFAULT 1';
        EXECUTE IMMEDIATE 'ALTER TABLE ADS_KEY_VALUE_OBJECTS ADD MODULE_KEY VARCHAR(255)';
        EXECUTE IMMEDIATE 'UPDATE ADS_KEY_VALUE_OBJECTS SET MODULE_KEY = ''com.ads.mm.permission.sm'', OBJECT_LEVEL = 1 WHERE OBJECT_TYPE = ''SM_SYSTEM''';
        EXECUTE IMMEDIATE 'UPDATE ADS_KEY_VALUE_OBJECTS SET MODULE_KEY = ''com.ads.mm.permission.sm'', OBJECT_LEVEL = 2 WHERE OBJECT_TYPE = ''SM_ENVIRONMENT''';
        EXECUTE IMMEDIATE 'UPDATE ADS_KEY_VALUE_OBJECTS SET MODULE_KEY = ''com.ads.mm.permission.sm'', OBJECT_LEVEL = 3 WHERE OBJECT_TYPE = ''SM_TABLE''';
        EXECUTE IMMEDIATE 'UPDATE ADS_KEY_VALUE_OBJECTS SET MODULE_KEY = ''com.ads.mm.permission.sm'', OBJECT_LEVEL = 4 WHERE OBJECT_TYPE = ''SM_COLUMN''';
        EXECUTE IMMEDIATE 'UPDATE ADS_KEY_VALUE_OBJECTS SET MODULE_KEY = ''com.ads.mm.permission.sm'', OBJECT_LEVEL = 1 WHERE OBJECT_TYPE = ''SM_COMPONENT''';
        EXECUTE IMMEDIATE 'UPDATE ADS_KEY_VALUE_OBJECTS SET MODULE_KEY = ''com.ads.mm.permission.mm'', OBJECT_LEVEL = 1 WHERE OBJECT_TYPE = ''MM_PROJECT''';
        EXECUTE IMMEDIATE 'UPDATE ADS_KEY_VALUE_OBJECTS SET MODULE_KEY = ''com.ads.mm.permission.mm'', OBJECT_LEVEL = 2 WHERE OBJECT_TYPE = ''MM_SUBJECT''';
        EXECUTE IMMEDIATE 'UPDATE ADS_KEY_VALUE_OBJECTS SET MODULE_KEY = ''com.ads.mm.permission.mm'', OBJECT_LEVEL = 3 WHERE OBJECT_TYPE = ''MM_MAPPING''';
        EXECUTE IMMEDIATE 'UPDATE ADS_KEY_VALUE_OBJECTS SET MODULE_KEY = ''com.ads.mm.permission.mm'', OBJECT_LEVEL = 4 WHERE OBJECT_TYPE = ''MM_MAPPING_ROW''';
        EXECUTE IMMEDIATE 'UPDATE ADS_KEY_VALUE_OBJECTS SET MODULE_KEY = ''com.ads.mm.permission.generic'', OBJECT_LEVEL = 1 WHERE OBJECT_TYPE = ''MT_DEFINITION''';
        EXECUTE IMMEDIATE 'UPDATE ADS_KEY_VALUE_OBJECTS SET MODULE_KEY = ''com.ads.mm.permission.generic'', OBJECT_LEVEL = 1 WHERE OBJECT_TYPE = ''MT_DEFINITION_VALUE''';
        EXECUTE IMMEDIATE 'UPDATE ADS_KEY_VALUE_OBJECTS SET MODULE_KEY = ''com.ads.mm.permission.generic'', OBJECT_LEVEL = 1 WHERE OBJECT_TYPE = ''ADS_KEY_VALUE''';
        EXECUTE IMMEDIATE 'UPDATE ADS_KEY_VALUE_OBJECTS SET MODULE_KEY = ''com.ads.mm.permission.rqm'', OBJECT_LEVEL = 1 WHERE OBJECT_TYPE = ''REQM_PROJECT''';
        EXECUTE IMMEDIATE 'UPDATE ADS_KEY_VALUE_OBJECTS SET MODULE_KEY = ''com.ads.mm.permission.rqm'', OBJECT_LEVEL = 2 WHERE OBJECT_TYPE = ''REQM_SUBJECT''';
        EXECUTE IMMEDIATE 'UPDATE ADS_KEY_VALUE_OBJECTS SET MODULE_KEY = ''com.ads.mm.permission.rqm'', OBJECT_PARENT_TYPE = ''REQM_SUBJECT'', OBJECT_PARENT_COLUMN_ID = ''SUBJECT_ID'', OBJECT_LEVEL = 3 WHERE OBJECT_TYPE = ''REQM_SPECIFICATION''';
        EXECUTE IMMEDIATE 'UPDATE ADS_KEY_VALUE_OBJECTS SET MODULE_KEY = ''com.ads.mm.permission.rqm'', OBJECT_LEVEL = 1 WHERE OBJECT_TYPE = ''REQM_SPECIFICATION_TEMPLATE''';
        EXECUTE IMMEDIATE 'UPDATE ADS_KEY_VALUE_OBJECTS SET MODULE_KEY = ''com.ads.mm.permission.rqm'', OBJECT_PARENT_TYPE = ''REQM_SPECIFICATION_TEMPLATE'', OBJECT_PARENT_COLUMN_ID = ''SPEC_TEMPLATE_ID'', OBJECT_LEVEL = 2 WHERE OBJECT_TYPE = ''REQM_ARTIFACT''';
        EXECUTE IMMEDIATE 'UPDATE ADS_KEY_VALUE_OBJECTS SET MODULE_KEY = ''com.ads.mm.permission.rqm'', OBJECT_PARENT_TYPE = ''REQM_SPECIFICATION'', OBJECT_PARENT_COLUMN_ID = ''SPEC_ID'', OBJECT_LEVEL = 4 WHERE OBJECT_TYPE = ''REQM_SPECIFICATION_ARTIFACT''';
        EXECUTE IMMEDIATE 'UPDATE ADS_KEY_VALUE_OBJECTS SET MODULE_KEY = ''com.ads.mm.permission.mm'', OBJECT_LEVEL = 1 WHERE OBJECT_TYPE = ''MM_GRAPHICAL_PROPERTIES''';
        EXECUTE IMMEDIATE 'UPDATE ADS_KEY_VALUE_OBJECTS SET MODULE_KEY = ''com.ads.mm.permission.rpm'', OBJECT_PARENT_TYPE = ''REPM_CATEGORY'', OBJECT_PARENT_COLUMN_ID = ''CATEGORY_ID'', OBJECT_LEVEL = 2 WHERE OBJECT_TYPE = ''REPM_REPORT''';
        EXECUTE IMMEDIATE 'UPDATE ADS_KEY_VALUE_OBJECTS SET MODULE_KEY = ''com.ads.mm.permission.rpm'', OBJECT_PARENT_TYPE = ''REPM_CATEGORY'', OBJECT_PARENT_COLUMN_ID = ''CATEGORY_ID'', OBJECT_LEVEL = 2 WHERE OBJECT_TYPE = ''REPM_CHART''';
        EXECUTE IMMEDIATE 'UPDATE ADS_KEY_VALUE_OBJECTS SET MODULE_KEY = ''com.ads.mm.permission.generic'', OBJECT_LEVEL = 1 WHERE OBJECT_TYPE = ''ADS_USER''';
        EXECUTE IMMEDIATE 'UPDATE ADS_KEY_VALUE_OBJECTS SET MODULE_KEY = ''com.ads.mm.permission.generic'', OBJECT_LEVEL = 1 WHERE OBJECT_TYPE = ''ADS_PROFILE''';
        EXECUTE IMMEDIATE 'UPDATE ADS_KEY_VALUE_OBJECTS SET MODULE_KEY = ''com.ads.mm.permission.rpm'', OBJECT_LEVEL = 1 WHERE OBJECT_TYPE = ''REPM_CATEGORY''';
        EXECUTE IMMEDIATE 'UPDATE ADS_KEY_VALUE_OBJECTS SET MODULE_KEY = ''com.ads.mm.permission.rpm'', OBJECT_PARENT_TYPE = ''REPM_CATEGORY'', OBJECT_PARENT_COLUMN_ID = ''CATEGORY_ID'', OBJECT_LEVEL = 2 WHERE OBJECT_TYPE = ''REPM_DASHBOARD''';
        EXECUTE IMMEDIATE 'UPDATE ADS_KEY_VALUE_OBJECTS SET MODULE_KEY = ''com.ads.mm.permission.bgm'', OBJECT_LEVEL = 1 WHERE OBJECT_TYPE = ''BGM_CATEGORY''';
        EXECUTE IMMEDIATE 'UPDATE ADS_KEY_VALUE_OBJECTS SET MODULE_KEY = ''com.ads.mm.permission.bgm'', OBJECT_LEVEL = 2 WHERE OBJECT_TYPE = ''BGM_TERM''';
        EXECUTE IMMEDIATE 'UPDATE ADS_KEY_VALUE_OBJECTS SET MODULE_KEY = ''com.ads.mm.permission.sm'', OBJECT_LEVEL = 1 WHERE OBJECT_TYPE = ''SM_DATABASE_OPTIONS''';
        EXECUTE IMMEDIATE 'UPDATE ADS_KEY_VALUE_OBJECTS SET MODULE_KEY = ''com.ads.mm.permission.rqm'', OBJECT_LEVEL = 1 WHERE OBJECT_TYPE = ''REQM_EMAIL_TEMPLATE''';
        EXECUTE IMMEDIATE 'UPDATE ADS_KEY_VALUE_OBJECTS SET MODULE_KEY = ''com.ads.mm.permission.generic'', OBJECT_LEVEL = 1 WHERE OBJECT_TYPE = ''ADS_MAIL_CMD''';
        EXECUTE IMMEDIATE 'UPDATE ADS_KEY_VALUE_OBJECTS SET MODULE_KEY = ''com.ads.mm.permission.tm'', OBJECT_LEVEL = 1 WHERE OBJECT_TYPE = ''TESTCASE_PLAN''';
        EXECUTE IMMEDIATE 'UPDATE ADS_KEY_VALUE_OBJECTS SET MODULE_KEY = ''com.ads.mm.permission.cat'', OBJECT_LEVEL = 1 WHERE OBJECT_TYPE = ''CAT''';
        EXECUTE IMMEDIATE 'UPDATE ADS_KEY_VALUE_OBJECTS SET MODULE_KEY = ''com.ads.mm.permission.cat'', OBJECT_LEVEL = 1 WHERE OBJECT_TYPE = ''CATFX_WORKFLOW''';
        EXECUTE IMMEDIATE 'UPDATE ADS_KEY_VALUE_OBJECTS SET MODULE_KEY = ''com.ads.mm.permission.bgm'', OBJECT_LEVEL = 2, OBJECT_PARENT_TYPE = ''BGM_CATEGORY'', OBJECT_PARENT_COLUMN_ID = ''CATEGORY_ID'' WHERE OBJECT_TYPE = ''BGM_RULE''';
        EXECUTE IMMEDIATE 'UPDATE ADS_KEY_VALUE_OBJECTS SET MODULE_KEY = ''com.ads.mm.permission.bgm'', OBJECT_LEVEL = 2, OBJECT_PARENT_TYPE = ''BGM_CATEGORY'', OBJECT_PARENT_COLUMN_ID = ''CATEGORY_ID'' WHERE OBJECT_TYPE = ''BGM_POLICY''';
        EXECUTE IMMEDIATE 'UPDATE ADS_KEY_VALUE_OBJECTS SET MODULE_KEY = ''com.ads.mm.permission.generic'', OBJECT_LEVEL = 1 WHERE OBJECT_TYPE = ''TAG''';
        EXECUTE IMMEDIATE 'UPDATE ADS_KEY_VALUE_OBJECTS SET MODULE_KEY = ''com.ads.mm.permission.bgm'', OBJECT_LEVEL = 1 WHERE OBJECT_TYPE = ''BGM_STEWARDSHIP_GOALS''';
        EXECUTE IMMEDIATE 'UPDATE ADS_KEY_VALUE_OBJECTS SET MODULE_KEY = ''com.ads.mm.permission.csm'', OBJECT_LEVEL = 1 WHERE OBJECT_TYPE = ''CSM_CODE_VALUE''';
        EXECUTE IMMEDIATE 'UPDATE ADS_KEY_VALUE_OBJECTS SET MODULE_KEY = ''com.ads.mm.permission.sm'', OBJECT_LEVEL = 1 WHERE OBJECT_TYPE = ''SM_INDEX''';
        EXECUTE IMMEDIATE 'UPDATE ADS_KEY_VALUE_OBJECTS SET MODULE_KEY = ''com.ads.mm.permission.bgm'', OBJECT_LEVEL = 1 WHERE OBJECT_TYPE = ''BGM_TERM_CATALOG''';
        EXECUTE IMMEDIATE 'UPDATE ADS_KEY_VALUE_OBJECTS SET MODULE_KEY = ''com.ads.mm.permission.bgm'', OBJECT_LEVEL = 1 WHERE OBJECT_TYPE = ''BGM_POLICY_CATALOG''';
        EXECUTE IMMEDIATE 'UPDATE ADS_KEY_VALUE_OBJECTS SET MODULE_KEY = ''com.ads.mm.permission.bgm'', OBJECT_LEVEL = 1 WHERE OBJECT_TYPE = ''BGM_RULE_CATALOG''';
        EXECUTE IMMEDIATE 'UPDATE ADS_KEY_VALUE_OBJECTS SET MODULE_KEY = ''com.ads.mm.permission.generic'', OBJECT_LEVEL = 1 WHERE OBJECT_TYPE = ''AMM_LICENSE''';
        EXECUTE IMMEDIATE 'UPDATE ADS_KEY_VALUE_OBJECTS SET MODULE_KEY = ''com.ads.mm.permission.generic'', OBJECT_LEVEL = 1 WHERE OBJECT_TYPE = ''FORM''';
        EXECUTE IMMEDIATE 'UPDATE ADS_KEY_VALUE_OBJECTS SET MODULE_KEY = ''com.ads.mm.permission.workflow'', OBJECT_LEVEL = 1 WHERE OBJECT_TYPE = ''ADS_WORKFLOW_STAGE''';
        EXECUTE IMMEDIATE 'UPDATE ADS_KEY_VALUE_OBJECTS SET MODULE_KEY = ''com.ads.mm.permission.workflow'', OBJECT_LEVEL = 1 WHERE OBJECT_TYPE = ''ADS_WORKFLOW_FOLDER''';
        EXECUTE IMMEDIATE 'UPDATE ADS_KEY_VALUE_OBJECTS SET MODULE_KEY = ''com.ads.mm.permission.workflow'', OBJECT_PARENT_TYPE = ''ADS_WORKFLOW'', OBJECT_PARENT_COLUMN_ID = ''WF_ID'', OBJECT_LEVEL = 3 WHERE OBJECT_TYPE = ''ADS_WORKFLOW_ASSIGNMENT''';
        EXECUTE IMMEDIATE 'UPDATE ADS_KEY_VALUE_OBJECTS SET MODULE_KEY = ''com.ads.mm.permission.workflow'', OBJECT_PARENT_TYPE = ''ADS_WORKFLOW_FOLDER'', OBJECT_PARENT_COLUMN_ID = ''WFF_ID'', OBJECT_LEVEL = 2 WHERE OBJECT_TYPE = ''ADS_WORKFLOW''';
   END IF;
END;
/
DECLARE
   COLUMNCHECKERFLAG INT;
BEGIN
    SELECT COUNT(*) INTO COLUMNCHECKERFLAG FROM ALL_TAB_COLUMNS WHERE  OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME = UPPER('ADS_KEY_VALUE') AND COLUMN_NAME=UPPER('VALUE_OBJECT_REF');
   IF COLUMNCHECKERFLAG = 0 THEN
        EXECUTE IMMEDIATE 'ALTER TABLE ADS_KEY_VALUE ADD VALUE_OBJECT_REF INT NULL';
        EXECUTE IMMEDIATE 'ALTER TABLE ADS_KEY_VALUE ADD CREATED_BY VARCHAR2(20) NULL';
        EXECUTE IMMEDIATE 'ALTER TABLE ADS_KEY_VALUE ADD CREATED_DATE_TIME TIMESTAMP (6) NULL';
        EXECUTE IMMEDIATE 'ALTER TABLE ADS_KEY_VALUE ADD LAST_MODIFIED_BY VARCHAR2(20) NULL';
        EXECUTE IMMEDIATE 'ALTER TABLE ADS_KEY_VALUE ADD LAST_MODIFIED_DATE_TIME TIMESTAMP (6) NULL';
    END IF;
END;
/

DECLARE
   COLUMNCHECKERFLAG INT;
BEGIN
    SELECT COUNT(*) INTO COLUMNCHECKERFLAG FROM ALL_TAB_COLUMNS WHERE  OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME = UPPER('ADS_KEY_VALUE') AND COLUMN_NAME=UPPER('DESCRIPTION');
   IF COLUMNCHECKERFLAG = 0 THEN
        EXECUTE IMMEDIATE 'ALTER TABLE ADS_KEY_VALUE ADD DESCRIPTION varchar2(4000) NULL';
    END IF;
END;
/
DECLARE
   COLUMNCHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO COLUMNCHECKERFLAG FROM ADS_MM_VERSION WHERE VALUE < '9.4';
   IF COLUMNCHECKERFLAG = 1 THEN
	  EXECUTE IMMEDIATE 'UPDATE ADS_KEY_VALUE SET ISPUBLISHED = ''1'' WHERE OBJECT_TYPE_ID <> (SELECT OBJECT_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE = ''MT_DEFINITION'')';
   END IF;
END;
/
DECLARE
   COLUMNCHECKERFLAG INT;
BEGIN
    SELECT COUNT(*) INTO COLUMNCHECKERFLAG FROM ALL_TAB_COLUMNS WHERE  OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME = UPPER('ADS_KEY_VALUE') AND COLUMN_NAME=UPPER('IS_FORM_PROPERTY');
   IF COLUMNCHECKERFLAG = 0 THEN
        EXECUTE IMMEDIATE 'ALTER TABLE ADS_KEY_VALUE ADD IS_FORM_PROPERTY INT DEFAULT 0 NULL';
        EXECUTE IMMEDIATE 'ALTER TABLE ADS_KEY_VALUE ADD IS_GRID_PROPERTY INT DEFAULT 0 NULL';
        EXECUTE IMMEDIATE 'ALTER TABLE ADS_KEY_VALUE ADD IS_PIVOTABLE INT DEFAULT 0 NULL';
        EXECUTE IMMEDIATE 'UPDATE ADS_KEY_VALUE SET IS_FORM_PROPERTY = 0';
        EXECUTE IMMEDIATE 'UPDATE ADS_KEY_VALUE SET IS_GRID_PROPERTY = 0';
        EXECUTE IMMEDIATE 'UPDATE ADS_KEY_VALUE SET IS_PIVOTABLE = 0';
    END IF;
END;
/
DECLARE
   COLUMNCHECKERFLAG INT;
BEGIN
    SELECT COUNT(*) INTO COLUMNCHECKERFLAG FROM ALL_TAB_COLUMNS WHERE  OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME = UPPER('ADS_KEY_VALUE_OBJECTS') AND COLUMN_NAME=UPPER('SYSTEM_BASED');
   IF COLUMNCHECKERFLAG = 0 THEN
        EXECUTE IMMEDIATE 'ALTER TABLE ADS_KEY_VALUE_OBJECTS ADD SYSTEM_BASED INT DEFAULT 0 NOT NULL';
        EXECUTE IMMEDIATE 'UPDATE ADS_KEY_VALUE_OBJECTS SET SYSTEM_BASED = 1';
    END IF;
END;
/

DECLARE
    VALUECHECKERFLAG INT;
BEGIN
    SELECT COUNT(*) INTO VALUECHECKERFLAG FROM ADS_KEY_VALUE_OBJECTS WHERE  OBJECT_TYPE = 'RDM_OBJECT_VALUE';
    IF VALUECHECKERFLAG = 0 THEN
        EXECUTE IMMEDIATE 'INSERT INTO ADS_KEY_VALUE_OBJECTS (OBJECT_TYPE,OBJECT_TABLE,OBJECT_TABLE_COLUMN,OBJECT_PARENT_TYPE,OBJECT_PARENT_COLUMN_ID,OBJECT_LEVEL,MODULE_KEY) VALUES (''RDM_OBJECT_VALUE'',''RDM_REF_TAB_COL_VALUES'',''RDM_REF_TAB_COL_VALUE'','''','''',3,''com.ads.mm.permission.rdm'')';
    END IF;
END;
/

DECLARE
    COLLENCHECKER INT;
BEGIN
   SELECT DATA_LENGTH INTO COLLENCHECKER FROM ALL_TAB_COLUMNS WHERE  OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME = UPPER('USERS') AND COLUMN_NAME=UPPER('USER_PASSWORD');
   IF COLLENCHECKER <= 50 THEN
      EXECUTE IMMEDIATE 'ALTER TABLE USERS MODIFY USER_PASSWORD VARCHAR(250) NOT NULL';
   END IF;
END;
/
DECLARE
   TABLECHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO TABLECHECKERFLAG FROM all_VIEWS WHERE OWNER = sys_context('userenv', 'current_schema') AND VIEW_NAME = UPPER('ADS_WORKFLOW_NODE_V');
   IF TABLECHECKERFLAG = 1 THEN
      EXECUTE IMMEDIATE 'DROP VIEW ADS_WORKFLOW_NODE_V';
   END IF;
END;
/
CREATE OR REPLACE FORCE VIEW  "ADS_WORKFLOW_NODE_V" AS SELECT * FROM ADS_WORKFLOW_NODE WHERE  VALID = '1';
/
DECLARE
TABLECHECKERFLAG INT;
BEGIN
SELECT COUNT(*) INTO TABLECHECKERFLAG FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE='RM_PROJECT';
IF TABLECHECKERFLAG = 0 THEN
INSERT ALL
INTO ADS_KEY_VALUE_OBJECTS (OBJECT_TYPE,OBJECT_TABLE,OBJECT_TABLE_COLUMN,OBJECT_PARENT_TYPE,OBJECT_PARENT_COLUMN_ID, MODULE_KEY,OBJECT_LEVEL) VALUES
(
'RM_PROJECT','RM_PROJECT','PROJECTID','','','com.ads.mm.permission.rm', 1
)
INTO ADS_KEY_VALUE_OBJECTS (OBJECT_TYPE,OBJECT_TABLE,OBJECT_TABLE_COLUMN,OBJECT_PARENT_TYPE,OBJECT_PARENT_COLUMN_ID, MODULE_KEY,OBJECT_LEVEL) VALUES
(
 'RM_RELEASE','RM_RELEASE','RELEASEID','RM_PROJECT','PROJECTID','com.ads.mm.permission.rm', 2
)
INTO ADS_KEY_VALUE_OBJECTS (OBJECT_TYPE,OBJECT_TABLE,OBJECT_TABLE_COLUMN,OBJECT_PARENT_TYPE,OBJECT_PARENT_COLUMN_ID, MODULE_KEY,OBJECT_LEVEL) VALUES
(
 'RM_MIGRATION_DOCUMENT','RM_MIGRATIONDOCUMENT','MIGRATIONDOCUMENTID','','','com.ads.mm.permission.rm', 1
)
INTO ADS_KEY_VALUE_OBJECTS (OBJECT_TYPE,OBJECT_TABLE,OBJECT_TABLE_COLUMN,OBJECT_PARENT_TYPE,OBJECT_PARENT_COLUMN_ID, MODULE_KEY,OBJECT_LEVEL) VALUES
(
 'RM_HISTORY','RM_HISTORY','HISTORYID','','','com.ads.mm.permission.rm', 1
)
INTO ADS_KEY_VALUE_OBJECTS (OBJECT_TYPE,OBJECT_TABLE,OBJECT_TABLE_COLUMN,OBJECT_PARENT_TYPE,OBJECT_PARENT_COLUMN_ID, MODULE_KEY,OBJECT_LEVEL) VALUES
(
 'RM_ENVIRONMENT','RM_ENVIRONMENT','ENVIRONMENTID','',' ','com.ads.mm.permission.rm', 1
)
INTO ADS_KEY_VALUE_OBJECTS (OBJECT_TYPE,OBJECT_TABLE,OBJECT_TABLE_COLUMN,OBJECT_PARENT_TYPE,OBJECT_PARENT_COLUMN_ID, MODULE_KEY,OBJECT_LEVEL) VALUES
(
 'RM_MIGRATION_OBJECT','RM_MIGRATIONOBJECT','MIGRATIONOBJECTID','RM_RELEASE','RELEASEID','com.ads.mm.permission.rm', 3
)
INTO ADS_KEY_VALUE_OBJECTS (OBJECT_TYPE,OBJECT_TABLE,OBJECT_TABLE_COLUMN,OBJECT_PARENT_TYPE,OBJECT_PARENT_COLUMN_ID, MODULE_KEY,OBJECT_LEVEL) VALUES
(
 'RM_MIGRATION_STATUS','RM_MIGRATIONSTATUS','MIGRATIONSTATUSID','','','com.ads.mm.permission.rm', 1
)
INTO ADS_KEY_VALUE_OBJECTS (OBJECT_TYPE,OBJECT_TABLE,OBJECT_TABLE_COLUMN,OBJECT_PARENT_TYPE,OBJECT_PARENT_COLUMN_ID, MODULE_KEY,OBJECT_LEVEL) VALUES
(
 'RM_SYSTEM_SETTINGS','RM_SYSTEMSETTINGS','MIGRATIONSTATUSID','','','com.ads.mm.permission.rm', 1
)
INTO ADS_KEY_VALUE_OBJECTS (OBJECT_TYPE,OBJECT_TABLE,OBJECT_TABLE_COLUMN,OBJECT_PARENT_TYPE,OBJECT_PARENT_COLUMN_ID, MODULE_KEY,OBJECT_LEVEL) VALUES
(
 'RM_MIGRATION_OBJECT_TYPE','RM_MIGRATIONOBJECTTYPE','MIGRATIONOBJECTTYPEID','','','com.ads.mm.permission.rm', 1
)
SELECT * FROM DUAL;
END IF;
END;
/
DECLARE
VERSIONCHECKERFLAG INT;
BEGIN
    SELECT COUNT(*) INTO VERSIONCHECKERFLAG FROM ADS_MM_VERSION WHERE VALUE < '8.3';
    IF VERSIONCHECKERFLAG = 1 THEN
	  EXECUTE IMMEDIATE 'UPDATE RM_HISTORY SET OBJECTTYPEID = (select OBJECT_TYPE_ID from ADS_KEY_VALUE_OBJECTS where OBJECT_TYPE = ''RM_SYSTEM_SETTINGS'') WHERE OBJECTTYPEID = 13 AND HISTORYTYPEID <> 6';
	  EXECUTE IMMEDIATE 'UPDATE RM_HISTORY SET OBJECTTYPEID = (select OBJECT_TYPE_ID from ADS_KEY_VALUE_OBJECTS where OBJECT_TYPE = ''RM_MIGRATION_STATUS'') WHERE OBJECTTYPEID = 12 AND HISTORYTYPEID <> 6';
	  EXECUTE IMMEDIATE 'UPDATE RM_HISTORY SET OBJECTTYPEID = (select OBJECT_TYPE_ID from ADS_KEY_VALUE_OBJECTS where OBJECT_TYPE = ''RM_HISTORY'') WHERE OBJECTTYPEID = 11 AND HISTORYTYPEID <> 6';
	  EXECUTE IMMEDIATE 'UPDATE RM_HISTORY SET OBJECTTYPEID = (select OBJECT_TYPE_ID from ADS_KEY_VALUE_OBJECTS where OBJECT_TYPE = ''RM_MIGRATION_OBJECT_TYPE'') WHERE OBJECTTYPEID = 9';
	  EXECUTE IMMEDIATE 'UPDATE RM_HISTORY SET OBJECTTYPEID = (select OBJECT_TYPE_ID from ADS_KEY_VALUE_OBJECTS where OBJECT_TYPE = ''RM_ENVIRONMENT'') WHERE OBJECTTYPEID = 7 AND HISTORYTYPEID <> 6';
	  EXECUTE IMMEDIATE 'UPDATE RM_HISTORY SET OBJECTTYPEID = (select OBJECT_TYPE_ID from ADS_KEY_VALUE_OBJECTS where OBJECT_TYPE = ''RM_MIGRATION_OBJECT'') WHERE OBJECTTYPEID = 4 AND HISTORYTYPEID <> 6';
	  EXECUTE IMMEDIATE 'UPDATE RM_HISTORY SET OBJECTTYPEID = (select OBJECT_TYPE_ID from ADS_KEY_VALUE_OBJECTS where OBJECT_TYPE = ''RM_RELEASE'') WHERE OBJECTTYPEID = 3 AND HISTORYTYPEID <> 6';
	  EXECUTE IMMEDIATE 'UPDATE RM_HISTORY SET OBJECTTYPEID = (select OBJECT_TYPE_ID from ADS_KEY_VALUE_OBJECTS where OBJECT_TYPE = ''RM_PROJECT'') WHERE OBJECTTYPEID = 2 AND HISTORYTYPEID <> 6';
	  EXECUTE IMMEDIATE 'UPDATE RM_HISTORY SET OBJECTTYPEID = (select OBJECT_TYPE_ID from ADS_KEY_VALUE_OBJECTS where OBJECT_TYPE = ''RM_MIGRATION_DOCUMENT'') WHERE OBJECTTYPEID = 1 AND HISTORYTYPEID <> 6';
	  END IF;
END;
/
CREATE OR REPLACE FORCE VIEW  "ACTIVE_SYS_CON_ENVIRONMENTS" AS
						SELECT * FROM   SYS_CON_ENVIRONMENTS WHERE  STATUS = 'Active';
/
CREATE OR REPLACE FORCE VIEW  "VALID_SYSTEM_TABLE_METADATA" AS
                        SELECT STM.* FROM   SYSTEM_TABLE_METADATA STM JOIN ACTIVE_SYS_CON_ENVIRONMENTS SCS ON STM.SCE_ID = SCS.SCE_ID WHERE STM.VALID = 1 OR STM.VALID IS NULL
/
CREATE OR REPLACE FORCE VIEW  "VALID_SYS_TBL_COL_METADATA"  AS
                       SELECT STCM.* FROM   SYSTEM_TABLE_COLUMNS_METADATA STCM JOIN ACTIVE_SYS_CON_ENVIRONMENTS SCS ON STCM.SCE_ID = SCS.SCE_ID WHERE  STCM.VALID = 1 OR STCM.VALID IS NULL
/
DECLARE
   TABLECHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO TABLECHECKERFLAG FROM all_VIEWS WHERE OWNER = sys_context('userenv', 'current_schema') AND VIEW_NAME = UPPER('V_ACTIVE_STCM_JSON');
   IF TABLECHECKERFLAG = 1 THEN
      EXECUTE IMMEDIATE 'DROP VIEW V_ACTIVE_STCM_JSON';
   END IF;
END;
/
CREATE OR REPLACE FORCE VIEW  "V_ACTIVE_STCM_JSON" AS
        SELECT sdd.SYSTEM_ID,sdd.SYSTEM_NAME,sce.SCE_ID, sce.SYSTEM_ENVIRONMENT_NAME,stm.STM_ID,stm.TABLE_NAME, stcm.COLUMN_NAME,
       (concat(concat(concat('{SDD:',sdd.SYSTEM_NAME)  , concat(',SCE:' , sce.SYSTEM_ENVIRONMENT_NAME) ),concat(',STM:' ,concat( stm.TABLE_NAME ,concat(',SCTM:' , concat(stcm.COLUMN_NAME,'}')))))) as json, stcm.valid, stcm.stcm_id
        FROM   VALID_SYS_TBL_COL_METADATA  STCM
        left join VALID_SYSTEM_TABLE_METADATA  STM on STM.stm_id = STCM.STM_ID
        left join ACTIVE_SYS_CON_ENVIRONMENTS  SCE on SCE.sce_id = STM.sce_id
        left join SYSTEM_DEFINITION_DETAILS  SDD on SDD.SYSTEM_ID = SCE.SYSTEM_ID;
/
DECLARE
   VERSIONCHECKERFLAG INT;
   COLUMNCHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO VERSIONCHECKERFLAG FROM ADS_MM_VERSION WHERE VALUE < '8.3';
   IF VERSIONCHECKERFLAG = 1 THEN
		SELECT COUNT(*) INTO COLUMNCHECKERFLAG FROM ALL_TAB_COLUMNS WHERE  OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME = UPPER('USERS') AND COLUMN_NAME=UPPER('ISLDAP_USER');
		IF COLUMNCHECKERFLAG != 0 THEN
			EXECUTE IMMEDIATE 'UPDATE USERS SET ISLDAP_USER = ''D'' WHERE ISLDAP_USER = ''N''';
			EXECUTE IMMEDIATE 'UPDATE USERS SET ISLDAP_USER = ''L'' WHERE ISLDAP_USER = ''Y''';
		END IF;
	END IF;
END;
/
DECLARE
   VERSIONCHECKERFLAG INT;
   COLUMNCHECKERFLAG INT;
BEGIN
	SELECT COUNT(*) INTO VERSIONCHECKERFLAG FROM ADS_MM_VERSION WHERE VALUE < '8.3';
	IF VERSIONCHECKERFLAG = 1 THEN
		SELECT COUNT(*) INTO COLUMNCHECKERFLAG FROM ALL_TAB_COLUMNS WHERE  OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME = UPPER('USERS') AND COLUMN_NAME=UPPER('ISLDAP_USER');
		IF COLUMNCHECKERFLAG = 1 THEN
			EXECUTE IMMEDIATE 'ALTER TABLE USERS RENAME COLUMN "ISLDAP_USER" TO "EXTERNAL_USER"';
		END IF;
	END IF;
END;
/
DECLARE
   TABLECHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO TABLECHECKERFLAG FROM all_VIEWS WHERE OWNER = sys_context('userenv', 'current_schema') AND VIEW_NAME = UPPER('ADS_WORKFLOW_ASSIGNMENT_V');
   IF TABLECHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'CREATE VIEW ADS_WORKFLOW_ASSIGNMENT_V AS SELECT * FROM ADS_WORKFLOW_ASSIGNMENT WHERE VALID = 1';
      END IF;
END;
/
DECLARE
VIEWCHECKERFLAG INT;
VERSIONCHECKER INT;
BEGIN
   SELECT COUNT(*) INTO VERSIONCHECKER FROM ADS_MM_VERSION WHERE VALUE < '9.2';
   SELECT COUNT(*) INTO VIEWCHECKERFLAG FROM all_VIEWS WHERE OWNER = sys_context('userenv', 'current_schema') AND VIEW_NAME = UPPER('ADS_WORKFLOW_NODE_ROLE_V');
   IF VIEWCHECKERFLAG = 0 AND VERSIONCHECKER = 1 THEN
      EXECUTE IMMEDIATE 'CREATE OR REPLACE FORCE VIEW  "ADS_WORKFLOW_NODE_ROLE_V" ("WF_ID", "WFN_ID", "WFG_ID", "OBJECT_ID", "OBJECT_TYPE_ID", "DEPENDENT_OBJECT_TYPE_ID", "ROLE_ID") AS
        WITH WF_OBJECTS_WITH_NODES AS
		  (SELECT AWN.WF_ID,
				  AWN.WFN_ID,
				  AWA.WFG_ID,
				  AWA.OBJECT_ID,
				  AWA.OBJECT_TYPE_ID,
				  AWT.OBJECT_TYPE_ID DEPENDENT_OBJECT_TYPE_ID
		   FROM ADS_WORKFLOW_NODE_V AWN
		   JOIN ADS_WORKFLOW_ASSIGNMENT AWA ON AWA.WF_ID = AWN.WF_ID
		   AND AWA.OBJECT_ID <> -1
		   JOIN ADS_WORKFLOW_ASGMNT_TRIGGER AWT ON AWT.WFG_ID = AWA.WFG_ID
		   WHERE AWN.NODE_TYPE = ''S''),
			 ASGN_OBJECTS_WITH_NODE_CONF AS
		  (SELECT WFON.*,
				  AWANC.CONFIG_VALUE AS ROLE_ID
		   FROM WF_OBJECTS_WITH_NODES WFON
		   LEFT JOIN ADS_WORKFLOW_ASGN_NODE_CONFIG AWANC ON AWANC.WFN_ID = WFON.WFN_ID
		   AND AWANC.WFG_ID = WFON.WFG_ID
		   AND AWANC.CONFIG_TYPE = ''ROLE''),
			 WF_NODE_ROLE AS
		  (SELECT ASNR.WFN_ID,
				  ASNR.ROLE_ID
		   FROM ADS_WORKFLOW_NODE_ROLE ASNR
		   JOIN SECURITY_ROLES SR ON ASNR.ROLE_ID = SR.ROLE_ID),
			 WF_NODE_ROLE_CONF AS
		  ( SELECT AWN.WFN_ID,
				   ASR.ROLE_ID
		   FROM ADS_WORKFLOW_STAGE_ROLE ASR
		   JOIN ADS_WORKFLOW_NODE AWN ON ASR.WFS_ID = AWN.NODE_ID
		   AND AWN.NODE_TYPE = ''S''
		   JOIN SECURITY_ROLES SR ON ASR.ROLE_ID = SR.ROLE_ID
		   WHERE AWN.WFN_ID NOT IN
			   (SELECT WFN_ID
				FROM WF_NODE_ROLE)
		   UNION SELECT WNR.WFN_ID,
						WNR.ROLE_ID
		   FROM WF_NODE_ROLE WNR)
			SELECT WFON.*,
				   ASNR.ROLE_ID
			FROM WF_OBJECTS_WITH_NODES WFON
			JOIN WF_NODE_ROLE_CONF ASNR ON ASNR.WFN_ID = WFON.WFN_ID
			JOIN ASGN_OBJECTS_WITH_NODE_CONF AONF ON AONF.WFG_ID = WFON.WFG_ID
			AND AONF.WFN_ID = WFON.WFN_ID
			AND AONF.OBJECT_ID = WFON.OBJECT_ID
			AND AONF.OBJECT_TYPE_ID = WFON.OBJECT_TYPE_ID
			AND AONF.DEPENDENT_OBJECT_TYPE_ID = WFON.DEPENDENT_OBJECT_TYPE_ID
			AND AONF.ROLE_ID IS NULL
			UNION
			SELECT *
			FROM ASGN_OBJECTS_WITH_NODE_CONF
			WHERE ROLE_ID IS NOT NULL';
   END IF;
END;
/
DECLARE
COLUMNCHECKERFLAG INT;
    BEGIN
        SELECT COUNT(*) INTO COLUMNCHECKERFLAG FROM ADS_MM_VERSION WHERE VALUE < '8.3';
        IF COLUMNCHECKERFLAG = 1 THEN
            UPDATE ADS_PROFILES_DETAILS SET PROFILE_DETAILS_VALUE = PROFILE_DETAILS_VALUE || ',wfLogView' WHERE PROFILE_DETAILS_NAME = 'TABS_TO_DISPLAY' AND PROFILE_DETAILS_VALUE NOT LIKE '%wfLogView%';
    END IF;
END;
/
DECLARE
TABLECHECKERFLAG INT;
BEGIN
  SELECT COUNT(*) INTO TABLECHECKERFLAG FROM ALL_TABLES  WHERE OWNER    = sys_context( 'userenv', 'current_schema' )  AND TABLE_NAME = UPPER('AMM_MASTER_CONFIGURATION');
    IF TABLECHECKERFLAG = 0 THEN
        EXECUTE IMMEDIATE 'CREATE TABLE AMM_MASTER_CONFIGURATION (
        MC_ID INT NOT NULL,
        OBJECT_ID INT NOT NULL,
        OBJECT_TYPE_ID INT NOT NULL,
        OPTIONS VARCHAR2(4000) NULL,
        CONSTRAINT PK_AMM_MASTER_CONFIG_MC_ID PRIMARY KEY(MC_ID))';
    END IF;
END;
/
DECLARE
SEQUENCECHECKERFLAG INT;
BEGIN
    SELECT COUNT(*) INTO SEQUENCECHECKERFLAG FROM ALL_SEQUENCES WHERE SEQUENCE_OWNER = sys_context('userenv', 'current_schema') AND SEQUENCE_NAME = UPPER('MASTER_SEQ');
        IF SEQUENCECHECKERFLAG = 0 THEN
            EXECUTE IMMEDIATE 'CREATE SEQUENCE   "MASTER_SEQ"  MINVALUE 1 MAXVALUE 999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE';
        END IF;
END;
/
DECLARE
TRIGGERCHECKERFLAG INT;
BEGIN
    SELECT COUNT(*)  INTO TRIGGERCHECKERFLAG  FROM all_triggers  WHERE OWNER = sys_context('userenv', 'current_schema') AND trigger_name = UPPER('MASTER_INSERT');
    IF TRIGGERCHECKERFLAG = 0 THEN
            EXECUTE IMMEDIATE 'CREATE OR REPLACE TRIGGER  "MASTER_INSERT" BEFORE INSERT ON AMM_MASTER_CONFIGURATION FOR EACH ROW BEGIN SELECT MASTER_SEQ.NEXTVAL INTO :new.MC_ID FROM DUAL; END;';
            EXECUTE IMMEDIATE 'ALTER TRIGGER  "MASTER_INSERT" ENABLE';
    END IF;
END;
/
DECLARE
TABLECHECKERFLAG INT;
BEGIN
  SELECT COUNT(*)  INTO TABLECHECKERFLAG  FROM ALL_TABLES  WHERE OWNER    = sys_context( 'userenv', 'current_schema' )  AND TABLE_NAME = UPPER('AMM_PROTOCOLS');
    IF TABLECHECKERFLAG = 0 THEN
    EXECUTE IMMEDIATE 'CREATE TABLE AMM_PROTOCOLS(
          PC_ID INT NOT NULL,
          SHORT_NAME VARCHAR2(50) NOT NULL,
          LONG_NAME VARCHAR2(255) NOT NULL,
          DESCRIPTION VARCHAR2(255) NULL,
          HANDLER_PATH VARCHAR2(255) NOT NULL,
          CONSTRAINT PK_AMM_PROTOCOLS_PC_ID PRIMARY KEY(PC_ID),
          CONSTRAINT UK_AMM_PROTOCOLS_SHORT_NAME UNIQUE (SHORT_NAME))';
    END IF;
END;
/
DECLARE
SEQUENCECHECKERFLAG INT;
BEGIN
    SELECT COUNT(*) INTO SEQUENCECHECKERFLAG FROM ALL_SEQUENCES WHERE SEQUENCE_OWNER = sys_context('userenv', 'current_schema') AND SEQUENCE_NAME = UPPER('PROTOCOL_SEQ');
    IF SEQUENCECHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'CREATE SEQUENCE   "PROTOCOL_SEQ"  MINVALUE 1 MAXVALUE 999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE';
    END IF;
END;
/
DECLARE
TRIGGERCHECKERFLAG INT;
BEGIN
  SELECT COUNT(*)  INTO TRIGGERCHECKERFLAG  FROM all_triggers  WHERE OWNER = sys_context('userenv', 'current_schema') AND trigger_name = UPPER('PROTOCOL_INSERT');
  IF TRIGGERCHECKERFLAG = 0 THEN
    EXECUTE IMMEDIATE 'CREATE OR REPLACE TRIGGER  "PROTOCOL_INSERT" BEFORE INSERT ON AMM_PROTOCOLS FOR EACH ROW BEGIN SELECT PROTOCOL_SEQ.NEXTVAL INTO :new.PC_ID FROM DUAL; END;';
    EXECUTE IMMEDIATE 'ALTER TRIGGER  "PROTOCOL_INSERT" ENABLE';
  END IF;
END;
/
DECLARE
PROTOCOLCHECKERFLAG INT;
BEGIN
SELECT COUNT(PC_ID) INTO PROTOCOLCHECKERFLAG FROM AMM_PROTOCOLS;
   IF PROTOCOLCHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'INSERT INTO AMM_PROTOCOLS(SHORT_NAME,LONG_NAME,DESCRIPTION,HANDLER_PATH) VALUES (''rdm'',''Reference Data Manager'',''Protocol handler to manage and serve RDM connectors'',''/protocols/rdm/rdm.cat'')';
   END IF;
END;
/

DECLARE
   TABLECHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO TABLECHECKERFLAG FROM ALL_OBJECTS WHERE OWNER = sys_context('userenv', 'current_schema') AND OBJECT_TYPE = 'FUNCTION' AND OBJECT_NAME = UPPER('FN_RUN_PROC');
   IF TABLECHECKERFLAG = 1 THEN
      EXECUTE IMMEDIATE 'DROP FUNCTION FN_RUN_PROC';
   END IF;
END;
/

CREATE OR REPLACE FUNCTION FN_RUN_PROC(IN_QUERY IN VARCHAR)
RETURN SYS_REFCURSOR
IS
        C_RESULT SYS_REFCURSOR;
BEGIN
        EXECUTE IMMEDIATE IN_QUERY USING IN OUT C_RESULT;
  return C_RESULT;
END;
/
DECLARE
   COLUMNCHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO COLUMNCHECKERFLAG FROM ALL_TAB_COLUMNS WHERE  OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME = UPPER('SYSTEM_TABLE_COLUMNS_METADATA') AND COLUMN_NAME=UPPER('STORAGE_TYPE');
   IF COLUMNCHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'ALTER TABLE SYSTEM_TABLE_COLUMNS_METADATA ADD STORAGE_TYPE VARCHAR2(10 CHAR) NULL';
   END IF;
END;
/
CREATE OR REPLACE FORCE VIEW  "VALID_SYS_TBL_COL_METADATA"  AS
                       SELECT STCM.* FROM   SYSTEM_TABLE_COLUMNS_METADATA STCM JOIN ACTIVE_SYS_CON_ENVIRONMENTS SCS ON STCM.SCE_ID = SCS.SCE_ID WHERE  STCM.VALID = 1 OR STCM.VALID IS NULL
/
DECLARE
   COLUMNCHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO COLUMNCHECKERFLAG FROM ALL_TAB_COLUMNS WHERE  OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME = UPPER('SYS_CON_ENVIRONMENTS') AND COLUMN_NAME=UPPER('SCAN_OPTIONS');
   IF COLUMNCHECKERFLAG = 0 THEN
    EXECUTE IMMEDIATE 'ALTER TABLE SYS_CON_ENVIRONMENTS ADD SCAN_OPTIONS  VARCHAR2(4000) NULL';
   END IF;
END;
/
CREATE OR REPLACE FORCE VIEW  "ACTIVE_SYS_CON_ENVIRONMENTS" AS SELECT * FROM   SYS_CON_ENVIRONMENTS WHERE  STATUS = 'Active';
/
DECLARE
   COLUMNCHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO COLUMNCHECKERFLAG FROM ALL_TAB_COLUMNS WHERE  OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME = UPPER('AMM_PROTOCOLS') AND COLUMN_NAME=UPPER('CONNECTOR_CLASS');
   IF COLUMNCHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'ALTER TABLE AMM_PROTOCOLS ADD CONNECTOR_CLASS VARCHAR2(250) NULL';
      EXECUTE IMMEDIATE 'ALTER TABLE AMM_PROTOCOLS ADD THUMBNAIL_PATH VARCHAR2(250) NULL';
      EXECUTE IMMEDIATE 'UPDATE AMM_PROTOCOLS SET CONNECTOR_CLASS = ''com.ads.keyvalues.protocol.RDMProtocol''';
      EXECUTE IMMEDIATE 'UPDATE AMM_PROTOCOLS SET THUMBNAIL_PATH = ''./images/slider_icons/RDM_Full.jpg''';
   END IF;
END;
/
DECLARE
   COLUMNCHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO COLUMNCHECKERFLAG FROM ALL_TAB_COLUMNS WHERE  OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME = UPPER('SYSTEM_TABLE_METADATA') AND COLUMN_NAME=UPPER('EXPANDED_LOGICAL_NAME');
   IF COLUMNCHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'ALTER TABLE SYSTEM_TABLE_METADATA ADD EXPANDED_LOGICAL_NAME VARCHAR2(4000) NULL';
   END IF;
END;
/
DECLARE
   COLUMNCHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO COLUMNCHECKERFLAG FROM ALL_TAB_COLUMNS WHERE  OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME = UPPER('SYSTEM_TABLE_COLUMNS_METADATA') AND COLUMN_NAME=UPPER('EXPANDED_LOGICAL_NAME');
   IF COLUMNCHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'ALTER TABLE SYSTEM_TABLE_COLUMNS_METADATA ADD EXPANDED_LOGICAL_NAME VARCHAR2(4000) NULL';
   END IF;
END;
/
DECLARE
   COLUMNCHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO COLUMNCHECKERFLAG FROM ALL_TAB_COLUMNS WHERE  OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME = UPPER('SYSTEM_TABLE_METADATA') AND COLUMN_NAME=UPPER('EXPAND_ELN');
   IF COLUMNCHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'ALTER TABLE SYSTEM_TABLE_METADATA ADD EXPAND_ELN CHAR(1) DEFAULT ''1'' NULL';
      EXECUTE IMMEDIATE 'UPDATE SYSTEM_TABLE_METADATA SET EXPAND_ELN = ''1''';
   END IF;
END;
/
DECLARE
   COLUMNCHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO COLUMNCHECKERFLAG FROM ALL_TAB_COLUMNS WHERE  OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME = UPPER('SYSTEM_TABLE_COLUMNS_METADATA') AND COLUMN_NAME=UPPER('EXPAND_ELN');
   IF COLUMNCHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'ALTER TABLE SYSTEM_TABLE_COLUMNS_METADATA ADD EXPAND_ELN CHAR(1) DEFAULT ''1'' NULL';
      EXECUTE IMMEDIATE 'UPDATE SYSTEM_TABLE_COLUMNS_METADATA SET EXPAND_ELN = ''1''';
   END IF;
END;
/
DECLARE
TABLECHECKERFLAG INT;
BEGIN
SELECT COUNT(*) INTO TABLECHECKERFLAG FROM ALL_CONS_COLUMNS WHERE OWNER = sys_context('userenv', 'current_schema') AND TABLE_NAME = UPPER('SYSTEM_TABLE_METADATA') AND CONSTRAINT_NAME = UPPER('UK_SYSID_ENV_TAB_NAME');
IF TABLECHECKERFLAG > 1 THEN
	EXECUTE IMMEDIATE 'ALTER TABLE SYSTEM_TABLE_METADATA DROP CONSTRAINT UK_SYSID_ENV_TAB_NAME';
END IF;
END;
/
DECLARE
INDEXEXISTANCEFLAG INT;
BEGIN
SELECT COUNT(*) INTO INDEXEXISTANCEFLAG FROM ALL_INDEXES WHERE OWNER = sys_context('userenv', 'current_schema') AND TABLE_NAME='SYSTEM_TABLE_METADATA' AND INDEX_NAME = 'UK_SYSID_ENV_TAB_NAME';
IF INDEXEXISTANCEFLAG = 1 THEN
	EXECUTE IMMEDIATE 'DROP INDEX UK_SYSID_ENV_TAB_NAME';
END IF;
END;
/
DECLARE
TABLECHECKERFLAG INT;
BEGIN
SELECT COUNT(*) INTO TABLECHECKERFLAG FROM ALL_CONS_COLUMNS WHERE OWNER = sys_context('userenv', 'current_schema') AND TABLE_NAME = UPPER('SYSTEM_TABLE_COLUMNS_METADATA') AND CONSTRAINT_NAME = UPPER('UK_SYS_ID_ENV_TAB_COL');
IF TABLECHECKERFLAG > 1 THEN
	EXECUTE IMMEDIATE 'ALTER TABLE SYSTEM_TABLE_COLUMNS_METADATA DROP CONSTRAINT UK_SYS_ID_ENV_TAB_COL';
END IF;
END;
/
DECLARE
INDEXEXISTANCEFLAG INT;
BEGIN
SELECT COUNT(*) INTO INDEXEXISTANCEFLAG FROM ALL_INDEXES WHERE OWNER = sys_context('userenv', 'current_schema') AND TABLE_NAME='SYSTEM_TABLE_COLUMNS_METADATA' AND INDEX_NAME = 'UK_SYS_ID_ENV_TAB_COL';
IF INDEXEXISTANCEFLAG = 1 THEN
	EXECUTE IMMEDIATE 'DROP INDEX UK_SYS_ID_ENV_TAB_COL';
END IF;
END;
/
DECLARE
TABLECHECKERFLAG INT;
BEGIN
    SELECT COUNT(*)
 INTO TABLECHECKERFLAG FROM ADS_KEY_VALUE_OBJECTS WHERE  OBJECT_TYPE = 'SM_METADATA';
    IF TABLECHECKERFLAG = 0 THEN
        EXECUTE IMMEDIATE 'INSERT INTO ADS_KEY_VALUE_OBJECTS (OBJECT_TYPE,OBJECT_TABLE,OBJECT_TABLE_COLUMN,OBJECT_PARENT_TYPE,OBJECT_PARENT_COLUMN_ID) VALUES (''SM_METADATA'','''','''','''','''')';
    END IF;
END;
/
DECLARE
   COLUMNCHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO COLUMNCHECKERFLAG FROM ALL_TAB_COLUMNS WHERE  OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME = UPPER('MAP_SPCFCTN_DTLS_RPRT_GTT') AND COLUMN_NAME=UPPER('ORPHAN_SRC');
   IF COLUMNCHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'ALTER TABLE MAP_SPCFCTN_DTLS_RPRT_GTT ADD ORPHAN_SRC NUMBER(1) NULL';
   END IF;
END;
/


DECLARE
   COLUMNCHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO COLUMNCHECKERFLAG FROM ALL_TAB_COLUMNS WHERE  OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME = UPPER('MAP_SPCFCTN_DTLS_RPRT_GTT') AND COLUMN_NAME=UPPER('ORPHAN_TGT');
   IF COLUMNCHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'ALTER TABLE MAP_SPCFCTN_DTLS_RPRT_GTT ADD ORPHAN_TGT NUMBER(1) NULL';
   END IF;
END;
/


DECLARE
   TABLECHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO TABLECHECKERFLAG FROM ALL_TABLES WHERE OWNER = sys_context( 'userenv', 'current_schema' ) AND TABLE_NAME = UPPER('MAP_SPCFCTN_DTLS_RPRT_SRC_GTT');
   IF TABLECHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'CREATE GLOBAL TEMPORARY TABLE MAP_SPCFCTN_DTLS_RPRT_SRC_GTT (MAP_ID NUMBER NOT NULL, SRC_SYSTEM_NAME VARCHAR2(4000 BYTE) NULL, SRC_SYSTEM_ENVIRONMENT_NAME VARCHAR2(4000 BYTE) NULL,  SRC_TABLE_NAME VARCHAR2(4000 BYTE) NULL,  SRC_COLUMN_NAME VARCHAR2(4000 BYTE) NULL,  SRC_COL_DATATYPE VARCHAR2(1000 BYTE) NULL, SRC_COL_LENGTH VARCHAR2(100), SRC_COL_PRECISION VARCHAR2(100), SRC_COL_SCALE VARCHAR2(100), MATCH_SRC_SYSTEM_NAME VARCHAR2(4000 BYTE) NULL, MATCH_SRC_SYS_ENV_NAME VARCHAR2(4000 BYTE) NULL,  MATCH_SRC_SYS_TBL_NAME VARCHAR2(4000 BYTE) NULL,  MATCH_SRC_SYS_COL_NAME VARCHAR2(4000 BYTE) NULL, MATCH_SRC_SYS_COL_DTYPE VARCHAR2(50 BYTE) NULL, MATCH_SRC_SYS_COL_LENGTH VARCHAR2(100), MATCH_SRC_SYS_COL_PRECISION VARCHAR2(100), MATCH_SRC_SYS_COL_SCALE VARCHAR2(100))  ON COMMIT PRESERVE ROWS';
   END IF;
END;
/

DECLARE
   TABLECHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO TABLECHECKERFLAG FROM ALL_TABLES WHERE OWNER = sys_context( 'userenv', 'current_schema' ) AND TABLE_NAME = UPPER('MAP_SPCFCTN_DTLS_RPRT_TGT_GTT');
   IF TABLECHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'CREATE GLOBAL TEMPORARY TABLE MAP_SPCFCTN_DTLS_RPRT_TGT_GTT (MAP_ID NUMBER NOT NULL, TGT_SYSTEM_NAME VARCHAR2(4000 BYTE) NULL,  TGT_SYSTEM_ENVIRONMENT_NAME VARCHAR2(4000 BYTE) NULL,  TGT_TABLE_NAME VARCHAR2(4000 BYTE) NULL,  TGT_COLUMN_NAME VARCHAR2(4000 BYTE) NULL, TGT_COL_DATATYPE VARCHAR2(1000 BYTE) NULL, TGT_COL_LENGTH VARCHAR2(100), TGT_COL_PRECISION VARCHAR2(100), TGT_COL_SCALE VARCHAR2(100), MATCH_TGT_SYSTEM_NAME VARCHAR2(4000 BYTE) NULL, MATCH_TGT_SYS_ENV_NAME VARCHAR2(4000 BYTE) NULL,  MATCH_TGT_SYS_TBL_NAME VARCHAR2(4000 BYTE) NULL,  MATCH_TGT_SYS_COL_NAME VARCHAR2(4000 BYTE) NULL, MATCH_TGT_SYS_COL_DTYPE VARCHAR2(50 BYTE) NULL, MATCH_TGT_SYS_COL_LENGTH VARCHAR2(100), MATCH_TGT_SYS_COL_PRECISION VARCHAR2(100), MATCH_TGT_SYS_COL_SCALE VARCHAR2(100))  ON COMMIT PRESERVE ROWS';
   END IF;
END;
/
DECLARE
   TABLECHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO TABLECHECKERFLAG FROM all_VIEWS WHERE OWNER = sys_context('userenv', 'current_schema') AND VIEW_NAME = UPPER('V_SYS_TBL_COL_MTDT_SIMPLE');
   IF TABLECHECKERFLAG = 1 THEN
      EXECUTE IMMEDIATE 'DROP VIEW V_SYS_TBL_COL_MTDT_SIMPLE';
   END IF;
END;
/
CREATE OR REPLACE FORCE VIEW "V_SYS_TBL_COL_MTDT_SIMPLE" ("TABLE_NAME", "COLUMN_NAME", "COL_DATATYPE", "SYSTEM_NAME", "SYSTEM_ENV_NAME", "COL_LENGTH", "COL_PRECISION", "COL_SCALE")
AS
 SELECT SYSCOL.TABLE_NAME,
    SYSCOL.COLUMN_NAME,
    NVL(SYSCOL.COL_DATATYPE, ' ') COL_DATATYPE,
    ASCE.SYSTEM_NAME,
    SYSCOL.SYSTEM_ENV_NAME,
    NVL(SYSCOL.COL_LENGTH, ' ') COL_LENGTH,
    NVL(SYSCOL.COL_PRECISION, ' ') COL_PRECISION,
    NVL(SYSCOL.COL_SCALE, ' ') COL_SCALE
  FROM SYSTEM_TABLE_COLUMNS_METADATA SYSCOL
  JOIN ACTIVE_SYS_CON_ENVIRONMENTS ASCE
	ON ASCE.SCE_ID = SYSCOL.SCE_ID
  WHERE (VALID             = 1
  or valid              is null);
/

CREATE OR REPLACE
  FUNCTION FN_VLDT_MPPNG_SPCFCTN_DTLS(
      IN_MAP_ID IN RPT_VALIDATION_STRARRAY)
    RETURN SYS_REFCURSOR
  AS
    PRAGMA AUTONOMOUS_TRANSACTION;
    L_MAP_SPEC_CMPR_RSLTS SYS_REFCURSOR;
  BEGIN
    DELETE FROM MAP_SPCFCTN_DTLS_RPRT_GTT;
    DELETE FROM MAP_SPCFCTN_DTLS_RPRT_SRC_GTT;
    DELETE FROM MAP_SPCFCTN_DTLS_RPRT_TGT_GTT;
    INSERT INTO MAP_SPCFCTN_DTLS_RPRT_GTT
    SELECT DISTINCT MAPPING_SPECIFICATION.MAP_ID,
      MAPPING_DETAILS.MAP_NAME,
      MIN(MAPPING_SPECIFICATION.MAP_SEQ_ID),
      MAPPING_SPECIFICATION.SRC_SYSTEM_NAME,
      MAPPING_SPECIFICATION.SRC_SYSTEM_ENVIRONMENT_NAME ,
      MAPPING_SPECIFICATION.SRC_TABLE_NAME ,
      MAPPING_SPECIFICATION.SRC_COLUMN_NAME ,
      NVL(MAPPING_SPECIFICATION.SRC_COL_DATATYPE, ' ') ,
      NVL(MAPPING_SPECIFICATION.SRC_COL_LENGTH, ' ') ,
      NVL(MAPPING_SPECIFICATION.SRC_COL_PRECISION, ' ') ,
      NVL(MAPPING_SPECIFICATION.SRC_COL_SCALE, ' ') ,
      MAPPING_SPECIFICATION.TGT_SYSTEM_NAME ,
      MAPPING_SPECIFICATION.TGT_SYSTEM_ENVIRONMENT_NAME ,
      MAPPING_SPECIFICATION.TGT_TABLE_NAME ,
      MAPPING_SPECIFICATION.TGT_COLUMN_NAME ,
      NVL(MAPPING_SPECIFICATION.TGT_COL_DATATYPE, ' ') ,
      NVL(MAPPING_SPECIFICATION.TGT_COL_LENGTH, ' ') ,
      NVL(MAPPING_SPECIFICATION.TGT_COL_PRECISION, ' ') ,
      NVL(MAPPING_SPECIFICATION.TGT_COL_SCALE, ' ') ,
      NULL AS MATCH_SRC_SYSTEM_NAME ,
      NULL AS MATCH_SRC_SYS_ENV_NAME ,
      NULL AS MATCH_SRC_SYS_TBL_NAME ,
      NULL AS MATCH_SRC_SYS_COL_NAME ,
      NULL AS MATCH_SRC_SYS_COL_DTYPE ,
      NULL AS MATCH_SRC_SYS_COL_LENGTH ,
      NULL AS MATCH_SRC_SYS_COL_PRECISION ,
      NULL AS MATCH_SRC_SYS_COL_SCALE ,
      NULL AS MATCH_TGT_SYSTEM_NAME ,
      NULL AS MATCH_TGT_SYS_ENV_NAME ,
      NULL AS MATCH_TGT_SYS_TBL_NAME ,
      NULL AS MATCH_TGT_SYS_COL_NAME ,
      NULL AS MATCH_TGT_SYS_COL_DTYPE ,
      NULL AS MATCH_TGT_SYS_COL_LENGTH ,
      NULL AS MATCH_TGT_SYS_COL_PRECISION ,
      NULL AS MATCH_TGT_SYS_COL_SCALE,
      CASE
        WHEN (SRC_SYSTEM_NAME           IS NULL
        AND SRC_SYSTEM_ENVIRONMENT_NAME IS NULL
        AND SRC_TABLE_NAME              IS NULL
        AND SRC_COLUMN_NAME             IS NULL
        AND SRC_COL_DATATYPE            IS NULL
        AND SRC_COL_LENGTH              IS NULL
        AND SRC_COL_PRECISION           IS NULL
        AND SRC_COL_SCALE               IS NULL)
        THEN 1
        ELSE 0
      END AS ORPHAN_SRC,
      CASE
        WHEN (TGT_SYSTEM_NAME           IS NULL
        AND TGT_SYSTEM_ENVIRONMENT_NAME IS NULL
        AND TGT_TABLE_NAME              IS NULL
        AND TGT_COLUMN_NAME             IS NULL
        AND TGT_COL_DATATYPE            IS NULL
        AND TGT_COL_LENGTH              IS NULL
        AND TGT_COL_PRECISION           IS NULL
        AND TGT_COL_SCALE               IS NULL )
        THEN 1
        ELSE 0
      END AS ORPHAN_TGT
    FROM APPENDED_MAP_SPEC_RCRDS_V MAPPING_SPECIFICATION
    LEFT JOIN MAPPING_DETAILS
    ON MAPPING_SPECIFICATION.MAP_ID = MAPPING_DETAILS.MAP_ID
    WHERE MAPPING_DETAILS.MAP_ID   IN
      (SELECT * FROM TABLE(IN_MAP_ID)
      )
    GROUP BY SRC_SYSTEM_NAME,
      SRC_SYSTEM_ENVIRONMENT_NAME,
      SRC_TABLE_NAME,
      SRC_COLUMN_NAME,
      SRC_COL_DATATYPE,
      SRC_COL_LENGTH,
      SRC_COL_PRECISION,
      SRC_COL_SCALE,
      TGT_SYSTEM_NAME,
      TGT_SYSTEM_ENVIRONMENT_NAME,
      TGT_TABLE_NAME,
      TGT_COLUMN_NAME,
      TGT_COL_DATATYPE,
      TGT_COL_LENGTH,
      TGT_COL_PRECISION,
      TGT_COL_SCALE,
      MAPPING_DETAILS.MAP_NAME,
      MAPPING_SPECIFICATION.MAP_ID;
    INSERT INTO MAP_SPCFCTN_DTLS_RPRT_SRC_GTT
    SELECT DISTINCT MAP_ID,
      SRC_SYSTEM_NAME ,
      SRC_SYSTEM_ENVIRONMENT_NAME,
      SRC_TABLE_NAME,
      SRC_COLUMN_NAME,
      SRC_COL_DATATYPE,
      SRC_COL_LENGTH,
      SRC_COL_PRECISION,
      SRC_COL_SCALE,
      NULL,
      NULL,
      NULL,
      NULL,
      NULL,
      NULL,
      NULL,
      NULL
    FROM MAP_SPCFCTN_DTLS_RPRT_GTT
    WHERE ORPHAN_SRC = 0;
    INSERT INTO MAP_SPCFCTN_DTLS_RPRT_TGT_GTT
    SELECT DISTINCT MAP_ID,
      TGT_SYSTEM_NAME ,
      TGT_SYSTEM_ENVIRONMENT_NAME,
      TGT_TABLE_NAME,
      TGT_COLUMN_NAME,
      TGT_COL_DATATYPE,
      TGT_COL_LENGTH,
      TGT_COL_PRECISION,
      TGT_COL_SCALE,
      NULL,
      NULL,
      NULL,
      NULL,
      NULL,
      NULL,
      NULL,
      NULL
    FROM MAP_SPCFCTN_DTLS_RPRT_GTT
    WHERE ORPHAN_TGT = 0;
    MERGE INTO MAP_SPCFCTN_DTLS_RPRT_SRC_GTT GTT USING
    (SELECT DISTINCT SRC_SYS_TCMD.SYSTEM_NAME
    FROM MAP_SPCFCTN_DTLS_RPRT_SRC_GTT MS
    JOIN V_SYS_TBL_COL_MTDT_SIMPLE SRC_SYS_TCMD
    ON MS.SRC_SYSTEM_NAME         = SRC_SYS_TCMD.SYSTEM_NAME
    ) RES ON (GTT.SRC_SYSTEM_NAME = RES.SYSTEM_NAME)
  WHEN MATCHED THEN
    UPDATE SET GTT.MATCH_SRC_SYSTEM_NAME = RES.SYSTEM_NAME;

    DELETE
    FROM MAP_SPCFCTN_DTLS_RPRT_SRC_GTT
    WHERE MATCH_SRC_SYSTEM_NAME IS NULL;

    MERGE INTO MAP_SPCFCTN_DTLS_RPRT_SRC_GTT GTT USING
    (SELECT DISTINCT SRC_SYS_TCMD.SYSTEM_NAME,
      SRC_SYS_TCMD.SYSTEM_ENV_NAME
    FROM MAP_SPCFCTN_DTLS_RPRT_SRC_GTT MS
    INNER JOIN V_SYS_TBL_COL_MTDT_SIMPLE SRC_SYS_TCMD
    ON (MS.SRC_SYSTEM_NAME             = SRC_SYS_TCMD.SYSTEM_NAME
    AND MS.SRC_SYSTEM_ENVIRONMENT_NAME = SRC_SYS_TCMD.SYSTEM_ENV_NAME)
    ) RES ON (GTT.SRC_SYSTEM_NAME      = RES.SYSTEM_NAME AND GTT.SRC_SYSTEM_ENVIRONMENT_NAME = RES.SYSTEM_ENV_NAME)
  WHEN MATCHED THEN
    UPDATE SET GTT.MATCH_SRC_SYS_ENV_NAME = RES.SYSTEM_ENV_NAME;

    DELETE
    FROM MAP_SPCFCTN_DTLS_RPRT_SRC_GTT
    WHERE MATCH_SRC_SYS_ENV_NAME IS NULL
    AND MATCH_SRC_SYSTEM_NAME    IS NULL;

    MERGE INTO MAP_SPCFCTN_DTLS_RPRT_SRC_GTT GTT USING
    (SELECT DISTINCT SRC_SYS_TCMD.SYSTEM_NAME,
      SRC_SYS_TCMD.SYSTEM_ENV_NAME,
      SRC_SYS_TCMD.TABLE_NAME
    FROM MAP_SPCFCTN_DTLS_RPRT_SRC_GTT MS
    INNER JOIN V_SYS_TBL_COL_MTDT_SIMPLE SRC_SYS_TCMD
    ON (MS.SRC_SYSTEM_NAME             = SRC_SYS_TCMD.SYSTEM_NAME
    AND MS.SRC_SYSTEM_ENVIRONMENT_NAME = SRC_SYS_TCMD.SYSTEM_ENV_NAME
    AND MS.SRC_TABLE_NAME              = SRC_SYS_TCMD.TABLE_NAME)
    ) RES ON (GTT.SRC_SYSTEM_NAME      = RES.SYSTEM_NAME AND GTT.SRC_SYSTEM_ENVIRONMENT_NAME = RES.SYSTEM_ENV_NAME AND GTT.SRC_TABLE_NAME = RES.TABLE_NAME)
  WHEN MATCHED THEN
    UPDATE SET GTT.MATCH_SRC_SYS_TBL_NAME = RES.TABLE_NAME;

    DELETE
    FROM MAP_SPCFCTN_DTLS_RPRT_SRC_GTT
    WHERE MATCH_SRC_SYS_TBL_NAME IS NULL
    AND MATCH_SRC_SYS_ENV_NAME   IS NULL
    AND MATCH_SRC_SYSTEM_NAME    IS NULL;

    MERGE INTO MAP_SPCFCTN_DTLS_RPRT_SRC_GTT GTT USING
    (SELECT DISTINCT SRC_SYS_TCMD.SYSTEM_NAME,
      SRC_SYS_TCMD.SYSTEM_ENV_NAME,
      SRC_SYS_TCMD.TABLE_NAME,
      SRC_SYS_TCMD.COLUMN_NAME
    FROM MAP_SPCFCTN_DTLS_RPRT_SRC_GTT MS
    INNER JOIN V_SYS_TBL_COL_MTDT_SIMPLE SRC_SYS_TCMD
    ON (MS.SRC_SYSTEM_NAME             = SRC_SYS_TCMD.SYSTEM_NAME
    AND MS.SRC_SYSTEM_ENVIRONMENT_NAME = SRC_SYS_TCMD.SYSTEM_ENV_NAME
    AND MS.SRC_TABLE_NAME              = SRC_SYS_TCMD.TABLE_NAME
    AND MS.SRC_COLUMN_NAME             = SRC_SYS_TCMD.COLUMN_NAME)
    ) RES ON (GTT.SRC_SYSTEM_NAME      = RES.SYSTEM_NAME AND GTT.SRC_SYSTEM_ENVIRONMENT_NAME = RES.SYSTEM_ENV_NAME AND GTT.SRC_TABLE_NAME = RES.TABLE_NAME AND GTT.SRC_COLUMN_NAME = RES.COLUMN_NAME)
  WHEN MATCHED THEN
    UPDATE SET GTT.MATCH_SRC_SYS_COL_NAME = RES.COLUMN_NAME;

    DELETE
    FROM MAP_SPCFCTN_DTLS_RPRT_SRC_GTT
    WHERE MATCH_SRC_SYS_TBL_NAME IS NULL
    AND MATCH_SRC_SYS_ENV_NAME   IS NULL
    AND MATCH_SRC_SYS_COL_NAME   IS NULL
    AND MATCH_SRC_SYSTEM_NAME    IS NULL;

    MERGE INTO MAP_SPCFCTN_DTLS_RPRT_SRC_GTT GTT USING
    (SELECT DISTINCT SRC_SYS_TCMD.SYSTEM_NAME,
      SRC_SYS_TCMD.SYSTEM_ENV_NAME,
      SRC_SYS_TCMD.TABLE_NAME,
      SRC_SYS_TCMD.COLUMN_NAME,
      SRC_SYS_TCMD.COL_DATATYPE
    FROM MAP_SPCFCTN_DTLS_RPRT_SRC_GTT MS
    INNER JOIN V_SYS_TBL_COL_MTDT_SIMPLE SRC_SYS_TCMD
    ON (MS.SRC_SYSTEM_NAME             = SRC_SYS_TCMD.SYSTEM_NAME
    AND MS.SRC_SYSTEM_ENVIRONMENT_NAME = SRC_SYS_TCMD.SYSTEM_ENV_NAME
    AND MS.SRC_TABLE_NAME              = SRC_SYS_TCMD.TABLE_NAME
    AND MS.SRC_COLUMN_NAME             = SRC_SYS_TCMD.COLUMN_NAME
    AND MS.SRC_COL_DATATYPE            = SRC_SYS_TCMD.COL_DATATYPE)
    ) RES ON (GTT.SRC_SYSTEM_NAME      = RES.SYSTEM_NAME AND GTT.SRC_SYSTEM_ENVIRONMENT_NAME = RES.SYSTEM_ENV_NAME AND GTT.SRC_TABLE_NAME = RES.TABLE_NAME AND GTT.SRC_COLUMN_NAME = RES.COLUMN_NAME AND GTT.SRC_COL_DATATYPE = RES.COL_DATATYPE)
  WHEN MATCHED THEN
    UPDATE SET GTT.MATCH_SRC_SYS_COL_DTYPE = RES.COL_DATATYPE;

    DELETE
    FROM MAP_SPCFCTN_DTLS_RPRT_SRC_GTT
    WHERE MATCH_SRC_SYS_TBL_NAME IS NULL
    AND MATCH_SRC_SYS_ENV_NAME   IS NULL
    AND MATCH_SRC_SYS_COL_NAME   IS NULL
    AND MATCH_SRC_SYS_COL_DTYPE  IS NULL
    AND MATCH_SRC_SYSTEM_NAME    IS NULL;

    MERGE INTO MAP_SPCFCTN_DTLS_RPRT_SRC_GTT GTT USING
    (SELECT DISTINCT SRC_SYS_TCMD.SYSTEM_NAME,
      SRC_SYS_TCMD.SYSTEM_ENV_NAME,
      SRC_SYS_TCMD.TABLE_NAME,
      SRC_SYS_TCMD.COLUMN_NAME,
      SRC_SYS_TCMD.COL_DATATYPE,
      SRC_SYS_TCMD.COL_LENGTH
    FROM MAP_SPCFCTN_DTLS_RPRT_SRC_GTT MS
    INNER JOIN V_SYS_TBL_COL_MTDT_SIMPLE SRC_SYS_TCMD
    ON (MS.SRC_SYSTEM_NAME             = SRC_SYS_TCMD.SYSTEM_NAME
    AND MS.SRC_SYSTEM_ENVIRONMENT_NAME = SRC_SYS_TCMD.SYSTEM_ENV_NAME
    AND MS.SRC_TABLE_NAME              = SRC_SYS_TCMD.TABLE_NAME
    AND MS.SRC_COLUMN_NAME             = SRC_SYS_TCMD.COLUMN_NAME
    AND MS.SRC_COL_DATATYPE            = SRC_SYS_TCMD.COL_DATATYPE
    AND MS.SRC_COL_LENGTH              = SRC_SYS_TCMD.COL_LENGTH)
    ) RES ON (GTT.SRC_SYSTEM_NAME      = RES.SYSTEM_NAME AND GTT.SRC_SYSTEM_ENVIRONMENT_NAME = RES.SYSTEM_ENV_NAME AND GTT.SRC_TABLE_NAME = RES.TABLE_NAME AND GTT.SRC_COLUMN_NAME = RES.COLUMN_NAME AND GTT.SRC_COL_DATATYPE = RES.COL_DATATYPE AND GTT.SRC_COL_LENGTH = RES.COL_LENGTH)
  WHEN MATCHED THEN
    UPDATE SET GTT.MATCH_SRC_SYS_COL_LENGTH = RES.COL_LENGTH;

    DELETE
    FROM MAP_SPCFCTN_DTLS_RPRT_SRC_GTT
    WHERE MATCH_SRC_SYS_TBL_NAME IS NULL
    AND MATCH_SRC_SYS_ENV_NAME   IS NULL
    AND MATCH_SRC_SYS_COL_NAME   IS NULL
    AND MATCH_SRC_SYS_COL_DTYPE  IS NULL
    AND MATCH_SRC_SYS_COL_LENGTH IS NULL
    AND MATCH_SRC_SYSTEM_NAME    IS NULL;

    MERGE INTO MAP_SPCFCTN_DTLS_RPRT_SRC_GTT GTT USING
    (SELECT DISTINCT SRC_SYS_TCMD.SYSTEM_NAME,
      SRC_SYS_TCMD.SYSTEM_ENV_NAME,
      SRC_SYS_TCMD.TABLE_NAME,
      SRC_SYS_TCMD.COLUMN_NAME,
      SRC_SYS_TCMD.COL_DATATYPE,
      SRC_SYS_TCMD.COL_LENGTH,
      SRC_SYS_TCMD.COL_PRECISION
    FROM MAP_SPCFCTN_DTLS_RPRT_SRC_GTT MS
    INNER JOIN V_SYS_TBL_COL_MTDT_SIMPLE SRC_SYS_TCMD
    ON (MS.SRC_SYSTEM_NAME             = SRC_SYS_TCMD.SYSTEM_NAME
    AND MS.SRC_SYSTEM_ENVIRONMENT_NAME = SRC_SYS_TCMD.SYSTEM_ENV_NAME
    AND MS.SRC_TABLE_NAME              = SRC_SYS_TCMD.TABLE_NAME
    AND MS.SRC_COLUMN_NAME             = SRC_SYS_TCMD.COLUMN_NAME
    AND MS.SRC_COL_DATATYPE            = SRC_SYS_TCMD.COL_DATATYPE
    AND MS.SRC_COL_LENGTH              = SRC_SYS_TCMD.COL_LENGTH
    AND MS.SRC_COL_PRECISION           = SRC_SYS_TCMD.COL_PRECISION)
    ) RES ON (GTT.SRC_SYSTEM_NAME      = RES.SYSTEM_NAME AND GTT.SRC_SYSTEM_ENVIRONMENT_NAME = RES.SYSTEM_ENV_NAME AND GTT.SRC_TABLE_NAME = RES.TABLE_NAME AND GTT.SRC_COLUMN_NAME = RES.COLUMN_NAME AND GTT.SRC_COL_DATATYPE = RES.COL_DATATYPE AND GTT.SRC_COL_LENGTH = RES.COL_LENGTH AND GTT.SRC_COL_PRECISION = RES.COL_PRECISION)
  WHEN MATCHED THEN
    UPDATE SET GTT.MATCH_SRC_SYS_COL_PRECISION = RES.COL_PRECISION;

    DELETE
    FROM MAP_SPCFCTN_DTLS_RPRT_SRC_GTT
    WHERE MATCH_SRC_SYS_TBL_NAME    IS NULL
    AND MATCH_SRC_SYS_ENV_NAME      IS NULL
    AND MATCH_SRC_SYS_COL_NAME      IS NULL
    AND MATCH_SRC_SYS_COL_DTYPE     IS NULL
    AND MATCH_SRC_SYS_COL_LENGTH    IS NULL
    AND MATCH_SRC_SYS_COL_PRECISION IS NULL
    AND MATCH_SRC_SYSTEM_NAME       IS NULL;

    MERGE INTO MAP_SPCFCTN_DTLS_RPRT_SRC_GTT GTT USING
    (SELECT DISTINCT SRC_SYS_TCMD.SYSTEM_NAME,
      SRC_SYS_TCMD.SYSTEM_ENV_NAME,
      SRC_SYS_TCMD.TABLE_NAME,
      SRC_SYS_TCMD.COLUMN_NAME,
      SRC_SYS_TCMD.COL_DATATYPE,
      SRC_SYS_TCMD.COL_LENGTH,
      SRC_SYS_TCMD.COL_PRECISION,
      SRC_SYS_TCMD.COL_SCALE
    FROM MAP_SPCFCTN_DTLS_RPRT_SRC_GTT MS
    INNER JOIN V_SYS_TBL_COL_MTDT_SIMPLE SRC_SYS_TCMD
    ON (MS.SRC_SYSTEM_NAME             = SRC_SYS_TCMD.SYSTEM_NAME
    AND MS.SRC_SYSTEM_ENVIRONMENT_NAME = SRC_SYS_TCMD.SYSTEM_ENV_NAME
    AND MS.SRC_TABLE_NAME              = SRC_SYS_TCMD.TABLE_NAME
    AND MS.SRC_COLUMN_NAME             = SRC_SYS_TCMD.COLUMN_NAME
    AND MS.SRC_COL_DATATYPE            = SRC_SYS_TCMD.COL_DATATYPE
    AND MS.SRC_COL_LENGTH              = SRC_SYS_TCMD.COL_LENGTH
    AND MS.SRC_COL_PRECISION           = SRC_SYS_TCMD.COL_PRECISION
    AND MS.SRC_COL_SCALE               = SRC_SYS_TCMD.COL_SCALE)
    ) RES ON (GTT.SRC_SYSTEM_NAME      = RES.SYSTEM_NAME AND GTT.SRC_SYSTEM_ENVIRONMENT_NAME = RES.SYSTEM_ENV_NAME AND GTT.SRC_TABLE_NAME = RES.TABLE_NAME AND GTT.SRC_COLUMN_NAME = RES.COLUMN_NAME AND GTT.SRC_COL_DATATYPE = RES.COL_DATATYPE AND GTT.SRC_COL_LENGTH = RES.COL_LENGTH AND GTT.SRC_COL_PRECISION = RES.COL_PRECISION AND GTT.SRC_COL_SCALE = RES.COL_SCALE)
  WHEN MATCHED THEN
    UPDATE SET GTT.MATCH_SRC_SYS_COL_SCALE = RES.COL_SCALE;

    DELETE
    FROM MAP_SPCFCTN_DTLS_RPRT_SRC_GTT
    WHERE MATCH_SRC_SYS_TBL_NAME    IS NULL
    AND MATCH_SRC_SYS_ENV_NAME      IS NULL
    AND MATCH_SRC_SYS_COL_NAME      IS NULL
    AND MATCH_SRC_SYS_COL_DTYPE     IS NULL
    AND MATCH_SRC_SYS_COL_LENGTH    IS NULL
    AND MATCH_SRC_SYS_COL_PRECISION IS NULL
    AND MATCH_SRC_SYS_COL_SCALE     IS NULL
    AND MATCH_SRC_SYSTEM_NAME       IS NULL;

    MERGE INTO MAP_SPCFCTN_DTLS_RPRT_TGT_GTT GTT USING
    (SELECT DISTINCT TGT_SYS_TCMD.SYSTEM_NAME
    FROM MAP_SPCFCTN_DTLS_RPRT_TGT_GTT MS
    JOIN V_SYS_TBL_COL_MTDT_SIMPLE TGT_SYS_TCMD
    ON MS.TGT_SYSTEM_NAME         = TGT_SYS_TCMD.SYSTEM_NAME
    ) RES ON (GTT.TGT_SYSTEM_NAME = RES.SYSTEM_NAME)
  WHEN MATCHED THEN
    UPDATE SET GTT.MATCH_TGT_SYSTEM_NAME = RES.SYSTEM_NAME;

    DELETE
    FROM MAP_SPCFCTN_DTLS_RPRT_TGT_GTT
    WHERE MATCH_TGT_SYSTEM_NAME IS NULL;

    MERGE INTO MAP_SPCFCTN_DTLS_RPRT_TGT_GTT GTT USING
    (SELECT DISTINCT TGT_SYS_TCMD.SYSTEM_NAME,
      TGT_SYS_TCMD.SYSTEM_ENV_NAME
    FROM MAP_SPCFCTN_DTLS_RPRT_TGT_GTT MS
    INNER JOIN V_SYS_TBL_COL_MTDT_SIMPLE TGT_SYS_TCMD
    ON (MS.TGT_SYSTEM_NAME             = TGT_SYS_TCMD.SYSTEM_NAME
    AND MS.TGT_SYSTEM_ENVIRONMENT_NAME = TGT_SYS_TCMD.SYSTEM_ENV_NAME)
    ) RES ON (GTT.TGT_SYSTEM_NAME      = RES.SYSTEM_NAME AND GTT.TGT_SYSTEM_ENVIRONMENT_NAME = RES.SYSTEM_ENV_NAME)
  WHEN MATCHED THEN
    UPDATE SET GTT.MATCH_TGT_SYS_ENV_NAME = RES.SYSTEM_ENV_NAME;

    DELETE
    FROM MAP_SPCFCTN_DTLS_RPRT_TGT_GTT
    WHERE MATCH_TGT_SYS_ENV_NAME IS NULL
    AND MATCH_TGT_SYSTEM_NAME    IS NULL;

    MERGE INTO MAP_SPCFCTN_DTLS_RPRT_TGT_GTT GTT USING
    (SELECT DISTINCT TGT_SYS_TCMD.SYSTEM_NAME,
      TGT_SYS_TCMD.SYSTEM_ENV_NAME,
      TGT_SYS_TCMD.TABLE_NAME
    FROM MAP_SPCFCTN_DTLS_RPRT_TGT_GTT MS
    INNER JOIN V_SYS_TBL_COL_MTDT_SIMPLE TGT_SYS_TCMD
    ON (MS.TGT_SYSTEM_NAME             = TGT_SYS_TCMD.SYSTEM_NAME
    AND MS.TGT_SYSTEM_ENVIRONMENT_NAME = TGT_SYS_TCMD.SYSTEM_ENV_NAME
    AND MS.TGT_TABLE_NAME              = TGT_SYS_TCMD.TABLE_NAME)
    ) RES ON (GTT.TGT_SYSTEM_NAME      = RES.SYSTEM_NAME AND GTT.TGT_SYSTEM_ENVIRONMENT_NAME = RES.SYSTEM_ENV_NAME AND GTT.TGT_TABLE_NAME = RES.TABLE_NAME)
  WHEN MATCHED THEN
    UPDATE SET GTT.MATCH_TGT_SYS_TBL_NAME = RES.TABLE_NAME;

    DELETE
    FROM MAP_SPCFCTN_DTLS_RPRT_TGT_GTT
    WHERE MATCH_TGT_SYS_TBL_NAME IS NULL
    AND MATCH_TGT_SYS_ENV_NAME   IS NULL
    AND MATCH_TGT_SYSTEM_NAME    IS NULL;

    MERGE INTO MAP_SPCFCTN_DTLS_RPRT_TGT_GTT GTT USING
    (SELECT DISTINCT TGT_SYS_TCMD.SYSTEM_NAME,
      TGT_SYS_TCMD.SYSTEM_ENV_NAME,
      TGT_SYS_TCMD.TABLE_NAME,
      TGT_SYS_TCMD.COLUMN_NAME
    FROM MAP_SPCFCTN_DTLS_RPRT_TGT_GTT MS
    INNER JOIN V_SYS_TBL_COL_MTDT_SIMPLE TGT_SYS_TCMD
    ON (MS.TGT_SYSTEM_NAME             = TGT_SYS_TCMD.SYSTEM_NAME
    AND MS.TGT_SYSTEM_ENVIRONMENT_NAME = TGT_SYS_TCMD.SYSTEM_ENV_NAME
    AND MS.TGT_TABLE_NAME              = TGT_SYS_TCMD.TABLE_NAME
    AND MS.TGT_COLUMN_NAME             = TGT_SYS_TCMD.COLUMN_NAME)
    ) RES ON (GTT.TGT_SYSTEM_NAME      = RES.SYSTEM_NAME AND GTT.TGT_SYSTEM_ENVIRONMENT_NAME = RES.SYSTEM_ENV_NAME AND GTT.TGT_TABLE_NAME = RES.TABLE_NAME AND GTT.TGT_COLUMN_NAME = RES.COLUMN_NAME)
  WHEN MATCHED THEN
    UPDATE SET GTT.MATCH_TGT_SYS_COL_NAME = RES.COLUMN_NAME;

    DELETE
    FROM MAP_SPCFCTN_DTLS_RPRT_TGT_GTT
    WHERE MATCH_TGT_SYS_TBL_NAME IS NULL
    AND MATCH_TGT_SYS_ENV_NAME   IS NULL
    AND MATCH_TGT_SYS_COL_NAME   IS NULL
    AND MATCH_TGT_SYSTEM_NAME    IS NULL;

    MERGE INTO MAP_SPCFCTN_DTLS_RPRT_TGT_GTT GTT USING
    (SELECT DISTINCT TGT_SYS_TCMD.SYSTEM_NAME,
      TGT_SYS_TCMD.SYSTEM_ENV_NAME,
      TGT_SYS_TCMD.TABLE_NAME,
      TGT_SYS_TCMD.COLUMN_NAME,
      TGT_SYS_TCMD.COL_DATATYPE
    FROM MAP_SPCFCTN_DTLS_RPRT_TGT_GTT MS
    INNER JOIN V_SYS_TBL_COL_MTDT_SIMPLE TGT_SYS_TCMD
    ON (MS.TGT_SYSTEM_NAME             = TGT_SYS_TCMD.SYSTEM_NAME
    AND MS.TGT_SYSTEM_ENVIRONMENT_NAME = TGT_SYS_TCMD.SYSTEM_ENV_NAME
    AND MS.TGT_TABLE_NAME              = TGT_SYS_TCMD.TABLE_NAME
    AND MS.TGT_COLUMN_NAME             = TGT_SYS_TCMD.COLUMN_NAME
    AND MS.TGT_COL_DATATYPE            = TGT_SYS_TCMD.COL_DATATYPE)
    ) RES ON (GTT.TGT_SYSTEM_NAME      = RES.SYSTEM_NAME AND GTT.TGT_SYSTEM_ENVIRONMENT_NAME = RES.SYSTEM_ENV_NAME AND GTT.TGT_TABLE_NAME = RES.TABLE_NAME AND GTT.TGT_COLUMN_NAME = RES.COLUMN_NAME AND GTT.TGT_COL_DATATYPE = RES.COL_DATATYPE)
  WHEN MATCHED THEN
    UPDATE SET GTT.MATCH_TGT_SYS_COL_DTYPE = RES.COL_DATATYPE;

    DELETE
    FROM MAP_SPCFCTN_DTLS_RPRT_TGT_GTT
    WHERE MATCH_TGT_SYS_TBL_NAME IS NULL
    AND MATCH_TGT_SYS_ENV_NAME   IS NULL
    AND MATCH_TGT_SYS_COL_NAME   IS NULL
    AND MATCH_TGT_SYS_COL_DTYPE  IS NULL
    AND MATCH_TGT_SYSTEM_NAME    IS NULL;

    MERGE INTO MAP_SPCFCTN_DTLS_RPRT_TGT_GTT GTT USING
    (SELECT DISTINCT TGT_SYS_TCMD.SYSTEM_NAME,
      TGT_SYS_TCMD.SYSTEM_ENV_NAME,
      TGT_SYS_TCMD.TABLE_NAME,
      TGT_SYS_TCMD.COLUMN_NAME,
      TGT_SYS_TCMD.COL_DATATYPE,
      TGT_SYS_TCMD.COL_LENGTH
    FROM MAP_SPCFCTN_DTLS_RPRT_TGT_GTT MS
    INNER JOIN V_SYS_TBL_COL_MTDT_SIMPLE TGT_SYS_TCMD
    ON (MS.TGT_SYSTEM_NAME             = TGT_SYS_TCMD.SYSTEM_NAME
    AND MS.TGT_SYSTEM_ENVIRONMENT_NAME = TGT_SYS_TCMD.SYSTEM_ENV_NAME
    AND MS.TGT_TABLE_NAME              = TGT_SYS_TCMD.TABLE_NAME
    AND MS.TGT_COLUMN_NAME             = TGT_SYS_TCMD.COLUMN_NAME
    AND MS.TGT_COL_DATATYPE            = TGT_SYS_TCMD.COL_DATATYPE
    AND MS.TGT_COL_LENGTH              = TGT_SYS_TCMD.COL_LENGTH)
    ) RES ON (GTT.TGT_SYSTEM_NAME      = RES.SYSTEM_NAME AND GTT.TGT_SYSTEM_ENVIRONMENT_NAME = RES.SYSTEM_ENV_NAME AND GTT.TGT_TABLE_NAME = RES.TABLE_NAME AND GTT.TGT_COLUMN_NAME = RES.COLUMN_NAME AND GTT.TGT_COL_DATATYPE = RES.COL_DATATYPE AND GTT.TGT_COL_LENGTH = RES.COL_LENGTH)
  WHEN MATCHED THEN
    UPDATE SET GTT.MATCH_TGT_SYS_COL_LENGTH = RES.COL_LENGTH;

    DELETE
    FROM MAP_SPCFCTN_DTLS_RPRT_TGT_GTT
    WHERE MATCH_TGT_SYS_TBL_NAME IS NULL
    AND MATCH_TGT_SYS_ENV_NAME   IS NULL
    AND MATCH_TGT_SYS_COL_NAME   IS NULL
    AND MATCH_TGT_SYS_COL_DTYPE  IS NULL
    AND MATCH_TGT_SYS_COL_LENGTH IS NULL
    AND MATCH_TGT_SYSTEM_NAME    IS NULL;

    MERGE INTO MAP_SPCFCTN_DTLS_RPRT_TGT_GTT GTT USING
    (SELECT DISTINCT TGT_SYS_TCMD.SYSTEM_NAME,
      TGT_SYS_TCMD.SYSTEM_ENV_NAME,
      TGT_SYS_TCMD.TABLE_NAME,
      TGT_SYS_TCMD.COLUMN_NAME,
      TGT_SYS_TCMD.COL_DATATYPE,
      TGT_SYS_TCMD.COL_LENGTH,
      TGT_SYS_TCMD.COL_PRECISION
    FROM MAP_SPCFCTN_DTLS_RPRT_TGT_GTT MS
    INNER JOIN V_SYS_TBL_COL_MTDT_SIMPLE TGT_SYS_TCMD
    ON (MS.TGT_SYSTEM_NAME             = TGT_SYS_TCMD.SYSTEM_NAME
    AND MS.TGT_SYSTEM_ENVIRONMENT_NAME = TGT_SYS_TCMD.SYSTEM_ENV_NAME
    AND MS.TGT_TABLE_NAME              = TGT_SYS_TCMD.TABLE_NAME
    AND MS.TGT_COLUMN_NAME             = TGT_SYS_TCMD.COLUMN_NAME
    AND MS.TGT_COL_DATATYPE            = TGT_SYS_TCMD.COL_DATATYPE
    AND MS.TGT_COL_LENGTH              = TGT_SYS_TCMD.COL_LENGTH
    AND MS.TGT_COL_PRECISION           = TGT_SYS_TCMD.COL_PRECISION)
    ) RES ON (GTT.TGT_SYSTEM_NAME      = RES.SYSTEM_NAME AND GTT.TGT_SYSTEM_ENVIRONMENT_NAME = RES.SYSTEM_ENV_NAME AND GTT.TGT_TABLE_NAME = RES.TABLE_NAME AND GTT.TGT_COLUMN_NAME = RES.COLUMN_NAME AND GTT.TGT_COL_DATATYPE = RES.COL_DATATYPE AND GTT.TGT_COL_LENGTH = RES.COL_LENGTH AND GTT.TGT_COL_PRECISION = RES.COL_PRECISION)
  WHEN MATCHED THEN
    UPDATE SET GTT.MATCH_TGT_SYS_COL_PRECISION = RES.COL_PRECISION;

    DELETE
    FROM MAP_SPCFCTN_DTLS_RPRT_TGT_GTT
    WHERE MATCH_TGT_SYS_TBL_NAME    IS NULL
    AND MATCH_TGT_SYS_ENV_NAME      IS NULL
    AND MATCH_TGT_SYS_COL_NAME      IS NULL
    AND MATCH_TGT_SYS_COL_DTYPE     IS NULL
    AND MATCH_TGT_SYS_COL_LENGTH    IS NULL
    AND MATCH_TGT_SYS_COL_PRECISION IS NULL
    AND MATCH_TGT_SYSTEM_NAME       IS NULL;

    MERGE INTO MAP_SPCFCTN_DTLS_RPRT_TGT_GTT GTT USING
    (SELECT DISTINCT TGT_SYS_TCMD.SYSTEM_NAME,
      TGT_SYS_TCMD.SYSTEM_ENV_NAME,
      TGT_SYS_TCMD.TABLE_NAME,
      TGT_SYS_TCMD.COLUMN_NAME,
      TGT_SYS_TCMD.COL_DATATYPE,
      TGT_SYS_TCMD.COL_LENGTH,
      TGT_SYS_TCMD.COL_PRECISION,
      TGT_SYS_TCMD.COL_SCALE
    FROM MAP_SPCFCTN_DTLS_RPRT_TGT_GTT MS
    INNER JOIN V_SYS_TBL_COL_MTDT_SIMPLE TGT_SYS_TCMD
    ON (MS.TGT_SYSTEM_NAME             = TGT_SYS_TCMD.SYSTEM_NAME
    AND MS.TGT_SYSTEM_ENVIRONMENT_NAME = TGT_SYS_TCMD.SYSTEM_ENV_NAME
    AND MS.TGT_TABLE_NAME              = TGT_SYS_TCMD.TABLE_NAME
    AND MS.TGT_COLUMN_NAME             = TGT_SYS_TCMD.COLUMN_NAME
    AND MS.TGT_COL_DATATYPE            = TGT_SYS_TCMD.COL_DATATYPE
    AND MS.TGT_COL_LENGTH              = TGT_SYS_TCMD.COL_LENGTH
    AND MS.TGT_COL_PRECISION           = TGT_SYS_TCMD.COL_PRECISION
    AND MS.TGT_COL_SCALE               = TGT_SYS_TCMD.COL_SCALE)
    ) RES ON (GTT.TGT_SYSTEM_NAME      = RES.SYSTEM_NAME AND GTT.TGT_SYSTEM_ENVIRONMENT_NAME = RES.SYSTEM_ENV_NAME AND GTT.TGT_TABLE_NAME = RES.TABLE_NAME AND GTT.TGT_COLUMN_NAME = RES.COLUMN_NAME AND GTT.TGT_COL_DATATYPE = RES.COL_DATATYPE AND GTT.TGT_COL_LENGTH = RES.COL_LENGTH AND GTT.TGT_COL_PRECISION = RES.COL_PRECISION AND GTT.TGT_COL_SCALE = RES.COL_SCALE)
  WHEN MATCHED THEN
    UPDATE SET GTT.MATCH_TGT_SYS_COL_SCALE = RES.COL_SCALE;

    DELETE
    FROM MAP_SPCFCTN_DTLS_RPRT_TGT_GTT
    WHERE MATCH_TGT_SYS_TBL_NAME    IS NULL
    AND MATCH_TGT_SYS_ENV_NAME      IS NULL
    AND MATCH_TGT_SYS_COL_NAME      IS NULL
    AND MATCH_TGT_SYS_COL_DTYPE     IS NULL
    AND MATCH_TGT_SYS_COL_LENGTH    IS NULL
    AND MATCH_TGT_SYS_COL_PRECISION IS NULL
    AND MATCH_TGT_SYS_COL_SCALE     IS NULL
    AND MATCH_TGT_SYSTEM_NAME       IS NULL;

    MERGE INTO MAP_SPCFCTN_DTLS_RPRT_GTT GTT USING
    (SELECT DISTINCT SRC.MAP_ID,
      SRC.MATCH_SRC_SYSTEM_NAME
    FROM MAP_SPCFCTN_DTLS_RPRT_GTT MS
    JOIN MAP_SPCFCTN_DTLS_RPRT_SRC_GTT SRC
    ON MS.MAP_ID           = SRC.MAP_ID
    AND MS.SRC_SYSTEM_NAME = SRC.MATCH_SRC_SYSTEM_NAME
    ) RES ON (GTT.MAP_ID   = RES.MAP_ID AND GTT.SRC_SYSTEM_NAME = RES.MATCH_SRC_SYSTEM_NAME)
  WHEN MATCHED THEN
    UPDATE
    SET GTT.MATCH_SRC_SYSTEM_NAME = RES.MATCH_SRC_SYSTEM_NAME;

    MERGE INTO MAP_SPCFCTN_DTLS_RPRT_GTT GTT USING
    (SELECT DISTINCT SRC.MAP_ID,
      SRC.MATCH_SRC_SYSTEM_NAME,
      SRC.MATCH_SRC_SYS_ENV_NAME
    FROM MAP_SPCFCTN_DTLS_RPRT_GTT MS
    JOIN MAP_SPCFCTN_DTLS_RPRT_SRC_GTT SRC
    ON MS.MAP_ID                       = SRC.MAP_ID
    AND MS.SRC_SYSTEM_NAME             = SRC.MATCH_SRC_SYSTEM_NAME
    AND MS.SRC_SYSTEM_ENVIRONMENT_NAME = SRC.MATCH_SRC_SYS_ENV_NAME
    ) RES ON (GTT.MAP_ID               = RES.MAP_ID AND GTT.SRC_SYSTEM_NAME = RES.MATCH_SRC_SYSTEM_NAME AND GTT.SRC_SYSTEM_ENVIRONMENT_NAME = RES.MATCH_SRC_SYS_ENV_NAME)
  WHEN MATCHED THEN
    UPDATE
    SET GTT.MATCH_SRC_SYS_ENV_NAME = RES.MATCH_SRC_SYS_ENV_NAME;

    MERGE INTO MAP_SPCFCTN_DTLS_RPRT_GTT GTT USING
    (SELECT DISTINCT SRC.MAP_ID,
      SRC.MATCH_SRC_SYSTEM_NAME,
      SRC.MATCH_SRC_SYS_ENV_NAME,
      SRC.MATCH_SRC_SYS_TBL_NAME
    FROM MAP_SPCFCTN_DTLS_RPRT_GTT MS
    JOIN MAP_SPCFCTN_DTLS_RPRT_SRC_GTT SRC
    ON MS.MAP_ID                       = SRC.MAP_ID
    AND MS.SRC_SYSTEM_NAME             = SRC.MATCH_SRC_SYSTEM_NAME
    AND MS.SRC_SYSTEM_ENVIRONMENT_NAME = SRC.MATCH_SRC_SYS_ENV_NAME
    AND MS.SRC_TABLE_NAME              = SRC.MATCH_SRC_SYS_TBL_NAME
    ) RES ON (GTT.MAP_ID               = RES.MAP_ID AND GTT.SRC_SYSTEM_NAME = RES.MATCH_SRC_SYSTEM_NAME AND GTT.SRC_SYSTEM_ENVIRONMENT_NAME = RES.MATCH_SRC_SYS_ENV_NAME AND GTT.SRC_TABLE_NAME = RES.MATCH_SRC_SYS_TBL_NAME)
  WHEN MATCHED THEN
    UPDATE
    SET GTT.MATCH_SRC_SYS_TBL_NAME = RES.MATCH_SRC_SYS_TBL_NAME;

    MERGE INTO MAP_SPCFCTN_DTLS_RPRT_GTT GTT USING
    (SELECT DISTINCT SRC.MAP_ID,
      SRC.MATCH_SRC_SYSTEM_NAME,
      SRC.MATCH_SRC_SYS_ENV_NAME,
      SRC.MATCH_SRC_SYS_TBL_NAME,
      SRC.MATCH_SRC_SYS_COL_NAME
    FROM MAP_SPCFCTN_DTLS_RPRT_GTT MS
    JOIN MAP_SPCFCTN_DTLS_RPRT_SRC_GTT SRC
    ON MS.MAP_ID                       = SRC.MAP_ID
    AND MS.SRC_SYSTEM_NAME             = SRC.MATCH_SRC_SYSTEM_NAME
    AND MS.SRC_SYSTEM_ENVIRONMENT_NAME = SRC.MATCH_SRC_SYS_ENV_NAME
    AND MS.SRC_TABLE_NAME              = SRC.MATCH_SRC_SYS_TBL_NAME
    AND MS.SRC_COLUMN_NAME             = SRC.MATCH_SRC_SYS_COL_NAME
    ) RES ON (GTT.MAP_ID               = RES.MAP_ID AND GTT.SRC_SYSTEM_NAME = RES.MATCH_SRC_SYSTEM_NAME AND GTT.SRC_SYSTEM_ENVIRONMENT_NAME = RES.MATCH_SRC_SYS_ENV_NAME AND GTT.SRC_TABLE_NAME = RES.MATCH_SRC_SYS_TBL_NAME AND GTT.SRC_COLUMN_NAME = RES.MATCH_SRC_SYS_COL_NAME)
  WHEN MATCHED THEN
    UPDATE
    SET GTT.MATCH_SRC_SYS_COL_NAME = RES.MATCH_SRC_SYS_COL_NAME;

    MERGE INTO MAP_SPCFCTN_DTLS_RPRT_GTT GTT USING
    (SELECT DISTINCT SRC.MAP_ID,
      SRC.MATCH_SRC_SYSTEM_NAME,
      SRC.MATCH_SRC_SYS_ENV_NAME,
      SRC.MATCH_SRC_SYS_TBL_NAME,
      SRC.MATCH_SRC_SYS_COL_NAME,
      SRC.MATCH_SRC_SYS_COL_DTYPE
    FROM MAP_SPCFCTN_DTLS_RPRT_GTT MS
    JOIN MAP_SPCFCTN_DTLS_RPRT_SRC_GTT SRC
    ON MS.MAP_ID                       = SRC.MAP_ID
    AND MS.SRC_SYSTEM_NAME             = SRC.MATCH_SRC_SYSTEM_NAME
    AND MS.SRC_SYSTEM_ENVIRONMENT_NAME = SRC.MATCH_SRC_SYS_ENV_NAME
    AND MS.SRC_TABLE_NAME              = SRC.MATCH_SRC_SYS_TBL_NAME
    AND MS.SRC_COLUMN_NAME             = SRC.MATCH_SRC_SYS_COL_NAME
    AND MS.SRC_COL_DATATYPE            = SRC.MATCH_SRC_SYS_COL_DTYPE
    ) RES ON (GTT.MAP_ID               = RES.MAP_ID AND GTT.SRC_SYSTEM_NAME = RES.MATCH_SRC_SYSTEM_NAME AND GTT.SRC_SYSTEM_ENVIRONMENT_NAME = RES.MATCH_SRC_SYS_ENV_NAME AND GTT.SRC_TABLE_NAME = RES.MATCH_SRC_SYS_TBL_NAME AND GTT.SRC_COLUMN_NAME = RES.MATCH_SRC_SYS_COL_NAME AND GTT.SRC_COL_DATATYPE = RES.MATCH_SRC_SYS_COL_DTYPE)
  WHEN MATCHED THEN
    UPDATE
    SET GTT.MATCH_SRC_SYS_COL_DTYPE = RES.MATCH_SRC_SYS_COL_DTYPE;

    MERGE INTO MAP_SPCFCTN_DTLS_RPRT_GTT GTT USING
    (SELECT DISTINCT SRC.MAP_ID,
      SRC.MATCH_SRC_SYSTEM_NAME,
      SRC.MATCH_SRC_SYS_ENV_NAME,
      SRC.MATCH_SRC_SYS_TBL_NAME,
      SRC.MATCH_SRC_SYS_COL_NAME,
      SRC.MATCH_SRC_SYS_COL_DTYPE,
      SRC.MATCH_SRC_SYS_COL_LENGTH
    FROM MAP_SPCFCTN_DTLS_RPRT_GTT MS
    JOIN MAP_SPCFCTN_DTLS_RPRT_SRC_GTT SRC
    ON MS.MAP_ID                       = SRC.MAP_ID
    AND MS.SRC_SYSTEM_NAME             = SRC.MATCH_SRC_SYSTEM_NAME
    AND MS.SRC_SYSTEM_ENVIRONMENT_NAME = SRC.MATCH_SRC_SYS_ENV_NAME
    AND MS.SRC_TABLE_NAME              = SRC.MATCH_SRC_SYS_TBL_NAME
    AND MS.SRC_COLUMN_NAME             = SRC.MATCH_SRC_SYS_COL_NAME
    AND MS.SRC_COL_DATATYPE            = SRC.MATCH_SRC_SYS_COL_DTYPE
    AND MS.SRC_COL_LENGTH              = SRC.MATCH_SRC_SYS_COL_LENGTH
    ) RES ON (GTT.MAP_ID               = RES.MAP_ID AND GTT.SRC_SYSTEM_NAME = RES.MATCH_SRC_SYSTEM_NAME AND GTT.SRC_SYSTEM_ENVIRONMENT_NAME = RES.MATCH_SRC_SYS_ENV_NAME AND GTT.SRC_TABLE_NAME = RES.MATCH_SRC_SYS_TBL_NAME AND GTT.SRC_COLUMN_NAME = RES.MATCH_SRC_SYS_COL_NAME AND GTT.SRC_COL_DATATYPE = RES.MATCH_SRC_SYS_COL_DTYPE AND GTT.SRC_COL_LENGTH = RES.MATCH_SRC_SYS_COL_LENGTH)
  WHEN MATCHED THEN
    UPDATE
    SET GTT.MATCH_SRC_SYS_COL_LENGTH = RES.MATCH_SRC_SYS_COL_LENGTH;

    MERGE INTO MAP_SPCFCTN_DTLS_RPRT_GTT GTT USING
    (SELECT DISTINCT SRC.MAP_ID,
      SRC.MATCH_SRC_SYSTEM_NAME,
      SRC.MATCH_SRC_SYS_ENV_NAME,
      SRC.MATCH_SRC_SYS_TBL_NAME,
      SRC.MATCH_SRC_SYS_COL_NAME,
      SRC.MATCH_SRC_SYS_COL_DTYPE,
      SRC.MATCH_SRC_SYS_COL_LENGTH,
      SRC.MATCH_SRC_SYS_COL_PRECISION
    FROM MAP_SPCFCTN_DTLS_RPRT_GTT MS
    JOIN MAP_SPCFCTN_DTLS_RPRT_SRC_GTT SRC
    ON MS.MAP_ID                       = SRC.MAP_ID
    AND MS.SRC_SYSTEM_NAME             = SRC.MATCH_SRC_SYSTEM_NAME
    AND MS.SRC_SYSTEM_ENVIRONMENT_NAME = SRC.MATCH_SRC_SYS_ENV_NAME
    AND MS.SRC_TABLE_NAME              = SRC.MATCH_SRC_SYS_TBL_NAME
    AND MS.SRC_COLUMN_NAME             = SRC.MATCH_SRC_SYS_COL_NAME
    AND MS.SRC_COL_DATATYPE            = SRC.MATCH_SRC_SYS_COL_DTYPE
    AND MS.SRC_COL_LENGTH              = SRC.MATCH_SRC_SYS_COL_LENGTH
    AND MS.SRC_COL_PRECISION           = SRC.MATCH_SRC_SYS_COL_PRECISION
    ) RES ON (GTT.MAP_ID               = RES.MAP_ID AND GTT.SRC_SYSTEM_NAME = RES.MATCH_SRC_SYSTEM_NAME AND GTT.SRC_SYSTEM_ENVIRONMENT_NAME = RES.MATCH_SRC_SYS_ENV_NAME AND GTT.SRC_TABLE_NAME = RES.MATCH_SRC_SYS_TBL_NAME AND GTT.SRC_COLUMN_NAME = RES.MATCH_SRC_SYS_COL_NAME AND GTT.SRC_COL_DATATYPE = RES.MATCH_SRC_SYS_COL_DTYPE AND GTT.SRC_COL_LENGTH = RES.MATCH_SRC_SYS_COL_LENGTH AND GTT.SRC_COL_PRECISION = RES.MATCH_SRC_SYS_COL_PRECISION)
  WHEN MATCHED THEN
    UPDATE
    SET GTT.MATCH_SRC_SYS_COL_PRECISION = RES.MATCH_SRC_SYS_COL_PRECISION;

    MERGE INTO MAP_SPCFCTN_DTLS_RPRT_GTT GTT USING
    (SELECT DISTINCT SRC.MAP_ID,
      SRC.MATCH_SRC_SYSTEM_NAME,
      SRC.MATCH_SRC_SYS_ENV_NAME,
      SRC.MATCH_SRC_SYS_TBL_NAME,
      SRC.MATCH_SRC_SYS_COL_NAME,
      SRC.MATCH_SRC_SYS_COL_DTYPE,
      SRC.MATCH_SRC_SYS_COL_LENGTH,
      SRC.MATCH_SRC_SYS_COL_PRECISION,
      SRC.MATCH_SRC_SYS_COL_SCALE
    FROM MAP_SPCFCTN_DTLS_RPRT_GTT MS
    JOIN MAP_SPCFCTN_DTLS_RPRT_SRC_GTT SRC
    ON MS.MAP_ID                       = SRC.MAP_ID
    AND MS.SRC_SYSTEM_NAME             = SRC.MATCH_SRC_SYSTEM_NAME
    AND MS.SRC_SYSTEM_ENVIRONMENT_NAME = SRC.MATCH_SRC_SYS_ENV_NAME
    AND MS.SRC_TABLE_NAME              = SRC.MATCH_SRC_SYS_TBL_NAME
    AND MS.SRC_COLUMN_NAME             = SRC.MATCH_SRC_SYS_COL_NAME
    AND MS.SRC_COL_DATATYPE            = SRC.MATCH_SRC_SYS_COL_DTYPE
    AND MS.SRC_COL_LENGTH              = SRC.MATCH_SRC_SYS_COL_LENGTH
    AND MS.SRC_COL_PRECISION           = SRC.MATCH_SRC_SYS_COL_PRECISION
    AND MS.SRC_COL_SCALE               = SRC.MATCH_SRC_SYS_COL_SCALE
    ) RES ON (GTT.MAP_ID               = RES.MAP_ID AND GTT.SRC_SYSTEM_NAME = RES.MATCH_SRC_SYSTEM_NAME AND GTT.SRC_SYSTEM_ENVIRONMENT_NAME = RES.MATCH_SRC_SYS_ENV_NAME AND GTT.SRC_TABLE_NAME = RES.MATCH_SRC_SYS_TBL_NAME AND GTT.SRC_COLUMN_NAME = RES.MATCH_SRC_SYS_COL_NAME AND GTT.SRC_COL_DATATYPE = RES.MATCH_SRC_SYS_COL_DTYPE AND GTT.SRC_COL_LENGTH = RES.MATCH_SRC_SYS_COL_LENGTH AND GTT.SRC_COL_PRECISION = RES.MATCH_SRC_SYS_COL_PRECISION AND GTT.SRC_COL_SCALE = RES.MATCH_SRC_SYS_COL_SCALE)
  WHEN MATCHED THEN
    UPDATE
    SET GTT.MATCH_SRC_SYS_COL_SCALE = RES.MATCH_SRC_SYS_COL_SCALE;

    MERGE INTO MAP_SPCFCTN_DTLS_RPRT_GTT GTT USING
    (SELECT DISTINCT TGT.MAP_ID,
      TGT.MATCH_TGT_SYSTEM_NAME
    FROM MAP_SPCFCTN_DTLS_RPRT_GTT MS
    JOIN MAP_SPCFCTN_DTLS_RPRT_TGT_GTT TGT
    ON MS.MAP_ID           = TGT.MAP_ID
    AND MS.TGT_SYSTEM_NAME = TGT.MATCH_TGT_SYSTEM_NAME
    ) RES ON (GTT.MAP_ID   = RES.MAP_ID AND GTT.TGT_SYSTEM_NAME = RES.MATCH_TGT_SYSTEM_NAME)
  WHEN MATCHED THEN
    UPDATE
    SET GTT.MATCH_TGT_SYSTEM_NAME = RES.MATCH_TGT_SYSTEM_NAME;

    MERGE INTO MAP_SPCFCTN_DTLS_RPRT_GTT GTT USING
    (SELECT DISTINCT TGT.MAP_ID,
      TGT.MATCH_TGT_SYSTEM_NAME,
      TGT.MATCH_TGT_SYS_ENV_NAME
    FROM MAP_SPCFCTN_DTLS_RPRT_GTT MS
    JOIN MAP_SPCFCTN_DTLS_RPRT_TGT_GTT TGT
    ON MS.MAP_ID                       = TGT.MAP_ID
    AND MS.TGT_SYSTEM_NAME             = TGT.MATCH_TGT_SYSTEM_NAME
    AND MS.TGT_SYSTEM_ENVIRONMENT_NAME = TGT.MATCH_TGT_SYS_ENV_NAME
    ) RES ON (GTT.MAP_ID               = RES.MAP_ID AND GTT.TGT_SYSTEM_NAME = RES.MATCH_TGT_SYSTEM_NAME AND GTT.TGT_SYSTEM_ENVIRONMENT_NAME = RES.MATCH_TGT_SYS_ENV_NAME)
  WHEN MATCHED THEN
    UPDATE
    SET GTT.MATCH_TGT_SYS_ENV_NAME = RES.MATCH_TGT_SYS_ENV_NAME;

    MERGE INTO MAP_SPCFCTN_DTLS_RPRT_GTT GTT USING
    (SELECT DISTINCT TGT.MAP_ID,
      TGT.MATCH_TGT_SYSTEM_NAME,
      TGT.MATCH_TGT_SYS_ENV_NAME,
      TGT.MATCH_TGT_SYS_TBL_NAME
    FROM MAP_SPCFCTN_DTLS_RPRT_GTT MS
    JOIN MAP_SPCFCTN_DTLS_RPRT_TGT_GTT TGT
    ON MS.MAP_ID                       = TGT.MAP_ID
    AND MS.TGT_SYSTEM_NAME             = TGT.MATCH_TGT_SYSTEM_NAME
    AND MS.TGT_SYSTEM_ENVIRONMENT_NAME = TGT.MATCH_TGT_SYS_ENV_NAME
    AND MS.TGT_TABLE_NAME              = TGT.MATCH_TGT_SYS_TBL_NAME
    ) RES ON (GTT.MAP_ID               = RES.MAP_ID AND GTT.TGT_SYSTEM_NAME = RES.MATCH_TGT_SYSTEM_NAME AND GTT.TGT_SYSTEM_ENVIRONMENT_NAME = RES.MATCH_TGT_SYS_ENV_NAME AND GTT.TGT_TABLE_NAME = RES.MATCH_TGT_SYS_TBL_NAME)
  WHEN MATCHED THEN
    UPDATE
    SET GTT.MATCH_TGT_SYS_TBL_NAME = RES.MATCH_TGT_SYS_TBL_NAME;

    MERGE INTO MAP_SPCFCTN_DTLS_RPRT_GTT GTT USING
    (SELECT DISTINCT TGT.MAP_ID,
      TGT.MATCH_TGT_SYSTEM_NAME,
      TGT.MATCH_TGT_SYS_ENV_NAME,
      TGT.MATCH_TGT_SYS_TBL_NAME,
      TGT.MATCH_TGT_SYS_COL_NAME
    FROM MAP_SPCFCTN_DTLS_RPRT_GTT MS
    JOIN MAP_SPCFCTN_DTLS_RPRT_TGT_GTT TGT
    ON MS.MAP_ID                       = TGT.MAP_ID
    AND MS.TGT_SYSTEM_NAME             = TGT.MATCH_TGT_SYSTEM_NAME
    AND MS.TGT_SYSTEM_ENVIRONMENT_NAME = TGT.MATCH_TGT_SYS_ENV_NAME
    AND MS.TGT_TABLE_NAME              = TGT.MATCH_TGT_SYS_TBL_NAME
    AND MS.TGT_COLUMN_NAME             = TGT.MATCH_TGT_SYS_COL_NAME
    ) RES ON (GTT.MAP_ID               = RES.MAP_ID AND GTT.TGT_SYSTEM_NAME = RES.MATCH_TGT_SYSTEM_NAME AND GTT.TGT_SYSTEM_ENVIRONMENT_NAME = RES.MATCH_TGT_SYS_ENV_NAME AND GTT.TGT_TABLE_NAME = RES.MATCH_TGT_SYS_TBL_NAME AND GTT.TGT_COLUMN_NAME = RES.MATCH_TGT_SYS_COL_NAME)
  WHEN MATCHED THEN
    UPDATE
    SET GTT.MATCH_TGT_SYS_COL_NAME = RES.MATCH_TGT_SYS_COL_NAME;

    MERGE INTO MAP_SPCFCTN_DTLS_RPRT_GTT GTT USING
    (SELECT DISTINCT TGT.MAP_ID,
      TGT.MATCH_TGT_SYSTEM_NAME,
      TGT.MATCH_TGT_SYS_ENV_NAME,
      TGT.MATCH_TGT_SYS_TBL_NAME,
      TGT.MATCH_TGT_SYS_COL_NAME,
      TGT.MATCH_TGT_SYS_COL_DTYPE
    FROM MAP_SPCFCTN_DTLS_RPRT_GTT MS
    JOIN MAP_SPCFCTN_DTLS_RPRT_TGT_GTT TGT
    ON MS.MAP_ID                       = TGT.MAP_ID
    AND MS.TGT_SYSTEM_NAME             = TGT.MATCH_TGT_SYSTEM_NAME
    AND MS.TGT_SYSTEM_ENVIRONMENT_NAME = TGT.MATCH_TGT_SYS_ENV_NAME
    AND MS.TGT_TABLE_NAME              = TGT.MATCH_TGT_SYS_TBL_NAME
    AND MS.TGT_COLUMN_NAME             = TGT.MATCH_TGT_SYS_COL_NAME
    AND MS.TGT_COL_DATATYPE            = TGT.MATCH_TGT_SYS_COL_DTYPE
    ) RES ON (GTT.MAP_ID               = RES.MAP_ID AND GTT.TGT_SYSTEM_NAME = RES.MATCH_TGT_SYSTEM_NAME AND GTT.TGT_SYSTEM_ENVIRONMENT_NAME = RES.MATCH_TGT_SYS_ENV_NAME AND GTT.TGT_TABLE_NAME = RES.MATCH_TGT_SYS_TBL_NAME AND GTT.TGT_COLUMN_NAME = RES.MATCH_TGT_SYS_COL_NAME AND GTT.TGT_COL_DATATYPE = RES.MATCH_TGT_SYS_COL_DTYPE)
  WHEN MATCHED THEN
    UPDATE
    SET GTT.MATCH_TGT_SYS_COL_DTYPE = RES.MATCH_TGT_SYS_COL_DTYPE;

    MERGE INTO MAP_SPCFCTN_DTLS_RPRT_GTT GTT USING
    (SELECT DISTINCT TGT.MAP_ID,
      TGT.MATCH_TGT_SYSTEM_NAME,
      TGT.MATCH_TGT_SYS_ENV_NAME,
      TGT.MATCH_TGT_SYS_TBL_NAME,
      TGT.MATCH_TGT_SYS_COL_NAME,
      TGT.MATCH_TGT_SYS_COL_DTYPE,
      TGT.MATCH_TGT_SYS_COL_LENGTH
    FROM MAP_SPCFCTN_DTLS_RPRT_GTT MS
    JOIN MAP_SPCFCTN_DTLS_RPRT_TGT_GTT TGT
    ON MS.MAP_ID                       = TGT.MAP_ID
    AND MS.TGT_SYSTEM_NAME             = TGT.MATCH_TGT_SYSTEM_NAME
    AND MS.TGT_SYSTEM_ENVIRONMENT_NAME = TGT.MATCH_TGT_SYS_ENV_NAME
    AND MS.TGT_TABLE_NAME              = TGT.MATCH_TGT_SYS_TBL_NAME
    AND MS.TGT_COLUMN_NAME             = TGT.MATCH_TGT_SYS_COL_NAME
    AND MS.TGT_COL_DATATYPE            = TGT.MATCH_TGT_SYS_COL_DTYPE
    AND MS.TGT_COL_LENGTH              = TGT.MATCH_TGT_SYS_COL_LENGTH
    ) RES ON (GTT.MAP_ID               = RES.MAP_ID AND GTT.TGT_SYSTEM_NAME = RES.MATCH_TGT_SYSTEM_NAME AND GTT.TGT_SYSTEM_ENVIRONMENT_NAME = RES.MATCH_TGT_SYS_ENV_NAME AND GTT.TGT_TABLE_NAME = RES.MATCH_TGT_SYS_TBL_NAME AND GTT.TGT_COLUMN_NAME = RES.MATCH_TGT_SYS_COL_NAME AND GTT.TGT_COL_DATATYPE = RES.MATCH_TGT_SYS_COL_DTYPE AND GTT.TGT_COL_LENGTH = RES.MATCH_TGT_SYS_COL_LENGTH)
  WHEN MATCHED THEN
    UPDATE
    SET GTT.MATCH_TGT_SYS_COL_LENGTH = RES.MATCH_TGT_SYS_COL_LENGTH;

    MERGE INTO MAP_SPCFCTN_DTLS_RPRT_GTT GTT USING
    (SELECT DISTINCT TGT.MAP_ID,
      TGT.MATCH_TGT_SYSTEM_NAME,
      TGT.MATCH_TGT_SYS_ENV_NAME,
      TGT.MATCH_TGT_SYS_TBL_NAME,
      TGT.MATCH_TGT_SYS_COL_NAME,
      TGT.MATCH_TGT_SYS_COL_DTYPE,
      TGT.MATCH_TGT_SYS_COL_LENGTH,
      TGT.MATCH_TGT_SYS_COL_PRECISION
    FROM MAP_SPCFCTN_DTLS_RPRT_GTT MS
    JOIN MAP_SPCFCTN_DTLS_RPRT_TGT_GTT TGT
    ON MS.MAP_ID                       = TGT.MAP_ID
    AND MS.TGT_SYSTEM_NAME             = TGT.MATCH_TGT_SYSTEM_NAME
    AND MS.TGT_SYSTEM_ENVIRONMENT_NAME = TGT.MATCH_TGT_SYS_ENV_NAME
    AND MS.TGT_TABLE_NAME              = TGT.MATCH_TGT_SYS_TBL_NAME
    AND MS.TGT_COLUMN_NAME             = TGT.MATCH_TGT_SYS_COL_NAME
    AND MS.TGT_COL_DATATYPE            = TGT.MATCH_TGT_SYS_COL_DTYPE
    AND MS.TGT_COL_LENGTH              = TGT.MATCH_TGT_SYS_COL_LENGTH
    AND MS.TGT_COL_PRECISION           = TGT.MATCH_TGT_SYS_COL_PRECISION
    ) RES ON (GTT.MAP_ID               = RES.MAP_ID AND GTT.TGT_SYSTEM_NAME = RES.MATCH_TGT_SYSTEM_NAME AND GTT.TGT_SYSTEM_ENVIRONMENT_NAME = RES.MATCH_TGT_SYS_ENV_NAME AND GTT.TGT_TABLE_NAME = RES.MATCH_TGT_SYS_TBL_NAME AND GTT.TGT_COLUMN_NAME = RES.MATCH_TGT_SYS_COL_NAME AND GTT.TGT_COL_DATATYPE = RES.MATCH_TGT_SYS_COL_DTYPE AND GTT.TGT_COL_LENGTH = RES.MATCH_TGT_SYS_COL_LENGTH AND GTT.TGT_COL_PRECISION = RES.MATCH_TGT_SYS_COL_PRECISION)
  WHEN MATCHED THEN
    UPDATE
    SET GTT.MATCH_TGT_SYS_COL_PRECISION = RES.MATCH_TGT_SYS_COL_PRECISION;

    MERGE INTO MAP_SPCFCTN_DTLS_RPRT_GTT GTT USING
    (SELECT DISTINCT TGT.MAP_ID,
      TGT.MATCH_TGT_SYSTEM_NAME,
      TGT.MATCH_TGT_SYS_ENV_NAME,
      TGT.MATCH_TGT_SYS_TBL_NAME,
      TGT.MATCH_TGT_SYS_COL_NAME,
      TGT.MATCH_TGT_SYS_COL_DTYPE,
      TGT.MATCH_TGT_SYS_COL_LENGTH,
      TGT.MATCH_TGT_SYS_COL_PRECISION,
      TGT.MATCH_TGT_SYS_COL_SCALE
    FROM MAP_SPCFCTN_DTLS_RPRT_GTT MS
    JOIN MAP_SPCFCTN_DTLS_RPRT_TGT_GTT TGT
    ON MS.MAP_ID                       = TGT.MAP_ID
    AND MS.TGT_SYSTEM_NAME             = TGT.MATCH_TGT_SYSTEM_NAME
    AND MS.TGT_SYSTEM_ENVIRONMENT_NAME = TGT.MATCH_TGT_SYS_ENV_NAME
    AND MS.TGT_TABLE_NAME              = TGT.MATCH_TGT_SYS_TBL_NAME
    AND MS.TGT_COLUMN_NAME             = TGT.MATCH_TGT_SYS_COL_NAME
    AND MS.TGT_COL_DATATYPE            = TGT.MATCH_TGT_SYS_COL_DTYPE
    AND MS.TGT_COL_LENGTH              = TGT.MATCH_TGT_SYS_COL_LENGTH
    AND MS.TGT_COL_PRECISION           = TGT.MATCH_TGT_SYS_COL_PRECISION
    AND MS.TGT_COL_SCALE               = TGT.MATCH_TGT_SYS_COL_SCALE
    ) RES ON (GTT.MAP_ID               = RES.MAP_ID AND GTT.TGT_SYSTEM_NAME = RES.MATCH_TGT_SYSTEM_NAME AND GTT.TGT_SYSTEM_ENVIRONMENT_NAME = RES.MATCH_TGT_SYS_ENV_NAME AND GTT.TGT_TABLE_NAME = RES.MATCH_TGT_SYS_TBL_NAME AND GTT.TGT_COLUMN_NAME = RES.MATCH_TGT_SYS_COL_NAME AND GTT.TGT_COL_DATATYPE = RES.MATCH_TGT_SYS_COL_DTYPE AND GTT.TGT_COL_LENGTH = RES.MATCH_TGT_SYS_COL_LENGTH AND GTT.TGT_COL_PRECISION = RES.MATCH_TGT_SYS_COL_PRECISION AND GTT.TGT_COL_SCALE = RES.MATCH_TGT_SYS_COL_SCALE)
  WHEN MATCHED THEN
    UPDATE SET GTT.MATCH_TGT_SYS_COL_SCALE = RES.MATCH_TGT_SYS_COL_SCALE;
    COMMIT;
    OPEN L_MAP_SPEC_CMPR_RSLTS FOR SELECT * FROM MAP_SPCFCTN_DTLS_RPRT_GTT GTT WHERE ((MATCH_SRC_SYSTEM_NAME IS NULL OR MATCH_SRC_SYS_ENV_NAME IS NULL OR MATCH_SRC_SYS_TBL_NAME IS NULL OR MATCH_SRC_SYS_COL_NAME IS NULL OR MATCH_SRC_SYS_COL_DTYPE IS NULL OR MATCH_SRC_SYS_COL_LENGTH IS NULL OR MATCH_SRC_SYS_COL_PRECISION IS NULL OR MATCH_SRC_SYS_COL_SCALE IS NULL) AND ORPHAN_SRC = 0) OR ((MATCH_TGT_SYSTEM_NAME IS NULL OR MATCH_TGT_SYS_ENV_NAME IS NULL OR MATCH_TGT_SYS_TBL_NAME IS NULL OR MATCH_TGT_SYS_COL_NAME IS NULL OR MATCH_TGT_SYS_COL_DTYPE IS NULL OR MATCH_TGT_SYS_COL_LENGTH IS NULL OR MATCH_TGT_SYS_COL_PRECISION IS NULL OR MATCH_TGT_SYS_COL_SCALE IS NULL) AND ORPHAN_TGT = 0) ORDER BY MAP_NAME,MAP_SEQ_ID;
    RETURN L_MAP_SPEC_CMPR_RSLTS;
  END FN_VLDT_MPPNG_SPCFCTN_DTLS;
  /
DECLARE
   CONTCHECKER INT;
BEGIN
   SELECT COUNT(*) INTO CONTCHECKER FROM AMM_SDLR_JOB_DETAILS  WHERE JOB_GROUP = 'SM_ENVIRONMENT';
   IF CONTCHECKER > 0 THEN
      EXECUTE IMMEDIATE 'UPDATE AMM_SDLR_JOB_DETAILS SET JOB_CLASS_NAME = ''com.ads.scheduler.jobs.MetadataScanJob'' WHERE JOB_GROUP = ''SM_ENVIRONMENT''';
   END IF;
END;
/
DECLARE
VERSIONCHECKERFLAG INT;
BEGIN
    SELECT COUNT(*) INTO VERSIONCHECKERFLAG FROM ADS_MM_VERSION WHERE VALUE < '9.0';
    IF VERSIONCHECKERFLAG = 1 THEN
        DELETE FROM PROJECT_RESOURCES WHERE ROLE_ID IN ('com.ads.roles.DQAnalyst','com.ads.roles.LeadDQAnalyst','com.ads.roles.SubjectMatterExpert', 'com.ads.roles.Business','com.ads.roles.Custodian', 'com.ads.roles.Steward','com.ads.roles.Governance');
        DELETE FROM user_assigned_roles WHERE ROLE_ID IN ('com.ads.roles.DQAnalyst','com.ads.roles.LeadDQAnalyst','com.ads.roles.SubjectMatterExpert', 'com.ads.roles.Business','com.ads.roles.Custodian', 'com.ads.roles.Steward','com.ads.roles.Governance');
        DELETE FROM SECURITY_ROLES WHERE ROLE_ID IN ('com.ads.roles.DQAnalyst','com.ads.roles.LeadDQAnalyst','com.ads.roles.SubjectMatterExpert','com.ads.roles.Business','com.ads.roles.Custodian', 'com.ads.roles.Steward','com.ads.roles.Governance');
    END IF;
END;
/
DECLARE
COLUMNCHECKERFLAG INT;
    BEGIN
        SELECT COUNT(*) INTO COLUMNCHECKERFLAG FROM ADS_MM_VERSION WHERE VALUE < '9.0';
        IF COLUMNCHECKERFLAG = 1 THEN
            UPDATE USERS SET USER_COMPANY = 'erwin, Inc.' WHERE CREATED_BY = 'System';
    END IF;
END;
/
DECLARE
COLUMNCHECKERFLAG INT;
    BEGIN
        SELECT COUNT(*) INTO COLUMNCHECKERFLAG FROM ADS_MM_VERSION WHERE VALUE < '9.0';
        IF COLUMNCHECKERFLAG = 1 THEN
              UPDATE CAT_TEMPLATES SET CREATED_BY = 'erwin, Inc.', LAST_MODIFIED_BY = 'erwin, Inc.' WHERE CAT_SYSTEM_BASED = '1';
    END IF;
END;
/

DECLARE
    COLUMNCHECKERFLAG INT;
BEGIN
    SELECT COUNT(*) INTO COLUMNCHECKERFLAG FROM ADS_MM_VERSION WHERE VALUE < '9.0';
    if COLUMNCHECKERFLAG = 1 then
        update APP_PREFERENCES set PREFERENCE_VALUE = '' where PREFERENCE_NAME = 'FROM_EMAIL' and PREFERENCE_VALUE = 'MM-Admin@analytixds.com';
        update APP_PREFERENCES set PREFERENCE_VALUE = '' where PREFERENCE_NAME = 'ADMIN_EMAIL_USER_NAME' and PREFERENCE_VALUE = 'MM-Admin@analytixds.com';
        UPDATE APP_PREFERENCES SET PREFERENCE_VALUE = '' WHERE PREFERENCE_NAME = 'HOST' AND PREFERENCE_VALUE = 'mail.analytixds.com';
    END IF;
END;
/
DECLARE
   COLUMNCHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO COLUMNCHECKERFLAG FROM ALL_TAB_COLUMNS WHERE  OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME = UPPER('SYSTEM_TABLE_METADATA') AND COLUMN_NAME=UPPER('DECLARATION_PATH');
   IF COLUMNCHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'ALTER TABLE SYSTEM_TABLE_METADATA ADD DECLARATION_PATH VARCHAR2(4000) NULL';
      EXECUTE IMMEDIATE 'UPDATE SYSTEM_TABLE_METADATA SET DECLARATION_PATH = ''/'' || TABLE_NAME';
   END IF;
end;
/
DECLARE
   COLUMNCHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO COLUMNCHECKERFLAG FROM ALL_TAB_COLUMNS WHERE  OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME = UPPER('SYSTEM_TABLE_COLUMNS_METADATA') AND COLUMN_NAME=UPPER('DECLARATION_PATH');
   IF COLUMNCHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'ALTER TABLE SYSTEM_TABLE_COLUMNS_METADATA ADD DECLARATION_PATH VARCHAR2(4000) NULL';
      EXECUTE IMMEDIATE 'UPDATE SYSTEM_TABLE_COLUMNS_METADATA SET DECLARATION_PATH = ''/'' || TABLE_NAME || ''/'' || COLUMN_NAME';
   END IF;
end;
/
DECLARE
COLUMNCHECKERFLAG INT;
BEGIN
SELECT COUNT(*) INTO COLUMNCHECKERFLAG FROM ALL_TAB_COLUMNS WHERE OWNER = sys_context('userenv', 'current_schema') AND TABLE_NAME = UPPER('SYSTEM_TABLE_METADATA') AND COLUMN_NAME=UPPER('PHYSICAL_TABLE_NAME');
IF COLUMNCHECKERFLAG = 0 THEN
EXECUTE IMMEDIATE 'ALTER TABLE SYSTEM_TABLE_METADATA ADD PHYSICAL_TABLE_NAME VARCHAR2(4000) NULL';
END IF;
END;
/
DECLARE
COLUMNCHECKERFLAG INT;
BEGIN
SELECT COUNT(*) INTO COLUMNCHECKERFLAG FROM ALL_TAB_COLUMNS WHERE OWNER = sys_context('userenv', 'current_schema') AND TABLE_NAME = UPPER('SYSTEM_TABLE_COLUMNS_METADATA') AND COLUMN_NAME=UPPER('PHYSICAL_COLUMN_NAME');
IF COLUMNCHECKERFLAG = 0 THEN
EXECUTE IMMEDIATE 'ALTER TABLE SYSTEM_TABLE_COLUMNS_METADATA ADD PHYSICAL_COLUMN_NAME VARCHAR2(4000) NULL';
END IF;
END;
/
CREATE OR REPLACE FORCE VIEW "VALID_SYSTEM_TABLE_METADATA" AS
SELECT STM.* FROM SYSTEM_TABLE_METADATA STM JOIN ACTIVE_SYS_CON_ENVIRONMENTS SCS ON STM.SCE_ID = SCS.SCE_ID WHERE STM.VALID = 1 OR STM.VALID IS NULL
/
CREATE OR REPLACE FORCE VIEW "VALID_SYS_TBL_COL_METADATA" AS
SELECT STCM.* FROM SYSTEM_TABLE_COLUMNS_METADATA STCM JOIN ACTIVE_SYS_CON_ENVIRONMENTS SCS ON STCM.SCE_ID = SCS.SCE_ID WHERE STCM.VALID = 1 OR STCM.VALID IS NULL
/
DECLARE
   COLUMNCHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO COLUMNCHECKERFLAG FROM ALL_TAB_COLUMNS WHERE  OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME = UPPER('SYS_CON_ENVIRONMENTS') AND COLUMN_NAME=UPPER('PUBLISH');
   IF COLUMNCHECKERFLAG = 0 THEN
        EXECUTE IMMEDIATE 'ALTER TABLE SYS_CON_ENVIRONMENTS ADD PUBLISH NUMBER(3) NULL';
        EXECUTE IMMEDIATE 'UPDATE SYS_CON_ENVIRONMENTS SET PUBLISH = 0';
   END IF;
END;
/
DECLARE
CONTCHECKER INT;
BEGIN
SELECT COUNT(*) INTO CONTCHECKER FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_PARENT_TYPE = 'SM_METADATA' and OBJECT_TYPE = 'SM_SYSTEM';
IF CONTCHECKER = 0 THEN
    EXECUTE IMMEDIATE 'UPDATE ADS_KEY_VALUE_OBJECTS SET OBJECT_PARENT_TYPE = ''SM_METADATA'' , OBJECT_PARENT_COLUMN_ID = ''SM_METADATA_ID'' WHERE OBJECT_TYPE = ''SM_SYSTEM''';
    EXECUTE IMMEDIATE 'UPDATE ADS_KEY_VALUE_OBJECTS SET MODULE_KEY = ''com.ads.mm.permission.sm'' , OBJECT_LEVEL = 0 WHERE OBJECT_TYPE = ''SM_METADATA''';
END IF;
END;
/
DECLARE
DATACHECKERFLAG INT;
BEGIN
    SELECT COUNT(*) INTO DATACHECKERFLAG FROM ADS_FORM WHERE  FORM_NAME = 'Environment Properties - Metadata Manager';
    IF DATACHECKERFLAG = 0 THEN
        EXECUTE IMMEDIATE 'INSERT INTO ADS_FORM(FORM_NAME,DESCRIPTION,BASE_FORM_ID,SYSTEM_BASED) VALUES (''Environment Properties - Metadata Manager'',''Default template to configure table field properties'',0,1)';
    END IF;
END;
/
DECLARE
DATACHECKERFLAG INT;
FORMOBJECTTYPEID INT;
SCOPEOBJECTTYPEID INT;
FORMID INT;
BEGIN
    SELECT COUNT(OBJECT_ID) INTO DATACHECKERFLAG FROM ADS_OBJECT_TO_OBJECT_SCOPE WHERE OBJECT_ID = (SELECT F_ID FROM ADS_FORM where FORM_NAME = 'Environment Properties - Metadata Manager' AND SYSTEM_BASED = 1) AND SCOPE_OBJECT_TYPE_ID = (SELECT OBJECT_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE = 'SM_SYSTEM');
    IF DATACHECKERFLAG = 0 THEN
        SELECT OBJECT_TYPE_ID INTO FORMOBJECTTYPEID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE = 'FORM';
        SELECT OBJECT_TYPE_ID INTO SCOPEOBJECTTYPEID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE = 'SM_SYSTEM';
        SELECT F_ID INTO FORMID FROM ADS_FORM WHERE FORM_NAME = 'Environment Properties - Metadata Manager' AND SYSTEM_BASED = 1;
        INSERT INTO ADS_OBJECT_TO_OBJECT_SCOPE(OBJECT_TYPE_ID,OBJECT_ID,SCOPE_OBJECT_TYPE_ID, SCOPE_OBJECT_ID)
        VALUES(FORMOBJECTTYPEID, FORMID, SCOPEOBJECTTYPEID, -1);
    END IF;
END;
/
DECLARE
   COLUMNCHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO COLUMNCHECKERFLAG FROM ALL_TAB_COLUMNS WHERE  OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME = UPPER('SYS_CON_ENVIRONMENTS') AND COLUMN_NAME=UPPER('VISIBLE');
   IF COLUMNCHECKERFLAG = 0 THEN
        EXECUTE IMMEDIATE 'ALTER TABLE SYS_CON_ENVIRONMENTS ADD VISIBLE INT';
        EXECUTE IMMEDIATE 'UPDATE SYS_CON_ENVIRONMENTS SET VISIBLE = 1';
   END IF;
END;
/
CREATE OR REPLACE FORCE VIEW  "ACTIVE_SYS_CON_ENVIRONMENTS" AS SELECT * FROM   SYS_CON_ENVIRONMENTS WHERE  STATUS = 'Active';
/
DECLARE
   COLUMNCHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO COLUMNCHECKERFLAG FROM ALL_TAB_COLUMNS WHERE  OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME = UPPER('ADS_MODULES') AND COLUMN_NAME=UPPER('MODULE_ACTION');
   IF COLUMNCHECKERFLAG = 0 THEN
        EXECUTE IMMEDIATE 'ALTER TABLE ADS_MODULES ADD MODULE_ACTION varchar2(250)';
        EXECUTE IMMEDIATE 'UPDATE ADS_MODULES SET MODULE_ACTION = ''MappingManager.ads?action=mappingManager'' WHERE MODULE_FORWARD = ''mappingmanager''';
	EXECUTE IMMEDIATE 'UPDATE ADS_MODULES SET MODULE_ACTION = ''SystemManager.ads?action=systemManager'' WHERE MODULE_FORWARD = ''systemmanager''';
	EXECUTE IMMEDIATE 'UPDATE ADS_MODULES SET MODULE_ACTION = ''Project.ads?action=resourceManager'' WHERE MODULE_FORWARD = ''resourcemanager''';
        EXECUTE IMMEDIATE 'UPDATE ADS_MODULES SET MODULE_ACTION = ''CodesetManager.ads?action='' WHERE MODULE_FORWARD = ''codesetmanager''';
	EXECUTE IMMEDIATE 'UPDATE ADS_MODULES SET MODULE_ACTION = ''ProjectAction.ads?action=releaseManager'' WHERE MODULE_FORWARD = ''releasemanager''';
	EXECUTE IMMEDIATE 'UPDATE ADS_MODULES SET MODULE_ACTION = ''ReferenceCategoryAction.ads?action=referenceDataset'' WHERE MODULE_FORWARD = ''referencedatamanager''';
	EXECUTE IMMEDIATE 'UPDATE ADS_MODULES SET MODULE_ACTION = ''CATAction.ads?action=codeAutomationTemplate'' WHERE MODULE_FORWARD = ''codeautomationtemplate''';
	EXECUTE IMMEDIATE 'UPDATE ADS_MODULES SET MODULE_ACTION = ''TestManager.ads?action=testManager'' WHERE MODULE_FORWARD = ''testmanager''';
	EXECUTE IMMEDIATE 'UPDATE ADS_MODULES SET MODULE_ACTION = ''RequirementsManager.ads?action=requirementsManager'' WHERE MODULE_FORWARD = ''requirementsmanager''';
	EXECUTE IMMEDIATE 'UPDATE ADS_MODULES SET MODULE_ACTION = ''REPMCategory.ads?action=reportingManager'' WHERE MODULE_FORWARD = ''reportingmanager''';
	EXECUTE IMMEDIATE 'UPDATE ADS_MODULES SET MODULE_ACTION = ''BusinessGlossaryAction.ads?action=businessGlossaryManager'' WHERE MODULE_FORWARD = ''businessglossarymanager''';
	EXECUTE IMMEDIATE 'UPDATE ADS_MODULES SET MODULE_ACTION = ''WorkFlowManagerAction.ads?action=workflowmanager'' WHERE MODULE_FORWARD = ''workflowmanager''';
   END IF;
END;
/
UPDATE APP_PREFERENCES SET PREFERENCE_VALUE = ' Hello,<br><br>
 This is to notify you about status change for the following.<br><br>
 <b>@objectName@</b>
 </br><br>
 <table border = 1>
 <tr><th colspan = 2><b>Details</b></th></tr>
 <tr>
 <td>Object Name :</td>
 <td>@objectName@</td>
 </tr>
 <tr>
 <td>Object Parent : </td>
 <td>@objectParent@</td>
 </tr>
  <tr>
 <td>Link To Object :</td>
 <td>@clickHere@</td>
 </tr>
 <tr><th colspan = 2><b>Status Change</b></th></tr>
 <tr>
 <td>From :</td>
 <td>@fromStage@</td>
 </tr>
 <tr>
 <td>To :</td>
 <td>@toStage@</td>
 </tr>

 <tr><th colspan = 2><b>Audit Details</b></th></tr>
 <tr>
 <td>Created By :</td>
 <td>@createdBy@</td>
 </tr>
 <tr>
 <td>Created Date :</td>
 <td>@createdDate@</td>
 </tr>
 <tr>
 <td>Status Updated By :</td>
 <td>@statusUpdatedBy@</td>
 </tr>
 <tr>
 <td>Status Updated Date :</td>
 <td>@statusUpdatedDate@</td>
 </tr>
 </table>
 <BR><b>Comments:</b> @comments@
 <BR><BR><I><font color =red>Note</font>: This is an auto generated email notification and this mailbox is not monitored.<BR>Please do not reply to this email.</I>'
WHERE PREFERENCE_NAME='SEND_EMAIL_ON_WORKFLOW_STATUS_UPDATE_MESSAGE';
/
DECLARE
    COLUMNCHECKERFLAG INT;
BEGIN
    SELECT COUNT(*)
 INTO COLUMNCHECKERFLAG FROM ADS_MM_VERSION WHERE VALUE < '9.2';
    if COLUMNCHECKERFLAG = 1 then
        MERGE INTO ADS_KEY_VALUE MS USING (SELECT KV_ID, OBJECT_TYPE_ID, OBJECT_ID, ROW_NUMBER() OVER(PARTITION BY OBJECT_TYPE_ID, OBJECT_ID ORDER BY CAST(KV_ORDER AS DECIMAL)) AS KV_ORDER FROM ADS_KEY_VALUE WHERE KEY_NAME NOT LIKE ('SM_METADATA#%') AND KEY_NAME NOT LIKE ('SM_SYSTEM#%') AND KEY_NAME NOT LIKE ('SM_ENVIRONMENT#%') AND KEY_NAME NOT LIKE ('SM_TABLE#%') AND KEY_NAME NOT LIKE ('MM_PROJECT#%') AND KEY_NAME NOT LIKE ('MM_SUBJECT#%') AND KEY_NAME NOT LIKE ('MM_MAPPING#%')) CTE ON (MS.KV_ID =  CTE.KV_ID)  WHEN MATCHED THEN  UPDATE SET MS.KV_ORDER = CTE.KV_ORDER;
 END IF;
END;
/
DECLARE
  COLUMNCHECKERFLAG INT;
BEGIN
  SELECT COUNT(*)
  INTO COLUMNCHECKERFLAG
  FROM ALL_TAB_COLUMNS
  WHERE OWNER          = sys_context('userenv', 'current_schema')
  AND TABLE_NAME       = UPPER('ADS_KEY_VALUE_OBJECTS')
  AND COLUMN_NAME      =UPPER('OBJECT_TITLE');
  IF COLUMNCHECKERFLAG = 0 THEN
    EXECUTE IMMEDIATE 'ALTER TABLE ADS_KEY_VALUE_OBJECTS ADD OBJECT_TITLE varchar(255) NULL';
    EXECUTE IMMEDIATE 'INSERT INTO ADS_KEY_VALUE_OBJECTS (OBJECT_TYPE,OBJECT_TABLE,OBJECT_TABLE_COLUMN,OBJECT_PARENT_TYPE,OBJECT_PARENT_COLUMN_ID,OBJECT_LEVEL,MODULE_KEY,OBJECT_TITLE) VALUES(''MM_PROJECTS'','''','''','''','''',0,''com.ads.mm.permission.mm'',''Projects'')';
    EXECUTE IMMEDIATE 'INSERT INTO ADS_KEY_VALUE_OBJECTS (OBJECT_TYPE,OBJECT_TABLE,OBJECT_TABLE_COLUMN,OBJECT_PARENT_TYPE,OBJECT_PARENT_COLUMN_ID,OBJECT_LEVEL,MODULE_KEY,OBJECT_TITLE) VALUES(''BGM_TERM_CATALOGS'','''','''','''','''',0,''com.ads.mm.permission.bgm'',''Business Terms'')';
    EXECUTE IMMEDIATE 'UPDATE ADS_KEY_VALUE_OBJECTS SET OBJECT_PARENT_TYPE = ''MM_PROJECTS'',OBJECT_PARENT_COLUMN_ID = ''MM_PROJECTS_ID'' WHERE OBJECT_TYPE = ''MM_PROJECT''';
    EXECUTE IMMEDIATE 'UPDATE ADS_KEY_VALUE_OBJECTS SET OBJECT_PARENT_COLUMN_ID = ''SUBJECT_ID'' WHERE OBJECT_TYPE = ''MM_MAPPING''';
    EXECUTE IMMEDIATE 'UPDATE ADS_KEY_VALUE_OBJECTS SET OBJECT_PARENT_COLUMN_ID = ''MAP_ID'' WHERE OBJECT_TYPE = ''MM_MAPPING_ROW''';
    EXECUTE IMMEDIATE 'UPDATE ADS_KEY_VALUE_OBJECTS SET OBJECT_PARENT_TYPE = ''BGM_TERM_CATALOG'' WHERE OBJECT_TYPE = ''BGM_TERM''';
    EXECUTE IMMEDIATE 'UPDATE ADS_KEY_VALUE_OBJECTS SET OBJECT_PARENT_TYPE = ''BGM_TERM_CATALOGS'', OBJECT_PARENT_COLUMN_ID = ''BGM_TERM_CATALOGS_ID'' WHERE OBJECT_TYPE = ''BGM_TERM_CATALOG''';
    EXECUTE IMMEDIATE 'UPDATE ADS_KEY_VALUE_OBJECTS SET OBJECT_TITLE = ''System'' WHERE OBJECT_TYPE = ''SM_SYSTEM''';
    EXECUTE IMMEDIATE 'UPDATE ADS_KEY_VALUE_OBJECTS SET OBJECT_TITLE = ''Environment'' WHERE OBJECT_TYPE = ''SM_ENVIRONMENT''';
    EXECUTE IMMEDIATE 'UPDATE ADS_KEY_VALUE_OBJECTS SET OBJECT_TITLE = ''Table'' WHERE OBJECT_TYPE = ''SM_TABLE''';
    EXECUTE IMMEDIATE 'UPDATE ADS_KEY_VALUE_OBJECTS SET OBJECT_TITLE = ''Column'' WHERE OBJECT_TYPE = ''SM_COLUMN''';
    EXECUTE IMMEDIATE 'UPDATE ADS_KEY_VALUE_OBJECTS SET OBJECT_TITLE = '''' WHERE OBJECT_TYPE = ''SM_COMPONENT''';
    EXECUTE IMMEDIATE 'UPDATE ADS_KEY_VALUE_OBJECTS SET OBJECT_TITLE = ''Project'' WHERE OBJECT_TYPE = ''MM_PROJECT''';
    EXECUTE IMMEDIATE 'UPDATE ADS_KEY_VALUE_OBJECTS SET OBJECT_TITLE = ''Subject'' WHERE OBJECT_TYPE = ''MM_SUBJECT''';
    EXECUTE IMMEDIATE 'UPDATE ADS_KEY_VALUE_OBJECTS SET OBJECT_TITLE = ''Mapping'' WHERE OBJECT_TYPE = ''MM_MAPPING''';
    EXECUTE IMMEDIATE 'UPDATE ADS_KEY_VALUE_OBJECTS SET OBJECT_TITLE = ''Mapping Specification'' WHERE OBJECT_TYPE = ''MM_MAPPING_ROW''';
    EXECUTE IMMEDIATE 'UPDATE ADS_KEY_VALUE_OBJECTS SET OBJECT_TITLE = '''' WHERE OBJECT_TYPE = ''MT_DEFINITION''';
    EXECUTE IMMEDIATE 'UPDATE ADS_KEY_VALUE_OBJECTS SET OBJECT_TITLE = '''' WHERE OBJECT_TYPE = ''MT_DEFINITION_VALUE''';
    EXECUTE IMMEDIATE 'UPDATE ADS_KEY_VALUE_OBJECTS SET OBJECT_TITLE = '''' WHERE OBJECT_TYPE = ''ADS_KEY_VALUE''';
    EXECUTE IMMEDIATE 'UPDATE ADS_KEY_VALUE_OBJECTS SET OBJECT_TITLE = ''Project'' WHERE OBJECT_TYPE = ''REQM_PROJECT''';
    EXECUTE IMMEDIATE 'UPDATE ADS_KEY_VALUE_OBJECTS SET OBJECT_TITLE = ''Subject'' WHERE OBJECT_TYPE = ''REQM_SUBJECT''';
    EXECUTE IMMEDIATE 'UPDATE ADS_KEY_VALUE_OBJECTS SET OBJECT_TITLE = ''Specification'' WHERE OBJECT_TYPE = ''REQM_SPECIFICATION''';
    EXECUTE IMMEDIATE 'UPDATE ADS_KEY_VALUE_OBJECTS SET OBJECT_TITLE = ''Specification Template'' WHERE OBJECT_TYPE = ''REQM_SPECIFICATION_TEMPLATE''';
    EXECUTE IMMEDIATE 'UPDATE ADS_KEY_VALUE_OBJECTS SET OBJECT_TITLE = ''Artifact'' WHERE OBJECT_TYPE = ''REQM_ARTIFACT''';
    EXECUTE IMMEDIATE 'UPDATE ADS_KEY_VALUE_OBJECTS SET OBJECT_TITLE = ''Specification Artifact'' WHERE OBJECT_TYPE = ''REQM_SPECIFICATION_ARTIFACT''';
    EXECUTE IMMEDIATE 'UPDATE ADS_KEY_VALUE_OBJECTS SET OBJECT_TITLE = '''' WHERE OBJECT_TYPE = ''MM_GRAPHICAL_PROPERTIES''';
    EXECUTE IMMEDIATE 'UPDATE ADS_KEY_VALUE_OBJECTS SET OBJECT_TITLE = ''Report'' WHERE OBJECT_TYPE = ''REPM_REPORT''';
    EXECUTE IMMEDIATE 'UPDATE ADS_KEY_VALUE_OBJECTS SET OBJECT_TITLE = ''Chart'' WHERE OBJECT_TYPE = ''REPM_CHART''';
    EXECUTE IMMEDIATE 'UPDATE ADS_KEY_VALUE_OBJECTS SET OBJECT_TITLE = ''User'' WHERE OBJECT_TYPE = ''ADS_USER''';
    EXECUTE IMMEDIATE 'UPDATE ADS_KEY_VALUE_OBJECTS SET OBJECT_TITLE = ''Profile'' WHERE OBJECT_TYPE = ''ADS_PROFILE''';
    EXECUTE IMMEDIATE 'UPDATE ADS_KEY_VALUE_OBJECTS SET OBJECT_TITLE = ''Category'' WHERE OBJECT_TYPE = ''REPM_CATEGORY''';
    EXECUTE IMMEDIATE 'UPDATE ADS_KEY_VALUE_OBJECTS SET OBJECT_TITLE = ''Dashboard'' WHERE OBJECT_TYPE = ''REPM_DASHBOARD''';
    EXECUTE IMMEDIATE 'UPDATE ADS_KEY_VALUE_OBJECTS SET OBJECT_TITLE = ''Category'' WHERE OBJECT_TYPE = ''BGM_CATEGORY''';
    EXECUTE IMMEDIATE 'UPDATE ADS_KEY_VALUE_OBJECTS SET OBJECT_TITLE = ''Business Term'' WHERE OBJECT_TYPE = ''BGM_TERM''';
    EXECUTE IMMEDIATE 'UPDATE ADS_KEY_VALUE_OBJECTS SET OBJECT_TITLE = '''' WHERE OBJECT_TYPE = ''SM_DATABASE_OPTIONS''';
    EXECUTE IMMEDIATE 'UPDATE ADS_KEY_VALUE_OBJECTS SET OBJECT_TITLE = ''Email Template'' WHERE OBJECT_TYPE = ''REQM_EMAIL_TEMPLATE''';
    EXECUTE IMMEDIATE 'UPDATE ADS_KEY_VALUE_OBJECTS SET OBJECT_TITLE = '''' WHERE OBJECT_TYPE = ''ADS_MAIL_CMD''';
    EXECUTE IMMEDIATE 'UPDATE ADS_KEY_VALUE_OBJECTS SET OBJECT_TITLE = ''Test Case'' WHERE OBJECT_TYPE = ''TESTCASE_PLAN''';
    EXECUTE IMMEDIATE 'UPDATE ADS_KEY_VALUE_OBJECTS SET OBJECT_TITLE = ''Cat'' WHERE OBJECT_TYPE = ''CAT''';
    EXECUTE IMMEDIATE 'UPDATE ADS_KEY_VALUE_OBJECTS SET OBJECT_TITLE = ''Workflow'' WHERE OBJECT_TYPE = ''CATFX_WORKFLOW''';
    EXECUTE IMMEDIATE 'UPDATE ADS_KEY_VALUE_OBJECTS SET OBJECT_TITLE = ''Business Rule'' WHERE OBJECT_TYPE = ''BGM_RULE''';
    EXECUTE IMMEDIATE 'UPDATE ADS_KEY_VALUE_OBJECTS SET OBJECT_TITLE = ''Business Policy'' WHERE OBJECT_TYPE = ''BGM_POLICY''';
    EXECUTE IMMEDIATE 'UPDATE ADS_KEY_VALUE_OBJECTS SET OBJECT_TITLE = ''Tag'' WHERE OBJECT_TYPE = ''TAG''';
    EXECUTE IMMEDIATE 'UPDATE ADS_KEY_VALUE_OBJECTS SET OBJECT_TITLE = '''' WHERE OBJECT_TYPE = ''BGM_STEWARDSHIP_GOALS''';
    EXECUTE IMMEDIATE 'UPDATE ADS_KEY_VALUE_OBJECTS SET OBJECT_TITLE = ''Code Value'' WHERE OBJECT_TYPE = ''CSM_CODE_VALUE''';
    EXECUTE IMMEDIATE 'UPDATE ADS_KEY_VALUE_OBJECTS SET OBJECT_TITLE = ''Index'' WHERE OBJECT_TYPE = ''SM_INDEX''';
    EXECUTE IMMEDIATE 'UPDATE ADS_KEY_VALUE_OBJECTS SET OBJECT_TITLE = ''Category'' WHERE OBJECT_TYPE = ''BGM_TERM_CATALOG''';
    EXECUTE IMMEDIATE 'UPDATE ADS_KEY_VALUE_OBJECTS SET OBJECT_TITLE = ''Category'' WHERE OBJECT_TYPE = ''BGM_POLICY_CATALOG''';
    EXECUTE IMMEDIATE 'UPDATE ADS_KEY_VALUE_OBJECTS SET OBJECT_TITLE = ''Category'' WHERE OBJECT_TYPE = ''BGM_RULE_CATALOG''';
    EXECUTE IMMEDIATE 'UPDATE ADS_KEY_VALUE_OBJECTS SET OBJECT_TITLE = '''' WHERE OBJECT_TYPE = ''AMM_LICENSE''';
    EXECUTE IMMEDIATE 'UPDATE ADS_KEY_VALUE_OBJECTS SET OBJECT_TITLE = ''Form'' WHERE OBJECT_TYPE = ''FORM''';
    EXECUTE IMMEDIATE 'UPDATE ADS_KEY_VALUE_OBJECTS SET OBJECT_TITLE = '''' WHERE OBJECT_TYPE = ''RDM_OBJECT_VALUE''';
    EXECUTE IMMEDIATE 'UPDATE ADS_KEY_VALUE_OBJECTS SET OBJECT_TITLE = ''Project'' WHERE OBJECT_TYPE = ''RM_PROJECT''';
    EXECUTE IMMEDIATE 'UPDATE ADS_KEY_VALUE_OBJECTS SET OBJECT_TITLE = ''Release'' WHERE OBJECT_TYPE = ''RM_RELEASE''';
    EXECUTE IMMEDIATE 'UPDATE ADS_KEY_VALUE_OBJECTS SET OBJECT_TITLE = ''Migration Document'' WHERE OBJECT_TYPE = ''RM_MIGRATION_DOCUMENT''';
    EXECUTE IMMEDIATE 'UPDATE ADS_KEY_VALUE_OBJECTS SET OBJECT_TITLE = ''History'' WHERE OBJECT_TYPE = ''RM_HISTORY''';
    EXECUTE IMMEDIATE 'UPDATE ADS_KEY_VALUE_OBJECTS SET OBJECT_TITLE = ''Environment'' WHERE OBJECT_TYPE = ''RM_ENVIRONMENT''';
    EXECUTE IMMEDIATE 'UPDATE ADS_KEY_VALUE_OBJECTS SET OBJECT_TITLE = ''Migration Object'' WHERE OBJECT_TYPE = ''RM_MIGRATION_OBJECT''';
    EXECUTE IMMEDIATE 'UPDATE ADS_KEY_VALUE_OBJECTS SET OBJECT_TITLE = ''Migration Status'' WHERE OBJECT_TYPE = ''RM_MIGRATION_STATUS''';
    EXECUTE IMMEDIATE 'UPDATE ADS_KEY_VALUE_OBJECTS SET OBJECT_TITLE = ''Settings'' WHERE OBJECT_TYPE = ''RM_SYSTEM_SETTINGS''';
    EXECUTE IMMEDIATE 'UPDATE ADS_KEY_VALUE_OBJECTS SET OBJECT_TITLE = ''Migration Object Type'' WHERE OBJECT_TYPE = ''RM_MIGRATION_OBJECT_TYPE''';
    EXECUTE IMMEDIATE 'UPDATE ADS_KEY_VALUE_OBJECTS SET OBJECT_TITLE = ''Metadata'' WHERE OBJECT_TYPE = ''SM_METADATA''';
    EXECUTE IMMEDIATE 'UPDATE ADS_KEY_VALUE_OBJECTS SET OBJECT_TITLE = ''Stage'' WHERE OBJECT_TYPE = ''ADS_WORKFLOW_STAGE''';
    EXECUTE IMMEDIATE 'UPDATE ADS_KEY_VALUE_OBJECTS SET OBJECT_TITLE = ''Folder'' WHERE OBJECT_TYPE = ''ADS_WORKFLOW_FOLDER''';
    EXECUTE IMMEDIATE 'UPDATE ADS_KEY_VALUE_OBJECTS SET OBJECT_TITLE = ''Workflow Assignment'' WHERE OBJECT_TYPE = ''ADS_WORKFLOW_ASSIGNMENT''';
    EXECUTE IMMEDIATE 'UPDATE ADS_KEY_VALUE_OBJECTS SET OBJECT_TITLE = ''Workflow'' WHERE OBJECT_TYPE = ''ADS_WORKFLOW''';
  END IF;
END;
/
DECLARE
TABLECHECKERFLAG INT;
BEGIN
  SELECT COUNT(*)  INTO TABLECHECKERFLAG  FROM ALL_TABLES  WHERE OWNER = sys_context( 'userenv', 'current_schema' )  AND TABLE_NAME = UPPER('ADS_WORKFLOW_TRIGGER_ACTION');
    IF TABLECHECKERFLAG = 0 THEN
    EXECUTE IMMEDIATE 'CREATE TABLE ADS_WORKFLOW_TRIGGER_ACTION(
		WFTA_ID NUMBER NOT NULL,
		NAME VARCHAR2(255) NOT NULL,
		TITLE VARCHAR2(255) NOT NULL,
		DESCRIPTION VARCHAR2(4000) NULL,
		STATUS_TITLE VARCHAR2(50) NULL,
		OBJECT_TYPE_ID NUMBER NOT NULL,
		FILENAME VARCHAR2(255) NULL,
		METHOD VARCHAR2(255) NULL,
		NODE_TYPE VARCHAR2(1) NOT NULL,
		CONSTRAINT PK_WF_TRIGGER_ACTION PRIMARY KEY(WFTA_ID),
		CONSTRAINT FK_WF_T_A_OTYPE_ID FOREIGN KEY(OBJECT_TYPE_ID) REFERENCES ADS_KEY_VALUE_OBJECTS(OBJECT_TYPE_ID))';
    END IF;
END;
/
DECLARE
  SEQUENCECHECKERFLAG INT;
BEGIN
  SELECT COUNT(*)
  INTO SEQUENCECHECKERFLAG
  FROM ALL_SEQUENCES
  WHERE SEQUENCE_OWNER   = sys_context('userenv', 'current_schema')
  AND SEQUENCE_NAME      = UPPER('WF_TIG_ACTION_SEQ');
  IF SEQUENCECHECKERFLAG = 0 THEN
    EXECUTE IMMEDIATE 'CREATE SEQUENCE   "WF_TIG_ACTION_SEQ"  MINVALUE 1 MAXVALUE 999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE';
  END IF;
END;
/
DECLARE
  TRIGGERCHECKERFLAG INT;
BEGIN
  SELECT COUNT(*)
  INTO TRIGGERCHECKERFLAG
  FROM all_triggers
  WHERE OWNER           = sys_context('userenv', 'current_schema')
  AND trigger_name      = UPPER('WF_TIG_ACTION_SEQ_INSERT');
  IF TRIGGERCHECKERFLAG = 0 THEN
    EXECUTE IMMEDIATE 'CREATE OR REPLACE TRIGGER  "WF_TIG_ACTION_SEQ_INSERT" BEFORE INSERT ON ADS_WORKFLOW_TRIGGER_ACTION FOR EACH ROW BEGIN SELECT WF_TIG_ACTION_SEQ.NEXTVAL INTO :new.WFTA_ID FROM DUAL; END;';
    EXECUTE IMMEDIATE 'ALTER TRIGGER  "WF_TIG_ACTION_SEQ_INSERT" ENABLE';
  END IF;
END;
/
DECLARE
CONTCHECKER INT;
ENV_OBJECT_TYPE_ID INT;
TABLE_OBJECT_TYPE_ID INT;
COLUMN_OBJECT_TYPE_ID INT;
MAPPING_OBJECT_TYPE_ID INT;
BGM_TERM_OBJECT_TYPE_ID INT;
Begin
Select Count(*) Into Contchecker From ADS_WORKFLOW_TRIGGER_ACTION;
    If Contchecker = 0 Then
        SELECT OBJECT_TYPE_ID INTO ENV_OBJECT_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE='SM_ENVIRONMENT' AND ROWNUM  =1;
        SELECT OBJECT_TYPE_ID INTO TABLE_OBJECT_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE='SM_TABLE' AND ROWNUM  =1;
        SELECT OBJECT_TYPE_ID INTO COLUMN_OBJECT_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE='SM_COLUMN' AND ROWNUM  =1;
        SELECT OBJECT_TYPE_ID INTO MAPPING_OBJECT_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE='MM_MAPPING' AND ROWNUM  =1;
        SELECT OBJECT_TYPE_ID INTO BGM_TERM_OBJECT_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE='BGM_TERM' AND ROWNUM  =1;

        INSERT INTO ADS_WORKFLOW_TRIGGER_ACTION  ("NAME","TITLE","DESCRIPTION","STATUS_TITLE","OBJECT_TYPE_ID","FILENAME","METHOD","NODE_TYPE") VALUES('ON_CREATE','On Create','On Create','Draft',ENV_OBJECT_TYPE_ID,'SM_Triggers.js','onEnvCreate','T');
        INSERT INTO ADS_WORKFLOW_TRIGGER_ACTION  ("NAME","TITLE","DESCRIPTION","STATUS_TITLE","OBJECT_TYPE_ID","FILENAME","METHOD","NODE_TYPE") VALUES('ON_CREATE','On Create','Tab On Create','Draft',TABLE_OBJECT_TYPE_ID,'SM_Triggers.js','onTabCreate','T');
        INSERT INTO ADS_WORKFLOW_TRIGGER_ACTION  ("NAME","TITLE","DESCRIPTION","STATUS_TITLE","OBJECT_TYPE_ID","FILENAME","METHOD","NODE_TYPE") VALUES('ON_CREATE','On Create','Col On Create','Draft',COLUMN_OBJECT_TYPE_ID,'SM_Triggers.js','onColCreate','T');
        INSERT INTO ADS_WORKFLOW_TRIGGER_ACTION  ("NAME","TITLE","DESCRIPTION","STATUS_TITLE","OBJECT_TYPE_ID","FILENAME","METHOD","NODE_TYPE") VALUES('ON_CREATE','On Create','On Create','Draft',MAPPING_OBJECT_TYPE_ID,'MM_Triggers.js','onMapCreate','T');
        INSERT INTO ADS_WORKFLOW_TRIGGER_ACTION  ("NAME","TITLE","DESCRIPTION","STATUS_TITLE","OBJECT_TYPE_ID","FILENAME","METHOD","NODE_TYPE") VALUES('ON_CREATE','On Create','On Create','Draft',BGM_TERM_OBJECT_TYPE_ID,'BGM_Triggers.js','onTermCreate','T');
        INSERT INTO ADS_WORKFLOW_TRIGGER_ACTION  ("NAME","TITLE","DESCRIPTION","STATUS_TITLE","OBJECT_TYPE_ID","FILENAME","METHOD","NODE_TYPE") VALUES('PUBLISH','Publish','Publish','Published',ENV_OBJECT_TYPE_ID,'SM_Actions.js','onPublish','A');
        INSERT INTO ADS_WORKFLOW_TRIGGER_ACTION  ("NAME","TITLE","DESCRIPTION","STATUS_TITLE","OBJECT_TYPE_ID","FILENAME","METHOD","NODE_TYPE") VALUES('PUBLISH','Publish','Publish','Published',TABLE_OBJECT_TYPE_ID,'SM_Actions.js','onPublish','A');
        INSERT INTO ADS_WORKFLOW_TRIGGER_ACTION  ("NAME","TITLE","DESCRIPTION","STATUS_TITLE","OBJECT_TYPE_ID","FILENAME","METHOD","NODE_TYPE") VALUES('PUBLISH','Publish','Publish','Published',COLUMN_OBJECT_TYPE_ID,'SM_Actions.js','onPublish','A');
        INSERT INTO ADS_WORKFLOW_TRIGGER_ACTION  ("NAME","TITLE","DESCRIPTION","STATUS_TITLE","OBJECT_TYPE_ID","FILENAME","METHOD","NODE_TYPE") VALUES('PUBLISH','Publish','Publish','Published',MAPPING_OBJECT_TYPE_ID,'MM_Actions.js','onMapPublish','A');
        INSERT INTO ADS_WORKFLOW_TRIGGER_ACTION  ("NAME","TITLE","DESCRIPTION","STATUS_TITLE","OBJECT_TYPE_ID","FILENAME","METHOD","NODE_TYPE") VALUES('PUBLISH','Publish','Publish','Published',BGM_TERM_OBJECT_TYPE_ID,'BGM_Actions.js','onBusinessTermPublish','A');

--        EXECUTE IMMEDIATE 'DROP TABLE ADS_WORKFLOW_ASGMNT_TRIGGER';
--        EXECUTE IMMEDIATE 'DROP TABLE ADS_WORKFLOW_TRIGGER';
--        EXECUTE IMMEDIATE 'DROP TABLE ADS_WORKFLOW_ACTION';
    End If;
End;
/
DECLARE
  COLUMNCHECKERFLAG INT;
BEGIN
  SELECT COUNT(*)
  INTO COLUMNCHECKERFLAG
  FROM ALL_TAB_COLUMNS
  WHERE OWNER          = sys_context('userenv', 'current_schema')
  AND TABLE_NAME       = UPPER('ADS_WORKFLOW')
  AND COLUMN_NAME      =UPPER('WFTA_ID');
  IF COLUMNCHECKERFLAG = 0 THEN
    EXECUTE IMMEDIATE 'ALTER TABLE ADS_WORKFLOW ADD WFTA_ID NUMBER NULL';
    EXECUTE IMMEDIATE 'ALTER TABLE ADS_WORKFLOW ADD CONSTRAINT FK_ADS_WF_WFTA_ID FOREIGN KEY (WFTA_ID) REFERENCES ADS_WORKFLOW_TRIGGER_ACTION(WFTA_ID) ON DELETE CASCADE';
  END IF;
END;
/
DECLARE
   TABLECHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO TABLECHECKERFLAG FROM ALL_CONS_COLUMNS WHERE OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME = UPPER('ADS_WORKFLOW_STATUS') AND COLUMN_NAME = UPPER('OBJECT_TYPE_ID') AND CONSTRAINT_NAME = UPPER('FK_ADS_WF_STATUS_OBJ_TYPE_ID');
   IF TABLECHECKERFLAG = 1 THEN
      Execute Immediate 'ALTER TABLE ADS_WORKFLOW_STATUS DROP CONSTRAINT FK_ADS_WF_STATUS_OBJ_TYPE_ID';
      EXECUTE IMMEDIATE 'ALTER TABLE ADS_WORKFLOW_STATUS ADD CONSTRAINT FK_ADS_WF_STATUS_OBJ_TYPE_ID FOREIGN KEY(OBJECT_TYPE_ID) REFERENCES ADS_KEY_VALUE_OBJECTS (OBJECT_TYPE_ID)';
   END IF;
END;
/
DECLARE
   TABLECHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO TABLECHECKERFLAG FROM ALL_CONS_COLUMNS WHERE OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME = UPPER('ADS_WORKFLOW_STATUS') AND COLUMN_NAME = UPPER('WFN_ID') AND CONSTRAINT_NAME = UPPER('FK_ADS_WF_STATUS_WFN_ID');
   IF TABLECHECKERFLAG = 1 THEN
      Execute Immediate 'ALTER TABLE ADS_WORKFLOW_STATUS DROP CONSTRAINT FK_ADS_WF_STATUS_WFN_ID';
      EXECUTE IMMEDIATE 'ALTER TABLE ADS_WORKFLOW_STATUS ADD CONSTRAINT FK_ADS_WF_STATUS_WFN_ID FOREIGN KEY(WFN_ID) REFERENCES ADS_WORKFLOW_NODE (WFN_ID)';
   END IF;
End;
/
DECLARE
  COLUMNCHECKERFLAG INT;
BEGIN
  SELECT COUNT(*)
  INTO COLUMNCHECKERFLAG
  FROM ALL_TAB_COLUMNS
  WHERE OWNER          = sys_context('userenv', 'current_schema')
  AND TABLE_NAME       = UPPER('ADS_WORKFLOW_STATUS')
  AND COLUMN_NAME      =UPPER('WFG_ID');
  IF COLUMNCHECKERFLAG = 0 THEN
    EXECUTE IMMEDIATE 'ALTER TABLE ADS_WORKFLOW_STATUS ADD WFG_ID NUMBER NULL';
    EXECUTE IMMEDIATE 'ALTER TABLE ADS_WORKFLOW_STATUS ADD CONSTRAINT FK_ADS_WF_WFG_ID FOREIGN KEY (WFG_ID) REFERENCES ADS_WORKFLOW_ASSIGNMENT(WFG_ID) ON DELETE CASCADE';
  END IF;
End;
/
DECLARE
   INDEXCHECKERFLAG INT;
BEGIN
    SELECT COUNT(*) INTO INDEXCHECKERFLAG FROM ALL_INDEXES WHERE OWNER = SYS_CONTEXT('USERENV', 'CURRENT_SCHEMA') AND INDEX_NAME = UPPER('RM_HIST_OBJECTID_IDX');
   IF INDEXCHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'CREATE INDEX "RM_HIST_OBJECTID_IDX" ON "RM_HISTORY"("OBJECTID")';
   END IF;
END;
/
DECLARE
   INDEXCHECKERFLAG INT;
BEGIN
    SELECT COUNT(*) INTO INDEXCHECKERFLAG FROM ALL_INDEXES WHERE OWNER = SYS_CONTEXT('USERENV', 'CURRENT_SCHEMA') AND INDEX_NAME = UPPER('RM_HIST_OBJECTTYPEID_IDX');
   IF INDEXCHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'CREATE INDEX "RM_HIST_OBJECTTYPEID_IDX" ON "RM_HISTORY"("OBJECTTYPEID")';
   END IF;
END;
/
DECLARE
   INDEXCHECKERFLAG INT;
BEGIN
    SELECT COUNT(*) INTO INDEXCHECKERFLAG FROM ALL_INDEXES WHERE OWNER = SYS_CONTEXT('USERENV', 'CURRENT_SCHEMA') AND INDEX_NAME = UPPER('WF_STATUS_OBJECT_ID_IDX');
   IF INDEXCHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'CREATE INDEX "WF_STATUS_OBJECT_ID_IDX" ON "ADS_WORKFLOW_STATUS"("OBJECT_ID")';
   END IF;
END;
/
DECLARE
   INDEXCHECKERFLAG INT;
BEGIN
    SELECT COUNT(*) INTO INDEXCHECKERFLAG FROM ALL_INDEXES WHERE OWNER = SYS_CONTEXT('USERENV', 'CURRENT_SCHEMA') AND INDEX_NAME = UPPER('WF_STATUS_OBJECT_TYPE_ID_IDX');
   IF INDEXCHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'CREATE INDEX "WF_STATUS_OBJECT_TYPE_ID_IDX" ON "ADS_WORKFLOW_STATUS"("OBJECT_TYPE_ID")';
   END IF;
END;
/
DECLARE
   INDEXCHECKERFLAG INT;
BEGIN
    SELECT COUNT(*) INTO INDEXCHECKERFLAG FROM ALL_INDEXES WHERE OWNER = SYS_CONTEXT('USERENV', 'CURRENT_SCHEMA') AND INDEX_NAME = UPPER('WF_STATUS_WFN_ID_IDX');
   IF INDEXCHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'CREATE INDEX "WF_STATUS_WFN_ID_IDX" ON "ADS_WORKFLOW_STATUS"("WFN_ID")';
   END IF;
END;
/
DECLARE
   INDEXCHECKERFLAG INT;
BEGIN
    SELECT COUNT(*) INTO INDEXCHECKERFLAG FROM ALL_INDEXES WHERE OWNER = SYS_CONTEXT('USERENV', 'CURRENT_SCHEMA') AND INDEX_NAME = UPPER('WF_STATUS_WFG_ID_IDX');
   IF INDEXCHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'CREATE INDEX "WF_STATUS_WFG_ID_IDX" ON "ADS_WORKFLOW_STATUS"("WFG_ID")';
   END IF;
END;
/
DECLARE
   TABLECHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO TABLECHECKERFLAG FROM all_VIEWS WHERE OWNER = sys_context('userenv', 'current_schema') AND VIEW_NAME = UPPER('ADS_WORKFLOW_STATUS_V');
   IF TABLECHECKERFLAG = 1 THEN
      EXECUTE IMMEDIATE 'DROP VIEW ADS_WORKFLOW_STATUS_V';
   END IF;
END;
/
DECLARE
BEGIN
EXECUTE IMMEDIATE 'CREATE OR REPLACE FORCE VIEW ADS_WORKFLOW_STATUS_V
                  AS
WITH objectstatus
     AS (SELECT AWN.node_id,
                AWN.node_type,
                awn.wfn_id,
                object_id, wf_id,
                AWS.object_type_id,
				AWS.WFG_ID
         FROM   ADS_WORKFLOW_NODE AWN
                JOIN ADS_WORKFLOW_STATUS AWS
                  ON AWN.wfn_id = AWS.wfn_id
        )

SELECT CASE
         WHEN node_type = ''A'' THEN (SELECT status_title
                                    FROM   ADS_WORKFLOW_TRIGGER_ACTION
                                    WHERE  wfta_id = objectstatus.node_id)
         WHEN node_type = ''S'' THEN (SELECT status_title
                                    FROM   ADS_WORKFLOW_STAGE
                                    WHERE  wfs_id = objectstatus.node_id)
         WHEN node_type = ''T'' THEN (SELECT status_title
                                    FROM   ADS_WORKFLOW_TRIGGER_ACTION
                                    WHERE  wfta_id = objectstatus.node_id)
         ELSE ''''
       END AS STATUS_TITLE ,
	   object_id,
	   objectstatus.object_type_id,node_id,objectstatus.WF_ID,aw.WORKFLOW_NAME, objectstatus.wfn_id,objectstatus.node_type, objectstatus.WFG_ID
FROM   objectstatus join ADS_WORKFLOW aw on objectstatus.WF_ID = aw.WF_ID';
END;
/

DECLARE
  TYPECHECKERFLAG INT;
BEGIN
  SELECT COUNT(*)
  INTO TYPECHECKERFLAG
  FROM ALL_OBJECTS
  WHERE OWNER            = sys_context('userenv', 'current_schema')
  AND UPPER(OBJECT_NAME) = 'OBJECT_TYPE_HIR_RESULT_OBJECT'
  AND UPPER(OBJECT_TYPE) ='TYPE';
  IF TYPECHECKERFLAG     = 0 THEN
    EXECUTE IMMEDIATE 'CREATE OR REPLACE TYPE OBJECT_TYPE_HIR_RESULT_OBJECT AS OBJECT (OBJECT_ID NUMBER, OBJECT_TYPE_ID NUMBER, OBJECT_TYPE VARCHAR2(512), OBJECT_REF_KEY VARCHAR2(1024), OBJECT_LEVEL NUMBER,OBJECT_NAME VARCHAR2(4000), OBJECT_ORDER NUMBER)';
  END IF;
END;
/
DECLARE
  TYPECHECKERFLAG INT;
BEGIN
  SELECT COUNT(*)
  INTO TYPECHECKERFLAG
  FROM ALL_OBJECTS
  WHERE OWNER            = sys_context('userenv', 'current_schema')
  AND UPPER(OBJECT_NAME) = 'OBJECT_TYPE_HIR_RESULTS_TABLE'
  AND UPPER(OBJECT_TYPE) ='TYPE';
  IF TYPECHECKERFLAG     = 0 THEN
    EXECUTE IMMEDIATE 'CREATE OR REPLACE TYPE OBJECT_TYPE_HIR_RESULTS_TABLE AS TABLE OF OBJECT_TYPE_HIR_RESULT_OBJECT';
  END IF;
END;
/
DECLARE
  TYPECHECKERFLAG INT;
BEGIN
  SELECT COUNT(*)
  INTO TYPECHECKERFLAG
  FROM ALL_OBJECTS
  WHERE OWNER            = sys_context('userenv', 'current_schema')
  AND UPPER(OBJECT_NAME) = 'OBJECT_TYPE_HIR_IDS_OBJECT'
  AND UPPER(OBJECT_TYPE) ='TYPE';
  IF TYPECHECKERFLAG     = 0 THEN
    EXECUTE IMMEDIATE 'CREATE OR REPLACE TYPE OBJECT_TYPE_HIR_IDS_OBJECT AS OBJECT (OBJECT_ID NUMBER, OBJECT_TYPE VARCHAR2(512),OBJECT_NAME VARCHAR2(4000), OBJECT_ORDER NUMBER)';
  END IF;
END;
/
DECLARE
  TYPECHECKERFLAG INT;
BEGIN
  SELECT COUNT(*)
  INTO TYPECHECKERFLAG
  FROM ALL_OBJECTS
  WHERE OWNER            = sys_context('userenv', 'current_schema')
  AND UPPER(OBJECT_NAME) = 'OBJECT_TYPE_HIR_IDS_TABLE'
  AND UPPER(OBJECT_TYPE) ='TYPE';
  IF TYPECHECKERFLAG     = 0 THEN
    EXECUTE IMMEDIATE 'CREATE OR REPLACE TYPE OBJECT_TYPE_HIR_IDS_TABLE AS TABLE OF OBJECT_TYPE_HIR_IDS_OBJECT';
  END IF;
END;
/
DECLARE
  TYPECHECKERFLAG INT;
BEGIN
  SELECT COUNT(*)
  INTO TYPECHECKERFLAG
  FROM ALL_OBJECTS
  WHERE OWNER            = sys_context('userenv', 'current_schema')
  AND UPPER(OBJECT_NAME) = 'OBJECT_TYPE_HIR_OBJ'
  AND UPPER(OBJECT_TYPE) ='TYPE';
  IF TYPECHECKERFLAG     = 0 THEN
    EXECUTE IMMEDIATE 'CREATE TYPE OBJECT_TYPE_HIR_OBJ AS OBJECT (OBJECT_TYPE_ID NUMBER,OBJECT_TYPE VARCHAR2(512), OBJECT_TABLE VARCHAR2(512), OBJECT_TABLE_COLUMN VARCHAR2(512), OBJECT_PARENT_TYPE VARCHAR2(512), OBJECT_PARENT_COLUMN_ID VARCHAR2(512), OBJECT_LEVEL NUMBER, OBJECT_REF_KEY VARCHAR2(1024))';
  END IF;
END;
/
DECLARE
  TYPECHECKERFLAG INT;
BEGIN
  SELECT COUNT(*)
  INTO TYPECHECKERFLAG
  FROM ALL_OBJECTS
  WHERE OWNER            = sys_context('userenv', 'current_schema')
  AND UPPER(OBJECT_NAME) = 'OBJECT_TYPE_HIR_TAB'
  AND UPPER(OBJECT_TYPE) ='TYPE';
  IF TYPECHECKERFLAG     = 0 THEN
    EXECUTE IMMEDIATE 'CREATE TYPE OBJECT_TYPE_HIR_TAB AS TABLE OF OBJECT_TYPE_HIR_OBJ';
  END IF;
END;
/
DECLARE
	DATACHECKERFLAG INT;
BEGIN
	SELECT COUNT(*) INTO DATACHECKERFLAG FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE = 'BGM_POLICY_CATALOGS';
	IF DATACHECKERFLAG = 0 THEN
            EXECUTE IMMEDIATE 'INSERT INTO ADS_KEY_VALUE_OBJECTS (OBJECT_TYPE,OBJECT_TABLE,OBJECT_TABLE_COLUMN,OBJECT_PARENT_TYPE,OBJECT_PARENT_COLUMN_ID,OBJECT_LEVEL,MODULE_KEY,OBJECT_TITLE, SYSTEM_BASED) VALUES(''BGM_POLICY_CATALOGS'','''','''','''','''',0,''com.ads.mm.permission.bgm'',''Business Policies'', 1)';
            EXECUTE IMMEDIATE 'INSERT INTO ADS_KEY_VALUE_OBJECTS (OBJECT_TYPE,OBJECT_TABLE,OBJECT_TABLE_COLUMN,OBJECT_PARENT_TYPE,OBJECT_PARENT_COLUMN_ID,OBJECT_LEVEL,MODULE_KEY,OBJECT_TITLE, SYSTEM_BASED) VALUES(''BGM_RULE_CATALOGS'','''','''','''','''',0,''com.ads.mm.permission.bgm'',''Business Rules'', 1)';
            EXECUTE IMMEDIATE 'UPDATE ADS_KEY_VALUE_OBJECTS SET OBJECT_PARENT_TYPE = ''BGM_POLICY_CATALOGS'', OBJECT_PARENT_COLUMN_ID = ''BGM_POLICY_CATALOGS_ID'' WHERE OBJECT_TYPE = ''BGM_POLICY_CATALOG''';
            EXECUTE IMMEDIATE 'UPDATE ADS_KEY_VALUE_OBJECTS SET OBJECT_PARENT_TYPE = ''BGM_RULE_CATALOGS'', OBJECT_PARENT_COLUMN_ID = ''BGM_RULE_CATALOGS_ID'' WHERE OBJECT_TYPE = ''BGM_RULE_CATALOG''';
            EXECUTE IMMEDIATE 'UPDATE ADS_KEY_VALUE_OBJECTS SET OBJECT_PARENT_TYPE = ''BGM_POLICY_CATALOG'' WHERE OBJECT_TYPE = ''BGM_POLICY''';
            EXECUTE IMMEDIATE 'UPDATE ADS_KEY_VALUE_OBJECTS SET OBJECT_PARENT_TYPE = ''BGM_RULE_CATALOG'' WHERE OBJECT_TYPE = ''BGM_RULE''';
	END IF;
END;
/
DECLARE
	TABLECHECKERFLAG INT;
BEGIN
  SELECT COUNT(*) INTO TABLECHECKERFLAG FROM ALL_TABLES WHERE OWNER = sys_context('userenv', 'current_schema') AND TABLE_NAME = UPPER('BG_CUSTOM_TYPES');
    IF TABLECHECKERFLAG = 0 THEN
        EXECUTE IMMEDIATE 'CREATE TABLE BG_CUSTOM_TYPES (ID NUMBER,
			OBJECT_TYPE_ID NUMBER NOT NULL,
                        CATALOG_TYPE_ID NUMBER NOT NULL,
                        CATALOGS_TYPE_ID NUMBER NOT NULL,
			NAME VARCHAR2(300) NOT NULL,
			ENTITY_TITLE VARCHAR2(100) NOT NULL,
			DESCRIPTION VARCHAR2(4000) NULL,
			THUMBNAIL_ICON BLOB NULL,
			DOCS_REQUIRED NUMBER(1) DEFAULT 0 NOT NULL,
			ENABLE NUMBER(1) DEFAULT 0 NOT NULL,
                        SYSTEM_BASED NUMBER(1) DEFAULT 0 NOT NULL,
			CONSTRAINT UK_BG_CUST_T_CIDRN UNIQUE(OBJECT_TYPE_ID, NAME),
			CONSTRAINT FK_BG_CUST_T_OBJ_ID FOREIGN KEY(OBJECT_TYPE_ID) REFERENCES ADS_KEY_VALUE_OBJECTS(OBJECT_TYPE_ID) ON DELETE CASCADE,
			CONSTRAINT PK_BG_CUST_T_RID PRIMARY KEY(ID))';
    END IF;
END;
/

DECLARE
   SEQUENCECHECKERFLAG INT;
BEGIN
    SELECT COUNT(*) INTO SEQUENCECHECKERFLAG FROM ALL_SEQUENCES WHERE SEQUENCE_OWNER = sys_context('userenv', 'current_schema') AND SEQUENCE_NAME = UPPER('BG_CUSTOM_TYPES_SEQ');
   IF SEQUENCECHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'CREATE SEQUENCE "BG_CUSTOM_TYPES_SEQ"  MINVALUE 1 MAXVALUE 999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE';
   END IF;
END;
/

DECLARE
  TRIGGERCHECKERFLAG INT;
BEGIN
  SELECT COUNT(*) INTO TRIGGERCHECKERFLAG FROM all_triggers WHERE OWNER = sys_context('userenv', 'current_schema') AND TRIGGER_NAME = UPPER('BG_CUSTOM_TYPES_INSERT');
  IF TRIGGERCHECKERFLAG = 0 THEN
    EXECUTE IMMEDIATE 'CREATE OR REPLACE TRIGGER  "BG_CUSTOM_TYPES_INSERT" BEFORE INSERT ON BG_CUSTOM_TYPES FOR EACH ROW BEGIN SELECT BG_CUSTOM_TYPES_SEQ.NEXTVAL INTO :NEW.ID FROM DUAL; END;';
    EXECUTE IMMEDIATE 'ALTER TRIGGER  "BG_CUSTOM_TYPES_INSERT" ENABLE';
  END IF;
END;
/

DECLARE
	TABLECHECKERFLAG INT;
BEGIN
	SELECT COUNT(*) INTO TABLECHECKERFLAG FROM ALL_TABLES WHERE OWNER = sys_context('userenv', 'current_schema') AND TABLE_NAME = UPPER('BG_CUSTOM_OBJECTS');
    IF TABLECHECKERFLAG = 0 THEN
        EXECUTE IMMEDIATE 'CREATE TABLE BG_CUSTOM_OBJECTS(ID NUMBER,
		CATEGORY_ID  NUMBER NOT NULL,
		OBJECT_TYPE_ID NUMBER NOT NULL,
		NAME VARCHAR2(300) NOT NULL,
		DESCRIPTION VARCHAR2(4000) NULL,
		CONSTRAINT UK_BG_CUST_OBJS_ID UNIQUE(CATEGORY_ID,OBJECT_TYPE_ID,NAME),
		CONSTRAINT FK_BG_CUST_OBJS_CAT_ID FOREIGN KEY(CATEGORY_ID) REFERENCES BG_CATEGORIES(CATEGORY_ID) ON DELETE CASCADE,
		CONSTRAINT FK_BG_CUST_OBJS_ID FOREIGN KEY(OBJECT_TYPE_ID) REFERENCES ADS_KEY_VALUE_OBJECTS(OBJECT_TYPE_ID) ON DELETE CASCADE,
		CONSTRAINT PK_BG_CUST_OBJS_ID PRIMARY KEY(ID))';
    END IF;
END;
/

DECLARE
   SEQUENCECHECKERFLAG INT;
BEGIN
    SELECT COUNT(*) INTO SEQUENCECHECKERFLAG FROM ALL_SEQUENCES WHERE SEQUENCE_OWNER = sys_context('userenv', 'current_schema') AND SEQUENCE_NAME = UPPER('BG_CUSTOM_OBJECTS_SEQ');
   IF SEQUENCECHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'CREATE SEQUENCE "BG_CUSTOM_OBJECTS_SEQ"  MINVALUE 1 MAXVALUE 999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE';
   END IF;
END;
/

DECLARE
  TRIGGERCHECKERFLAG INT;
BEGIN
  SELECT COUNT(*) INTO TRIGGERCHECKERFLAG FROM all_triggers WHERE OWNER = sys_context('userenv', 'current_schema') AND TRIGGER_NAME = UPPER('BG_CUSTOM_OBJECTS_INSERT');
  IF TRIGGERCHECKERFLAG = 0 THEN
    EXECUTE IMMEDIATE 'CREATE OR REPLACE TRIGGER  "BG_CUSTOM_OBJECTS_INSERT" BEFORE INSERT ON BG_CUSTOM_OBJECTS FOR EACH ROW BEGIN SELECT BG_CUSTOM_OBJECTS_SEQ.NEXTVAL INTO :NEW.ID FROM DUAL; END;';
    EXECUTE IMMEDIATE 'ALTER TRIGGER  "BG_CUSTOM_OBJECTS_INSERT" ENABLE';
  END IF;
END;
/
DECLARE
    CONTCHECKER INT;
    BUSINESS_RULE_OBJECT_TYPE_ID INT;
    BUSINESS_POLICY_OBJECT_TYPE_ID INT;
    Begin
	SELECT OBJECT_TYPE_ID INTO BUSINESS_RULE_OBJECT_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE='BGM_RULE' AND ROWNUM  =1;
        SELECT OBJECT_TYPE_ID INTO BUSINESS_POLICY_OBJECT_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE='BGM_POLICY' AND ROWNUM  =1;
	SELECT COUNT(*) INTO CONTCHECKER FROM ADS_WORKFLOW_TRIGGER_ACTION WHERE OBJECT_TYPE_ID  = BUSINESS_RULE_OBJECT_TYPE_ID OR OBJECT_TYPE_ID = BUSINESS_POLICY_OBJECT_TYPE_ID;
    If CONTCHECKER = 0 Then
        INSERT INTO ADS_WORKFLOW_TRIGGER_ACTION  (NAME,TITLE,DESCRIPTION,STATUS_TITLE,OBJECT_TYPE_ID,FILENAME,METHOD,NODE_TYPE) VALUES('ON_CREATE','On Create','On Create','Draft', BUSINESS_RULE_OBJECT_TYPE_ID, 'BGM_Triggers.js','onBusinessRuleCreate','T');
        INSERT INTO ADS_WORKFLOW_TRIGGER_ACTION  (NAME,TITLE,DESCRIPTION,STATUS_TITLE,OBJECT_TYPE_ID,FILENAME,METHOD,NODE_TYPE) VALUES('ON_CREATE','On Create','On Create','Draft', BUSINESS_POLICY_OBJECT_TYPE_ID, 'BGM_Triggers.js','onBusinessPolicyCreate','T');
        INSERT INTO ADS_WORKFLOW_TRIGGER_ACTION  (NAME,TITLE,DESCRIPTION,STATUS_TITLE,OBJECT_TYPE_ID,FILENAME,METHOD,NODE_TYPE) VALUES('PUBLISH','Publish','Publish','Published',BUSINESS_RULE_OBJECT_TYPE_ID, 'BGM_Actions.js','onBusinessRulePublish','A');
        INSERT INTO ADS_WORKFLOW_TRIGGER_ACTION  (NAME,TITLE,DESCRIPTION,STATUS_TITLE,OBJECT_TYPE_ID,FILENAME,METHOD,NODE_TYPE) VALUES('PUBLISH','Publish','Publish','Published',BUSINESS_POLICY_OBJECT_TYPE_ID, 'BGM_Actions.js','onBusinessPolicyPublish','A');
    End If;
End;
/
DECLARE
    CONTCHECKER INT;
    TERM_TYPE_ID INT;
    T_CATALOG_TYPE_ID INT;
    T_CATALOGS_TYPE_ID INT;
    Begin
	SELECT OBJECT_TYPE_ID  INTO TERM_TYPE_ID  FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE='BGM_TERM';
	SELECT OBJECT_TYPE_ID  INTO T_CATALOG_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE='BGM_TERM_CATALOG';
	SELECT OBJECT_TYPE_ID  INTO T_CATALOGS_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE='BGM_TERM_CATALOGS';
	SELECT COUNT(*) INTO CONTCHECKER  FROM BG_CUSTOM_TYPES WHERE OBJECT_TYPE_ID  = TERM_TYPE_ID AND CATALOG_TYPE_ID = T_CATALOG_TYPE_ID AND NAME = 'Business Terms';
    If CONTCHECKER = 0 Then
        INSERT INTO  BG_CUSTOM_TYPES(OBJECT_TYPE_ID,CATALOG_TYPE_ID,CATALOGS_TYPE_ID,NAME,ENTITY_TITLE, DESCRIPTION,THUMBNAIL_ICON,DOCS_REQUIRED, ENABLE,SYSTEM_BASED) values(TERM_TYPE_ID,T_CATALOG_TYPE_ID,T_CATALOGS_TYPE_ID,'Business Terms','Business Term','Business Terms Description',null,1,1,1);
    End If;
End;
/
DECLARE
    CONTCHECKER INT;
    POLICY_TYPE_ID INT;
    P_CATALOG_TYPE_ID INT;
    P_CATALOGS_TYPE_ID INT;
    Begin
	SELECT OBJECT_TYPE_ID  INTO  POLICY_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE='BGM_POLICY';
	SELECT OBJECT_TYPE_ID  INTO  P_CATALOG_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE='BGM_POLICY_CATALOG';
	SELECT OBJECT_TYPE_ID  INTO  P_CATALOGS_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE='BGM_POLICY_CATALOGS';
	SELECT COUNT(*) INTO CONTCHECKER  FROM BG_CUSTOM_TYPES WHERE OBJECT_TYPE_ID  = POLICY_TYPE_ID AND CATALOG_TYPE_ID = P_CATALOG_TYPE_ID AND NAME = 'Business Policies';
    If CONTCHECKER = 0 Then
	INSERT INTO  BG_CUSTOM_TYPES(OBJECT_TYPE_ID,CATALOG_TYPE_ID,CATALOGS_TYPE_ID,NAME,ENTITY_TITLE, DESCRIPTION,THUMBNAIL_ICON,DOCS_REQUIRED, ENABLE,SYSTEM_BASED) values(POLICY_TYPE_ID,P_CATALOG_TYPE_ID,P_CATALOGS_TYPE_ID,'Business Policies','Business Policy','Business Policies Description',null,1,1,1);
    End If;
End;
/
DECLARE
    CONTCHECKER INT;
    RULE_TYPE_ID INT;
    R_CATALOG_TYPE_ID INT;
    R_CATALOGS_TYPE_ID INT;
    Begin
	SELECT OBJECT_TYPE_ID  INTO  RULE_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE='BGM_RULE';
	SELECT OBJECT_TYPE_ID  INTO  R_CATALOG_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE='BGM_RULE_CATALOG';
	SELECT OBJECT_TYPE_ID  INTO  R_CATALOGS_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE='BGM_RULE_CATALOGS';
	SELECT COUNT(*) INTO CONTCHECKER  FROM BG_CUSTOM_TYPES WHERE OBJECT_TYPE_ID  = RULE_TYPE_ID AND CATALOG_TYPE_ID = R_CATALOG_TYPE_ID AND NAME = 'Business Rules';
    If CONTCHECKER = 0 Then
	INSERT INTO  BG_CUSTOM_TYPES(OBJECT_TYPE_ID,CATALOG_TYPE_ID,CATALOGS_TYPE_ID,NAME,ENTITY_TITLE, DESCRIPTION,THUMBNAIL_ICON,DOCS_REQUIRED, ENABLE,SYSTEM_BASED) values(RULE_TYPE_ID,R_CATALOG_TYPE_ID,R_CATALOGS_TYPE_ID,'Business Rules','Business Rule','Business Rules Description',null,1,1,1);
    End If;
End;
/

DECLARE
   TABLECHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO TABLECHECKERFLAG FROM ALL_OBJECTS WHERE OWNER = sys_context('userenv', 'current_schema') AND OBJECT_TYPE = 'FUNCTION' AND OBJECT_NAME = UPPER('FN_GET_OBJECT_TYPE_HIR');
   IF TABLECHECKERFLAG = 1 THEN
      EXECUTE IMMEDIATE 'DROP FUNCTION FN_GET_OBJECT_TYPE_HIR';
   END IF;
END;
/

CREATE OR REPLACE
  FUNCTION FN_GET_OBJECT_TYPE_HIR(
      F_OBJECT_TYPE_ID              NUMBER,
      F_CHILD_CONFIG_OBJECT_TYPE_ID NUMBER)
    RETURN OBJECT_TYPE_HIR_TAB PIPELINED
  IS
    F_TEMP_OBJECT_TYPE         VARCHAR2(512);
    F_CHILD_CONFIG_OBJECT_TYPE VARCHAR2(512);
    F_KEY_VALUE_OBJECT_TYPE    VARCHAR2(512) := NULL;
  TYPE REFHIRCURSOR
IS
  REF
  CURSOR;
    HIRCURSOR REFHIRCURSOR;
    out_rec OBJECT_TYPE_HIR_OBJ := OBJECT_TYPE_HIR_OBJ(NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL);
  BEGIN
    SELECT OBJECT_TYPE
    INTO F_KEY_VALUE_OBJECT_TYPE
    FROM ADS_KEY_VALUE_OBJECTS
    WHERE OBJECT_TYPE_ID            = F_OBJECT_TYPE_ID;
  F_TEMP_OBJECT_TYPE               := F_KEY_VALUE_OBJECT_TYPE;
  IF F_CHILD_CONFIG_OBJECT_TYPE_ID IS NOT NULL AND F_CHILD_CONFIG_OBJECT_TYPE_ID > 0 THEN
    BEGIN
      SELECT OBJECT_TYPE
      INTO F_CHILD_CONFIG_OBJECT_TYPE
      FROM ADS_KEY_VALUE_OBJECTS
      WHERE OBJECT_TYPE_ID = F_CHILD_CONFIG_OBJECT_TYPE_ID;
      F_TEMP_OBJECT_TYPE  := F_CHILD_CONFIG_OBJECT_TYPE;
    EXCEPTION
    WHEN NO_DATA_FOUND THEN
      F_CHILD_CONFIG_OBJECT_TYPE := NULL;
    END;
  END IF;
  OPEN HIRCURSOR FOR SELECT KVOT.OBJECT_TYPE_ID,
  KVOT.OBJECT_TYPE,
  KVOT.OBJECT_TABLE,
  KVOT.OBJECT_TABLE_COLUMN,
  KVOT.OBJECT_PARENT_TYPE,
  KVOT.OBJECT_PARENT_COLUMN_ID,
  KVOT.OBJECT_LEVEL,
  KVOT.OBJECT_TYPE || '#' || F_TEMP_OBJECT_TYPE FROM ADS_KEY_VALUE_OBJECTS KVOT START WITH KVOT.OBJECT_TYPE = F_KEY_VALUE_OBJECT_TYPE CONNECT BY nocycle KVOT.OBJECT_TYPE = prior KVOT.OBJECT_PARENT_TYPE;
  LOOP
    FETCH HIRCURSOR
    INTO out_rec.OBJECT_TYPE_ID,
      out_rec.OBJECT_TYPE,
      out_rec.OBJECT_TABLE,
      out_rec.OBJECT_TABLE_COLUMN,
      out_rec.OBJECT_PARENT_TYPE,
      out_rec.OBJECT_PARENT_COLUMN_ID,
      out_rec.OBJECT_LEVEL,
      out_rec.OBJECT_REF_KEY;
    EXIT
  WHEN HIRCURSOR%NOTFOUND;
    PIPE ROW(out_rec);
  END LOOP;
  IF HIRCURSOR%NOTFOUND THEN
    RETURN;
  END IF;
  CLOSE HIRCURSOR;
  RETURN;
END FN_GET_OBJECT_TYPE_HIR;
/

DECLARE
   TABLECHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO TABLECHECKERFLAG FROM ALL_OBJECTS WHERE OWNER = sys_context('userenv', 'current_schema') AND OBJECT_TYPE = 'FUNCTION' AND OBJECT_NAME = UPPER('FN_GET_OBJECT_HIR');
   IF TABLECHECKERFLAG = 1 THEN
      EXECUTE IMMEDIATE 'DROP FUNCTION FN_GET_OBJECT_HIR';
   END IF;
END;
/

CREATE OR REPLACE
FUNCTION FN_GET_OBJECT_HIR(
    F_OBJECT_ID                   IN NUMBER,
    F_OBJECT_TYPE_ID              IN NUMBER,
    F_CHILD_CONFIG_OBJECT_TYPE_ID IN NUMBER)
  RETURN OBJECT_TYPE_HIR_RESULTS_TABLE PIPELINED
AS
  VIR_OBJ_TYPE_HIR_RES_TAB OBJECT_TYPE_HIR_IDS_TABLE  := OBJECT_TYPE_HIR_IDS_TABLE();
  VIR_OBJ_TYPE_HIR_RES_TAB2 OBJECT_TYPE_HIR_IDS_TABLE := OBJECT_TYPE_HIR_IDS_TABLE();
  Vir_Object_Type_Hir_Tab Object_Type_Hir_Tab         := Object_Type_Hir_Tab();
  F_KEY_VALUE_OBJECT_TYPE_ID   NUMBER;
  F_KEY_VALUE_OBJECT_TYPE      VARCHAR2(512) := NULL;
  F_TEMP_OBJECT_ID             NUMBER;
  F_TEMP_OBJECT_TYPE_ID        NUMBER;
  F_OBJECT_MODULE_ID           VARCHAR2(512) := NULL;
  F_CHILD_CONFIG_OBJECT_TYPE   VARCHAR2(512);
  F_TEMP_OBJECT_TYPE           VARCHAR2(255);
  F_OBJECT_LEVEL               NUMBER;
  F_CURRENT_TABLE_NAME         VARCHAR2(4000);
  F_CURRENT_PARENT_COLUMN_NAME VARCHAR2(4000);
  F_CURRENT_COLUMN_NAME        VARCHAR2(4000);
  F_PREVIOUS_OBJECT_ID         NUMBER;
  F_CURRENT_OBJECT_TYPE_ID     VARCHAR2(4000);
  F_CURRENT_OBJECT_LEVEL       NUMBER;
  F_CURRENT_OBJECT_TYPE        VARCHAR2(4000);
  F_CURRENT_OBJECT_PARENT_TYPE VARCHAR2(4000);
  F_CURRENT_OBJECT_NAME        VARCHAR2(4000);
  F_CURRENT_OBJECT_PARENT_NAME VARCHAR2(4000);
  F_OBJECT_KEY_ID              NUMBER;
  F_OBJECT_KEY                 VARCHAR2(256);
  F_MAP_ID                     NUMBER;
  F_SUBJECT_ID                 NUMBER;
  F_PROJECT_ID                 NUMBER;
  F_SYSTEM_ID                  NUMBER;
  F_SCE_ID                     NUMBER;
  F_Stm_Id                     NUMBER;
  F_CATEGORY_ID                NUMBER;
  F_SCE_DATABASE_TYPE          VARCHAR2(64);
  F_COUNT                      NUMBER := 0;
  F_SYSTEM_BASED 			   NUMBER(1);
  F_R_CATEGORY_ID 			   NUMBER;
BEGIN
  F_PREVIOUS_OBJECT_ID := F_OBJECT_ID;
  SELECT OBJECT_TYPE_ID
  INTO F_KEY_VALUE_OBJECT_TYPE_ID
  FROM ADS_KEY_VALUE_OBJECTS
  WHERE OBJECT_TYPE = 'ADS_KEY_VALUE';
  SELECT OBJECT_TYPE,
    MODULE_KEY,
    OBJECT_LEVEL,
    SYSTEM_BASED
  INTO F_KEY_VALUE_OBJECT_TYPE,
    F_OBJECT_MODULE_ID,
    F_OBJECT_LEVEL,
	F_SYSTEM_BASED
  FROM ADS_KEY_VALUE_OBJECTS
  WHERE OBJECT_TYPE_ID              = F_OBJECT_TYPE_ID;
  IF F_CHILD_CONFIG_OBJECT_TYPE_ID IS NOT NULL AND F_CHILD_CONFIG_OBJECT_TYPE_ID > 0 THEN
    BEGIN
      SELECT OBJECT_TYPE
      INTO F_CHILD_CONFIG_OBJECT_TYPE
      FROM ADS_KEY_VALUE_OBJECTS
      WHERE OBJECT_TYPE_ID = F_CHILD_CONFIG_OBJECT_TYPE_ID;
      SELECT KV_ID
      INTO F_TEMP_OBJECT_ID
      FROM ADS_KEY_VALUE
      WHERE OBJECT_ID    = F_OBJECT_ID
      AND OBJECT_TYPE_ID = F_OBJECT_TYPE_ID
      AND KEY_NAME       = F_KEY_VALUE_OBJECT_TYPE
        || '#'
        || F_CHILD_CONFIG_OBJECT_TYPE;
      F_TEMP_OBJECT_TYPE_ID := F_KEY_VALUE_OBJECT_TYPE_ID;
      F_TEMP_OBJECT_TYPE    := F_CHILD_CONFIG_OBJECT_TYPE;
    EXCEPTION
    WHEN NO_DATA_FOUND THEN
      F_OBJECT_KEY_ID := NULL;
    END;
  END IF;
  SELECT OBJECT_TYPE_HIR_OBJ(OBJECT_TYPE_ID, OBJECT_TYPE,OBJECT_TABLE,OBJECT_TABLE_COLUMN,OBJECT_PARENT_TYPE,OBJECT_PARENT_COLUMN_ID,OBJECT_LEVEL,OBJECT_REF_KEY) Bulk Collect
  INTO Vir_Object_Type_Hir_Tab
  FROM TABLE(FN_GET_OBJECT_TYPE_HIR(F_OBJECT_TYPE_ID, F_CHILD_CONFIG_OBJECT_TYPE_ID));
  FOR LOOP_KVOT IN
  ( SELECT * FROM TABLE(Vir_Object_Type_Hir_Tab)
  )
  LOOP
    IF TRIM(LOOP_KVOT.OBJECT_PARENT_COLUMN_ID) IS NOT NULL THEN
      F_CURRENT_TABLE_NAME                     := LOOP_KVOT.OBJECT_TABLE;
      F_CURRENT_PARENT_COLUMN_NAME             := LOOP_KVOT.OBJECT_PARENT_COLUMN_ID;
      F_CURRENT_OBJECT_TYPE_ID                 := LOOP_KVOT.OBJECT_TYPE_ID;
      F_CURRENT_COLUMN_NAME                    := LOOP_KVOT.OBJECT_TABLE_COLUMN;
      F_CURRENT_OBJECT_LEVEL                   := LOOP_KVOT.OBJECT_LEVEL;
      F_CURRENT_OBJECT_TYPE                    := LOOP_KVOT.OBJECT_TYPE;
      F_CURRENT_OBJECT_PARENT_TYPE             := LOOP_KVOT.OBJECT_PARENT_TYPE;
      BEGIN
        IF F_OBJECT_MODULE_ID = 'com.ads.mm.permission.mm' THEN
          BEGIN
            IF F_CURRENT_OBJECT_TYPE = 'MM_MAPPING_ROW' THEN
              BEGIN
                SELECT MD.MAP_ID,
                  MD.MAP_NAME
                INTO F_MAP_ID,
                  F_CURRENT_OBJECT_NAME
                FROM MAPPING_SPECIFICATION MS
                JOIN MAPPING_DETAILS MD
                ON MD.MAP_ID          = MS.MAP_ID
                WHERE MAP_SEQ_ID      = F_PREVIOUS_OBJECT_ID;
                F_PREVIOUS_OBJECT_ID := F_MAP_ID;
                F_COUNT              := F_COUNT+1;
                VIR_OBJ_TYPE_HIR_RES_TAB.Extend;
                VIR_OBJ_TYPE_HIR_RES_TAB(VIR_OBJ_TYPE_HIR_RES_TAB.Count) := OBJECT_TYPE_HIR_IDS_OBJECT(F_MAP_ID, F_CURRENT_OBJECT_PARENT_TYPE,F_CURRENT_OBJECT_NAME,F_COUNT);
              END;
            ELSIF F_CURRENT_OBJECT_TYPE = 'MM_MAPPING' THEN
              BEGIN
                SELECT MD.SUBJECT_ID,
                  MD.PROJECT_ID,
                  SD.SUBJECT_NAME
                INTO F_SUBJECT_ID,
                  F_PROJECT_ID,
                  F_CURRENT_OBJECT_NAME
                FROM MAPPING_DETAILS MD
                JOIN PROJECT P
                ON P.PROJ_ID = MD.PROJECT_ID
                LEFT JOIN SUBJECT_DETAILS SD
                ON SD.SUBJECT_ID       = MD.SUBJECT_ID
                WHERE MAP_ID           = F_PREVIOUS_OBJECT_ID;
                IF TRIM(F_SUBJECT_ID) IS NOT NULL AND F_SUBJECT_ID <> -1 THEN
                  BEGIN
                    F_COUNT              := F_COUNT+1;
                    F_PREVIOUS_OBJECT_ID := F_SUBJECT_ID;
                    VIR_OBJ_TYPE_HIR_RES_TAB.Extend;
                    VIR_OBJ_TYPE_HIR_RES_TAB(VIR_OBJ_TYPE_HIR_RES_TAB.Count) := OBJECT_TYPE_HIR_IDS_OBJECT(F_SUBJECT_ID, F_CURRENT_OBJECT_PARENT_TYPE,F_CURRENT_OBJECT_NAME,F_COUNT);
                  END;
                END IF;
              END;
            ELSIF F_CURRENT_OBJECT_TYPE = 'MM_SUBJECT' THEN
              BEGIN
                IF ((TRIM(F_SUBJECT_ID) IS NOT NULL AND F_SUBJECT_ID <> -1) OR F_CURRENT_OBJECT_TYPE_ID = F_OBJECT_TYPE_ID) THEN
                  BEGIN
                  WITH object_hir_v AS
                    (SELECT SD.SUBJECT_ID,
                      SD.PARENT_SUBJECT_ID,
                      SD.SUBJECT_NAME,
                      LEVEL AS OBJECT_LEVEL
                    FROM SUBJECT_DETAILS SD
                      START WITH SD.SUBJECT_ID         = F_PREVIOUS_OBJECT_ID
                      CONNECT BY nocycle SD.SUBJECT_ID = prior SD.PARENT_SUBJECT_ID
                    ),
                    RESULTHIR AS
                    (SELECT SUBJECT_ID,
                      F_CURRENT_OBJECT_TYPE,
                      SUBJECT_NAME,
                      (OBJECT_LEVEL+F_COUNT-1) OBJ_LEVEL
                    FROM OBJECT_HIR_V
                    WHERE SUBJECT_ID <> F_PREVIOUS_OBJECT_ID
                    )
                  SELECT Object_Type_Hir_Ids_Object(Subject_Id, F_Current_Object_Type,Subject_Name,Obj_Level) Bulk Collect
                  INTO VIR_OBJ_TYPE_HIR_RES_TAB2
                  FROM Resulthir;
                  FOR Res_Record IN
                  (SELECT * FROM TABLE(VIR_OBJ_TYPE_HIR_RES_TAB2)
                  )
                  LOOP
                    BEGIN
                      VIR_OBJ_TYPE_HIR_RES_TAB.Extend;
                      Vir_Obj_Type_Hir_Res_Tab(Vir_Obj_Type_Hir_Res_Tab.Count) := Object_Type_Hir_Ids_Object(Res_Record.OBJECT_ID, Res_Record.OBJECT_TYPE, Res_Record.OBJECT_NAME, Res_Record.OBJECT_ORDER);
                    END;
                  END LOOP Res_Record;
                  SELECT NVL(MAX(OBJECT_ORDER),0) +1
                  INTO F_COUNT
                  FROM TABLE(VIR_OBJ_TYPE_HIR_RES_TAB);
                  SELECT PROJECT_ID,
                    P.PROJ_NAME
                  INTO F_PROJECT_ID,
                    F_CURRENT_OBJECT_NAME
                  FROM SUBJECT_DETAILS SD
                  JOIN PROJECT P
                  ON P.PROJ_ID     = SD.PROJECT_ID
                  WHERE SUBJECT_ID = F_PREVIOUS_OBJECT_ID;
                  VIR_OBJ_TYPE_HIR_RES_TAB.Extend;
                  VIR_OBJ_TYPE_HIR_RES_TAB(VIR_OBJ_TYPE_HIR_RES_TAB.Count) := OBJECT_TYPE_HIR_IDS_OBJECT(F_PROJECT_ID, 'MM_PROJECT',F_CURRENT_OBJECT_NAME,F_COUNT);
                END;
              ELSE
                BEGIN
                  F_COUNT := F_COUNT+1;
                  SELECT PROJ_ID,
                    P.PROJ_NAME
                  INTO F_PROJECT_ID,
                    F_CURRENT_OBJECT_NAME
                  FROM PROJECT P
                  JOIN MAPPING_DETAILS MD
                  ON P.PROJ_ID    = MD.PROJECT_ID
                  WHERE md.MAP_ID = F_PREVIOUS_OBJECT_ID;
                  VIR_OBJ_TYPE_HIR_RES_TAB.Extend;
                  VIR_OBJ_TYPE_HIR_RES_TAB(VIR_OBJ_TYPE_HIR_RES_TAB.Count) := OBJECT_TYPE_HIR_IDS_OBJECT(F_PROJECT_ID, 'MM_PROJECT',F_CURRENT_OBJECT_NAME,F_COUNT);
                END;
              END IF;
            END;
          ELSIF F_CURRENT_OBJECT_TYPE = 'MM_PROJECT' THEN
            BEGIN
              F_COUNT := F_COUNT+1;
              VIR_OBJ_TYPE_HIR_RES_TAB.Extend;
              VIR_OBJ_TYPE_HIR_RES_TAB(VIR_OBJ_TYPE_HIR_RES_TAB.Count) := OBJECT_TYPE_HIR_IDS_OBJECT(-1, F_CURRENT_OBJECT_PARENT_TYPE,'MAPPINGS',F_COUNT);
            END;
          END IF;
        END;
      ELSIF F_OBJECT_MODULE_ID = 'com.ads.mm.permission.sm' THEN
        BEGIN
          IF F_CURRENT_OBJECT_TYPE = 'SM_COLUMN' THEN
            BEGIN
              F_COUNT := F_COUNT+1;
              SELECT STM_ID,
                TABLE_NAME
              INTO F_STM_ID,
                F_CURRENT_OBJECT_NAME
              FROM SYSTEM_TABLE_COLUMNS_METADATA
              WHERE STCM_ID         = F_PREVIOUS_OBJECT_ID;
              F_PREVIOUS_OBJECT_ID := F_STM_ID;
              VIR_OBJ_TYPE_HIR_RES_TAB.Extend;
              VIR_OBJ_TYPE_HIR_RES_TAB(VIR_OBJ_TYPE_HIR_RES_TAB.Count) := OBJECT_TYPE_HIR_IDS_OBJECT(F_STM_ID, F_CURRENT_OBJECT_PARENT_TYPE,F_CURRENT_OBJECT_NAME,F_COUNT);
            END;
          ELSIF F_CURRENT_OBJECT_TYPE = 'SM_TABLE' THEN
            BEGIN
              SELECT SCE_ID
              INTO F_SCE_ID
              FROM SYSTEM_TABLE_METADATA
              WHERE STM_ID = F_PREVIOUS_OBJECT_ID;
              SELECT DATABASE_TYPE,
                SYSTEM_ENVIRONMENT_NAME
              INTO F_SCE_DATABASE_TYPE,
                F_CURRENT_OBJECT_NAME
              FROM SYS_CON_ENVIRONMENTS
              WHERE SCE_ID           = F_SCE_ID;
              IF F_SCE_DATABASE_TYPE = 'XSD' OR F_SCE_DATABASE_TYPE = 'JSON' THEN
                BEGIN
                WITH ENV_OBJECTS AS
                  (SELECT STM_ID,
                    STCM_ID,
                    TABLE_NAME,
                    COLUMN_NAME
                  FROM SYSTEM_TABLE_COLUMNS_METADATA
                  WHERE SCE_ID = F_SCE_ID
                  ),
                  OBJ_HIR_V AS
                  (SELECT STM_ID,
                    TABLE_NAME,
                    COLUMN_NAME,
                    LEVEL AS OBJ_LEVEL
                  FROM ENV_OBJECTS
                    START WITH STM_ID              = F_PREVIOUS_OBJECT_ID
                    CONNECT BY Nocycle Column_Name = Prior Table_Name
                  ),
                  Resulthir AS
                  (SELECT Stm_Id,
                    F_CURRENT_OBJECT_TYPE CURRENT_OBJECT_TYPE,
                    TABLE_NAME,
                    (OBJ_LEVEL+F_COUNT-1) RES_COUNT
                  FROM OBJ_HIR_V
                  WHERE STM_ID <> F_PREVIOUS_OBJECT_ID
                  UNION
                  SELECT STM_ID,
                    F_CURRENT_OBJECT_TYPE,
                    TABLE_NAME,
                    (OBJ_LEVEL+F_COUNT-1) RES_COUNT
                  FROM OBJ_HIR_V
                  WHERE STM_ID <> F_PREVIOUS_OBJECT_ID
                  )
                SELECT OBJECT_TYPE_HIR_IDS_OBJECT(STM_ID, F_CURRENT_OBJECT_TYPE,TABLE_NAME,RES_COUNT) Bulk Collect
                INTO VIR_OBJ_TYPE_HIR_RES_TAB2
                FROM RESULTHIR;
                FOR Res_Record IN
                (SELECT * FROM TABLE(VIR_OBJ_TYPE_HIR_RES_TAB2)
                )
                LOOP
                  BEGIN
                    VIR_OBJ_TYPE_HIR_RES_TAB.Extend;
                    Vir_Obj_Type_Hir_Res_Tab(Vir_Obj_Type_Hir_Res_Tab.Count) := Object_Type_Hir_Ids_Object(Res_Record.OBJECT_ID, Res_Record.OBJECT_TYPE, Res_Record.OBJECT_NAME, Res_Record.OBJECT_ORDER);
                  END;
                END LOOP Res_Record;
              END;
            END IF;
            SELECT NVL(MAX(OBJECT_ORDER),0) +1
            INTO F_COUNT
            FROM TABLE(VIR_OBJ_TYPE_HIR_RES_TAB);
            F_PREVIOUS_OBJECT_ID := F_SCE_ID;
            VIR_OBJ_TYPE_HIR_RES_TAB.Extend;
            VIR_OBJ_TYPE_HIR_RES_TAB(VIR_OBJ_TYPE_HIR_RES_TAB.Count) := OBJECT_TYPE_HIR_IDS_OBJECT(F_SCE_ID, F_CURRENT_OBJECT_PARENT_TYPE,F_CURRENT_OBJECT_NAME,F_COUNT);
          END;
        ELSIF F_CURRENT_OBJECT_TYPE = 'SM_ENVIRONMENT' THEN
          BEGIN
            F_COUNT := F_COUNT+1;
            SELECT SYSTEM_ID,
              SYSTEM_NAME
            INTO F_SYSTEM_ID,
              F_CURRENT_OBJECT_NAME
            FROM SYS_CON_ENVIRONMENTS
            WHERE SCE_ID          = F_PREVIOUS_OBJECT_ID;
            F_PREVIOUS_OBJECT_ID := F_SYSTEM_ID;
            VIR_OBJ_TYPE_HIR_RES_TAB.Extend;
            VIR_OBJ_TYPE_HIR_RES_TAB(VIR_OBJ_TYPE_HIR_RES_TAB.Count) := OBJECT_TYPE_HIR_IDS_OBJECT(F_SYSTEM_ID, F_CURRENT_OBJECT_PARENT_TYPE,F_CURRENT_OBJECT_NAME,F_COUNT);
          END;
        ELSIF F_CURRENT_OBJECT_TYPE = 'SM_SYSTEM' THEN
          BEGIN
            F_COUNT := F_COUNT+1;
            VIR_OBJ_TYPE_HIR_RES_TAB.Extend;
            VIR_OBJ_TYPE_HIR_RES_TAB(VIR_OBJ_TYPE_HIR_RES_TAB.Count) := OBJECT_TYPE_HIR_IDS_OBJECT(-1, F_CURRENT_OBJECT_PARENT_TYPE,'METADATA',F_COUNT);
          END;
        END IF;
      END;
    Elsif F_Object_Module_Id = 'com.ads.mm.permission.bgm' THEN
      BEGIN
		IF F_SYSTEM_BASED = 1 THEN
		  BEGIN
			IF F_Current_Object_Type = 'BGM_TERM' THEN
			  BEGIN
				F_COUNT := F_COUNT+1;
				SELECT BGC.CATEGORY_ID,
				  BGC.CATEGORY_NAME
				INTO F_CATEGORY_ID,
				  F_CURRENT_OBJECT_NAME
				FROM BUSINESS_TERMS BT
				JOIN Bg_Categories Bgc
				ON Bgc.Category_Id    = Bt.Category_Id
				WHERE Bus_Term_Id     = F_Previous_Object_Id;
				F_Previous_Object_Id := F_Category_Id;
				Vir_Obj_Type_Hir_Res_Tab.Extend;
				VIR_OBJ_TYPE_HIR_RES_TAB(VIR_OBJ_TYPE_HIR_RES_TAB.Count) := OBJECT_TYPE_HIR_IDS_OBJECT(F_CATEGORY_ID, F_CURRENT_OBJECT_PARENT_TYPE, F_CURRENT_OBJECT_NAME, F_COUNT);
			  END;
			Elsif F_CURRENT_OBJECT_TYPE = 'BGM_RULE' THEN
			  BEGIN
                F_COUNT := F_COUNT+1;
				SELECT BGC.CATEGORY_ID, BGC.CATEGORY_NAME
				INTO F_CATEGORY_ID, F_CURRENT_OBJECT_NAME
				FROM BG_BUSINESS_RULES BR
				JOIN BG_CATEGORIES BGC ON BGC.CATEGORY_ID = BR.CATALOG_ID
				WHERE BR.ID = F_PREVIOUS_OBJECT_ID;
				F_PREVIOUS_OBJECT_ID := F_CATEGORY_ID;
				Vir_Obj_Type_Hir_Res_Tab.Extend;
				VIR_OBJ_TYPE_HIR_RES_TAB(VIR_OBJ_TYPE_HIR_RES_TAB.Count) := OBJECT_TYPE_HIR_IDS_OBJECT(F_CATEGORY_ID, F_CURRENT_OBJECT_PARENT_TYPE, F_CURRENT_OBJECT_NAME, F_COUNT);
			  END;
            Elsif F_CURRENT_OBJECT_TYPE = 'BGM_POLICY' THEN
              BEGIN
                F_COUNT := F_COUNT+1;
				SELECT BGC.CATEGORY_ID, BGC.CATEGORY_NAME
				INTO F_CATEGORY_ID, F_CURRENT_OBJECT_NAME
				FROM BG_POLICIES BP
				JOIN BG_CATEGORIES BGC ON BGC.CATEGORY_ID = BP.CATALOG_ID
				WHERE BP.ID = F_PREVIOUS_OBJECT_ID;
				F_PREVIOUS_OBJECT_ID := F_CATEGORY_ID;
				Vir_Obj_Type_Hir_Res_Tab.Extend;
				VIR_OBJ_TYPE_HIR_RES_TAB(VIR_OBJ_TYPE_HIR_RES_TAB.Count) := OBJECT_TYPE_HIR_IDS_OBJECT(F_CATEGORY_ID, F_CURRENT_OBJECT_PARENT_TYPE, F_CURRENT_OBJECT_NAME, F_COUNT);
			  END;
			Elsif F_Current_Object_Type IN ('BGM_TERM_CATALOG', 'BGM_RULE_CATALOG', 'BGM_POLICY_CATALOG') THEN
			  BEGIN
			  WITH object_hir_v AS
				(SELECT Bc.Category_Id,
				  Bc.Parent_Category_Id,
				  bc.category_NAME,
				  Level AS Object_Level
				FROM Bg_Categories Bc
				  START WITH Bc.Category_Id         = F_Previous_Object_Id
				  CONNECT BY nocycle bc.Category_Id = prior bc.Parent_Category_Id
				),
				RESULTHIR AS
				(SELECT Category_Id,
				  F_CURRENT_OBJECT_TYPE,
				  category_NAME,
				  (OBJECT_LEVEL+F_COUNT-1) OBJ_LEVEL
				FROM OBJECT_HIR_V
				WHERE Category_Id <> F_Previous_Object_Id
				)
			  SELECT Object_Type_Hir_Ids_Object(Category_Id, F_Current_Object_Type,category_NAME,Obj_Level) Bulk Collect
			  INTO VIR_OBJ_TYPE_HIR_RES_TAB2
			  FROM Resulthir;
			  FOR Res_Record IN
			  (SELECT * FROM TABLE(VIR_OBJ_TYPE_HIR_RES_TAB2)
			  )
			  LOOP
				BEGIN
				  VIR_OBJ_TYPE_HIR_RES_TAB.Extend;
				  Vir_Obj_Type_Hir_Res_Tab(Vir_Obj_Type_Hir_Res_Tab.Count) := Object_Type_Hir_Ids_Object(Res_Record.Object_Id, Res_Record.Object_Type, Res_Record.OBJECT_NAME, Res_Record.OBJECT_ORDER);
				END;
			  END LOOP Res_Record;
			  SELECT NVL(MAX(OBJECT_ORDER),0) +1 Into F_Count FROM TABLE(VIR_OBJ_TYPE_HIR_RES_TAB);
			  Vir_Obj_Type_Hir_Res_Tab.Extend;
			  Vir_Obj_Type_Hir_Res_Tab(Vir_Obj_Type_Hir_Res_Tab.Count) := Object_Type_Hir_Ids_Object(-1, F_CURRENT_OBJECT_PARENT_TYPE, 'CATALOGS',F_Count);
			END;
		  END IF;
		END;
		ELSE BEGIN
			IF F_CURRENT_OBJECT_LEVEL = 2 THEN
			  BEGIN
				F_COUNT := F_COUNT + 1;
				SELECT  BGC.CATEGORY_ID, BGC.CATEGORY_NAME
				INTO F_CATEGORY_ID, F_CURRENT_OBJECT_NAME
				FROM BG_CUSTOM_OBJECTS BGCUO
				JOIN BG_CATEGORIES BGC ON BGC.CATEGORY_ID = BGCUO.CATEGORY_ID
				WHERE BGCUO.ID = F_PREVIOUS_OBJECT_ID;
				F_PREVIOUS_OBJECT_ID := F_CATEGORY_ID;
				Vir_Obj_Type_Hir_Res_Tab.Extend;
				VIR_OBJ_TYPE_HIR_RES_TAB(VIR_OBJ_TYPE_HIR_RES_TAB.Count) := OBJECT_TYPE_HIR_IDS_OBJECT(F_CATEGORY_ID, F_CURRENT_OBJECT_PARENT_TYPE, F_CURRENT_OBJECT_NAME, F_COUNT);
			  END;
			ELSIF F_CURRENT_OBJECT_LEVEL = 1 THEN
			  BEGIN
				WITH object_hir_v AS
				(SELECT Bc.Category_Id,
				  Bc.Parent_Category_Id,
				  bc.category_NAME,
				  Level AS Object_Level
				FROM Bg_Categories Bc
				  START WITH Bc.Category_Id         = F_Previous_Object_Id
				  CONNECT BY nocycle bc.Category_Id = prior bc.Parent_Category_Id
				),
				RESULTHIR AS
				(SELECT Category_Id,
				  F_CURRENT_OBJECT_TYPE,
				  category_NAME,
				  (OBJECT_LEVEL+F_COUNT-1) OBJ_LEVEL
				FROM OBJECT_HIR_V
				WHERE Category_Id <> F_Previous_Object_Id
				)
			  SELECT Object_Type_Hir_Ids_Object(Category_Id, F_Current_Object_Type,category_NAME,Obj_Level) Bulk Collect
			  INTO VIR_OBJ_TYPE_HIR_RES_TAB2
			  FROM Resulthir;
			  FOR Res_Record IN
			  (SELECT * FROM TABLE(VIR_OBJ_TYPE_HIR_RES_TAB2)
			  )
			  LOOP
				BEGIN
				  VIR_OBJ_TYPE_HIR_RES_TAB.Extend;
				  Vir_Obj_Type_Hir_Res_Tab(Vir_Obj_Type_Hir_Res_Tab.Count) := Object_Type_Hir_Ids_Object(Res_Record.Object_Id, Res_Record.Object_Type, Res_Record.OBJECT_NAME, Res_Record.OBJECT_ORDER);
				END;
			  END LOOP Res_Record;
			  SELECT NVL(MAX(OBJECT_ORDER),0) +1 Into F_Count FROM TABLE(VIR_OBJ_TYPE_HIR_RES_TAB);
			  Vir_Obj_Type_Hir_Res_Tab.Extend;
			  Vir_Obj_Type_Hir_Res_Tab(Vir_Obj_Type_Hir_Res_Tab.Count) := Object_Type_Hir_Ids_Object(-1, F_CURRENT_OBJECT_PARENT_TYPE, 'CATALOGS',F_Count);
			END;
		  END IF;
		END;
	  END IF;
	END;
  END IF;
EXCEPTION
WHEN NO_DATA_FOUND THEN
  F_OBJECT_KEY_ID := NULL;
END;
END IF;
END LOOP LOOP_KVOT;
FOR RES_RECORD IN
(SELECT PARENT_IDS.OBJECT_ID,
  TBL_REF.OBJECT_TYPE_ID,
  TBL_REF.OBJECT_TYPE,
  TBL_REF.OBJECT_REF_KEY,
  TBL_REF.OBJECT_LEVEL,
  PARENT_IDS.OBJECT_NAME,
  PARENT_IDS.OBJECT_ORDER
FROM TABLE(Vir_Object_Type_Hir_Tab) TBL_REF
JOIN TABLE(VIR_OBJ_TYPE_HIR_RES_TAB) PARENT_IDS
ON TBL_REF.OBJECT_TYPE = PARENT_IDS.OBJECT_TYPE
)
LOOP
  BEGIN
    PIPE row(OBJECT_TYPE_HIR_RESULT_OBJECT(RES_RECORD.OBJECT_ID,RES_RECORD.OBJECT_TYPE_ID,RES_RECORD.OBJECT_TYPE, RES_RECORD.OBJECT_REF_KEY, RES_RECORD.OBJECT_LEVEL, RES_RECORD.OBJECT_NAME, RES_RECORD.OBJECT_ORDER ));
  END;
END LOOP RES_RECORD;
RETURN;
END FN_GET_OBJECT_HIR;
/

DECLARE
   TABLECHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO TABLECHECKERFLAG FROM ALL_OBJECTS WHERE OWNER = sys_context('userenv', 'current_schema') AND OBJECT_TYPE = 'FUNCTION' AND OBJECT_NAME = UPPER('FN_GET_OBJECT_NAME');
   IF TABLECHECKERFLAG = 1 THEN
      EXECUTE IMMEDIATE 'DROP FUNCTION FN_GET_OBJECT_NAME';
   END IF;
END;
/

CREATE OR REPLACE
FUNCTION FN_GET_OBJECT_NAME(
    F_OBJECT_ID      IN NUMBER,
    F_OBJECT_TYPE_ID IN NUMBER)
  RETURN VARCHAR2
AS
  F_CURRENT_OBJECT_MODULE 	   VARCHAR2(4000);
  F_SYSTEM_BASED 	   		   NUMBER(1);
  F_CURRENT_OBJECT_LEVEL 	   NUMBER;
  F_CURRENT_OBJECT_TITLE 	   VARCHAR2(255);
  F_CURRENT_OBJECT_TYPE_ID     VARCHAR2(4000);
  F_CURRENT_OBJECT_TYPE        VARCHAR2(4000);
  F_CURRENT_OBJECT_NAME        VARCHAR2(4000);
  F_CURRENT_OBJECT_PATH        VARCHAR2(4000) := NULL;
  F_CURRENT_OBJECT_PARENT_NAME VARCHAR2(4000);
  F_CURRENT_OBJECT_PARENT_PATH VARCHAR2(4000);
BEGIN
  SELECT OBJECT_TYPE_ID,
    OBJECT_TYPE,
    OBJECT_TITLE,
    MODULE_KEY,
    SYSTEM_BASED,
    OBJECT_LEVEL
  INTO F_CURRENT_OBJECT_TYPE_ID,
    F_CURRENT_OBJECT_TYPE,
    F_CURRENT_OBJECT_TITLE,
    F_CURRENT_OBJECT_MODULE,
    F_SYSTEM_BASED,
    F_CURRENT_OBJECT_LEVEL
  FROM ADS_KEY_VALUE_OBJECTS
  WHERE OBJECT_TYPE_ID     = F_OBJECT_TYPE_ID;
  IF F_CURRENT_OBJECT_TYPE = 'SM_METADATA' THEN
    BEGIN
      F_CURRENT_OBJECT_NAME := 'Metadata';
    END;
  ELSIF F_CURRENT_OBJECT_TYPE = 'SM_SYSTEM' THEN
    BEGIN
      SELECT SYSTEM_NAME
      INTO F_CURRENT_OBJECT_NAME
      FROM SYSTEM_DEFINITION_DETAILS
      WHERE SYSTEM_ID = F_OBJECT_ID;
    END;
  ELSIF F_CURRENT_OBJECT_TYPE = 'SM_ENVIRONMENT' THEN
    BEGIN
      SELECT SYSTEM_ENVIRONMENT_NAME
      INTO F_CURRENT_OBJECT_NAME
      FROM SYS_CON_ENVIRONMENTS
      WHERE SCE_ID = F_OBJECT_ID;
    END;
  ELSIF F_CURRENT_OBJECT_TYPE = 'SM_TABLE' THEN
    BEGIN
      SELECT TABLE_NAME
      INTO F_CURRENT_OBJECT_NAME
      FROM SYSTEM_TABLE_METADATA
      WHERE STM_ID = F_OBJECT_ID;
    END;
  ELSIF F_CURRENT_OBJECT_TYPE = 'SM_COLUMN' THEN
    BEGIN
      SELECT COLUMN_NAME
      INTO F_CURRENT_OBJECT_NAME
      FROM SYSTEM_TABLE_COLUMNS_METADATA
      WHERE STCM_ID = F_OBJECT_ID;
    END;
  ELSIF F_CURRENT_OBJECT_TYPE = 'MM_PROJECTS' THEN
    BEGIN
      F_CURRENT_OBJECT_NAME := 'Projects';
    END;
  ELSIF F_CURRENT_OBJECT_TYPE = 'MM_PROJECT' THEN
    BEGIN
      SELECT PROJ_NAME
      INTO F_CURRENT_OBJECT_NAME
      FROM PROJECT
      WHERE PROJ_ID = F_OBJECT_ID;
    END;
  ELSIF F_CURRENT_OBJECT_TYPE = 'MM_SUBJECT' THEN
    BEGIN
      SELECT SUBJECT_NAME
      INTO F_CURRENT_OBJECT_NAME
      FROM SUBJECT_DETAILS
      WHERE SUBJECT_ID = F_OBJECT_ID;
    END;
  ELSIF F_CURRENT_OBJECT_TYPE = 'MM_MAPPING' THEN
    BEGIN
      SELECT MAP_NAME
      INTO F_CURRENT_OBJECT_NAME
      FROM MAPPING_DETAILS
      WHERE MAP_ID = F_OBJECT_ID;
    END;
  ELSIF F_CURRENT_OBJECT_TYPE IN ('BGM_TERM_CATALOGS', 'BGM_RULE_CATALOGS', 'BGM_POLICY_CATALOGS') THEN
    BEGIN
      F_CURRENT_OBJECT_NAME := F_CURRENT_OBJECT_TITLE;
    END;
  ELSIF F_CURRENT_OBJECT_TYPE IN ('BGM_TERM_CATALOG', 'BGM_RULE_CATALOG', 'BGM_POLICY_CATALOG') THEN
    BEGIN
      SELECT CATEGORY_NAME
      INTO F_CURRENT_OBJECT_NAME
      FROM BG_CATEGORIES
      WHERE CATEGORY_ID = F_OBJECT_ID;
    END;
  ELSIF F_CURRENT_OBJECT_TYPE = 'BGM_TERM' THEN
    BEGIN
      SELECT BUS_TERM_NAME
      INTO F_CURRENT_OBJECT_NAME
      FROM BUSINESS_TERMS
      WHERE BUS_TERM_ID = F_OBJECT_ID;
    END;
  ELSIF F_CURRENT_OBJECT_TYPE = 'BGM_RULE' THEN
    BEGIN
      SELECT NAME
      INTO F_CURRENT_OBJECT_NAME
      FROM BG_BUSINESS_RULES
      WHERE ID = F_OBJECT_ID;
    END;
  ELSIF F_CURRENT_OBJECT_TYPE = 'BGM_POLICY' THEN
    BEGIN
      SELECT NAME
      INTO F_CURRENT_OBJECT_NAME
      FROM BG_POLICIES
      WHERE ID = F_OBJECT_ID;
    END;
  ELSIF F_CURRENT_OBJECT_MODULE = 'com.ads.mm.permission.bgm' AND F_SYSTEM_BASED = 0 THEN
	BEGIN
		IF F_CURRENT_OBJECT_LEVEL = 0 THEN
		  BEGIN
			F_CURRENT_OBJECT_NAME := F_CURRENT_OBJECT_TITLE;
		  END;
		ELSIF F_CURRENT_OBJECT_LEVEL = 1 THEN
		  BEGIN
			SELECT CATEGORY_NAME INTO F_CURRENT_OBJECT_NAME FROM BG_CATEGORIES WHERE CATEGORY_ID = F_OBJECT_ID;
		  END;
		ELSIF F_CURRENT_OBJECT_LEVEL = 2 THEN
		  BEGIN
			SELECT NAME INTO F_CURRENT_OBJECT_NAME FROM BG_CUSTOM_OBJECTS WHERE ID = F_OBJECT_ID;
		  END;
		END IF;
	END;
  END IF;
  SELECT RTRIM(extract(xmlagg(xmlelement(E, OBJECT_NAME
    || '/')),'/E/text()').Getclobval(), ',')
  INTO F_CURRENT_OBJECT_PARENT_PATH
  FROM
    (SELECT *
    FROM TABLE(FN_GET_OBJECT_HIR(F_OBJECT_ID, F_OBJECT_TYPE_ID, NULL))
    WHERE OBJECT_ID <> -1
    ORDER BY OBJECT_ORDER DESC
    );
  F_CURRENT_OBJECT_PARENT_PATH := F_CURRENT_OBJECT_PARENT_PATH || F_CURRENT_OBJECT_NAME;
  RETURN
  CASE
  WHEN F_CURRENT_OBJECT_PARENT_PATH IS NOT NULL THEN
    F_CURRENT_OBJECT_PARENT_PATH
  ELSE
    F_CURRENT_OBJECT_NAME
  END;
END FN_GET_OBJECT_NAME;
/
DECLARE
  TYPECHECKERFLAG INT;
BEGIN
  SELECT COUNT(*)
  INTO TYPECHECKERFLAG
  FROM ALL_OBJECTS
  WHERE OWNER            = SYS_CONTEXT('USERENV', 'CURRENT_SCHEMA')
  AND UPPER(OBJECT_NAME) = 'ASSIGNED_OBJ_WORKFLOW_OBJECT'
  AND UPPER(OBJECT_TYPE) ='TYPE';
  IF TYPECHECKERFLAG     = 0 THEN
    EXECUTE IMMEDIATE 'CREATE TYPE ASSIGNED_OBJ_WORKFLOW_OBJECT AS OBJECT (ASSIGN_OBJECT_ID NUMBER, ASSIGN_OBJECT_TYPE_ID NUMBER, WF_ID NUMBER, WFG_ID NUMBER, TRIGGER_ID NUMBER)';
  END IF;
END;
/
DECLARE
  TYPECHECKERFLAG INT;
BEGIN
  SELECT COUNT(*)
  INTO TYPECHECKERFLAG
  FROM ALL_OBJECTS
  WHERE OWNER            = SYS_CONTEXT('USERENV', 'CURRENT_SCHEMA')
  AND UPPER(OBJECT_NAME) = 'ASSIGNED_OBJ_WORKFLOW_TABLE'
  AND UPPER(OBJECT_TYPE) ='TYPE';
  IF TYPECHECKERFLAG     = 0 THEN
    EXECUTE IMMEDIATE 'CREATE TYPE ASSIGNED_OBJ_WORKFLOW_TABLE AS TABLE OF ASSIGNED_OBJ_WORKFLOW_OBJECT';
  END IF;
END;
/

DECLARE
   TABLECHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO TABLECHECKERFLAG FROM ALL_OBJECTS WHERE OWNER = sys_context('userenv', 'current_schema') AND OBJECT_TYPE = 'FUNCTION' AND OBJECT_NAME = UPPER('FN_GET_OBJECT_WORKFLOW');
   IF TABLECHECKERFLAG = 1 THEN
      EXECUTE IMMEDIATE 'DROP FUNCTION FN_GET_OBJECT_WORKFLOW';
   END IF;
END;
/

CREATE OR REPLACE
FUNCTION FN_GET_OBJECT_WORKFLOW(
    F_OBJECT_ID       IN NUMBER,
    F_OBJECT_TYPE_ID  IN NUMBER,
    F_TRIGGER_TYPE_ID IN NUMBER)
  RETURN ASSIGNED_OBJ_WORKFLOW_TABLE PIPELINED
AS
  V_ASSIGNED_OBJ_WF_TABLE ASSIGNED_OBJ_WORKFLOW_TABLE := ASSIGNED_OBJ_WORKFLOW_TABLE();
  OBJECTC_OUNT NUMBER                                 := 0;
BEGIN
  FOR HIRRECORD IN
  (SELECT OBJECT_ID,
    OBJECT_TYPE_ID,
    OBJECT_ORDER
  FROM TABLE(FN_GET_OBJECT_HIR(F_OBJECT_ID, F_OBJECT_TYPE_ID, NULL))
  UNION
  SELECT F_OBJECT_ID,
    F_OBJECT_TYPE_ID,
    0
  FROM DUAL
  ORDER BY OBJECT_ORDER ASC
  )
  LOOP
    SELECT ASSIGNED_OBJ_WORKFLOW_OBJECT(ASSIGN_OBJECT_ID, ASSIGN_OBJECT_TYPE_ID,WF_ID,WFG_ID,TRIGGER_ID) BULK COLLECT
    INTO V_ASSIGNED_OBJ_WF_TABLE
    FROM
      (SELECT AWA.OBJECT_ID AS ASSIGN_OBJECT_ID,
        AWA.OBJECT_TYPE_ID  AS ASSIGN_OBJECT_TYPE_ID,
        AWA.WF_ID,
        AWA.WFG_ID,
        AW.WFTA_ID AS TRIGGER_ID
      FROM ADS_WORKFLOW_ASSIGNMENT AWA
      JOIN ADS_WORKFLOW AW
      ON AW.WF_ID            = AWA.WF_ID
      WHERE OBJECT_ID        = HIRRECORD.OBJECT_ID
      AND AWA.OBJECT_TYPE_ID = HIRRECORD.OBJECT_TYPE_ID
      AND AW.WFTA_ID         = F_TRIGGER_TYPE_ID
      );
    SELECT COUNT(*)
    INTO OBJECTC_OUNT
    FROM TABLE(V_ASSIGNED_OBJ_WF_TABLE);
    IF OBJECTC_OUNT   > 0 THEN
      FOR RES_RECORD IN
      (SELECT * FROM TABLE(V_ASSIGNED_OBJ_WF_TABLE)
      )
      LOOP
        BEGIN
          PIPE ROW(ASSIGNED_OBJ_WORKFLOW_OBJECT(RES_RECORD.ASSIGN_OBJECT_ID,RES_RECORD.ASSIGN_OBJECT_TYPE_ID,RES_RECORD.WF_ID, RES_RECORD.WFG_ID, RES_RECORD.TRIGGER_ID));
        END;
      END LOOP RES_RECORD;
      EXIT;
    END IF;
  END LOOP HIRRECORD;
  RETURN;
END FN_GET_OBJECT_WORKFLOW;
/

DECLARE
   TABLECHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO TABLECHECKERFLAG FROM ALL_OBJECTS WHERE OWNER = sys_context('userenv', 'current_schema') AND OBJECT_TYPE = 'FUNCTION' AND OBJECT_NAME = UPPER('FN_GET_OBJECT_WFG_ID');
   IF TABLECHECKERFLAG = 1 THEN
      EXECUTE IMMEDIATE 'DROP FUNCTION FN_GET_OBJECT_WFG_ID';
   END IF;
END;
/

CREATE OR REPLACE FUNCTION FN_GET_OBJECT_WFG_ID (
    F_OBJECT_ID         IN                  NUMBER,
    F_OBJECT_TYPE_ID    IN                  NUMBER,
    F_TRIGGER_TYPE_ID   IN                  NUMBER
) RETURN NUMBER AS
    F_WFG_ID NUMBER := NULL;
BEGIN
    BEGIN
        SELECT
            WFG_ID
        INTO F_WFG_ID
        FROM
            TABLE ( FN_GET_OBJECT_WORKFLOW(F_OBJECT_ID, F_OBJECT_TYPE_ID, F_TRIGGER_TYPE_ID) );

    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            F_WFG_ID := NULL;
    END;

    RETURN F_WFG_ID;
END FN_GET_OBJECT_WFG_ID;
/

DECLARE
  TYPECHECKERFLAG INT;
BEGIN
  SELECT COUNT(*)
  INTO TYPECHECKERFLAG
  FROM ALL_OBJECTS
  WHERE OWNER            = sys_context('userenv', 'current_schema')
  AND UPPER(OBJECT_NAME) = 'WF_OBJECTS_STATUS_TYPE_OBJ'
  AND UPPER(OBJECT_TYPE) ='TYPE';
  IF TYPECHECKERFLAG     = 0 THEN
    EXECUTE IMMEDIATE 'CREATE TYPE WF_OBJECTS_STATUS_TYPE_OBJ AS OBJECT (OBJECT_ID NUMBER, OBJECT_TYPE_ID NUMBER, WFN_ID NUMBER)';
  END IF;
END;
/
DECLARE
  TYPECHECKERFLAG INT;
BEGIN
  SELECT COUNT(*)
  INTO TYPECHECKERFLAG
  FROM ALL_OBJECTS
  WHERE OWNER            = sys_context('userenv', 'current_schema')
  AND UPPER(OBJECT_NAME) = 'WF_OBJECTS_STATUS_TYPE_TAB'
  AND UPPER(OBJECT_TYPE) ='TYPE';
  IF TYPECHECKERFLAG     = 0 THEN
    EXECUTE IMMEDIATE 'CREATE TYPE WF_OBJECTS_STATUS_TYPE_TAB AS TABLE OF WF_OBJECTS_STATUS_TYPE_OBJ';
  END IF;
END;
/
DECLARE
  TYPECHECKERFLAG INT;
BEGIN
  SELECT COUNT(*)
  INTO TYPECHECKERFLAG
  FROM ALL_OBJECTS
  WHERE OWNER            = sys_context('userenv', 'current_schema')
  AND UPPER(OBJECT_NAME) = 'OBJECT_IDS_TYPE_OBJ'
  AND UPPER(OBJECT_TYPE) ='TYPE';
  IF TYPECHECKERFLAG     = 0 THEN
    EXECUTE IMMEDIATE 'CREATE TYPE OBJECT_IDS_TYPE_OBJ AS OBJECT (OBJECT_ID NUMBER)';
  END IF;
END;
/
DECLARE
  TYPECHECKERFLAG INT;
BEGIN
  SELECT COUNT(*)
  INTO TYPECHECKERFLAG
  FROM ALL_OBJECTS
  WHERE OWNER            = sys_context('userenv', 'current_schema')
  AND UPPER(OBJECT_NAME) = 'OBJECT_IDS_TYPE_TAB'
  AND UPPER(OBJECT_TYPE) ='TYPE';
  IF TYPECHECKERFLAG     = 0 THEN
    EXECUTE IMMEDIATE 'CREATE TYPE OBJECT_IDS_TYPE_TAB AS TABLE OF OBJECT_IDS_TYPE_OBJ';
  END IF;
END;
/

DECLARE
   TABLECHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO TABLECHECKERFLAG FROM ALL_OBJECTS WHERE OWNER = sys_context('userenv', 'current_schema') AND OBJECT_TYPE = 'FUNCTION' AND OBJECT_NAME = UPPER('FN_GET_WF_OBJECTS_STATUS');
   IF TABLECHECKERFLAG = 1 THEN
      EXECUTE IMMEDIATE 'DROP FUNCTION FN_GET_WF_OBJECTS_STATUS';
   END IF;
END;
/

create or replace FUNCTION FN_GET_WF_OBJECTS_STATUS(
    F_WFG_ID             NUMBER,
    F_TGT_OBJECT_ID      NUMBER,
    F_TGT_OBJECT_TYPE_ID NUMBER)
  RETURN WF_OBJECTS_STATUS_TYPE_TAB PIPELINED
AS
  V_OBJECT_IDS_TYPE_TAB OBJECT_IDS_TYPE_TAB := OBJECT_IDS_TYPE_TAB();
  F_TRIGGER_OBJECT_MODULE  		VARCHAR2(512);
  F_TRIGGER_TYPE_ID        		NUMBER;
  F_TRIGGER_OBJECT_TYPE    		VARCHAR2(500);
  F_TRIGGER_OBJECT_TYPE_ID 		NUMBER;
  F_TRIGGER_OBJECT_LEVEL   		NUMBER;
  F_TRIGGER_OBJECT_SYSTEM_BASED NUMBER(1);


  F_TGT_OBJECT_TYPE        		VARCHAR2(500);
  F_TGT_OBJECT_LEVEL 			NUMBER;

BEGIN
  SELECT AWTA.WFTA_ID,
    AWTA.OBJECT_TYPE_ID
  INTO F_TRIGGER_TYPE_ID,
    F_TRIGGER_OBJECT_TYPE_ID
  FROM ADS_WORKFLOW_ASSIGNMENT AWA
  JOIN ADS_WORKFLOW AW
  ON AW.WF_ID = AWA.WF_ID
  JOIN ADS_WORKFLOW_TRIGGER_ACTION AWTA
  ON AWTA.WFTA_ID  = AW.WFTA_ID
  WHERE AWA.WFG_ID = F_WFG_ID;

  SELECT OBJECT_TYPE,
  OBJECT_LEVEL
  INTO F_TGT_OBJECT_TYPE,
  F_TGT_OBJECT_LEVEL
  FROM ADS_KEY_VALUE_OBJECTS
  WHERE OBJECT_TYPE_ID = F_TGT_OBJECT_TYPE_ID;

  SELECT OBJECT_TYPE,
    OBJECT_LEVEL,
    MODULE_KEY,
    SYSTEM_BASED
  INTO F_TRIGGER_OBJECT_TYPE,
    F_TRIGGER_OBJECT_LEVEL,
	F_TRIGGER_OBJECT_MODULE,
	F_TRIGGER_OBJECT_SYSTEM_BASED
  FROM ADS_KEY_VALUE_OBJECTS
  WHERE OBJECT_TYPE_ID     = F_TRIGGER_OBJECT_TYPE_ID;

  IF F_TRIGGER_OBJECT_SYSTEM_BASED = 0 THEN
	BEGIN
	  IF F_TRIGGER_OBJECT_MODULE = 'com.ads.mm.permission.bgm' THEN
		BEGIN
		  IF F_TRIGGER_OBJECT_LEVEL = 2 THEN
			BEGIN
			  IF F_TGT_OBJECT_LEVEL = 1 THEN
				BEGIN
				  WITH object_hir_v AS
					(SELECT BGC.CATEGORY_ID,
					  BGC.PARENT_CATEGORY_ID,
					  BGC.CATEGORY_NAME
					FROM BG_CATEGORIES BGC
					  START WITH Bgc.Category_Id                = F_Tgt_Object_Id
					  CONNECT BY nocycle BGC.PARENT_CATEGORY_ID = prior BGC.CATEGORY_ID
					),
					RESULTHIR AS
					(select BCO.ID from BG_CUSTOM_OBJECTS BCO WHERE BCO.OBJECT_TYPE_ID = F_TRIGGER_OBJECT_TYPE_ID)
				  SELECT OBJECT_IDS_TYPE_OBJ(ID) BULK COLLECT
				  INTO V_Object_Ids_Type_Tab
				  FROM Resulthir;
				END;
			  ELSIF F_TGT_OBJECT_LEVEL = 0 THEN
				BEGIN
				  SELECT OBJECT_IDS_TYPE_OBJ(ID) BULK COLLECT
				  INTO V_Object_Ids_Type_Tab
				  FROM
					(SELECT DISTINCT BCO.ID FROM BG_CUSTOM_OBJECTS BCO WHERE BCO.OBJECT_TYPE_ID = F_TRIGGER_OBJECT_TYPE_ID
					);
				END;
			  END IF;
			END;
		  END IF;
		END;
	  END IF;
	END;
  ELSIF F_TRIGGER_OBJECT_TYPE = 'SM_COLUMN' THEN
    BEGIN
      IF F_TGT_OBJECT_TYPE = 'SM_TABLE' THEN
        BEGIN
        WITH ENV_OBJECTS AS
          (SELECT STM_ID,
            STCM_ID,
            TABLE_NAME,
            COLUMN_NAME
          FROM SYSTEM_TABLE_COLUMNS_METADATA
          WHERE SCE_ID =
            (SELECT SCE_ID FROM SYSTEM_TABLE_METADATA WHERE STM_ID = F_TGT_OBJECT_ID
            )
          ),
          OBJ_HIR_V AS
          (SELECT STM_ID,
            TABLE_NAME,
            COLUMN_NAME
          FROM ENV_OBJECTS
            START WITH Stm_Id             = F_Tgt_Object_Id
            CONNECT BY NOCYCLE TABLE_NAME = PRIOR COLUMN_NAME
          )
        SELECT OBJECT_IDS_TYPE_OBJ(STCM_ID) BULK COLLECT
        INTO V_OBJECT_IDS_TYPE_TAB
        FROM
          (SELECT DISTINCT STCM.STCM_ID
          FROM OBJ_HIR_V OV
          JOIN SYSTEM_TABLE_COLUMNS_METADATA STCM
          ON STCM.STM_ID    = OV.STM_ID
          WHERE (STCM.TYPE <> 'ENTITY'
          OR STCM.TYPE     IS NULL)
          );
      END;
    ELSIF F_TGT_OBJECT_TYPE = 'SM_ENVIRONMENT' THEN
      BEGIN
        SELECT OBJECT_IDS_TYPE_OBJ(STCM_ID) BULK COLLECT
        INTO V_OBJECT_IDS_TYPE_TAB
        FROM
          (SELECT DISTINCT STCM.STCM_ID
          FROM SYSTEM_TABLE_COLUMNS_METADATA STCM
          WHERE STCM.SCE_ID = F_TGT_OBJECT_ID
          AND (STCM.TYPE   <> 'ENTITY'
          OR STCM.TYPE     IS NULL)
          );
      END;
    ELSIF F_TGT_OBJECT_TYPE = 'SM_SYSTEM' THEN
      BEGIN
        SELECT OBJECT_IDS_TYPE_OBJ(STCM_ID) BULK COLLECT
        INTO V_OBJECT_IDS_TYPE_TAB
        FROM
          (SELECT DISTINCT STCM.STCM_ID
          FROM SYSTEM_TABLE_COLUMNS_METADATA STCM
          WHERE STCM.SCE_ID IN
            (SELECT SCE_ID
            FROM ACTIVE_SYS_CON_ENVIRONMENTS
            WHERE SYSTEM_ID = F_TGT_OBJECT_ID
            )
          AND (STCM.TYPE <> 'ENTITY'
          OR STCM.TYPE   IS NULL)
          );
      END;
    ELSIF F_TGT_OBJECT_TYPE = 'SM_METADATA' THEN
      BEGIN
        SELECT OBJECT_IDS_TYPE_OBJ(STCM_ID) BULK COLLECT
        INTO V_OBJECT_IDS_TYPE_TAB
        FROM
          (SELECT DISTINCT STCM.STCM_ID
          FROM SYSTEM_TABLE_COLUMNS_METADATA STCM
          JOIN ACTIVE_SYS_CON_ENVIRONMENTS ASCE
          ON ASCE.SCE_ID   = STCM.SCE_ID
          WHERE STCM.VALID = 1
          AND (STCM.TYPE  <> 'ENTITY'
          OR STCM.TYPE    IS NULL)
          );
      END;
    END IF;
  END;
ELSIF F_TRIGGER_OBJECT_TYPE = 'SM_TABLE' THEN
  BEGIN
    IF F_TGT_OBJECT_TYPE = 'SM_ENVIRONMENT' THEN
      BEGIN
        SELECT OBJECT_IDS_TYPE_OBJ(STM_ID) BULK COLLECT
        INTO V_OBJECT_IDS_TYPE_TAB
        FROM
          (SELECT DISTINCT STM.STM_ID
          FROM SYSTEM_TABLE_METADATA STM
          WHERE STM.SCE_ID = F_TGT_OBJECT_ID
          );
      END;
    ELSIF F_TGT_OBJECT_TYPE = 'SM_SYSTEM' THEN
      BEGIN
        SELECT OBJECT_IDS_TYPE_OBJ(STM_ID) BULK COLLECT
        INTO V_OBJECT_IDS_TYPE_TAB
        FROM
          (SELECT DISTINCT STM.STM_ID
          FROM SYSTEM_TABLE_METADATA STM
          WHERE STM.VALID = 1
          AND STM.SCE_ID IN
            (SELECT SCE_ID
            FROM ACTIVE_SYS_CON_ENVIRONMENTS
            WHERE SYSTEM_ID = F_TGT_OBJECT_ID
            )
          );
      END;
    ELSIF F_TGT_OBJECT_TYPE = 'SM_METADATA' THEN
      BEGIN
        SELECT OBJECT_IDS_TYPE_OBJ(STM_ID) BULK COLLECT
        INTO V_OBJECT_IDS_TYPE_TAB
        FROM
          (SELECT DISTINCT Stm.Stm_Id
          FROM SYSTEM_TABLE_METADATA Stm
          JOIN ACTIVE_SYS_CON_ENVIRONMENTS Asce
          ON ASCE.SCE_ID  = STM.SCE_ID
          WHERE STM.VALID = 1
          );
      END;
    END IF;
  END;
ELSIF F_TRIGGER_OBJECT_TYPE = 'SM_ENVIRONMENT' THEN
  BEGIN
    IF F_TGT_OBJECT_TYPE = 'SM_SYSTEM' THEN
      BEGIN
        SELECT OBJECT_IDS_TYPE_OBJ(SCE_ID) BULK COLLECT
        INTO V_OBJECT_IDS_TYPE_TAB
        FROM
          (SELECT DISTINCT SCE.SCE_ID
          FROM ACTIVE_SYS_CON_ENVIRONMENTS SCE
          WHERE SCE.SYSTEM_ID = F_TGT_OBJECT_ID
          );
      END;
    ELSIF F_TGT_OBJECT_TYPE = 'SM_METADATA' THEN
      BEGIN
        SELECT OBJECT_IDS_TYPE_OBJ(SCE_ID) BULK COLLECT
        INTO V_OBJECT_IDS_TYPE_TAB
        FROM
          (SELECT DISTINCT SCE.SCE_ID FROM ACTIVE_SYS_CON_ENVIRONMENTS SCE
          );
      END;
    END IF;
  END;
Elsif F_Trigger_Object_Type = 'MM_MAPPING' THEN
  BEGIN
    IF F_TGT_OBJECT_TYPE = 'MM_SUBJECT' THEN
      BEGIN
      WITH object_hir_v AS
        (SELECT SD.SUBJECT_ID,
          SD.PARENT_SUBJECT_ID
        FROM Subject_Details Sd
          START WITH Sd.Subject_Id                = F_Tgt_Object_Id
          CONNECT BY nocycle SD.PARENT_SUBJECT_ID = prior SD.SUBJECT_ID
        ),
        RESULTHIR AS
        (SELECT MD.MAP_ID
        FROM MAPPING_DETAILS MD
        JOIN OBJECT_HIR_V ohv
        ON ohv.SUBJECT_ID = MD.SUBJECT_ID
        WHERE MD.STATUS   = 'Active'
        )
      SELECT OBJECT_IDS_TYPE_OBJ(MAP_ID) BULK COLLECT
      INTO V_OBJECT_IDS_TYPE_TAB
      FROM RESULTHIR;
    END;
  ELSIF F_TGT_OBJECT_TYPE = 'MM_PROJECT' THEN
    BEGIN
      SELECT OBJECT_IDS_TYPE_OBJ(MAP_ID) BULK COLLECT
      INTO V_OBJECT_IDS_TYPE_TAB
      FROM
        (SELECT DISTINCT MD.MAP_ID
        FROM Mapping_Details Md
        WHERE MD.PROJECT_ID = F_TGT_OBJECT_ID
        AND MD.STATUS       = 'Active'
        );
    END;
  ELSIF F_TGT_OBJECT_TYPE = 'MM_PROJECTS' THEN
    BEGIN
      SELECT OBJECT_IDS_TYPE_OBJ(MAP_ID) BULK COLLECT
      INTO V_OBJECT_IDS_TYPE_TAB
      FROM
        (SELECT DISTINCT MD.MAP_ID
        FROM MAPPING_DETAILS MD
        WHERE MD.STATUS = 'Active'
        );
    END;
  END IF;
END;
Elsif F_Trigger_Object_Type = 'BGM_TERM' THEN
  BEGIN
    IF F_TGT_OBJECT_TYPE = 'BGM_TERM_CATALOG' THEN
      BEGIN
      WITH object_hir_v AS
        (SELECT BGC.CATEGORY_ID,
          BGC.PARENT_CATEGORY_ID,
          BGC.CATEGORY_NAME
        FROM BG_CATEGORIES BGC
          START WITH Bgc.Category_Id                = F_Tgt_Object_Id
          CONNECT BY nocycle BGC.PARENT_CATEGORY_ID = prior BGC.CATEGORY_ID
        ),
        RESULTHIR AS
        (SELECT BT.BUS_TERM_ID
        FROM BUSINESS_TERMS BT
        JOIN OBJECT_HIR_V ohv
        ON ohv.CATEGORY_ID = BT.CATEGORY_ID
        )
      SELECT OBJECT_IDS_TYPE_OBJ(BUS_TERM_ID) BULK COLLECT
      INTO V_Object_Ids_Type_Tab
      FROM Resulthir;
    END;
  Elsif F_Tgt_Object_Type = 'BGM_TERM_CATALOGS' THEN
    BEGIN
      SELECT OBJECT_IDS_TYPE_OBJ(BUS_TERM_ID) BULK COLLECT
      INTO V_Object_Ids_Type_Tab
      FROM
        (SELECT DISTINCT Bt.Bus_Term_Id FROM BUSINESS_TERMS BT
        );
    END;
  END IF;
END;

Elsif F_Trigger_Object_Type = 'BGM_POLICY' THEN
  BEGIN
    IF F_TGT_OBJECT_TYPE = 'BGM_POLICY_CATALOG' THEN
      BEGIN
      WITH object_hir_v AS
        (SELECT BGC.CATEGORY_ID,
          BGC.PARENT_CATEGORY_ID,
          BGC.CATEGORY_NAME
        FROM BG_CATEGORIES BGC
          START WITH Bgc.Category_Id                = F_Tgt_Object_Id
          CONNECT BY nocycle BGC.PARENT_CATEGORY_ID = prior BGC.CATEGORY_ID
        ),
        RESULTHIR AS
        (SELECT BP.ID
        FROM BG_POLICIES BP
        JOIN OBJECT_HIR_V ohv
        ON ohv.CATEGORY_ID = BP.CATALOG_ID
        )
      SELECT OBJECT_IDS_TYPE_OBJ(ID) BULK COLLECT
      INTO V_Object_Ids_Type_Tab
      FROM Resulthir;
    END;
  Elsif F_Tgt_Object_Type = 'BGM_POLICY_CATALOGS' THEN
    BEGIN
      SELECT OBJECT_IDS_TYPE_OBJ(ID) BULK COLLECT
      INTO V_Object_Ids_Type_Tab
      FROM
        (SELECT DISTINCT BP.ID FROM BG_POLICIES BP
        );
    END;
END IF;
END;

Elsif F_Trigger_Object_Type = 'BGM_RULE' THEN
  BEGIN
    IF F_TGT_OBJECT_TYPE = 'BGM_RULE_CATALOG' THEN
      BEGIN
      WITH object_hir_v AS
        (SELECT BGC.CATEGORY_ID,
          BGC.PARENT_CATEGORY_ID,
          BGC.CATEGORY_NAME
        FROM BG_CATEGORIES BGC
          START WITH Bgc.Category_Id                = F_Tgt_Object_Id
          CONNECT BY nocycle BGC.PARENT_CATEGORY_ID = prior BGC.CATEGORY_ID
        ),
        RESULTHIR AS
        (SELECT BR.ID
        FROM BG_BUSINESS_RULES BR
        JOIN OBJECT_HIR_V ohv
        ON ohv.CATEGORY_ID = BR.CATALOG_ID
        )
      SELECT OBJECT_IDS_TYPE_OBJ(ID) BULK COLLECT
      INTO V_Object_Ids_Type_Tab
      FROM Resulthir;
    END;
  Elsif F_Tgt_Object_Type = 'BGM_RULE_CATALOGS' THEN
    BEGIN
      SELECT OBJECT_IDS_TYPE_OBJ(ID) BULK COLLECT
      INTO V_Object_Ids_Type_Tab
      FROM
        (SELECT DISTINCT BR.ID FROM BG_BUSINESS_RULES BR
        );
    END;
  END IF;
END;
END IF;

FOR RES_RECORD IN
(SELECT OIDS.OBJECT_ID,
  F_TRIGGER_OBJECT_TYPE_ID,
  WFN_ID
FROM TABLE(V_OBJECT_IDS_TYPE_TAB) OIDS
JOIN ADS_WORKFLOW_STATUS AWS
ON AWS.OBJECT_ID       = OIDS.OBJECT_ID
AND AWS.OBJECT_TYPE_ID = F_TRIGGER_OBJECT_TYPE_ID
AND AWS.WFG_ID         = F_WFG_ID
)
LOOP
  BEGIN
    PIPE ROW(WF_OBJECTS_STATUS_TYPE_OBJ(RES_RECORD.OBJECT_ID,RES_RECORD.F_TRIGGER_OBJECT_TYPE_ID,RES_RECORD.WFN_ID));
  END;
END LOOP RES_RECORD;
RETURN;
END FN_GET_WF_OBJECTS_STATUS;
/
DECLARE
  TYPECHECKERFLAG INT;
BEGIN
  SELECT COUNT(*)
  INTO TYPECHECKERFLAG
  FROM ALL_OBJECTS
  WHERE OWNER            = sys_context('userenv', 'current_schema')
  AND UPPER(OBJECT_NAME) = 'WFG_STATUS_NODES_TYPE_OBJ'
  AND UPPER(OBJECT_TYPE) ='TYPE';
  IF TYPECHECKERFLAG     = 0 THEN
    EXECUTE IMMEDIATE 'CREATE TYPE WFG_STATUS_NODES_TYPE_OBJ AS OBJECT (WFN_ID NUMBER, WFG_ID NUMBER, P_WFG_ID NUMBER)';
  END IF;
END;
/
DECLARE
  TYPECHECKERFLAG INT;
BEGIN
  SELECT COUNT(*)
  INTO TYPECHECKERFLAG
  FROM ALL_OBJECTS
  WHERE OWNER            = sys_context('userenv', 'current_schema')
  AND UPPER(OBJECT_NAME) = 'WFG_STATUS_NODES_TYPE_TAB'
  AND UPPER(OBJECT_TYPE) ='TYPE';
  IF TYPECHECKERFLAG     = 0 THEN
    EXECUTE IMMEDIATE 'CREATE TYPE WFG_STATUS_NODES_TYPE_TAB AS TABLE OF WFG_STATUS_NODES_TYPE_OBJ';
  END IF;
END;
/

DECLARE
   TABLECHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO TABLECHECKERFLAG FROM ALL_OBJECTS WHERE OWNER = sys_context('userenv', 'current_schema') AND OBJECT_TYPE = 'FUNCTION' AND OBJECT_NAME = UPPER('FN_GET_WFG_STATUS_NODES');
   IF TABLECHECKERFLAG = 1 THEN
      EXECUTE IMMEDIATE 'DROP FUNCTION FN_GET_WFG_STATUS_NODES';
   END IF;
END;
/

CREATE OR REPLACE
FUNCTION FN_GET_WFG_STATUS_NODES(
    F_OBJECT_ID      NUMBER,
    F_OBJECT_TYPE_ID NUMBER,
    F_TRIGGER_ID     NUMBER,
    F_FORCE_CHECK    NUMBER)
  RETURN WFG_STATUS_NODES_TYPE_TAB PIPELINED
AS
  V_WFG_STATUS_NODES_TYPE_TAB WFG_STATUS_NODES_TYPE_TAB := WFG_STATUS_NODES_TYPE_TAB();
  F_PARENTS_COUNT          NUMBER;
  F_OBJECT_PARENT_ROW_ID   NUMBER;
  F_CURRENT_OBJECT_ID      VARCHAR2(4000);
  F_CURRENT_OBJECT_TYPE_ID VARCHAR2(4000);
  F_EXISTED_WFG_ID         NUMBER := NULL;
  F_EXISTED_PARENT_WFG_ID  NUMBER;
  F_STATUS_NODES_CNT       NUMBER;
BEGIN
  IF F_EXISTED_WFG_ID IS NULL THEN
    BEGIN
      SELECT AWA.WFG_ID
      INTO F_EXISTED_WFG_ID
      FROM ADS_WORKFLOW_ASSIGNMENT AWA
      JOIN ADS_WORKFLOW AW
      ON AW.WF_ID            = AWA.WF_ID
      WHERE AWA.OBJECT_ID    = F_OBJECT_ID
      AND AWA.OBJECT_TYPE_ID = F_OBJECT_TYPE_ID
      AND AW.WFTA_ID         = F_TRIGGER_ID;
      F_EXISTED_WFG_ID      := TRIM(F_EXISTED_WFG_ID);
    EXCEPTION
    WHEN NO_DATA_FOUND THEN
      F_EXISTED_WFG_ID := NULL;
    END;
  END IF;
  IF F_EXISTED_WFG_ID IS NULL OR (F_EXISTED_WFG_ID IS NOT NULL AND F_FORCE_CHECK = 1) THEN
    BEGIN
      FOR RES_RECORD IN
      (SELECT OBJECT_ID,
        OBJECT_TYPE_ID,
        OBJECT_ORDER
      FROM TABLE(FN_GET_OBJECT_HIR(F_OBJECT_ID, F_OBJECT_TYPE_ID, NULL))
      ORDER BY OBJECT_ORDER ASC
      )
      LOOP
        BEGIN
          --TODO WITH ENVIRONMENT VERSION
          SELECT AWA.WFG_ID
          INTO F_EXISTED_PARENT_WFG_ID
          FROM ADS_WORKFLOW_ASSIGNMENT AWA
          JOIN ADS_WORKFLOW AW
          ON AW.WF_ID            = AWA.WF_ID
          WHERE AWA.OBJECT_ID    = RES_RECORD.OBJECT_ID
          AND AWA.OBJECT_TYPE_ID = RES_RECORD.OBJECT_TYPE_ID
          AND AW.WFTA_ID         = F_TRIGGER_ID;

          IF F_EXISTED_PARENT_WFG_ID IS NOT NULL THEN
            BEGIN
              EXIT;
            End;
          END IF;
        EXCEPTION
        WHEN No_Data_Found THEN
          F_EXISTED_PARENT_WFG_ID    := NULL;
        END;
      END LOOP RES_RECORD;
    END;
  END IF;
  IF F_EXISTED_WFG_ID IS NOT NULL THEN
    BEGIN
      SELECT WFG_STATUS_NODES_TYPE_OBJ(WFN_ID,WFG_ID,P_WFG_ID) BULK COLLECT
      INTO V_WFG_STATUS_NODES_TYPE_TAB
      FROM
        (SELECT DISTINCT WFN_ID,
          WFG_ID,
          F_EXISTED_PARENT_WFG_ID AS P_WFG_ID
        FROM ADS_WORKFLOW_STATUS
        WHERE WFG_ID = F_EXISTED_WFG_ID
        );
    END;
  ELSIF F_FORCE_CHECK = 1 THEN
    BEGIN
      F_EXISTED_PARENT_WFG_ID := NULL;
    END;
  ELSE
    BEGIN
      SELECT WFG_STATUS_NODES_TYPE_OBJ(WFN_ID,WFG_ID,P_WFG_ID) BULK COLLECT
      INTO V_WFG_STATUS_NODES_TYPE_TAB
      FROM
        (SELECT DISTINCT WFN_ID,
          NULL                    AS WFG_ID,
          F_EXISTED_PARENT_WFG_ID AS P_WFG_ID
        FROM TABLE(FN_GET_WF_OBJECTS_STATUS(F_EXISTED_PARENT_WFG_ID, F_OBJECT_ID, F_OBJECT_TYPE_ID))
        );
    END;
  END IF;
  SELECT COUNT(*)
  INTO F_STATUS_NODES_CNT
  FROM TABLE(V_Wfg_Status_Nodes_Type_Tab);
  --IF THERE IS NO WORKFLOW STATUSES THEN WE SHOULD RETURN EXISTED SELECTED OBJECT ASSIGNMENT.
  IF F_STATUS_NODES_CNT = 0 AND F_EXISTED_WFG_ID IS NOT NULL THEN
    BEGIN
      V_WFG_STATUS_NODES_TYPE_TAB.EXTEND;
      V_WFG_STATUS_NODES_TYPE_TAB(V_WFG_STATUS_NODES_TYPE_TAB.COUNT) := WFG_STATUS_NODES_TYPE_OBJ(NULL, F_EXISTED_WFG_ID,NULL);
    END;
  END IF;
  FOR RES_RECORD IN
  (SELECT * FROM TABLE(V_WFG_STATUS_NODES_TYPE_TAB)
  )
  LOOP
    BEGIN
      PIPE ROW(WFG_STATUS_NODES_TYPE_OBJ(RES_RECORD.WFN_ID,RES_RECORD.WFG_ID,RES_RECORD.P_WFG_ID));
    END;
  END LOOP Res_Record;
  RETURN;
END FN_GET_WFG_STATUS_NODES;
/

-- WORKFLOW MANAGER MIGRATION SCRIPT START ---
DECLARE
VERSIONCHECKER INT;
BEGIN
 SELECT COUNT(*) INTO VERSIONCHECKER FROM ADS_MM_VERSION WHERE VALUE < '9.2';
  IF VERSIONCHECKER = 1 THEN
  BEGIN
EXECUTE IMMEDIATE 'CREATE OR REPLACE
PROCEDURE SP_COPY_WORKFLOW(
    F_WF_ID           IN NUMBER,
    F_WF_NAME_NEW     IN VARCHAR2,
    F_TRIGGER_TYPE_ID IN NUMBER,
    F_WF_ID_NEW OUT NUMBER )
IS
  F_WF_NAME_OLD        VARCHAR2(250);
  F_WFG_OBJECT_TYPE_ID NUMBER;
  F_WF_OBJECT_TYPE_ID  NUMBER;
  F_TRIGGER_OBJECT_TYPE_ID NUMBER;
BEGIN
  SELECT WORKFLOW_NAME
  INTO F_WF_NAME_OLD
  FROM ADS_WORKFLOW
  WHERE WF_ID = F_WF_ID;
  IF F_WF_ID IS NULL OR F_WF_NAME_OLD IS NULL THEN
    BEGIN
      RETURN;
    END;
  END IF;
  SELECT OBJECT_TYPE_ID
  INTO F_WF_OBJECT_TYPE_ID
  FROM ADS_KEY_VALUE_OBJECTS
  WHERE OBJECT_TYPE = ''ADS_WORKFLOW'';
  SELECT OBJECT_TYPE_ID
  INTO F_WFG_OBJECT_TYPE_ID
  FROM ADS_KEY_VALUE_OBJECTS
  WHERE OBJECT_TYPE     = ''ADS_WORKFLOW_ASSIGNMENT'';
  SELECT OBJECT_TYPE_ID
  INTO F_TRIGGER_OBJECT_TYPE_ID
  FROM ADS_WORKFLOW_TRIGGER_ACTION
  WHERE WFTA_ID = F_TRIGGER_TYPE_ID;
  INSERT
  INTO ADS_WORKFLOW
    (
      WORKFLOW_NAME,
      DESCRIPTION,
      WFF_ID,
      MODULE_ID,
      SYSTEMBASED,
      THUMBNAIL,
      VALID,
      WFTA_ID
    )
  SELECT F_WF_NAME_NEW,
    DESCRIPTION,
    WFF_ID,
    MODULE_ID,
    SYSTEMBASED,
    THUMBNAIL,
    VALID,
    F_TRIGGER_TYPE_ID
  FROM ADS_WORKFLOW
  WHERE WF_ID = F_WF_ID;
  SELECT "ADS_WF_TBL_SEQ".CURRVAL INTO F_WF_ID_NEW FROM DUAL;
  INSERT
  INTO ADS_WORKFLOW_NODE
    (
      WF_ID,
      NODE_TYPE,
      NODE_ID,
      UI_PROPERTIES,
      VALID
    )
  SELECT F_WF_ID_NEW,
    NODE_TYPE,
    NODE_ID,
    UI_PROPERTIES,
    VALID
  FROM ADS_WORKFLOW_NODE
  WHERE WF_ID = F_WF_ID;
  INSERT INTO ADS_WORKFLOW_ASSIGNMENT
    (WF_ID,OBJECT_ID,OBJECT_TYPE_ID,VALID
    )
  SELECT F_WF_ID_NEW,
    AWA.OBJECT_ID,
    AWA.OBJECT_TYPE_ID,
    VALID
  FROM ADS_WORKFLOW_ASSIGNMENT AWA
  JOIN ADS_WORKFLOW_ASGMNT_TRIGGER AWAT
  ON AWAT.WFG_ID          = AWA.WFG_ID
  AND AWAT.OBJECT_TYPE_ID = F_TRIGGER_OBJECT_TYPE_ID
  WHERE WF_ID             = F_WF_ID;
  INSERT INTO ADS_WORKFLOW_NODE_CON
WITH OLD_WF_NODE AS
  ( SELECT * FROM ADS_WORKFLOW_NODE AWN WHERE AWN.WF_ID = F_WF_ID
  ),
  NEW_WF_NODE AS
  ( SELECT * FROM ADS_WORKFLOW_NODE AWN WHERE AWN.WF_ID = F_WF_ID_NEW
  ),
  OLD_WF_NODE_CON AS
  ( SELECT DISTINCT AWNC.SOURCE_WFN_ID,
    AWNC.TARGET_WFN_ID,
    AWNC.UI_PROPERTIES
  FROM OLD_WF_NODE AWN
  JOIN ADS_WORKFLOW_NODE_CON AWNC
  ON AWNC.SOURCE_WFN_ID = AWN.WFN_ID
  OR AWNC.TARGET_WFN_ID = AWN.WFN_ID
  ),
  NEW_WF_NODE_SRC_CON AS
  ( SELECT DISTINCT AWN.WFN_ID,
    WNC.UI_PROPERTIES
  FROM NEW_WF_NODE AWN
  JOIN
    (SELECT AWN_I.NODE_ID,
      AWN_I.NODE_TYPE,
      OWNC.UI_PROPERTIES
    FROM OLD_WF_NODE_CON OWNC
    JOIN OLD_WF_NODE AWN_I
    ON AWN_I.WFN_ID      = OWNC.SOURCE_WFN_ID
    ) WNC ON AWN.NODE_ID = WNC.NODE_ID
  AND AWN.NODE_TYPE      = WNC.NODE_TYPE
  ),
  NEW_WF_NODE_TGT_CON AS
  ( SELECT DISTINCT AWN.WFN_ID,
    WNC.UI_PROPERTIES
  FROM NEW_WF_NODE AWN
  JOIN
    (SELECT AWN_I.NODE_ID,
      AWN_I.NODE_TYPE,
      OWNC.UI_PROPERTIES
    FROM OLD_WF_NODE_CON OWNC
    JOIN OLD_WF_NODE AWN_I
    ON AWN_I.WFN_ID      = OWNC.TARGET_WFN_ID
    ) WNC ON AWN.NODE_ID = WNC.NODE_ID
  AND AWN.NODE_TYPE      = WNC.NODE_TYPE
  )
SELECT NWNSC.WFN_ID,
  NWNTC.WFN_ID,
  NWNTC.UI_PROPERTIES
FROM NEW_WF_NODE_SRC_CON NWNSC
JOIN NEW_WF_NODE_TGT_CON NWNTC
ON NWNTC.UI_PROPERTIES = NWNSC.UI_PROPERTIES;
INSERT INTO ADS_WORKFLOW_NODE_ROLE
SELECT DISTINCT AWN.WFN_ID,
  WNR.ROLE_ID
FROM ADS_WORKFLOW_NODE AWN
JOIN
  (SELECT AWN_I.NODE_ID,
    AWN_I.NODE_TYPE,
    WNR.ROLE_ID
  FROM ADS_WORKFLOW_NODE_ROLE WNR
  JOIN ADS_WORKFLOW_NODE AWN_I
  ON AWN_I.WFN_ID      = WNR.WFN_ID
  WHERE AWN_I.WF_ID    = F_WF_ID
  ) WNR ON AWN.NODE_ID = WNR.NODE_ID
AND AWN.NODE_TYPE      = WNR.NODE_TYPE
WHERE AWN.WF_ID        = F_WF_ID_NEW;
INSERT INTO ADS_WORKFLOW_ASGN_NODE_CONFIG
WITH OLD_WF_NODE_CONF AS
  ( SELECT DISTINCT I_AWA.WFG_ID,
    I_AWA.OBJECT_ID,
    I_AWA.OBJECT_TYPE_ID,
    I_AWANC.WFN_ID,
    I_AWN.NODE_ID,
    I_AWN.NODE_TYPE,
    I_AWANC.CONFIG_TYPE,
    I_AWANC.CONFIG_VALUE
  FROM ADS_WORKFLOW_ASSIGNMENT I_AWA
  JOIN ADS_WORKFLOW_ASGN_NODE_CONFIG I_AWANC
  ON I_AWANC.WFG_ID = I_AWA.WFG_ID
  JOIN ADS_WORKFLOW_NODE I_AWN
  ON I_AWN.WFN_ID   = I_AWANC.WFN_ID
  WHERE I_AWA.WF_ID = F_WF_ID
  ),
  NEW_WF_NODE AS
  ( SELECT * FROM ADS_WORKFLOW_NODE AWN WHERE AWN.WF_ID = F_WF_ID_NEW
  )
SELECT DISTINCT AWA.WFG_ID,
  AWN.WFN_ID,
  AWANC.CONFIG_TYPE,
  AWANC.CONFIG_VALUE
FROM NEW_WF_NODE AWN
JOIN OLD_WF_NODE_CONF AWANC
ON AWN.NODE_ID    = AWANC.NODE_ID
AND AWN.NODE_TYPE = AWANC.NODE_TYPE
JOIN ADS_WORKFLOW_ASSIGNMENT AWA
ON AWA.OBJECT_ID       = AWANC.OBJECT_ID
AND AWA.OBJECT_TYPE_ID = AWANC.OBJECT_TYPE_ID
WHERE AWA.WF_ID        = F_WF_ID_NEW;
INSERT INTO RM_HISTORY(
    HISTORYTYPEID,
    HISTORYDESC,
    OBJECTID,
    OBJECTTYPEID,
    HISTORYDATESTAMP,
    USER_ID,
    FROM_ENV,
    TO_ENV,
    FROM_MAPID,
    TO_MAPID
  )
SELECT RH.HISTORYTYPEID,
  REPLACE(REPLACE(RH.HISTORYDESC, ''"Id": "''
  ||Rh.Objectid, ''"Id": "''
  || F_Wf_Id_New ), ''"Name": "''
  || F_Wf_Name_Old, ''"Name": "''
  || F_Wf_Name_New),
  F_WF_ID_NEW,
  RH.OBJECTTYPEID,
  RH.HISTORYDATESTAMP,
  RH.USER_ID,
  RH.FROM_ENV,
  RH.TO_ENV,
  RH.FROM_MAPID,
  RH.TO_MAPID
FROM RM_HISTORY RH
WHERE RH.OBJECTID   = F_WF_ID
AND RH.OBJECTTYPEID = F_WF_OBJECT_TYPE_ID;
INSERT INTO RM_HISTORY(
    HISTORYTYPEID,
    HISTORYDESC,
    OBJECTID,
    OBJECTTYPEID,
    HISTORYDATESTAMP,
    USER_ID,
    FROM_ENV,
    TO_ENV,
    FROM_MAPID,
    TO_MAPID
  )
SELECT WFARH.HISTORYTYPEID,
  REPLACE(REPLACE(WFARH.HISTORYDESC, ''Workflow Name: ''
  || F_WF_NAME_OLD, ''Workflow Name: ''
  || F_WF_NAME_NEW), ''Assignment Id: ''
  || WFARH.OBJECTID, ''Assignment Id: ''
  ||AWA.WFG_ID),
  AWA.WFG_ID,
  WFARH.OBJECTTYPEID,
  WFARH.HISTORYDATESTAMP,
  WFARH.USER_ID,
  WFARH.FROM_ENV,
  WFARH.TO_ENV,
  WFARH.FROM_MAPID,
  WFARH.TO_MAPID
FROM ADS_WORKFLOW_ASSIGNMENT AWA
JOIN
  (SELECT I_AWA.OBJECT_ID,
    I_AWA.OBJECT_TYPE_ID,
    RH.*
  FROM ADS_WORKFLOW_ASSIGNMENT I_AWA
  JOIN RM_HISTORY RH
  ON RH.OBJECTID             = I_AWA.WFG_ID
  AND RH.OBJECTTYPEID        = F_WFG_OBJECT_TYPE_ID
  WHERE I_AWA.WF_ID          = F_WF_ID
  ) WFARH ON WFARH.OBJECT_ID = AWA.OBJECT_ID
AND WFARH.OBJECT_TYPE_ID     = AWA.OBJECT_TYPE_ID
WHERE AWA.WF_ID              = F_WF_ID_NEW;
RETURN;
END SP_COPY_WORKFLOW;';
END;
END IF;
END;
/
DECLARE
   TABLECHECKERFLAG INT;
   VERSIONCHECKER INT;
BEGIN
   SELECT COUNT(*) INTO VERSIONCHECKER FROM ADS_MM_VERSION WHERE VALUE < '9.2';
   SELECT COUNT(*) INTO TABLECHECKERFLAG FROM ALL_TABLES WHERE OWNER = sys_context( 'userenv', 'current_schema' ) AND TABLE_NAME = UPPER('F_CP_WF_DETAILS');
   IF TABLECHECKERFLAG = 0 AND VERSIONCHECKER = 1 THEN
       BEGIN
          EXECUTE IMMEDIATE 'CREATE TABLE F_CP_WF_DETAILS(FROM_WF_ID NUMBER, NEW_WF_ID NUMBER)';
       END;
    END IF;
END;
/

DECLARE
  TRIGGERCHECKERFLAG INT;
  VERSIONCHECKERFLAG INT;
Begin
	SELECT COUNT(*) INTO VERSIONCHECKERFLAG FROM ADS_MM_VERSION WHERE VALUE <= '9.0';
	IF VERSIONCHECKERFLAG = 1 THEN
	BEGIN
  SELECT COUNT(*)
  INTO TRIGGERCHECKERFLAG
  FROM ALL_TRIGGERS
  WHERE OWNER = SYS_CONTEXT('userenv', 'current_schema') AND TRIGGER_NAME = UPPER('ADS_WF_STATUS_MIG_I_TRIG');
  IF TRIGGERCHECKERFLAG = 0 THEN
  BEGIN
    EXECUTE IMMEDIATE 'CREATE OR REPLACE TRIGGER  "ADS_WF_STATUS_MIG_I_TRIG" AFTER INSERT ON ADS_WORKFLOW_STATUS FOR EACH ROW
	DECLARE
	F_WF_ID NUMBER;
	BEGIN

	IF :NEW.WFG_ID > 0 THEN
	BEGIN
	SELECT WF_ID INTO F_WF_ID FROM ADS_WORKFLOW_ASSIGNMENT WHERE WFG_ID = :NEW.WFG_ID;
	INSERT INTO RM_HISTORY ("HISTORYTYPEID", "HISTORYDESC", "OBJECTID", "OBJECTTYPEID", "HISTORYDATESTAMP", "USER_ID")
	SELECT
	 6,
	 ''{"WFId":''||F_WF_ID|| '', "wfgId":''|| :NEW.WFG_ID||'', "toWFNId":''||:NEW.WFN_ID||'', "fromWFNId":-1, "comments":"Object created and moved to draft", "archive":{"fromStatus":"", "toStatus":"Draft", "fromNode":"", "toNode":"ON_CREATE"}}'',
	 :NEW.OBJECT_ID,
	 :NEW.OBJECT_TYPE_ID,
	 CURRENT_TIMESTAMP,
	 ''Administrator'' FROM DUAL;
	 END;
	 END IF;END;';
    EXECUTE IMMEDIATE 'ALTER TRIGGER  "ADS_WF_STATUS_MIG_I_TRIG" ENABLE';
	END;
  END IF;
  END;
  END IF;
End;
/

DECLARE
  TRIGGERCHECKERFLAG INT;
  VERSIONCHECKERFLAG INT;
Begin
	SELECT COUNT(*) INTO VERSIONCHECKERFLAG FROM ADS_MM_VERSION WHERE VALUE <= '9.0';
	IF VERSIONCHECKERFLAG = 1 THEN
	BEGIN
  SELECT COUNT(*)
  INTO TRIGGERCHECKERFLAG
  FROM ALL_TRIGGERS
  WHERE OWNER = SYS_CONTEXT('userenv', 'current_schema') AND TRIGGER_NAME = UPPER('ADS_WF_STATUS_MIG_U_TRIG');
  IF TRIGGERCHECKERFLAG = 0 THEN
  BEGIN
    EXECUTE IMMEDIATE 'CREATE OR REPLACE TRIGGER  "ADS_WF_STATUS_MIG_U_TRIG" AFTER UPDATE ON ADS_WORKFLOW_STATUS FOR EACH ROW
    BEGIN
	IF :new.WFG_ID > 0 THEN
	BEGIN
	UPDATE RM_HISTORY SET HISTORYDESC = ''{"wfgId":''||:new.WFG_ID||'', ''||Substr(Historydesc, 2, Length(Historydesc) -1 ) Where HISTORYTYPEID = 6 And Objectid =:new.OBJECT_ID And Objecttypeid =:new.OBJECT_TYPE_ID;
	 END;END IF;END;';
    EXECUTE IMMEDIATE 'ALTER TRIGGER  "ADS_WF_STATUS_MIG_U_TRIG" ENABLE';
	END;
  END IF;
  END;
  END IF;
End;
/

DECLARE
VERSIONCHECKERFLAG NUMBER;
BEGIN
SELECT COUNT(*) INTO VERSIONCHECKERFLAG FROM ADS_MM_VERSION WHERE VALUE < '9.2';
IF VERSIONCHECKERFLAG = 1 THEN
BEGIN
EXECUTE IMMEDIATE 'CREATE OR REPLACE PROCEDURE WF_MIGRATION_PROC
(F_MM_MODULE_ID IN NUMBER,
F_MD_MODULE_ID IN NUMBER,
F_BG_MODULE_ID IN NUMBER)
IS
F_ENV_OBJECT_TYPE_ID NUMBER;
F_TBL_OBJECT_TYPE_ID NUMBER;
F_COL_OBJECT_TYPE_ID NUMBER;
F_PROJ_OBJECT_TYPE_ID NUMBER;
F_MAP_OBJECT_TYPE_ID NUMBER;
F_BGC_OBJECT_TYPE_ID NUMBER;
F_BGT_OBJECT_TYPE_ID NUMBER;

F_MD_ROOT_OBJECT_TYPE_ID NUMBER;
F_MM_ROOT_OBJECT_TYPE_ID NUMBER;
F_BG_ROOT_OBJECT_TYPE_ID NUMBER;

F_WF_OBJECT_TYPE_ID NUMBER;
F_WFG_OBJECT_TYPE_ID NUMBER;
F_WFF_OBJECT_TYPE_ID NUMBER;
F_WFS_OBJECT_TYPE_ID NUMBER;

F_MD_ACTION_ID_OLD NUMBER;
F_MM_ACTION_ID_OLD NUMBER;
F_BG_ACTION_ID_OLD NUMBER;

F_DEFAULT_TRIGGER_ID NUMBER;

F_TBL_TRIGGER_ID_NEW NUMBER;
F_COL_TRIGGER_ID_NEW NUMBER;
F_MAP_TRIGGER_ID_NEW NUMBER;
F_BGT_TRIGGER_ID_NEW NUMBER;

F_TBL_ACTION_ID_NEW NUMBER;
F_COL_ACTION_ID_NEW NUMBER;
F_MAP_ACTION_ID_NEW NUMBER;
F_BGT_ACTION_ID_NEW NUMBER;
F_C_WF_ID NUMBER;
F_C_WF_NAME VARCHAR2(250);
F_N_WF_ID NUMBER;

F_CP_O_WF_ID NUMBER;
F_CP_O_WFN_ID VARCHAR2(250);
F_CP_N_WF_ID NUMBER;
F_CP_N_WFN_ID NUMBER;
NEW_WF_ID NUMBER;

F_COL_DEF_WFG_ID NUMBER;
F_TBL_DEF_WFG_ID NUMBER;
F_MAP_DEF_WFG_ID NUMBER;
F_BGT_DEF_WFG_ID NUMBER;
F_DEFAULT_WF_CREATED_ON TIMESTAMP;
BEGIN

            SELECT OBJECT_TYPE_ID INTO F_ENV_OBJECT_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE = ''SM_ENVIRONMENT'';
            SELECT OBJECT_TYPE_ID INTO F_TBL_OBJECT_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE = ''SM_TABLE'';
            SELECT OBJECT_TYPE_ID INTO F_COL_OBJECT_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE = ''SM_COLUMN'';
            SELECT OBJECT_TYPE_ID INTO F_PROJ_OBJECT_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE = ''MM_PROJECT'';
            SELECT OBJECT_TYPE_ID INTO F_MAP_OBJECT_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE = ''MM_MAPPING'';
            SELECT OBJECT_TYPE_ID INTO F_BGC_OBJECT_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE = ''BGM_TERM_CATALOG'';
            SELECT OBJECT_TYPE_ID INTO F_BGT_OBJECT_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE = ''BGM_TERM'';


            SELECT OBJECT_TYPE_ID  INTO F_MD_ROOT_OBJECT_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE = ''SM_METADATA'';
            SELECT OBJECT_TYPE_ID  INTO F_MM_ROOT_OBJECT_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE = ''MM_PROJECTS'';
            SELECT OBJECT_TYPE_ID  INTO F_BG_ROOT_OBJECT_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE = ''BGM_TERM_CATALOGS'';

            SELECT OBJECT_TYPE_ID INTO F_WF_OBJECT_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE = ''ADS_WORKFLOW'';
            SELECT OBJECT_TYPE_ID INTO F_WFG_OBJECT_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE = ''ADS_WORKFLOW_ASSIGNMENT'';
            SELECT OBJECT_TYPE_ID INTO F_WFF_OBJECT_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE = ''ADS_WORKFLOW_FOLDER'';
            SELECT OBJECT_TYPE_ID INTO F_WFS_OBJECT_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE = ''ADS_WORKFLOW_STAGE'';

		SELECT MIN(HISTORYDATESTAMP) INTO F_DEFAULT_WF_CREATED_ON FROM RM_HISTORY WHERE OBJECTTYPEID = F_WF_OBJECT_TYPE_ID;

		SELECT WFT_ID INTO F_DEFAULT_TRIGGER_ID FROM ADS_WORKFLOW_TRIGGER WHERE TRIGGER_NAME = ''ON_CREATE'';

		SELECT WFA_ID INTO F_MD_ACTION_ID_OLD FROM ADS_WORKFLOW_ACTION WHERE MODULE_ID = F_MD_MODULE_ID;
		SELECT WFA_ID INTO F_MM_ACTION_ID_OLD FROM ADS_WORKFLOW_ACTION WHERE MODULE_ID = F_MM_MODULE_ID;
		SELECT WFA_ID INTO F_BG_ACTION_ID_OLD FROM ADS_WORKFLOW_ACTION WHERE MODULE_ID = F_BG_MODULE_ID;

		SELECT WFTA_ID INTO F_TBL_TRIGGER_ID_NEW FROM ADS_WORKFLOW_TRIGGER_ACTION WHERE OBJECT_TYPE_ID = F_TBL_OBJECT_TYPE_ID AND NAME = ''ON_CREATE'' AND NODE_TYPE = ''T'';
		SELECT WFTA_ID INTO F_COL_TRIGGER_ID_NEW FROM ADS_WORKFLOW_TRIGGER_ACTION WHERE OBJECT_TYPE_ID = F_COL_OBJECT_TYPE_ID AND NAME = ''ON_CREATE'' AND NODE_TYPE = ''T'';
		SELECT WFTA_ID INTO F_MAP_TRIGGER_ID_NEW FROM ADS_WORKFLOW_TRIGGER_ACTION WHERE OBJECT_TYPE_ID = F_MAP_OBJECT_TYPE_ID AND NAME = ''ON_CREATE'' AND NODE_TYPE = ''T'';
		SELECT WFTA_ID INTO F_BGT_TRIGGER_ID_NEW FROM ADS_WORKFLOW_TRIGGER_ACTION WHERE OBJECT_TYPE_ID = F_BGT_OBJECT_TYPE_ID AND NAME = ''ON_CREATE'' AND NODE_TYPE = ''T'';

		SELECT WFTA_ID INTO F_TBL_ACTION_ID_NEW FROM ADS_WORKFLOW_TRIGGER_ACTION WHERE OBJECT_TYPE_ID = F_TBL_OBJECT_TYPE_ID AND NAME = ''PUBLISH'' AND NODE_TYPE = ''A'';
		SELECT WFTA_ID INTO F_COL_ACTION_ID_NEW FROM ADS_WORKFLOW_TRIGGER_ACTION WHERE OBJECT_TYPE_ID = F_COL_OBJECT_TYPE_ID AND NAME = ''PUBLISH'' AND NODE_TYPE = ''A'';
		SELECT WFTA_ID INTO F_MAP_ACTION_ID_NEW FROM ADS_WORKFLOW_TRIGGER_ACTION WHERE OBJECT_TYPE_ID = F_MAP_OBJECT_TYPE_ID AND NAME = ''PUBLISH'' AND NODE_TYPE = ''A'';
		SELECT WFTA_ID INTO F_BGT_ACTION_ID_NEW FROM ADS_WORKFLOW_TRIGGER_ACTION WHERE OBJECT_TYPE_ID = F_BGT_OBJECT_TYPE_ID AND NAME = ''PUBLISH'' AND NODE_TYPE = ''A'';

	 FOR RES_RECORD IN(SELECT AWT.WF_ID
		FROM (SELECT DISTINCT AWA.WF_ID, COUNT(distinct AWAT.OBJECT_TYPE_ID) CNT
			FROM ADS_WORKFLOW_ASSIGNMENT AWA
			JOIN ADS_WORKFLOW_ASGMNT_TRIGGER AWAT
			ON AWAT.WFG_ID = AWA.WFG_ID
			GROUP BY AWA.WF_ID) AWT
		WHERE AWT.CNT >= 2)
		LOOP
			BEGIN
			F_N_WF_ID := NULL;
			SELECT WORKFLOW_NAME INTO F_C_WF_NAME FROM ADS_WORKFLOW WHERE WF_ID = RES_RECORD.WF_ID;
			F_C_Wf_Name := F_C_Wf_Name || ''_1'';
			Sp_Copy_Workflow(Res_Record.Wf_Id,F_C_Wf_Name,F_Tbl_Trigger_Id_New,F_N_Wf_Id);
			INSERT INTO F_CP_WF_DETAILS(FROM_WF_ID, NEW_WF_ID) VALUES (RES_RECORD.WF_ID, F_N_WF_ID);
		  END;
      END LOOP RES_RECORD;

	  /*Update WFTA_ID for existed workflows*/
		/*TODO Clasify Column Trigger Id and Table Trigger Id*/
		UPDATE ADS_WORKFLOW SET WFTA_ID = F_MAP_TRIGGER_ID_NEW WHERE WFTA_ID IS NULL AND MODULE_ID = F_MM_MODULE_ID;
		UPDATE ADS_WORKFLOW SET WFTA_ID = F_COL_TRIGGER_ID_NEW WHERE WFTA_ID IS NULL AND MODULE_ID = F_MD_MODULE_ID AND WF_ID IN (SELECT FROM_WF_ID FROM F_CP_WF_DETAILS);
		UPDATE ADS_WORKFLOW SET WFTA_ID = F_COL_TRIGGER_ID_NEW
			WHERE WFTA_ID IS NULL AND MODULE_ID = F_MD_MODULE_ID
			AND WF_ID IN (SELECT AWT.WF_ID
				FROM (SELECT DISTINCT AWA.WF_ID
					FROM ADS_WORKFLOW_ASSIGNMENT AWA
					JOIN ADS_WORKFLOW_ASGMNT_TRIGGER AWAT
					ON AWAT.WFG_ID = AWA.WFG_ID
					WHERE AWAT.OBJECT_TYPE_ID = F_COL_OBJECT_TYPE_ID) AWT
				WHERE AWT.WF_ID NOT IN (SELECT FROM_WF_ID FROM F_CP_WF_DETAILS));
		UPDATE ADS_WORKFLOW SET WFTA_ID = F_TBL_TRIGGER_ID_NEW
			WHERE WFTA_ID IS NULL AND MODULE_ID = F_MD_MODULE_ID
			AND WF_ID IN (SELECT AWT.WF_ID
				FROM (SELECT DISTINCT AWA.WF_ID
					FROM ADS_WORKFLOW_ASSIGNMENT AWA
					JOIN ADS_WORKFLOW_ASGMNT_TRIGGER AWAT
					ON AWAT.WFG_ID = AWA.WFG_ID
					WHERE AWAT.OBJECT_TYPE_ID = F_TBL_OBJECT_TYPE_ID) AWT
				WHERE AWT.WF_ID NOT IN (SELECT FROM_WF_ID FROM F_CP_WF_DETAILS));
		UPDATE ADS_WORKFLOW SET WFTA_ID = F_BGT_TRIGGER_ID_NEW WHERE WFTA_ID IS NULL AND MODULE_ID = F_BG_MODULE_ID;

		/*Delete Table Triggers for copied workflows*/
		DELETE FROM ADS_WORKFLOW_ASSIGNMENT WHERE WFG_ID IN
			(SELECT AWAG.WFG_ID
				FROM (SELECT AWA_I.WFG_ID, COUNT(*) CNT
					FROM ADS_WORKFLOW_ASSIGNMENT AWA_I
					JOIN ADS_WORKFLOW_ASGMNT_TRIGGER AWAT_I
					ON AWAT_I.WFG_ID = AWA_I.WFG_ID
					WHERE AWA_I.WF_ID IN (SELECT FROM_WF_ID FROM F_CP_WF_DETAILS)
					GROUP BY AWA_I.WFG_ID
			) AWAG
			JOIN ADS_WORKFLOW_ASSIGNMENT AWA
			ON AWA.WFG_ID = AWAG.WFG_ID
			JOIN ADS_WORKFLOW_ASGMNT_TRIGGER AWAT
			ON AWAT.WFG_ID = AWA.WFG_ID
			WHERE CNT = 1 AND AWAT.OBJECT_TYPE_ID = F_TBL_OBJECT_TYPE_ID);

		/*Update Root Object Type Id*/
		UPDATE ADS_WORKFLOW_ASSIGNMENT SET OBJECT_TYPE_ID = F_MM_ROOT_OBJECT_TYPE_ID WHERE OBJECT_ID = -1 AND OBJECT_TYPE_ID = F_PROJ_OBJECT_TYPE_ID;
		UPDATE ADS_WORKFLOW_ASSIGNMENT SET OBJECT_TYPE_ID = F_MD_ROOT_OBJECT_TYPE_ID WHERE OBJECT_ID = -1 AND OBJECT_TYPE_ID = F_ENV_OBJECT_TYPE_ID;
		UPDATE ADS_WORKFLOW_ASSIGNMENT SET OBJECT_TYPE_ID = F_BG_ROOT_OBJECT_TYPE_ID WHERE OBJECT_ID = -1 AND OBJECT_TYPE_ID = F_BGC_OBJECT_TYPE_ID;


		/*Update RM History Description for published nodes*/
		MERGE INTO RM_HISTORY RH
		USING (select RH.HISTORYID, ''{"WFId":'' || AWN.WF_ID || '', "toWFNId":'' || AWN.WFN_ID || '', "fromWFNId":-1, "comments":"Published", "archive":{"fromStatus":"", "toStatus":"Publish", "fromNode":"", "toNode":"PUBLISH" }}''  HISTORYDESC
		from ADS_WORKFLOW_STATUS AWS
		JOIN ADS_WORKFLOW_NODE AWN
		ON AWS.WFN_ID = AWN.WFN_ID
		JOIN RM_HISTORY RH
		on RH.OBJECTID = AWS.OBJECT_ID and RH.OBJECTTYPEID = AWS.OBJECT_TYPE_ID
		where HISTORYTYPEID = 6 and HISTORYDESC = ''Published'') RHG
		ON (RHG.HISTORYID = RH.HISTORYID)
		WHEN MATCHED THEN UPDATE SET RH.HISTORYDESC = RHG.HISTORYDESC;

		FOR RES_RECORD IN (SELECT FROM_WF_ID FROM F_CP_WF_DETAILS)
		LOOP
			BEGIN
				F_N_WF_ID := NULL;
				F_C_WF_ID := NULL;
				SELECT FROM_WF_ID, NEW_WF_ID INTO F_C_WF_ID, F_N_WF_ID FROM F_CP_WF_DETAILS WHERE FROM_WF_ID = RES_RECORD.FROM_WF_ID;

				INSERT INTO ADS_WORKFLOW_STATUS (WFN_ID, OBJECT_ID, OBJECT_TYPE_ID)
				WITH OLD_WF_NODE AS (
					SELECT *
					FROM ADS_WORKFLOW_NODE AWN
					WHERE AWN.WF_ID = F_C_WF_ID
				), NEW_WF_NODE AS (
					SELECT *
					FROM ADS_WORKFLOW_NODE AWN
					WHERE AWN.WF_ID = F_N_WF_ID
				)
				SELECT DISTINCT AWN.WFN_ID, AWS.OBJECT_ID, AWS.OBJECT_TYPE_ID
					FROM NEW_WF_NODE AWN
					JOIN (SELECT AWN_I.WFN_ID, AWS_I.OBJECT_ID, AWS_I.OBJECT_TYPE_ID, AWN_I.NODE_ID, AWN_I.NODE_TYPE
					FROM ADS_WORKFLOW_STATUS AWS_I
					JOIN OLD_WF_NODE AWN_I
					ON AWN_I.WFN_ID = AWS_I.WFN_ID
					WHERE AWS_I.OBJECT_TYPE_ID = F_TBL_OBJECT_TYPE_ID) AWS
					ON AWS.NODE_ID = AWN.NODE_ID AND AWS.NODE_TYPE = AWN.NODE_TYPE;

				DELETE FROM ADS_WORKFLOW_STATUS WHERE WFN_ID IN (SELECT WFN_ID FROM ADS_WORKFLOW_NODE WHERE WF_ID = F_C_WF_ID) AND OBJECT_TYPE_ID = F_TBL_OBJECT_TYPE_ID;

				UPDATE RM_HISTORY SET HISTORYDESC = REPLACE(HISTORYDESC, ''"WFId":''||F_C_WF_ID||'','', ''"WFId":''||F_N_WF_ID|| '','')
					WHERE HISTORYTYPEID = 6 AND OBJECTTYPEID = F_TBL_OBJECT_TYPE_ID AND HISTORYDESC LIKE ''%"WFId":''||F_C_WF_ID|| '',%'';

				UPDATE RM_HISTORY SET HISTORYDESC = REPLACE(HISTORYDESC, ''"WFId":"''||F_C_WF_ID||''",'', ''"WFId":"''||F_N_WF_ID|| ''",'')
					WHERE HISTORYTYPEID = 6 AND OBJECTTYPEID = F_TBL_OBJECT_TYPE_ID AND HISTORYDESC LIKE ''%"WFId":"''||F_C_WF_ID|| ''",%'';

					FOR SUB_RES IN (WITH OLD_WF_NODE AS (
						SELECT *
						FROM ADS_WORKFLOW_NODE AWN
						WHERE AWN.WF_ID = F_C_WF_ID
					), NEW_WF_NODE AS (
						SELECT *
						FROM ADS_WORKFLOW_NODE AWN
						WHERE AWN.WF_ID = F_N_WF_ID
					)
					SELECT DISTINCT OWN.WF_ID OLD_WF_ID, OWN.WFN_ID OLD_WFN_ID, NWN.WF_ID, NWN.WFN_ID
					FROM OLD_WF_NODE OWN
					JOIN NEW_WF_NODE NWN
					ON NWN.NODE_ID = OWN.NODE_ID
					AND NWN.NODE_TYPE = OWN.NODE_TYPE)
						LOOP
							BEGIN

					UPDATE RM_HISTORY SET HISTORYDESC = REPLACE(HISTORYDESC, ''WFNId":''||SUB_RES.OLD_WFN_ID||'','', ''WFNId":"'' ||SUB_RES.WFN_ID ||''",'') WHERE HISTORYTYPEID = 6 AND OBJECTTYPEID = F_TBL_OBJECT_TYPE_ID AND HISTORYDESC LIKE ''%WFNId":''||SUB_RES.OLD_WFN_ID ||'',%'';

					UPDATE RM_HISTORY SET HISTORYDESC = REPLACE(HISTORYDESC, ''WFNId":"''||SUB_RES.OLD_WFN_ID||''",'', ''WFNId":"'' ||SUB_RES.WFN_ID ||''",'') WHERE HISTORYTYPEID = 6 AND OBJECTTYPEID = F_TBL_OBJECT_TYPE_ID AND HISTORYDESC LIKE ''%WFNId":"''||SUB_RES.OLD_WFN_ID ||''",%'';

							End;
						END LOOP SUB_RES;

			End;
			End Loop Res_Record;

			/*Update Workflow Node ids triggers with new trigger ids*/
		UPDATE ADS_WORKFLOW_NODE SET NODE_ID = F_COL_TRIGGER_ID_NEW
		WHERE NODE_ID = F_DEFAULT_TRIGGER_ID AND NODE_TYPE = ''T'' AND WF_ID IN (SELECT WF_ID FROM ADS_WORKFLOW WHERE MODULE_ID = F_MD_MODULE_ID AND WFTA_ID = F_COL_TRIGGER_ID_NEW);

		UPDATE ADS_WORKFLOW_NODE SET NODE_ID = F_TBL_TRIGGER_ID_NEW
		WHERE NODE_ID = F_DEFAULT_TRIGGER_ID AND NODE_TYPE = ''T'' AND WF_ID IN (SELECT WF_ID FROM ADS_WORKFLOW WHERE MODULE_ID = F_MD_MODULE_ID AND WFTA_ID = F_TBL_TRIGGER_ID_NEW);

		UPDATE ADS_WORKFLOW_NODE SET NODE_ID = F_MAP_TRIGGER_ID_NEW
		WHERE NODE_ID = F_DEFAULT_TRIGGER_ID AND NODE_TYPE = ''T'' AND WF_ID IN (SELECT WF_ID FROM ADS_WORKFLOW WHERE MODULE_ID = F_MM_MODULE_ID AND WFTA_ID = F_MAP_TRIGGER_ID_NEW);

		UPDATE ADS_WORKFLOW_NODE SET NODE_ID = F_BGT_TRIGGER_ID_NEW
		WHERE NODE_ID = F_DEFAULT_TRIGGER_ID AND NODE_TYPE = ''T'' AND WF_ID IN (SELECT WF_ID FROM ADS_WORKFLOW WHERE MODULE_ID = F_BG_MODULE_ID AND WFTA_ID = F_BGT_TRIGGER_ID_NEW);

		/*Update Workflow Node ids actions with new action ids*/
		UPDATE ADS_WORKFLOW_NODE SET NODE_ID = F_COL_ACTION_ID_NEW
		WHERE NODE_ID = F_MD_ACTION_ID_OLD AND NODE_TYPE = ''A'' AND WF_ID IN (SELECT WF_ID FROM ADS_WORKFLOW WHERE MODULE_ID = F_MD_MODULE_ID AND WFTA_ID = F_COL_TRIGGER_ID_NEW);

		UPDATE ADS_WORKFLOW_NODE SET NODE_ID = F_TBL_ACTION_ID_NEW
		WHERE NODE_ID = F_MD_ACTION_ID_OLD AND NODE_TYPE = ''A'' AND WF_ID IN (SELECT WF_ID FROM ADS_WORKFLOW WHERE MODULE_ID = F_MD_MODULE_ID AND WFTA_ID = F_TBL_TRIGGER_ID_NEW);

		UPDATE ADS_WORKFLOW_NODE SET NODE_ID = F_MAP_ACTION_ID_NEW
		WHERE NODE_ID = F_MM_ACTION_ID_OLD AND NODE_TYPE = ''A'' AND WF_ID IN (SELECT WF_ID FROM ADS_WORKFLOW WHERE MODULE_ID = F_MM_MODULE_ID AND WFTA_ID = F_MAP_TRIGGER_ID_NEW);

		UPDATE ADS_WORKFLOW_NODE SET NODE_ID = F_BGT_ACTION_ID_NEW
		WHERE NODE_ID = F_BG_ACTION_ID_OLD AND NODE_TYPE = ''A'' AND WF_ID IN
    (Select Wf_Id From ADS_WORKFLOW Where Module_Id = F_Bg_Module_Id And Wfta_Id = F_Bgt_Trigger_Id_New);

		MERGE INTO ADS_WORKFLOW_STATUS AWS
			USING (SELECT DISTINCT AWS.OBJECT_ID, AWS.OBJECT_TYPE_ID, AWS.WFN_ID, AWA.WFG_ID
				FROM ADS_WORKFLOW_STATUS AWS
				JOIN ADS_WORKFLOW_NODE AWN
				ON AWN.WFN_ID = AWS.WFN_ID
				JOIN ADS_WORKFLOW_ASSIGNMENT AWA
				ON AWA.WF_ID = AWN.WF_ID AND AWA.OBJECT_TYPE_ID = F_ENV_OBJECT_TYPE_ID
				JOIN SYSTEM_TABLE_COLUMNS_METADATA STCM
				ON AWA.OBJECT_ID = STCM.SCE_ID AND AWS.OBJECT_ID = STCM.STCM_ID AND AWS.OBJECT_TYPE_ID = F_COL_OBJECT_TYPE_ID) AWSG
			ON (AWSG.OBJECT_ID = AWS.OBJECT_ID AND AWSG.OBJECT_TYPE_ID = AWS.OBJECT_TYPE_ID)
			WHEN MATCHED THEN UPDATE SET AWS.WFG_ID = AWSG.WFG_ID;

		MERGE INTO ADS_WORKFLOW_STATUS AWS
			USING (SELECT DISTINCT AWS.OBJECT_ID, AWS.OBJECT_TYPE_ID, AWS.WFN_ID, AWA.WFG_ID
				FROM ADS_WORKFLOW_STATUS AWS
				JOIN ADS_WORKFLOW_NODE AWN
				ON AWN.WFN_ID = AWS.WFN_ID
				JOIN ADS_WORKFLOW_ASSIGNMENT AWA
				ON AWA.WF_ID = AWN.WF_ID AND AWA.OBJECT_TYPE_ID = F_ENV_OBJECT_TYPE_ID
				JOIN SYSTEM_TABLE_METADATA STM
				ON AWA.OBJECT_ID = STM.SCE_ID AND AWS.OBJECT_ID = STM.STM_ID AND AWS.OBJECT_TYPE_ID = F_TBL_OBJECT_TYPE_ID) AWSG
			ON (AWSG.OBJECT_ID = AWS.OBJECT_ID AND AWSG.OBJECT_TYPE_ID = AWS.OBJECT_TYPE_ID)
			WHEN MATCHED THEN UPDATE SET AWS.WFG_ID = AWSG.WFG_ID;

		MERGE INTO ADS_WORKFLOW_STATUS AWS
			USING (SELECT DISTINCT AWS.OBJECT_ID, AWS.OBJECT_TYPE_ID, AWS.WFN_ID, AWA.WFG_ID
				FROM ADS_WORKFLOW_STATUS AWS
				JOIN ADS_WORKFLOW_NODE AWN
				ON AWN.WFN_ID = AWS.WFN_ID
				JOIN ADS_WORKFLOW_ASSIGNMENT AWA
				ON AWA.WF_ID = AWN.WF_ID AND AWA.OBJECT_TYPE_ID = F_PROJ_OBJECT_TYPE_ID
				JOIN MAPPING_DETAILS MD
				ON AWA.OBJECT_ID = MD.PROJECT_ID AND AWS.OBJECT_ID = MD.MAP_ID AND AWS.OBJECT_TYPE_ID = F_MAP_OBJECT_TYPE_ID) AWSG
			ON (AWSG.OBJECT_ID = AWS.OBJECT_ID AND AWSG.OBJECT_TYPE_ID = AWS.OBJECT_TYPE_ID)
			WHEN MATCHED THEN UPDATE SET AWS.WFG_ID = AWSG.WFG_ID;

		MERGE INTO ADS_WORKFLOW_STATUS AWS
			USING (SELECT DISTINCT AWS.OBJECT_ID, AWS.OBJECT_TYPE_ID, AWS.WFN_ID, AWA.WFG_ID
				FROM ADS_WORKFLOW_STATUS AWS
				JOIN ADS_WORKFLOW_NODE AWN
				ON AWN.WFN_ID = AWS.WFN_ID
				JOIN ADS_WORKFLOW_ASSIGNMENT AWA
				ON AWA.WF_ID = AWN.WF_ID AND AWA.OBJECT_TYPE_ID = F_BGC_OBJECT_TYPE_ID
				JOIN BUSINESS_TERMS BGT
				ON AWA.OBJECT_ID = BGT.CATEGORY_ID AND AWS.OBJECT_ID = BGT.BUS_TERM_ID AND AWS.OBJECT_TYPE_ID = F_BGT_OBJECT_TYPE_ID) AWSG
			ON (AWSG.OBJECT_ID = AWS.OBJECT_ID AND AWSG.OBJECT_TYPE_ID = AWS.OBJECT_TYPE_ID)
			WHEN MATCHED THEN UPDATE SET AWS.WFG_ID = AWSG.WFG_ID;

		SELECT  WFG_ID INTO F_COL_DEF_WFG_ID FROM ADS_WORKFLOW_ASSIGNMENT WHERE WF_ID IN (SELECT WF_ID FROM ADS_WORKFLOW WHERE WFTA_ID = F_COL_TRIGGER_ID_NEW) AND OBJECT_ID = -1 AND OBJECT_TYPE_ID = F_MD_ROOT_OBJECT_TYPE_ID;
		SELECT WFG_ID INTO F_TBL_DEF_WFG_ID FROM ADS_WORKFLOW_ASSIGNMENT WHERE WF_ID IN (SELECT WF_ID FROM ADS_WORKFLOW WHERE WFTA_ID = F_TBL_TRIGGER_ID_NEW) AND OBJECT_ID = -1 AND OBJECT_TYPE_ID = F_MD_ROOT_OBJECT_TYPE_ID;
		SELECT WFG_ID INTO F_MAP_DEF_WFG_ID FROM ADS_WORKFLOW_ASSIGNMENT WHERE WF_ID IN (SELECT WF_ID FROM ADS_WORKFLOW WHERE WFTA_ID = F_MAP_TRIGGER_ID_NEW) AND OBJECT_ID = -1 AND OBJECT_TYPE_ID = F_MM_ROOT_OBJECT_TYPE_ID;
		SELECT WFG_ID INTO F_BGT_DEF_WFG_ID FROM ADS_WORKFLOW_ASSIGNMENT WHERE WF_ID IN (SELECT WF_ID FROM ADS_WORKFLOW WHERE WFTA_ID = F_BGT_TRIGGER_ID_NEW) AND OBJECT_ID = -1 AND OBJECT_TYPE_ID = F_BG_ROOT_OBJECT_TYPE_ID;

		UPDATE ADS_WORKFLOW_STATUS SET WFG_ID = F_COL_DEF_WFG_ID WHERE WFG_ID IS NULL AND OBJECT_TYPE_ID = F_COL_OBJECT_TYPE_ID;
		UPDATE ADS_WORKFLOW_STATUS SET WFG_ID = F_TBL_DEF_WFG_ID WHERE WFG_ID IS NULL AND OBJECT_TYPE_ID = F_TBL_OBJECT_TYPE_ID;
		UPDATE ADS_WORKFLOW_STATUS SET WFG_ID = F_MAP_DEF_WFG_ID WHERE WFG_ID IS NULL AND OBJECT_TYPE_ID = F_MAP_OBJECT_TYPE_ID;
		UPDATE ADS_WORKFLOW_STATUS SET WFG_ID = F_BGT_DEF_WFG_ID WHERE WFG_ID IS NULL AND OBJECT_TYPE_ID = F_BGT_OBJECT_TYPE_ID;


		/*Insert trigger nodes to wokflow statuses*/

		INSERT INTO ADS_WORKFLOW_STATUS (OBJECT_TYPE_ID, OBJECT_ID, WFN_ID, WFG_ID)
		WITH ADS_WF_ASSGN_TRIGGER_NODES AS
			(SELECT DISTINCT WFG_ID,
							WFN_ID,
							AWA.OBJECT_ID,
							AWA.OBJECT_TYPE_ID
			FROM ADS_WORKFLOW_ASSIGNMENT AWA
			JOIN ADS_WORKFLOW AW ON AW.WF_ID = AWA.WF_ID
			JOIN ADS_WORKFLOW_NODE AWN ON AWN.WF_ID = AWA.WF_ID
			WHERE AW.WFTA_ID = F_COL_TRIGGER_ID_NEW
				AND AWN.NODE_TYPE = ''T''),
				ADS_WF_ASSIGNED_TRIGGER_OBJS AS
			(SELECT STCM.STCM_ID, AWFATN.WFN_ID, AWFATN.WFG_ID
			FROM SYSTEM_TABLE_COLUMNS_METADATA STCM
			JOIN ACTIVE_SYS_CON_ENVIRONMENTS ASCE
			ON ASCE.SCE_ID = STCM.SCE_ID
			JOIN ADS_WF_ASSGN_TRIGGER_NODES AWFATN ON AWFATN.OBJECT_ID = STCM.SCE_ID
			LEFT JOIN ADS_WORKFLOW_STATUS AWS ON AWS.OBJECT_ID = STCM.STCM_ID
			AND AWS.OBJECT_TYPE_ID = F_COL_OBJECT_TYPE_ID
			WHERE STCM.VALID = 1
				AND AWS.OBJECT_ID IS NULL
				AND AWFATN.OBJECT_ID <> -1
				AND (STCM.TYPE <> ''ENTITY'' OR STCM.TYPE IS NULL)
				AND STCM.CREATED_DATETIME > F_DEFAULT_WF_CREATED_ON
			UNION
			SELECT STCM.STCM_ID, AWFATN.WFN_ID, AWFATN.WFG_ID
			FROM SYSTEM_TABLE_COLUMNS_METADATA STCM
			JOIN ACTIVE_SYS_CON_ENVIRONMENTS ASCE
			ON ASCE.SCE_ID = STCM.SCE_ID
			JOIN ADS_WF_ASSGN_TRIGGER_NODES AWFATN ON AWFATN.OBJECT_ID = -1
			LEFT JOIN ADS_WORKFLOW_STATUS AWS ON AWS.OBJECT_ID = STCM.STCM_ID
			AND AWS.OBJECT_TYPE_ID = F_COL_OBJECT_TYPE_ID
			WHERE STCM.VALID = 1
				AND AWS.OBJECT_ID IS NULL
				AND STCM.SCE_ID NOT IN
				(SELECT OBJECT_ID
				FROM ADS_WF_ASSGN_TRIGGER_NODES
				WHERE OBJECT_ID <> -1)
				AND (STCM.TYPE <> ''ENTITY'' OR STCM.TYPE IS NULL)
				AND STCM.CREATED_DATETIME > F_DEFAULT_WF_CREATED_ON
				)
			SELECT F_COL_OBJECT_TYPE_ID OBJECT_TYPE_ID, STCM_ID, WFN_ID, WFG_ID
			FROM ADS_WF_ASSIGNED_TRIGGER_OBJS;

		INSERT INTO ADS_WORKFLOW_STATUS (OBJECT_TYPE_ID, OBJECT_ID, WFN_ID, WFG_ID)
		WITH ADS_WF_ASSGN_TRIGGER_NODES AS
			(SELECT DISTINCT WFG_ID,
							WFN_ID,
							AWA.OBJECT_ID,
							AWA.OBJECT_TYPE_ID
			FROM ADS_WORKFLOW_ASSIGNMENT AWA
			JOIN ADS_WORKFLOW AW ON AW.WF_ID = AWA.WF_ID
			JOIN ADS_WORKFLOW_NODE AWN ON AWN.WF_ID = AWA.WF_ID
			WHERE AW.WFTA_ID = F_TBL_TRIGGER_ID_NEW
				AND AWN.NODE_TYPE = ''T''),
				ADS_WF_ASSIGNED_TRIGGER_OBJS AS
			(SELECT STM.STM_ID, AWFATN.WFN_ID, AWFATN.WFG_ID
			FROM SYSTEM_TABLE_METADATA STM
			JOIN ACTIVE_SYS_CON_ENVIRONMENTS ASCE
			ON ASCE.SCE_ID = STM.SCE_ID
			JOIN ADS_WF_ASSGN_TRIGGER_NODES AWFATN ON AWFATN.OBJECT_ID = STM.SCE_ID
			LEFT JOIN ADS_WORKFLOW_STATUS AWS ON AWS.OBJECT_ID = STM.STM_ID
			AND AWS.OBJECT_TYPE_ID = F_TBL_OBJECT_TYPE_ID
			WHERE STM.VALID = 1
				AND AWS.OBJECT_ID IS NULL
				AND AWFATN.OBJECT_ID <> -1
				AND STM.CREATED_DATETIME > F_DEFAULT_WF_CREATED_ON
			UNION
			SELECT STM.STM_ID, AWFATN.WFN_ID, AWFATN.WFG_ID
			FROM SYSTEM_TABLE_METADATA STM
			JOIN ACTIVE_SYS_CON_ENVIRONMENTS ASCE
			ON ASCE.SCE_ID = STM.SCE_ID
			JOIN ADS_WF_ASSGN_TRIGGER_NODES AWFATN ON AWFATN.OBJECT_ID = -1
			LEFT JOIN ADS_WORKFLOW_STATUS AWS ON AWS.OBJECT_ID = STM.STM_ID
			AND AWS.OBJECT_TYPE_ID = F_TBL_OBJECT_TYPE_ID
			WHERE STM.VALID = 1
				AND AWS.OBJECT_ID IS NULL
				AND STM.SCE_ID NOT IN
				(SELECT OBJECT_ID
				FROM ADS_WF_ASSGN_TRIGGER_NODES
				WHERE OBJECT_ID <> -1)
				AND STM.CREATED_DATETIME > F_DEFAULT_WF_CREATED_ON
				)
			SELECT F_TBL_OBJECT_TYPE_ID OBJECT_TYPE_ID, STM_ID, WFN_ID, WFG_ID
			FROM ADS_WF_ASSIGNED_TRIGGER_OBJS;

		INSERT INTO ADS_WORKFLOW_STATUS (OBJECT_TYPE_ID, OBJECT_ID, WFN_ID, WFG_ID)
		WITH ADS_WF_ASSGN_TRIGGER_NODES AS
			(SELECT DISTINCT WFG_ID,
							WFN_ID,
							AWA.OBJECT_ID,
							AWA.OBJECT_TYPE_ID
			FROM ADS_WORKFLOW_ASSIGNMENT AWA
			JOIN ADS_WORKFLOW AW ON AW.WF_ID = AWA.WF_ID
			JOIN ADS_WORKFLOW_NODE AWN ON AWN.WF_ID = AWA.WF_ID
			WHERE AW.WFTA_ID = F_MAP_TRIGGER_ID_NEW
				AND AWN.NODE_TYPE = ''T''),
				ADS_WF_ASSIGNED_TRIGGER_OBJS AS
			(SELECT MD.MAP_ID, AWFATN.WFN_ID, AWFATN.WFG_ID
			FROM MAPPING_DETAILS MD
			JOIN ADS_WF_ASSGN_TRIGGER_NODES AWFATN ON MD.PROJECT_ID = AWFATN.OBJECT_ID
			LEFT JOIN ADS_WORKFLOW_STATUS AWS ON AWS.OBJECT_ID = MD.MAP_ID
			AND AWS.OBJECT_TYPE_ID = F_MAP_OBJECT_TYPE_ID
			WHERE AWS.OBJECT_ID IS NULL
				AND AWFATN.OBJECT_ID <> -1
				AND MD.CREATED_DATE_TIME > F_DEFAULT_WF_CREATED_ON
			UNION
			SELECT MD.MAP_ID, AWFATN.WFN_ID, AWFATN.WFG_ID
			FROM MAPPING_DETAILS MD
			JOIN ADS_WF_ASSGN_TRIGGER_NODES AWFATN ON AWFATN.OBJECT_ID = -1
			LEFT JOIN ADS_WORKFLOW_STATUS AWS ON AWS.OBJECT_ID = MD.MAP_ID
			AND AWS.OBJECT_TYPE_ID = F_MAP_OBJECT_TYPE_ID
			WHERE AWS.OBJECT_ID IS NULL
				AND MD.PROJECT_ID NOT IN
				(SELECT OBJECT_ID
				FROM ADS_WF_ASSGN_TRIGGER_NODES
				WHERE OBJECT_ID <> -1)
				AND MD.CREATED_DATE_TIME > F_DEFAULT_WF_CREATED_ON)
			SELECT F_MAP_OBJECT_TYPE_ID OBJECT_TYPE_ID, MAP_ID, WFN_ID, WFG_ID
			FROM ADS_WF_ASSIGNED_TRIGGER_OBJS;

		INSERT INTO ADS_WORKFLOW_STATUS (OBJECT_TYPE_ID, OBJECT_ID, WFN_ID, WFG_ID)
		WITH ADS_WF_ASSGN_TRIGGER_NODES AS
			(SELECT DISTINCT AWA.WFG_ID,
                    WFN_ID,
                    AWOG.OBJECT_ID
            FROM (
                SELECT CATEGORY_ID OBJECT_ID, FN_GET_OBJECT_WFG_ID(CATEGORY_ID, F_BGC_OBJECT_TYPE_ID, F_BGT_TRIGGER_ID_NEW) WFG_ID
                FROM BG_CATEGORIES
            ) AWOG
            JOIN ADS_WORKFLOW_ASSIGNMENT AWA ON AWA.WFG_ID = AWOG.WFG_ID
			JOIN ADS_WORKFLOW AW ON AW.WF_ID = AWA.WF_ID
			JOIN ADS_WORKFLOW_NODE AWN ON AWN.WF_ID = AWA.WF_ID
			WHERE AW.WFTA_ID = F_BGT_TRIGGER_ID_NEW
				AND AWN.NODE_TYPE = ''T''),
				ADS_WF_ASSIGNED_TRIGGER_OBJS AS
			(SELECT BT.BUS_TERM_ID, AWFATN.WFN_ID, AWFATN.WFG_ID
			FROM BUSINESS_TERMS BT
			JOIN RM_HISTORY RH ON RH.OBJECTID = BT.BUS_TERM_ID
			AND RH.OBJECTTYPEID = F_BGT_OBJECT_TYPE_ID
			AND RH.HISTORYTYPEID = 1
			JOIN ADS_WF_ASSGN_TRIGGER_NODES AWFATN ON BT.CATEGORY_ID = AWFATN.OBJECT_ID
			LEFT JOIN ADS_WORKFLOW_STATUS AWS ON AWS.OBJECT_ID = BT.BUS_TERM_ID
			AND AWS.OBJECT_TYPE_ID = F_BGT_OBJECT_TYPE_ID
			WHERE AWS.OBJECT_ID IS NULL
				AND RH.HISTORYDATESTAMP > F_DEFAULT_WF_CREATED_ON)
		SELECT F_BGT_OBJECT_TYPE_ID OBJECT_TYPE_ID, BUS_TERM_ID, WFN_ID, WFG_ID
		FROM ADS_WF_ASSIGNED_TRIGGER_OBJS;

		DELETE FROM ADS_WORKFLOW_STATUS WHERE WFN_ID IN (SELECT WFN_ID FROM ADS_WORKFLOW_NODE WHERE NODE_TYPE = ''A'');

		INSERT INTO ADS_WORKFLOW_NODE_ROLE
		SELECT WFN_ID, ''com.ads.roles.Administrator''
		From ADS_WORKFLOW_NODE Where Node_Type = ''T'' Or Node_Type = ''A'';
	END WF_MIGRATION_PROC;';
END;
END IF;
END;
/
DECLARE
   PROCEDURECHECKER INT;
BEGIN
    SELECT COUNT(*) INTO PROCEDURECHECKER FROM USER_PROCEDURES WHERE OBJECT_TYPE = 'PROCEDURE' AND OBJECT_NAME = 'WF_MIGRATION_PROC';
    IF PROCEDURECHECKER = 1 THEN
        BEGIN
            EXECUTE IMMEDIATE 'call  WF_MIGRATION_PROC(1,2,13)';
        END;
    END IF;
END;
/
DECLARE
   PROCEDURECHECKER INT;
BEGIN
       SELECT COUNT(*) INTO PROCEDURECHECKER FROM USER_PROCEDURES WHERE OBJECT_TYPE = 'PROCEDURE' AND OBJECT_NAME = 'WF_MIGRATION_PROC';
       IF PROCEDURECHECKER = 1 THEN
        BEGIN
         EXECUTE IMMEDIATE 'DROP PROCEDURE WF_MIGRATION_PROC';
         EXECUTE IMMEDIATE 'DROP TABLE ADS_WORKFLOW_ASGMNT_TRIGGER';
         EXECUTE IMMEDIATE  'DROP TABLE ADS_WORKFLOW_TRIGGER';
         EXECUTE IMMEDIATE  'DROP TABLE ADS_WORKFLOW_ACTION';
        END;
       END IF;
END;
/
DECLARE
   TABLECHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO TABLECHECKERFLAG FROM ALL_TABLES WHERE OWNER = sys_context( 'userenv', 'current_schema' ) AND TABLE_NAME = UPPER('F_CP_WF_DETAILS');
   IF TABLECHECKERFLAG = 1 THEN
    BEGIN
      EXECUTE IMMEDIATE 'DROP TABLE  F_CP_WF_DETAILS';
    END;
   END IF;
End;
/
DECLARE
   PROCEDURECHECKER INT;
BEGIN
       SELECT COUNT(*) INTO PROCEDURECHECKER FROM USER_PROCEDURES WHERE OBJECT_TYPE = 'PROCEDURE' AND OBJECT_NAME = 'SP_COPY_WORKFLOW';
       IF PROCEDURECHECKER = 1 THEN
       BEGIN
         EXECUTE IMMEDIATE 'DROP PROCEDURE SP_COPY_WORKFLOW';
        END;
       END IF;
END;
/
-- WORKFLOW MANAGER MIGRATION SCRIPT END ---
DECLARE
   TRIGGER_CHECK INT;
BEGIN
   SELECT COUNT(*) INTO TRIGGER_CHECK FROM all_triggers WHERE OWNER = sys_context('userenv', 'current_schema') AND trigger_name = UPPER('ADS_WF_STATUS_MIG_I_TRIG');
   IF TRIGGER_CHECK = 1 THEN
      EXECUTE IMMEDIATE 'DROP TRIGGER ADS_WF_STATUS_MIG_I_TRIG';
   END IF;
END;
/

DECLARE
   TRIGGER_CHECK INT;
BEGIN
   SELECT COUNT(*) INTO TRIGGER_CHECK FROM all_triggers WHERE OWNER = sys_context('userenv', 'current_schema') AND trigger_name = UPPER('ADS_WF_STATUS_MIG_U_TRIG');
   IF TRIGGER_CHECK = 1 THEN
      EXECUTE IMMEDIATE 'DROP TRIGGER ADS_WF_STATUS_MIG_U_TRIG';
   END IF;
End;
/

DECLARE
TABLECHECKERFLAG INT;
BEGIN
  SELECT COUNT(*)
  INTO TABLECHECKERFLAG  FROM ALL_TABLES  WHERE OWNER    = sys_context( 'userenv', 'current_schema' )  AND TABLE_NAME = UPPER('BUP_DETAILS');
    IF TABLECHECKERFLAG = 0 THEN
    EXECUTE IMMEDIATE 'CREATE TABLE BUP_DETAILS(
          ID INT NOT NULL,
          NAME VARCHAR2(255) NOT NULL,
		  URL VARCHAR2(4000) NOT NULL,
          DESCRIPTION VARCHAR2(4000) NULL)';
    END IF;
END;
/
DECLARE
SEQUENCECHECKERFLAG INT;
BEGIN
    SELECT COUNT(*)
 INTO SEQUENCECHECKERFLAG FROM ALL_SEQUENCES WHERE SEQUENCE_OWNER = sys_context('userenv', 'current_schema') AND SEQUENCE_NAME = UPPER('BUP_DETAILS_SEQ');
    IF SEQUENCECHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'CREATE SEQUENCE   "BUP_DETAILS_SEQ"  MINVALUE 1 MAXVALUE 999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE';
    END IF;
END;
/
DECLARE
TRIGGERCHECKERFLAG INT;
BEGIN
  SELECT COUNT(*)
  INTO TRIGGERCHECKERFLAG  FROM all_triggers  WHERE OWNER = sys_context('userenv', 'current_schema') AND trigger_name = UPPER('BUP_DETAILS_INSERT');
  IF TRIGGERCHECKERFLAG = 0 THEN
    EXECUTE IMMEDIATE 'CREATE OR REPLACE TRIGGER  "BUP_DETAILS_INSERT" BEFORE INSERT ON BUP_DETAILS FOR EACH ROW BEGIN SELECT BUP_DETAILS_SEQ.NEXTVAL INTO :new.ID FROM DUAL; END;';
    EXECUTE IMMEDIATE 'ALTER TRIGGER  "BUP_DETAILS_INSERT" ENABLE';
  END IF;
END;
/
DECLARE
TABLECHECKERFLAG INT;
BEGIN
    SELECT COUNT(*) INTO TABLECHECKERFLAG FROM ADS_KEY_VALUE_OBJECTS WHERE  OBJECT_TYPE = 'BUP_DETAILS';
    IF TABLECHECKERFLAG = 0 THEN
        EXECUTE IMMEDIATE 'INSERT INTO ADS_KEY_VALUE_OBJECTS (OBJECT_TYPE,OBJECT_TABLE,OBJECT_TABLE_COLUMN,OBJECT_PARENT_TYPE,OBJECT_PARENT_COLUMN_ID,MODULE_KEY,OBJECT_LEVEL) VALUES (''BUP_DETAILS'',''BUP_DETAILS'',''ID'','''','''',''com.ads.mm.permission.settgs.miscsettg.bupregistrations'',1)';
    END IF;
END;
/
DECLARE
   COLUMNCHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO COLUMNCHECKERFLAG FROM ALL_TAB_COLUMNS WHERE  OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME = UPPER('SYS_CON_ENVIRONMENTS') AND COLUMN_NAME=UPPER('SYSTEM_ENVIRONMENT_NAME') AND DATA_LENGTH=UPPER('50');
   IF COLUMNCHECKERFLAG = 1 THEN
        EXECUTE IMMEDIATE 'ALTER TABLE SYS_CON_ENVIRONMENTS MODIFY SYSTEM_ENVIRONMENT_NAME VARCHAR2(200)';
        EXECUTE IMMEDIATE 'ALTER TABLE SYS_CON_ENVIRONMENTS MODIFY PROD_ENVIRONMENT_NAME VARCHAR2(200)';
        EXECUTE IMMEDIATE 'ALTER TABLE SYSTEM_TABLE_METADATA MODIFY SYSTEM_ENV_NAME VARCHAR2(200)';
        EXECUTE IMMEDIATE 'ALTER TABLE SYSTEM_TABLE_COLUMNS_METADATA MODIFY SYSTEM_ENV_NAME VARCHAR2(200)';
        EXECUTE IMMEDIATE 'ALTER TABLE RM_PROMOTE_SYS_CON_ENVS MODIFY SYSTEM_ENVIRONMENT_NAME VARCHAR2(200)';
        EXECUTE IMMEDIATE 'ALTER TABLE RM_PROMOTE_SYS_CON_ENVS MODIFY PROMOTE_SYS_ENV_NAME VARCHAR2(200)';
   END IF;
END;
/
DECLARE
  VERSIONCHECKERFLAG INT;
BEGIN
	SELECT COUNT(*) INTO VERSIONCHECKERFLAG FROM ADS_MM_VERSION WHERE VALUE <= '9.0';
	IF VERSIONCHECKERFLAG = 1 THEN
            EXECUTE IMMEDIATE 'UPDATE ADS_WORKFLOW SET SYSTEMBASED = 0';
        END IF;
END;
/
DECLARE
TABLECHECKERFLAG INT;
BEGIN
  SELECT COUNT(*)  INTO TABLECHECKERFLAG  FROM ALL_TABLES  WHERE OWNER = sys_context( 'userenv', 'current_schema' )  AND TABLE_NAME = UPPER('SM_COLUMN_DATA_PROFILE');
    IF TABLECHECKERFLAG = 0 THEN
    EXECUTE IMMEDIATE 'CREATE TABLE SM_COLUMN_DATA_PROFILE(
          ID NUMBER NOT NULL,
          STCM_ID NUMBER NOT NULL,
          TOTAL_ROWS NUMBER NULL,
          UNIQUE_VALUES NUMBER NULL,
          NULL_VALUES NUMBER NULL,
          REPEATED_VALUES NUMBER NULL,
          MIN_VALUE VARCHAR2(4000) NULL,
          MAX_VALUE VARCHAR2(4000) NULL,
          MOST_FREQUENT_VALUE VARCHAR2(4000) NULL,
          LEAST_FREQUENT_VALUE VARCHAR2(4000) NULL,
          CONSTRAINT PK_SM_COL_DQ_ASS_ID PRIMARY KEY(ID),
          CONSTRAINT FK_SM_COL_DP_ASS_STCM_ID FOREIGN KEY(STCM_ID) REFERENCES SYSTEM_TABLE_COLUMNS_METADATA(STCM_ID) ON DELETE CASCADE)';
    END IF;
END;
/
DECLARE
SEQUENCECHECKERFLAG INT;
BEGIN
    SELECT COUNT(*) INTO SEQUENCECHECKERFLAG FROM ALL_SEQUENCES WHERE SEQUENCE_OWNER = sys_context('userenv', 'current_schema') AND SEQUENCE_NAME = UPPER('COL_DATA_PROFILE_SEQ');
    IF SEQUENCECHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'CREATE SEQUENCE   "COL_DATA_PROFILE_SEQ"  MINVALUE 1 MAXVALUE 999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE';
    END IF;
END;
/
DECLARE
TRIGGERCHECKERFLAG INT;
BEGIN
  SELECT COUNT(*)  INTO TRIGGERCHECKERFLAG  FROM all_triggers  WHERE OWNER = sys_context('userenv', 'current_schema') AND trigger_name = UPPER('COL_DATA_PROFILE_SEQ_INSERT');
  IF TRIGGERCHECKERFLAG = 0 THEN
    EXECUTE IMMEDIATE 'CREATE OR REPLACE TRIGGER  "COL_DATA_PROFILE_SEQ_INSERT" BEFORE INSERT ON SM_COLUMN_DATA_PROFILE FOR EACH ROW BEGIN SELECT COL_DATA_PROFILE_SEQ.NEXTVAL INTO :new.ID FROM DUAL; END;';
    EXECUTE IMMEDIATE 'ALTER TRIGGER  "COL_DATA_PROFILE_SEQ_INSERT" ENABLE';
  END IF;
END;
/
DECLARE
TABLECHECKERFLAG INT;
BEGIN
  SELECT COUNT(*)  INTO TABLECHECKERFLAG  FROM ALL_TABLES  WHERE OWNER = sys_context( 'userenv', 'current_schema' )  AND TABLE_NAME = UPPER('SM_COLUMN_DATA_PROFILE_PATTERN');
    IF TABLECHECKERFLAG = 0 THEN
    EXECUTE IMMEDIATE 'CREATE TABLE SM_COLUMN_DATA_PROFILE_PATTERN(
          ID NUMBER NOT NULL,
          STCM_ID NUMBER NOT NULL,
          OBJECT_TYPE NUMBER NULL,
          PATTERN VARCHAR2(4000) NULL,
          "COUNT" NUMBER NULL,
          "ORDER" NUMBER NULL,
          CONSTRAINT PK_SM_COL_DP_PTN_ID PRIMARY KEY(ID),
          CONSTRAINT FK_SM_COL_DP_PTN_STCM_ID FOREIGN KEY(STCM_ID) REFERENCES SYSTEM_TABLE_COLUMNS_METADATA(STCM_ID) ON DELETE CASCADE)';
    END IF;
END;
/
DECLARE
SEQUENCECHECKERFLAG INT;
BEGIN
    SELECT COUNT(*) INTO SEQUENCECHECKERFLAG FROM ALL_SEQUENCES WHERE SEQUENCE_OWNER = sys_context('userenv', 'current_schema') AND SEQUENCE_NAME = UPPER('COL_DATA_PROFILE_PATRN_SEQ');
    IF SEQUENCECHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'CREATE SEQUENCE   "COL_DATA_PROFILE_PATRN_SEQ"  MINVALUE 1 MAXVALUE 999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE';
    END IF;
END;
/
DECLARE
TRIGGERCHECKERFLAG INT;
BEGIN
  SELECT COUNT(*)  INTO TRIGGERCHECKERFLAG  FROM all_triggers  WHERE OWNER = sys_context('userenv', 'current_schema') AND trigger_name = UPPER('COL_DATA_PRF_PTN_SEQ_INSERT');
  IF TRIGGERCHECKERFLAG = 0 THEN
    EXECUTE IMMEDIATE 'CREATE OR REPLACE TRIGGER  "COL_DATA_PRF_PTN_SEQ_INSERT" BEFORE INSERT ON SM_COLUMN_DATA_PROFILE_PATTERN FOR EACH ROW BEGIN SELECT COL_DATA_PROFILE_PATRN_SEQ.NEXTVAL INTO :new.ID FROM DUAL; END;';
    EXECUTE IMMEDIATE 'ALTER TRIGGER  "COL_DATA_PRF_PTN_SEQ_INSERT" ENABLE';
  END IF;
END;
/
DECLARE
   COLUMNCHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO COLUMNCHECKERFLAG FROM ALL_TAB_COLUMNS WHERE  OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME = UPPER('SYSTEM_TABLE_COLUMNS_METADATA') AND COLUMN_NAME=UPPER('INCLUDE_IN_DATA_PROFILE');
   IF COLUMNCHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'ALTER TABLE SYSTEM_TABLE_COLUMNS_METADATA ADD INCLUDE_IN_DATA_PROFILE CHAR(1)  NULL';
      EXECUTE IMMEDIATE 'ALTER TABLE SYSTEM_TABLE_COLUMNS_METADATA ADD DATA_PROFILE_JOB_STATE VARCHAR2(10) NULL';
      EXECUTE IMMEDIATE 'ALTER TABLE SYSTEM_TABLE_COLUMNS_METADATA ADD DATA_PROFILE_JOB_FAIL_REASON VARCHAR2(4000) NULL';
      EXECUTE IMMEDIATE 'ALTER TABLE SYSTEM_TABLE_COLUMNS_METADATA ADD DATA_PROFILE_START_DATE TIMESTAMP (6) NULL';
      EXECUTE IMMEDIATE 'ALTER TABLE SYSTEM_TABLE_COLUMNS_METADATA ADD DATA_PROFILE_END_DATE TIMESTAMP (6) NULL';
   END IF;
END;
/
DECLARE
   DATACHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO DATACHECKERFLAG FROM APP_PREFERENCES WHERE PREFERENCE_NAME = 'DATA_PROFILE_EMAIL_SUBJECT';
   IF DATACHECKERFLAG = 0 THEN
    INSERT INTO APP_PREFERENCES( PREFERENCE_NAME, PREFERENCE_VALUE) VALUES('DATA_PROFILE_EMAIL_SUBJECT','Data Profile Assessment Job Details @jobname@/@systemname@/@envname@/@tablename@');
    INSERT INTO APP_PREFERENCES( PREFERENCE_NAME, PREFERENCE_VALUE) VALUES('DATA_PROFILE_EMAIL_BODY','Hi,<br><br><center> <h2> Data Profile Assessment Job Details</h2><br> </center> <b>System Name :</b> @systemname@<br> <b>Environment Name :</b> @envname@<br> <b>Table Name :</b> @tablename@<br><b>Job Owner :</b> @jobOwner@<br><b>Job Start Date Time :</b> @jobStartedDateTime@<br><b>Job Completion Date Time :</b> @jobExecutedDateTime@<br><b>Total Duration :</b> @jobExecutedDuration@<br><br>@datagrid@<BR><BR><I><font color =red>Note</font>: This is an auto generated email. Do not reply to this email.</I>');
    INSERT INTO APP_PREFERENCES(PREFERENCE_NAME,PREFERENCE_VALUE) VALUES ('SEND_EMAIL_ON_DATA_PROFILE','true');
    INSERT INTO APP_PREFERENCES(PREFERENCE_NAME,PREFERENCE_VALUE) VALUES ('DATA_PROFILE_MOST_FREQUENT_PATTERNS','15');
    INSERT INTO APP_PREFERENCES(PREFERENCE_NAME,PREFERENCE_VALUE) VALUES ('DATA_PROFILE_LEAST_FREQUENT_PATTERNS','15');
    INSERT INTO APP_PREFERENCES(PREFERENCE_NAME,PREFERENCE_VALUE) VALUES ('DATA_PROFILE_IS_CHARACTER_DATA','true');
   END IF;
END;
/
DECLARE
   COLUMNCHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO COLUMNCHECKERFLAG FROM ALL_TAB_COLUMNS WHERE  OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME = UPPER('SYSTEM_DEFINITION_DETAILS') AND COLUMN_NAME=UPPER('DATA_PROFILE_SCORE');
   IF COLUMNCHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'ALTER TABLE SYSTEM_DEFINITION_DETAILS ADD DATA_PROFILE_SCORE NUMBER NULL';
   END IF;
END;
/
DECLARE
   COLUMNCHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO COLUMNCHECKERFLAG FROM ALL_TAB_COLUMNS WHERE  OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME = UPPER('SYS_CON_ENVIRONMENTS') AND COLUMN_NAME=UPPER('DATA_PROFILE_SCORE');
   IF COLUMNCHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'ALTER TABLE SYS_CON_ENVIRONMENTS ADD DATA_PROFILE_SCORE NUMBER NULL';
   END IF;
END;
/
DECLARE
   COLUMNCHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO COLUMNCHECKERFLAG FROM ALL_TAB_COLUMNS WHERE  OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME = UPPER('SYSTEM_TABLE_METADATA') AND COLUMN_NAME=UPPER('DATA_PROFILE_SCORE');
   IF COLUMNCHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'ALTER TABLE SYSTEM_TABLE_METADATA ADD DATA_PROFILE_SCORE NUMBER NULL';
   END IF;
END;
/
DECLARE
   COLUMNCHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO COLUMNCHECKERFLAG FROM ALL_TAB_COLUMNS WHERE  OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME = UPPER('SYSTEM_TABLE_COLUMNS_METADATA') AND COLUMN_NAME=UPPER('DATA_PROFILE_SCORE');
   IF COLUMNCHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'ALTER TABLE SYSTEM_TABLE_COLUMNS_METADATA ADD DATA_PROFILE_SCORE NUMBER NULL';
   END IF;
END;
/
CREATE OR REPLACE FORCE VIEW  "ACTIVE_SYS_CON_ENVIRONMENTS" AS SELECT * FROM   SYS_CON_ENVIRONMENTS WHERE  STATUS = 'Active';
/
CREATE OR REPLACE FORCE VIEW "VALID_SYSTEM_TABLE_METADATA" AS
SELECT STM.* FROM SYSTEM_TABLE_METADATA STM JOIN ACTIVE_SYS_CON_ENVIRONMENTS SCS ON STM.SCE_ID = SCS.SCE_ID WHERE STM.VALID = 1 OR STM.VALID IS NULL
/
CREATE OR REPLACE FORCE VIEW "VALID_SYS_TBL_COL_METADATA" AS
SELECT STCM.* FROM SYSTEM_TABLE_COLUMNS_METADATA STCM JOIN ACTIVE_SYS_CON_ENVIRONMENTS SCS ON STCM.SCE_ID = SCS.SCE_ID WHERE STCM.VALID = 1 OR STCM.VALID IS NULL
/
DECLARE
   ROWCHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO ROWCHECKERFLAG FROM SM_CLASSIFICATION_SDI;
  IF ROWCHECKERFLAG = 0 THEN
   INSERT INTO SM_CLASSIFICATION_SDI(SDI_CLASS_NAME,SDI_CLASS_DESCRIPTION, CREATED_BY,CREATED_DATE,LAST_MODIFIED_BY,LAST_MODIFIED_DATE)
 (SELECT 'Confidential','Confidential', 'System',SYSDATE,'System',SYSDATE FROM DUAL
 UNION
 SELECT 'PII','Personally Identifiable Information', 'System',SYSDATE,'System',SYSDATE FROM DUAL
 UNION
 SELECT 'Public','Public', 'System',SYSDATE,'System',SYSDATE FROM DUAL
 UNION
 SELECT 'Restricted','Restricted', 'System',SYSDATE,'System',SYSDATE FROM DUAL
 UNION
 SELECT 'Secret','Secret', 'System',SYSDATE,'System',SYSDATE FROM DUAL
 UNION
 SELECT 'SPI','Sensitive Personal Information', 'System',SYSDATE,'System',SYSDATE FROM DUAL);
 END IF;
END;
/
DECLARE
TABLECHECKERFLAG INT;
BEGIN
    SELECT COUNT(*) INTO TABLECHECKERFLAG FROM MT_DEFINITION WHERE  MTD_NAME = 'SM_DQ_SCORE_TYPE';
    IF TABLECHECKERFLAG = 0 THEN
        EXECUTE IMMEDIATE 'INSERT INTO MT_DEFINITION (MTD_NAME,MTD_DESC,ADS_MODULE)
        VALUES (''SM_DQ_SCORE_TYPE'',''SM_DQ_SCORE_TYPE'',''SM'')';
    END IF;
END;
/
DECLARE
   TABLECHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO TABLECHECKERFLAG FROM ALL_TABLES WHERE OWNER = sys_context( 'userenv', 'current_schema' ) AND TABLE_NAME = UPPER('RET_TABLE');
   IF TABLECHECKERFLAG = 0 THEN
       EXECUTE IMMEDIATE 'CREATE GLOBAL TEMPORARY TABLE RET_TABLE (OBJECTID VARCHAR(100)) ON COMMIT PRESERVE ROWS';
   END IF;
END;
/
DECLARE
   TABLECHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO TABLECHECKERFLAG FROM ALL_TABLES WHERE OWNER = sys_context( 'userenv', 'current_schema' ) AND TABLE_NAME = UPPER('TAGGED_KV_IDS');
   IF TABLECHECKERFLAG = 0 THEN
       EXECUTE IMMEDIATE 'CREATE GLOBAL TEMPORARY TABLE TAGGED_KV_IDS (TAGGED_KV_ID VARCHAR(100)) ON COMMIT PRESERVE ROWS';
   END IF;
END;
/
DECLARE
   ROWCHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO ROWCHECKERFLAG FROM SYS_CON_ENVIRONMENTS WHERE DATABASE_DRIVER='org.gjt.mm.mysql.Driver';
   IF ROWCHECKERFLAG > 0 THEN
       EXECUTE IMMEDIATE 'UPDATE SYS_CON_ENVIRONMENTS SET DATABASE_DRIVER=''com.mysql.jdbc.Driver'' WHERE DATABASE_DRIVER=''org.gjt.mm.mysql.Driver''';
   END IF;
END;
/
DECLARE
   TABLECHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO TABLECHECKERFLAG FROM "APP_PREFERENCES" WHERE PREFERENCE_NAME ='SETTINGS_ENFORCE_LOGIN_FOR_DATA_PREVIEW';
   IF TABLECHECKERFLAG = 0 THEN
    INSERT INTO APP_PREFERENCES( PREFERENCE_NAME, PREFERENCE_VALUE) VALUES('SETTINGS_ENFORCE_LOGIN_FOR_DATA_PREVIEW','true');
    END IF;
END;
/
DECLARE
   TABLECHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO TABLECHECKERFLAG FROM ALL_TABLES WHERE OWNER = sys_context( 'userenv', 'current_schema' ) AND TABLE_NAME = UPPER('BUP_VISIBILITY');
   IF TABLECHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'CREATE TABLE BUP_VISIBILITY(OBJECT_ID NUMBER NOT NULL, OBJECT_TYPE_ID  NUMBER NOT NULL, ENABLED CHAR(1) default 1, CONSTRAINT "BUP_VISIBILITY_PK" PRIMARY KEY ("OBJECT_ID", "OBJECT_TYPE_ID") ENABLE)';
   END IF;
END;
/
DECLARE
TABLECHECKERFLAG1 INT;
TABLECHECKERFLAG2 INT;
TABLECHECKERFLAG3 INT;
TEMP_OBJECT_TYPE_ID INT;
TEMP_OBJECT_ID INT;
BEGIN
    SELECT COUNT(*) INTO TABLECHECKERFLAG1  FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE='SM_DATABASE_OPTIONS';
    SELECT COUNT(*) INTO TABLECHECKERFLAG2 FROM MT_DEFINITION WHERE  MTD_NAME = 'SM_DATABASE_OPTIONS' AND ADS_MODULE = 'SM';
    SELECT OBJECT_TYPE_ID INTO TEMP_OBJECT_TYPE_ID  FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE='SM_DATABASE_OPTIONS';
    SELECT MTD_ID INTO TEMP_OBJECT_ID FROM MT_DEFINITION WHERE  MTD_NAME = 'SM_DATABASE_OPTIONS' AND ADS_MODULE = 'SM';
    SELECT COUNT(*) INTO TABLECHECKERFLAG3 FROM ADS_KEY_VALUE WHERE OBJECT_TYPE_ID  = TEMP_OBJECT_TYPE_ID AND OBJECT_ID = TEMP_OBJECT_ID AND KEY_NAME = 'IncludeSynonyms';
    IF TABLECHECKERFLAG1 = 1 AND TABLECHECKERFLAG2 = 1 AND TABLECHECKERFLAG3 = 0 THEN
        INSERT INTO ADS_KEY_VALUE(KEY_NAME,KEY_VALUE,OBJECT_TYPE_ID,OBJECT_ID,DATATYPE_ID,KV_TYPE,LABEL_WIDTH,CONTROL_WIDTH,KV_ORDER,COMPONENT,DEFAULTVALUE,ISSYSTEMBASED)      VALUES('IncludeSynonyms','Include Synonyms (Only Oracle)',TEMP_OBJECT_TYPE_ID,TEMP_OBJECT_ID,'1','Check Box','','','5','','false',0);
    END IF;
END;
/
DECLARE
TABLECHECKERFLAG INT;
BEGIN
SELECT COUNT(*) INTO TABLECHECKERFLAG FROM ALL_TABLES WHERE OWNER = sys_context( 'userenv', 'current_schema' ) AND TABLE_NAME = UPPER('BUP_MODULES');
    IF TABLECHECKERFLAG=0 THEN
    EXECUTE IMMEDIATE 'CREATE TABLE BUP_MODULES(
          MODULE_ID INT NOT NULL,
          MODULE_NAME VARCHAR(255) NOT NULL,
          MODULE_KEY VARCHAR(255) NOT NULL UNIQUE,
          PARENT_KEY VARCHAR2(255) NULL,
          MODULE_ORDER   INT NOT NULL,
          MODULE_FORWARD VARCHAR(50) NOT NULL UNIQUE,
          MODULE_VISIBILITY NUMBER(3) NOT NULL,
          CONSTRAINT PK_BUP_MODULE_MODULE_ID PRIMARY KEY(MODULE_ID))';
    END IF;
END;
/
DECLARE
COUNTCHEKERFLAG INT;
BEGIN
SELECT COUNT(*) INTO COUNTCHEKERFLAG FROM BUP_MODULES;
   IF COUNTCHEKERFLAG = 0 THEN
        INSERT INTO BUP_MODULES(MODULE_ID, MODULE_NAME, MODULE_KEY, PARENT_KEY, MODULE_ORDER, MODULE_FORWARD,MODULE_VISIBILITY)
            (SELECT 1, 'Dashboard', 'com.erwin.bup.dashboard', null, 1 , 'dashboard',1 FROM DUAL UNION
            SELECT 2, 'Datacatalog', 'com.erwin.bup.datacatalougue', null,  2 , 'datacatalog',1 FROM DUAL UNION
            SELECT 3, 'Metadata', 'com.erwin.bup.metadata', null, 3 ,'metadata',1 FROM DUAL UNION
            SELECT 4, 'Mappings', 'com.erwin.bup.mappings',  null, 4 , 'mappings',1 FROM DUAL UNION
            SELECT 5, 'Data Governance', 'com.erwin.bup.datagovernance', null,  5 , 'glossary',1 FROM DUAL UNION
            SELECT 6, 'Business Terms', 'com.erwin.bup.datagovernance.businessterms', 'com.erwin.bup.datagovernance', 6 , 'businessterms',1
            FROM DUAL UNION
            SELECT 7, 'Business Policies', 'com.erwin.bup.datagovernance.businesspolicies', 'com.erwin.bup.datagovernance', 7 , 'businesspolicies',1
            FROM DUAL UNION
            SELECT 8, 'Business Rules', 'com.erwin.bup.datagovernance.businessrules', 'com.erwin.bup.datagovernance', 8 , 'businessrules',1
            FROM DUAL UNION
            SELECT 9, 'Reference Data', 'com.erwin.bup.referencedata', null, 9 , 'referencedata',1 FROM DUAL UNION
            SELECT 10, 'Releases', 'com.erwin.bup.releases',  null, 10 , 'releases',1 FROM DUAL UNION
            SELECT 11, 'Requirements', 'com.erwin.bup.requirements', null, 11 , 'requirements',1 FROM DUAL UNION
            SELECT 12, 'Reports', 'com.erwin.bup.reports', null, 12, 'reports',1 FROM DUAL );
    END IF;
END;
/
DECLARE
   COLUMNCHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO COLUMNCHECKERFLAG FROM ALL_TAB_COLUMNS WHERE  OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME = UPPER('SYS_CON_ENVIRONMENTS') AND COLUMN_NAME=UPPER('DRAFT');
   IF COLUMNCHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'ALTER TABLE SYS_CON_ENVIRONMENTS ADD DRAFT NUMBER(1) NULL';
      EXECUTE IMMEDIATE 'UPDATE SYS_CON_ENVIRONMENTS SET DRAFT = 0';
   END IF;
END;
/
CREATE OR REPLACE FORCE VIEW  "ACTIVE_SYS_CON_ENVIRONMENTS" AS SELECT * FROM   SYS_CON_ENVIRONMENTS WHERE  STATUS = 'Active';
/
DECLARE
TABLECHECKERFLAG1 INT;
TABLECHECKERFLAG2 INT;
TABLECHECKERFLAG3 INT;
TEMP_OBJECT_TYPE_ID INT;
TEMP_OBJECT_ID INT;
BEGIN
    SELECT COUNT(*) INTO TABLECHECKERFLAG1  FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE='SM_DATABASE_OPTIONS';
    SELECT COUNT(*) INTO TABLECHECKERFLAG2 FROM MT_DEFINITION WHERE  MTD_NAME = 'SM_DATABASE_OPTIONS' AND ADS_MODULE = 'SM';
    SELECT OBJECT_TYPE_ID INTO TEMP_OBJECT_TYPE_ID  FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE='SM_DATABASE_OPTIONS';
    SELECT MTD_ID INTO TEMP_OBJECT_ID FROM MT_DEFINITION WHERE  MTD_NAME = 'SM_DATABASE_OPTIONS' AND ADS_MODULE = 'SM';
    SELECT COUNT(*) INTO TABLECHECKERFLAG3 FROM ADS_KEY_VALUE WHERE OBJECT_TYPE_ID  = TEMP_OBJECT_TYPE_ID AND OBJECT_ID = TEMP_OBJECT_ID AND KEY_NAME = 'scanNestedRefSynonyms';
    IF TABLECHECKERFLAG1 = 1 AND TABLECHECKERFLAG2 = 1 AND TABLECHECKERFLAG3 = 0 THEN
        INSERT INTO ADS_KEY_VALUE(KEY_NAME,KEY_VALUE,OBJECT_TYPE_ID,OBJECT_ID,DATATYPE_ID,KV_TYPE,LABEL_WIDTH,CONTROL_WIDTH,KV_ORDER,COMPONENT,DEFAULTVALUE,ISSYSTEMBASED)      VALUES('scanNestedRefSynonyms','Scan Nested Synonyms',TEMP_OBJECT_TYPE_ID,TEMP_OBJECT_ID,'1','Check Box','','','6','','false',0);
    END IF;
END;
/
DECLARE
   TABLECHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO TABLECHECKERFLAG FROM "APP_PREFERENCES" WHERE PREFERENCE_NAME ='EMAIL_USE_AUTHENTICATION';
   IF TABLECHECKERFLAG = 0 THEN
    INSERT INTO APP_PREFERENCES( PREFERENCE_NAME, PREFERENCE_VALUE) VALUES('EMAIL_USE_AUTHENTICATION','0');
    END IF;
END;
/
DECLARE
TABLECHECKERFLAG INT;
TEMP_OBJECT_TYPE_ID INT;
TEMP_OBJECT_ID INT;
BEGIN
    SELECT OBJECT_TYPE_ID INTO TEMP_OBJECT_TYPE_ID  FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE='MT_DEFINITION';
    SELECT MTD_ID INTO TEMP_OBJECT_ID FROM MT_DEFINITION WHERE  MTD_NAME = 'SM_DQ_SCORE_TYPE' AND ADS_MODULE = 'SM';
    SELECT COUNT(*) INTO TABLECHECKERFLAG FROM ADS_KEY_VALUE WHERE  KEY_NAME = 'Very High (9-10)' and OBJECT_TYPE_ID = TEMP_OBJECT_TYPE_ID;
    IF TABLECHECKERFLAG = 0 THEN
        INSERT INTO ADS_KEY_VALUE(KEY_NAME,KEY_VALUE,OBJECT_TYPE_ID,OBJECT_ID,DATATYPE_ID,KV_ORDER,ISPUBLISHED)
            VALUES('Very High (9-10)','Very High (9-10)',TEMP_OBJECT_TYPE_ID,TEMP_OBJECT_ID,'1','1','1');
        INSERT INTO ADS_KEY_VALUE(KEY_NAME,KEY_VALUE,OBJECT_TYPE_ID,OBJECT_ID,DATATYPE_ID,KV_ORDER,ISPUBLISHED)
            VALUES('High (7-8)','High (7-8)',TEMP_OBJECT_TYPE_ID,TEMP_OBJECT_ID,'1','2','1');
        INSERT INTO ADS_KEY_VALUE(KEY_NAME,KEY_VALUE,OBJECT_TYPE_ID,OBJECT_ID,DATATYPE_ID,KV_ORDER,ISPUBLISHED)
            VALUES('Medium (5-6)','Medium (5-6)',TEMP_OBJECT_TYPE_ID,TEMP_OBJECT_ID,'1','3','1');
        INSERT INTO ADS_KEY_VALUE(KEY_NAME,KEY_VALUE,OBJECT_TYPE_ID,OBJECT_ID,DATATYPE_ID,KV_ORDER,ISPUBLISHED)
            VALUES('Low (2-4)','Low (2-4)',TEMP_OBJECT_TYPE_ID,TEMP_OBJECT_ID,'1','4','1');
        INSERT INTO ADS_KEY_VALUE(KEY_NAME,KEY_VALUE,OBJECT_TYPE_ID,OBJECT_ID,DATATYPE_ID,KV_ORDER,ISPUBLISHED)
            VALUES('Very Low (0-2)','Very Low (0-2)',TEMP_OBJECT_TYPE_ID,TEMP_OBJECT_ID,'1','5','1');
    END IF;
END;
/
DECLARE
   DATACHECKERFLAG INT;
BEGIN
SELECT COUNT(*) INTO DATACHECKERFLAG FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE = 'BGM_TERM_CATALOGS' AND OBJECT_TITLE ='Term Catalogs';
	IF DATACHECKERFLAG = 1 THEN
        EXECUTE IMMEDIATE 'UPDATE ADS_KEY_VALUE_OBJECTS SET OBJECT_TITLE = ''Business Terms'' WHERE OBJECT_TYPE = ''BGM_TERM_CATALOGS'' AND OBJECT_TITLE =''Term Catalogs''';
   END IF;
END;
/
DECLARE
   DATACHECKERFLAG INT;
BEGIN
SELECT COUNT(*) INTO DATACHECKERFLAG FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE = 'BGM_TERM_CATALOG' AND OBJECT_TITLE ='Category';
IF DATACHECKERFLAG = 1 THEN
	EXECUTE IMMEDIATE 'UPDATE ADS_KEY_VALUE_OBJECTS SET OBJECT_TITLE = ''Catalog'' WHERE OBJECT_TYPE = ''BGM_CATEGORY''';
	EXECUTE IMMEDIATE 'UPDATE ADS_KEY_VALUE_OBJECTS SET OBJECT_TITLE = ''Catalog'' WHERE OBJECT_TYPE = ''BGM_TERM_CATALOG''';
	EXECUTE IMMEDIATE 'UPDATE ADS_KEY_VALUE_OBJECTS SET OBJECT_TITLE = ''Catalog'' WHERE OBJECT_TYPE = ''BGM_POLICY_CATALOG''';
	EXECUTE IMMEDIATE 'UPDATE ADS_KEY_VALUE_OBJECTS SET OBJECT_TITLE = ''Catalog'' WHERE OBJECT_TYPE = ''BGM_RULE_CATALOG''';
   END IF;
END;
/

DECLARE
   TABLECHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO TABLECHECKERFLAG FROM ALL_OBJECTS WHERE OWNER = sys_context('userenv', 'current_schema') AND OBJECT_TYPE = 'PROCEDURE' AND OBJECT_NAME = UPPER('PROC_DELETE_KEY_VALUES');
   IF TABLECHECKERFLAG = 1 THEN
      EXECUTE IMMEDIATE 'DROP PROCEDURE PROC_DELETE_KEY_VALUES';
   END IF;
END;
/

CREATE OR REPLACE
PROCEDURE PROC_DELETE_KEY_VALUES(
 ID IN VARCHAR2,
 ID_TYPE IN VARCHAR2)
IS
BEGIN
DELETE FROM AMM_MASTER_CONFIGURATION WHERE OBJECT_ID IN (SELECT T.KV_ID FROM ADS_KEY_VALUE T START WITH T.OBJECT_ID IN (SELECT COLUMN_VALUE AS DATA FROM   TABLE( SPLIT_STRING(ID))) AND T.OBJECT_TYPE_ID IN ( SELECT COLUMN_VALUE AS DATA FROM   TABLE( SPLIT_STRING(ID_TYPE))) CONNECT BY NOCYCLE PRIOR T.KV_ID = OBJECT_ID AND T.OBJECT_TYPE_ID = (SELECT OBJECT_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE = 'ADS_KEY_VALUE'));

DELETE FROM ADS_KEY_VALUE WHERE KV_ID IN (SELECT T.KV_ID FROM ADS_KEY_VALUE T START WITH T.OBJECT_ID IN (SELECT COLUMN_VALUE AS DATA FROM   TABLE( SPLIT_STRING(ID))) AND T.OBJECT_TYPE_ID IN ( SELECT COLUMN_VALUE AS DATA FROM   TABLE( SPLIT_STRING(ID_TYPE))) CONNECT BY NOCYCLE PRIOR T.KV_ID = OBJECT_ID AND T.OBJECT_TYPE_ID = (SELECT OBJECT_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE = 'ADS_KEY_VALUE'));
END;
/
DECLARE
TABLECHECKERFLAG INT;
BEGIN
    SELECT COUNT(*) INTO TABLECHECKERFLAG FROM ADS_KEY_VALUE_OBJECTS WHERE  OBJECT_TYPE = 'BGM_CUSTOM_TYPES';
    IF TABLECHECKERFLAG = 0 THEN
        EXECUTE IMMEDIATE 'INSERT INTO ADS_KEY_VALUE_OBJECTS (OBJECT_TYPE,OBJECT_TABLE,OBJECT_TABLE_COLUMN,OBJECT_PARENT_TYPE,OBJECT_PARENT_COLUMN_ID,MODULE_KEY,OBJECT_LEVEL) VALUES (''BGM_CUSTOM_TYPES'',''BG_CUSTOM_TYPES'',''ID'','''','''',''com.ads.mm.permission.bgm'',1)';
    END IF;
END;
/

DECLARE
   TABLECHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO TABLECHECKERFLAG FROM ALL_OBJECTS WHERE OWNER = sys_context('userenv', 'current_schema') AND OBJECT_TYPE = 'FUNCTION' AND OBJECT_NAME = UPPER('FN_RESOLVE_RDM_KV_VALUE');
   IF TABLECHECKERFLAG = 1 THEN
      EXECUTE IMMEDIATE 'DROP FUNCTION FN_RESOLVE_RDM_KV_VALUE';
   END IF;
END;
/

CREATE OR REPLACE
FUNCTION FN_RESOLVE_RDM_KV_VALUE(
    F_VALUE      IN VARCHAR2,
    F_DELIMITER  IN varchar2)
  RETURN VARCHAR2
AS
  F_RESOLVED_VALUE 	   VARCHAR2(4000) := ' ';
BEGIN

  SELECT
        rtrim(extract(xmlagg(xmlelement(e, rdm_ref_tab_col_value || f_delimiter)), '/E/text()').getclobval(), f_delimiter)
    INTO f_resolved_value
    FROM
        ( SELECT rcv.rdm_ref_tab_col_value FROM rdm_ref_tab_col_values rcv WHERE rcv.rdm_ref_tab_col_value_id IN
                ( SELECT column_value FROM TABLE ( split_string(f_value, f_delimiter) ) where FN_ISINT(column_value) = column_value )
        );
  RETURN
  CASE
  WHEN F_RESOLVED_VALUE IS NOT NULL THEN
    F_RESOLVED_VALUE
  ELSE
    ' '
  END;
END FN_RESOLVE_RDM_KV_VALUE;
/

DECLARE
   TABLECHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO TABLECHECKERFLAG FROM ALL_OBJECTS WHERE OWNER = sys_context('userenv', 'current_schema') AND OBJECT_TYPE = 'FUNCTION' AND OBJECT_NAME = UPPER('FN_RESOLVE_SUB_KV_VALUE');
   IF TABLECHECKERFLAG = 1 THEN
      EXECUTE IMMEDIATE 'DROP FUNCTION FN_RESOLVE_SUB_KV_VALUE';
   END IF;
END;
/

CREATE OR REPLACE
FUNCTION FN_RESOLVE_SUB_KV_VALUE(
    F_VALUE      IN VARCHAR2,
    F_DELIMITER  IN varchar2,
	F_PARENT_ID	 IN VARCHAR2,
	F_PARENT_OBJECT_TYPE_ID	IN	NUMBER)
  RETURN VARCHAR2
AS
  F_RESOLVED_VALUE 	   VARCHAR2(4000) := ' ';
BEGIN

  SELECT
        rtrim(extract(xmlagg(xmlelement(e, KEY_NAME || f_delimiter)), '/E/text()').getclobval(), f_delimiter)
    INTO f_resolved_value
    FROM
        (
            SELECT SKV.KEY_NAME FROM ADS_KEY_VALUE SKV WHERE SKV.KEY_VALUE IN ( SELECT column_value FROM TABLE ( split_string(f_value, f_delimiter) ) )
                AND SKV.OBJECT_ID = F_PARENT_ID AND SKV.OBJECT_TYPE_ID = F_PARENT_OBJECT_TYPE_ID
        );
  RETURN
  CASE
  WHEN F_RESOLVED_VALUE IS NOT NULL THEN
    F_RESOLVED_VALUE
  ELSE
    ' '
  END;
END FN_RESOLVE_SUB_KV_VALUE;
/
DECLARE
   COLUMNCHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO COLUMNCHECKERFLAG FROM ALL_TAB_COLUMNS WHERE  OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME = UPPER('BG_POLICIES') AND COLUMN_NAME=UPPER('PUBLISH');
   IF COLUMNCHECKERFLAG = 0 THEN
        EXECUTE IMMEDIATE 'ALTER TABLE BG_POLICIES ADD PUBLISH varchar(1) DEFAULT ''N''  NOT NULL';
        EXECUTE IMMEDIATE 'UPDATE BG_POLICIES SET PUBLISH = ''N''';
        EXECUTE IMMEDIATE 'ALTER TABLE BG_BUSINESS_RULES ADD PUBLISH varchar(1) DEFAULT ''N'' NOT NULL';
        EXECUTE IMMEDIATE 'UPDATE BG_BUSINESS_RULES SET PUBLISH = ''N''';
        EXECUTE IMMEDIATE 'ALTER TABLE BG_CUSTOM_OBJECTS ADD PUBLISH varchar(1) DEFAULT ''N'' NOT NULL';
        EXECUTE IMMEDIATE 'UPDATE BG_CUSTOM_OBJECTS SET PUBLISH = ''N''';
   END IF;
END;

/
DECLARE
TABLECHECKERFLAG1 INT;
TABLECHECKERFLAG2 INT;
TABLECHECKERFLAG3 INT;
TEMP_OBJECT_TYPE_ID INT;
TEMP_OBJECT_ID INT;
BEGIN
    SELECT COUNT(*) INTO TABLECHECKERFLAG1  FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE='SM_DATABASE_OPTIONS';
    SELECT COUNT(*) INTO TABLECHECKERFLAG2 FROM MT_DEFINITION WHERE  MTD_NAME = 'SM_DATABASE_OPTIONS' AND ADS_MODULE = 'SM';
    SELECT OBJECT_TYPE_ID INTO TEMP_OBJECT_TYPE_ID  FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE='SM_DATABASE_OPTIONS';
    SELECT MTD_ID INTO TEMP_OBJECT_ID FROM MT_DEFINITION WHERE  MTD_NAME = 'SM_DATABASE_OPTIONS' AND ADS_MODULE = 'SM';
    SELECT COUNT(*) INTO TABLECHECKERFLAG3 FROM ADS_KEY_VALUE WHERE OBJECT_TYPE_ID  = TEMP_OBJECT_TYPE_ID AND OBJECT_ID = TEMP_OBJECT_ID AND KEY_NAME = 'QueryBatchLimit';
    IF TABLECHECKERFLAG1 = 1 AND TABLECHECKERFLAG2 = 1 AND TABLECHECKERFLAG3 = 0 THEN
        INSERT INTO ADS_KEY_VALUE(KEY_NAME,KEY_VALUE,OBJECT_TYPE_ID,OBJECT_ID,DATATYPE_ID,KV_TYPE,LABEL_WIDTH,CONTROL_WIDTH,KV_ORDER,COMPONENT,DEFAULTVALUE,ISSYSTEMBASED)      VALUES('QueryBatchLimit','Query Batch Limit',TEMP_OBJECT_TYPE_ID,TEMP_OBJECT_ID,'1','Number','','','6','',999,0);
    END IF;
END;
/

DECLARE
   TABLECHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO TABLECHECKERFLAG FROM ALL_OBJECTS WHERE OWNER = sys_context('userenv', 'current_schema') AND OBJECT_TYPE = 'PROCEDURE' AND OBJECT_NAME = UPPER('PRO_UPDATE_DQSCORE');
   IF TABLECHECKERFLAG = 1 THEN
      EXECUTE IMMEDIATE 'DROP PROCEDURE PRO_UPDATE_DQSCORE';
   END IF;
END;
/

create or replace
PROCEDURE PRO_UPDATE_DQSCORE(
  objectId    IN VARCHAR2,
  dataProfileScoreId IN VARCHAR2,
  allTables IN VARCHAR2,
  allCols IN VARCHAR2,
  objectLevel IN VARCHAR2
 )
IS
BEGIN
  CASE WHEN objectLevel='SM_ENVIRONMENT' THEN
    UPDATE SYS_CON_ENVIRONMENTS SET DATA_PROFILE_SCORE = dataProfileScoreId WHERE SCE_ID = objectId;
    CASE WHEN allTables='true' and allCols='true' THEN
    UPDATE SYSTEM_TABLE_METADATA SET DATA_PROFILE_SCORE = dataProfileScoreId WHERE SCE_ID = objectId;
    UPDATE SYSTEM_TABLE_COLUMNS_METADATA SET DATA_PROFILE_SCORE = dataProfileScoreId WHERE SCE_ID = objectId;
    WHEN allTables='true' THEN
    UPDATE SYSTEM_TABLE_METADATA SET DATA_PROFILE_SCORE = dataProfileScoreId WHERE SCE_ID = objectId;
    WHEN allCols='true' THEN
    UPDATE SYSTEM_TABLE_COLUMNS_METADATA SET DATA_PROFILE_SCORE = dataProfileScoreId WHERE SCE_ID = objectId;
    END CASE;

  WHEN objectLevel='SM_TABLE' THEN
    UPDATE SYSTEM_TABLE_METADATA SET DATA_PROFILE_SCORE = dataProfileScoreId WHERE STM_ID= objectId;
    UPDATE SYSTEM_TABLE_COLUMNS_METADATA SET DATA_PROFILE_SCORE = dataProfileScoreId WHERE STM_ID = objectId;

  END CASE;
END PRO_UPDATE_DQSCORE;
/
DECLARE
TABLECHECKERFLAG INT;
BEGIN
SELECT COUNT(*) INTO TABLECHECKERFLAG FROM ALL_TABLES WHERE OWNER = sys_context( 'userenv', 'current_schema' ) AND TABLE_NAME = UPPER('RELATIONSHIP_MASTER');
    IF TABLECHECKERFLAG = 0 THEN
    EXECUTE IMMEDIATE 'CREATE TABLE RELATIONSHIP_MASTER(
	   RM_ID NUMBER NOT NULL ENABLE,
		FROM_OBJECT_TYPE_ID NUMBER NOT NULL,
		TO_OBJECT_TYPE_ID NUMBER NOT NULL,
		DEFINED_BY CHAR(1) NOT NULL,
		DESCRIPTION VARCHAR2(4000) NULL,
		CONSTRAINT UK_REL_MSTR_OBJ_IDS UNIQUE(FROM_OBJECT_TYPE_ID,TO_OBJECT_TYPE_ID,DEFINED_BY),
		CONSTRAINT FK_RM_FROM_OBJECT_TYPE_ID FOREIGN KEY(FROM_OBJECT_TYPE_ID) REFERENCES ADS_KEY_VALUE_OBJECTS(OBJECT_TYPE_ID),
		CONSTRAINT FK_RM_TO_OBJECT_TYPE_ID FOREIGN KEY(TO_OBJECT_TYPE_ID) REFERENCES ADS_KEY_VALUE_OBJECTS(OBJECT_TYPE_ID),
		CONSTRAINT PK_DIS_RM_ID PRIMARY KEY(RM_ID))';
      END IF;
END;
/
DECLARE
SEQUENCECHECKERFLAG INT;
BEGIN
    SELECT COUNT(*) INTO SEQUENCECHECKERFLAG FROM ALL_SEQUENCES WHERE SEQUENCE_OWNER = sys_context('userenv', 'current_schema') AND SEQUENCE_NAME = UPPER('RELATIONSHIP_MASTER_SEQ');
    IF SEQUENCECHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'CREATE SEQUENCE   "RELATIONSHIP_MASTER_SEQ"  MINVALUE 1 MAXVALUE 999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE';
    END IF;
END;
/
DECLARE
OBJECTTYPECHECKERFLAG INT;
BEGIN
        SELECT COUNT(*) INTO OBJECTTYPECHECKERFLAG FROM ADS_KEY_VALUE_OBJECTS WHERE  OBJECT_TYPE = 'RELATIONSHIP_MASTER';
        IF OBJECTTYPECHECKERFLAG = 0 THEN
                EXECUTE IMMEDIATE 'INSERT INTO ADS_KEY_VALUE_OBJECTS (OBJECT_TYPE,OBJECT_TABLE,OBJECT_TABLE_COLUMN,OBJECT_PARENT_TYPE,OBJECT_PARENT_COLUMN_ID, MODULE_KEY,OBJECT_LEVEL,SYSTEM_BASED) VALUES (''RELATIONSHIP_MASTER'',''RELATIONSHIP_MASTER'',''RM_ID'','''','''',''com.ads.mm.permission.generic.relationship'',0,1)';
                EXECUTE IMMEDIATE 'INSERT INTO ADS_KEY_VALUE_OBJECTS (OBJECT_TYPE,OBJECT_TABLE,OBJECT_TABLE_COLUMN,OBJECT_PARENT_TYPE,OBJECT_PARENT_COLUMN_ID, MODULE_KEY,OBJECT_LEVEL,SYSTEM_BASED) VALUES (''RELATIONSHIP_DETAILS'',''RELATIONSHIP_DETAILS'',''RD_ID'',''RELATIONSHIP_MASTER'',''RM_ID'',''com.ads.mm.permission.generic.relationship'',1,1)';
        END IF;
END;
/
DECLARE
TRIGGERCHECKERFLAG INT;
RELATIONSHIP_MASTER_ID INT; HISTORYDESC_ID INT; HD_FROM_OBJECT_TYPE_ID INT; HD_TO_OBJECT_TYPE_ID INT;
BEGIN
  SELECT COUNT(*)  INTO TRIGGERCHECKERFLAG  FROM all_triggers  WHERE OWNER = sys_context('userenv', 'current_schema') AND trigger_name = UPPER('RELATIONSHIP_MASTER_SEQ_INSERT');
  IF TRIGGERCHECKERFLAG = 0 THEN
    EXECUTE IMMEDIATE 'CREATE OR REPLACE TRIGGER  RELATIONSHIP_MASTER_SEQ_INSERT BEFORE INSERT ON RELATIONSHIP_MASTER FOR EACH ROW BEGIN SELECT RELATIONSHIP_MASTER_SEQ.NEXTVAL INTO :new.RM_ID FROM DUAL; END;';
    EXECUTE IMMEDIATE 'ALTER TRIGGER  RELATIONSHIP_MASTER_SEQ_INSERT ENABLE';

    SELECT OBJECT_TYPE_ID INTO RELATIONSHIP_MASTER_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE = 'RELATIONSHIP_MASTER';
-- SET 1
    SELECT OBJECT_TYPE_ID INTO HD_FROM_OBJECT_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE='BGM_TERM';
    SELECT OBJECT_TYPE_ID INTO HD_TO_OBJECT_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE='BGM_TERM';
    INSERT INTO RELATIONSHIP_MASTER (FROM_OBJECT_TYPE_ID,TO_OBJECT_TYPE_ID,DEFINED_BY,DESCRIPTION) SELECT HD_FROM_OBJECT_TYPE_ID AS FROM_OBJECT_TYPE_ID, HD_TO_OBJECT_TYPE_ID AS TO_OBJECT_TYPE_ID,'U','' FROM DUAL;
    SELECT RM_ID INTO HISTORYDESC_ID FROM RELATIONSHIP_MASTER WHERE FROM_OBJECT_TYPE_ID = HD_FROM_OBJECT_TYPE_ID AND TO_OBJECT_TYPE_ID = HD_TO_OBJECT_TYPE_ID AND DEFINED_BY = 'U';
    INSERT INTO RM_HISTORY
           (HISTORYTYPEID ,HISTORYDESC ,OBJECTID ,OBJECTTYPEID ,HISTORYDATESTAMP ,USER_ID)
            VALUES
           (
            1
           , '{"id": '  ||  HISTORYDESC_ID  || ', "fromObjectTypeId": '  ||  HD_FROM_OBJECT_TYPE_ID  || ', "toObjectTypeId": "'  ||  HD_TO_OBJECT_TYPE_ID  || '", "fromObjectTypeTitle": "'  ||  HD_FROM_OBJECT_TYPE_ID  || '", "toObjectTypeTitle": "'  ||  HD_TO_OBJECT_TYPE_ID  || '"}'
           , HISTORYDESC_ID
           , RELATIONSHIP_MASTER_ID
           , CURRENT_TIMESTAMP
           , 'Administrator'
            );

    INSERT INTO RELATIONSHIP_MASTER (FROM_OBJECT_TYPE_ID,TO_OBJECT_TYPE_ID,DEFINED_BY,DESCRIPTION) SELECT HD_TO_OBJECT_TYPE_ID AS FROM_OBJECT_TYPE_ID, HD_FROM_OBJECT_TYPE_ID AS TO_OBJECT_TYPE_ID,'S','' FROM DUAL;
    SELECT RM_ID INTO HISTORYDESC_ID FROM RELATIONSHIP_MASTER WHERE FROM_OBJECT_TYPE_ID = HD_TO_OBJECT_TYPE_ID AND TO_OBJECT_TYPE_ID = HD_FROM_OBJECT_TYPE_ID AND DEFINED_BY = 'S';
    INSERT INTO RM_HISTORY
           (HISTORYTYPEID ,HISTORYDESC ,OBJECTID ,OBJECTTYPEID ,HISTORYDATESTAMP ,USER_ID)
            VALUES
           (
            1
           , '{"id": '  ||  HISTORYDESC_ID  || ', "fromObjectTypeId": '  ||  HD_TO_OBJECT_TYPE_ID  || ', "toObjectTypeId": "'  ||  HD_FROM_OBJECT_TYPE_ID  || '", "fromObjectTypeTitle": "", "toObjectTypeTitle": "", "definedBy": "S"}'
           , HISTORYDESC_ID
           , RELATIONSHIP_MASTER_ID
           , CURRENT_TIMESTAMP
           , 'Administrator'
            );
-- SET 2
    SELECT OBJECT_TYPE_ID INTO HD_FROM_OBJECT_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE='BGM_TERM';
    SELECT OBJECT_TYPE_ID INTO HD_TO_OBJECT_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE='BGM_POLICY';
    INSERT INTO RELATIONSHIP_MASTER (FROM_OBJECT_TYPE_ID,TO_OBJECT_TYPE_ID,DEFINED_BY,DESCRIPTION) SELECT HD_FROM_OBJECT_TYPE_ID AS FROM_OBJECT_TYPE_ID, HD_TO_OBJECT_TYPE_ID AS TO_OBJECT_TYPE_ID,'U','' FROM DUAL;
    SELECT RM_ID INTO HISTORYDESC_ID FROM RELATIONSHIP_MASTER WHERE FROM_OBJECT_TYPE_ID = HD_FROM_OBJECT_TYPE_ID AND TO_OBJECT_TYPE_ID = HD_TO_OBJECT_TYPE_ID AND DEFINED_BY = 'U';
    INSERT INTO RM_HISTORY
           (HISTORYTYPEID ,HISTORYDESC ,OBJECTID ,OBJECTTYPEID ,HISTORYDATESTAMP ,USER_ID)
            VALUES
           (
            1
           , '{"id": '  ||  HISTORYDESC_ID  || ', "fromObjectTypeId": '  ||  HD_FROM_OBJECT_TYPE_ID  || ', "toObjectTypeId": "'  ||  HD_TO_OBJECT_TYPE_ID  || '", "fromObjectTypeTitle": "'  ||  HD_FROM_OBJECT_TYPE_ID  || '", "toObjectTypeTitle": "'  ||  HD_TO_OBJECT_TYPE_ID  || '"}'
           , HISTORYDESC_ID
           , RELATIONSHIP_MASTER_ID
           , CURRENT_TIMESTAMP
           , 'Administrator'
            );

    INSERT INTO RELATIONSHIP_MASTER (FROM_OBJECT_TYPE_ID,TO_OBJECT_TYPE_ID,DEFINED_BY,DESCRIPTION) SELECT HD_TO_OBJECT_TYPE_ID AS FROM_OBJECT_TYPE_ID, HD_FROM_OBJECT_TYPE_ID AS TO_OBJECT_TYPE_ID,'S','' FROM DUAL;
    SELECT RM_ID INTO HISTORYDESC_ID FROM RELATIONSHIP_MASTER WHERE FROM_OBJECT_TYPE_ID = HD_TO_OBJECT_TYPE_ID AND TO_OBJECT_TYPE_ID = HD_FROM_OBJECT_TYPE_ID AND DEFINED_BY = 'S';
    INSERT INTO RM_HISTORY
           (HISTORYTYPEID ,HISTORYDESC ,OBJECTID ,OBJECTTYPEID ,HISTORYDATESTAMP ,USER_ID)
            VALUES
           (
            1
           , '{"id": '  ||  HISTORYDESC_ID  || ', "fromObjectTypeId": '  ||  HD_TO_OBJECT_TYPE_ID  || ', "toObjectTypeId": "'  ||  HD_FROM_OBJECT_TYPE_ID  || '", "fromObjectTypeTitle": "", "toObjectTypeTitle": "", "definedBy": "S"}'
           , HISTORYDESC_ID
           , RELATIONSHIP_MASTER_ID
           , CURRENT_TIMESTAMP
           , 'Administrator'
            );
-- SET 3
    SELECT OBJECT_TYPE_ID INTO HD_FROM_OBJECT_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE='BGM_TERM';
    SELECT OBJECT_TYPE_ID INTO HD_TO_OBJECT_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE='SM_COLUMN';
    INSERT INTO RELATIONSHIP_MASTER (FROM_OBJECT_TYPE_ID,TO_OBJECT_TYPE_ID,DEFINED_BY,DESCRIPTION) SELECT HD_FROM_OBJECT_TYPE_ID AS FROM_OBJECT_TYPE_ID, HD_TO_OBJECT_TYPE_ID AS TO_OBJECT_TYPE_ID,'U','' FROM DUAL;
    SELECT RM_ID INTO HISTORYDESC_ID FROM RELATIONSHIP_MASTER WHERE FROM_OBJECT_TYPE_ID = HD_FROM_OBJECT_TYPE_ID AND TO_OBJECT_TYPE_ID = HD_TO_OBJECT_TYPE_ID AND DEFINED_BY = 'U';
    INSERT INTO RM_HISTORY
           (HISTORYTYPEID ,HISTORYDESC ,OBJECTID ,OBJECTTYPEID ,HISTORYDATESTAMP ,USER_ID)
            VALUES
           (
            1
           , '{"id": '  ||  HISTORYDESC_ID  || ', "fromObjectTypeId": '  ||  HD_FROM_OBJECT_TYPE_ID  || ', "toObjectTypeId": "'  ||  HD_TO_OBJECT_TYPE_ID  || '", "fromObjectTypeTitle": "'  ||  HD_FROM_OBJECT_TYPE_ID  || '", "toObjectTypeTitle": "'  ||  HD_TO_OBJECT_TYPE_ID  || '"}'
           , HISTORYDESC_ID
           , RELATIONSHIP_MASTER_ID
           , CURRENT_TIMESTAMP
           , 'Administrator'
            );

    INSERT INTO RELATIONSHIP_MASTER (FROM_OBJECT_TYPE_ID,TO_OBJECT_TYPE_ID,DEFINED_BY,DESCRIPTION) SELECT HD_TO_OBJECT_TYPE_ID AS FROM_OBJECT_TYPE_ID, HD_FROM_OBJECT_TYPE_ID AS TO_OBJECT_TYPE_ID,'S','' FROM DUAL;
    SELECT RM_ID INTO HISTORYDESC_ID FROM RELATIONSHIP_MASTER WHERE FROM_OBJECT_TYPE_ID = HD_TO_OBJECT_TYPE_ID AND TO_OBJECT_TYPE_ID = HD_FROM_OBJECT_TYPE_ID AND DEFINED_BY = 'S';
    INSERT INTO RM_HISTORY
           (HISTORYTYPEID ,HISTORYDESC ,OBJECTID ,OBJECTTYPEID ,HISTORYDATESTAMP ,USER_ID)
            VALUES
           (
            1
           , '{"id": '  ||  HISTORYDESC_ID  || ', "fromObjectTypeId": '  ||  HD_TO_OBJECT_TYPE_ID  || ', "toObjectTypeId": "'  ||  HD_FROM_OBJECT_TYPE_ID  || '", "fromObjectTypeTitle": "", "toObjectTypeTitle": "", "definedBy": "S"}'
           , HISTORYDESC_ID
           , RELATIONSHIP_MASTER_ID
           , CURRENT_TIMESTAMP
           , 'Administrator'
            );
-- SET 4
    SELECT OBJECT_TYPE_ID INTO HD_FROM_OBJECT_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE='BGM_TERM';
    SELECT OBJECT_TYPE_ID INTO HD_TO_OBJECT_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE='SM_TABLE';
    INSERT INTO RELATIONSHIP_MASTER (FROM_OBJECT_TYPE_ID,TO_OBJECT_TYPE_ID,DEFINED_BY,DESCRIPTION) SELECT HD_FROM_OBJECT_TYPE_ID AS FROM_OBJECT_TYPE_ID, HD_TO_OBJECT_TYPE_ID AS TO_OBJECT_TYPE_ID,'U','' FROM DUAL;
    SELECT RM_ID INTO HISTORYDESC_ID FROM RELATIONSHIP_MASTER WHERE FROM_OBJECT_TYPE_ID = HD_FROM_OBJECT_TYPE_ID AND TO_OBJECT_TYPE_ID = HD_TO_OBJECT_TYPE_ID AND DEFINED_BY = 'U';
    INSERT INTO RM_HISTORY
           (HISTORYTYPEID ,HISTORYDESC ,OBJECTID ,OBJECTTYPEID ,HISTORYDATESTAMP ,USER_ID)
            VALUES
           (
            1
           , '{"id": '  ||  HISTORYDESC_ID  || ', "fromObjectTypeId": '  ||  HD_FROM_OBJECT_TYPE_ID  || ', "toObjectTypeId": "'  ||  HD_TO_OBJECT_TYPE_ID  || '", "fromObjectTypeTitle": "'  ||  HD_FROM_OBJECT_TYPE_ID  || '", "toObjectTypeTitle": "'  ||  HD_TO_OBJECT_TYPE_ID  || '"}'
           , HISTORYDESC_ID
           , RELATIONSHIP_MASTER_ID
           , CURRENT_TIMESTAMP
           , 'Administrator'
            );

    INSERT INTO RELATIONSHIP_MASTER (FROM_OBJECT_TYPE_ID,TO_OBJECT_TYPE_ID,DEFINED_BY,DESCRIPTION) SELECT HD_TO_OBJECT_TYPE_ID AS FROM_OBJECT_TYPE_ID, HD_FROM_OBJECT_TYPE_ID AS TO_OBJECT_TYPE_ID,'S','' FROM DUAL;
    SELECT RM_ID INTO HISTORYDESC_ID FROM RELATIONSHIP_MASTER WHERE FROM_OBJECT_TYPE_ID = HD_TO_OBJECT_TYPE_ID AND TO_OBJECT_TYPE_ID = HD_FROM_OBJECT_TYPE_ID AND DEFINED_BY = 'S';
    INSERT INTO RM_HISTORY
           (HISTORYTYPEID ,HISTORYDESC ,OBJECTID ,OBJECTTYPEID ,HISTORYDATESTAMP ,USER_ID)
            VALUES
           (
            1
           , '{"id": '  ||  HISTORYDESC_ID  || ', "fromObjectTypeId": '  ||  HD_TO_OBJECT_TYPE_ID  || ', "toObjectTypeId": "'  ||  HD_FROM_OBJECT_TYPE_ID  || '", "fromObjectTypeTitle": "", "toObjectTypeTitle": "", "definedBy": "S"}'
           , HISTORYDESC_ID
           , RELATIONSHIP_MASTER_ID
           , CURRENT_TIMESTAMP
           , 'Administrator'
            );
-- SET 5
    SELECT OBJECT_TYPE_ID INTO HD_FROM_OBJECT_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE='BGM_TERM';
    SELECT OBJECT_TYPE_ID INTO HD_TO_OBJECT_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE='SM_ENVIRONMENT';
    INSERT INTO RELATIONSHIP_MASTER (FROM_OBJECT_TYPE_ID,TO_OBJECT_TYPE_ID,DEFINED_BY,DESCRIPTION) SELECT HD_FROM_OBJECT_TYPE_ID AS FROM_OBJECT_TYPE_ID, HD_TO_OBJECT_TYPE_ID AS TO_OBJECT_TYPE_ID,'U','' FROM DUAL;
    SELECT RM_ID INTO HISTORYDESC_ID FROM RELATIONSHIP_MASTER WHERE FROM_OBJECT_TYPE_ID = HD_FROM_OBJECT_TYPE_ID AND TO_OBJECT_TYPE_ID = HD_TO_OBJECT_TYPE_ID AND DEFINED_BY = 'U';
    INSERT INTO RM_HISTORY
           (HISTORYTYPEID ,HISTORYDESC ,OBJECTID ,OBJECTTYPEID ,HISTORYDATESTAMP ,USER_ID)
            VALUES
           (
            1
           , '{"id": '  ||  HISTORYDESC_ID  || ', "fromObjectTypeId": '  ||  HD_FROM_OBJECT_TYPE_ID  || ', "toObjectTypeId": "'  ||  HD_TO_OBJECT_TYPE_ID  || '", "fromObjectTypeTitle": "'  ||  HD_FROM_OBJECT_TYPE_ID  || '", "toObjectTypeTitle": "'  ||  HD_TO_OBJECT_TYPE_ID  || '"}'
           , HISTORYDESC_ID
           , RELATIONSHIP_MASTER_ID
           , CURRENT_TIMESTAMP
           , 'Administrator'
            );

    INSERT INTO RELATIONSHIP_MASTER (FROM_OBJECT_TYPE_ID,TO_OBJECT_TYPE_ID,DEFINED_BY,DESCRIPTION) SELECT HD_TO_OBJECT_TYPE_ID AS FROM_OBJECT_TYPE_ID, HD_FROM_OBJECT_TYPE_ID AS TO_OBJECT_TYPE_ID,'S','' FROM DUAL;
    SELECT RM_ID INTO HISTORYDESC_ID FROM RELATIONSHIP_MASTER WHERE FROM_OBJECT_TYPE_ID = HD_TO_OBJECT_TYPE_ID AND TO_OBJECT_TYPE_ID = HD_FROM_OBJECT_TYPE_ID AND DEFINED_BY = 'S';
    INSERT INTO RM_HISTORY
           (HISTORYTYPEID ,HISTORYDESC ,OBJECTID ,OBJECTTYPEID ,HISTORYDATESTAMP ,USER_ID)
            VALUES
           (
            1
           , '{"id": '  ||  HISTORYDESC_ID  || ', "fromObjectTypeId": '  ||  HD_TO_OBJECT_TYPE_ID  || ', "toObjectTypeId": "'  ||  HD_FROM_OBJECT_TYPE_ID  || '", "fromObjectTypeTitle": "", "toObjectTypeTitle": "", "definedBy": "S"}'
           , HISTORYDESC_ID
           , RELATIONSHIP_MASTER_ID
           , CURRENT_TIMESTAMP
           , 'Administrator'
            );
-- SET 6
    SELECT OBJECT_TYPE_ID INTO HD_FROM_OBJECT_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE='BGM_POLICY';
    SELECT OBJECT_TYPE_ID INTO HD_TO_OBJECT_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE='SM_COLUMN';
    INSERT INTO RELATIONSHIP_MASTER (FROM_OBJECT_TYPE_ID,TO_OBJECT_TYPE_ID,DEFINED_BY,DESCRIPTION) SELECT HD_FROM_OBJECT_TYPE_ID AS FROM_OBJECT_TYPE_ID, HD_TO_OBJECT_TYPE_ID AS TO_OBJECT_TYPE_ID,'U','' FROM DUAL;
    SELECT RM_ID INTO HISTORYDESC_ID FROM RELATIONSHIP_MASTER WHERE FROM_OBJECT_TYPE_ID = HD_FROM_OBJECT_TYPE_ID AND TO_OBJECT_TYPE_ID = HD_TO_OBJECT_TYPE_ID AND DEFINED_BY = 'U';
    INSERT INTO RM_HISTORY
           (HISTORYTYPEID ,HISTORYDESC ,OBJECTID ,OBJECTTYPEID ,HISTORYDATESTAMP ,USER_ID)
            VALUES
           (
            1
           , '{"id": '  ||  HISTORYDESC_ID  || ', "fromObjectTypeId": '  ||  HD_FROM_OBJECT_TYPE_ID  || ', "toObjectTypeId": "'  ||  HD_TO_OBJECT_TYPE_ID  || '", "fromObjectTypeTitle": "'  ||  HD_FROM_OBJECT_TYPE_ID  || '", "toObjectTypeTitle": "'  ||  HD_TO_OBJECT_TYPE_ID  || '"}'
           , HISTORYDESC_ID
           , RELATIONSHIP_MASTER_ID
           , CURRENT_TIMESTAMP
           , 'Administrator'
            );

    INSERT INTO RELATIONSHIP_MASTER (FROM_OBJECT_TYPE_ID,TO_OBJECT_TYPE_ID,DEFINED_BY,DESCRIPTION) SELECT HD_TO_OBJECT_TYPE_ID AS FROM_OBJECT_TYPE_ID, HD_FROM_OBJECT_TYPE_ID AS TO_OBJECT_TYPE_ID,'S','' FROM DUAL;
    SELECT RM_ID INTO HISTORYDESC_ID FROM RELATIONSHIP_MASTER WHERE FROM_OBJECT_TYPE_ID = HD_TO_OBJECT_TYPE_ID AND TO_OBJECT_TYPE_ID = HD_FROM_OBJECT_TYPE_ID AND DEFINED_BY = 'S';
    INSERT INTO RM_HISTORY
           (HISTORYTYPEID ,HISTORYDESC ,OBJECTID ,OBJECTTYPEID ,HISTORYDATESTAMP ,USER_ID)
            VALUES
           (
            1
           , '{"id": '  ||  HISTORYDESC_ID  || ', "fromObjectTypeId": '  ||  HD_TO_OBJECT_TYPE_ID  || ', "toObjectTypeId": "'  ||  HD_FROM_OBJECT_TYPE_ID  || '", "fromObjectTypeTitle": "", "toObjectTypeTitle": "", "definedBy": "S"}'
           , HISTORYDESC_ID
           , RELATIONSHIP_MASTER_ID
           , CURRENT_TIMESTAMP
           , 'Administrator'
            );
-- SET 7
    SELECT OBJECT_TYPE_ID INTO HD_FROM_OBJECT_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE='BGM_POLICY';
    SELECT OBJECT_TYPE_ID INTO HD_TO_OBJECT_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE='BGM_RULE';
    INSERT INTO RELATIONSHIP_MASTER (FROM_OBJECT_TYPE_ID,TO_OBJECT_TYPE_ID,DEFINED_BY,DESCRIPTION) SELECT HD_FROM_OBJECT_TYPE_ID AS FROM_OBJECT_TYPE_ID, HD_TO_OBJECT_TYPE_ID AS TO_OBJECT_TYPE_ID,'U','' FROM DUAL;
    SELECT RM_ID INTO HISTORYDESC_ID FROM RELATIONSHIP_MASTER WHERE FROM_OBJECT_TYPE_ID = HD_FROM_OBJECT_TYPE_ID AND TO_OBJECT_TYPE_ID = HD_TO_OBJECT_TYPE_ID AND DEFINED_BY = 'U';
    INSERT INTO RM_HISTORY
           (HISTORYTYPEID ,HISTORYDESC ,OBJECTID ,OBJECTTYPEID ,HISTORYDATESTAMP ,USER_ID)
            VALUES
           (
            1
           , '{"id": '  ||  HISTORYDESC_ID  || ', "fromObjectTypeId": '  ||  HD_FROM_OBJECT_TYPE_ID  || ', "toObjectTypeId": "'  ||  HD_TO_OBJECT_TYPE_ID  || '", "fromObjectTypeTitle": "'  ||  HD_FROM_OBJECT_TYPE_ID  || '", "toObjectTypeTitle": "'  ||  HD_TO_OBJECT_TYPE_ID  || '"}'
           , HISTORYDESC_ID
           , RELATIONSHIP_MASTER_ID
           , CURRENT_TIMESTAMP
           , 'Administrator'
            );

    INSERT INTO RELATIONSHIP_MASTER (FROM_OBJECT_TYPE_ID,TO_OBJECT_TYPE_ID,DEFINED_BY,DESCRIPTION) SELECT HD_TO_OBJECT_TYPE_ID AS FROM_OBJECT_TYPE_ID, HD_FROM_OBJECT_TYPE_ID AS TO_OBJECT_TYPE_ID,'S','' FROM DUAL;
    SELECT RM_ID INTO HISTORYDESC_ID FROM RELATIONSHIP_MASTER WHERE FROM_OBJECT_TYPE_ID = HD_TO_OBJECT_TYPE_ID AND TO_OBJECT_TYPE_ID = HD_FROM_OBJECT_TYPE_ID AND DEFINED_BY = 'S';
    INSERT INTO RM_HISTORY
           (HISTORYTYPEID ,HISTORYDESC ,OBJECTID ,OBJECTTYPEID ,HISTORYDATESTAMP ,USER_ID)
            VALUES
           (
            1
           , '{"id": '  ||  HISTORYDESC_ID  || ', "fromObjectTypeId": '  ||  HD_TO_OBJECT_TYPE_ID  || ', "toObjectTypeId": "'  ||  HD_FROM_OBJECT_TYPE_ID  || '", "fromObjectTypeTitle": "", "toObjectTypeTitle": "", "definedBy": "S"}'
           , HISTORYDESC_ID
           , RELATIONSHIP_MASTER_ID
           , CURRENT_TIMESTAMP
           , 'Administrator'
            );
-- SET 8
    SELECT OBJECT_TYPE_ID INTO HD_FROM_OBJECT_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE='BGM_TERM';
    SELECT OBJECT_TYPE_ID INTO HD_TO_OBJECT_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE='SM_SYSTEM';
    INSERT INTO RELATIONSHIP_MASTER (FROM_OBJECT_TYPE_ID,TO_OBJECT_TYPE_ID,DEFINED_BY,DESCRIPTION) SELECT HD_FROM_OBJECT_TYPE_ID AS FROM_OBJECT_TYPE_ID, HD_TO_OBJECT_TYPE_ID AS TO_OBJECT_TYPE_ID,'U','' FROM DUAL;
    SELECT RM_ID INTO HISTORYDESC_ID FROM RELATIONSHIP_MASTER WHERE FROM_OBJECT_TYPE_ID = HD_FROM_OBJECT_TYPE_ID AND TO_OBJECT_TYPE_ID = HD_TO_OBJECT_TYPE_ID AND DEFINED_BY = 'U';
    INSERT INTO RM_HISTORY
           (HISTORYTYPEID ,HISTORYDESC ,OBJECTID ,OBJECTTYPEID ,HISTORYDATESTAMP ,USER_ID)
            VALUES
           (
            1
           , '{"id": '  ||  HISTORYDESC_ID  || ', "fromObjectTypeId": '  ||  HD_FROM_OBJECT_TYPE_ID  || ', "toObjectTypeId": "'  ||  HD_TO_OBJECT_TYPE_ID  || '", "fromObjectTypeTitle": "'  ||  HD_FROM_OBJECT_TYPE_ID  || '", "toObjectTypeTitle": "'  ||  HD_TO_OBJECT_TYPE_ID  || '"}'
           , HISTORYDESC_ID
           , RELATIONSHIP_MASTER_ID
           , CURRENT_TIMESTAMP
           , 'Administrator'
            );

    INSERT INTO RELATIONSHIP_MASTER (FROM_OBJECT_TYPE_ID,TO_OBJECT_TYPE_ID,DEFINED_BY,DESCRIPTION) SELECT HD_TO_OBJECT_TYPE_ID AS FROM_OBJECT_TYPE_ID, HD_FROM_OBJECT_TYPE_ID AS TO_OBJECT_TYPE_ID,'S','' FROM DUAL;
    SELECT RM_ID INTO HISTORYDESC_ID FROM RELATIONSHIP_MASTER WHERE FROM_OBJECT_TYPE_ID = HD_TO_OBJECT_TYPE_ID AND TO_OBJECT_TYPE_ID = HD_FROM_OBJECT_TYPE_ID AND DEFINED_BY = 'S';
    INSERT INTO RM_HISTORY
           (HISTORYTYPEID ,HISTORYDESC ,OBJECTID ,OBJECTTYPEID ,HISTORYDATESTAMP ,USER_ID)
            VALUES
           (
            1
           , '{"id": '  ||  HISTORYDESC_ID  || ', "fromObjectTypeId": '  ||  HD_TO_OBJECT_TYPE_ID  || ', "toObjectTypeId": "'  ||  HD_FROM_OBJECT_TYPE_ID  || '", "fromObjectTypeTitle": "", "toObjectTypeTitle": "", "definedBy": "S"}'
           , HISTORYDESC_ID
           , RELATIONSHIP_MASTER_ID
           , CURRENT_TIMESTAMP
           , 'Administrator'
            );
  END IF;
END;
/
DECLARE
TABLECHECKERFLAG INT;
BEGIN
SELECT COUNT(*) INTO TABLECHECKERFLAG FROM ALL_TABLES WHERE OWNER = sys_context( 'userenv', 'current_schema' ) AND TABLE_NAME = UPPER('RELATIONSHIP_DETAILS');
    IF TABLECHECKERFLAG=0 THEN
    EXECUTE IMMEDIATE 'CREATE TABLE RELATIONSHIP_DETAILS(
	   RD_ID NUMBER NOT NULL ENABLE,
		RM_ID NUMBER NOT NULL,
		FORWARD_TITLE VARCHAR2(250) NOT NULL,
		REVERSE_TITLE VARCHAR2(250) NOT NULL,
		DESCRIPTION VARCHAR2(4000) NULL,
		DEFINED_BY CHAR(1) NOT NULL,
      DISPLAY_COLOR VARCHAR2(20) DEFAULT ''#5C5D61'',
      DISPLAY_TYPE VARCHAR2(100) DEFAULT ''M0 0 L1 0'',
		CONSTRAINT UK_REL_DTLS_RMID_TTLS UNIQUE(RM_ID,FORWARD_TITLE,REVERSE_TITLE),
		CONSTRAINT FK_DIS_RM_ID FOREIGN KEY(RM_ID) REFERENCES RELATIONSHIP_MASTER(RM_ID))';
    END IF;
END;
/
DECLARE
SEQUENCECHECKERFLAG INT;
BEGIN
    SELECT COUNT(*) INTO SEQUENCECHECKERFLAG FROM ALL_SEQUENCES WHERE SEQUENCE_OWNER = sys_context('userenv', 'current_schema') AND SEQUENCE_NAME = UPPER('RELATIONSHIP_DET_SEQ');
    IF SEQUENCECHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'CREATE SEQUENCE   "RELATIONSHIP_DET_SEQ"  MINVALUE 1 MAXVALUE 999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE';
    END IF;
END;
/
DECLARE
TRIGGERCHECKERFLAG INT;
RELATIONSHIP_DETAILS_ID INT; HISTORYDESC_ID INT; HISTORYDESC_RM_ID INT;
BEGIN
  SELECT COUNT(*)  INTO TRIGGERCHECKERFLAG  FROM all_triggers  WHERE OWNER = sys_context('userenv', 'current_schema') AND trigger_name = UPPER('RELATIONSHIP_DET_SEQ_INSERT');
  IF TRIGGERCHECKERFLAG = 0 THEN
    EXECUTE IMMEDIATE 'CREATE OR REPLACE TRIGGER  "RELATIONSHIP_DET_SEQ_INSERT" BEFORE INSERT ON RELATIONSHIP_DETAILS FOR EACH ROW BEGIN SELECT RELATIONSHIP_DET_SEQ.NEXTVAL INTO :new.RD_ID FROM DUAL; END;';
    EXECUTE IMMEDIATE 'ALTER TRIGGER  "RELATIONSHIP_DET_SEQ_INSERT" ENABLE';

SELECT OBJECT_TYPE_ID INTO RELATIONSHIP_DETAILS_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE = 'RELATIONSHIP_DETAILS';
-- SET 1
    SELECT RM_ID INTO HISTORYDESC_RM_ID FROM RELATIONSHIP_MASTER WHERE FROM_OBJECT_TYPE_ID IN (SELECT OBJECT_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE='BGM_TERM') AND TO_OBJECT_TYPE_ID IN (SELECT OBJECT_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE='BGM_TERM') AND DEFINED_BY = 'U';
    INSERT INTO RELATIONSHIP_DETAILS (RM_ID, FORWARD_TITLE, REVERSE_TITLE, DESCRIPTION, DEFINED_BY) SELECT HISTORYDESC_RM_ID AS RM_ID,'Synonym','Synonym Of', '', 'U' FROM DUAL;
    SELECT RD_ID INTO HISTORYDESC_ID FROM RELATIONSHIP_DETAILS WHERE RM_ID = HISTORYDESC_RM_ID AND DEFINED_BY = 'U';
    INSERT INTO RM_HISTORY
           (HISTORYTYPEID ,HISTORYDESC ,OBJECTID ,OBJECTTYPEID ,HISTORYDATESTAMP ,USER_ID)
            VALUES
           (
            2
           , '{"id": '  ||  HISTORYDESC_ID  || ', "rmId": '  ||  HISTORYDESC_RM_ID  || ', "forwardTitle": "Synonym", "reverseTitle": "Synonym Of"}'
           , HISTORYDESC_ID
           , RELATIONSHIP_DETAILS_ID
           , CURRENT_TIMESTAMP
           , 'Administrator'
            );
INSERT INTO RELATIONSHIP_DETAILS (RM_ID, FORWARD_TITLE, REVERSE_TITLE, DESCRIPTION, DEFINED_BY) SELECT HISTORYDESC_RM_ID AS RM_ID,'is Part Of','Contained in', '', 'U' FROM DUAL;
INSERT INTO RM_HISTORY
           (HISTORYTYPEID ,HISTORYDESC ,OBJECTID ,OBJECTTYPEID ,HISTORYDATESTAMP ,USER_ID)
            VALUES
           (
            2
           , '{"id": '  ||  HISTORYDESC_ID  || ', "rmId": '  ||  HISTORYDESC_RM_ID  || ', "forwardTitle": "is Part Of", "reverseTitle": "Contained in"}'
           , HISTORYDESC_ID
           , RELATIONSHIP_DETAILS_ID
           , CURRENT_TIMESTAMP
           , 'Administrator'
            );
-- SET 2
    SELECT RM_ID INTO HISTORYDESC_RM_ID FROM RELATIONSHIP_MASTER WHERE FROM_OBJECT_TYPE_ID IN (SELECT OBJECT_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE='BGM_TERM') AND TO_OBJECT_TYPE_ID IN (SELECT OBJECT_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE='BGM_POLICY') AND DEFINED_BY = 'U';
    INSERT INTO RELATIONSHIP_DETAILS (RM_ID, FORWARD_TITLE, REVERSE_TITLE, DESCRIPTION, DEFINED_BY) SELECT HISTORYDESC_RM_ID AS RM_ID,'is Governed By','Governs', '', 'U' FROM DUAL;
    SELECT RD_ID INTO HISTORYDESC_ID FROM RELATIONSHIP_DETAILS WHERE RM_ID = HISTORYDESC_RM_ID AND DEFINED_BY = 'U';
    INSERT INTO RM_HISTORY
           (HISTORYTYPEID ,HISTORYDESC ,OBJECTID ,OBJECTTYPEID ,HISTORYDATESTAMP ,USER_ID)
            VALUES
           (
            2
           , '{"id": '  ||  HISTORYDESC_ID  || ', "rmId": '  ||  HISTORYDESC_RM_ID  || ', "forwardTitle": "is Governed By", "reverseTitle": "Governs"}'
           , HISTORYDESC_ID
           , RELATIONSHIP_DETAILS_ID
           , CURRENT_TIMESTAMP
           , 'Administrator'
            );
-- SET 3
    SELECT RM_ID INTO HISTORYDESC_RM_ID FROM RELATIONSHIP_MASTER WHERE FROM_OBJECT_TYPE_ID IN (SELECT OBJECT_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE='BGM_TERM') AND TO_OBJECT_TYPE_ID IN (SELECT OBJECT_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE='SM_COLUMN') AND DEFINED_BY = 'U';
    INSERT INTO RELATIONSHIP_DETAILS (RM_ID, FORWARD_TITLE, REVERSE_TITLE, DESCRIPTION, DEFINED_BY) SELECT HISTORYDESC_RM_ID AS RM_ID,'Represents','is Represented By', '', 'U' FROM DUAL;
    SELECT RD_ID INTO HISTORYDESC_ID FROM RELATIONSHIP_DETAILS WHERE RM_ID = HISTORYDESC_RM_ID AND DEFINED_BY = 'U';
    INSERT INTO RM_HISTORY
           (HISTORYTYPEID ,HISTORYDESC ,OBJECTID ,OBJECTTYPEID ,HISTORYDATESTAMP ,USER_ID)
            VALUES
           (
            2
           , '{"id": '  ||  HISTORYDESC_ID  || ', "rmId": '  ||  HISTORYDESC_RM_ID  || ', "forwardTitle": "Represents", "reverseTitle": "is Represented By"}'
           , HISTORYDESC_ID
           , RELATIONSHIP_DETAILS_ID
           , CURRENT_TIMESTAMP
           , 'Administrator'
            );
-- SET 4
    SELECT RM_ID INTO HISTORYDESC_RM_ID FROM RELATIONSHIP_MASTER WHERE FROM_OBJECT_TYPE_ID IN (SELECT OBJECT_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE='BGM_TERM') AND TO_OBJECT_TYPE_ID IN (SELECT OBJECT_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE='SM_TABLE') AND DEFINED_BY = 'U';
    INSERT INTO RELATIONSHIP_DETAILS (RM_ID, FORWARD_TITLE, REVERSE_TITLE, DESCRIPTION, DEFINED_BY) SELECT HISTORYDESC_RM_ID AS RM_ID,'Represents','is Represented By', '', 'U' FROM DUAL;
    SELECT RD_ID INTO HISTORYDESC_ID FROM RELATIONSHIP_DETAILS WHERE RM_ID = HISTORYDESC_RM_ID AND DEFINED_BY = 'U';
    INSERT INTO RM_HISTORY
           (HISTORYTYPEID ,HISTORYDESC ,OBJECTID ,OBJECTTYPEID ,HISTORYDATESTAMP ,USER_ID)
            VALUES
           (
            2
           , '{"id": '  ||  HISTORYDESC_ID  || ', "rmId": '  ||  HISTORYDESC_RM_ID  || ', "forwardTitle": "Represents", "reverseTitle": "is Represented By"}'
           , HISTORYDESC_ID
           , RELATIONSHIP_DETAILS_ID
           , CURRENT_TIMESTAMP
           , 'Administrator'
            );
-- SET 5
    SELECT RM_ID INTO HISTORYDESC_RM_ID FROM RELATIONSHIP_MASTER WHERE FROM_OBJECT_TYPE_ID IN (SELECT OBJECT_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE='BGM_TERM') AND TO_OBJECT_TYPE_ID IN (SELECT OBJECT_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE='SM_ENVIRONMENT') AND DEFINED_BY = 'U';
    INSERT INTO RELATIONSHIP_DETAILS (RM_ID, FORWARD_TITLE, REVERSE_TITLE, DESCRIPTION, DEFINED_BY) SELECT HISTORYDESC_RM_ID AS RM_ID,'Golden Source','Golden Source for', '', 'U' FROM DUAL;
    SELECT RD_ID INTO HISTORYDESC_ID FROM RELATIONSHIP_DETAILS WHERE RM_ID = HISTORYDESC_RM_ID AND DEFINED_BY = 'U';
    INSERT INTO RM_HISTORY
           (HISTORYTYPEID ,HISTORYDESC ,OBJECTID ,OBJECTTYPEID ,HISTORYDATESTAMP ,USER_ID)
            VALUES
           (
            2
           , '{"id": '  ||  HISTORYDESC_ID  || ', "rmId": '  ||  HISTORYDESC_RM_ID  || ', "forwardTitle": "Golden Source", "reverseTitle": "Golden Source for"}'
           , HISTORYDESC_ID
           , RELATIONSHIP_DETAILS_ID
           , CURRENT_TIMESTAMP
           , 'Administrator'
            );
-- SET 6
    SELECT RM_ID INTO HISTORYDESC_RM_ID FROM RELATIONSHIP_MASTER WHERE FROM_OBJECT_TYPE_ID IN (SELECT OBJECT_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE='BGM_POLICY') AND TO_OBJECT_TYPE_ID IN (SELECT OBJECT_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE='SM_COLUMN') AND DEFINED_BY = 'U';
    INSERT INTO RELATIONSHIP_DETAILS (RM_ID, FORWARD_TITLE, REVERSE_TITLE, DESCRIPTION, DEFINED_BY) SELECT HISTORYDESC_RM_ID AS RM_ID,'Represents','is Represented By', '', 'U' FROM DUAL;
    SELECT RD_ID INTO HISTORYDESC_ID FROM RELATIONSHIP_DETAILS WHERE RM_ID = HISTORYDESC_RM_ID AND DEFINED_BY = 'U';
    INSERT INTO RM_HISTORY
           (HISTORYTYPEID ,HISTORYDESC ,OBJECTID ,OBJECTTYPEID ,HISTORYDATESTAMP ,USER_ID)
            VALUES
           (
            2
           , '{"id": '  ||  HISTORYDESC_ID  || ', "rmId": '  ||  HISTORYDESC_RM_ID  || ', "forwardTitle": "Represents", "reverseTitle": "is Represented By"}'
           , HISTORYDESC_ID
           , RELATIONSHIP_DETAILS_ID
           , CURRENT_TIMESTAMP
           , 'Administrator'
            );
-- SET 7
    SELECT RM_ID INTO HISTORYDESC_RM_ID FROM RELATIONSHIP_MASTER WHERE FROM_OBJECT_TYPE_ID IN (SELECT OBJECT_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE='BGM_POLICY') AND TO_OBJECT_TYPE_ID IN (SELECT OBJECT_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE='BGM_RULE') AND DEFINED_BY = 'U';
    INSERT INTO RELATIONSHIP_DETAILS (RM_ID, FORWARD_TITLE, REVERSE_TITLE, DESCRIPTION, DEFINED_BY) SELECT HISTORYDESC_RM_ID AS RM_ID,'is Implemented By','Implements', '', 'U' FROM DUAL;
    SELECT RD_ID INTO HISTORYDESC_ID FROM RELATIONSHIP_DETAILS WHERE RM_ID = HISTORYDESC_RM_ID AND DEFINED_BY = 'U';
    INSERT INTO RM_HISTORY
           (HISTORYTYPEID ,HISTORYDESC ,OBJECTID ,OBJECTTYPEID ,HISTORYDATESTAMP ,USER_ID)
            VALUES
           (
            2
           , '{"id": '  ||  HISTORYDESC_ID  || ', "rmId": '  ||  HISTORYDESC_RM_ID  || ', "forwardTitle": "is Implemented By", "reverseTitle": "Implements"}'
           , HISTORYDESC_ID
           , RELATIONSHIP_DETAILS_ID
           , CURRENT_TIMESTAMP
           , 'Administrator'
            );
-- SET 8
SELECT RM_ID INTO HISTORYDESC_RM_ID FROM RELATIONSHIP_MASTER WHERE FROM_OBJECT_TYPE_ID IN (SELECT OBJECT_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE='BGM_TERM') AND TO_OBJECT_TYPE_ID IN (SELECT OBJECT_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE='SM_SYSTEM') AND DEFINED_BY = 'U';
    INSERT INTO RELATIONSHIP_DETAILS (RM_ID, FORWARD_TITLE, REVERSE_TITLE, DESCRIPTION, DEFINED_BY) SELECT HISTORYDESC_RM_ID AS RM_ID,'Golden Source','Golden Source for', '', 'U' FROM DUAL;
    SELECT RD_ID INTO HISTORYDESC_ID FROM RELATIONSHIP_DETAILS WHERE RM_ID = HISTORYDESC_RM_ID AND DEFINED_BY = 'U';
    INSERT INTO RM_HISTORY
           (HISTORYTYPEID ,HISTORYDESC ,OBJECTID ,OBJECTTYPEID ,HISTORYDATESTAMP ,USER_ID)
            VALUES
           (
            2
           , '{"id": '  ||  HISTORYDESC_ID  || ', "rmId": '  ||  HISTORYDESC_RM_ID  || ', "forwardTitle": "Golden Source", "reverseTitle": "Golden Source for"}'
           , HISTORYDESC_ID
           , RELATIONSHIP_DETAILS_ID
           , CURRENT_TIMESTAMP
           , 'Administrator'
            );

  END IF;
END;
/

DECLARE
TEMP_OBJECT_TYPE_ID INT;
TEMP_OBJECT_ID INT;
TABLECHECKERFLAG1 INT;
TABLECHECKERFLAG2 INT;
TABLECHECKERFLAG3 INT;
TEMP_KV_ID INT;
TEMP_KV_TYPE_ID INT;
BEGIN
    SELECT OBJECT_TYPE_ID INTO TEMP_OBJECT_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE='SM_DATABASE_OPTIONS';
    SELECT  MTD_ID INTO TEMP_OBJECT_ID FROM MT_DEFINITION WHERE  MTD_NAME = 'SM_DATABASE_OPTIONS' AND ADS_MODULE = 'SM';
    SELECT COUNT(*) INTO TABLECHECKERFLAG1 FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE='SM_DATABASE_OPTIONS';
    SELECT COUNT(*) INTO TABLECHECKERFLAG2 FROM MT_DEFINITION WHERE MTD_NAME = 'SM_DATABASE_OPTIONS' AND ADS_MODULE = 'SM';
    SELECT COUNT(*) INTO TABLECHECKERFLAG3 FROM ADS_KEY_VALUE WHERE OBJECT_TYPE_ID  = TEMP_OBJECT_TYPE_ID AND OBJECT_ID = TEMP_OBJECT_ID AND KEY_NAME = 'OracleEnableSSLConnection';

    IF TABLECHECKERFLAG1 = 1 AND TABLECHECKERFLAG2 = 1 AND TABLECHECKERFLAG3 = 0 THEN
        INSERT INTO ADS_KEY_VALUE(KEY_NAME,KEY_VALUE,OBJECT_TYPE_ID,OBJECT_ID,DATATYPE_ID,KV_TYPE,LABEL_WIDTH,CONTROL_WIDTH,KV_ORDER,COMPONENT,DEFAULTVALUE,ISSYSTEMBASED) VALUES('OracleEnableSSLConnection','Oracle Enable SSL Connection',TEMP_OBJECT_TYPE_ID,TEMP_OBJECT_ID,'1','Combo Box','','','7','','false',0);
        SELECT KV_ID INTO TEMP_KV_ID FROM ADS_KEY_VALUE WHERE OBJECT_TYPE_ID  = TEMP_OBJECT_TYPE_ID AND OBJECT_ID = TEMP_OBJECT_ID AND KEY_NAME = 'OracleEnableSSLConnection' AND KV_TYPE= 'Combo Box';
        SELECT OBJECT_TYPE_ID INTO TEMP_KV_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE='ADS_KEY_VALUE';
        INSERT INTO ADS_KEY_VALUE(KEY_NAME,KEY_VALUE,OBJECT_TYPE_ID,OBJECT_ID,DATATYPE_ID,KV_TYPE,LABEL_WIDTH,CONTROL_WIDTH,KV_ORDER,COMPONENT,DEFAULTVALUE)      VALUES('true','true',TEMP_KV_TYPE_ID,TEMP_KV_ID,'1','combovalues','','','0','','');
        INSERT INTO ADS_KEY_VALUE(KEY_NAME,KEY_VALUE,OBJECT_TYPE_ID,OBJECT_ID,DATATYPE_ID,KV_TYPE,LABEL_WIDTH,CONTROL_WIDTH,KV_ORDER,COMPONENT,DEFAULTVALUE)      VALUES('false','false',TEMP_KV_TYPE_ID,TEMP_KV_ID,'1','combovalues','','','1','','');
    END IF;
END;
/

DECLARE
TEMP_OBJECT_TYPE_ID INT;
TEMP_OBJECT_ID INT;
TABLECHECKERFLAG1 INT;
TABLECHECKERFLAG2 INT;
TABLECHECKERFLAG3 INT;
BEGIN
SELECT  OBJECT_TYPE_ID INTO TEMP_OBJECT_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE='SM_DATABASE_OPTIONS';
SELECT  MTD_ID INTO TEMP_OBJECT_ID  FROM MT_DEFINITION WHERE  MTD_NAME = 'SM_DATABASE_OPTIONS' AND ADS_MODULE = 'SM';
SELECT COUNT(*) INTO TABLECHECKERFLAG1 FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE='SM_DATABASE_OPTIONS';
SELECT COUNT(*) INTO TABLECHECKERFLAG2 FROM MT_DEFINITION WHERE MTD_NAME = 'SM_DATABASE_OPTIONS' AND ADS_MODULE = 'SM';
SELECT COUNT(*) INTO TABLECHECKERFLAG3 FROM ADS_KEY_VALUE WHERE OBJECT_TYPE_ID  = TEMP_OBJECT_TYPE_ID AND OBJECT_ID = TEMP_OBJECT_ID AND KEY_NAME = 'oracleWalletLocation';

IF TABLECHECKERFLAG1 = 1 AND TABLECHECKERFLAG2 = 1 AND TABLECHECKERFLAG3 = 0 THEN
INSERT INTO ADS_KEY_VALUE(KEY_NAME,KEY_VALUE,OBJECT_TYPE_ID,OBJECT_ID,DATATYPE_ID,KV_TYPE,LABEL_WIDTH,CONTROL_WIDTH,KV_ORDER,COMPONENT,DEFAULTVALUE,ISSYSTEMBASED) VALUES('oracleWalletLocation','Oracle Wallet Location',TEMP_OBJECT_TYPE_ID,TEMP_OBJECT_ID,'1','Text Box','','','8','','false',0);
END IF;
END;
/

DECLARE
TEMP_OBJECT_TYPE_ID INT;
TEMP_OBJECT_ID INT;
TABLECHECKERFLAG1 INT;
TABLECHECKERFLAG2 INT;
TABLECHECKERFLAG3 INT;
BEGIN
SELECT  OBJECT_TYPE_ID INTO TEMP_OBJECT_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE='SM_DATABASE_OPTIONS';
SELECT  MTD_ID INTO TEMP_OBJECT_ID FROM MT_DEFINITION WHERE  MTD_NAME = 'SM_DATABASE_OPTIONS' AND ADS_MODULE = 'SM';
SELECT COUNT(*) INTO TABLECHECKERFLAG1 FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE='SM_DATABASE_OPTIONS' ;
SELECT COUNT(*) INTO TABLECHECKERFLAG2 FROM MT_DEFINITION WHERE MTD_NAME = 'SM_DATABASE_OPTIONS' AND ADS_MODULE = 'SM' ;
SELECT COUNT(*) INTO TABLECHECKERFLAG3 FROM ADS_KEY_VALUE WHERE OBJECT_TYPE_ID  = TEMP_OBJECT_TYPE_ID AND OBJECT_ID = TEMP_OBJECT_ID AND KEY_NAME = 'OraclePKIProviderPosition';

IF TABLECHECKERFLAG1 = 1 AND TABLECHECKERFLAG2 = 1 AND TABLECHECKERFLAG3 = 0 THEN
INSERT INTO ADS_KEY_VALUE(KEY_NAME,KEY_VALUE,OBJECT_TYPE_ID,OBJECT_ID,DATATYPE_ID,KV_TYPE,LABEL_WIDTH,CONTROL_WIDTH,KV_ORDER,COMPONENT,DEFAULTVALUE,ISSYSTEMBASED) VALUES('OraclePKIProviderPosition','Oracle PKI Provider Position',TEMP_OBJECT_TYPE_ID,TEMP_OBJECT_ID,'1','Number','','','9','','3',0);
END IF;
 END;
/
DECLARE
TEMP_OBJECT_TYPE_ID INT;
TEMP_OBJECT_ID INT;
TABLECHECKERFLAG1 INT;
TABLECHECKERFLAG2 INT;
TABLECHECKERFLAG3 INT;
TEMP_KV_ID INT;
TEMP_KV_TYPE_ID INT;
BEGIN
    SELECT  OBJECT_TYPE_ID INTO TEMP_OBJECT_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE='SM_DATABASE_OPTIONS';
    SELECT  MTD_ID INTO TEMP_OBJECT_ID FROM MT_DEFINITION WHERE  MTD_NAME = 'SM_DATABASE_OPTIONS' AND ADS_MODULE = 'SM';
    SELECT COUNT(*) INTO TABLECHECKERFLAG1 FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE='SM_DATABASE_OPTIONS';
    SELECT COUNT(*) INTO TABLECHECKERFLAG2 FROM MT_DEFINITION WHERE MTD_NAME = 'SM_DATABASE_OPTIONS' AND ADS_MODULE = 'SM';
    SELECT COUNT(*) INTO TABLECHECKERFLAG3 FROM ADS_KEY_VALUE WHERE OBJECT_TYPE_ID  = TEMP_OBJECT_TYPE_ID AND OBJECT_ID = TEMP_OBJECT_ID AND KEY_NAME = 'OracleSSLServerDNMatch';

    IF TABLECHECKERFLAG1 = 1 AND TABLECHECKERFLAG2 = 1 AND TABLECHECKERFLAG3 = 0 THEN
        INSERT INTO ADS_KEY_VALUE(KEY_NAME,KEY_VALUE,OBJECT_TYPE_ID,OBJECT_ID,DATATYPE_ID,KV_TYPE,LABEL_WIDTH,CONTROL_WIDTH,KV_ORDER,COMPONENT,DEFAULTVALUE,ISSYSTEMBASED) VALUES('OracleSSLServerDNMatch',' Oracle SSL Server DN Match',TEMP_OBJECT_TYPE_ID,TEMP_OBJECT_ID,'1','Combo Box','','','10','','false',0);
        SELECT KV_ID INTO TEMP_KV_ID FROM ADS_KEY_VALUE WHERE OBJECT_TYPE_ID  = TEMP_OBJECT_TYPE_ID AND OBJECT_ID = TEMP_OBJECT_ID AND KEY_NAME = 'OracleSSLServerDNMatch' AND KV_TYPE= 'Combo Box';
        SELECT OBJECT_TYPE_ID INTO TEMP_KV_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE='ADS_KEY_VALUE';
        INSERT INTO ADS_KEY_VALUE(KEY_NAME,KEY_VALUE,OBJECT_TYPE_ID,OBJECT_ID,DATATYPE_ID,KV_TYPE,LABEL_WIDTH,CONTROL_WIDTH,KV_ORDER,COMPONENT,DEFAULTVALUE)      VALUES('true','true',TEMP_KV_TYPE_ID,TEMP_KV_ID,'1','combovalues','','','0','','');
        INSERT INTO ADS_KEY_VALUE(KEY_NAME,KEY_VALUE,OBJECT_TYPE_ID,OBJECT_ID,DATATYPE_ID,KV_TYPE,LABEL_WIDTH,CONTROL_WIDTH,KV_ORDER,COMPONENT,DEFAULTVALUE)      VALUES('false','false',TEMP_KV_TYPE_ID,TEMP_KV_ID,'1','combovalues','','','1','','');
    END IF;
END;
/
DECLARE
   COLUMNCHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO COLUMNCHECKERFLAG FROM ALL_TAB_COLUMNS WHERE  OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME = UPPER('BG_CUSTOM_TYPES') AND COLUMN_NAME=UPPER('ENTITY_COLOR');
   IF COLUMNCHECKERFLAG = 0 THEN
        EXECUTE IMMEDIATE 'ALTER TABLE BG_CUSTOM_TYPES ADD ENTITY_COLOR varchar2(20) DEFAULT ''#F6C65B''';
        EXECUTE IMMEDIATE 'UPDATE BG_CUSTOM_TYPES SET ENTITY_COLOR = ''#F6C65B''';
        EXECUTE IMMEDIATE 'UPDATE BG_CUSTOM_TYPES SET ENTITY_COLOR = ''#1C5FAB''  WHERE NAME = ''Business Terms''';
        EXECUTE IMMEDIATE 'UPDATE BG_CUSTOM_TYPES SET ENTITY_COLOR = ''#E9636E''  WHERE NAME = ''Business Policies''';
        EXECUTE IMMEDIATE 'UPDATE BG_CUSTOM_TYPES SET ENTITY_COLOR = ''#00A9A2''  WHERE NAME = ''Business Rules''';
   END IF;
END;
/
DECLARE
  COLUMN_EXISTS number := 0;
BEGIN
  SELECT COUNT(*) INTO COLUMN_EXISTS FROM USER_TAB_COLUMNS WHERE UPPER(COLUMN_NAME) = 'RELATIONSHIP_DETAIL_ID' AND UPPER(TABLE_NAME) = 'ADS_ASSOCIATIONS';
  IF (COLUMN_EXISTS = 0) THEN
      EXECUTE IMMEDIATE 'ALTER TABLE ADS_ASSOCIATIONS ADD RELATIONSHIP_DETAIL_ID NUMBER DEFAULT -1 NOT NULL';
  END IF;
END;
/
DECLARE
    COLUMN_EXISTS number := 0;
    RELATIONSHIPDETAILID NUMBER;
    NON_MATCHED_RECORDS NUMBER;
    BG_TERM_OBJECT_TYPE_ID NUMBER;
    BGM_POLICY_OBJECT_TYPE_ID NUMBER;
    BGM_RULE_OBJECT_TYPE_ID NUMBER;
    SM_ENV_OBJECT_TYPE_ID NUMBER;
    SM_TABLE_OBJECT_TYPE_ID NUMBER;
    SM_COLUMN_OBJECT_TYPE_ID NUMBER;
    SM_SYSTEM_OBJECT_TYPE_ID NUMBER;
BEGIN
--OBJECT TYPE_IDS INITIALIZATION -->
    SELECT OBJECT_TYPE_ID into BG_TERM_OBJECT_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE='BGM_TERM';
    SELECT OBJECT_TYPE_ID into BGM_POLICY_OBJECT_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE ='BGM_POLICY';
    SELECT OBJECT_TYPE_ID into BGM_RULE_OBJECT_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE='BGM_RULE';
    SELECT OBJECT_TYPE_ID into SM_ENV_OBJECT_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE='SM_ENVIRONMENT';
    SELECT OBJECT_TYPE_ID into SM_TABLE_OBJECT_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE='SM_TABLE';
    SELECT OBJECT_TYPE_ID into SM_COLUMN_OBJECT_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE='SM_COLUMN';
    SELECT OBJECT_TYPE_ID into SM_SYSTEM_OBJECT_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE='SM_SYSTEM';
    
  SELECT COUNT(*) INTO COLUMN_EXISTS FROM USER_TAB_COLUMNS WHERE UPPER(COLUMN_NAME) = 'RELATIONSHIP' AND UPPER(TABLE_NAME) = 'ADS_ASSOCIATIONS';
  IF (COLUMN_EXISTS = 1) THEN
      
--SET 1
        BEGIN
         SELECT RD_ID INTO RELATIONSHIPDETAILID FROM RELATIONSHIP_DETAILS RD JOIN RELATIONSHIP_MASTER RM ON RD.RM_ID = RM.RM_ID WHERE RM.DEFINED_BY = 'U' AND RM.FROM_OBJECT_TYPE_ID = BG_TERM_OBJECT_TYPE_ID AND RM.TO_OBJECT_TYPE_ID = BG_TERM_OBJECT_TYPE_ID AND RD.FORWARD_TITLE = 'Synonym' AND RD.REVERSE_TITLE = 'Synonym Of';
         IF (RELATIONSHIPDETAILID IS NOT NULL) THEN
            UPDATE ADS_ASSOCIATIONS SET RELATIONSHIP_DETAIL_ID = RELATIONSHIPDETAILID WHERE SOURCE_OBJECT_TYPE_ID = BG_TERM_OBJECT_TYPE_ID and TARGET_OBJECT_TYPE_ID = BG_TERM_OBJECT_TYPE_ID;
         END IF;
        EXCEPTION
        WHEN NO_DATA_FOUND THEN
          NON_MATCHED_RECORDS := 0;
        END;  
--SET 2
        BEGIN
         SELECT RD_ID INTO RELATIONSHIPDETAILID FROM RELATIONSHIP_DETAILS RD JOIN RELATIONSHIP_MASTER RM ON RD.RM_ID = RM.RM_ID WHERE RM.DEFINED_BY = 'U' AND RM.FROM_OBJECT_TYPE_ID = BG_TERM_OBJECT_TYPE_ID AND RM.TO_OBJECT_TYPE_ID = BGM_POLICY_OBJECT_TYPE_ID AND RD.FORWARD_TITLE = 'is Governed By' AND RD.REVERSE_TITLE = 'Governs';
         IF (RELATIONSHIPDETAILID IS NOT NULL) THEN
            UPDATE ADS_ASSOCIATIONS SET RELATIONSHIP_DETAIL_ID = RELATIONSHIPDETAILID WHERE (SOURCE_OBJECT_TYPE_ID = BG_TERM_OBJECT_TYPE_ID and TARGET_OBJECT_TYPE_ID = BGM_POLICY_OBJECT_TYPE_ID) OR (SOURCE_OBJECT_TYPE_ID = BGM_POLICY_OBJECT_TYPE_ID and TARGET_OBJECT_TYPE_ID = BG_TERM_OBJECT_TYPE_ID);
         END IF;
          EXCEPTION
        WHEN NO_DATA_FOUND THEN
          NON_MATCHED_RECORDS := 0;
        END;  
--SET 3
        BEGIN
         SELECT RD_ID INTO RELATIONSHIPDETAILID FROM RELATIONSHIP_DETAILS RD JOIN RELATIONSHIP_MASTER RM ON RD.RM_ID = RM.RM_ID WHERE RM.DEFINED_BY = 'U' AND RM.FROM_OBJECT_TYPE_ID = BG_TERM_OBJECT_TYPE_ID AND RM.TO_OBJECT_TYPE_ID = SM_COLUMN_OBJECT_TYPE_ID AND RD.FORWARD_TITLE = 'Represents' AND RD.REVERSE_TITLE = 'is Represented By';
         IF (RELATIONSHIPDETAILID IS NOT NULL) THEN
            UPDATE ADS_ASSOCIATIONS SET RELATIONSHIP_DETAIL_ID = RELATIONSHIPDETAILID WHERE (SOURCE_OBJECT_TYPE_ID = BG_TERM_OBJECT_TYPE_ID and TARGET_OBJECT_TYPE_ID = SM_COLUMN_OBJECT_TYPE_ID) OR (SOURCE_OBJECT_TYPE_ID = SM_COLUMN_OBJECT_TYPE_ID and TARGET_OBJECT_TYPE_ID = BG_TERM_OBJECT_TYPE_ID);
         END IF;
         EXCEPTION
        WHEN NO_DATA_FOUND THEN
          NON_MATCHED_RECORDS := 0;
        END;  
--SET 4
        BEGIN
         SELECT RD_ID INTO RELATIONSHIPDETAILID FROM RELATIONSHIP_DETAILS RD JOIN RELATIONSHIP_MASTER RM ON RD.RM_ID = RM.RM_ID WHERE RM.DEFINED_BY = 'U' AND RM.FROM_OBJECT_TYPE_ID = BG_TERM_OBJECT_TYPE_ID AND RM.TO_OBJECT_TYPE_ID = SM_TABLE_OBJECT_TYPE_ID AND RD.FORWARD_TITLE = 'Represents' AND RD.REVERSE_TITLE = 'is Represented By';
         IF (RELATIONSHIPDETAILID IS NOT NULL) THEN
            UPDATE ADS_ASSOCIATIONS SET RELATIONSHIP_DETAIL_ID = RELATIONSHIPDETAILID WHERE (SOURCE_OBJECT_TYPE_ID = BG_TERM_OBJECT_TYPE_ID and TARGET_OBJECT_TYPE_ID = SM_TABLE_OBJECT_TYPE_ID) OR (SOURCE_OBJECT_TYPE_ID = SM_TABLE_OBJECT_TYPE_ID and TARGET_OBJECT_TYPE_ID = BG_TERM_OBJECT_TYPE_ID);
         END IF;
         EXCEPTION
        WHEN NO_DATA_FOUND THEN
          NON_MATCHED_RECORDS := 0;
        END;  
--SET 5
        BEGIN
         SELECT RD_ID INTO RELATIONSHIPDETAILID FROM RELATIONSHIP_DETAILS RD JOIN RELATIONSHIP_MASTER RM ON RD.RM_ID = RM.RM_ID WHERE RM.DEFINED_BY = 'U' AND RM.FROM_OBJECT_TYPE_ID = BG_TERM_OBJECT_TYPE_ID AND RM.TO_OBJECT_TYPE_ID = SM_ENV_OBJECT_TYPE_ID AND RD.FORWARD_TITLE = 'Golden Source' AND RD.REVERSE_TITLE = 'Golden Source for';
         IF (RELATIONSHIPDETAILID IS NOT NULL) THEN
            UPDATE ADS_ASSOCIATIONS SET RELATIONSHIP_DETAIL_ID = RELATIONSHIPDETAILID WHERE (SOURCE_OBJECT_TYPE_ID = BG_TERM_OBJECT_TYPE_ID and TARGET_OBJECT_TYPE_ID = SM_ENV_OBJECT_TYPE_ID) OR (SOURCE_OBJECT_TYPE_ID = SM_ENV_OBJECT_TYPE_ID and TARGET_OBJECT_TYPE_ID = BG_TERM_OBJECT_TYPE_ID);
         END IF;
        EXCEPTION
        WHEN NO_DATA_FOUND THEN
          NON_MATCHED_RECORDS := 0;
        END;  
--SET 6
        BEGIN
         SELECT RD_ID INTO RELATIONSHIPDETAILID FROM RELATIONSHIP_DETAILS RD JOIN RELATIONSHIP_MASTER RM ON RD.RM_ID = RM.RM_ID WHERE RM.DEFINED_BY = 'U' AND RM.FROM_OBJECT_TYPE_ID = BGM_POLICY_OBJECT_TYPE_ID AND RM.TO_OBJECT_TYPE_ID = SM_COLUMN_OBJECT_TYPE_ID AND RD.FORWARD_TITLE = 'Represents' AND RD.REVERSE_TITLE = 'is Represented By';
         IF (RELATIONSHIPDETAILID IS NOT NULL) THEN
            UPDATE ADS_ASSOCIATIONS SET RELATIONSHIP_DETAIL_ID = RELATIONSHIPDETAILID WHERE (SOURCE_OBJECT_TYPE_ID = BGM_POLICY_OBJECT_TYPE_ID AND TARGET_OBJECT_TYPE_ID = SM_COLUMN_OBJECT_TYPE_ID) OR (SOURCE_OBJECT_TYPE_ID = SM_COLUMN_OBJECT_TYPE_ID AND TARGET_OBJECT_TYPE_ID = BGM_POLICY_OBJECT_TYPE_ID);
         END IF;
         EXCEPTION
        WHEN NO_DATA_FOUND THEN
          NON_MATCHED_RECORDS := 0;
        END;  
--SET 7
        BEGIN
         SELECT RD_ID INTO RELATIONSHIPDETAILID FROM RELATIONSHIP_DETAILS RD JOIN RELATIONSHIP_MASTER RM ON RD.RM_ID = RM.RM_ID WHERE RM.DEFINED_BY = 'U' AND RM.FROM_OBJECT_TYPE_ID = BGM_POLICY_OBJECT_TYPE_ID AND RM.TO_OBJECT_TYPE_ID = BGM_RULE_OBJECT_TYPE_ID AND RD.FORWARD_TITLE = 'is Implemented By' AND RD.REVERSE_TITLE = 'Implements';
         IF (RELATIONSHIPDETAILID IS NOT NULL) THEN
            UPDATE ADS_ASSOCIATIONS SET RELATIONSHIP_DETAIL_ID = RELATIONSHIPDETAILID WHERE (SOURCE_OBJECT_TYPE_ID = BGM_POLICY_OBJECT_TYPE_ID AND TARGET_OBJECT_TYPE_ID = BGM_RULE_OBJECT_TYPE_ID) OR (SOURCE_OBJECT_TYPE_ID = BGM_RULE_OBJECT_TYPE_ID AND TARGET_OBJECT_TYPE_ID = BGM_POLICY_OBJECT_TYPE_ID);
         END IF;
        EXCEPTION
        WHEN NO_DATA_FOUND THEN
          NON_MATCHED_RECORDS := 0;
        END;
--SET 8  
      BEGIN
         SELECT RD_ID INTO RELATIONSHIPDETAILID FROM RELATIONSHIP_DETAILS RD JOIN RELATIONSHIP_MASTER RM ON RD.RM_ID = RM.RM_ID WHERE RM.DEFINED_BY = 'U' AND RM.FROM_OBJECT_TYPE_ID = BG_TERM_OBJECT_TYPE_ID AND RM.TO_OBJECT_TYPE_ID = SM_SYSTEM_OBJECT_TYPE_ID AND RD.FORWARD_TITLE = 'Golden Source' AND RD.REVERSE_TITLE = 'Golden Source for';
         IF (RELATIONSHIPDETAILID IS NOT NULL) THEN
            UPDATE ADS_ASSOCIATIONS SET RELATIONSHIP_DETAIL_ID = RELATIONSHIPDETAILID WHERE (SOURCE_OBJECT_TYPE_ID = BG_TERM_OBJECT_TYPE_ID AND TARGET_OBJECT_TYPE_ID = SM_SYSTEM_OBJECT_TYPE_ID) OR (SOURCE_OBJECT_TYPE_ID = SM_SYSTEM_OBJECT_TYPE_ID AND TARGET_OBJECT_TYPE_ID = BG_TERM_OBJECT_TYPE_ID);
         END IF;
        EXCEPTION
        WHEN NO_DATA_FOUND THEN
          NON_MATCHED_RECORDS := 0;
        END;  
                     
      EXECUTE IMMEDIATE 'ALTER TABLE ADS_ASSOCIATIONS DROP COLUMN RELATIONSHIP';
  END IF;
END;
/
DECLARE
   VERSIONCHECKERFLAG INT;
   TABLECHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO VERSIONCHECKERFLAG FROM ADS_MM_VERSION WHERE VALUE < '9.3';
   IF VERSIONCHECKERFLAG = 1 THEN
		SELECT COUNT(*) INTO TABLECHECKERFLAG FROM ALL_OBJECTS WHERE OWNER = sys_context('userenv', 'current_schema') AND UPPER(OBJECT_NAME) = 'T_ADS_KEY_VALUE' AND UPPER(OBJECT_TYPE) ='TYPE';
        IF TABLECHECKERFLAG = 1 THEN
            EXECUTE IMMEDIATE 'DROP TYPE "T_ADS_KEY_VALUE"';
    	END IF;
    END IF;
END;
/

DECLARE
   TABLECHECKERFLAG INT;
BEGIN
        SELECT COUNT(*) INTO TABLECHECKERFLAG FROM ALL_OBJECTS WHERE OWNER = sys_context('userenv', 'current_schema') AND UPPER(OBJECT_NAME) = 'GT_ADS_KEY_VALUE_ROW' AND UPPER(OBJECT_TYPE) ='TYPE';
        IF TABLECHECKERFLAG = 1 THEN
            EXECUTE IMMEDIATE 'DROP TYPE GT_ADS_KEY_VALUE_ROW FORCE';
    	END IF;
END;
/

DECLARE
   VERSIONCHECKERFLAG INT;
   TABLECHECKERFLAG INT;
   TABLECHECKERFLAG1 INT;
BEGIN
    SELECT COUNT(*) INTO TABLECHECKERFLAG FROM ALL_TABLES WHERE OWNER = sys_context( 'userenv', 'current_schema' ) AND TABLE_NAME = UPPER('ADS_KEY_VALUE_GTT');
    IF TABLECHECKERFLAG = 1 THEN
        EXECUTE IMMEDIATE 'DROP TABLE ADS_KEY_VALUE_H_GTT';
        EXECUTE IMMEDIATE 'DROP TABLE ADS_KEY_VALUE_GTT';
    END IF;
    SELECT COUNT(*) INTO TABLECHECKERFLAG1 FROM ALL_TABLES WHERE OWNER = sys_context( 'userenv', 'current_schema' ) AND TABLE_NAME = UPPER('ADS_KV_OBJECT_TYPE_REL_GTT');
    IF TABLECHECKERFLAG1 = 1 THEN
        EXECUTE IMMEDIATE 'DROP TABLE ADS_KV_OBJECT_TYPE_REL_GTT';
        EXECUTE IMMEDIATE 'DROP TABLE ADS_KV_OBJECT_TYPE_REL_IDS_GTT';
    END IF;
END;
/

DECLARE
  TABLECHECKERFLAG INT;
BEGIN
  SELECT COUNT(*)
  INTO TABLECHECKERFLAG
  FROM ALL_TABLES
  WHERE OWNER         = sys_context( 'userenv', 'current_schema' )
  AND TABLE_NAME      = UPPER('ADS_KV_OBJECT_TYPE_GTT');
  IF TABLECHECKERFLAG = 0 THEN
    EXECUTE IMMEDIATE 'CREATE GLOBAL TEMPORARY TABLE ADS_KV_OBJECT_TYPE_GTT (OBJECT_TYPE_ID NUMBER, OBJECT_TYPE VARCHAR2(512), OBJECT_TABLE VARCHAR2(512), OBJECT_TABLE_COLUMN VARCHAR2(512), OBJECT_PARENT_TYPE VARCHAR2(512), OBJECT_PARENT_COLUMN_ID VARCHAR2(512), OBJECT_LEVEL NUMBER, OBJECT_REF_KEY VARCHAR2(1024))ON COMMIT PRESERVE ROWS';
  END IF;
END;
/

DECLARE
  TABLECHECKERFLAG INT;
BEGIN
  SELECT COUNT(*)
  INTO TABLECHECKERFLAG
  FROM ALL_TABLES
  WHERE OWNER         = sys_context( 'userenv', 'current_schema' )
  AND TABLE_NAME      = UPPER('ADS_KV_OBJECT_TYPE_REL_IDS_GTT');
  IF TABLECHECKERFLAG = 0 THEN
    EXECUTE IMMEDIATE 'CREATE GLOBAL TEMPORARY TABLE ADS_KV_OBJECT_TYPE_REL_IDS_GTT (OBJECT_ID NUMBER, OBJECT_TYPE VARCHAR2(512)) ON COMMIT PRESERVE ROWS';
  END IF;
END;
/

DECLARE
  TABLECHECKERFLAG INT;
BEGIN
  SELECT COUNT(*)
  INTO TABLECHECKERFLAG
  FROM ALL_TABLES
  WHERE OWNER         = sys_context( 'userenv', 'current_schema' )
  AND TABLE_NAME      = UPPER('ADS_KV_OBJECT_TYPE_REL_GTT');
  IF TABLECHECKERFLAG = 0 THEN
    EXECUTE IMMEDIATE 'CREATE GLOBAL TEMPORARY TABLE ADS_KV_OBJECT_TYPE_REL_GTT (OBJECT_ID NUMBER, OBJECT_TYPE_ID NUMBER, OBJECT_TYPE VARCHAR2(512), OBJECT_REF_KEY VARCHAR2(1024), OBJECT_LEVEL NUMBER)ON COMMIT PRESERVE ROWS';
  END IF;
END;
/

DECLARE
  TABLECHECKERFLAG INT;
BEGIN
  SELECT COUNT(*)
  INTO TABLECHECKERFLAG
  FROM ALL_TABLES
  WHERE OWNER         = sys_context( 'userenv', 'current_schema' )
  AND TABLE_NAME      = UPPER('ADS_KEY_VALUE_GTT');
  IF TABLECHECKERFLAG = 0 THEN
    EXECUTE IMMEDIATE 'CREATE GLOBAL TEMPORARY TABLE ADS_KEY_VALUE_GTT (KV_ID NUMBER, KEY_NAME VARCHAR2(4000), KEY_VALUE VARCHAR2(4000), OBJECT_TYPE_ID NUMBER, OBJECT_ID VARCHAR2(200), DATATYPE_ID NUMBER, KV_TYPE VARCHAR2(50), LABEL_WIDTH VARCHAR2(50), CONTROL_WIDTH VARCHAR2(50), KV_ORDER VARCHAR2(50), COMPONENT VARCHAR2(4000), DEFAULTVALUE VARCHAR2(4000), ISPUBLISHED NUMBER, ISSYSTEMBASED NUMBER, DISPLAY_POLICY NUMBER, REGEX VARCHAR2(100), MANDATORY NUMBER, ENABLED NUMBER, FIELD_LENGTH NUMBER, PROCESSING_ORDER NUMBER, VISIBLE NUMBER, LOAD_ON_STARTUP NUMBER(3),VALUE_OBJECT_REF INT, CREATED_BY VARCHAR2(20), CREATED_DATE_TIME TIMESTAMP(6), LAST_MODIFIED_BY VARCHAR2(20), LAST_MODIFIED_DATE_TIME TIMESTAMP(6), DESCRIPTION VARCHAR2(4000), IS_FORM_PROPERTY INT,IS_GRID_PROPERTY INT, IS_PIVOTABLE INT, P_KV_ID NUMBER, OBJECT_LEVEL NUMBER, IS_KEY_FROM_PARENT NUMBER, IS_KEY_FROM_CHILD NUMBER) ON COMMIT PRESERVE ROWS';
  END IF;
END;
/

DECLARE
  TABLECHECKERFLAG INT;
BEGIN
  SELECT COUNT(*)
  INTO TABLECHECKERFLAG
  FROM ALL_TABLES
  WHERE OWNER         = sys_context( 'userenv', 'current_schema' )
  AND TABLE_NAME      = UPPER('ADS_KEY_VALUE_H_GTT');
  IF TABLECHECKERFLAG = 0 THEN
    EXECUTE IMMEDIATE 'CREATE GLOBAL TEMPORARY TABLE ADS_KEY_VALUE_H_GTT (KV_ID NUMBER, KEY_NAME VARCHAR2(4000), KEY_VALUE VARCHAR2(4000), OBJECT_TYPE_ID NUMBER, OBJECT_ID VARCHAR2(200), DATATYPE_ID NUMBER, KV_TYPE VARCHAR2(50), LABEL_WIDTH VARCHAR2(50), CONTROL_WIDTH VARCHAR2(50), KV_ORDER VARCHAR2(50), COMPONENT VARCHAR2(4000), DEFAULTVALUE VARCHAR2(4000), ISPUBLISHED NUMBER, ISSYSTEMBASED NUMBER, DISPLAY_POLICY NUMBER, REGEX VARCHAR2(100), MANDATORY NUMBER, ENABLED NUMBER, FIELD_LENGTH NUMBER, PROCESSING_ORDER NUMBER, VISIBLE NUMBER, LOAD_ON_STARTUP NUMBER(3),VALUE_OBJECT_REF INT,CREATED_BY VARCHAR2(20), CREATED_DATE_TIME TIMESTAMP(6), LAST_MODIFIED_BY VARCHAR2(20), LAST_MODIFIED_DATE_TIME TIMESTAMP(6), DESCRIPTION VARCHAR2(4000), IS_FORM_PROPERTY INT, IS_GRID_PROPERTY INT, IS_PIVOTABLE INT, P_KV_ID NUMBER, OBJECT_LEVEL NUMBER, IS_KEY_FROM_PARENT NUMBER, IS_KEY_FROM_CHILD NUMBER) ON COMMIT PRESERVE ROWS';
  END IF;
END;
/

DECLARE
  TYPECHECKERFLAG INT;
BEGIN
  SELECT COUNT(*)
  INTO TYPECHECKERFLAG
  FROM ALL_OBJECTS
  WHERE OWNER            = sys_context('userenv', 'current_schema')
  AND UPPER(OBJECT_NAME) = 'GT_ADS_KEY_VALUE_ROW'
  AND UPPER(OBJECT_TYPE) ='TYPE';
  IF TYPECHECKERFLAG    = 0 THEN
    EXECUTE IMMEDIATE 'CREATE OR REPLACE TYPE GT_ADS_KEY_VALUE_ROW AS OBJECT (KV_ID NUMBER, KEY_NAME VARCHAR2(4000), KEY_VALUE VARCHAR2(4000), OBJECT_TYPE_ID NUMBER, OBJECT_ID VARCHAR2(200), DATATYPE_ID NUMBER, KV_TYPE VARCHAR2(50), LABEL_WIDTH VARCHAR2(50), CONTROL_WIDTH VARCHAR2(50), KV_ORDER VARCHAR2(50), COMPONENT VARCHAR2(4000), DEFAULTVALUE VARCHAR2(4000), ISPUBLISHED NUMBER, ISSYSTEMBASED NUMBER, DISPLAY_POLICY NUMBER, REGEX VARCHAR2(100), MANDATORY NUMBER, ENABLED NUMBER, FIELD_LENGTH NUMBER, PROCESSING_ORDER NUMBER, VISIBLE NUMBER, LOAD_ON_STARTUP NUMBER(3),VALUE_OBJECT_REF INT, CREATED_BY VARCHAR2(20), CREATED_DATE_TIME TIMESTAMP(6), LAST_MODIFIED_BY VARCHAR2(20), LAST_MODIFIED_DATE_TIME TIMESTAMP(6), DESCRIPTION VARCHAR2(4000), IS_FORM_PROPERTY INT, IS_GRID_PROPERTY INT, IS_PIVOTABLE INT, P_KV_ID NUMBER, OBJECT_LEVEL NUMBER, IS_KEY_FROM_PARENT NUMBER, IS_KEY_FROM_CHILD NUMBER)';
  END IF;
END;
/
DECLARE
  TYPECHECKERFLAG INT;
BEGIN
  SELECT COUNT(*)
  INTO TYPECHECKERFLAG
  FROM ALL_OBJECTS
  WHERE OWNER            = sys_context('userenv', 'current_schema')
  AND UPPER(OBJECT_NAME) = 'T_ADS_KEY_VALUE'
  AND UPPER(OBJECT_TYPE) ='TYPE';
  IF TYPECHECKERFLAG     = 0 THEN
    EXECUTE IMMEDIATE 'CREATE OR REPLACE TYPE "T_ADS_KEY_VALUE" AS TABLE OF "GT_ADS_KEY_VALUE_ROW"';
  END IF;
END;
/

DECLARE
  TABLECHECKERFLAG INT;
BEGIN
  SELECT COUNT(*)
  INTO TABLECHECKERFLAG
  FROM ALL_TABLES
  WHERE OWNER         = sys_context( 'userenv', 'current_schema' )
  AND TABLE_NAME      = UPPER('OBJECT_KEY_ID_GTT');
  IF TABLECHECKERFLAG = 0 THEN
    EXECUTE IMMEDIATE 'CREATE GLOBAL TEMPORARY TABLE OBJECT_KEY_ID_GTT (KV_ID NUMBER) ON COMMIT PRESERVE ROWS';
  END IF;
END;
/

DECLARE
   TABLECHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO TABLECHECKERFLAG FROM ALL_OBJECTS WHERE OWNER = sys_context('userenv', 'current_schema') AND OBJECT_TYPE = 'FUNCTION' AND OBJECT_NAME = UPPER('FN_GET_ADS_KEY_VALUE');
   IF TABLECHECKERFLAG = 1 THEN
      EXECUTE IMMEDIATE 'DROP FUNCTION FN_GET_ADS_KEY_VALUE';
   END IF;
END;
/

CREATE OR REPLACE FUNCTION FN_GET_ADS_KEY_VALUE
(
      F_OBJECT_ID                   IN NUMBER,
      F_OBJECT_TYPE_ID              IN NUMBER,
      F_CHILD_CONFIG_OBJECT_TYPE_ID IN NUMBER
)
    RETURN T_ADS_KEY_VALUE PIPELINED
  AS
    PRAGMA AUTONOMOUS_TRANSACTION;
    F_TEMP_OBJECT_ID             NUMBER;
    F_TEMP_OBJECT_TYPE_ID        NUMBER;
    F_TEMP_OBJECT_TYPE           VARCHAR2(255);
    F_CHILD_CONFIG_OBJECT_TYPE   VARCHAR2(512);
    F_KEY_VALUE_OBJECT_TYPE_ID   NUMBER;
    F_KEY_VALUE_OBJECT_TYPE      VARCHAR2(512) := NULL;
    F_OBJECT_MODULE_ID           VARCHAR2(512) := NULL;
    F_OBJECT_LEVEL               NUMBER;
    F_TBL_REF_COUNT              NUMBER := 0;
    F_TBL_REF_IND                NUMBER := 0;
    F_CURRENT_TABLE_NAME         VARCHAR2(4000);
    F_CURRENT_PARENT_COLUMN_NAME VARCHAR2(4000);
    F_CURRENT_COLUMN_NAME        VARCHAR2(4000);
    F_PREVIOUS_OBJECT_ID         NUMBER;
    F_CURRENT_OBJECT_ID          VARCHAR2(4000);
    F_CURRENT_OBJECT_TYPE_ID     VARCHAR2(4000);
    F_CURRENT_OBJECT_LEVEL       NUMBER;
    F_CURRENT_OBJECT_TYPE        VARCHAR2(4000);
    F_CURRENT_OBJECT_PARENT_TYPE VARCHAR2(4000);
    F_PARENT_OBJECT_TYPE_ID      VARCHAR2(4000);
    F_OBJECT_KEY_ID              NUMBER;
    F_OBJECT_KEY                 VARCHAR2(256);
    F_OBJECT_DETAILS_SQL_STMT    VARCHAR2(4000);
    F_KEY_VALUE_SQL_STMT         VARCHAR2(4000);
    F_MAP_ID                     NUMBER;
    F_SUBJECT_ID                 NUMBER;
    F_PROJECT_ID                 NUMBER;
    F_SYSTEM_ID                  NUMBER;
    F_SCE_ID                     NUMBER;
    F_STM_ID                     NUMBER;
    F_STCM_ID                    NUMBER;
    F_SCE_DATABASE_TYPE          VARCHAR2(64);
    F_SYSTEM_BASED 				 NUMBER(1);
    F_REL_GTT_CNT 				 NUMBER;
    F_OBJECT_PARENT_TYPE 		 VARCHAR2(4000);
    F_MASTER_TYPE_ID			 NUMBER;
    KEY_VALUE_RES_CURSOR SYS_REFCURSOR;
  BEGIN
        IF F_OBJECT_ID<-1 OR  F_OBJECT_TYPE_ID<-1 OR  F_CHILD_CONFIG_OBJECT_TYPE_ID <-1 THEN
            RETURN;
        END IF;
	DELETE FROM ADS_KEY_VALUE_GTT;
    F_PREVIOUS_OBJECT_ID := F_OBJECT_ID;
    SELECT OBJECT_TYPE_ID
    INTO F_KEY_VALUE_OBJECT_TYPE_ID
    FROM ADS_KEY_VALUE_OBJECTS
    WHERE OBJECT_TYPE = 'ADS_KEY_VALUE';
    SELECT OBJECT_TYPE,
      MODULE_KEY,
      OBJECT_LEVEL,
      OBJECT_PARENT_TYPE
    INTO F_KEY_VALUE_OBJECT_TYPE,
      F_OBJECT_MODULE_ID,
      F_OBJECT_LEVEL,
      F_OBJECT_PARENT_TYPE
    FROM ADS_KEY_VALUE_OBJECTS
    WHERE OBJECT_TYPE_ID   = F_OBJECT_TYPE_ID;

    IF F_OBJECT_PARENT_TYPE = 'RELATIONSHIP_MASTER' THEN
      BEGIN
	    SELECT OBJECT_TYPE_ID
	    INTO F_MASTER_TYPE_ID
        FROM ADS_KEY_VALUE_OBJECTS
	    WHERE OBJECT_TYPE = F_OBJECT_PARENT_TYPE;
	  END;
	END IF;

    F_TEMP_OBJECT_ID      := F_OBJECT_ID;
    F_TEMP_OBJECT_TYPE_ID := F_OBJECT_TYPE_ID;
    F_TEMP_OBJECT_TYPE    := F_KEY_VALUE_OBJECT_TYPE;

	SELECT SYSTEM_BASED INTO F_SYSTEM_BASED
	FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE_ID = F_OBJECT_TYPE_ID;

    --TODO
    IF F_CHILD_CONFIG_OBJECT_TYPE_ID IS NOT NULL AND F_CHILD_CONFIG_OBJECT_TYPE_ID > 0 THEN
      BEGIN
        SELECT OBJECT_TYPE
        INTO F_CHILD_CONFIG_OBJECT_TYPE
        FROM ADS_KEY_VALUE_OBJECTS
        WHERE OBJECT_TYPE_ID = F_CHILD_CONFIG_OBJECT_TYPE_ID;
	F_TEMP_OBJECT_TYPE_ID := F_KEY_VALUE_OBJECT_TYPE_ID;
        F_TEMP_OBJECT_TYPE    := F_CHILD_CONFIG_OBJECT_TYPE;

        SELECT KV_ID
        INTO F_TEMP_OBJECT_ID
        FROM ADS_KEY_VALUE
        WHERE OBJECT_ID    = F_OBJECT_ID
        AND OBJECT_TYPE_ID = F_OBJECT_TYPE_ID
        AND KEY_NAME       = F_KEY_VALUE_OBJECT_TYPE
          || '#'
          || F_CHILD_CONFIG_OBJECT_TYPE;

      EXCEPTION
      WHEN NO_DATA_FOUND THEN
        F_TEMP_OBJECT_ID := NULL;
        F_OBJECT_KEY_ID := NULL;
      END;
    END IF;
    INSERT INTO ADS_KV_OBJECT_TYPE_GTT
    SELECT KVOT.OBJECT_TYPE_ID,
      KVOT.OBJECT_TYPE,
      KVOT.OBJECT_TABLE,
      KVOT.OBJECT_TABLE_COLUMN,
      KVOT.OBJECT_PARENT_TYPE,
      KVOT.OBJECT_PARENT_COLUMN_ID,
      KVOT.OBJECT_LEVEL,
      KVOT.OBJECT_TYPE
      || '#'
      || F_TEMP_OBJECT_TYPE
    FROM ADS_KEY_VALUE_OBJECTS KVOT
      START WITH KVOT.OBJECT_TYPE         = F_KEY_VALUE_OBJECT_TYPE
      CONNECT BY nocycle KVOT.OBJECT_TYPE = prior KVOT.OBJECT_PARENT_TYPE;
    FOR LOOP_KVOT                        IN
    ( SELECT * FROM ADS_KV_OBJECT_TYPE_GTT
    )
    LOOP
      IF TRIM(LOOP_KVOT.OBJECT_PARENT_COLUMN_ID) IS NOT NULL THEN
        F_CURRENT_TABLE_NAME                     := LOOP_KVOT.OBJECT_TABLE;
        F_CURRENT_PARENT_COLUMN_NAME             := LOOP_KVOT.OBJECT_PARENT_COLUMN_ID;
        F_CURRENT_OBJECT_TYPE_ID                 := LOOP_KVOT.OBJECT_TYPE_ID;
        F_CURRENT_COLUMN_NAME                    := LOOP_KVOT.OBJECT_TABLE_COLUMN;
        F_CURRENT_OBJECT_LEVEL                   := LOOP_KVOT.OBJECT_LEVEL;
        F_CURRENT_OBJECT_TYPE                    := LOOP_KVOT.OBJECT_TYPE;
        F_CURRENT_OBJECT_PARENT_TYPE             := LOOP_KVOT.OBJECT_PARENT_TYPE;
        BEGIN
          IF F_OBJECT_MODULE_ID = 'com.ads.mm.permission.mm' THEN
            BEGIN
              IF F_CURRENT_OBJECT_TYPE = 'MM_MAPPING_ROW' THEN
                BEGIN
                  SELECT MAP_ID
                  INTO F_MAP_ID
                  FROM MAPPING_SPECIFICATION
                  WHERE MAP_SEQ_ID      = F_PREVIOUS_OBJECT_ID;
                  F_PREVIOUS_OBJECT_ID := F_MAP_ID;
                  INSERT
                  INTO ADS_KV_OBJECT_TYPE_REL_IDS_GTT VALUES
                    (
                      F_MAP_ID ,
                      F_CURRENT_OBJECT_PARENT_TYPE
                    );
                END;
              ELSIF F_CURRENT_OBJECT_TYPE = 'MM_MAPPING' THEN
                BEGIN
                  SELECT SUBJECT_ID,
                    PROJECT_ID
                  INTO F_SUBJECT_ID,
                    F_PROJECT_ID
                  FROM MAPPING_DETAILS
                  WHERE MAP_ID           = F_PREVIOUS_OBJECT_ID;
                  F_PREVIOUS_OBJECT_ID  := F_SUBJECT_ID;
                  IF TRIM(F_SUBJECT_ID) IS NOT NULL AND F_SUBJECT_ID <> -1 THEN
                    BEGIN
                      INSERT
                      INTO ADS_KV_OBJECT_TYPE_REL_IDS_GTT VALUES
                        (
                          F_SUBJECT_ID,
                          F_CURRENT_OBJECT_PARENT_TYPE
                        );
                    END;
                  END IF;
                  INSERT
                  INTO ADS_KV_OBJECT_TYPE_REL_IDS_GTT VALUES
                    (
                      F_PROJECT_ID,
                      'MM_PROJECT'
                    );
                END;
              ELSIF F_CURRENT_OBJECT_TYPE = 'MM_SUBJECT' AND ((TRIM(F_SUBJECT_ID) IS NOT NULL AND F_SUBJECT_ID <> -1) OR F_CURRENT_OBJECT_TYPE_ID = F_OBJECT_TYPE_ID) THEN
                BEGIN
                  INSERT INTO ADS_KV_OBJECT_TYPE_REL_IDS_GTT
                WITH object_hir_v AS
                  (SELECT SD.SUBJECT_ID,
                    SD.PARENT_SUBJECT_ID
                  FROM SUBJECT_DETAILS SD
                    START WITH SD.SUBJECT_ID         = F_PREVIOUS_OBJECT_ID
                    CONNECT BY nocycle SD.SUBJECT_ID = prior SD.PARENT_SUBJECT_ID
                  )
                SELECT SUBJECT_ID,
                  F_CURRENT_OBJECT_TYPE
                FROM OBJECT_HIR_V
                WHERE SUBJECT_ID          <> F_PREVIOUS_OBJECT_ID;
                IF F_KEY_VALUE_OBJECT_TYPE = 'MM_SUBJECT' THEN
                  BEGIN
                    SELECT PROJECT_ID
                    INTO F_PROJECT_ID
                    FROM SUBJECT_DETAILS
                    WHERE SUBJECT_ID = F_PREVIOUS_OBJECT_ID;
                    INSERT
                    INTO ADS_KV_OBJECT_TYPE_REL_IDS_GTT VALUES
                      (
                        F_PROJECT_ID,
                        'MM_PROJECT'
                      );
                  END;
                END IF;
              END;
            END IF;
          END;
        ELSIF F_OBJECT_MODULE_ID = 'com.ads.mm.permission.sm' THEN
          BEGIN
            IF F_CURRENT_OBJECT_TYPE = 'SM_COLUMN' THEN
              BEGIN
                SELECT STM_ID
                INTO F_STM_ID
                FROM SYSTEM_TABLE_COLUMNS_METADATA
                WHERE STCM_ID         = F_PREVIOUS_OBJECT_ID;
                F_PREVIOUS_OBJECT_ID := F_STM_ID;
                INSERT
                INTO ADS_KV_OBJECT_TYPE_REL_IDS_GTT VALUES
                  (
                    F_STM_ID,
                    F_CURRENT_OBJECT_PARENT_TYPE
                  );
              END;
            ELSIF F_CURRENT_OBJECT_TYPE = 'SM_TABLE' THEN
              BEGIN
                SELECT SCE_ID
                INTO F_SCE_ID
                FROM SYSTEM_TABLE_METADATA
                WHERE STM_ID = F_PREVIOUS_OBJECT_ID;
                SELECT DATABASE_TYPE
                INTO F_SCE_DATABASE_TYPE
                FROM SYS_CON_ENVIRONMENTS
                WHERE SCE_ID           = F_SCE_ID;
              F_PREVIOUS_OBJECT_ID := F_SCE_ID;
              INSERT
              INTO ADS_KV_OBJECT_TYPE_REL_IDS_GTT VALUES
                (
                  F_SCE_ID ,
                  F_CURRENT_OBJECT_PARENT_TYPE
                );
            END;
          ELSIF F_CURRENT_OBJECT_TYPE = 'SM_ENVIRONMENT' THEN
            BEGIN
              SELECT SYSTEM_ID
              INTO F_SYSTEM_ID
              FROM SYS_CON_ENVIRONMENTS
              WHERE SCE_ID          = F_PREVIOUS_OBJECT_ID;
              F_PREVIOUS_OBJECT_ID := F_SYSTEM_ID;
              INSERT
              INTO ADS_KV_OBJECT_TYPE_REL_IDS_GTT VALUES
                (
                  F_SYSTEM_ID ,
                  F_CURRENT_OBJECT_PARENT_TYPE
                );
            END;
          ELSIF F_CURRENT_OBJECT_TYPE = 'SM_SYSTEM' THEN
            BEGIN
              INSERT
              INTO ADS_KV_OBJECT_TYPE_REL_IDS_GTT VALUES
                (
                  -1,
                  F_CURRENT_OBJECT_PARENT_TYPE
                );
            END;
          END IF;
        END;
      END IF;
    EXCEPTION
    WHEN NO_DATA_FOUND THEN
      F_OBJECT_KEY_ID := NULL;
    END;
  END IF;
END LOOP LOOP_KVOT;
INSERT INTO ADS_KV_OBJECT_TYPE_REL_GTT
SELECT PARENT_IDS.OBJECT_ID,
  TBL_REF.OBJECT_TYPE_ID,
  TBL_REF.OBJECT_TYPE,
  TBL_REF.OBJECT_REF_KEY,
  TBL_REF.OBJECT_LEVEL
FROM ADS_KV_OBJECT_TYPE_GTT TBL_REF
JOIN ADS_KV_OBJECT_TYPE_REL_IDS_GTT PARENT_IDS
ON TBL_REF.OBJECT_TYPE = PARENT_IDS.OBJECT_TYPE;

SELECT count(*) INTO F_REL_GTT_CNT FROM ADS_KV_OBJECT_TYPE_REL_GTT;

IF (F_OBJECT_MODULE_ID = 'com.ads.mm.permission.bgm' AND F_REL_GTT_CNT = 0 AND F_OBJECT_ID <> -1) THEN
    BEGIN
        INSERT INTO ADS_KV_OBJECT_TYPE_REL_GTT
        SELECT PARENT_IDS.OBJECT_ID,
                TBL_REF.OBJECT_TYPE_ID,
                TBL_REF.OBJECT_TYPE,
                TBL_REF.OBJECT_REF_KEY,
                TBL_REF.OBJECT_LEVEL
        FROM ADS_KV_OBJECT_TYPE_GTT TBL_REF
                JOIN (SELECT -1 OBJECT_ID, OBJECT_TYPE FROM ADS_KV_OBJECT_TYPE_GTT WHERE OBJECT_LEVEL = 0) PARENT_IDS
                ON TBL_REF.OBJECT_TYPE = PARENT_IDS.OBJECT_TYPE;
    END;
END IF;

IF (F_OBJECT_MODULE_ID = 'com.ads.mm.permission.generic.relationship' AND F_OBJECT_ID <> -1) THEN
    BEGIN
        INSERT INTO ADS_KV_OBJECT_TYPE_REL_GTT
        SELECT (SELECT rd.RM_ID FROM ADS_ASSOCIATIONS assc, RELATIONSHIP_DETAILS rd WHERE assc.ID = F_OBJECT_ID AND assc.RELATIONSHIP_DETAIL_ID = rd.RD_ID) OBJECT_ID,
                TBL_REF.OBJECT_TYPE_ID,
				TBL_REF.OBJECT_TYPE,
				TBL_REF.OBJECT_REF_KEY,
				TBL_REF.OBJECT_LEVEL
        FROM ADS_KV_OBJECT_TYPE_GTT TBL_REF
        WHERE OBJECT_LEVEL = 0;
    END;
END IF;

IF (F_KEY_VALUE_OBJECT_TYPE = 'RELATIONSHIP_MASTER') THEN
  BEGIN
	  INSERT INTO ADS_KEY_VALUE_GTT
	    SELECT AKV.*,
	           NULL P_KV_ID,
	           -1 OBJECT_LEVEL,
	           0 IS_KEY_FROM_PARENT,
	           0 IS_KEY_FROM_CHILD
	    FROM ADS_KEY_VALUE AKV
	    WHERE OBJECT_TYPE_ID = F_TEMP_OBJECT_TYPE_ID
	    AND   OBJECT_ID      = F_TEMP_OBJECT_ID;
  END;
ELSE
  BEGIN
	INSERT INTO ADS_KEY_VALUE_GTT
	SELECT AKV.*,
	  NULL P_KV_ID,
	  -1 OBJECT_LEVEL,
	  0 IS_KEY_FROM_PARENT,
	  1 IS_KEY_FROM_CHILD
	FROM ADS_KEY_VALUE AKV
	WHERE AKV.OBJECT_TYPE_ID = F_TEMP_OBJECT_TYPE_ID
	AND AKV.OBJECT_ID        = F_TEMP_OBJECT_ID
	AND AKV.KEY_NAME NOT    IN
	  (SELECT F_KEY_VALUE_OBJECT_TYPE
	    || '#'
	    || KVOT.OBJECT_TYPE
	  FROM ADS_KEY_VALUE_OBJECTS KVOT
	    START WITH KVOT.OBJECT_TYPE                = F_KEY_VALUE_OBJECT_TYPE
	    CONNECT BY nocycle KVOT.OBJECT_PARENT_TYPE = prior KVOT.OBJECT_TYPE
	  );
  END;
END IF;

IF (F_KEY_VALUE_OBJECT_TYPE = 'RELATIONSHIP_DETAILS') THEN
    DECLARE
      ROWCOUNT NUMBER;
      ADSKVT_OBJECT_TYPE_ID NUMBER;
      ADSKVT_OBJECT_ID NUMBER;
    BEGIN
        SELECT COUNT(*) INTO ROWCOUNT FROM ADS_KV_OBJECT_TYPE_REL_GTT;
        IF (ROWCOUNT > 0) THEN
            BEGIN
                SELECT OBJECT_TYPE_ID, OBJECT_ID
                INTO ADSKVT_OBJECT_TYPE_ID, ADSKVT_OBJECT_ID
                FROM ADS_KV_OBJECT_TYPE_REL_GTT
                WHERE ROWNUM = 1;
                
                INSERT INTO OBJECT_KEY_ID_GTT
                SELECT KV_ID
                FROM ADS_KEY_VALUE
                WHERE OBJECT_TYPE_ID = ADSKVT_OBJECT_TYPE_ID
                AND OBJECT_ID      = ADSKVT_OBJECT_ID;
            END;
            FOR LOOP_OBJECT_KEY_ID IN
            (
                SELECT * FROM OBJECT_KEY_ID_GTT
            )
            LOOP 
                BEGIN
                    SELECT LOOP_OBJECT_KEY_ID.KV_ID
                    INTO F_OBJECT_KEY_ID
                    FROM DUAL;
                    
                    DELETE FROM ADS_KEY_VALUE_H_GTT;
    
                    IF (F_OBJECT_KEY_ID IS NOT NULL) THEN
                        INSERT INTO ADS_KEY_VALUE_H_GTT
                          WITH GLOBALKVS AS
                            (SELECT KV.*,
                              KV. KV_ID                AS P_KV_ID,
                              0                        AS OBJECT_LEVEL,
                              1                        AS IS_KEY_FROM_PARENT,
                              0                        AS IS_KEY_FROM_CHILD
                            FROM ADS_KEY_VALUE KV
                            WHERE KV.KV_ID = F_OBJECT_KEY_ID
                            ),
                            LOCALKVS AS
                            (SELECT * FROM ADS_KEY_VALUE_GTT
                            )
                          SELECT LV.KV_ID,
                            GV.KEY_NAME,
                            LV.KEY_VALUE,
                            GV.OBJECT_TYPE_ID,
                            GV.OBJECT_ID,
                            GV.DATATYPE_ID,
                            GV.KV_TYPE,
                            GV.LABEL_WIDTH,
                            GV.CONTROL_WIDTH,
                            GV.KV_ORDER,
                            GV.COMPONENT,
                            LV.DEFAULTVALUE,
                            GV.ISPUBLISHED,
                            GV.ISSYSTEMBASED,
                            GV.DISPLAY_POLICY,
                            GV.REGEX,
                            GV.MANDATORY,
                            GV.ENABLED,
                            GV.FIELD_LENGTH,
                            GV.PROCESSING_ORDER,
                            GV.VISIBLE,
                            GV.LOAD_ON_STARTUP,
                            GV.VALUE_OBJECT_REF,
                            GV.CREATED_BY,
                            GV.CREATED_DATE_TIME,
                            LV.LAST_MODIFIED_BY,
                            LV.LAST_MODIFIED_DATE_TIME,
                            GV.DESCRIPTION,
                            LV.IS_FORM_PROPERTY,
                            LV.IS_GRID_PROPERTY,
                            LV.IS_PIVOTABLE,
                            GV.KV_ID P_KV_ID,
                            GV.OBJECT_LEVEL,
                            1 AS IS_KEY_FROM_PARENT,
                            LV.IS_KEY_FROM_CHILD
                          FROM LOCALKVS LV
                          JOIN GLOBALKVS GV ON UPPER(LV.KEY_NAME) = UPPER(GV.KEY_NAME)
                          UNION
                          SELECT LV.*
                          FROM LOCALKVS LV
                          LEFT JOIN GLOBALKVS GV ON UPPER(LV.KEY_NAME) = UPPER(GV.KEY_NAME)
                          WHERE GV.KV_ID       IS NULL
                          UNION
                          SELECT GV.*
                          FROM GLOBALKVS GV
                          LEFT JOIN LOCALKVS LV ON UPPER(GV.KEY_NAME) = UPPER(LV.KEY_NAME)
                          WHERE LV.KV_ID       IS NULL;
                          DELETE FROM ADS_KEY_VALUE_GTT;
                          INSERT INTO ADS_KEY_VALUE_GTT
                          SELECT * FROM ADS_KEY_VALUE_H_GTT;
                          DELETE FROM ADS_KEY_VALUE_H_GTT;
        
                        DELETE FROM OBJECT_KEY_ID_GTT WHERE KV_ID = F_OBJECT_KEY_ID;
                    END IF;
                END;
            END LOOP;
             
        END IF;
        DELETE FROM ADS_KV_OBJECT_TYPE_REL_GTT;
        DELETE FROM ADS_KV_OBJECT_TYPE_REL_IDS_GTT;
        DELETE FROM ADS_KV_OBJECT_TYPE_GTT;
        COMMIT;
        FOR LOOP_KEY_VALUE IN
        (SELECT             *
        FROM ADS_KEY_VALUE_GTT
        WHERE OBJECT_LEVEL <> F_OBJECT_LEVEL
        ORDER BY KEY_NAME
        )
        LOOP
          BEGIN
            PIPE row(GT_ADS_KEY_VALUE_ROW(LOOP_KEY_VALUE.KV_ID, LOOP_KEY_VALUE.KEY_NAME, LOOP_KEY_VALUE.KEY_VALUE, LOOP_KEY_VALUE.OBJECT_TYPE_ID, LOOP_KEY_VALUE.OBJECT_ID, LOOP_KEY_VALUE.DATATYPE_ID, LOOP_KEY_VALUE.KV_TYPE, LOOP_KEY_VALUE.LABEL_WIDTH, LOOP_KEY_VALUE.CONTROL_WIDTH, LOOP_KEY_VALUE.KV_ORDER, LOOP_KEY_VALUE.COMPONENT, LOOP_KEY_VALUE.DEFAULTVALUE, LOOP_KEY_VALUE.ISPUBLISHED, LOOP_KEY_VALUE.ISSYSTEMBASED, LOOP_KEY_VALUE.DISPLAY_POLICY, LOOP_KEY_VALUE.REGEX, LOOP_KEY_VALUE.MANDATORY, LOOP_KEY_VALUE.ENABLED, LOOP_KEY_VALUE.FIELD_LENGTH, LOOP_KEY_VALUE.PROCESSING_ORDER, LOOP_KEY_VALUE.VISIBLE, LOOP_KEY_VALUE.LOAD_ON_STARTUP, LOOP_KEY_VALUE.VALUE_OBJECT_REF, LOOP_KEY_VALUE.CREATED_BY, LOOP_KEY_VALUE.CREATED_DATE_TIME, LOOP_KEY_VALUE.LAST_MODIFIED_BY, LOOP_KEY_VALUE.LAST_MODIFIED_DATE_TIME, LOOP_KEY_VALUE.DESCRIPTION, LOOP_KEY_VALUE.IS_FORM_PROPERTY, LOOP_KEY_VALUE.IS_GRID_PROPERTY, LOOP_KEY_VALUE.IS_PIVOTABLE, LOOP_KEY_VALUE.P_KV_ID, LOOP_KEY_VALUE.OBJECT_LEVEL, LOOP_KEY_VALUE.IS_KEY_FROM_PARENT, LOOP_KEY_VALUE.IS_KEY_FROM_CHILD));
          END;
        END LOOP LOOP_KEY_VALUE;
        FOR LOOP_KEY_VALUE IN
        (SELECT             *
        FROM ADS_KEY_VALUE_GTT
        WHERE OBJECT_LEVEL = F_OBJECT_LEVEL
        ORDER BY KEY_NAME
        )
        LOOP
          BEGIN
            PIPE row(GT_ADS_KEY_VALUE_ROW(LOOP_KEY_VALUE.KV_ID, LOOP_KEY_VALUE.KEY_NAME, LOOP_KEY_VALUE.KEY_VALUE, LOOP_KEY_VALUE.OBJECT_TYPE_ID, LOOP_KEY_VALUE.OBJECT_ID, LOOP_KEY_VALUE.DATATYPE_ID, LOOP_KEY_VALUE.KV_TYPE, LOOP_KEY_VALUE.LABEL_WIDTH, LOOP_KEY_VALUE.CONTROL_WIDTH, LOOP_KEY_VALUE.KV_ORDER, LOOP_KEY_VALUE.COMPONENT, LOOP_KEY_VALUE.DEFAULTVALUE, LOOP_KEY_VALUE.ISPUBLISHED, LOOP_KEY_VALUE.ISSYSTEMBASED, LOOP_KEY_VALUE.DISPLAY_POLICY, LOOP_KEY_VALUE.REGEX, LOOP_KEY_VALUE.MANDATORY, LOOP_KEY_VALUE.ENABLED, LOOP_KEY_VALUE.FIELD_LENGTH, LOOP_KEY_VALUE.PROCESSING_ORDER, LOOP_KEY_VALUE.VISIBLE, LOOP_KEY_VALUE.LOAD_ON_STARTUP, LOOP_KEY_VALUE.VALUE_OBJECT_REF, LOOP_KEY_VALUE.CREATED_BY, LOOP_KEY_VALUE.CREATED_DATE_TIME, LOOP_KEY_VALUE.LAST_MODIFIED_BY, LOOP_KEY_VALUE.LAST_MODIFIED_DATE_TIME, LOOP_KEY_VALUE.DESCRIPTION, LOOP_KEY_VALUE.IS_FORM_PROPERTY, LOOP_KEY_VALUE.IS_GRID_PROPERTY, LOOP_KEY_VALUE.IS_PIVOTABLE, LOOP_KEY_VALUE.P_KV_ID, LOOP_KEY_VALUE.OBJECT_LEVEL, LOOP_KEY_VALUE.IS_KEY_FROM_PARENT, LOOP_KEY_VALUE.IS_KEY_FROM_CHILD));
          END;
        END LOOP LOOP_KEY_VALUE;
    END;
ELSE
	FOR LOOP_ADSKVT IN
	( SELECT * FROM ADS_KV_OBJECT_TYPE_REL_GTT
	)
	LOOP
	  BEGIN
	    SELECT KV_ID
	    INTO F_OBJECT_KEY_ID
	    FROM ADS_KEY_VALUE
	    WHERE KEY_NAME     = LOOP_ADSKVT.OBJECT_REF_KEY
	    AND OBJECT_TYPE_ID = LOOP_ADSKVT.OBJECT_TYPE_ID
	    AND OBJECT_ID      = LOOP_ADSKVT.OBJECT_ID
	    AND VISIBLE        = 0;
	  EXCEPTION
	  WHEN NO_DATA_FOUND THEN
	    F_OBJECT_KEY_ID := NULL;
	  END;
	  IF (F_OBJECT_KEY_ID IS NOT NULL) THEN
	    INSERT INTO ADS_KEY_VALUE_H_GTT
          WITH GLOBALKVS AS
            (
              SELECT KV.*,
              KV. KV_ID                AS P_KV_ID,
              LOOP_ADSKVT.OBJECT_LEVEL AS OBJECT_LEVEL,
              1                        AS IS_KEY_FROM_PARENT,
              0                        AS IS_KEY_FROM_CHILD
              FROM ADS_KEY_VALUE KV
              WHERE KV.OBJECT_TYPE_ID = F_KEY_VALUE_OBJECT_TYPE_ID
              AND KV.OBJECT_ID        = F_OBJECT_KEY_ID
            ),
            LOCALKVS AS
            (
              SELECT * FROM ADS_KEY_VALUE_GTT
            )
              SELECT LV.KV_ID,
                GV.KEY_NAME,
                LV.KEY_VALUE,
                GV.OBJECT_TYPE_ID,
                GV.OBJECT_ID,
                GV.DATATYPE_ID,
                GV.KV_TYPE,
                GV.LABEL_WIDTH,
                GV.CONTROL_WIDTH,
                GV.KV_ORDER,
                GV.COMPONENT,
                LV.DEFAULTVALUE,
                GV.ISPUBLISHED,
                GV.ISSYSTEMBASED,
                GV.DISPLAY_POLICY,
                GV.REGEX,
                GV.MANDATORY,
                GV.ENABLED,
                GV.FIELD_LENGTH,
                GV.PROCESSING_ORDER,
                LV.VISIBLE,
                GV.LOAD_ON_STARTUP,
                GV.VALUE_OBJECT_REF,
                GV.CREATED_BY,
                GV.CREATED_DATE_TIME,
                LV.LAST_MODIFIED_BY,
                LV.LAST_MODIFIED_DATE_TIME,
                GV.DESCRIPTION,
                GV.IS_FORM_PROPERTY,
                GV.IS_GRID_PROPERTY,
                LV.IS_PIVOTABLE,
                GV.KV_ID P_KV_ID,
                GV.OBJECT_LEVEL,
                1 AS IS_KEY_FROM_PARENT,
                LV.IS_KEY_FROM_CHILD
              FROM LOCALKVS LV
              JOIN GLOBALKVS GV
              ON UPPER(LV.KEY_NAME) = UPPER(GV.KEY_NAME)
          UNION
              SELECT LV.*
              FROM LOCALKVS LV
              LEFT JOIN GLOBALKVS GV
              ON UPPER(LV.KEY_NAME) = UPPER(GV.KEY_NAME)
              WHERE GV.KV_ID       IS NULL
          UNION
              SELECT GV.*
              FROM GLOBALKVS GV
              LEFT JOIN LOCALKVS LV
              ON UPPER(GV.KEY_NAME) = UPPER(LV.KEY_NAME)
              WHERE LV.KV_ID       IS NULL;
          DELETE FROM ADS_KEY_VALUE_GTT;
          INSERT INTO ADS_KEY_VALUE_GTT
          SELECT * FROM ADS_KEY_VALUE_H_GTT;
          DELETE FROM ADS_KEY_VALUE_H_GTT;
        END IF;
	END LOOP LOOP_ADSKVT;
	DELETE FROM ADS_KV_OBJECT_TYPE_REL_GTT;
	DELETE FROM ADS_KV_OBJECT_TYPE_REL_IDS_GTT;
	DELETE
	FROM ADS_KV_OBJECT_TYPE_GTT;
	COMMIT;
	FOR LOOP_KEY_VALUE IN
	(SELECT             *
	FROM ADS_KEY_VALUE_GTT
	WHERE OBJECT_LEVEL <> F_OBJECT_LEVEL
	ORDER BY KEY_NAME
	)
	LOOP
	  BEGIN
	    PIPE row(GT_ADS_KEY_VALUE_ROW(LOOP_KEY_VALUE.KV_ID, LOOP_KEY_VALUE.KEY_NAME, LOOP_KEY_VALUE.KEY_VALUE, LOOP_KEY_VALUE.OBJECT_TYPE_ID, LOOP_KEY_VALUE.OBJECT_ID, LOOP_KEY_VALUE.DATATYPE_ID, LOOP_KEY_VALUE.KV_TYPE, LOOP_KEY_VALUE.LABEL_WIDTH, LOOP_KEY_VALUE.CONTROL_WIDTH, LOOP_KEY_VALUE.KV_ORDER, LOOP_KEY_VALUE.COMPONENT, LOOP_KEY_VALUE.DEFAULTVALUE, LOOP_KEY_VALUE.ISPUBLISHED, LOOP_KEY_VALUE.ISSYSTEMBASED, LOOP_KEY_VALUE.DISPLAY_POLICY, LOOP_KEY_VALUE.REGEX, LOOP_KEY_VALUE.MANDATORY, LOOP_KEY_VALUE.ENABLED, LOOP_KEY_VALUE.FIELD_LENGTH, LOOP_KEY_VALUE.PROCESSING_ORDER, LOOP_KEY_VALUE.VISIBLE, LOOP_KEY_VALUE.LOAD_ON_STARTUP, LOOP_KEY_VALUE.VALUE_OBJECT_REF, LOOP_KEY_VALUE.CREATED_BY, LOOP_KEY_VALUE.CREATED_DATE_TIME, LOOP_KEY_VALUE.LAST_MODIFIED_BY, LOOP_KEY_VALUE.LAST_MODIFIED_DATE_TIME, LOOP_KEY_VALUE.DESCRIPTION, LOOP_KEY_VALUE.IS_FORM_PROPERTY, LOOP_KEY_VALUE.IS_GRID_PROPERTY, LOOP_KEY_VALUE.IS_PIVOTABLE, LOOP_KEY_VALUE.P_KV_ID, LOOP_KEY_VALUE.OBJECT_LEVEL, LOOP_KEY_VALUE.IS_KEY_FROM_PARENT, LOOP_KEY_VALUE.IS_KEY_FROM_CHILD));
	  END;
	END LOOP LOOP_KEY_VALUE;
	FOR LOOP_KEY_VALUE IN
	(SELECT             *
	FROM ADS_KEY_VALUE_GTT
	WHERE OBJECT_LEVEL = F_OBJECT_LEVEL
	ORDER BY KEY_NAME
	)
	LOOP
	  BEGIN
	    PIPE row(GT_ADS_KEY_VALUE_ROW(LOOP_KEY_VALUE.KV_ID, LOOP_KEY_VALUE.KEY_NAME, LOOP_KEY_VALUE.KEY_VALUE, LOOP_KEY_VALUE.OBJECT_TYPE_ID, LOOP_KEY_VALUE.OBJECT_ID, LOOP_KEY_VALUE.DATATYPE_ID, LOOP_KEY_VALUE.KV_TYPE, LOOP_KEY_VALUE.LABEL_WIDTH, LOOP_KEY_VALUE.CONTROL_WIDTH, LOOP_KEY_VALUE.KV_ORDER, LOOP_KEY_VALUE.COMPONENT, LOOP_KEY_VALUE.DEFAULTVALUE, LOOP_KEY_VALUE.ISPUBLISHED, LOOP_KEY_VALUE.ISSYSTEMBASED, LOOP_KEY_VALUE.DISPLAY_POLICY, LOOP_KEY_VALUE.REGEX, LOOP_KEY_VALUE.MANDATORY, LOOP_KEY_VALUE.ENABLED, LOOP_KEY_VALUE.FIELD_LENGTH, LOOP_KEY_VALUE.PROCESSING_ORDER, LOOP_KEY_VALUE.VISIBLE, LOOP_KEY_VALUE.LOAD_ON_STARTUP, LOOP_KEY_VALUE.VALUE_OBJECT_REF, LOOP_KEY_VALUE.CREATED_BY, LOOP_KEY_VALUE.CREATED_DATE_TIME, LOOP_KEY_VALUE.LAST_MODIFIED_BY, LOOP_KEY_VALUE.LAST_MODIFIED_DATE_TIME, LOOP_KEY_VALUE.DESCRIPTION, LOOP_KEY_VALUE.IS_FORM_PROPERTY, LOOP_KEY_VALUE.IS_GRID_PROPERTY, LOOP_KEY_VALUE.IS_PIVOTABLE, LOOP_KEY_VALUE.P_KV_ID, LOOP_KEY_VALUE.OBJECT_LEVEL, LOOP_KEY_VALUE.IS_KEY_FROM_PARENT, LOOP_KEY_VALUE.IS_KEY_FROM_CHILD));
	  END;
	END LOOP LOOP_KEY_VALUE;
END IF;
RETURN;
END FN_GET_ADS_KEY_VALUE;
/

DECLARE
TABLECHECKERFLAG INT:=0;
BEGIN
SELECT COUNT(*) INTO TABLECHECKERFLAG FROM ADS_MODULES WHERE MODULE_ACTION = 'mappingManager.erwin';
   IF TABLECHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'UPDATE ADS_MODULES SET MODULE_ACTION=''mappingManager.erwin'' WHERE MODULE_FORWARD=''mappingmanager''';
      EXECUTE IMMEDIATE 'UPDATE ADS_MODULES SET MODULE_ACTION=''systemManager.erwin'' WHERE MODULE_FORWARD=''systemmanager''';
      EXECUTE IMMEDIATE 'UPDATE ADS_MODULES SET MODULE_ACTION=''resourceManager.erwin'' WHERE MODULE_FORWARD=''resourcemanager''';
      EXECUTE IMMEDIATE 'UPDATE ADS_MODULES SET MODULE_ACTION=''codesetManager.erwin'' WHERE MODULE_FORWARD=''codesetmanager''';
      EXECUTE IMMEDIATE 'UPDATE ADS_MODULES SET MODULE_ACTION=''releaseManager.erwin'' WHERE MODULE_FORWARD=''releasemanager''';
      EXECUTE IMMEDIATE 'UPDATE ADS_MODULES SET MODULE_ACTION=''referenceDataset.erwin'' WHERE MODULE_FORWARD=''referencedatamanager''';
      EXECUTE IMMEDIATE 'UPDATE ADS_MODULES SET MODULE_ACTION=''codeAutomationTemplate.erwin'' WHERE MODULE_FORWARD=''codeautomationtemplate''';
      EXECUTE IMMEDIATE 'UPDATE ADS_MODULES SET MODULE_ACTION=''testManager.erwin'' WHERE MODULE_FORWARD=''testmanager''';
      EXECUTE IMMEDIATE 'UPDATE ADS_MODULES SET MODULE_ACTION=''requirementsManager.erwin'' WHERE MODULE_FORWARD=''requirementsmanager''';
      EXECUTE IMMEDIATE 'UPDATE ADS_MODULES SET MODULE_ACTION=''reportingManager.erwin'' WHERE MODULE_FORWARD=''reportingmanager''';
      EXECUTE IMMEDIATE 'UPDATE ADS_MODULES SET MODULE_ACTION=''businessGlossaryManager.erwin'' WHERE MODULE_FORWARD=''businessglossarymanager''';
      EXECUTE IMMEDIATE 'UPDATE ADS_MODULES SET MODULE_ACTION=''workflowmanager.erwin'' WHERE MODULE_FORWARD=''workflowmanager''';
   END IF;
END;
/

DECLARE
   TABLECHECKERFLAG INT:=0;
BEGIN
SELECT COUNT(*) INTO TABLECHECKERFLAG FROM CAT_TEMPLATES where CAT_ACTION='exportToSSISDTSX.erwin&ssisExportOption=SSISDefaultXML';
   IF TABLECHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'UPDATE CAT_TEMPLATES SET CAT_ACTION=''exportToSSISDTSX.erwin&ssisExportOption=SSISDefaultXML'' WHERE CAT_NAME = ''Microsoft SSIS DTSX'' AND CAT_DESC=''SSIS Default XML''';
      EXECUTE IMMEDIATE 'UPDATE CAT_TEMPLATES SET CAT_ACTION=''exportToSSISDTSX.erwin&ssisExportOption=SSISSQLXML'' WHERE CAT_NAME = ''Microsoft SSIS DTSX'' AND CAT_DESC=''SSIS Include SQL Expression''';
      EXECUTE IMMEDIATE 'UPDATE CAT_TEMPLATES SET CAT_ACTION=''exportToDSTG.erwin&dstgVersionOption=DSTGVersion7.5&exportType=PARALLELJOB'' WHERE CAT_NAME = ''Parallel Job (v7.5)'' AND CAT_DESC=''Datastage 7.5 Parallel Job''';
      EXECUTE IMMEDIATE 'UPDATE CAT_TEMPLATES SET CAT_ACTION=''exportToDSTG.erwin&dstgVersionOption=DSTGVersion7.5&exportType=SERVERJOB'' WHERE CAT_NAME = ''Server Job (v7.5)'' AND CAT_DESC=''Datastage 7.5 Server Job''';
      EXECUTE IMMEDIATE 'UPDATE CAT_TEMPLATES SET CAT_ACTION=''exportToDSTG.erwin&dstgVersionOption=DSTGVersion8.x&exportType=PARALLELJOB&dstgExportOption=DSTGDefaultXML'' WHERE CAT_NAME = ''Parallel Job (v8.0 & above)'' AND CAT_DESC=''Datastage 8.0 Parallel Job''';
      EXECUTE IMMEDIATE 'UPDATE CAT_TEMPLATES SET CAT_ACTION=''exportToDSTG.erwin&dstgVersionOption=DSTGVersion8.x&exportType=SERVERJOB&dstgExportOption=DSTGDefaultXML'' WHERE CAT_NAME = ''Server Job (v8.0 & above)'' AND CAT_DESC=''Datastage 8.0 Server Job''';
      EXECUTE IMMEDIATE 'UPDATE CAT_TEMPLATES SET CAT_ACTION=''exportToDSTG.erwin&dstgVersionOption=DSTGVersion8.x&exportType=PARALLELJOB&dstgExportOption=DSTGSQLXML'' WHERE CAT_NAME = ''Parallel Job Include Sql Expression (v8.0 & above)'' AND CAT_DESC=''Parallel Job Include Sql Expression''';
      EXECUTE IMMEDIATE 'UPDATE CAT_TEMPLATES SET CAT_ACTION=''exportToDSTG.erwin&dstgVersionOption=DSTGVersion8.x&exportType=SERVERJOB&dstgExportOption=DSTGSQLXML'' WHERE CAT_NAME = ''Server Job Include Sql Expression (v8.0 & above)'' AND CAT_DESC=''Server Job Include Sql Expression''';
      EXECUTE IMMEDIATE 'UPDATE CAT_TEMPLATES SET CAT_ACTION=''exportXml.erwin'' WHERE CAT_NAME = ''Standard Informatica'' AND CAT_DESC=''Standard Informatica''';
      EXECUTE IMMEDIATE 'UPDATE CAT_TEMPLATES SET CAT_ACTION=''exportAll.erwin&exportType=MappingManagerXML'' WHERE CAT_NAME = ''Mapping Manager XML'' AND CAT_DESC=''Mapping Manager XML''';
      EXECUTE IMMEDIATE 'UPDATE CAT_TEMPLATES SET CAT_ACTION=''exportODIXML.erwin'' WHERE CAT_NAME = ''Standard ODI'' AND CAT_DESC=''This template creates a simple ETL job for the selected Mappings''';
   END IF;
END;
/
DECLARE
TABLECHECKERFLAG INT;
BEGIN
    SELECT COUNT(*) INTO TABLECHECKERFLAG FROM ALL_TABLES WHERE OWNER = sys_context( 'userenv', 'current_schema' ) AND TABLE_NAME = UPPER('CUSTOM_VIEW_CRITERIA');
    IF TABLECHECKERFLAG = 0 THEN
        EXECUTE IMMEDIATE 'CREATE TABLE "CUSTOM_VIEW_CRITERIA" (
              "CV_ID" NUMBER NOT NULL ENABLE,
              "OBJECT_TYPE_ID" NUMBER NOT NULL,
              "NAME" VARCHAR(80) NOT NULL,
              "DESCRIPTION" VARCHAR(4000) NULL,
              "CRITERIA" CLOB NOT NULL,
              "ICON" VARCHAR(50) NULL,
              "COLOR" VARCHAR(50) NULL,
              "VIEW_TYPE_ID" NUMBER NOT NULL,
              CONSTRAINT "CUSTOM_VIEW_CRITERIA_PK" PRIMARY KEY ("CV_ID"),
              CONSTRAINT "FK_CUST_VIEW_OTID" FOREIGN KEY("OBJECT_TYPE_ID") REFERENCES ADS_KEY_VALUE_OBJECTS("OBJECT_TYPE_ID"),
              CONSTRAINT "FK_CUST_VIEW_VTID" FOREIGN KEY("VIEW_TYPE_ID") REFERENCES ADS_KEY_VALUE_OBJECTS("OBJECT_TYPE_ID"))';
    END IF;
END;
/
DECLARE
   SEQUENCECHECKERFLAG INT;
BEGIN
    SELECT COUNT(*) INTO SEQUENCECHECKERFLAG FROM ALL_SEQUENCES WHERE SEQUENCE_OWNER = sys_context('userenv', 'current_schema') AND SEQUENCE_NAME = UPPER('CUSTOM_VIEW_CRITERIA_SEQ');
   IF SEQUENCECHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'CREATE SEQUENCE "CUSTOM_VIEW_CRITERIA_SEQ"  MINVALUE 1 MAXVALUE 999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE';
   END IF;
END;
/
DECLARE
  TRIGGERCHECKERFLAG INT;
BEGIN
  SELECT COUNT(*)  INTO TRIGGERCHECKERFLAG FROM all_triggers WHERE OWNER = sys_context('userenv', 'current_schema') AND trigger_name = UPPER('CUSTOM_VIEW_CRITERIA_INSERT');
  IF TRIGGERCHECKERFLAG = 0 THEN
    EXECUTE IMMEDIATE 'CREATE OR REPLACE TRIGGER  "CUSTOM_VIEW_CRITERIA_INSERT" BEFORE INSERT ON CUSTOM_VIEW_CRITERIA FOR EACH ROW BEGIN SELECT CUSTOM_VIEW_CRITERIA_SEQ.NEXTVAL INTO :new.CV_ID FROM DUAL; END;';
    EXECUTE IMMEDIATE 'ALTER TRIGGER  "CUSTOM_VIEW_CRITERIA_INSERT" ENABLE';
  END IF;
END;
/
DECLARE
TABLECHECKERFLAG INT;
BEGIN
    SELECT COUNT(*) INTO TABLECHECKERFLAG FROM ADS_KEY_VALUE_OBJECTS WHERE  OBJECT_TYPE = 'CUSTOM_VIEW';
    IF TABLECHECKERFLAG = 0 THEN
        EXECUTE IMMEDIATE 'INSERT INTO ADS_KEY_VALUE_OBJECTS (OBJECT_TYPE,OBJECT_TABLE,OBJECT_TABLE_COLUMN,OBJECT_PARENT_TYPE,OBJECT_PARENT_COLUMN_ID,OBJECT_LEVEL,SYSTEM_BASED,OBJECT_TITLE,MODULE_KEY) VALUES (''CUSTOM_VIEW'','''','''','''','''',0,0,''Custom View'',''com.ads.mm.permission.mm'')';
    END IF;
END;
/
DECLARE
TABLECHECKERFLAG INT;
BEGIN
    SELECT COUNT(*) INTO TABLECHECKERFLAG FROM ADS_KEY_VALUE_OBJECTS WHERE  OBJECT_TYPE = 'CV_GLOBAL_VIEW';
    IF TABLECHECKERFLAG = 0 THEN
        EXECUTE IMMEDIATE 'INSERT INTO ADS_KEY_VALUE_OBJECTS (OBJECT_TYPE,OBJECT_TABLE,OBJECT_TABLE_COLUMN,OBJECT_PARENT_TYPE,OBJECT_PARENT_COLUMN_ID,OBJECT_LEVEL,SYSTEM_BASED,OBJECT_TITLE,MODULE_KEY) VALUES (''CV_GLOBAL_VIEW'','''','''','''','''',0,0,''Term View'',''com.ads.mm.permission.mm'')';
    END IF;
END;
/
DECLARE
TABLECHECKERFLAG INT;
BEGIN
    SELECT COUNT(*) INTO TABLECHECKERFLAG FROM ADS_KEY_VALUE_OBJECTS WHERE  OBJECT_TYPE = 'CV_USER_VIEW';
    IF TABLECHECKERFLAG = 0 THEN
        EXECUTE IMMEDIATE 'INSERT INTO ADS_KEY_VALUE_OBJECTS (OBJECT_TYPE,OBJECT_TABLE,OBJECT_TABLE_COLUMN,OBJECT_PARENT_TYPE,OBJECT_PARENT_COLUMN_ID,OBJECT_LEVEL,SYSTEM_BASED,OBJECT_TITLE,MODULE_KEY) VALUES (''CV_USER_VIEW'','''','''','''','''',0,0,''User View'',''com.ads.mm.permission.mm'')';
    END IF;
END;
/

DECLARE
   TABLECHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO TABLECHECKERFLAG FROM ALL_OBJECTS WHERE OWNER = sys_context('userenv', 'current_schema') AND OBJECT_TYPE = 'FUNCTION' AND OBJECT_NAME = UPPER('FN_WORKFLOW_STATUS');
   IF TABLECHECKERFLAG = 1 THEN
      EXECUTE IMMEDIATE 'DROP FUNCTION FN_WORKFLOW_STATUS';
   END IF;
END;
/

CREATE OR REPLACE FUNCTION FN_WORKFLOW_STATUS (
	P_OBJECTTYPEID 	IN	NUMBER,
	P_OBJECTID		IN	NUMBER,
	P_HISTORYTYPEID	IN	NUMBER
) RETURN VARCHAR2
AS
	T_STATUS_TITLE VARCHAR2(50);
	T_WFN_ID NUMBER;
	T_NODE_ID NUMBER;
	T_STAGE_TYPE VARCHAR2(1);
BEGIN
   SELECT T_WFN_ID_content into T_WFN_ID FROM (
         select regexp_replace(regexp_substr(historydesc,
                                    '"toWFNId":\s*((\w| )*)', 1, level),
                     '"toWFNId":\s*((\w| )*)', '\1', 1, 1) T_WFN_ID_content
         from (SELECT
			   historydesc
		   FROM   rm_history
		   WHERE  historyid IN (SELECT Max(historyid)
							 FROM   rm_history
							 WHERE  objecttypeid = P_OBJECTTYPEID
									AND objectid = P_OBJECTID
									AND historytypeid = P_HISTORYTYPEID)
		)
   connect by regexp_substr(historydesc, '"toWFNId":\s*((\w| )*)', 1, level) is not null
   );
	SELECT node_id INTO T_NODE_ID
	   FROM   ads_workflow_node
	   WHERE  wfn_id = T_WFN_ID;
	SELECT node_type INTO T_STAGE_TYPE
	   FROM   ads_workflow_node
	   WHERE  wfn_id = T_WFN_ID;

	SELECT status_title INTO T_STATUS_TITLE
				FROM ads_workflow_trigger_action
				WHERE wfta_id = T_NODE_ID ;

	SELECT coalesce (T_STATUS_TITLE, '') INTO T_STATUS_TITLE FROM dual;

	return T_STATUS_TITLE;
END FN_WORKFLOW_STATUS;
/
DECLARE
TABLECHECKERFLAG INT;
BEGIN
    SELECT COUNT(*) INTO TABLECHECKERFLAG FROM ADS_KEY_VALUE_OBJECTS WHERE  OBJECT_TYPE = 'MAPPING_LINEAGE_SYNC_SCHEDULE';
    IF TABLECHECKERFLAG = 0 THEN
        EXECUTE IMMEDIATE 'INSERT INTO ADS_KEY_VALUE_OBJECTS (OBJECT_TYPE,OBJECT_TABLE,OBJECT_TABLE_COLUMN,OBJECT_PARENT_TYPE,OBJECT_PARENT_COLUMN_ID,OBJECT_LEVEL,MODULE_KEY,SYSTEM_BASED,OBJECT_TITLE)
                VALUES( ''MAPPING_LINEAGE_SYNC_SCHEDULE'',''MAPPING_LINEAGE_SYNC_SCHEDULE'','''','''','''',''1'',''com.ads.mm.permission.generic'',''1'',''MAPPING_LINEAGE_SYNC_SCHEDULE'')';
    END IF;
END;
/
DECLARE
TABLECHECKERFLAG INT;
BEGIN
    SELECT COUNT(*) INTO TABLECHECKERFLAG FROM APP_PREFERENCES WHERE PREFERENCE_NAME = 'SEND_EMAIL_ON_MAPPING_LINEAGE_SYNC_SCHEDULE_JOB_EXECUTED';
    IF TABLECHECKERFLAG = 0 THEN
        EXECUTE IMMEDIATE 'INSERT INTO APP_PREFERENCES(PREFERENCE_NAME,PREFERENCE_VALUE) VALUES (''SEND_EMAIL_ON_MAPPING_LINEAGE_SYNC_SCHEDULE_JOB_EXECUTED'',''true'')';
        EXECUTE IMMEDIATE 'INSERT INTO APP_PREFERENCES(PREFERENCE_NAME,PREFERENCE_VALUE) VALUES (''SEND_EMAIL_ON_MAPPING_LINEAGE_SYNC_SCHEDULE_JOB_EXECUTED_SUBJECT'',''@Name@ Job Execution Details - DO NOT REPLY'')';
        EXECUTE IMMEDIATE 'INSERT INTO APP_PREFERENCES(PREFERENCE_NAME,PREFERENCE_VALUE) VALUES (''SEND_EMAIL_ON_MAPPING_LINEAGE_SYNC_SCHEDULE_JOB_EXECUTED_MESSAGE'',''Hi,<br>This is a system generated email notification.<br><br><table border = 1><tr><th colspan = 2><b>Job Details</b></th></tr><tr><td>Job Name </td><td>@jobName@</td><tr><td>Job Owner  </td><td>@jobOwner@</td></tr><tr><td>Job Scheduled Date Time  </td><td>@scheduledDateTime@</td></tr><tr><td>Job Completed Date Time  </td><td>@jobExecutedDateTime@</td></tr><tr><td>Job Next Executed Date Time  </td><td>@jobNextExecutedDateTime@</td></tr></table><BR><BR><b>@executionMessage@</b><br><br><I><font color =red>Note</font> This is an auto generated email notification and this mailbox is not monitored.<BR>Please do not reply to this email.</I>'')';
    END IF;
END;
/
DECLARE
TABLECHECKERFLAG INT;
BEGIN
  SELECT COUNT(*)
  INTO TABLECHECKERFLAG  FROM ALL_TABLES  WHERE OWNER    = sys_context( 'userenv', 'current_schema' )  AND TABLE_NAME = UPPER('TABLE_RECORDS_COUNT');
    IF TABLECHECKERFLAG = 0 THEN
    EXECUTE IMMEDIATE 'CREATE TABLE TABLE_RECORDS_COUNT   (
				 RECORDS_COUNT NUMBER NOT NULL
				,TABLE_NAME VARCHAR2(4000) NOT NULL
		)';
    END IF;
END;
/
DECLARE
  TYPECHECKERFLAG INT;
BEGIN
  SELECT COUNT(*) INTO TYPECHECKERFLAG  FROM ALL_OBJECTS WHERE OWNER = sys_context('userenv', 'current_schema') AND UPPER(OBJECT_NAME) = 'MASTER_LINEAGE_OBJECT' AND UPPER(OBJECT_TYPE) ='TYPE';
  IF TYPECHECKERFLAG     = 0 THEN
    EXECUTE IMMEDIATE 'CREATE OR REPLACE TYPE MASTER_LINEAGE_OBJECT AS OBJECT (SRC_KEY  VARCHAR2(4000), SRC_SYSTEM_NAME  VARCHAR2(4000), SRC_SYSTEM_ENVIRONMENT_NAME  VARCHAR2(4000), SRC_TABLE_NAME VARCHAR2(4000), SRC_COLUMN_NAME VARCHAR2(4000), TGT_KEY  VARCHAR2(4000), TGT_SYSTEM_NAME  VARCHAR2(4000), TGT_SYSTEM_ENVIRONMENT_NAME VARCHAR2(4000), TGT_TABLE_NAME VARCHAR2(4000), TGT_COLUMN_NAME VARCHAR2(4000),MAP_SEQ_ID NUMBER, PROJ_ID  NUMBER )';
  END IF;
END;
/
DECLARE
  TYPECHECKERFLAG INT;
BEGIN
  SELECT COUNT(*)
  INTO TYPECHECKERFLAG
  FROM ALL_OBJECTS
  WHERE OWNER            = sys_context('userenv', 'current_schema')
  AND UPPER(OBJECT_NAME) = 'MASTER_LINEAGE_OBJ_TAB'
  AND UPPER(OBJECT_TYPE) ='TYPE';
  IF TYPECHECKERFLAG     = 0 THEN
    EXECUTE IMMEDIATE 'CREATE TYPE MASTER_LINEAGE_OBJ_TAB AS TABLE OF MASTER_LINEAGE_OBJECT;';
  END IF;
END;
/
DECLARE
   TABLECHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO TABLECHECKERFLAG FROM ALL_TABLES WHERE OWNER = SYS_CONTEXT( 'USERENV', 'CURRENT_SCHEMA' ) AND TABLE_NAME = UPPER('LINEAGE_RESULT_G_TBL');
   IF TABLECHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'CREATE GLOBAL TEMPORARY TABLE LINEAGE_RESULT_G_TBL(
       SRC_KEY VARCHAR2(4000)  ,SRC_SYSTEM_NAME VARCHAR2(4000)  ,SRC_SYSTEM_ENVIRONMENT_NAME  VARCHAR2(4000) ,SRC_TABLE_NAME VARCHAR2(4000) ,SRC_COLUMN_NAME VARCHAR2(4000)
      ,TGT_KEY VARCHAR2(4000)  ,TGT_SYSTEM_NAME VARCHAR2(4000)  ,TGT_SYSTEM_ENVIRONMENT_NAME VARCHAR2(4000)  ,TGT_TABLE_NAME VARCHAR2(4000) ,TGT_COLUMN_NAME VARCHAR2(4000)
	  ,MAP_SEQ_ID   NUMBER ,PROJ_ID 	NUMBER ,CYCLE_ID    NUMBER
      ) ON COMMIT PRESERVE ROWS';
   END IF;
END;
/
DECLARE
   TABLECHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO TABLECHECKERFLAG FROM ALL_TABLES WHERE OWNER = SYS_CONTEXT( 'USERENV', 'CURRENT_SCHEMA' ) AND TABLE_NAME = UPPER('LINEAGE_CYCLEIDS_G_TBL');
   IF TABLECHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'CREATE GLOBAL TEMPORARY TABLE LINEAGE_CYCLEIDS_G_TBL(
      CYCLE_ID  NUMBER ,NODE VARCHAR2(4000)
      ) ON COMMIT PRESERVE ROWS';
   END IF;
END;
/
DECLARE
   SEQUENCECHECKERFLAG INT;
BEGIN
    SELECT COUNT(*) INTO SEQUENCECHECKERFLAG FROM ALL_SEQUENCES WHERE SEQUENCE_OWNER = SYS_CONTEXT('USERENV', 'CURRENT_SCHEMA') AND SEQUENCE_NAME = UPPER('GRAPH_CYCLE_ID');
   IF SEQUENCECHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'CREATE SEQUENCE "GRAPH_CYCLE_ID"  MINVALUE 1 MAXVALUE 999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE';
   END IF;
END;
/
DECLARE
  TRIGGERCHECKERFLAG INT;
BEGIN
  SELECT COUNT(*)  INTO TRIGGERCHECKERFLAG FROM ALL_TRIGGERS WHERE OWNER = SYS_CONTEXT('USERENV', 'CURRENT_SCHEMA') AND TRIGGER_NAME = UPPER('GRAPH_INSERT_CYCLE_ID');
  IF TRIGGERCHECKERFLAG = 0 THEN
    EXECUTE IMMEDIATE 'CREATE OR REPLACE TRIGGER  "GRAPH_INSERT_CYCLE_ID" BEFORE INSERT ON LINEAGE_CYCLEIDS_G_TBL FOR EACH ROW BEGIN SELECT GRAPH_CYCLE_ID.NEXTVAL INTO :NEW.CYCLE_ID FROM DUAL; END;';
    EXECUTE IMMEDIATE 'ALTER TRIGGER  "GRAPH_INSERT_CYCLE_ID" ENABLE';
  END IF;
END;
/
DECLARE
DATACHECKERFLAG INT;
BEGIN
    SELECT COUNT(*) INTO DATACHECKERFLAG  FROM APP_PREFERENCES  WHERE PREFERENCE_NAME = 'BGM_DATA_CLASSIFICATION_TYPE';
    IF DATACHECKERFLAG = 0 THEN
        EXECUTE IMMEDIATE 'INSERT INTO APP_PREFERENCES(PREFERENCE_NAME,PREFERENCE_VALUE) VALUES(''BGM_DATA_CLASSIFICATION_TYPE'', ''true'')';
    END IF;
END;
/
DECLARE
DATACHECKERFLAG INT;
BEGIN
    SELECT COUNT(*) INTO DATACHECKERFLAG  FROM APP_PREFERENCES  WHERE PREFERENCE_NAME = 'CRITICALITY';
    IF DATACHECKERFLAG = 0 THEN
        EXECUTE IMMEDIATE 'INSERT INTO APP_PREFERENCES(PREFERENCE_NAME,PREFERENCE_VALUE) VALUES(''CRITICALITY'', ''true'')';
        EXECUTE IMMEDIATE 'INSERT INTO APP_PREFERENCES(PREFERENCE_NAME,PREFERENCE_VALUE) VALUES(''BGM_STEWARDSHIP_GOALS'', ''true'')';
    END IF;
END;
/
DECLARE
   COLUMNCHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO COLUMNCHECKERFLAG FROM ALL_TAB_COLUMNS WHERE  OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME = UPPER('BG_CUSTOM_TYPES') AND COLUMN_NAME=UPPER('DISPLAY_ORDER');
   IF COLUMNCHECKERFLAG = 0 THEN
        EXECUTE IMMEDIATE 'ALTER TABLE BG_CUSTOM_TYPES ADD (DISPLAY_ORDER FLOAT DEFAULT 0.0 NOT NULL)';
   END IF;
END;
/
DECLARE
DATACHECKERFLAG INT;
BEGIN
    SELECT COUNT(*) INTO DATACHECKERFLAG FROM BG_CUSTOM_TYPES WHERE OBJECT_TYPE_ID = (SELECT OBJECT_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE = 'BGM_TERM') AND DISPLAY_ORDER = 0.0;
    IF DATACHECKERFLAG > 0 THEN
        EXECUTE IMMEDIATE 'UPDATE BG_CUSTOM_TYPES SET DISPLAY_ORDER = 1.0 WHERE OBJECT_TYPE_ID = (SELECT OBJECT_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE = ''BGM_TERM'')';
        EXECUTE IMMEDIATE 'UPDATE BG_CUSTOM_TYPES SET DISPLAY_ORDER = 2.0 WHERE OBJECT_TYPE_ID = (SELECT OBJECT_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE = ''BGM_POLICY'')';
        EXECUTE IMMEDIATE 'UPDATE BG_CUSTOM_TYPES SET DISPLAY_ORDER = 3.0 WHERE OBJECT_TYPE_ID = (SELECT OBJECT_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE = ''BGM_RULE'')';
        EXECUTE IMMEDIATE 'MERGE INTO BG_CUSTOM_TYPES M USING (SELECT DISTINCT ID,  NAME,   ROW_NUMBER() OVER( ORDER BY CASE DISPLAY_ORDER WHEN NULL THEN 0 WHEN 0 THEN 999999999 ELSE DISPLAY_ORDER END )AS  DISPLAY_ORDER        FROM   BG_CUSTOM_TYPES ) U ON ( M.ID = U.ID      AND M.NAME = U.NAME ) WHEN MATCHED THEN   UPDATE SET M.DISPLAY_ORDER = U.DISPLAY_ORDER';
    END IF;
END;
/
DECLARE
   COLUMNCHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO COLUMNCHECKERFLAG FROM ALL_TAB_COLUMNS WHERE  OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME = UPPER('ADS_WORKFLOW_NODE') AND COLUMN_NAME=UPPER('UI_PROPERTIES');
   IF COLUMNCHECKERFLAG = 1 THEN
      EXECUTE IMMEDIATE 'UPDATE ADS_WORKFLOW_NODE
      SET UI_PROPERTIES = ''{"loc":"60.25332896155628 -98.50315449791634","fill":"#8FDD00"}''
	  WHERE NODE_TYPE=''T''';
    END IF;
END;
/
DECLARE
   VERSIONCHECKKERFLAG INT;
BEGIN
    SELECT COUNT(*) INTO VERSIONCHECKKERFLAG FROM ADS_MM_VERSION WHERE VALUE <= '9.4';
    IF VERSIONCHECKKERFLAG = 1 THEN
    EXECUTE IMMEDIATE 'UPDATE CAT_TEMPLATES SET CAT_ENABLED = 0 WHERE CAT_NAME = ''Import Microsoft SSIS DTSX''';
    EXECUTE IMMEDIATE 'UPDATE CAT_TEMPLATES SET CAT_ENABLED = 1 WHERE CAT_NAME = ''Pig & Sqoop Script''';
    END IF;
END;
/
DECLARE
   COLUMNCHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO COLUMNCHECKERFLAG FROM ALL_TAB_COLUMNS WHERE  OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME = UPPER('SYSTEM_TABLE_COLUMNS_METADATA') AND COLUMN_NAME=UPPER('REF_ID');
   IF COLUMNCHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'ALTER TABLE SYSTEM_TABLE_COLUMNS_METADATA ADD REF_ID NUMBER NULL';
   END IF;
END;
/
DECLARE
   TABLECHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO TABLECHECKERFLAG FROM APP_PREFERENCES WHERE PREFERENCE_NAME ='SDLR_EVERY_DAY';
   IF TABLECHECKERFLAG = 0 THEN
        INSERT INTO APP_PREFERENCES( PREFERENCE_NAME, PREFERENCE_VALUE)
        (SELECT 'SDLR_EVERY_DAY','0 MM HH 1/1 * ? *' FROM DUAL
            UNION
            SELECT 'SDLR_EVERY_WEEK','0 MM HH ? * DOW *' FROM DUAL
            UNION
            SELECT 'SDLR_EVERY_MONTH','0 MM HH DAY 1/1 ? *' FROM DUAL);
   END IF;
END;
/
DECLARE 
TABLECHECKERFLAG INT;
TEMP_OBJECT_TYPE_ID INT;
TEMP_OBJECT_ID INT;
TEMP_KV_ID INT;
TEMP_KV_TYPE_ID INT ;
BEGIN
    SELECT OBJECT_TYPE_ID  INTO  TEMP_OBJECT_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE='SM_DATABASE_OPTIONS';
    SELECT MTD_ID INTO TEMP_OBJECT_ID FROM MT_DEFINITION WHERE  MTD_NAME = 'SM_DATABASE_OPTIONS' AND ADS_MODULE = 'SM';
    SELECT COUNT(*) INTO TABLECHECKERFLAG FROM ADS_KEY_VALUE WHERE  KEY_NAME = 'IsAutoCommit' AND KV_TYPE= 'Check Box' and OBJECT_TYPE_ID = TEMP_OBJECT_TYPE_ID;

    IF TABLECHECKERFLAG > 0 THEN 
        SELECT KV_ID INTO TEMP_KV_ID FROM ADS_KEY_VALUE WHERE OBJECT_TYPE_ID  = TEMP_OBJECT_TYPE_ID AND OBJECT_ID = TEMP_OBJECT_ID AND KEY_NAME = 'IsAutoCommit' AND KV_TYPE= 'Check Box';
        UPDATE ADS_KEY_VALUE SET KV_TYPE = 'Combo Box' WHERE KV_ID = TEMP_KV_ID;
        SELECT OBJECT_TYPE_ID INTO TEMP_KV_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE='ADS_KEY_VALUE';
        INSERT INTO ADS_KEY_VALUE(KEY_NAME,KEY_VALUE,OBJECT_TYPE_ID,OBJECT_ID,DATATYPE_ID,KV_TYPE,LABEL_WIDTH,CONTROL_WIDTH,KV_ORDER,COMPONENT,DEFAULTVALUE)      VALUES('true','true',TEMP_KV_TYPE_ID,TEMP_KV_ID,'1','combovalues','','','0','','');
        INSERT INTO ADS_KEY_VALUE(KEY_NAME,KEY_VALUE,OBJECT_TYPE_ID,OBJECT_ID,DATATYPE_ID,KV_TYPE,LABEL_WIDTH,CONTROL_WIDTH,KV_ORDER,COMPONENT,DEFAULTVALUE)      VALUES('false','false',TEMP_KV_TYPE_ID,TEMP_KV_ID,'1','combovalues','','','1','','');
        SELECT KV_ID INTO TEMP_KV_ID FROM ADS_KEY_VALUE WHERE OBJECT_TYPE_ID  = TEMP_OBJECT_TYPE_ID AND OBJECT_ID = TEMP_OBJECT_ID AND KEY_NAME = 'IsReadOnly' AND KV_TYPE= 'Check Box';
        UPDATE ADS_KEY_VALUE SET KV_TYPE = 'Combo Box' WHERE KV_ID = TEMP_KV_ID;
        INSERT INTO ADS_KEY_VALUE(KEY_NAME,KEY_VALUE,OBJECT_TYPE_ID,OBJECT_ID,DATATYPE_ID,KV_TYPE,LABEL_WIDTH,CONTROL_WIDTH,KV_ORDER,COMPONENT,DEFAULTVALUE)      VALUES('true','true',TEMP_KV_TYPE_ID,TEMP_KV_ID,'1','combovalues','','','0','','');
        INSERT INTO ADS_KEY_VALUE(KEY_NAME,KEY_VALUE,OBJECT_TYPE_ID,OBJECT_ID,DATATYPE_ID,KV_TYPE,LABEL_WIDTH,CONTROL_WIDTH,KV_ORDER,COMPONENT,DEFAULTVALUE)      VALUES('false','false',TEMP_KV_TYPE_ID,TEMP_KV_ID,'1','combovalues','','','1','','');
        SELECT KV_ID INTO TEMP_KV_ID FROM ADS_KEY_VALUE WHERE OBJECT_TYPE_ID  = TEMP_OBJECT_TYPE_ID AND OBJECT_ID = TEMP_OBJECT_ID AND KEY_NAME = 'IncludeSynonyms' AND KV_TYPE= 'Check Box';
        UPDATE ADS_KEY_VALUE SET KV_TYPE = 'Combo Box' WHERE KV_ID = TEMP_KV_ID;
        INSERT INTO ADS_KEY_VALUE(KEY_NAME,KEY_VALUE,OBJECT_TYPE_ID,OBJECT_ID,DATATYPE_ID,KV_TYPE,LABEL_WIDTH,CONTROL_WIDTH,KV_ORDER,COMPONENT,DEFAULTVALUE)      VALUES('true','true',TEMP_KV_TYPE_ID,TEMP_KV_ID,'1','combovalues','','','0','','');
        INSERT INTO ADS_KEY_VALUE(KEY_NAME,KEY_VALUE,OBJECT_TYPE_ID,OBJECT_ID,DATATYPE_ID,KV_TYPE,LABEL_WIDTH,CONTROL_WIDTH,KV_ORDER,COMPONENT,DEFAULTVALUE)      VALUES('false','false',TEMP_KV_TYPE_ID,TEMP_KV_ID,'1','combovalues','','','1','','');
        SELECT KV_ID INTO TEMP_KV_ID FROM ADS_KEY_VALUE WHERE OBJECT_TYPE_ID  = TEMP_OBJECT_TYPE_ID AND OBJECT_ID = TEMP_OBJECT_ID AND KEY_NAME = 'scanNestedRefSynonyms' AND KV_TYPE= 'Check Box';
        UPDATE ADS_KEY_VALUE SET KV_TYPE = 'Combo Box' WHERE KV_ID = TEMP_KV_ID;
        INSERT INTO ADS_KEY_VALUE(KEY_NAME,KEY_VALUE,OBJECT_TYPE_ID,OBJECT_ID,DATATYPE_ID,KV_TYPE,LABEL_WIDTH,CONTROL_WIDTH,KV_ORDER,COMPONENT,DEFAULTVALUE)      VALUES('true','true',TEMP_KV_TYPE_ID,TEMP_KV_ID,'1','combovalues','','','0','','');
        INSERT INTO ADS_KEY_VALUE(KEY_NAME,KEY_VALUE,OBJECT_TYPE_ID,OBJECT_ID,DATATYPE_ID,KV_TYPE,LABEL_WIDTH,CONTROL_WIDTH,KV_ORDER,COMPONENT,DEFAULTVALUE)      VALUES('false','false',TEMP_KV_TYPE_ID,TEMP_KV_ID,'1','combovalues','','','1','','');
    END IF;
END;
/
DECLARE
    TABLECHECKERFLAG INT;
BEGIN
    SELECT COUNT(*) INTO TABLECHECKERFLAG FROM ADS_KEY_VALUE_OBJECTS WHERE  OBJECT_TYPE = 'OBJECT_DOCUMENT';
    IF TABLECHECKERFLAG = 0 THEN
        EXECUTE IMMEDIATE 'INSERT INTO ADS_KEY_VALUE_OBJECTS (OBJECT_TYPE,OBJECT_TABLE,OBJECT_TABLE_COLUMN,OBJECT_PARENT_TYPE,OBJECT_PARENT_COLUMN_ID,OBJECT_LEVEL,MODULE_KEY,SYSTEM_BASED,OBJECT_TITLE)
            VALUES( ''OBJECT_DOCUMENT'',''OBJECT_DOCUMENT'',''OBJECT_DOC_ID'','''','''',''1'',''com.ads.mm.permission.generic'',''1'',''Object Documents'')';
        EXECUTE IMMEDIATE 'INSERT INTO ADS_KEY_VALUE_OBJECTS (OBJECT_TYPE,OBJECT_TABLE,OBJECT_TABLE_COLUMN,OBJECT_PARENT_TYPE,OBJECT_PARENT_COLUMN_ID,OBJECT_LEVEL,MODULE_KEY,SYSTEM_BASED,OBJECT_TITLE)
            VALUES( ''TCM_TESTCASE_DOC'',''TCM_TESTCASE_DOCS'',''TESTCASE_DOC_ID'','''','''',''1'',''com.ads.mm.permission.generic'',''1'',''Testcase Document'')';
    END IF;
END;
/
DECLARE
TABLECHECKERFLAG INT;
BEGIN
    SELECT COUNT(*) INTO TABLECHECKERFLAG FROM MT_DEFINITION WHERE  MTD_NAME = 'UPLOAD_FILE_EXTENSION';
    IF TABLECHECKERFLAG = 0 THEN
        EXECUTE IMMEDIATE 'INSERT INTO MT_DEFINITION (MTD_NAME,MTD_DESC,ADS_MODULE)
        VALUES (''UPLOAD_FILE_EXTENSION'',''UPLOAD_FILE_EXTENSION'',''ALL'')';
    END IF;
END;
/
DECLARE
    DATACHECKERFLAG INT;
    TEMP_OBJECT_TYPE_ID INT;
    TEMP_OBJECT_ID INT;
BEGIN
    SELECT OBJECT_TYPE_ID INTO TEMP_OBJECT_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE='MT_DEFINITION';
    SELECT MTD_ID INTO TEMP_OBJECT_ID FROM MT_DEFINITION WHERE  MTD_NAME = 'UPLOAD_FILE_EXTENSION' AND ADS_MODULE = 'ALL';
    SELECT COUNT(*) INTO DATACHECKERFLAG FROM ADS_KEY_VALUE WHERE OBJECT_TYPE_ID = TEMP_OBJECT_TYPE_ID and OBJECT_ID = TEMP_OBJECT_ID;
    IF DATACHECKERFLAG = 0 THEN
        INSERT INTO ADS_KEY_VALUE (KEY_NAME, KEY_VALUE, OBJECT_TYPE_ID, OBJECT_ID, DATATYPE_ID, KV_TYPE, LABEL_WIDTH, CONTROL_WIDTH, KV_ORDER, COMPONENT, DEFAULTVALUE, ISPUBLISHED, ISSYSTEMBASED, DISPLAY_POLICY, REGEX, MANDATORY, ENABLED, FIELD_LENGTH, PROCESSING_ORDER, VISIBLE, LOAD_ON_STARTUP, VALUE_OBJECT_REF, CREATED_BY, CREATED_DATE_TIME, LAST_MODIFIED_BY, LAST_MODIFIED_DATE_TIME, DESCRIPTION, IS_FORM_PROPERTY, IS_GRID_PROPERTY, IS_PIVOTABLE) 
		SELECT 'exe', 'exe', TEMP_OBJECT_TYPE_ID, TEMP_OBJECT_ID, 1, 'Text Box', NULL, NULL, 1, NULL, NULL, 1, 0, 0, NULL, NULL, NULL, NULL, NULL, 1, NULL, NULL, 'SYSTEM', CURRENT_TIMESTAMP, NULL, NULL, '', 0, 0, 0 FROM DUAL
		UNION ALL
		SELECT 'msi', 'msi', TEMP_OBJECT_TYPE_ID, TEMP_OBJECT_ID, 1, 'Text Box', NULL, NULL, 1, NULL, NULL, 1, 0, 0, NULL, NULL, NULL, NULL, NULL, 1, NULL, NULL, 'SYSTEM', CURRENT_TIMESTAMP, NULL, NULL, '', 0, 0, 0 FROM DUAL
		UNION ALL
		SELECT 'cmd', 'cmd', TEMP_OBJECT_TYPE_ID, TEMP_OBJECT_ID, 1, 'Text Box', NULL, NULL, 1, NULL, NULL, 1, 0, 0, NULL, NULL, NULL, NULL, NULL, 1, NULL, NULL, 'SYSTEM', CURRENT_TIMESTAMP, NULL, NULL, '', 0, 0, 0 FROM DUAL
		UNION ALL
		SELECT 'bat', 'bat', TEMP_OBJECT_TYPE_ID, TEMP_OBJECT_ID, 1, 'Text Box', NULL, NULL, 1, NULL, NULL, 1, 0, 0, NULL, NULL, NULL, NULL, NULL, 1, NULL, NULL, 'SYSTEM', CURRENT_TIMESTAMP, NULL, NULL, '', 0, 0, 0 FROM DUAL;
    END IF;
END;
/

DECLARE
    COLUMNCHECKERFLAG INT;
BEGIN
    SELECT COUNT(*) INTO COLUMNCHECKERFLAG FROM ALL_TAB_COLUMNS WHERE  OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME = UPPER('USERS') AND COLUMN_NAME=UPPER('ACCOUNT_STATUS');
    IF COLUMNCHECKERFLAG = 0 THEN
        EXECUTE IMMEDIATE 'ALTER TABLE USERS ADD ACCOUNT_STATUS CHAR(1) DEFAULT ''E''';
        EXECUTE IMMEDIATE 'UPDATE USERS SET ACCOUNT_STATUS = ''E''';
    END IF;
END;
/

DECLARE
    COLUMNCHECKERFLAG INT;
BEGIN
    SELECT COUNT(*) INTO COLUMNCHECKERFLAG FROM ALL_TAB_COLUMNS WHERE  OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME = UPPER('USERS') AND COLUMN_NAME=UPPER('FAILED_LOGIN_ATTEMPTS');
    IF COLUMNCHECKERFLAG = 0 THEN
        EXECUTE IMMEDIATE 'ALTER TABLE USERS ADD FAILED_LOGIN_ATTEMPTS NUMBER(3) DEFAULT 0';
        EXECUTE IMMEDIATE 'UPDATE USERS SET FAILED_LOGIN_ATTEMPTS = 0';
    END IF;
END;
/

DECLARE
   ROWCHECKERFLAG INT;
BEGIN
	SELECT count(*) INTO ROWCHECKERFLAG FROM RM_HISTORYTYPE WHERE HISTORYTYPENAME = 'FAILED LOGIN';
	IF ROWCHECKERFLAG = 0 THEN
		INSERT INTO RM_HISTORYTYPE (HISTORYTYPENAME, HISTORYTYPEDESC)
        SELECT 'FAILED LOGIN', 'Failed login attempt' FROM DUAL
        UNION ALL
        SELECT 'ACCOUNT LOCKED', 'User account locked' FROM DUAL
        UNION ALL
        SELECT 'ACCOUNT ENABLED', 'User account enabled' FROM DUAL
        UNION ALL
        SELECT 'ACCOUNT DISABLED', 'User account disabled' FROM DUAL
        UNION ALL
        SELECT 'INVALID USER LOGIN', 'Invalid user login attempt' FROM DUAL;
	END IF;
END;
/

DECLARE
   ROWCHECKERFLAG INT;
BEGIN
	SELECT count(*) INTO ROWCHECKERFLAG FROM APP_PREFERENCES WHERE PREFERENCE_NAME ='MAX_INVALID_LOGIN_ATTEMPTS_ALLOWED';
	IF ROWCHECKERFLAG = 0 THEN
		INSERT INTO APP_PREFERENCES( PREFERENCE_NAME, PREFERENCE_VALUE)
        SELECT 'MAX_INVALID_LOGIN_ATTEMPTS_ALLOWED', '5' FROM DUAL;
	END IF;
END;
/

DECLARE
   ROWCHECKERFLAG INT;
BEGIN
	SELECT count(*) INTO ROWCHECKERFLAG FROM APP_PREFERENCES WHERE PREFERENCE_NAME ='SETTINGS_ENFORCE_PASSWORD_POLICY';
	IF ROWCHECKERFLAG = 0 THEN
		INSERT INTO APP_PREFERENCES( PREFERENCE_NAME, PREFERENCE_VALUE)
        SELECT 'SETTINGS_ENFORCE_PASSWORD_POLICY', 'false' FROM DUAL;
	END IF;
END;
/

DECLARE
    TABLECHECKERFLAG INT;
BEGIN
    SELECT COUNT(*) INTO TABLECHECKERFLAG FROM APP_PREFERENCES WHERE PREFERENCE_NAME = 'BGM_BUSINESS_TERM_DASHBOARD_VISIBILITY';
    IF TABLECHECKERFLAG = 0 THEN
        EXECUTE IMMEDIATE 'INSERT INTO APP_PREFERENCES(PREFERENCE_NAME,PREFERENCE_VALUE) VALUES (''BGM_BUSINESS_TERM_DASHBOARD_VISIBILITY'',''true'')';
        EXECUTE IMMEDIATE 'INSERT INTO APP_PREFERENCES(PREFERENCE_NAME,PREFERENCE_VALUE) VALUES (''BGM_BUSINESS_POLICY_DASHBOARD_VISIBILITY'',''true'')';
        EXECUTE IMMEDIATE 'INSERT INTO APP_PREFERENCES(PREFERENCE_NAME,PREFERENCE_VALUE) VALUES (''BGM_BUSINESS_RULE_DASHBOARD_VISIBILITY'',''true'')';
    END IF;
END;
/
DECLARE
   TABLECHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO TABLECHECKERFLAG FROM all_VIEWS WHERE OWNER = sys_context('userenv', 'current_schema') AND VIEW_NAME = UPPER('ALLMAPPINGSTESTSTATUS');
   IF TABLECHECKERFLAG = 1 THEN
      EXECUTE IMMEDIATE 'DROP VIEW ALLMAPPINGSTESTSTATUS';
   END IF;
END;
/
CREATE OR REPLACE FORCE VIEW "ALLMAPPINGSTESTSTATUS" ("TESTSTATUS", "MAPPINGSCOUNT", "PROJECT_ID", "PROJECTNAME", "PROJECTDESCRIPTION", "MAPPINGSTATUS")
AS
  SELECT Coalesce(NullIf(rtrim(TEST_DISPOSITION),''),'U') TESTSTATUS,
    COUNT(MAP_ID) MAPPINGSCOUNT,
    PROJECT_ID,
    PROJECT.PROJ_NAME           AS PROJECTNAME,
    TO_CHAR(PROJECT.PROJ_DESCR) AS PROJECTDESCRIPTION,
    STATUS                      AS MAPPINGSTATUS
  FROM MAPPING_DETAILS
  LEFT JOIN PROJECT
  ON PROJECT.PROJ_ID = MAPPING_DETAILS.PROJECT_ID
  GROUP BY TEST_DISPOSITION,
    PROJECT_ID,
    PROJECT.PROJ_NAME,
    TO_CHAR(PROJECT.PROJ_DESCR),STATUS;
/
DECLARE
   COLUMNCHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO COLUMNCHECKERFLAG FROM all_constraints WHERE  OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME = UPPER('RM_MIGRATIONOBJECT') and  delete_rule = 'CASCADE' and constraint_name='FK_RM_MIG_OBJ_TYPE_ID';
   IF COLUMNCHECKERFLAG = 1 THEN
      EXECUTE IMMEDIATE 'ALTER TABLE RM_MIGRATIONOBJECT DROP CONSTRAINT FK_RM_MIG_OBJ_TYPE_ID';
      EXECUTE IMMEDIATE 'ALTER TABLE RM_MIGRATIONOBJECT ADD CONSTRAINT FK_RM_MIG_OBJ_TYPE_ID FOREIGN KEY(MIGRATIONOBJECTTYPEID) REFERENCES RM_MIGRATIONOBJECTTYPE (MIGRATIONOBJECTTYPEID)';
   END IF;
END;
/
DECLARE
SEQUENCECHECKERFLAG INT;
CURRENT_PROJ_ID NUMBER;
BEGIN
    SELECT COUNT(*) INTO SEQUENCECHECKERFLAG FROM ALL_SEQUENCES WHERE SEQUENCE_OWNER = sys_context('userenv', 'current_schema') AND SEQUENCE_NAME = UPPER('COL_PROJECT_PROJ_ID_SEQ');
    SELECT MAX(PROJ_ID)+1 INTO CURRENT_PROJ_ID FROM PROJECT;
    IF SEQUENCECHECKERFLAG = 0 THEN
        IF CURRENT_PROJ_ID IS NULL THEN
            CURRENT_PROJ_ID := 1;
        END IF;
        EXECUTE IMMEDIATE 'CREATE SEQUENCE   "COL_PROJECT_PROJ_ID_SEQ"  MINVALUE 1 MAXVALUE 999999999999999999999999999 INCREMENT BY 1 START WITH '||CURRENT_PROJ_ID||' CACHE 20 NOORDER  NOCYCLE';
    END IF;
END;
/
DECLARE
TRIGGERCHECKERFLAG INT;
BEGIN
  SELECT COUNT(*)  INTO TRIGGERCHECKERFLAG  FROM all_triggers  WHERE OWNER = sys_context('userenv', 'current_schema') AND trigger_name = UPPER('COL_PROJECT_PROJ_ID_INS');
  IF TRIGGERCHECKERFLAG = 0 THEN
    EXECUTE IMMEDIATE 'CREATE OR REPLACE TRIGGER  "COL_PROJECT_PROJ_ID_INS" BEFORE INSERT ON PROJECT FOR EACH ROW BEGIN SELECT COL_PROJECT_PROJ_ID_SEQ.NEXTVAL INTO :new.PROJ_ID FROM DUAL; END;';
    EXECUTE IMMEDIATE 'ALTER TRIGGER  "COL_PROJECT_PROJ_ID_INS" ENABLE';
  END IF;
END;
/
DECLARE
SEQUENCECHECKERFLAG INT;
CURRENT_MAP_ID NUMBER;
BEGIN
    SELECT COUNT(*) INTO SEQUENCECHECKERFLAG FROM ALL_SEQUENCES WHERE SEQUENCE_OWNER = sys_context('userenv', 'current_schema') AND SEQUENCE_NAME = UPPER('COL_MAP_DETS_MAP_ID_SEQ');
    SELECT MAX(MAP_ID)+1 INTO CURRENT_MAP_ID FROM MAPPING_DETAILS;
    IF SEQUENCECHECKERFLAG = 0 THEN
        IF CURRENT_MAP_ID IS NULL THEN
            CURRENT_MAP_ID := 1;
        END IF;
        EXECUTE IMMEDIATE 'CREATE SEQUENCE   "COL_MAP_DETS_MAP_ID_SEQ"  MINVALUE 1 MAXVALUE 999999999999999999999999999 INCREMENT BY 1 START WITH '||CURRENT_MAP_ID||' CACHE 20 NOORDER  NOCYCLE';
    END IF;
END;
/
DECLARE
TRIGGERCHECKERFLAG INT;
BEGIN
  SELECT COUNT(*)  INTO TRIGGERCHECKERFLAG  FROM all_triggers  WHERE OWNER = sys_context('userenv', 'current_schema') AND trigger_name = UPPER('COL_MAP_DETS_MAP_ID_INS');
  IF TRIGGERCHECKERFLAG = 0 THEN
    EXECUTE IMMEDIATE 'CREATE OR REPLACE TRIGGER  "COL_MAP_DETS_MAP_ID_INS" BEFORE INSERT ON MAPPING_DETAILS FOR EACH ROW BEGIN SELECT COL_MAP_DETS_MAP_ID_SEQ.NEXTVAL INTO :new.MAP_ID FROM DUAL; END;';
    EXECUTE IMMEDIATE 'ALTER TRIGGER  "COL_MAP_DETS_MAP_ID_INS" ENABLE';
  END IF;
END;
/
DECLARE
SEQUENCECHECKERFLAG INT;
CURRENT_MAP_SEQ_ID NUMBER;
BEGIN
    SELECT COUNT(*) INTO SEQUENCECHECKERFLAG FROM ALL_SEQUENCES WHERE SEQUENCE_OWNER = sys_context('userenv', 'current_schema') AND SEQUENCE_NAME = UPPER('COL_MAP_SPEC_MAP_SEQ_ID_SEQ');
    SELECT MAX(MAP_SEQ_ID)+1 INTO CURRENT_MAP_SEQ_ID FROM MAPPING_SPECIFICATION;
    IF SEQUENCECHECKERFLAG = 0 THEN
        IF CURRENT_MAP_SEQ_ID IS NULL THEN
            CURRENT_MAP_SEQ_ID := 1;
        END IF;
        EXECUTE IMMEDIATE 'CREATE SEQUENCE   "COL_MAP_SPEC_MAP_SEQ_ID_SEQ"  MINVALUE 1 MAXVALUE 999999999999999999999999999 INCREMENT BY 1 START WITH '||CURRENT_MAP_SEQ_ID||' CACHE 20 NOORDER  NOCYCLE';
    END IF;
END;
/
DECLARE
TRIGGERCHECKERFLAG INT;
BEGIN
  SELECT COUNT(*)  INTO TRIGGERCHECKERFLAG  FROM all_triggers  WHERE OWNER = sys_context('userenv', 'current_schema') AND trigger_name = UPPER('COL_MAP_SPEC_MAP_SEQ_ID_INS');
  IF TRIGGERCHECKERFLAG = 0 THEN
    EXECUTE IMMEDIATE 'CREATE OR REPLACE TRIGGER  "COL_MAP_SPEC_MAP_SEQ_ID_INS" BEFORE INSERT ON MAPPING_SPECIFICATION FOR EACH ROW BEGIN SELECT COL_MAP_SPEC_MAP_SEQ_ID_SEQ.NEXTVAL INTO :new.MAP_SEQ_ID FROM DUAL; END;';
    EXECUTE IMMEDIATE 'ALTER TRIGGER  "COL_MAP_SPEC_MAP_SEQ_ID_INS" ENABLE';
  END IF;
END;
/
DECLARE
   COLUMNCHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO COLUMNCHECKERFLAG FROM all_constraints WHERE  OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME = UPPER('RM_RELEASE') and  delete_rule = 'CASCADE' and constraint_name='FK_RM_REL_STAT_ID';
   IF COLUMNCHECKERFLAG = 1 THEN
      EXECUTE IMMEDIATE 'ALTER TABLE RM_RELEASE DROP CONSTRAINT FK_RM_REL_STAT_ID';
      EXECUTE IMMEDIATE 'ALTER TABLE RM_RELEASE ADD CONSTRAINT FK_RM_REL_STAT_ID FOREIGN KEY(RELEASESTATUSID) REFERENCES RM_MIGRATIONSTATUS (MIGRATIONSTATUSID)';
   END IF;
END;
/
DECLARE
   COLUMNCHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO COLUMNCHECKERFLAG FROM all_constraints WHERE  OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME = UPPER('RM_MIGRATIONOBJECT') and  delete_rule = 'CASCADE' and constraint_name='FK_RM_MIG_FROM_ENV';
   IF COLUMNCHECKERFLAG = 1 THEN
      EXECUTE IMMEDIATE 'ALTER TABLE RM_MIGRATIONOBJECT DROP CONSTRAINT FK_RM_MIG_FROM_ENV';
      EXECUTE IMMEDIATE 'ALTER TABLE RM_MIGRATIONOBJECT ADD CONSTRAINT FK_RM_MIG_FROM_ENV FOREIGN KEY(MIGRATIONFROMENV) REFERENCES RM_ENVIRONMENT (ENVIRONMENTID)';
   END IF;
END;
/
DECLARE
   COLUMNCHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO COLUMNCHECKERFLAG FROM all_constraints WHERE  OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME = UPPER('RM_MIGRATIONOBJECT') and  delete_rule = 'CASCADE' and constraint_name='FK_RM_MIG_TO_ENV';
   IF COLUMNCHECKERFLAG = 1 THEN
      EXECUTE IMMEDIATE 'ALTER TABLE RM_MIGRATIONOBJECT DROP CONSTRAINT FK_RM_MIG_TO_ENV';
      EXECUTE IMMEDIATE 'ALTER TABLE RM_MIGRATIONOBJECT ADD CONSTRAINT FK_RM_MIG_TO_ENV FOREIGN KEY(MIGRATIONTOENV) REFERENCES RM_ENVIRONMENT (ENVIRONMENTID)';
   END IF;
END;
/

DECLARE
TABLECHECKERFLAG INT;
BEGIN
  SELECT COUNT(*)
  INTO TABLECHECKERFLAG  FROM ALL_TABLES  WHERE OWNER    = sys_context( 'userenv', 'current_schema' )  AND TABLE_NAME = UPPER('APPENDED_MAP_SPEC_RCRDS');
    IF TABLECHECKERFLAG = 1 THEN
        EXECUTE IMMEDIATE 'DROP TABLE APPENDED_MAP_SPEC_RCRDS';
        EXECUTE IMMEDIATE 'DROP TABLE MASTER_LINEAGE_GRAPH_V';
    END IF;
END;
/

DECLARE
TABLECHECKERFLAG INT;
BEGIN
  SELECT COUNT(*)
  INTO TABLECHECKERFLAG  FROM ALL_TABLES  WHERE OWNER    = sys_context( 'userenv', 'current_schema' )  AND TABLE_NAME = UPPER('APPENDED_MAP_SPEC_RECORDS');
    IF TABLECHECKERFLAG = 0 THEN
    EXECUTE IMMEDIATE 'CREATE TABLE APPENDED_MAP_SPEC_RECORDS(
		 SRC_SYSTEM_NAME 				VARCHAR2(4000) NULL
		,SRC_SYSTEM_ENVIRONMENT_NAME                    VARCHAR2(4000) NULL
		,SRC_TABLE_NAME 				VARCHAR2(4000) NULL
		,SRC_COLUMN_NAME 				VARCHAR2(4000) NULL
		,SRC_COL_DATATYPE 				VARCHAR2(4000) NULL
		,SRC_COL_LENGTH 				VARCHAR2(4000) NULL
		,SRC_COL_PRECISION 				VARCHAR2(4000) NULL
		,SRC_COL_SCALE 					VARCHAR2(4000) NULL
		,TGT_SYSTEM_NAME 				VARCHAR2(4000) NULL
		,TGT_SYSTEM_ENVIRONMENT_NAME                    VARCHAR2(4000) NULL
		,TGT_TABLE_NAME 				VARCHAR2(4000) NULL
		,TGT_COLUMN_NAME 				VARCHAR2(4000) NULL
		,TGT_COL_DATATYPE 				VARCHAR2(4000) NULL
		,TGT_COL_LENGTH 				VARCHAR2(4000) NULL
		,TGT_COL_PRECISION 				VARCHAR2(4000) NULL
		,TGT_COL_SCALE 					VARCHAR2(4000) NULL
		,MAP_ID 					NUMBER  NULL
		,MAP_SEQ_ID 					NUMBER  NULL
		,PROJ_ID 					NUMBER  NULL
		,BUSINESS_RULE 					VARCHAR2(4000) NULL
    )';
    END IF;
END;
/

DECLARE
TABLECHECKERFLAG INT;
BEGIN
  SELECT COUNT(*)
  INTO TABLECHECKERFLAG  FROM ALL_TABLES  WHERE OWNER    = sys_context( 'userenv', 'current_schema' )  AND TABLE_NAME = UPPER('MASTER_LINEAGE_GRAPH');
    IF TABLECHECKERFLAG = 0 THEN
		EXECUTE IMMEDIATE 'CREATE TABLE MASTER_LINEAGE_GRAPH   (
		 SRC_KEY                     VARCHAR2(4000),
		 SRC_SYSTEM_NAME             VARCHAR2(4000),
		 SRC_SYSTEM_ENVIRONMENT_NAME VARCHAR2(4000),
		 SRC_TABLE_NAME              VARCHAR2(4000),
		 SRC_COLUMN_NAME             VARCHAR2(4000),
		 TGT_KEY                     VARCHAR2(4000),
		 TGT_SYSTEM_NAME             VARCHAR2(4000),
		 TGT_SYSTEM_ENVIRONMENT_NAME VARCHAR2(4000),
		 TGT_TABLE_NAME              VARCHAR2(4000),
		 TGT_COLUMN_NAME             VARCHAR2(4000),
		 MAP_SEQ_ID                  NUMBER,
		 PROJ_ID                     NUMBER,
		 RELATION                    VARCHAR2(20)
			)';
    END IF;
END;
/

DECLARE
   INDEXCHECKERFLAG INT;
BEGIN
    SELECT COUNT(*) INTO INDEXCHECKERFLAG FROM ALL_INDEXES WHERE  OWNER = sys_context('userenv', 'current_schema') AND INDEX_NAME = UPPER('IDX_MASTER_LINEAGE_GRAPH');
    IF INDEXCHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'CREATE INDEX "IDX_MASTER_LINEAGE_GRAPH" ON "MASTER_LINEAGE_GRAPH"("SRC_KEY","RELATION")';
    END IF;
END;
/

DECLARE
TABLECHECKERFLAG INT;
BEGIN
    SELECT COUNT(*) INTO TABLECHECKERFLAG FROM ADS_KEY_VALUE_OBJECTS WHERE  OBJECT_TYPE = 'LINEAGE_DATA';
    IF TABLECHECKERFLAG = 0 THEN
        EXECUTE IMMEDIATE 'INSERT INTO ADS_KEY_VALUE_OBJECTS (OBJECT_TYPE,OBJECT_TABLE,OBJECT_TABLE_COLUMN,OBJECT_PARENT_TYPE,OBJECT_PARENT_COLUMN_ID,OBJECT_LEVEL,MODULE_KEY,SYSTEM_BASED,OBJECT_TITLE)
                VALUES( ''LINEAGE_DATA'',''LINEAGE_DATA'','''','''','''',''1'',''com.ads.mm.permission.generic'',''1'',''LINEAGE_DATA'')';
    END IF;
END;
/


DECLARE
   ROWCHECKERFLAG INT;
BEGIN
	SELECT count(*) INTO ROWCHECKERFLAG FROM RM_HISTORYTYPE WHERE HISTORYTYPENAME = 'RESET';
	IF ROWCHECKERFLAG = 0 THEN
		INSERT INTO RM_HISTORYTYPE (HISTORYTYPENAME, HISTORYTYPEDESC)
        (SELECT 'RESET', 'Reset' FROM DUAL);
	END IF;
END;
/

DECLARE
   TABLECHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO TABLECHECKERFLAG FROM ALL_OBJECTS WHERE OWNER = sys_context('userenv', 'current_schema') AND OBJECT_TYPE = 'FUNCTION' AND OBJECT_NAME = UPPER('FN_GET_GEN_FORWARD_LINEAGE');
   IF TABLECHECKERFLAG = 1 THEN
      EXECUTE IMMEDIATE 'DROP FUNCTION FN_GET_GEN_FORWARD_LINEAGE';
   END IF;
END;
/

CREATE OR REPLACE FUNCTION FN_GET_GEN_FORWARD_LINEAGE(CURRENTVAL_IN VARCHAR2,PROJ_ID_IN VARCHAR2,MAXRESULT NUMBER)
RETURN MASTER_LINEAGE_OBJ_TAB PIPELINED
IS
        PRAGMA AUTONOMOUS_TRANSACTION;
        CYCLEIDS_COUNT    NUMBER;
        COUNTER  NUMBER :=1;
		    NXT_LIN_CYCID NUMBER;
        CURR_LIN_CYCID NUMBER;
        RESULTCOUNT NUMBER;
        MAXRECORDS TABLE_RECORDS_COUNT.RECORDS_COUNT%TYPE := MAXRESULT;
        CURRENTVAL  VARCHAR(4000) := UPPER(TRIM(CURRENTVAL_IN));
BEGIN

		DELETE FROM LINEAGE_CYCLEIDS_G_TBL;

		DELETE FROM LINEAGE_RESULT_G_TBL;
		COMMIT;

		INSERT INTO LINEAGE_CYCLEIDS_G_TBL (NODE) VALUES(CURRENTVAL);
		COMMIT;
		SELECT COUNT(*) INTO   CYCLEIDS_COUNT 	FROM   LINEAGE_CYCLEIDS_G_TBL;

		WHILE ( COUNTER <= CYCLEIDS_COUNT ) LOOP

			SELECT COUNT(*) INTO RESULTCOUNT  FROM   LINEAGE_RESULT_G_TBL;
			IF MAXRESULT IS NULL THEN
				BEGIN
					SELECT RECORDS_COUNT INTO MAXRECORDS  FROM TABLE_RECORDS_COUNT WHERE TABLE_NAME='APPENDED_MAP_SPEC_RECORDS';
				END;
			END IF;
			IF RESULTCOUNT < MAXRECORDS  THEN

				BEGIN
						IF PROJ_ID_IN IS NULL THEN
							BEGIN
							    INSERT INTO LINEAGE_CYCLEIDS_G_TBL(NODE)
									SELECT DISTINCT TGT_KEY  FROM   MASTER_LINEAGE_GRAPH MS
									WHERE  MS.SRC_KEY = CURRENTVAL      AND  RELATION = 'FORWARD'   AND ( MS.TGT_KEY NOT IN (SELECT NODE    FROM   LINEAGE_CYCLEIDS_G_TBL) );

							END;
						ELSE
							BEGIN
								INSERT INTO LINEAGE_CYCLEIDS_G_TBL(NODE)
									SELECT DISTINCT TGT_KEY  FROM   MASTER_LINEAGE_GRAPH MS
									WHERE  MS.SRC_KEY = CURRENTVAL AND PROJ_ID IN(SELECT COLUMN_VALUE AS DATA FROM TABLE(SPLIT_STRING(PROJ_ID_IN))) AND  RELATION = 'FORWARD'   AND
									( MS.TGT_KEY NOT IN (SELECT NODE    FROM   LINEAGE_CYCLEIDS_G_TBL) );

							END;
						END IF;
				EXCEPTION WHEN NO_DATA_FOUND THEN
					   DBMS_OUTPUT.PUT_LINE('RECORD EXIST' );

				END;


				IF PROJ_ID_IN IS NULL THEN
					  INSERT INTO LINEAGE_RESULT_G_TBL    (SRC_KEY,  SRC_SYSTEM_NAME,SRC_SYSTEM_ENVIRONMENT_NAME,SRC_TABLE_NAME,SRC_COLUMN_NAME,   TGT_KEY,  TGT_SYSTEM_NAME,TGT_SYSTEM_ENVIRONMENT_NAME,TGT_TABLE_NAME,TGT_COLUMN_NAME,MAP_SEQ_ID, PROJ_ID,CYCLE_ID)
					  SELECT DISTINCT SRC_KEY,   SRC_SYSTEM_NAME,SRC_SYSTEM_ENVIRONMENT_NAME, SRC_TABLE_NAME,SRC_COLUMN_NAME, TGT_KEY,    TGT_SYSTEM_NAME,TGT_SYSTEM_ENVIRONMENT_NAME ,TGT_TABLE_NAME ,TGT_COLUMN_NAME,MAP_SEQ_ID
									 ,PROJ_ID,CYCTBL.CYCLE_ID   FROM   MASTER_LINEAGE_GRAPH MS  JOIN   LINEAGE_CYCLEIDS_G_TBL CYCTBL ON MS.SRC_KEY = CYCTBL.NODE
					                  WHERE  MS.SRC_KEY = CURRENTVAL AND  RELATION = 'FORWARD';
				ELSE
					  INSERT INTO LINEAGE_RESULT_G_TBL    (SRC_KEY,  SRC_SYSTEM_NAME,SRC_SYSTEM_ENVIRONMENT_NAME,SRC_TABLE_NAME,SRC_COLUMN_NAME,   TGT_KEY,  TGT_SYSTEM_NAME,TGT_SYSTEM_ENVIRONMENT_NAME,TGT_TABLE_NAME,TGT_COLUMN_NAME,MAP_SEQ_ID, PROJ_ID,CYCLE_ID)
					  SELECT DISTINCT SRC_KEY,   SRC_SYSTEM_NAME,SRC_SYSTEM_ENVIRONMENT_NAME, SRC_TABLE_NAME,SRC_COLUMN_NAME, TGT_KEY,    TGT_SYSTEM_NAME,TGT_SYSTEM_ENVIRONMENT_NAME ,TGT_TABLE_NAME,TGT_COLUMN_NAME,MAP_SEQ_ID
                                      ,PROJ_ID,CYCTBL.CYCLE_ID     FROM   MASTER_LINEAGE_GRAPH MS  JOIN   LINEAGE_CYCLEIDS_G_TBL CYCTBL ON MS.SRC_KEY = CYCTBL.NODE
					                  WHERE  MS.SRC_KEY = CURRENTVAL AND PROJ_ID IN(SELECT COLUMN_VALUE AS DATA FROM TABLE(SPLIT_STRING(PROJ_ID_IN))) AND  RELATION = 'FORWARD';
				END IF;

				SELECT COUNT(*) INTO CYCLEIDS_COUNT FROM   LINEAGE_CYCLEIDS_G_TBL;

				SELECT CYCLE_ID INTO CURR_LIN_CYCID FROM LINEAGE_CYCLEIDS_G_TBL WHERE NODE=CURRENTVAL;

				NXT_LIN_CYCID := CURR_LIN_CYCID+1;

				BEGIN
					WHILE (COUNTER < CYCLEIDS_COUNT) LOOP
							BEGIN
									SELECT  NODE INTO  CURRENTVAL   FROM   LINEAGE_CYCLEIDS_G_TBL   WHERE  CYCLE_ID = NXT_LIN_CYCID;
									EXIT;
							EXCEPTION WHEN NO_DATA_FOUND THEN
									NXT_LIN_CYCID:=NXT_LIN_CYCID+1;
									SELECT COUNT(*) INTO CYCLEIDS_COUNT FROM   LINEAGE_CYCLEIDS_G_TBL;
									DBMS_OUTPUT.PUT_LINE('NO RECORD FOUND' );
							END;
					END LOOP;
				END;
				COUNTER := COUNTER + 1;
			ELSE
				EXIT;
			END IF;
		END LOOP;

		COMMIT;
		FOR RES_RECORD IN
			(SELECT DISTINCT SRC_KEY,SRC_SYSTEM_NAME,SRC_SYSTEM_ENVIRONMENT_NAME,SRC_TABLE_NAME,SRC_COLUMN_NAME,TGT_KEY,TGT_SYSTEM_NAME,TGT_SYSTEM_ENVIRONMENT_NAME,TGT_TABLE_NAME,TGT_COLUMN_NAME,MAP_SEQ_ID,PROJ_ID,CYCLE_ID FROM LINEAGE_RESULT_G_TBL ORDER BY CYCLE_ID ASC) LOOP
			BEGIN
			  PIPE ROW(MASTER_LINEAGE_OBJECT(RES_RECORD.SRC_KEY,
			  RES_RECORD.SRC_SYSTEM_NAME,RES_RECORD.SRC_SYSTEM_ENVIRONMENT_NAME,RES_RECORD.SRC_TABLE_NAME,RES_RECORD.SRC_COLUMN_NAME,RES_RECORD.TGT_KEY,RES_RECORD.TGT_SYSTEM_NAME,RES_RECORD.TGT_SYSTEM_ENVIRONMENT_NAME,RES_RECORD.TGT_TABLE_NAME,
			  RES_RECORD.TGT_COLUMN_NAME,RES_RECORD.MAP_SEQ_ID,RES_RECORD.PROJ_ID));
			END;
		END LOOP RES_RECORD;
	  RETURN;
END FN_GET_GEN_FORWARD_LINEAGE;
/

DECLARE
   TABLECHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO TABLECHECKERFLAG FROM ALL_OBJECTS WHERE OWNER = sys_context('userenv', 'current_schema') AND OBJECT_TYPE = 'FUNCTION' AND OBJECT_NAME = UPPER('FN_GET_GEN_REVERSE_LINEAGE');
   IF TABLECHECKERFLAG = 1 THEN
      EXECUTE IMMEDIATE 'DROP FUNCTION FN_GET_GEN_REVERSE_LINEAGE';
   END IF;
END;
/

CREATE OR REPLACE FUNCTION FN_GET_GEN_REVERSE_LINEAGE(CURRENTVAL_IN VARCHAR2,PROJ_ID_IN VARCHAR2,MAXRESULT NUMBER)
RETURN MASTER_LINEAGE_OBJ_TAB PIPELINED
IS
        PRAGMA AUTONOMOUS_TRANSACTION;
        CYCLEIDS_COUNT    NUMBER;
        COUNTER  NUMBER :=1;
		    NXT_LIN_CYCID NUMBER;
        CURR_LIN_CYCID NUMBER;
        RESULTCOUNT NUMBER;
        MAXRECORDS TABLE_RECORDS_COUNT.RECORDS_COUNT%TYPE := MAXRESULT;
        CURRENTVAL  VARCHAR(4000) := UPPER(TRIM(CURRENTVAL_IN));
BEGIN

		DELETE FROM LINEAGE_CYCLEIDS_G_TBL;

		DELETE FROM LINEAGE_RESULT_G_TBL;
		COMMIT;

		INSERT INTO LINEAGE_CYCLEIDS_G_TBL (NODE) VALUES(CURRENTVAL);
		COMMIT;
		SELECT COUNT(*) INTO   CYCLEIDS_COUNT 	FROM   LINEAGE_CYCLEIDS_G_TBL;

		WHILE ( COUNTER <= CYCLEIDS_COUNT ) LOOP

			SELECT COUNT(*) INTO RESULTCOUNT  FROM   LINEAGE_RESULT_G_TBL;
			IF MAXRESULT IS NULL THEN
				BEGIN
					SELECT RECORDS_COUNT INTO MAXRECORDS  FROM TABLE_RECORDS_COUNT WHERE TABLE_NAME='APPENDED_MAP_SPEC_RECORDS';
				END;
			END IF;
			IF RESULTCOUNT < MAXRECORDS  THEN

				BEGIN
						IF PROJ_ID_IN IS NULL THEN
							BEGIN
							    INSERT INTO LINEAGE_CYCLEIDS_G_TBL(NODE)
									SELECT DISTINCT TGT_KEY  FROM   MASTER_LINEAGE_GRAPH MS
									WHERE  MS.SRC_KEY = CURRENTVAL      AND  RELATION = 'REVERSE'   AND ( MS.TGT_KEY NOT IN (SELECT NODE    FROM   LINEAGE_CYCLEIDS_G_TBL) );

							END;
						ELSE
							BEGIN
								INSERT INTO LINEAGE_CYCLEIDS_G_TBL(NODE)
									SELECT DISTINCT TGT_KEY  FROM   MASTER_LINEAGE_GRAPH MS
									WHERE  MS.SRC_KEY = CURRENTVAL AND PROJ_ID IN(SELECT COLUMN_VALUE AS DATA FROM TABLE(SPLIT_STRING(PROJ_ID_IN))) AND  RELATION = 'REVERSE'   AND
									( MS.TGT_KEY NOT IN (SELECT NODE    FROM   LINEAGE_CYCLEIDS_G_TBL) );

							END;
						END IF;
				EXCEPTION WHEN NO_DATA_FOUND THEN
					   DBMS_OUTPUT.PUT_LINE('RECORD EXIST' );

				END;


				IF PROJ_ID_IN IS NULL THEN
					  INSERT INTO LINEAGE_RESULT_G_TBL    (TGT_KEY,  TGT_SYSTEM_NAME,TGT_SYSTEM_ENVIRONMENT_NAME,TGT_TABLE_NAME,TGT_COLUMN_NAME,SRC_KEY,  SRC_SYSTEM_NAME,SRC_SYSTEM_ENVIRONMENT_NAME,SRC_TABLE_NAME,SRC_COLUMN_NAME,MAP_SEQ_ID, PROJ_ID,CYCLE_ID)
					  SELECT DISTINCT SRC_KEY,   SRC_SYSTEM_NAME,SRC_SYSTEM_ENVIRONMENT_NAME, SRC_TABLE_NAME,SRC_COLUMN_NAME, TGT_KEY,    TGT_SYSTEM_NAME,TGT_SYSTEM_ENVIRONMENT_NAME ,TGT_TABLE_NAME ,TGT_COLUMN_NAME,MAP_SEQ_ID
									 ,PROJ_ID,CYCTBL.CYCLE_ID   FROM   MASTER_LINEAGE_GRAPH MS  JOIN   LINEAGE_CYCLEIDS_G_TBL CYCTBL ON MS.SRC_KEY = CYCTBL.NODE
					                  WHERE  MS.SRC_KEY = CURRENTVAL AND  RELATION = 'REVERSE';
				ELSE
					  INSERT INTO LINEAGE_RESULT_G_TBL    ( TGT_KEY,  TGT_SYSTEM_NAME,TGT_SYSTEM_ENVIRONMENT_NAME,TGT_TABLE_NAME,TGT_COLUMN_NAME,SRC_KEY,  SRC_SYSTEM_NAME,SRC_SYSTEM_ENVIRONMENT_NAME,SRC_TABLE_NAME,SRC_COLUMN_NAME,MAP_SEQ_ID, PROJ_ID,CYCLE_ID)
					  SELECT DISTINCT SRC_KEY,   SRC_SYSTEM_NAME,SRC_SYSTEM_ENVIRONMENT_NAME, SRC_TABLE_NAME,SRC_COLUMN_NAME, TGT_KEY,    TGT_SYSTEM_NAME,TGT_SYSTEM_ENVIRONMENT_NAME ,TGT_TABLE_NAME,TGT_COLUMN_NAME,MAP_SEQ_ID
                                      ,PROJ_ID,CYCTBL.CYCLE_ID     FROM   MASTER_LINEAGE_GRAPH MS  JOIN   LINEAGE_CYCLEIDS_G_TBL CYCTBL ON MS.SRC_KEY = CYCTBL.NODE
					                  WHERE  MS.SRC_KEY = CURRENTVAL AND PROJ_ID IN(SELECT COLUMN_VALUE AS DATA FROM TABLE(SPLIT_STRING(PROJ_ID_IN))) AND  RELATION = 'REVERSE';
				END IF;

				SELECT COUNT(*) INTO CYCLEIDS_COUNT FROM   LINEAGE_CYCLEIDS_G_TBL;

				SELECT CYCLE_ID INTO CURR_LIN_CYCID FROM LINEAGE_CYCLEIDS_G_TBL WHERE NODE=CURRENTVAL;

				NXT_LIN_CYCID := CURR_LIN_CYCID+1;

				BEGIN
					WHILE (COUNTER < CYCLEIDS_COUNT) LOOP
							BEGIN
									SELECT  NODE INTO  CURRENTVAL   FROM   LINEAGE_CYCLEIDS_G_TBL   WHERE  CYCLE_ID = NXT_LIN_CYCID;
									EXIT;
							EXCEPTION WHEN NO_DATA_FOUND THEN
									NXT_LIN_CYCID:=NXT_LIN_CYCID+1;
									SELECT COUNT(*) INTO CYCLEIDS_COUNT FROM   LINEAGE_CYCLEIDS_G_TBL;
									DBMS_OUTPUT.PUT_LINE('NO RECORD FOUND' );
							END;
					END LOOP;
				END;
				COUNTER := COUNTER + 1;
			ELSE
				EXIT;
			END IF;
		END LOOP;

		COMMIT;
		FOR RES_RECORD IN
			(SELECT DISTINCT SRC_KEY,SRC_SYSTEM_NAME,SRC_SYSTEM_ENVIRONMENT_NAME,SRC_TABLE_NAME,SRC_COLUMN_NAME,TGT_KEY,TGT_SYSTEM_NAME,TGT_SYSTEM_ENVIRONMENT_NAME,TGT_TABLE_NAME,TGT_COLUMN_NAME,MAP_SEQ_ID,PROJ_ID,CYCLE_ID FROM LINEAGE_RESULT_G_TBL ORDER BY CYCLE_ID ASC) LOOP
			BEGIN
			  PIPE ROW(MASTER_LINEAGE_OBJECT(RES_RECORD.SRC_KEY,
			  RES_RECORD.SRC_SYSTEM_NAME,RES_RECORD.SRC_SYSTEM_ENVIRONMENT_NAME,RES_RECORD.SRC_TABLE_NAME,RES_RECORD.SRC_COLUMN_NAME,RES_RECORD.TGT_KEY,RES_RECORD.TGT_SYSTEM_NAME,RES_RECORD.TGT_SYSTEM_ENVIRONMENT_NAME,RES_RECORD.TGT_TABLE_NAME,
			  RES_RECORD.TGT_COLUMN_NAME,RES_RECORD.MAP_SEQ_ID,RES_RECORD.PROJ_ID));
			END;
		END LOOP RES_RECORD;
	  RETURN;
END FN_GET_GEN_REVERSE_LINEAGE;
/



DECLARE
   TABLECHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO TABLECHECKERFLAG FROM "APP_PREFERENCES" WHERE PREFERENCE_NAME ='LAST_MAPPING_LINEAGE_SYNC_TIME';
   IF TABLECHECKERFLAG = 0 THEN
    INSERT INTO APP_PREFERENCES( PREFERENCE_NAME, PREFERENCE_VALUE) VALUES('LAST_MAPPING_LINEAGE_SYNC_TIME','1990-01-01 00:00:00.001');
    END IF;
END;
/

CREATE OR REPLACE FORCE VIEW "APPENDED_MAP_SPEC_RCRDS_V" ("SRC_SYSTEM_NAME", "SRC_SYSTEM_ENVIRONMENT_NAME", "SRC_TABLE_NAME", "SRC_COLUMN_NAME", "SRC_COL_DATATYPE", "SRC_COL_LENGTH", "SRC_COL_PRECISION", "SRC_COL_SCALE", "SRC_XPATH", "TGT_COLUMN_NAME", "TGT_TABLE_NAME", "TGT_SYSTEM_ENVIRONMENT_NAME", "TGT_SYSTEM_NAME", "TGT_COL_DATATYPE", "TGT_COL_LENGTH", "TGT_COL_PRECISION", "TGT_COL_SCALE", "TGT_XPATH", "MAP_SEQ_ID", "BUSINESS_RULE", "MAP_ID", "PROJ_ID", "LAST_MODIFIED_DATE_TIME")
AS
WITH TGT AS
	 (SELECT REGEXP_SUBSTR(REPLACE(MS.TGT_COLUMN_NAME,CHR(10),','), '[^,]+', 1, LEVEL) TGT_COLUMN_NAME ,
	   REGEXP_SUBSTR(REPLACE(MS.TGT_TABLE_NAME,CHR(10),','), '[^,]+', 1, LEVEL) TGT_TABLE_NAME ,
	   REGEXP_SUBSTR(REPLACE(MS.TGT_SYSTEM_ENVIRONMENT_NAME,CHR(10),','), '[^,]+', 1, LEVEL) TGT_SYSTEM_ENVIRONMENT_NAME,
	   REGEXP_SUBSTR(REPLACE(MS.TGT_SYSTEM_NAME,CHR(10),','), '[^,]+', 1, LEVEL) TGT_SYSTEM_NAME,
	   REGEXP_SUBSTR(REPLACE(MS.TGT_COL_DATATYPE,CHR(10),','), '[^,]+', 1, LEVEL) TGT_COL_DATATYPE,
	   REGEXP_SUBSTR(REPLACE(MS.TGT_COL_LENGTH,CHR(10),','), '[^,]+', 1, LEVEL) TGT_COL_LENGTH,
	   REGEXP_SUBSTR(REPLACE(MS.TGT_COL_PRECISION,CHR(10),','), '[^,]+', 1, LEVEL) TGT_COL_PRECISION,
	   REGEXP_SUBSTR(REPLACE(MS.TGT_COL_SCALE,CHR(10),','), '[^,]+', 1, LEVEL) TGT_COL_SCALE,
           REGEXP_SUBSTR(REPLACE(MS.TGT_XPATH,CHR(10),','), '[^,]+', 1, LEVEL) TGT_XPATH,
	   MAP_SEQ_ID,
	   BUSINESS_RULE,
	   MAP_ID,
	   PROJ_ID,
	   LAST_MODIFIED_DATE_TIME
	 FROM MAPPING_SPECIFICATION MS
	   CONNECT BY LEVEL          <= LENGTH(REPLACE(MS.TGT_COLUMN_NAME,CHR(10),',')) - LENGTH(REPLACE(REPLACE(MS.TGT_COLUMN_NAME,CHR(10),','), ',')) + 1
	 AND PRIOR MAP_SEQ_ID         = MAP_SEQ_ID
	 AND PRIOR DBMS_RANDOM.VALUE IS NOT NULL
	 ) ,
	 SRC AS
	 (SELECT REGEXP_SUBSTR(REPLACE(MS.SRC_COLUMN_NAME,CHR(10),','), '[^,]+', 1, LEVEL) SRC_COLUMN_NAME ,
	   REGEXP_SUBSTR(REPLACE(MS.SRC_TABLE_NAME,CHR(10),','), '[^,]+', 1, LEVEL) SRC_TABLE_NAME ,
	   REGEXP_SUBSTR(REPLACE(MS.SRC_SYSTEM_ENVIRONMENT_NAME,CHR(10),','), '[^,]+', 1, LEVEL) SRC_SYSTEM_ENVIRONMENT_NAME,
	   REGEXP_SUBSTR(REPLACE(MS.SRC_SYSTEM_NAME,CHR(10),','), '[^,]+', 1, LEVEL) SRC_SYSTEM_NAME,
	   REGEXP_SUBSTR(REPLACE(MS.SRC_COL_DATATYPE,CHR(10),','), '[^,]+', 1, LEVEL) SRC_COL_DATATYPE ,
	   REGEXP_SUBSTR(REPLACE(MS.SRC_COL_LENGTH,CHR(10),','), '[^,]+', 1, LEVEL) SRC_COL_LENGTH ,
	   REGEXP_SUBSTR(REPLACE(MS.SRC_COL_PRECISION,CHR(10),','), '[^,]+', 1, LEVEL) SRC_COL_PRECISION,
	   REGEXP_SUBSTR(REPLACE(MS.SRC_COL_SCALE,CHR(10),','), '[^,]+', 1, LEVEL) SRC_COL_SCALE,
           REGEXP_SUBSTR(REPLACE(MS.SRC_XPATH,CHR(10),','), '[^,]+', 1, LEVEL) SRC_XPATH,
	   MAP_SEQ_ID,
	   MAP_ID,
	   PROJ_ID,
	   LAST_MODIFIED_DATE_TIME
	 FROM MAPPING_SPECIFICATION MS
	   CONNECT BY LEVEL          <= LENGTH(REPLACE(MS.SRC_COLUMN_NAME,CHR(10),',')) - LENGTH(REPLACE(REPLACE(MS.SRC_COLUMN_NAME,CHR(10),','), ',')) + 1
	 AND PRIOR MAP_SEQ_ID         = MAP_SEQ_ID
	 AND PRIOR DBMS_RANDOM.VALUE IS NOT NULL
	 )
	SELECT SRC.SRC_SYSTEM_NAME,
	 SRC.SRC_SYSTEM_ENVIRONMENT_NAME,
	 SRC.SRC_TABLE_NAME,
	 SRC.SRC_COLUMN_NAME,
	 SRC.SRC_COL_DATATYPE,
	 SRC.SRC_COL_LENGTH,
	 SRC.SRC_COL_PRECISION,
	 SRC.SRC_COL_SCALE,
         SRC.SRC_XPATH,
	 TGT.*
	FROM SRC
	JOIN TGT
	ON (SRC.MAP_SEQ_ID = TGT.MAP_SEQ_ID);
		
/ 

DECLARE
  TABLECHECKERFLAG INT;
BEGIN
  SELECT COUNT(*) INTO TABLECHECKERFLAG FROM ALL_TABLES WHERE OWNER = sys_context( 'userenv', 'current_schema' ) AND TABLE_NAME = UPPER('OBJECT_OPERATIONS');
  IF TABLECHECKERFLAG = 0 THEN
    EXECUTE IMMEDIATE  'CREATE TABLE "OBJECT_OPERATIONS" (
	"ID" NUMBER NOT NULL,
	"OBJECT_ID" NUMBER NOT NULL,
	"OBJECT_TYPE_ID" NUMBER NOT NULL,
	"OPERATION" VARCHAR2(50) NOT NULL)';
  END IF;
END;
/

DECLARE
SEQUENCECHECKERFLAG INT;
BEGIN
    SELECT COUNT(*) INTO SEQUENCECHECKERFLAG FROM ALL_SEQUENCES WHERE SEQUENCE_OWNER = sys_context('userenv', 'current_schema') AND SEQUENCE_NAME = UPPER('OBJECT_OPERATIONS_SEQ');
    IF SEQUENCECHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'CREATE SEQUENCE   "OBJECT_OPERATIONS_SEQ"  MINVALUE 1 MAXVALUE 999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE';
    END IF;
END;
/

DECLARE
TRIGGERCHECKERFLAG INT;
BEGIN
  SELECT COUNT(*)  INTO TRIGGERCHECKERFLAG  FROM all_triggers  WHERE OWNER = sys_context('userenv', 'current_schema') AND trigger_name = UPPER('OBJ_OPERATIONS_SEQ_INSERT');
  IF TRIGGERCHECKERFLAG = 0 THEN
    EXECUTE IMMEDIATE 'CREATE OR REPLACE TRIGGER  "OBJ_OPERATIONS_SEQ_INSERT" BEFORE INSERT ON OBJECT_OPERATIONS FOR EACH ROW BEGIN SELECT OBJECT_OPERATIONS_SEQ.NEXTVAL INTO :new.ID FROM DUAL; END;';
    EXECUTE IMMEDIATE 'ALTER TRIGGER  "OBJ_OPERATIONS_SEQ_INSERT" ENABLE';
  END IF;
END;
/

DECLARE
    triggercheckerflag   INT;
    versioncheckerflag   INT;
BEGIN
    SELECT COUNT(*) INTO versioncheckerflag FROM ads_mm_version WHERE value <= '9.4';
    IF versioncheckerflag = 1 THEN
        BEGIN
            SELECT COUNT(*) INTO triggercheckerflag FROM all_triggers WHERE owner = sys_context('userenv', 'current_schema') AND trigger_name = upper('MAPPING_SPEC_DELETE_TRIG');
            IF triggercheckerflag = 0 THEN
                BEGIN
                    EXECUTE IMMEDIATE 'CREATE OR REPLACE TRIGGER  "MAPPING_SPEC_DELETE_TRIG" AFTER DELETE ON MAPPING_SPECIFICATION FOR EACH ROW
                                        DECLARE
                                            F_OBJECT_TYPE_ID NUMBER := 0;
                                            
                                        BEGIN
                                            IF F_OBJECT_TYPE_ID = 0 THEN
                                                BEGIN
                                                    SELECT OBJECT_TYPE_ID INTO F_OBJECT_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE = ''MM_MAPPING_ROW'';
                                                END;
                                            END IF;
                                            INSERT INTO OBJECT_OPERATIONS(OBJECT_ID, OBJECT_TYPE_ID, OPERATION) VALUES(:OLD.MAP_SEQ_ID, F_OBJECT_TYPE_ID, ''DELETE'');
                                        END;';
                    EXECUTE IMMEDIATE 'ALTER TRIGGER  "MAPPING_SPEC_DELETE_TRIG" ENABLE';
                END;
            END IF;
        END;
    END IF;
END;
/
-- APPENDED_MAP_SPEC_RECORDS table is refreshed for every sync(Delta sync) and the same table is being used in Lineage queries. Hence we are taking another table called MAPPING_SPEC_RECORDS_TO_SYNC that contains 
-- appended map spec records whose last modified date time is greater than last sync time
DECLARE
TABLECHECKERFLAG INT;
BEGIN
  SELECT COUNT(*)
  INTO TABLECHECKERFLAG  FROM ALL_TABLES  WHERE OWNER    = sys_context( 'userenv', 'current_schema' )  AND TABLE_NAME = UPPER('MAPPING_SPEC_RECORDS_TO_SYNC');
    IF TABLECHECKERFLAG = 0 THEN
    EXECUTE IMMEDIATE 'CREATE TABLE MAPPING_SPEC_RECORDS_TO_SYNC(
		 SRC_SYSTEM_NAME 				VARCHAR2(4000) NULL
		,SRC_SYSTEM_ENVIRONMENT_NAME                    VARCHAR2(4000) NULL
		,SRC_TABLE_NAME 				VARCHAR2(4000) NULL
		,SRC_COLUMN_NAME 				VARCHAR2(4000) NULL
		,SRC_COL_DATATYPE 				VARCHAR2(4000) NULL
		,SRC_COL_LENGTH 				VARCHAR2(4000) NULL
		,SRC_COL_PRECISION 				VARCHAR2(4000) NULL
		,SRC_COL_SCALE 					VARCHAR2(4000) NULL
		,TGT_SYSTEM_NAME 				VARCHAR2(4000) NULL
		,TGT_SYSTEM_ENVIRONMENT_NAME                    VARCHAR2(4000) NULL
		,TGT_TABLE_NAME 				VARCHAR2(4000) NULL
		,TGT_COLUMN_NAME 				VARCHAR2(4000) NULL
		,TGT_COL_DATATYPE 				VARCHAR2(4000) NULL
		,TGT_COL_LENGTH 				VARCHAR2(4000) NULL
		,TGT_COL_PRECISION 				VARCHAR2(4000) NULL
		,TGT_COL_SCALE 					VARCHAR2(4000) NULL
		,MAP_ID 					NUMBER  NULL
		,MAP_SEQ_ID 					NUMBER  NULL
		,PROJ_ID 					NUMBER  NULL
		,BUSINESS_RULE 					VARCHAR2(4000) NULL
    )';
    END IF;
END;
/

DECLARE
   COLUMNCHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO COLUMNCHECKERFLAG FROM ALL_TAB_COLUMNS WHERE  OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME = UPPER('APPENDED_MAP_SPEC_RECORDS') AND COLUMN_NAME=UPPER('SRC_XPATH');
    IF COLUMNCHECKERFLAG = 0 THEN
        EXECUTE IMMEDIATE 'ALTER TABLE APPENDED_MAP_SPEC_RECORDS ADD  SRC_XPATH VARCHAR2(4000) NULL';
        EXECUTE IMMEDIATE 'ALTER TABLE APPENDED_MAP_SPEC_RECORDS ADD  TGT_XPATH VARCHAR2(4000) NULL';
        EXECUTE IMMEDIATE 'ALTER TABLE MAPPING_SPEC_RECORDS_TO_SYNC ADD  SRC_XPATH VARCHAR2(4000) NULL';
        EXECUTE IMMEDIATE 'ALTER TABLE MAPPING_SPEC_RECORDS_TO_SYNC ADD  TGT_XPATH VARCHAR2(4000) NULL';
    END IF;
END;
/
DECLARE
   TYPECHECKERFLAG INT;
BEGIN
	SELECT COUNT(*) INTO TYPECHECKERFLAG FROM ALL_OBJECTS WHERE OWNER = sys_context('userenv', 'current_schema') AND UPPER(OBJECT_NAME) = 'T_APPENDED_MAP_SPEC_ROWS' AND UPPER(OBJECT_TYPE)='TYPE';
   IF TYPECHECKERFLAG = 1 THEN
      EXECUTE IMMEDIATE 'DROP TYPE T_APPENDED_MAP_SPEC_ROWS';
   END IF;
END;
/


DECLARE
   TYPECHECKERFLAG INT;
BEGIN
	SELECT COUNT(*) INTO TYPECHECKERFLAG FROM ALL_OBJECTS WHERE OWNER = sys_context('userenv', 'current_schema') AND UPPER(OBJECT_NAME) = 'GT_APPENDED_MAP_SPEC_ROW' AND UPPER(OBJECT_TYPE)='TYPE';
   IF TYPECHECKERFLAG = 1 THEN
      EXECUTE IMMEDIATE 'DROP TYPE GT_APPENDED_MAP_SPEC_ROW';
   END IF;
END;
/


DECLARE
  TYPECHECKERFLAG INT;
BEGIN
  SELECT COUNT(*)
  INTO TYPECHECKERFLAG
  FROM ALL_OBJECTS
  WHERE OWNER            = sys_context('userenv', 'current_schema')
  AND UPPER(OBJECT_NAME) = 'GT_APPENDED_MAP_SPEC_ROW'
  AND UPPER(OBJECT_TYPE) ='TYPE';
  IF TYPECHECKERFLAG    = 0 THEN
    EXECUTE IMMEDIATE 'CREATE OR REPLACE TYPE GT_APPENDED_MAP_SPEC_ROW AS OBJECT (SRC_SYSTEM_NAME VARCHAR2(4000), SRC_SYSTEM_ENVIRONMENT_NAME VARCHAR2(4000), SRC_TABLE_NAME VARCHAR2(4000), SRC_COLUMN_NAME VARCHAR2(4000), SRC_COL_DATATYPE VARCHAR2(4000), SRC_COL_LENGTH VARCHAR2(4000), SRC_COL_PRECISION VARCHAR2(4000), SRC_COL_SCALE VARCHAR2(4000), SRC_XPATH VARCHAR2(4000), TGT_COLUMN_NAME VARCHAR2(4000), TGT_TABLE_NAME VARCHAR2(4000), TGT_SYSTEM_ENVIRONMENT_NAME VARCHAR2(4000), TGT_SYSTEM_NAME VARCHAR2(4000), TGT_COL_DATATYPE VARCHAR2(4000), TGT_COL_LENGTH VARCHAR2(4000), TGT_COL_PRECISION VARCHAR2(4000), TGT_COL_SCALE VARCHAR2(4000),TGT_XPATH VARCHAR2(4000), MAP_SEQ_ID NUMBER, BUSINESS_RULE VARCHAR2(4000), MAP_ID NUMBER, PROJ_ID NUMBER)';
  END IF;
END;
/
DECLARE
  TYPECHECKERFLAG INT;
BEGIN
  SELECT COUNT(*)
  INTO TYPECHECKERFLAG
  FROM ALL_OBJECTS
  WHERE OWNER            = sys_context('userenv', 'current_schema')
  AND UPPER(OBJECT_NAME) = 'T_APPENDED_MAP_SPEC_ROWS'
  AND UPPER(OBJECT_TYPE) ='TYPE';
  IF TYPECHECKERFLAG     = 0 THEN
    EXECUTE IMMEDIATE 'CREATE OR REPLACE TYPE "T_APPENDED_MAP_SPEC_ROWS" AS TABLE OF "GT_APPENDED_MAP_SPEC_ROW"';
  END IF;
END;
/





DECLARE
   TABLECHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO TABLECHECKERFLAG FROM ALL_TABLES WHERE OWNER = sys_context( 'userenv', 'current_schema' ) AND TABLE_NAME = UPPER('MAP_SEQ_IDS_TOSYNC');
   IF TABLECHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'CREATE GLOBAL TEMPORARY TABLE "MAP_SEQ_IDS_TOSYNC" ( "MAP_SEQ_ID"  NUMBER ) ON COMMIT PRESERVE ROWS';
   END IF;
END;
/
DECLARE
   TABLECHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO TABLECHECKERFLAG FROM ALL_OBJECTS WHERE OWNER = sys_context('userenv', 'current_schema') AND OBJECT_TYPE = 'FUNCTION' AND OBJECT_NAME = UPPER('FN_GET_APPENDED_SPECS_TOSYNC');
   IF TABLECHECKERFLAG = 1 THEN
      EXECUTE IMMEDIATE 'DROP FUNCTION FN_GET_APPENDED_SPECS_TOSYNC';
   END IF;
END;
/
CREATE OR REPLACE FUNCTION FN_GET_APPENDED_SPECS_TOSYNC RETURN t_appended_map_spec_rows
    PIPELINED
AS
    rec gt_appended_map_spec_row;
    CURSOR cur IS
    WITH mapping_specs AS (
        SELECT
            tgt_system_name,
            tgt_system_environment_name,
            tgt_table_name,
            tgt_column_name,
            tgt_col_datatype,
            tgt_col_length,
            tgt_col_precision,
            tgt_col_scale,
            tgt_xpath,
            src_system_name,
            src_system_environment_name,
            src_table_name,
            src_column_name,
            src_col_datatype,
            src_col_length,
            src_col_precision,
            src_col_scale,
            src_xpath,
            business_rule,
            map_seq_id,
            map_id,
            proj_id
        FROM
            mapping_specification ms
        WHERE
            ms.map_seq_id IN (
                SELECT
                    map_seq_id
                FROM
                    map_seq_ids_tosync
            )
    ), tgt AS (
        SELECT
            regexp_substr(replace(ms.tgt_column_name, CHR(10), ','), '[^,]+', 1, level) tgt_column_name,
            regexp_substr(replace(ms.tgt_table_name, CHR(10), ','), '[^,]+', 1, level) tgt_table_name,
            regexp_substr(replace(ms.tgt_system_environment_name, CHR(10), ','), '[^,]+', 1, level) tgt_system_environment_name,
            regexp_substr(replace(ms.tgt_system_name, CHR(10), ','), '[^,]+', 1, level) tgt_system_name,
            regexp_substr(replace(ms.tgt_col_datatype, CHR(10), ','), '[^,]+', 1, level) tgt_col_datatype,
            regexp_substr(replace(ms.tgt_col_length, CHR(10), ','), '[^,]+', 1, level) tgt_col_length,
            regexp_substr(replace(ms.tgt_col_precision, CHR(10), ','), '[^,]+', 1, level) tgt_col_precision,
            regexp_substr(replace(ms.tgt_col_scale, CHR(10), ','), '[^,]+', 1, level) tgt_col_scale,
            REGEXP_SUBSTR(REPLACE(MS.TGT_XPATH,CHR(10),','), '[^,]+', 1, LEVEL) TGT_XPATH,
            map_seq_id,
            business_rule,
            map_id,
            proj_id
        FROM
            mapping_specs ms
        CONNECT BY level <= length(replace(ms.tgt_column_name, CHR(10), ',')) - length(replace(replace(ms.tgt_column_name, CHR(10
        ), ','), ',')) + 1
                   AND PRIOR map_seq_id = map_seq_id
                   AND PRIOR dbms_random.value IS NOT NULL
    ), src AS (
        SELECT
            regexp_substr(replace(ms.src_column_name, CHR(10), ','), '[^,]+', 1, level) src_column_name,
            regexp_substr(replace(ms.src_table_name, CHR(10), ','), '[^,]+', 1, level) src_table_name,
            regexp_substr(replace(ms.src_system_environment_name, CHR(10), ','), '[^,]+', 1, level) src_system_environment_name,
            regexp_substr(replace(ms.src_system_name, CHR(10), ','), '[^,]+', 1, level) src_system_name,
            regexp_substr(replace(ms.src_col_datatype, CHR(10), ','), '[^,]+', 1, level) src_col_datatype,
            regexp_substr(replace(ms.src_col_length, CHR(10), ','), '[^,]+', 1, level) src_col_length,
            regexp_substr(replace(ms.src_col_precision, CHR(10), ','), '[^,]+', 1, level) src_col_precision,
            regexp_substr(replace(ms.src_col_scale, CHR(10), ','), '[^,]+', 1, level) src_col_scale,
            REGEXP_SUBSTR(REPLACE(MS.SRC_XPATH,CHR(10),','), '[^,]+', 1, LEVEL) SRC_XPATH,
            map_seq_id,
            map_id,
            proj_id
        FROM
            mapping_specs ms
        CONNECT BY level <= length(replace(ms.src_column_name, CHR(10), ',')) - length(replace(replace(ms.src_column_name, CHR(10
        ), ','), ',')) + 1
                   AND PRIOR map_seq_id = map_seq_id
                   AND PRIOR dbms_random.value IS NOT NULL
    )
    SELECT
        gt_appended_map_spec_row(src.src_system_name, src.src_system_environment_name, src.src_table_name, src.src_column_name, src
        .src_col_datatype, src.src_col_length, src.src_col_precision, src.src_col_scale, src.src_xpath, tgt.tgt_column_name, tgt.tgt_table_name,
        tgt.tgt_system_environment_name, tgt.tgt_system_name, tgt.tgt_col_datatype, tgt.tgt_col_length, tgt.tgt_col_precision, tgt
        .tgt_col_scale, tgt.tgt_xpath, tgt.map_seq_id, tgt.business_rule, tgt.map_id, tgt.proj_id)
    FROM
        src
        JOIN tgt ON ( src.map_seq_id = tgt.map_seq_id );

BEGIN
    OPEN cur;
    LOOP
        FETCH cur INTO rec;
        EXIT WHEN cur%notfound;
        PIPE ROW ( rec );
    END LOOP;

    CLOSE cur;
    return;
END FN_GET_APPENDED_SPECS_TOSYNC;
/
DECLARE
   FUNCTIONCHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO FUNCTIONCHECKERFLAG FROM ALL_OBJECTS WHERE OWNER = sys_context('userenv', 'current_schema') AND OBJECT_TYPE = 'FUNCTION' AND OBJECT_NAME = UPPER('FN_GET_DECLPATH_FROM_XPATH');
   IF FUNCTIONCHECKERFLAG = 1 THEN
      EXECUTE IMMEDIATE 'DROP FUNCTION FN_GET_DECLPATH_FROM_XPATH';
   END IF;
END;
/
CREATE OR REPLACE FUNCTION FN_GET_DECLPATH_FROM_XPATH (
    i_xpath         IN              VARCHAR2,
    i_table_name    IN              VARCHAR2,
    i_column_name   IN              VARCHAR2,
    i_type          IN              VARCHAR2
) RETURN VARCHAR2 IS

    o_decl_path     VARCHAR2(4000) := upper(replace(trim(i_table_name), '.', '/'));
    v_xpath         VARCHAR2(4000) := upper(trim(i_xpath));
    v_column_name   VARCHAR2(4000) := upper(trim(i_column_name));
    v_table_name    VARCHAR2(4000) := upper(trim(i_table_name));
    v_pos           NUMBER;
BEGIN
    IF v_xpath IS NOT NULL OR substr(v_xpath, 3, length(v_xpath)) IS NOT NULL THEN
        SELECT
            replace(substr(v_xpath, 3,(length(v_xpath))), '.', '/')
        INTO v_xpath
        FROM
            dual;
        SELECT
            regexp_instr(v_xpath, v_column_name || '$')
        INTO v_pos
        FROM
            dual;

        IF v_pos > 0 THEN
            BEGIN
                SELECT
                    substr(v_xpath, 1, v_pos - 1)
                INTO o_decl_path
                FROM
                    dual;

                IF substr(o_decl_path, length(o_decl_path), 1) = '@' THEN
                    BEGIN
                        SELECT
                            substr(o_decl_path, 1, length(o_decl_path) - 2)
                        INTO o_decl_path
                        FROM
                            dual;
                        SELECT
                            '@' || i_column_name
                        INTO v_column_name
                        FROM
                            dual;
                    END;

                ELSIF substr(o_decl_path, length(o_decl_path), 1) = '/' THEN
                    BEGIN
                        SELECT
                            substr(o_decl_path, 1, length(o_decl_path) - 1)
                        INTO o_decl_path
                        FROM
                            dual;
                    END;
                END IF;
            END;
        END IF;
    END IF;
    CASE
        WHEN upper(i_type) = 'TABLE' THEN
            RETURN upper(trim(o_decl_path));
        ELSE
            RETURN upper(o_decl_path
                         || ':'
                         || v_column_name);
    END CASE;
END FN_GET_DECLPATH_FROM_XPATH;
/
DECLARE
   TABLECHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO TABLECHECKERFLAG FROM ALL_OBJECTS WHERE OWNER = sys_context('userenv', 'current_schema') AND OBJECT_TYPE = 'PROCEDURE' AND OBJECT_NAME = UPPER('SP_SYNC_MAPPING_SPECS');
   IF TABLECHECKERFLAG = 1 THEN
      EXECUTE IMMEDIATE 'DROP PROCEDURE SP_SYNC_MAPPING_SPECS';
   END IF;
END;
/
CREATE OR REPLACE PROCEDURE SP_SYNC_MAPPING_SPECS(HARDRESET IN INT, EXCEPTIONSTATUS OUT INT ) IS
SYNC_TIME TIMESTAMP (6); 
UPD_SYNC_TIME TIMESTAMP(6);
MSCOUNT NUMBER;
MAP_ROW_TYPE NUMBER;
MAPPING_TYPE NUMBER;
DELETE_COUNT NUMBER;
MAP_SEQ_IDS_COUNT NUMBER;
BEGIN
	EXCEPTIONSTATUS := 0;
    
    SELECT OBJECT_TYPE_ID INTO MAP_ROW_TYPE FROM ADS_KEY_VALUE_OBJECTS WHERE  OBJECT_TYPE = 'MM_MAPPING_ROW';
	SELECT OBJECT_TYPE_ID INTO MAPPING_TYPE FROM ADS_KEY_VALUE_OBJECTS WHERE  OBJECT_TYPE = 'MM_MAPPING';
    DELETE FROM MAP_SEQ_IDS_TOSYNC;
	IF HARDRESET = 1 THEN
	BEGIN
		EXECUTE IMMEDIATE  'TRUNCATE TABLE APPENDED_MAP_SPEC_RECORDS';
		EXECUTE IMMEDIATE  'TRUNCATE TABLE MAPPING_SPEC_RECORDS_TO_SYNC';	
		EXECUTE IMMEDIATE  'TRUNCATE TABLE  MASTER_LINEAGE_GRAPH'; 
		EXECUTE IMMEDIATE  'TRUNCATE TABLE  TABLE_RECORDS_COUNT';
		SELECT TO_TIMESTAMP('1990-01-01 00:00:0.001', 'YYYY-MM-DD HH24:MI:SS.FF') INTO SYNC_TIME from dual;
	END;
	ELSE
	BEGIN
		EXECUTE IMMEDIATE  'TRUNCATE TABLE MAPPING_SPEC_RECORDS_TO_SYNC';
		EXECUTE IMMEDIATE  'TRUNCATE TABLE  TABLE_RECORDS_COUNT';
		SELECT TO_TIMESTAMP(PREFERENCE_VALUE, 'YYYY-MM-DD HH24:MI:SS.FF') INTO SYNC_TIME FROM APP_PREFERENCES WHERE PREFERENCE_NAME = 'LAST_MAPPING_LINEAGE_SYNC_TIME';
	END;
	END IF; 
	
	SELECT GREATEST(SYNC_TIME, (SELECT MAX(LAST_MODIFIED_DATE_TIME) FROM MAPPING_SPECIFICATION), (SELECT MAX(LAST_MODIFIED_DATE_TIME) FROM MAPPING_DETAILS)) INTO UPD_SYNC_TIME FROM DUAL;

    INSERT INTO MAP_SEQ_IDS_TOSYNC(MAP_SEQ_ID) SELECT  DISTINCT MAP_SEQ_ID    FROM       MAPPING_SPECIFICATION MS       JOIN          MAPPING_DETAILS MD          ON  MS.MAP_ID = MD.MAP_ID  AND (UPPER(MD.STATUS) = 'ACTIVE'  OR UPPER(MD.ISPUBLISHED) = 'Y') AND (MS.LAST_MODIFIED_DATE_TIME > SYNC_TIME OR MD.LAST_MODIFIED_DATE_TIME > SYNC_TIME) ;
    
    SELECT COUNT(*) INTO MAP_SEQ_IDS_COUNT FROM MAP_SEQ_IDS_TOSYNC;
    
	IF MAP_SEQ_IDS_COUNT > 0 THEN
		BEGIN
			INSERT INTO MAPPING_SPEC_RECORDS_TO_SYNC (SRC_SYSTEM_NAME ,SRC_SYSTEM_ENVIRONMENT_NAME ,SRC_TABLE_NAME ,SRC_COLUMN_NAME ,SRC_COL_DATATYPE ,SRC_COL_LENGTH ,SRC_COL_PRECISION ,SRC_COL_SCALE , SRC_XPATH, TGT_SYSTEM_NAME ,TGT_SYSTEM_ENVIRONMENT_NAME ,TGT_TABLE_NAME ,TGT_COLUMN_NAME ,TGT_COL_DATATYPE ,TGT_COL_LENGTH ,TGT_COL_PRECISION ,TGT_COL_SCALE , TGT_XPATH, MAP_ID ,MAP_SEQ_ID ,PROJ_ID ,BUSINESS_RULE )     SELECT MS.SRC_SYSTEM_NAME ,MS.SRC_SYSTEM_ENVIRONMENT_NAME ,MS.SRC_TABLE_NAME ,MS.SRC_COLUMN_NAME ,MS.SRC_COL_DATATYPE ,MS.SRC_COL_LENGTH ,MS.SRC_COL_PRECISION ,MS.SRC_COL_SCALE , MS.SRC_XPATH, MS.TGT_SYSTEM_NAME ,MS.TGT_SYSTEM_ENVIRONMENT_NAME ,MS.TGT_TABLE_NAME ,MS.TGT_COLUMN_NAME ,MS.TGT_COL_DATATYPE ,MS.TGT_COL_LENGTH ,MS.TGT_COL_PRECISION ,MS.TGT_COL_SCALE , MS.TGT_XPATH, MS.MAP_ID ,MS.MAP_SEQ_ID ,MS.PROJ_ID ,MS.BUSINESS_RULE FROM TABLE(FN_GET_APPENDED_SPECS_TOSYNC) MS;
		END;
	END IF;

 
 
	SELECT COUNT(*) INTO DELETE_COUNT FROM OBJECT_OPERATIONS;
	IF DELETE_COUNT > 0 THEN
		BEGIN
			DELETE MASTER_LINEAGE_GRAPH      WHERE MAP_SEQ_ID IN (SELECT OBJECT_ID FROM OBJECT_OPERATIONS WHERE OBJECT_TYPE_ID = MAP_ROW_TYPE AND UPPER(OPERATION) = 'DELETE') OR  MAP_SEQ_ID IN (SELECT MAP_SEQ_ID FROM MAPPING_SPECIFICATION WHERE MAP_ID IN (SELECT OBJECT_ID FROM OBJECT_OPERATIONS WHERE OBJECT_TYPE_ID = MAPPING_TYPE AND UPPER(OPERATION) = 'DELETE'));
			DELETE APPENDED_MAP_SPEC_RECORDS WHERE MAP_SEQ_ID IN (SELECT OBJECT_ID FROM OBJECT_OPERATIONS WHERE OBJECT_TYPE_ID = MAP_ROW_TYPE AND UPPER(OPERATION) = 'DELETE') OR  MAP_SEQ_ID IN (SELECT MAP_SEQ_ID FROM MAPPING_SPECIFICATION WHERE MAP_ID IN (SELECT OBJECT_ID FROM OBJECT_OPERATIONS WHERE OBJECT_TYPE_ID = MAPPING_TYPE AND UPPER(OPERATION) = 'DELETE'));
			DELETE OBJECT_OPERATIONS WHERE OBJECT_TYPE_ID IN (MAP_ROW_TYPE, MAPPING_TYPE) AND UPPER(OPERATION) = 'DELETE'; 
		END;
	END IF;
	
	SELECT COUNT(*) INTO MSCOUNT FROM MAPPING_SPEC_RECORDS_TO_SYNC;
	IF MSCOUNT > 0 THEN
		BEGIN
		
			DELETE FROM MASTER_LINEAGE_GRAPH  WHERE MAP_SEQ_ID IN  (SELECT MAP_SEQ_ID FROM MAPPING_SPEC_RECORDS_TO_SYNC);
			DELETE FROM APPENDED_MAP_SPEC_RECORDS  WHERE MAP_SEQ_ID IN (SELECT MAP_SEQ_ID FROM MAPPING_SPEC_RECORDS_TO_SYNC);
			INSERT INTO APPENDED_MAP_SPEC_RECORDS (SRC_SYSTEM_NAME ,SRC_SYSTEM_ENVIRONMENT_NAME ,SRC_TABLE_NAME ,SRC_COLUMN_NAME ,SRC_COL_DATATYPE ,SRC_COL_LENGTH ,SRC_COL_PRECISION ,SRC_COL_SCALE , SRC_XPATH, TGT_SYSTEM_NAME ,TGT_SYSTEM_ENVIRONMENT_NAME ,TGT_TABLE_NAME ,TGT_COLUMN_NAME ,TGT_COL_DATATYPE ,TGT_COL_LENGTH ,TGT_COL_PRECISION ,TGT_COL_SCALE, TGT_XPATH ,MAP_ID ,MAP_SEQ_ID ,PROJ_ID ,BUSINESS_RULE )  SELECT MS.SRC_SYSTEM_NAME ,MS.SRC_SYSTEM_ENVIRONMENT_NAME ,MS.SRC_TABLE_NAME ,MS.SRC_COLUMN_NAME ,MS.SRC_COL_DATATYPE ,MS.SRC_COL_LENGTH ,MS.SRC_COL_PRECISION ,MS.SRC_COL_SCALE , MS.SRC_XPATH, MS.TGT_SYSTEM_NAME ,MS.TGT_SYSTEM_ENVIRONMENT_NAME ,MS.TGT_TABLE_NAME ,MS.TGT_COLUMN_NAME ,MS.TGT_COL_DATATYPE ,MS.TGT_COL_LENGTH ,MS.TGT_COL_PRECISION ,MS.TGT_COL_SCALE ,MS.TGT_XPATH, MS.MAP_ID ,MS.MAP_SEQ_ID ,MS.PROJ_ID ,MS.BUSINESS_RULE FROM MAPPING_SPEC_RECORDS_TO_SYNC MS  WHERE   MS.SRC_SYSTEM_NAME IS NOT NULL  AND MS.SRC_SYSTEM_ENVIRONMENT_NAME IS NOT NULL  AND MS.SRC_TABLE_NAME IS NOT NULL  AND MS.SRC_COLUMN_NAME IS NOT NULL AND MS.TGT_SYSTEM_NAME IS NOT NULL         AND MS.TGT_SYSTEM_ENVIRONMENT_NAME IS NOT NULL         AND MS.TGT_TABLE_NAME IS NOT NULL         AND MS.TGT_COLUMN_NAME IS NOT NULL;
			
			INSERT INTO MASTER_LINEAGE_GRAPH (SRC_KEY,SRC_SYSTEM_NAME,TGT_KEY,TGT_SYSTEM_NAME,MAP_SEQ_ID,PROJ_ID,RELATION) 
			 SELECT DISTINCT UPPER(TRIM(SRC_SYSTEM_NAME)),
				   SRC_SYSTEM_NAME,UPPER(TRIM(TGT_SYSTEM_NAME)),
					   TGT_SYSTEM_NAME,MAP_SEQ_ID,PROJ_ID,'FORWARD' FROM  MAPPING_SPEC_RECORDS_TO_SYNC
				 WHERE SRC_SYSTEM_NAME IS NOT NULL AND TGT_SYSTEM_NAME IS NOT NULL AND SRC_SYSTEM_ENVIRONMENT_NAME IS NOT NULL AND TGT_SYSTEM_ENVIRONMENT_NAME IS NOT NULL AND SRC_TABLE_NAME IS NOT NULL 
			AND TGT_TABLE_NAME IS NOT NULL AND SRC_COLUMN_NAME IS NOT NULL AND TGT_COLUMN_NAME IS NOT NULL;
		

			INSERT INTO MASTER_LINEAGE_GRAPH (SRC_KEY,SRC_SYSTEM_NAME,SRC_SYSTEM_ENVIRONMENT_NAME,TGT_KEY,TGT_SYSTEM_NAME,TGT_SYSTEM_ENVIRONMENT_NAME,MAP_SEQ_ID,PROJ_ID,RELATION) 
			 SELECT DISTINCT UPPER(TRIM(SRC_SYSTEM_NAME))||':'||UPPER(TRIM(SRC_SYSTEM_ENVIRONMENT_NAME)),
				   SRC_SYSTEM_NAME,SRC_SYSTEM_ENVIRONMENT_NAME,
					   UPPER(TRIM(TGT_SYSTEM_NAME))||':'||UPPER(TRIM(TGT_SYSTEM_ENVIRONMENT_NAME)),
					   TGT_SYSTEM_NAME,TGT_SYSTEM_ENVIRONMENT_NAME,MAP_SEQ_ID,PROJ_ID,'FORWARD' FROM  MAPPING_SPEC_RECORDS_TO_SYNC
				 WHERE SRC_SYSTEM_NAME IS NOT NULL AND TGT_SYSTEM_NAME IS NOT NULL AND SRC_SYSTEM_ENVIRONMENT_NAME IS NOT NULL AND TGT_SYSTEM_ENVIRONMENT_NAME IS NOT NULL AND SRC_TABLE_NAME IS NOT NULL 
			AND TGT_TABLE_NAME IS NOT NULL AND SRC_COLUMN_NAME IS NOT NULL AND TGT_COLUMN_NAME IS NOT NULL;
			

			INSERT INTO MASTER_LINEAGE_GRAPH (SRC_KEY,SRC_SYSTEM_NAME,SRC_SYSTEM_ENVIRONMENT_NAME,SRC_TABLE_NAME,TGT_KEY,TGT_SYSTEM_NAME,TGT_SYSTEM_ENVIRONMENT_NAME,TGT_TABLE_NAME,MAP_SEQ_ID,PROJ_ID,RELATION) 
			 SELECT DISTINCT UPPER(TRIM(SRC_SYSTEM_NAME))||':'||UPPER(TRIM(SRC_SYSTEM_ENVIRONMENT_NAME)) ||':'|| FN_GET_DECLPATH_FROM_XPATH(SRC_XPATH, SRC_TABLE_NAME, SRC_COLUMN_NAME,  'TABLE') ,
				   SRC_SYSTEM_NAME,SRC_SYSTEM_ENVIRONMENT_NAME,SRC_TABLE_NAME,
					   UPPER(TRIM(TGT_SYSTEM_NAME))||':'||UPPER(TRIM(TGT_SYSTEM_ENVIRONMENT_NAME))||':'|| FN_GET_DECLPATH_FROM_XPATH(TGT_XPATH, TGT_TABLE_NAME, TGT_COLUMN_NAME,  'TABLE'),
					   TGT_SYSTEM_NAME,TGT_SYSTEM_ENVIRONMENT_NAME,TGT_TABLE_NAME,MAP_SEQ_ID,PROJ_ID,'FORWARD' FROM  MAPPING_SPEC_RECORDS_TO_SYNC
				 WHERE SRC_SYSTEM_NAME IS NOT NULL AND TGT_SYSTEM_NAME IS NOT NULL AND SRC_SYSTEM_ENVIRONMENT_NAME IS NOT NULL AND TGT_SYSTEM_ENVIRONMENT_NAME IS NOT NULL AND SRC_TABLE_NAME IS NOT NULL 
			AND TGT_TABLE_NAME IS NOT NULL AND SRC_COLUMN_NAME IS NOT NULL AND TGT_COLUMN_NAME IS NOT NULL;
		

			INSERT INTO MASTER_LINEAGE_GRAPH (SRC_KEY,SRC_SYSTEM_NAME,SRC_SYSTEM_ENVIRONMENT_NAME,SRC_TABLE_NAME,SRC_COLUMN_NAME,TGT_KEY,TGT_SYSTEM_NAME,TGT_SYSTEM_ENVIRONMENT_NAME,TGT_TABLE_NAME,TGT_COLUMN_NAME,MAP_SEQ_ID,PROJ_ID,RELATION) 
			 SELECT DISTINCT UPPER(TRIM(SRC_SYSTEM_NAME))||':'||UPPER(TRIM(SRC_SYSTEM_ENVIRONMENT_NAME)) ||':'||FN_GET_DECLPATH_FROM_XPATH(SRC_XPATH, SRC_TABLE_NAME, SRC_COLUMN_NAME,  'COLUMN'),
				   SRC_SYSTEM_NAME,SRC_SYSTEM_ENVIRONMENT_NAME,SRC_TABLE_NAME,SRC_COLUMN_NAME,
					   UPPER(TRIM(TGT_SYSTEM_NAME))||':'||UPPER(TRIM(TGT_SYSTEM_ENVIRONMENT_NAME))||':'||FN_GET_DECLPATH_FROM_XPATH(TGT_XPATH, TGT_TABLE_NAME, TGT_COLUMN_NAME,  'COLUMN'),
					   TGT_SYSTEM_NAME,TGT_SYSTEM_ENVIRONMENT_NAME,TGT_TABLE_NAME,TGT_COLUMN_NAME,MAP_SEQ_ID,PROJ_ID,'FORWARD' FROM  MAPPING_SPEC_RECORDS_TO_SYNC
				 WHERE SRC_SYSTEM_NAME IS NOT NULL AND TGT_SYSTEM_NAME IS NOT NULL AND SRC_SYSTEM_ENVIRONMENT_NAME IS NOT NULL AND TGT_SYSTEM_ENVIRONMENT_NAME IS NOT NULL AND SRC_TABLE_NAME IS NOT NULL 
			AND TGT_TABLE_NAME IS NOT NULL AND SRC_COLUMN_NAME IS NOT NULL AND TGT_COLUMN_NAME IS NOT NULL;
		

			INSERT INTO MASTER_LINEAGE_GRAPH (TGT_KEY,TGT_SYSTEM_NAME,SRC_KEY,SRC_SYSTEM_NAME,MAP_SEQ_ID,PROJ_ID,RELATION) 
			 SELECT DISTINCT UPPER(TRIM(SRC_SYSTEM_NAME)),
				   SRC_SYSTEM_NAME,UPPER(TRIM(TGT_SYSTEM_NAME)),
					   TGT_SYSTEM_NAME,MAP_SEQ_ID,PROJ_ID,'REVERSE' FROM  MAPPING_SPEC_RECORDS_TO_SYNC
				 WHERE SRC_SYSTEM_NAME IS NOT NULL AND TGT_SYSTEM_NAME IS NOT NULL AND SRC_SYSTEM_ENVIRONMENT_NAME IS NOT NULL AND TGT_SYSTEM_ENVIRONMENT_NAME IS NOT NULL
					 AND SRC_TABLE_NAME IS NOT NULL 
			AND TGT_TABLE_NAME IS NOT NULL AND SRC_COLUMN_NAME IS NOT NULL AND TGT_COLUMN_NAME IS NOT NULL;
		

			INSERT INTO MASTER_LINEAGE_GRAPH (TGT_KEY,TGT_SYSTEM_NAME,TGT_SYSTEM_ENVIRONMENT_NAME,SRC_KEY,SRC_SYSTEM_NAME,SRC_SYSTEM_ENVIRONMENT_NAME,MAP_SEQ_ID,PROJ_ID,RELATION) 
			 SELECT DISTINCT UPPER(TRIM(SRC_SYSTEM_NAME))||':'||UPPER(TRIM(SRC_SYSTEM_ENVIRONMENT_NAME)),
				   SRC_SYSTEM_NAME,SRC_SYSTEM_ENVIRONMENT_NAME,
					   UPPER(TRIM(TGT_SYSTEM_NAME))||':'||UPPER(TRIM(TGT_SYSTEM_ENVIRONMENT_NAME)),
					   TGT_SYSTEM_NAME,TGT_SYSTEM_ENVIRONMENT_NAME,MAP_SEQ_ID,PROJ_ID,'REVERSE' FROM  MAPPING_SPEC_RECORDS_TO_SYNC
				 WHERE SRC_SYSTEM_NAME IS NOT NULL AND TGT_SYSTEM_NAME IS NOT NULL AND SRC_SYSTEM_ENVIRONMENT_NAME IS NOT NULL AND TGT_SYSTEM_ENVIRONMENT_NAME IS NOT NULL AND SRC_TABLE_NAME IS NOT NULL 
			AND TGT_TABLE_NAME IS NOT NULL AND SRC_COLUMN_NAME IS NOT NULL AND TGT_COLUMN_NAME IS NOT NULL;
			

			INSERT INTO MASTER_LINEAGE_GRAPH (TGT_KEY,TGT_SYSTEM_NAME,TGT_SYSTEM_ENVIRONMENT_NAME,TGT_TABLE_NAME,SRC_KEY,SRC_SYSTEM_NAME,SRC_SYSTEM_ENVIRONMENT_NAME,SRC_TABLE_NAME,MAP_SEQ_ID,PROJ_ID,RELATION) 
			 SELECT DISTINCT UPPER(TRIM(SRC_SYSTEM_NAME))||':'||UPPER(TRIM(SRC_SYSTEM_ENVIRONMENT_NAME)) ||':'||FN_GET_DECLPATH_FROM_XPATH(SRC_XPATH, SRC_TABLE_NAME, SRC_COLUMN_NAME,  'TABLE') ,
				   SRC_SYSTEM_NAME,SRC_SYSTEM_ENVIRONMENT_NAME,SRC_TABLE_NAME,
					   UPPER(TRIM(TGT_SYSTEM_NAME))||':'||UPPER(TRIM(TGT_SYSTEM_ENVIRONMENT_NAME))||':'||FN_GET_DECLPATH_FROM_XPATH(TGT_XPATH, TGT_TABLE_NAME, TGT_COLUMN_NAME,  'TABLE'),
					   TGT_SYSTEM_NAME,TGT_SYSTEM_ENVIRONMENT_NAME,TGT_TABLE_NAME,MAP_SEQ_ID,PROJ_ID,'REVERSE' FROM  MAPPING_SPEC_RECORDS_TO_SYNC
				 WHERE SRC_SYSTEM_NAME IS NOT NULL AND TGT_SYSTEM_NAME IS NOT NULL AND SRC_SYSTEM_ENVIRONMENT_NAME IS NOT NULL AND TGT_SYSTEM_ENVIRONMENT_NAME IS NOT NULL AND SRC_TABLE_NAME IS NOT NULL 
			AND TGT_TABLE_NAME IS NOT NULL AND SRC_COLUMN_NAME IS NOT NULL AND TGT_COLUMN_NAME IS NOT NULL;
			

			INSERT INTO MASTER_LINEAGE_GRAPH (TGT_KEY,TGT_SYSTEM_NAME,TGT_SYSTEM_ENVIRONMENT_NAME,TGT_TABLE_NAME,TGT_COLUMN_NAME,SRC_KEY,SRC_SYSTEM_NAME,SRC_SYSTEM_ENVIRONMENT_NAME,SRC_TABLE_NAME,SRC_COLUMN_NAME,MAP_SEQ_ID,PROJ_ID,RELATION) 
			 SELECT DISTINCT UPPER(TRIM(SRC_SYSTEM_NAME))||':'||UPPER(TRIM(SRC_SYSTEM_ENVIRONMENT_NAME)) ||':'||FN_GET_DECLPATH_FROM_XPATH(SRC_XPATH, SRC_TABLE_NAME, SRC_COLUMN_NAME,  'COLUMN'),
				   SRC_SYSTEM_NAME,SRC_SYSTEM_ENVIRONMENT_NAME,SRC_TABLE_NAME,SRC_COLUMN_NAME,
					   UPPER(TRIM(TGT_SYSTEM_NAME))||':'||UPPER(TRIM(TGT_SYSTEM_ENVIRONMENT_NAME))||':'||FN_GET_DECLPATH_FROM_XPATH(TGT_XPATH, TGT_TABLE_NAME, TGT_COLUMN_NAME,  'COLUMN'),
					   TGT_SYSTEM_NAME,TGT_SYSTEM_ENVIRONMENT_NAME,TGT_TABLE_NAME,TGT_COLUMN_NAME,MAP_SEQ_ID,PROJ_ID,'REVERSE' FROM  MAPPING_SPEC_RECORDS_TO_SYNC
				 WHERE SRC_SYSTEM_NAME IS NOT NULL AND TGT_SYSTEM_NAME IS NOT NULL AND SRC_SYSTEM_ENVIRONMENT_NAME IS NOT NULL AND TGT_SYSTEM_ENVIRONMENT_NAME IS NOT NULL AND SRC_TABLE_NAME IS NOT NULL 
			AND TGT_TABLE_NAME IS NOT NULL AND SRC_COLUMN_NAME IS NOT NULL AND TGT_COLUMN_NAME IS NOT NULL;
		
			UPDATE APP_PREFERENCES SET PREFERENCE_VALUE = (SELECT TO_CHAR(UPD_SYNC_TIME, 'YYYY-MM-DD HH24:MI:SS.FF') FROM DUAL) WHERE PREFERENCE_NAME = 'LAST_MAPPING_LINEAGE_SYNC_TIME';
	
		END;
	END IF;
	INSERT INTO TABLE_RECORDS_COUNT (TABLE_NAME,RECORDS_COUNT) VALUES('APPENDED_MAP_SPEC_RECORDS',(SELECT COUNT(*) FROM MASTER_LINEAGE_GRAPH));		
    EXECUTE IMMEDIATE 'COMMIT';
    EXCEPTION
        WHEN OTHERS THEN
        dbms_output.put_line('Error while syncing mapping specifications '||SQLERRM(SQLCODE));
        EXCEPTIONSTATUS := SQLCODE;
        ROLLBACK;
		raise_application_error(-20001,'An error was encountered - '||SQLCODE||' -ERROR- '||SQLERRM);
        NULL;
END;
/
DECLARE
   INDEXCHECKERFLAG INT;
BEGIN
    SELECT COUNT(*) INTO INDEXCHECKERFLAG FROM ALL_INDEXES WHERE OWNER = SYS_CONTEXT('USERENV', 'CURRENT_SCHEMA') AND INDEX_NAME = UPPER('ASSOC_SRC_OBJ_ID_INDX');
   IF INDEXCHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'CREATE INDEX "ASSOC_SRC_OBJ_ID_INDX" ON "ADS_ASSOCIATIONS"("SOURCE_OBJECT_ID")';
   END IF;
END;
/
DECLARE
   INDEXCHECKERFLAG INT;
BEGIN
    SELECT COUNT(*) INTO INDEXCHECKERFLAG FROM ALL_INDEXES WHERE OWNER = SYS_CONTEXT('USERENV', 'CURRENT_SCHEMA') AND INDEX_NAME = UPPER('ASSOC_SRC_OBJ_TYPE_ID_INDX');
   IF INDEXCHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'CREATE INDEX "ASSOC_SRC_OBJ_TYPE_ID_INDX" ON "ADS_ASSOCIATIONS"("SOURCE_OBJECT_TYPE_ID")';
   END IF;
END;
/
DECLARE
   INDEXCHECKERFLAG INT;
BEGIN
    SELECT COUNT(*) INTO INDEXCHECKERFLAG FROM ALL_INDEXES WHERE OWNER = SYS_CONTEXT('USERENV', 'CURRENT_SCHEMA') AND INDEX_NAME = UPPER('ASSOC_TGT_OBJ_TYPE_ID_INDX');
   IF INDEXCHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'CREATE INDEX "ASSOC_TGT_OBJ_TYPE_ID_INDX" ON "ADS_ASSOCIATIONS"("TARGET_OBJECT_TYPE_ID")';
   END IF;
END;
/
DECLARE
   INDEXCHECKERFLAG INT;
BEGIN
    SELECT COUNT(*) INTO INDEXCHECKERFLAG FROM ALL_INDEXES WHERE OWNER = SYS_CONTEXT('USERENV', 'CURRENT_SCHEMA') AND INDEX_NAME = UPPER('ASSOC_TGT_OBJ_ID_INDX');
   IF INDEXCHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'CREATE INDEX "ASSOC_TGT_OBJ_ID_INDX" ON "ADS_ASSOCIATIONS"("TARGET_OBJECT_ID")';
   END IF;
END;
/
DECLARE
   INDEXCHECKERFLAG INT;
BEGIN
    SELECT COUNT(*) INTO INDEXCHECKERFLAG FROM ALL_INDEXES WHERE OWNER = SYS_CONTEXT('USERENV', 'CURRENT_SCHEMA') AND INDEX_NAME = UPPER('ASSOC_REL_DETAIL_ID_INDX');
   IF INDEXCHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'CREATE INDEX "ASSOC_REL_DETAIL_ID_INDX" ON "ADS_ASSOCIATIONS"("RELATIONSHIP_DETAIL_ID")';
   END IF;
END;
/
DECLARE
   INDEXCHECKERFLAG INT;
BEGIN
    SELECT COUNT(*) INTO INDEXCHECKERFLAG FROM ALL_INDEXES WHERE OWNER = SYS_CONTEXT('USERENV', 'CURRENT_SCHEMA') AND INDEX_NAME = UPPER('KV_OBJECT_ID_INDEX');
   IF INDEXCHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'CREATE INDEX "KV_OBJECT_ID_INDEX" ON "ADS_KEY_VALUE"("OBJECT_ID")';
   END IF;
END;
/
DECLARE
   INDEXCHECKERFLAG INT;
BEGIN
    SELECT COUNT(*) INTO INDEXCHECKERFLAG FROM ALL_INDEXES WHERE OWNER = SYS_CONTEXT('USERENV', 'CURRENT_SCHEMA') AND INDEX_NAME = UPPER('ADS_KEY_VAL_DT_INDX');
   IF INDEXCHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'CREATE INDEX "ADS_KEY_VAL_DT_INDX" ON ADS_KEY_VALUE (DATATYPE_ID)';
   END IF;
END;
/
DECLARE
   INDEXCHECKERFLAG INT;
BEGIN
    SELECT COUNT(*) INTO INDEXCHECKERFLAG FROM ALL_INDEXES WHERE OWNER = SYS_CONTEXT('USERENV', 'CURRENT_SCHEMA') AND INDEX_NAME = UPPER('ADS_KEY_VAL_OBJ_TYP_INDX');
   IF INDEXCHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'CREATE INDEX "ADS_KEY_VAL_OBJ_TYP_INDX" ON ADS_KEY_VALUE (OBJECT_TYPE_ID)';
   END IF;
END;
/
DECLARE
   INDEXCHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO INDEXCHECKERFLAG FROM ALL_INDEXES WHERE OWNER = SYS_CONTEXT('USERENV', 'CURRENT_SCHEMA') AND INDEX_NAME = UPPER('STM_TBL_COL_MD_SCE_ID_VALID');
   IF INDEXCHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'CREATE INDEX "STM_TBL_COL_MD_SCE_ID_VALID" ON "SYSTEM_TABLE_COLUMNS_METADATA"("SCE_ID", "VALID")';
   END IF;
END;
/
DECLARE
   INDEXCHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO INDEXCHECKERFLAG FROM ALL_INDEXES WHERE OWNER = SYS_CONTEXT('USERENV', 'CURRENT_SCHEMA') AND INDEX_NAME = UPPER('STM_TBLCOL_MD_SCEID_VAL_SYSID');
   IF INDEXCHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'CREATE INDEX "STM_TBLCOL_MD_SCEID_VAL_SYSID" ON "SYSTEM_TABLE_COLUMNS_METADATA"("SCE_ID", "VALID", "SYSTEM_ID")';
   END IF;
END;
/
DECLARE
   INDEXCHECKERFLAG INT;
BEGIN
    SELECT COUNT(*) INTO INDEXCHECKERFLAG FROM ALL_INDEXES WHERE OWNER = SYS_CONTEXT('USERENV', 'CURRENT_SCHEMA') AND INDEX_NAME = UPPER('PK_DIS_RD_ID');
   IF INDEXCHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'ALTER TABLE RELATIONSHIP_DETAILS ADD CONSTRAINT PK_DIS_RD_ID PRIMARY KEY (RD_ID)';
   END IF;
END;
/
DECLARE
   INDEXCHECKERFLAG INT;
BEGIN
    SELECT COUNT(*) INTO INDEXCHECKERFLAG FROM ALL_INDEXES WHERE OWNER = SYS_CONTEXT('USERENV', 'CURRENT_SCHEMA') AND INDEX_NAME = UPPER('BG_CATEGORIES_PARENT_ID_INDX');
   IF INDEXCHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'CREATE INDEX "BG_CATEGORIES_PARENT_ID_INDX" ON "BG_CATEGORIES"("PARENT_CATEGORY_ID")';
   END IF;
END;
/
DECLARE
TABLECHECKERFLAG INT;
BEGIN
    SELECT COUNT(*) INTO TABLECHECKERFLAG FROM ADS_KEY_VALUE_OBJECTS WHERE  OBJECT_TYPE = 'BGM_METADATA_AI_MATCH_SCHEDULE';
    IF TABLECHECKERFLAG = 0 THEN
        EXECUTE IMMEDIATE 'INSERT INTO ADS_KEY_VALUE_OBJECTS (OBJECT_TYPE,OBJECT_TABLE,OBJECT_TABLE_COLUMN,OBJECT_PARENT_TYPE,OBJECT_PARENT_COLUMN_ID,OBJECT_LEVEL,MODULE_KEY,SYSTEM_BASED,OBJECT_TITLE) VALUES (''BGM_METADATA_AI_MATCH_SCHEDULE'',''BGM_METADATA_AI_MATCH_SCHEDULE'','''','''','''',''1'',''com.ads.mm.permission.generic'',''1'',''BGM_METADATA_AI_MATCH_SCHEDULE'')';
    END IF;
END;
/
DECLARE
DATACHECKERFLAG INT;
BEGIN
    SELECT COUNT(*) INTO DATACHECKERFLAG FROM APP_PREFERENCES WHERE PREFERENCE_NAME = 'SEND_EMAIL_ON_BGM_METADATA_AI_MATCH_SCHEDULE_JOB_EXECUTED';
    IF DATACHECKERFLAG = 0 THEN
        INSERT INTO APP_PREFERENCES(PREFERENCE_NAME,PREFERENCE_VALUE) VALUES ('SEND_EMAIL_ON_BGM_METADATA_AI_MATCH_SCHEDULE_JOB_EXECUTED','true');
        INSERT INTO APP_PREFERENCES(PREFERENCE_NAME,PREFERENCE_VALUE) VALUES ('SEND_EMAIL_ON_BGM_METADATA_AI_MATCH_SCHEDULE_JOB_EXECUTED_SUBJECT','@Name@ Job Execution Details - DO NOT REPLY');
        INSERT INTO APP_PREFERENCES(PREFERENCE_NAME,PREFERENCE_VALUE) VALUES ('SEND_EMAIL_ON_BGM_METADATA_AI_MATCH_SCHEDULE_JOB_EXECUTED_MESSAGE','Hi,<br>This is a system generated email notification.<br> <br> <b>@executionMessage@</b><br><br><I><font color =red>Note</font> This is an auto generated email notification and this mailbox is not monitored.<BR>Please do not reply to this email.</I>');
    END IF;
END;
/
DECLARE
TABLECHECKERFLAG INT;
BEGIN
    SELECT COUNT(*) INTO TABLECHECKERFLAG FROM ALL_TABLES WHERE OWNER = sys_context( 'userenv', 'current_schema' ) AND TABLE_NAME = UPPER('BGM_METADATA_AI_MATCH_CONFIG');
        IF TABLECHECKERFLAG = 0 THEN
        EXECUTE IMMEDIATE  'CREATE TABLE "BGM_METADATA_AI_MATCH_CONFIG" (
            "MATCH_CONFIG_ID" INT NOT NULL,
            "SOURCE_OBJECT_ID" INT  NOT NULL,
            "SOURCE_OBJECT_TYPE_ID" INT  NOT NULL,
            "TARGET_OBJECT_ID" INT  NOT NULL,
            "TARGET_OBJECT_TYPE_ID" INT  NOT NULL,
            "SCOPE_TYPE" CHAR(1) NOT NULL,
            CONSTRAINT "PK_BGM_MD_AI_MATCH_CONFIG_ID" PRIMARY KEY(MATCH_CONFIG_ID))';
    END IF;
END;
/
DECLARE
SEQUENCECHECKERFLAG INT;
BEGIN
    SELECT COUNT(*) INTO SEQUENCECHECKERFLAG FROM ALL_SEQUENCES WHERE SEQUENCE_OWNER = sys_context('userenv', 'current_schema') AND SEQUENCE_NAME = UPPER('BGM_MD_AI_MATCH_CONFIG_SEQ');
    IF SEQUENCECHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'CREATE SEQUENCE   "BGM_MD_AI_MATCH_CONFIG_SEQ"  MINVALUE 1 MAXVALUE 999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE';
    END IF;
END;
/
DECLARE
TRIGGERCHECKERFLAG INT;
BEGIN
  SELECT COUNT(*)  INTO TRIGGERCHECKERFLAG  FROM all_triggers  WHERE OWNER = sys_context('userenv', 'current_schema') AND trigger_name = UPPER('BGM_MD_AIM_CONFIG_SEQ_INSERT');
  IF TRIGGERCHECKERFLAG = 0 THEN
    EXECUTE IMMEDIATE 'CREATE OR REPLACE TRIGGER  "BGM_MD_AIM_CONFIG_SEQ_INSERT" BEFORE INSERT ON BGM_METADATA_AI_MATCH_CONFIG FOR EACH ROW BEGIN SELECT BGM_MD_AI_MATCH_CONFIG_SEQ.NEXTVAL INTO :new.MATCH_CONFIG_ID FROM DUAL; END;';
    EXECUTE IMMEDIATE 'ALTER TRIGGER  "BGM_MD_AIM_CONFIG_SEQ_INSERT" ENABLE';
  END IF;
END;
/
DECLARE
TABLECHECKERFLAG INT;
BEGIN
    SELECT COUNT(*) INTO TABLECHECKERFLAG FROM ALL_TABLES WHERE OWNER = sys_context( 'userenv', 'current_schema' ) AND TABLE_NAME = UPPER('BGM_METADATA_AI_MATCH_RESULT');
        IF TABLECHECKERFLAG = 0 THEN
        EXECUTE IMMEDIATE  'CREATE TABLE "BGM_METADATA_AI_MATCH_RESULT"(
           "MATCH_RESULT_ID" INT NOT NULL,
            "SOURCE_OBJECT_ID" INT  NOT NULL,
            "SOURCE_OBJECT_TYPE_ID" INT  NOT NULL,
            "TARGET_OBJECT_ID" INT  NOT NULL,
            "TARGET_OBJECT_TYPE_ID" INT  NOT NULL,
            CONSTRAINT "PK_BGM_MD_AI_MATCH_RESULT_ID" PRIMARY KEY(MATCH_RESULT_ID))';
    END IF;
END;
/
DECLARE
SEQUENCECHECKERFLAG INT;
BEGIN
    SELECT COUNT(*) INTO SEQUENCECHECKERFLAG FROM ALL_SEQUENCES WHERE SEQUENCE_OWNER = sys_context('userenv', 'current_schema') AND SEQUENCE_NAME = UPPER('BGM_MD_AI_MATCH_RESULT_SEQ');
    IF SEQUENCECHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'CREATE SEQUENCE   "BGM_MD_AI_MATCH_RESULT_SEQ"  MINVALUE 1 MAXVALUE 999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE';
    END IF;
END;
/
DECLARE
TRIGGERCHECKERFLAG INT;
BEGIN
  SELECT COUNT(*)  INTO TRIGGERCHECKERFLAG  FROM all_triggers  WHERE OWNER = sys_context('userenv', 'current_schema') AND trigger_name = UPPER('BGM_MD_AIM_RESULT_SEQ_INSERT');
  IF TRIGGERCHECKERFLAG = 0 THEN
    EXECUTE IMMEDIATE 'CREATE OR REPLACE TRIGGER  "BGM_MD_AIM_RESULT_SEQ_INSERT" BEFORE INSERT ON BGM_METADATA_AI_MATCH_RESULT FOR EACH ROW BEGIN SELECT BGM_MD_AI_MATCH_RESULT_SEQ.NEXTVAL INTO :new.MATCH_RESULT_ID FROM DUAL; END;';
    EXECUTE IMMEDIATE 'ALTER TRIGGER  "BGM_MD_AIM_RESULT_SEQ_INSERT" ENABLE';
  END IF;
END;
/
DECLARE
   COLUMNCHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO COLUMNCHECKERFLAG FROM ALL_TAB_COLUMNS WHERE  OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME = UPPER('BUSINESS_TERMS') AND COLUMN_NAME=UPPER('AI_METADATA_MATCH_STATUS');
    IF COLUMNCHECKERFLAG = 0 THEN
        EXECUTE IMMEDIATE 'ALTER TABLE BUSINESS_TERMS ADD  AI_METADATA_MATCH_STATUS INT DEFAULT 0 NULL';
        EXECUTE IMMEDIATE 'UPDATE BUSINESS_TERMS SET AI_METADATA_MATCH_STATUS = 0 WHERE AI_METADATA_MATCH_STATUS IS NULL';
    END IF;
END;
/
DECLARE
   ROWCHECKKERFLAG INT;
BEGIN
    SELECT COUNT(*) INTO ROWCHECKKERFLAG FROM MAPPING_STATUS WHERE STATUS = 'InProgress' AND RESPONSIABLES = 'Mapping Designer';
    IF ROWCHECKKERFLAG > 0 THEN
        EXECUTE IMMEDIATE 'UPDATE MAPPING_STATUS SET STATUS = ''In Progress'' WHERE STATUS = ''InProgress'' AND RESPONSIABLES = ''Mapping Designer'' ';
    END IF;
END;
/
DECLARE
   VERSIONCHECKKERFLAG INT;
BEGIN
    SELECT COUNT(*) INTO VERSIONCHECKKERFLAG FROM ADS_MM_VERSION WHERE VALUE <= '9.4';
    IF VERSIONCHECKKERFLAG = 1 THEN
    EXECUTE IMMEDIATE 'ALTER TABLE ADS_MM_VERSION ADD TEMP_VALUE FLOAT(126) NULL';
    EXECUTE IMMEDIATE 'ALTER TABLE ADS_MM_VERSION DROP COLUMN VALUE';
    EXECUTE IMMEDIATE 'ALTER TABLE ADS_MM_VERSION RENAME COLUMN "TEMP_VALUE" TO "VALUE"';
    EXECUTE IMMEDIATE 'UPDATE ADS_MM_VERSION SET VALUE = 10.0';
    END IF;
END;
/
DECLARE
   COLUMNCHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO COLUMNCHECKERFLAG FROM ALL_TAB_COLUMNS WHERE  OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME = UPPER('BG_POLICIES') AND COLUMN_NAME=UPPER('SDI_FLAG');
   IF COLUMNCHECKERFLAG = 0 THEN
        EXECUTE IMMEDIATE 'ALTER TABLE BG_POLICIES ADD SDI_FLAG  char(1) DEFAULT ''N'' NULL';
        EXECUTE IMMEDIATE 'ALTER TABLE BG_POLICIES ADD SDI_DESCRIPTION varchar2(4000) NULL';
        EXECUTE IMMEDIATE 'ALTER TABLE BG_POLICIES ADD SDI_CLASS_ID NUMBER NULL';
        EXECUTE IMMEDIATE 'ALTER TABLE BUSINESS_TERMS ADD SDI_FLAG  char(1) DEFAULT ''N'' NULL';
        EXECUTE IMMEDIATE 'ALTER TABLE BUSINESS_TERMS ADD SDI_DESCRIPTION varchar2(4000) NULL';
        EXECUTE IMMEDIATE 'ALTER TABLE BUSINESS_TERMS ADD SDI_CLASS_ID NUMBER NULL';
        EXECUTE IMMEDIATE 'ALTER TABLE BG_BUSINESS_RULES ADD SDI_FLAG  char(1) DEFAULT ''N'' NULL';
        EXECUTE IMMEDIATE 'ALTER TABLE BG_BUSINESS_RULES ADD SDI_DESCRIPTION varchar2(4000) NULL';
        EXECUTE IMMEDIATE 'ALTER TABLE BG_BUSINESS_RULES ADD SDI_CLASS_ID NUMBER NULL';
        EXECUTE IMMEDIATE 'ALTER TABLE BG_CUSTOM_OBJECTS ADD DEFINITION VARCHAR2(4000) NULL';
        EXECUTE IMMEDIATE 'ALTER TABLE BG_CUSTOM_OBJECTS ADD SDI_FLAG  char(1) DEFAULT ''N'' NULL';
        EXECUTE IMMEDIATE 'ALTER TABLE BG_CUSTOM_OBJECTS ADD SDI_DESCRIPTION varchar2(4000) NULL';
        EXECUTE IMMEDIATE 'ALTER TABLE BG_CUSTOM_OBJECTS ADD SDI_CLASS_ID NUMBER NULL';
        EXECUTE IMMEDIATE 'ALTER TABLE BG_CUSTOM_TYPES ADD DEFINITION_ENABLED char(1) DEFAULT 1 NOT NULL';
        EXECUTE IMMEDIATE 'ALTER TABLE BG_CUSTOM_TYPES ADD SDI_ENABLED char(1) DEFAULT 0 NULL';
        EXECUTE IMMEDIATE 'UPDATE BG_CUSTOM_TYPES SET SDI_ENABLED = 1 WHERE OBJECT_TYPE_ID IN (SELECT OBJECT_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE = ''BGM_TERM'')';
        EXECUTE IMMEDIATE 'ALTER TABLE BG_CUSTOM_TYPES ADD CUSTOM_TYPE NUMBER(1) DEFAULT 1 NOT NULL';
        EXECUTE IMMEDIATE 'UPDATE BG_CUSTOM_TYPES SET CUSTOM_TYPE = 0 WHERE SYSTEM_BASED = 1';
   END IF;
END;
/
DECLARE
   COLUMNCHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO COLUMNCHECKERFLAG FROM ALL_TAB_COLUMNS WHERE  OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME = UPPER('SYSTEM_TABLE_METADATA') AND COLUMN_NAME=UPPER('SDI_FLAG');
   IF COLUMNCHECKERFLAG = 0 THEN
        EXECUTE IMMEDIATE 'ALTER TABLE SYSTEM_TABLE_METADATA ADD SDI_FLAG  char(1) DEFAULT ''N'' NULL';
        EXECUTE IMMEDIATE 'ALTER TABLE SYSTEM_TABLE_METADATA ADD SDI_DESCRIPTION varchar2(4000) NULL';
        EXECUTE IMMEDIATE 'ALTER TABLE SYSTEM_TABLE_METADATA ADD SDI_CLASS_ID NUMBER NULL';
        EXECUTE IMMEDIATE 'ALTER TABLE SYS_CON_ENVIRONMENTS ADD SDI_FLAG  char(1) DEFAULT ''N'' NULL';
        EXECUTE IMMEDIATE 'ALTER TABLE SYS_CON_ENVIRONMENTS ADD SDI_DESCRIPTION varchar2(4000) NULL';
        EXECUTE IMMEDIATE 'ALTER TABLE SYS_CON_ENVIRONMENTS ADD SDI_CLASS_ID NUMBER NULL';
        EXECUTE IMMEDIATE 'ALTER TABLE SYSTEM_DEFINITION_DETAILS ADD SDI_FLAG  char(1) DEFAULT ''N'' NULL';
        EXECUTE IMMEDIATE 'ALTER TABLE SYSTEM_DEFINITION_DETAILS ADD SDI_DESCRIPTION varchar2(4000) NULL';
        EXECUTE IMMEDIATE 'ALTER TABLE SYSTEM_DEFINITION_DETAILS ADD SDI_CLASS_ID NUMBER NULL';
   END IF;
END;
/
CREATE OR REPLACE FORCE VIEW  "ACTIVE_SYS_CON_ENVIRONMENTS" AS SELECT * FROM   SYS_CON_ENVIRONMENTS WHERE  STATUS = 'Active';
/
CREATE OR REPLACE FORCE VIEW  "VALID_SYSTEM_TABLE_METADATA" AS
    SELECT STM.* FROM   SYSTEM_TABLE_METADATA STM JOIN ACTIVE_SYS_CON_ENVIRONMENTS SCS ON STM.SCE_ID = SCS.SCE_ID WHERE STM.VALID = 1 OR STM.VALID IS NULL;
/
DECLARE
  TYPECHECKERFLAG INT;
BEGIN
  SELECT COUNT(*)
  INTO TYPECHECKERFLAG
  FROM ALL_OBJECTS
  WHERE OWNER            = sys_context('userenv', 'current_schema')
  AND UPPER(OBJECT_NAME) = 'MINDMAP_OBJECT_TABLE'
  AND UPPER(OBJECT_TYPE) ='TYPE';
  IF TYPECHECKERFLAG     = 1 THEN
    EXECUTE IMMEDIATE 'DROP TYPE "MINDMAP_OBJECT_TABLE"';
  END IF;
END;
/
DECLARE
  TYPECHECKERFLAG INT;
BEGIN
  SELECT COUNT(*)
  INTO TYPECHECKERFLAG
  FROM ALL_OBJECTS
  WHERE OWNER            = sys_context('userenv', 'current_schema')
  AND UPPER(OBJECT_NAME) = 'MINDMAP_OBJECT'
  AND UPPER(OBJECT_TYPE) ='TYPE';
  IF TYPECHECKERFLAG     = 1 THEN
    EXECUTE IMMEDIATE 'DROP TYPE MINDMAP_OBJECT';
  END IF;
END;
/
DECLARE
  TYPECHECKERFLAG INT;
BEGIN
  SELECT COUNT(*)
  INTO TYPECHECKERFLAG
  FROM ALL_OBJECTS
  WHERE OWNER            = sys_context('userenv', 'current_schema')
  AND UPPER(OBJECT_NAME) = 'MINDMAP_OBJECT'
  AND UPPER(OBJECT_TYPE) ='TYPE';
  IF TYPECHECKERFLAG     = 0 THEN
	-- This TYPE is used for a structured data storing for the results and it is re-usable/helper for mindmap queries
    EXECUTE IMMEDIATE 'CREATE TYPE MINDMAP_OBJECT AS OBJECT (ROOT_CAT_GROUP NUMBER, CAT_ID NUMBER, OBJECT_ID NUMBER,OBJECT_TYPE_ID NUMBER,ASSOCIATION_ID NUMBER, OBJECT_NAME VARCHAR2(4000), TITLE VARCHAR2(4000), RM_ID NUMBER, OBJECT_PATH VARCHAR2(4000), OBJECT_DEFINITION VARCHAR2(4000), OBJECT_DESCRIPTION VARCHAR2(4000), ENTITY_COLOR VARCHAR(20), DISPLAY_COLOR VARCHAR(20), DISPLAY_TYPE VARCHAR(100), OBJECT_TITLE VARCHAR(255),SDI_ENABLED char(1),
			SDI_FLAG char(1),SDI_DESCRIPTION varchar2(4000),SDI_CLASS_ID number, SDI_CLASS_NAME varchar2(255), OBJECT_LOGICAL_NAME VARCHAR2(300),OBJECT_EXPANDED_LOGICAL_NAME VARCHAR2(4000))';
  END IF;
END;
/
DECLARE
  TYPECHECKERFLAG INT;
BEGIN
  SELECT COUNT(*)
  INTO TYPECHECKERFLAG
  FROM ALL_OBJECTS
  WHERE OWNER            = sys_context('userenv', 'current_schema')
  AND UPPER(OBJECT_NAME) = 'MINDMAP_OBJECT_TABLE'
  AND UPPER(OBJECT_TYPE) ='TYPE';
  IF TYPECHECKERFLAG     = 0 THEN
	-- This is the table form of Mindmap struct and this holds the resultset of mindmap struct object
    EXECUTE IMMEDIATE 'CREATE OR REPLACE TYPE "MINDMAP_OBJECT_TABLE" AS TABLE OF "MINDMAP_OBJECT"';
  END IF;
END;
/
DECLARE
   TABLECHECKERFLAG INT;
BEGIN
    SELECT COUNT(*) INTO TABLECHECKERFLAG FROM APP_PREFERENCES WHERE PREFERENCE_NAME = 'SYSTEM_OBJECT_COLOR';
    IF  TABLECHECKERFLAG  > 0 THEN
        EXECUTE IMMEDIATE 'UPDATE APP_PREFERENCES SET PREFERENCE_NAME = ''SM_SYSTEM_PREFERENCE'',PREFERENCE_VALUE=(SELECT PREFERENCE_VALUE||''`''||''Systems'' FROM APP_PREFERENCES WHERE PREFERENCE_NAME = ''SYSTEM_OBJECT_COLOR'') WHERE PREFERENCE_NAME = ''SYSTEM_OBJECT_COLOR''';
        EXECUTE IMMEDIATE 'UPDATE APP_PREFERENCES SET PREFERENCE_NAME = ''SM_ENVIRONMENT_PREFERENCE'',PREFERENCE_VALUE=(SELECT PREFERENCE_VALUE||''`''||''Environments'' FROM APP_PREFERENCES WHERE PREFERENCE_NAME = ''ENVIRONMENT_OBJECT_COLOR'') WHERE PREFERENCE_NAME = ''ENVIRONMENT_OBJECT_COLOR''';
        EXECUTE IMMEDIATE 'UPDATE APP_PREFERENCES SET PREFERENCE_NAME = ''SM_TABLE_PREFERENCE'',PREFERENCE_VALUE=(SELECT PREFERENCE_VALUE||''`''||''Tables'' FROM APP_PREFERENCES WHERE PREFERENCE_NAME = ''TABLE_OBJECT_COLOR'') WHERE PREFERENCE_NAME = ''TABLE_OBJECT_COLOR''';
        EXECUTE IMMEDIATE 'UPDATE APP_PREFERENCES SET PREFERENCE_NAME = ''SM_COLUMN_PREFERENCE'',PREFERENCE_VALUE=(SELECT PREFERENCE_VALUE||''`''||''Columns'' FROM APP_PREFERENCES WHERE PREFERENCE_NAME = ''COLUMN_OBJECT_COLOR'') WHERE PREFERENCE_NAME = ''COLUMN_OBJECT_COLOR''';  
   END IF;
    SELECT COUNT(*) INTO TABLECHECKERFLAG FROM APP_PREFERENCES WHERE PREFERENCE_NAME = 'SM_SYSTEM_PREFERENCE';
    IF  TABLECHECKERFLAG = 0 THEN
        EXECUTE IMMEDIATE 'INSERT INTO APP_PREFERENCES(PREFERENCE_NAME,PREFERENCE_VALUE) VALUES (''SM_SYSTEM_PREFERENCE'',''#26276D`Systems'')';
        EXECUTE IMMEDIATE 'INSERT INTO APP_PREFERENCES(PREFERENCE_NAME,PREFERENCE_VALUE) VALUES (''SM_ENVIRONMENT_PREFERENCE'',''#F6C65B`Environments'')';
        EXECUTE IMMEDIATE 'INSERT INTO APP_PREFERENCES(PREFERENCE_NAME,PREFERENCE_VALUE) VALUES (''SM_TABLE_PREFERENCE'',''#F79548`Tables'')';
        EXECUTE IMMEDIATE 'INSERT INTO APP_PREFERENCES(PREFERENCE_NAME,PREFERENCE_VALUE) VALUES (''SM_COLUMN_PREFERENCE'',''#92d050`Columns'')';
    END IF;
END;
/
DECLARE
   TABLECHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO TABLECHECKERFLAG FROM ALL_OBJECTS WHERE OWNER = sys_context('userenv', 'current_schema') AND OBJECT_TYPE = 'FUNCTION' AND OBJECT_NAME = UPPER('FN_MINDMAP_OBJ_COUNT');
   IF TABLECHECKERFLAG = 1 THEN
      EXECUTE IMMEDIATE 'DROP FUNCTION FN_MINDMAP_OBJ_COUNT';
   END IF;
END;
/
create or replace FUNCTION FN_MINDMAP_OBJ_COUNT(
    P_SRC_OBJECT_ID            IN NUMBER,
    P_SRC_OBJECT_TYPE_ID       IN NUMBER,
    P_MASTER_ACCESS        IN NUMBER,
    P_USER_ID              IN VARCHAR2)
RETURN NUMBER   AS     OBJ_COUNT   NUMBER;
USER_OBJ_TYPE_ID VARCHAR2(20);
ROLE_OBJ_TYPE_ID VARCHAR2(20);
SM_ENVIRONMENT_OBJ_TYPE_ID VARCHAR2(20); 
        BEGIN
SELECT OBJECT_TYPE_ID INTO USER_OBJ_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE = 'ADS_USER';
SELECT OBJECT_TYPE_ID INTO ROLE_OBJ_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE = 'ADS_SECURITY_ROLE';
SELECT OBJECT_TYPE_ID INTO SM_ENVIRONMENT_OBJ_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE = 'SM_ENVIRONMENT';
  WITH bo_cte AS
  (SELECT CONNECT_BY_ROOT CATEGORY_ID AS ROOT_CAT_GROUP,
    category_id,
    category_name,
    parent_category_id,
    ltrim(sys_connect_by_path(category_name, '->'), '->') OBJECT_PATH
  FROM bg_categories bc
    START WITH parent_category_id = -1
  AND(1                           =P_MASTER_ACCESS
  OR EXISTS
    (SELECT 1
    FROM ADS_OBJECT_TO_OBJECT_SCOPE aotos
    WHERE aotos.OBJECT_ID            = bc.CATEGORY_ID
    AND aotos.OBJECT_TYPE_ID         = bc.OBJECT_TYPE_ID
    AND ((aotos.SCOPE_OBJECT_TYPE_ID = USER_OBJ_TYPE_ID
    AND aotos.SCOPE_OBJECT_ID        = P_USER_ID)
    OR (aotos.SCOPE_OBJECT_TYPE_ID   = ROLE_OBJ_TYPE_ID
    AND aotos.SCOPE_OBJECT_ID       IN
      (SELECT ROLE_ID FROM USER_ASSIGNED_ROLES WHERE USER_ID = P_USER_ID
      )))
    ))
    CONNECT BY NOCYCLE PRIOR category_id = parent_category_id
  ),
        bo as(SELECT 'BGM_TERM' OBJECT_TYPE, Count(*) BOJ_COUNT FROM ads_associations 
        JOIN business_terms ON bus_term_id = source_object_id WHERE source_object_type_id = (SELECT object_type_id FROM ads_key_value_objects 
        WHERE object_type = 'BGM_TERM') AND target_object_id = P_SRC_OBJECT_ID AND target_object_type_id = P_SRC_OBJECT_TYPE_ID AND category_id 
        IN (SELECT category_id FROM bo_cte) union all
        SELECT 'BGM_TERM' OBJECT_TYPE, Count(*) BOJ_COUNT FROM ads_associations JOIN business_terms ON bus_term_id = target_object_id WHERE target_object_type_id = (SELECT object_type_id FROM ads_key_value_objects WHERE object_type = 'BGM_TERM') AND source_object_id = P_SRC_OBJECT_ID AND source_object_type_id = P_SRC_OBJECT_TYPE_ID AND category_id IN (SELECT category_id FROM bo_cte) 
        union all
        SELECT 'SM_COLUMN' 
        OBJECT_TYPE, COUNT(*) BOJ_COUNT FROM ADS_ASSOCIATIONS JOIN VALID_SYS_TBL_COL_METADATA 
        ON TARGET_OBJECT_ID = STCM_ID WHERE TARGET_OBJECT_TYPE_ID = 
        (SELECT OBJECT_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE = 'SM_COLUMN')
        AND SOURCE_OBJECT_ID = P_SRC_OBJECT_ID AND SOURCE_OBJECT_TYPE_ID = P_SRC_OBJECT_TYPE_ID 
        AND ( 1 = P_MASTER_ACCESS OR SCE_ID IN (SELECT AOTS.OBJECT_ID FROM ADS_OBJECT_TO_OBJECT_SCOPE 
        AOTS WHERE AOTS.OBJECT_TYPE_ID = SM_ENVIRONMENT_OBJ_TYPE_ID AND 
        ((AOTS.SCOPE_OBJECT_TYPE_ID = USER_OBJ_TYPE_ID AND AOTS.SCOPE_OBJECT_ID = P_USER_ID) OR 
        (AOTS.SCOPE_OBJECT_TYPE_ID = ROLE_OBJ_TYPE_ID AND AOTS.SCOPE_OBJECT_ID IN 
        (SELECT ROLE_ID FROM USER_ASSIGNED_ROLES WHERE USER_ID = P_USER_ID)))) )
        UNION ALL SELECT 'SM_TABLE' OBJECT_TYPE, COUNT(*) BOJ_COUNT 
        FROM ADS_ASSOCIATIONS JOIN VALID_SYSTEM_TABLE_METADATA ON STM_ID = TARGET_OBJECT_ID
        WHERE TARGET_OBJECT_TYPE_ID = (SELECT OBJECT_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE  = 'SM_TABLE') AND SOURCE_OBJECT_ID = P_SRC_OBJECT_ID AND SOURCE_OBJECT_TYPE_ID = P_SRC_OBJECT_TYPE_ID AND ( 1 = P_MASTER_ACCESS OR SCE_ID IN 
        (SELECT AOTS.OBJECT_ID FROM ADS_OBJECT_TO_OBJECT_SCOPE AOTS WHERE AOTS.OBJECT_TYPE_ID = SM_ENVIRONMENT_OBJ_TYPE_ID AND ((AOTS.SCOPE_OBJECT_TYPE_ID = USER_OBJ_TYPE_ID AND
        AOTS.SCOPE_OBJECT_ID = P_USER_ID) OR (AOTS.SCOPE_OBJECT_TYPE_ID = ROLE_OBJ_TYPE_ID AND AOTS.SCOPE_OBJECT_ID IN (SELECT ROLE_ID FROM USER_ASSIGNED_ROLES WHERE USER_ID = P_USER_ID)))) )
        UNION ALL
        SELECT 'SM_ENVIRONMENT' OBJECT_TYPE, COUNT(*) BOJ_COUNT FROM ADS_ASSOCIATIONS JOIN ACTIVE_SYS_CON_ENVIRONMENTS ON SCE_ID = TARGET_OBJECT_ID WHERE TARGET_OBJECT_TYPE_ID = (SELECT OBJECT_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE = 'SM_ENVIRONMENT') AND SOURCE_OBJECT_ID = P_SRC_OBJECT_ID AND SOURCE_OBJECT_TYPE_ID = P_SRC_OBJECT_TYPE_ID AND
        ( 1 = P_MASTER_ACCESS OR TARGET_OBJECT_ID IN (SELECT AOTS.OBJECT_ID FROM ADS_OBJECT_TO_OBJECT_SCOPE AOTS WHERE AOTS.OBJECT_TYPE_ID = SM_ENVIRONMENT_OBJ_TYPE_ID AND ((AOTS.SCOPE_OBJECT_TYPE_ID = USER_OBJ_TYPE_ID AND AOTS.SCOPE_OBJECT_ID = P_USER_ID) OR (AOTS.SCOPE_OBJECT_TYPE_ID = ROLE_OBJ_TYPE_ID AND AOTS.SCOPE_OBJECT_ID IN (SELECT ROLE_ID FROM USER_ASSIGNED_ROLES WHERE USER_ID = P_USER_ID)))) )
        UNION ALL
        SELECT 'SM_SYSTEM' OBJECT_TYPE, COUNT(*) BOJ_COUNT FROM ADS_ASSOCIATIONS WHERE TARGET_OBJECT_TYPE_ID = (SELECT OBJECT_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE = 'SM_SYSTEM') AND SOURCE_OBJECT_ID = P_SRC_OBJECT_ID AND SOURCE_OBJECT_TYPE_ID = P_SRC_OBJECT_TYPE_ID 
        UNION ALL
        SELECT 'BGM_POLICY' OBJECT_TYPE, COUNT(*) BOJ_COUNT FROM ADS_ASSOCIATIONS JOIN BG_POLICIES BP ON BP.ID = TARGET_OBJECT_ID WHERE TARGET_OBJECT_TYPE_ID = (SELECT OBJECT_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE = 'BGM_POLICY') AND SOURCE_OBJECT_ID = P_SRC_OBJECT_ID AND SOURCE_OBJECT_TYPE_ID = P_SRC_OBJECT_TYPE_ID AND CATALOG_ID IN (SELECT CATEGORY_ID FROM BO_CTE)
        UNION ALL
        SELECT 'BGM_RULE' OBJECT_TYPE, COUNT(*) BOJ_COUNT FROM ADS_ASSOCIATIONS JOIN BG_BUSINESS_RULES BBR ON BBR.ID = TARGET_OBJECT_ID WHERE TARGET_OBJECT_TYPE_ID = (SELECT OBJECT_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE = 'BGM_RULE') AND SOURCE_OBJECT_ID = P_SRC_OBJECT_ID AND SOURCE_OBJECT_TYPE_ID = P_SRC_OBJECT_TYPE_ID AND CATALOG_ID IN (SELECT CATEGORY_ID FROM BO_CTE)
        UNION ALL
        SELECT BCT.NAME OBJECT_TYPE, COUNT(*) BOJ_COUNT FROM ADS_ASSOCIATIONS AA JOIN BG_CUSTOM_TYPES BCT ON TARGET_OBJECT_TYPE_ID = BCT.OBJECT_TYPE_ID JOIN BG_CUSTOM_OBJECTS BCO ON BCO.ID = TARGET_OBJECT_ID WHERE SOURCE_OBJECT_ID = P_SRC_OBJECT_ID AND SOURCE_OBJECT_TYPE_ID = P_SRC_OBJECT_TYPE_ID AND CUSTOM_TYPE = 1 AND BCO.CATEGORY_ID IN (SELECT CATEGORY_ID FROM BO_CTE) GROUP BY BCT.NAME
        UNION ALL
        SELECT 'SM_COLUMN' OBJECT_TYPE, COUNT(*) BOJ_COUNT FROM ADS_ASSOCIATIONS JOIN VALID_SYS_TBL_COL_METADATA ON STCM_ID = SOURCE_OBJECT_ID WHERE SOURCE_OBJECT_TYPE_ID = (SELECT OBJECT_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE = 'SM_COLUMN') AND TARGET_OBJECT_ID = P_SRC_OBJECT_ID AND TARGET_OBJECT_TYPE_ID = P_SRC_OBJECT_TYPE_ID AND ( 1 = P_MASTER_ACCESS OR SCE_ID IN (SELECT AOTS.OBJECT_ID FROM ADS_OBJECT_TO_OBJECT_SCOPE AOTS WHERE AOTS.OBJECT_TYPE_ID = SM_ENVIRONMENT_OBJ_TYPE_ID AND ((AOTS.SCOPE_OBJECT_TYPE_ID = USER_OBJ_TYPE_ID AND AOTS.SCOPE_OBJECT_ID = P_USER_ID) OR (AOTS.SCOPE_OBJECT_TYPE_ID = ROLE_OBJ_TYPE_ID AND AOTS.SCOPE_OBJECT_ID IN (SELECT ROLE_ID FROM USER_ASSIGNED_ROLES WHERE USER_ID = P_USER_ID)))) )
        UNION ALL
        SELECT 'SM_TABLE' OBJECT_TYPE, COUNT(*) BOJ_COUNT FROM ADS_ASSOCIATIONS JOIN VALID_SYSTEM_TABLE_METADATA ON STM_ID = SOURCE_OBJECT_ID WHERE SOURCE_OBJECT_TYPE_ID = (SELECT OBJECT_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE = 'SM_TABLE') AND TARGET_OBJECT_ID = P_SRC_OBJECT_ID AND TARGET_OBJECT_TYPE_ID = P_SRC_OBJECT_TYPE_ID AND ( 1 = P_MASTER_ACCESS OR SCE_ID IN (SELECT AOTS.OBJECT_ID FROM ADS_OBJECT_TO_OBJECT_SCOPE AOTS WHERE AOTS.OBJECT_TYPE_ID = SM_ENVIRONMENT_OBJ_TYPE_ID AND ((AOTS.SCOPE_OBJECT_TYPE_ID = USER_OBJ_TYPE_ID AND AOTS.SCOPE_OBJECT_ID = P_USER_ID) OR (AOTS.SCOPE_OBJECT_TYPE_ID = ROLE_OBJ_TYPE_ID AND AOTS.SCOPE_OBJECT_ID IN (SELECT ROLE_ID FROM USER_ASSIGNED_ROLES WHERE USER_ID = P_USER_ID)))) )
        UNION ALL
        SELECT 'SM_ENVIRONMENT' OBJECT_TYPE, COUNT(*) BOJ_COUNT FROM ADS_ASSOCIATIONS JOIN ACTIVE_SYS_CON_ENVIRONMENTS ON SCE_ID = SOURCE_OBJECT_ID WHERE SOURCE_OBJECT_TYPE_ID = (SELECT OBJECT_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE = 'SM_ENVIRONMENT') AND TARGET_OBJECT_ID = P_SRC_OBJECT_ID AND TARGET_OBJECT_TYPE_ID = P_SRC_OBJECT_TYPE_ID AND ( 1 = P_MASTER_ACCESS OR SOURCE_OBJECT_ID IN (SELECT AOTS.OBJECT_ID FROM ADS_OBJECT_TO_OBJECT_SCOPE AOTS WHERE AOTS.OBJECT_TYPE_ID = SM_ENVIRONMENT_OBJ_TYPE_ID AND ((AOTS.SCOPE_OBJECT_TYPE_ID = USER_OBJ_TYPE_ID AND AOTS.SCOPE_OBJECT_ID = P_USER_ID) OR (AOTS.SCOPE_OBJECT_TYPE_ID = ROLE_OBJ_TYPE_ID AND AOTS.SCOPE_OBJECT_ID IN (SELECT ROLE_ID FROM USER_ASSIGNED_ROLES WHERE USER_ID = P_USER_ID)))) )
        UNION ALL
        SELECT 'SM_SYSTEM' OBJECT_TYPE, COUNT(*) BOJ_COUNT FROM ADS_ASSOCIATIONS WHERE SOURCE_OBJECT_TYPE_ID = (SELECT OBJECT_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE = 'SM_SYSTEM') AND TARGET_OBJECT_ID = P_SRC_OBJECT_ID AND TARGET_OBJECT_TYPE_ID = P_SRC_OBJECT_TYPE_ID 
        UNION ALL
        SELECT BCT.NAME OBJECT_TYPE, COUNT(*) BOJ_COUNT FROM ADS_ASSOCIATIONS AA JOIN BG_CUSTOM_TYPES BCT ON SOURCE_OBJECT_TYPE_ID = BCT.OBJECT_TYPE_ID JOIN BG_CUSTOM_OBJECTS BCO ON BCO.ID = SOURCE_OBJECT_ID WHERE TARGET_OBJECT_ID = P_SRC_OBJECT_ID AND TARGET_OBJECT_TYPE_ID = P_SRC_OBJECT_TYPE_ID AND CUSTOM_TYPE = 1 AND CATEGORY_ID IN (SELECT CATEGORY_ID FROM BO_CTE) GROUP BY BCT.NAME 
        UNION ALL
        SELECT 'BGM_POLICY' OBJECT_TYPE, COUNT(*) POLICY_COUNT FROM ADS_ASSOCIATIONS JOIN BG_POLICIES BP ON BP.ID = SOURCE_OBJECT_ID WHERE SOURCE_OBJECT_TYPE_ID = (SELECT OBJECT_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE = 'BGM_POLICY') AND TARGET_OBJECT_ID = P_SRC_OBJECT_ID AND TARGET_OBJECT_TYPE_ID = P_SRC_OBJECT_TYPE_ID AND CATALOG_ID IN (SELECT CATEGORY_ID FROM BO_CTE)
        UNION ALL
        SELECT 'BGM_RULE' OBJECT_TYPE, COUNT(*) RULE_COUNT FROM ADS_ASSOCIATIONS JOIN BG_BUSINESS_RULES BBR ON BBR.ID = SOURCE_OBJECT_ID WHERE SOURCE_OBJECT_TYPE_ID = (SELECT OBJECT_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE = 'BGM_RULE') AND TARGET_OBJECT_ID = P_SRC_OBJECT_ID AND TARGET_OBJECT_TYPE_ID = P_SRC_OBJECT_TYPE_ID AND CATALOG_ID IN (SELECT CATEGORY_ID FROM BO_CTE)
        )
        select  SUM(bo.BOJ_COUNT) INTO OBJ_COUNT from bo;
        RETURN OBJ_COUNT;
END FN_MINDMAP_OBJ_COUNT;
/   
DECLARE
  TYPECHECKERFLAG INT;
BEGIN
  SELECT COUNT(*)
  INTO TYPECHECKERFLAG
  FROM ALL_OBJECTS
  WHERE OWNER            = sys_context('userenv', 'current_schema')
  AND UPPER(OBJECT_NAME) = 'MINDMAP_OBJECT_TABLE'
  AND UPPER(OBJECT_TYPE) ='TYPE';
  IF TYPECHECKERFLAG     = 1 THEN
    EXECUTE IMMEDIATE 'DROP TYPE "MINDMAP_OBJECT_TABLE"';
  END IF;
END;
/
DECLARE
  TYPECHECKERFLAG INT;
BEGIN
  SELECT COUNT(*)
  INTO TYPECHECKERFLAG
  FROM ALL_OBJECTS
  WHERE OWNER            = sys_context('userenv', 'current_schema')
  AND UPPER(OBJECT_NAME) = 'MINDMAP_OBJECT'
  AND UPPER(OBJECT_TYPE) ='TYPE';
  IF TYPECHECKERFLAG     = 1 THEN
    EXECUTE IMMEDIATE 'DROP TYPE MINDMAP_OBJECT';
  END IF;
END;
/
DECLARE
  TYPECHECKERFLAG INT;
BEGIN
  SELECT COUNT(*)
  INTO TYPECHECKERFLAG
  FROM ALL_OBJECTS
  WHERE OWNER            = sys_context('userenv', 'current_schema')
  AND UPPER(OBJECT_NAME) = 'MINDMAP_OBJECT'
  AND UPPER(OBJECT_TYPE) ='TYPE';
  IF TYPECHECKERFLAG     = 0 THEN
	-- This TYPE is used for a structured data storing for the results and it is re-usable/helper for mindmap queries
    EXECUTE IMMEDIATE 'CREATE TYPE MINDMAP_OBJECT AS OBJECT (ROOT_CAT_GROUP NUMBER, CAT_ID NUMBER, OBJ_COUNT NUMBER, OBJECT_ID NUMBER,OBJECT_TYPE_ID NUMBER,ASSOCIATION_ID NUMBER, OBJECT_NAME VARCHAR2(4000), FORWARD_TITLE VARCHAR2(4000), REVERSE_TITLE VARCHAR2(4000), RM_ID NUMBER, OBJECT_PATH VARCHAR2(4000), OBJECT_DEFINITION VARCHAR2(4000), OBJECT_DESCRIPTION VARCHAR2(4000), ENTITY_COLOR VARCHAR(20), DISPLAY_COLOR VARCHAR(20), DISPLAY_TYPE VARCHAR(100), OBJECT_TITLE VARCHAR(255),SDI_ENABLED char(1),
			SDI_FLAG char(1),SDI_DESCRIPTION varchar2(4000),SDI_CLASS_ID number, SDI_CLASS_NAME varchar2(255), OBJECT_LOGICAL_NAME VARCHAR2(300),OBJECT_EXPANDED_LOGICAL_NAME VARCHAR2(4000))';
  END IF;
END;
/
DECLARE
  TYPECHECKERFLAG INT;
BEGIN
  SELECT COUNT(*)
  INTO TYPECHECKERFLAG
  FROM ALL_OBJECTS
  WHERE OWNER            = sys_context('userenv', 'current_schema')
  AND UPPER(OBJECT_NAME) = 'MINDMAP_OBJECT_TABLE'
  AND UPPER(OBJECT_TYPE) ='TYPE';
  IF TYPECHECKERFLAG     = 0 THEN
	-- This is the table form of Mindmap struct and this holds the resultset of mindmap struct object
    EXECUTE IMMEDIATE 'CREATE OR REPLACE TYPE "MINDMAP_OBJECT_TABLE" AS TABLE OF "MINDMAP_OBJECT"';
  END IF;
END;
/
DECLARE
   TABLECHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO TABLECHECKERFLAG FROM ALL_OBJECTS WHERE OWNER = sys_context('userenv', 'current_schema') AND OBJECT_TYPE = 'FUNCTION' AND OBJECT_NAME = UPPER('FN_GET_RELSHIP_MINDMAP');
   IF TABLECHECKERFLAG = 1 THEN
      EXECUTE IMMEDIATE 'DROP FUNCTION FN_GET_RELSHIP_MINDMAP';
   END IF;
END;
/
create or replace FUNCTION FN_GET_RELSHIP_MINDMAP(
P_OBJECT_TYPE_ID IN NUMBER,
 P_OBJECT_ID IN NUMBER,
 P_MASTER_ACCESS IN NUMBER,
 P_USER_ID IN VARCHAR2,
 P_WITH_COUNT IN NUMBER
 )
RETURN MINDMAP_OBJECT_TABLE PIPELINED AS

    BG_TERM_OBJECT_TYPE_ID NUMBER;
    BGM_POLICY_OBJECT_TYPE_ID NUMBER;
    BGM_RULE_OBJECT_TYPE_ID NUMBER;
    SM_SYSTEM_OBJECT_TYPE_ID NUMBER;
    SM_ENV_OBJECT_TYPE_ID NUMBER;
    SM_TABLE_OBJECT_TYPE_ID NUMBER;
    SM_COLUMN_OBJECT_TYPE_ID NUMBER;
    CO_OBJECT_TYPE_ID NUMBER;
    OBJ_EXISTANCE_COUNT NUMBER;
    USER_OBJ_TYPE_ID VARCHAR(20);
    ROLE_OBJ_TYPE_ID VARCHAR(20);
 
        SM_SYS_MINDMAP_FW MINDMAP_OBJECT_TABLE := MINDMAP_OBJECT_TABLE();
        SM_SYS_MINDMAP_REV MINDMAP_OBJECT_TABLE := MINDMAP_OBJECT_TABLE();

        SM_ENV_MINDMAP_FW MINDMAP_OBJECT_TABLE := MINDMAP_OBJECT_TABLE();
        SM_ENV_MINDMAP_REV MINDMAP_OBJECT_TABLE := MINDMAP_OBJECT_TABLE();

        SM_TBL_MINDMAP_FW MINDMAP_OBJECT_TABLE := MINDMAP_OBJECT_TABLE();
        SM_TBL_MINDMAP_REV MINDMAP_OBJECT_TABLE := MINDMAP_OBJECT_TABLE();

        SM_COL_MINDMAP_FW MINDMAP_OBJECT_TABLE := MINDMAP_OBJECT_TABLE();
        SM_COL_MINDMAP_REV MINDMAP_OBJECT_TABLE := MINDMAP_OBJECT_TABLE();

        MINDMAP_BGM_OBJECTS_TABLE MINDMAP_OBJECT_TABLE := MINDMAP_OBJECT_TABLE();
        ALL_MMAP_OBJ_TABL_RELS MINDMAP_OBJECT_TABLE := MINDMAP_OBJECT_TABLE();

        BT_OBJ_TABL_RELATIONSHIPS_FW MINDMAP_OBJECT_TABLE := MINDMAP_OBJECT_TABLE();
        BT_OBJ_TABL_RELATIONSHIPS_REV MINDMAP_OBJECT_TABLE := MINDMAP_OBJECT_TABLE();

        BR_OBJ_TABL_RELATIONSHIPS_FW MINDMAP_OBJECT_TABLE := MINDMAP_OBJECT_TABLE();
        BR_OBJ_TABL_RELATIONSHIPS_REV MINDMAP_OBJECT_TABLE := MINDMAP_OBJECT_TABLE();

        BP_OBJ_TABL_RELATIONSHIPS_FW MINDMAP_OBJECT_TABLE := MINDMAP_OBJECT_TABLE();
        BP_OBJ_TABL_RELATIONSHIPS_REV MINDMAP_OBJECT_TABLE := MINDMAP_OBJECT_TABLE();

        CO_OBJ_TABL_RELATIONSHIPS_FW MINDMAP_OBJECT_TABLE := MINDMAP_OBJECT_TABLE();
        CO_OBJ_TABL_RELATIONSHIPS_REV MINDMAP_OBJECT_TABLE := MINDMAP_OBJECT_TABLE();
    BEGIN

    --OBJECT TYPE_IDS INITIALIZATION -->
    SELECT OBJECT_TYPE_ID into BG_TERM_OBJECT_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE='BGM_TERM';
    SELECT OBJECT_TYPE_ID into BGM_POLICY_OBJECT_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE ='BGM_POLICY';
    SELECT OBJECT_TYPE_ID into BGM_RULE_OBJECT_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE='BGM_RULE';
    SELECT OBJECT_TYPE_ID into SM_SYSTEM_OBJECT_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE='SM_SYSTEM';
    SELECT OBJECT_TYPE_ID into SM_ENV_OBJECT_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE='SM_ENVIRONMENT';
    SELECT OBJECT_TYPE_ID into SM_TABLE_OBJECT_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE='SM_TABLE';
    SELECT OBJECT_TYPE_ID into SM_COLUMN_OBJECT_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE='SM_COLUMN';
    SELECT OBJECT_TYPE_ID INTO USER_OBJ_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE = 'ADS_USER';
    SELECT OBJECT_TYPE_ID INTO ROLE_OBJ_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE = 'ADS_SECURITY_ROLE';
     BEGIN
        SELECT OBJECT_TYPE_ID into CO_OBJECT_TYPE_ID FROM bg_custom_types where OBJECT_TYPE_ID = P_OBJECT_TYPE_ID;
        EXCEPTION
          WHEN NO_DATA_FOUND THEN
            CO_OBJECT_TYPE_ID := 0;
        END;
        --OBJECT TYPE_IDS INITIALIZATION<--
        --Business Terms -->
        WITH BTPATH_CTE AS (SELECT CONNECT_BY_ROOT CATEGORY_ID AS ROOT_CAT_GROUP,category_id, category_name,parent_category_id, ltrim(sys_connect_by_path(category_name, '->'), '->') OBJECT_PATH FROM  bg_categories bc START WITH  parent_category_id = -1  
        AND( 1=P_MASTER_ACCESS OR EXISTS(SELECT 1 FROM ADS_OBJECT_TO_OBJECT_SCOPE aotos where aotos.OBJECT_ID = bc.CATEGORY_ID   and aotos.OBJECT_TYPE_ID = bc.OBJECT_TYPE_ID
        and ((aotos.SCOPE_OBJECT_TYPE_ID = USER_OBJ_TYPE_ID and aotos.SCOPE_OBJECT_ID = P_USER_ID) OR (aotos.SCOPE_OBJECT_TYPE_ID = ROLE_OBJ_TYPE_ID and aotos.SCOPE_OBJECT_ID  IN (SELECT ROLE_ID FROM USER_ASSIGNED_ROLES WHERE USER_ID = P_USER_ID)))))
        CONNECT BY NOCYCLE   PRIOR category_id = parent_category_id ),
        BTCTE AS (SELECT ROOT_CAT_GROUP,BTPATH_CTE.category_id cat_id, -1 as object_id, -1 OBJECT_TYPE_ID, -1 ASSOCIATION_ID, '' OBJECT_NAME, '' OBJECT_definition,     '' object_description, BTPATH_CTE.OBJECT_PATH as OBJECT_PATH,'#4199F3' ENTITY_COLOR, '#000000' DISPLAY_COLOR, 'M0 0 L1 0' DISPLAY_TYPE, '' OBJECT_TITLE  FROM    BTPATH_CTE ),
        --Collectiing BGM Objects -->
     RESULTCTE AS (SELECT ROOT_CAT_GROUP,CAT_ID,OBJECT_ID,OBJECT_TYPE_ID,-1 ASSOCIATION_ID,OBJECT_NAME, '' FORWARD_TITLE,  '' REVERSE_TITLE,  0 as RM_ID,OBJECT_PATH, OBJECT_DEFINITION,OBJECT_DESCRIPTION,ENTITY_COLOR,DISPLAY_COLOR,DISPLAY_TYPE, OBJECT_TITLE,0 as SDI_ENABLED, 'N' SDI_FLAG, ' ' as SDI_DESCRIPTION,-1 as SDI_CLASS_ID, ' ' as SDI_CLASS_NAME, ' ' as OBJECT_LOGICAL_NAME, ' ' as OBJECT_EXPANDED_LOGICAL_NAME from BTCTE)
     SELECT MINDMAP_OBJECT(ROOT_CAT_GROUP,CAT_ID, 0,OBJECT_ID,OBJECT_TYPE_ID,ASSOCIATION_ID,OBJECT_NAME,FORWARD_TITLE, REVERSE_TITLE, RM_ID, OBJECT_PATH, OBJECT_DEFINITION,OBJECT_DESCRIPTION,ENTITY_COLOR,DISPLAY_COLOR,DISPLAY_TYPE, OBJECT_TITLE,SDI_ENABLED,SDI_FLAG,SDI_DESCRIPTION,SDI_CLASS_ID,SDI_CLASS_NAME,OBJECT_LOGICAL_NAME,OBJECT_EXPANDED_LOGICAL_NAME) BULK COLLECT
     INTO MINDMAP_BGM_OBJECTS_TABLE FROM RESULTCTE;
     --Collectiing BGM Objects <--

        --System Object -->
    WITH SYSCTE AS (SELECT assc.target_object_type_id as root_cat_group, 0 AS CAT_ID, assc.target_object_id AS object_id, assc.target_object_type_id AS object_type_id,
    assc.id AS association_id, SDD.SYSTEM_NAME AS object_name,
    RD.FORWARD_TITLE FORWARD_TITLE, RD.REVERSE_TITLE REVERSE_TITLE, RD.RM_ID,' ' as OBJECT_PATH, ' ' OBJECT_DEFINITION,
    ' ' OBJECT_DESCRIPTION, (SELECT COLUMN_VALUE FROM TABLE(split_string((SELECT PREFERENCE_VALUE FROM APP_PREFERENCES WHERE PREFERENCE_NAME = 'SM_SYSTEM_PREFERENCE'),'`')) WHERE ROWNUM = 1)  ENTITY_COLOR,DISPLAY_COLOR,
    DISPLAY_TYPE, (SELECT COLUMN_VALUE FROM (SELECT ROWNUM as SLNO,COLUMN_VALUE FROM TABLE(split_string((SELECT PREFERENCE_VALUE FROM APP_PREFERENCES WHERE PREFERENCE_NAME = 'SM_SYSTEM_PREFERENCE'),'`')))  WHERE SLNO =2) OBJECT_TITLE,
    1 as SDI_ENABLED, nvl(SDD.SDI_FLAG, 'N') SDI_FLAG, nvl(SDD.SDI_DESCRIPTION, ' ') SDI_DESCRIPTION, SDD.SDI_CLASS_ID, nvl(SDI.SDI_CLASS_NAME, ' ') SDI_CLASS_NAME,
     ' ' as OBJECT_LOGICAL_NAME, ' ' as OBJECT_EXPANDED_LOGICAL_NAME
    FROM SYSTEM_DEFINITION_DETAILS SDD JOIN
    ads_associations assc ON SDD.SYSTEM_ID = assc.target_object_id
    LEFT JOIN relationship_details rd on assc.RELATIONSHIP_DETAIL_ID =  rd.rd_id
    LEFT JOIN ADS_KEY_VALUE_OBJECTS KVB ON KVB.object_type_id = assc.target_object_type_id
    LEFT JOIN SM_CLASSIFICATION_SDI SDI ON SDI.SDI_CLASS_ID=SDD.SDI_CLASS_ID
    WHERE assc.source_object_id = P_OBJECT_ID AND assc.source_object_type_id = P_OBJECT_TYPE_ID
    AND assc.target_object_type_id = SM_SYSTEM_OBJECT_TYPE_ID)
     SELECT MINDMAP_OBJECT(ROOT_CAT_GROUP, CAT_ID,0,OBJECT_ID,OBJECT_TYPE_ID,ASSOCIATION_ID,OBJECT_NAME, FORWARD_TITLE, REVERSE_TITLE, RM_ID, OBJECT_PATH, OBJECT_DEFINITION,OBJECT_DESCRIPTION,ENTITY_COLOR,DISPLAY_COLOR,DISPLAY_TYPE,OBJECT_TITLE,SDI_ENABLED,SDI_FLAG,SDI_DESCRIPTION,SDI_CLASS_ID,SDI_CLASS_NAME,OBJECT_LOGICAL_NAME,OBJECT_EXPANDED_LOGICAL_NAME) BULK COLLECT
        INTO SM_SYS_MINDMAP_FW from SYSCTE;
        --System Object <--

        --Environment Object -->
       WITH ENVCTE AS (SELECT assc.target_object_type_id ROOT_CAT_GROUP, 0 AS CAT_ID,  assc.target_object_id AS object_id, assc.target_object_type_id AS object_type_id, assc.id AS association_id, sce.system_environment_name AS object_name,
       RD.FORWARD_TITLE FORWARD_TITLE, RD.REVERSE_TITLE REVERSE_TITLE, RD.RM_ID, sce.system_name OBJECT_PATH, ' '
       OBJECT_DEFINITION, nvl(ENV_INTENDED_USE_DESCR, ' ') OBJECT_DESCRIPTION,
        (SELECT COLUMN_VALUE FROM TABLE(split_string((SELECT PREFERENCE_VALUE FROM APP_PREFERENCES WHERE PREFERENCE_NAME = 'SM_ENVIRONMENT_PREFERENCE'),'`')) WHERE ROWNUM = 1) as ENTITY_COLOR,  DISPLAY_COLOR, DISPLAY_TYPE,(SELECT COLUMN_VALUE FROM (SELECT ROWNUM as SLNO,COLUMN_VALUE FROM TABLE(split_string((SELECT PREFERENCE_VALUE FROM APP_PREFERENCES WHERE PREFERENCE_NAME = 'SM_ENVIRONMENT_PREFERENCE'),'`')))  WHERE SLNO =2) OBJECT_TITLE,
       1 as SDI_ENABLED, nvl(sce.SDI_FLAG, 'N') SDI_FLAG, nvl(sce.SDI_DESCRIPTION, ' ') SDI_DESCRIPTION, sce.SDI_CLASS_ID, nvl(SDI.SDI_CLASS_NAME, ' ') SDI_CLASS_NAME,
       ' ' AS OBJECT_LOGICAL_NAME, ' ' AS OBJECT_EXPANDED_LOGICAL_NAME
       FROM ACTIVE_SYS_CON_ENVIRONMENTS sce
       JOIN ads_associations assc ON sce.sce_id = assc.target_object_id
       LEFT JOIN relationship_details rd on assc.RELATIONSHIP_DETAIL_ID =  rd.rd_id
       LEFT JOIN ADS_KEY_VALUE_OBJECTS KVB ON KVB.object_type_id = assc.target_object_type_id
       LEFT JOIN SM_CLASSIFICATION_SDI SDI ON SDI.SDI_CLASS_ID=sce.SDI_CLASS_ID
       WHERE  assc.source_object_id = P_OBJECT_ID      AND assc.source_object_type_id = P_OBJECT_TYPE_ID
       AND assc.target_object_type_id = SM_ENV_OBJECT_TYPE_ID
       AND  (1=P_MASTER_ACCESS OR sce.sce_id IN (SELECT OBJECT_ID FROM ADS_OBJECT_TO_OBJECT_SCOPE WHERE OBJECT_TYPE_ID = (SELECT OBJECT_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE = 'SM_ENVIRONMENT')
       AND ((SCOPE_OBJECT_TYPE_ID = USER_OBJ_TYPE_ID AND SCOPE_OBJECT_ID = P_USER_ID) OR (SCOPE_OBJECT_TYPE_ID = ROLE_OBJ_TYPE_ID AND SCOPE_OBJECT_ID  IN (SELECT ROLE_ID FROM USER_ASSIGNED_ROLES WHERE USER_ID = P_USER_ID))))))
       SELECT MINDMAP_OBJECT(ROOT_CAT_GROUP, CAT_ID,0,OBJECT_ID,OBJECT_TYPE_ID,ASSOCIATION_ID,OBJECT_NAME, FORWARD_TITLE, REVERSE_TITLE,
       RM_ID, OBJECT_PATH, OBJECT_DEFINITION,OBJECT_DESCRIPTION,ENTITY_COLOR,DISPLAY_COLOR,DISPLAY_TYPE,OBJECT_TITLE,
       SDI_ENABLED,SDI_FLAG,SDI_DESCRIPTION,SDI_CLASS_ID,SDI_CLASS_NAME,OBJECT_LOGICAL_NAME,OBJECT_EXPANDED_LOGICAL_NAME)
       BULK COLLECT
       INTO SM_ENV_MINDMAP_FW from ENVCTE;
        --Environment Object <--

        --Table Object -->
        WITH TABCTE AS (SELECT  assc.target_object_type_id as root_cat_group, 0 AS CAT_ID, assc.target_object_id AS object_id,
        assc.target_object_type_id AS object_type_id,  assc.id AS association_id,
        stm.table_name object_name, RD.FORWARD_TITLE FORWARD_TITLE, RD.REVERSE_TITLE REVERSE_TITLE,RD.RM_ID, cast(sce.system_name || '->' ||
        sce.system_environment_name as varchar2(4000))  OBJECT_PATH, NVL(TABLE_DEF, ' ') OBJECT_DEFINITION,
        ' ' OBJECT_DESCRIPTION,(SELECT COLUMN_VALUE FROM TABLE(split_string((SELECT PREFERENCE_VALUE FROM APP_PREFERENCES WHERE PREFERENCE_NAME = 'SM_TABLE_PREFERENCE'),'`')) WHERE ROWNUM = 1) as  ENTITY_COLOR,  DISPLAY_COLOR, DISPLAY_TYPE, (SELECT COLUMN_VALUE FROM (SELECT ROWNUM as SLNO,COLUMN_VALUE FROM TABLE(split_string((SELECT PREFERENCE_VALUE FROM APP_PREFERENCES WHERE PREFERENCE_NAME = 'SM_TABLE_PREFERENCE'),'`')))  WHERE SLNO =2) OBJECT_TITLE,
        1 as SDI_ENABLED, nvl(stm.SDI_FLAG, 'N') SDI_FLAG, nvl(stm.SDI_DESCRIPTION, ' ') SDI_DESCRIPTION, stm.SDI_CLASS_ID, nvl(SDI.SDI_CLASS_NAME, ' ') SDI_CLASS_NAME,
        nvl(stm.LOGICAL_TABLE_NAME, ' ') OBJECT_LOGICAL_NAME,nvl(stm.EXPANDED_LOGICAL_NAME, ' ') OBJECT_EXPANDED_LOGICAL_NAME
        FROM VALID_SYSTEM_TABLE_METADATA stm    JOIN ads_associations assc ON stm.stm_id = assc.target_object_id
        JOIN ACTIVE_SYS_CON_ENVIRONMENTS sce ON sce.sce_id = stm.sce_id  LEFT JOIN relationship_details rd
        on assc.RELATIONSHIP_DETAIL_ID =  rd.rd_id   LEFT JOIN ADS_KEY_VALUE_OBJECTS KVB ON
        KVB.object_type_id = assc.target_object_type_id
        LEFT JOIN SM_CLASSIFICATION_SDI SDI ON SDI.SDI_CLASS_ID=stm.SDI_CLASS_ID
        WHERE assc.source_object_id = P_OBJECT_ID
        AND assc.source_object_type_id = P_OBJECT_TYPE_ID
        AND assc.target_object_type_id = SM_TABLE_OBJECT_TYPE_ID
        AND  (1=P_MASTER_ACCESS OR sce.sce_id IN (SELECT OBJECT_ID FROM ADS_OBJECT_TO_OBJECT_SCOPE WHERE OBJECT_TYPE_ID = (SELECT OBJECT_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE = 'SM_ENVIRONMENT')
        AND ((SCOPE_OBJECT_TYPE_ID = USER_OBJ_TYPE_ID AND SCOPE_OBJECT_ID = P_USER_ID) OR (SCOPE_OBJECT_TYPE_ID = ROLE_OBJ_TYPE_ID AND SCOPE_OBJECT_ID  IN (SELECT ROLE_ID FROM USER_ASSIGNED_ROLES WHERE USER_ID = P_USER_ID))))))
        SELECT MINDMAP_OBJECT(ROOT_CAT_GROUP,CAT_ID,0,OBJECT_ID,OBJECT_TYPE_ID,ASSOCIATION_ID,OBJECT_NAME, FORWARD_TITLE, REVERSE_TITLE,
        RM_ID, OBJECT_PATH, OBJECT_DEFINITION,OBJECT_DESCRIPTION,ENTITY_COLOR,DISPLAY_COLOR,DISPLAY_TYPE,OBJECT_TITLE,
        SDI_ENABLED,SDI_FLAG,SDI_DESCRIPTION,SDI_CLASS_ID,SDI_CLASS_NAME,OBJECT_LOGICAL_NAME,OBJECT_EXPANDED_LOGICAL_NAME) BULK COLLECT
        INTO SM_TBL_MINDMAP_FW from TABCTE;
        --Table Object <--

        --Column Object -->
        WITH COLCTE AS (SELECT  assc.target_object_type_id as root_cat_group, 0 AS CAT_ID, assc.target_object_id AS object_id, assc.target_object_type_id AS
        object_type_id, assc.id AS association_id, stcm.column_name object_name,  RD.FORWARD_TITLE FORWARD_TITLE, RD.REVERSE_TITLE REVERSE_TITLE,RD.RM_ID,
        CAST(sce.system_name || '->' || sce.system_environment_name || '->' || stcm.table_name as varchar2(4000)) as
        OBJECT_PATH, NVL(COL_DEF, ' ') OBJECT_DEFINITION, ' ' OBJECT_DESCRIPTION,(SELECT COLUMN_VALUE FROM TABLE(split_string((SELECT PREFERENCE_VALUE FROM APP_PREFERENCES WHERE PREFERENCE_NAME = 'SM_COLUMN_PREFERENCE'),'`')) WHERE ROWNUM = 1) as ENTITY_COLOR, DISPLAY_COLOR, DISPLAY_TYPE, (SELECT COLUMN_VALUE FROM (SELECT ROWNUM as SLNO,COLUMN_VALUE FROM TABLE(split_string((SELECT PREFERENCE_VALUE FROM APP_PREFERENCES WHERE PREFERENCE_NAME = 'SM_COLUMN_PREFERENCE'),'`')))  WHERE SLNO =2) OBJECT_TITLE,
        1 as SDI_ENABLED, nvl(stcm.SDI_FLAG, 'N') SDI_FLAG, nvl(stcm.SDI_DESCRIPTION, ' ') SDI_DESCRIPTION, stcm.SDI_CLASS_ID, nvl(SDI.SDI_CLASS_NAME, ' ') SDI_CLASS_NAME,
        nvl(stcm.LOGICAL_COLUMN_NAME, ' ') OBJECT_LOGICAL_NAME,nvl(stcm.EXPANDED_LOGICAL_NAME, ' ') OBJECT_EXPANDED_LOGICAL_NAME
        FROM VALID_SYS_TBL_COL_METADATA stcm
        JOIN ads_associations assc ON stcm.stcm_id = assc.target_object_id    JOIN ACTIVE_SYS_CON_ENVIRONMENTS sce
        ON sce.sce_id = stcm.sce_id    LEFT JOIN relationship_details rd on assc.RELATIONSHIP_DETAIL_ID =  rd.rd_id
        LEFT JOIN ADS_KEY_VALUE_OBJECTS KVB ON KVB.object_type_id = assc.target_object_type_id
        LEFT JOIN SM_CLASSIFICATION_SDI SDI ON SDI.SDI_CLASS_ID=stcm.SDI_CLASS_ID
        WHERE  assc.source_object_id = P_OBJECT_ID   AND assc.source_object_type_id = P_OBJECT_TYPE_ID
        AND assc.target_object_type_id = SM_COLUMN_OBJECT_TYPE_ID
        AND  (1=P_MASTER_ACCESS OR sce.sce_id IN (SELECT OBJECT_ID FROM ADS_OBJECT_TO_OBJECT_SCOPE WHERE OBJECT_TYPE_ID = (SELECT OBJECT_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE = 'SM_ENVIRONMENT')
        AND ((SCOPE_OBJECT_TYPE_ID = USER_OBJ_TYPE_ID AND SCOPE_OBJECT_ID = P_USER_ID) OR (SCOPE_OBJECT_TYPE_ID = ROLE_OBJ_TYPE_ID AND SCOPE_OBJECT_ID  IN (SELECT ROLE_ID FROM USER_ASSIGNED_ROLES WHERE USER_ID = P_USER_ID))))))
        SELECT MINDMAP_OBJECT(ROOT_CAT_GROUP,CAT_ID,0,OBJECT_ID,OBJECT_TYPE_ID,ASSOCIATION_ID,OBJECT_NAME, FORWARD_TITLE, REVERSE_TITLE, RM_ID, OBJECT_PATH, OBJECT_DEFINITION,OBJECT_DESCRIPTION,ENTITY_COLOR,DISPLAY_COLOR,DISPLAY_TYPE,OBJECT_TITLE,
        SDI_ENABLED,SDI_FLAG,SDI_DESCRIPTION,SDI_CLASS_ID,SDI_CLASS_NAME,OBJECT_LOGICAL_NAME,OBJECT_EXPANDED_LOGICAL_NAME) BULK COLLECT
        INTO SM_COL_MINDMAP_FW from COLCTE;
        --Column Object <--



    --SM System Reverse
    select count(1) into OBJ_EXISTANCE_COUNT from TABLE(SM_SYS_MINDMAP_FW) where OBJECT_TYPE_ID = SM_SYSTEM_OBJECT_TYPE_ID;

    IF OBJ_EXISTANCE_COUNT = 0  or P_OBJECT_TYPE_ID = SM_SYSTEM_OBJECT_TYPE_ID THEN
            SELECT MINDMAP_OBJECT(ROOT_CAT_GROUP,CAT_ID,0,OBJECT_ID,OBJECT_TYPE_ID,ASSOCIATION_ID,OBJECT_NAME, FORWARD_TITLE, REVERSE_TITLE, RM_ID,OBJECT_PATH, OBJECT_DEFINITION,OBJECT_DESCRIPTION,ENTITY_COLOR,DISPLAY_COLOR,DISPLAY_TYPE,OBJECT_TITLE,
            SDI_ENABLED,SDI_FLAG,SDI_DESCRIPTION,SDI_CLASS_ID,SDI_CLASS_NAME,OBJECT_LOGICAL_NAME,OBJECT_EXPANDED_LOGICAL_NAME) BULK COLLECT
            INTO SM_SYS_MINDMAP_REV
            FROM (SELECT assc.source_object_type_id as root_cat_group, 0 AS CAT_ID, sdd.SYSTEM_ID AS object_id, assc.source_object_type_id AS object_type_id,
            assc.id AS association_id, SDD.SYSTEM_NAME AS object_name, RD.REVERSE_TITLE FORWARD_TITLE, RD.FORWARD_TITLE REVERSE_TITLE, RD.RM_ID,' '
            as OBJECT_PATH, ' ' OBJECT_DEFINITION, ' ' OBJECT_DESCRIPTION,(SELECT COLUMN_VALUE FROM TABLE(split_string((SELECT PREFERENCE_VALUE FROM APP_PREFERENCES WHERE PREFERENCE_NAME = 'SM_SYSTEM_PREFERENCE'),'`')) WHERE ROWNUM = 1)  as ENTITY_COLOR,DISPLAY_COLOR, DISPLAY_TYPE ,(SELECT COLUMN_VALUE FROM (SELECT ROWNUM as SLNO,COLUMN_VALUE FROM TABLE(split_string((SELECT PREFERENCE_VALUE FROM APP_PREFERENCES WHERE PREFERENCE_NAME = 'SM_SYSTEM_PREFERENCE'),'`')))  WHERE SLNO =2)OBJECT_TITLE,
            1 as SDI_ENABLED, nvl(SDD.SDI_FLAG, 'N') SDI_FLAG, nvl(SDD.SDI_DESCRIPTION, ' ') SDI_DESCRIPTION, SDD.SDI_CLASS_ID, nvl(SDI.SDI_CLASS_NAME, ' ') SDI_CLASS_NAME,
            ' ' AS OBJECT_LOGICAL_NAME,' ' AS OBJECT_EXPANDED_LOGICAL_NAME FROM SYSTEM_DEFINITION_DETAILS SDD
            JOIN ads_associations assc ON SDD.SYSTEM_ID = assc.source_object_id
            LEFT JOIN relationship_details rd on assc.RELATIONSHIP_DETAIL_ID =  rd.rd_id
            LEFT JOIN ADS_KEY_VALUE_OBJECTS KVB ON KVB.object_type_id = assc.source_object_type_id
            LEFT JOIN SM_CLASSIFICATION_SDI SDI ON SDI.SDI_CLASS_ID=SDD.SDI_CLASS_ID
            WHERE assc.target_object_id = P_OBJECT_ID
            AND assc.target_object_type_id = P_OBJECT_TYPE_ID
            AND assc.source_object_type_id = SM_SYSTEM_OBJECT_TYPE_ID);
    END IF;

	--SM Env Reverse
    select count(1) into OBJ_EXISTANCE_COUNT from TABLE(SM_ENV_MINDMAP_FW) where OBJECT_TYPE_ID = SM_ENV_OBJECT_TYPE_ID;

    IF OBJ_EXISTANCE_COUNT = 0  or P_OBJECT_TYPE_ID = SM_ENV_OBJECT_TYPE_ID  THEN
            SELECT MINDMAP_OBJECT(ROOT_CAT_GROUP,CAT_ID,0,OBJECT_ID,OBJECT_TYPE_ID,ASSOCIATION_ID,OBJECT_NAME,FORWARD_TITLE, REVERSE_TITLE, RM_ID, OBJECT_PATH, OBJECT_DEFINITION,OBJECT_DESCRIPTION,ENTITY_COLOR,DISPLAY_COLOR,DISPLAY_TYPE,OBJECT_TITLE,
            SDI_ENABLED,SDI_FLAG,SDI_DESCRIPTION,SDI_CLASS_ID,SDI_CLASS_NAME,OBJECT_LOGICAL_NAME,OBJECT_EXPANDED_LOGICAL_NAME) BULK COLLECT
            INTO SM_ENV_MINDMAP_REV
            FROM (SELECT assc.source_object_type_id as root_cat_group, 0 AS CAT_ID, sce.sce_id AS object_id, assc.source_object_type_id AS object_type_id,
            assc.id AS association_id, sce.system_environment_name AS object_name,    RD.REVERSE_TITLE FORWARD_TITLE, RD.FORWARD_TITLE REVERSE_TITLE,
            RD.RM_ID,sce.system_name OBJECT_PATH, ' ' OBJECT_DEFINITION, nvl(ENV_INTENDED_USE_DESCR, ' ')
            OBJECT_DESCRIPTION,(SELECT COLUMN_VALUE FROM TABLE(split_string((SELECT PREFERENCE_VALUE FROM APP_PREFERENCES WHERE PREFERENCE_NAME = 'SM_ENVIRONMENT_PREFERENCE'),'`')) WHERE ROWNUM = 1) as ENTITY_COLOR, DISPLAY_COLOR,DISPLAY_TYPE, (SELECT COLUMN_VALUE FROM (SELECT ROWNUM as SLNO,COLUMN_VALUE FROM TABLE(split_string((SELECT PREFERENCE_VALUE FROM APP_PREFERENCES WHERE PREFERENCE_NAME = 'SM_ENVIRONMENT_PREFERENCE'),'`')))  WHERE SLNO =2) OBJECT_TITLE,
            1 as SDI_ENABLED, nvl(sce.SDI_FLAG, 'N') SDI_FLAG, nvl(sce.SDI_DESCRIPTION, ' ') SDI_DESCRIPTION, sce.SDI_CLASS_ID, nvl(SDI.SDI_CLASS_NAME, ' ') SDI_CLASS_NAME, 
             ' ' AS OBJECT_LOGICAL_NAME,' ' AS OBJECT_EXPANDED_LOGICAL_NAME FROM ACTIVE_SYS_CON_ENVIRONMENTS sce    
            JOIN ads_associations assc ON sce.sce_id = assc.source_object_id
            LEFT JOIN relationship_details rd on assc.RELATIONSHIP_DETAIL_ID =  rd.rd_id
            LEFT JOIN ADS_KEY_VALUE_OBJECTS KVB ON KVB.object_type_id = assc.source_object_type_id
            LEFT JOIN SM_CLASSIFICATION_SDI SDI ON SDI.SDI_CLASS_ID=sce.SDI_CLASS_ID
            WHERE assc.target_object_id = P_OBJECT_ID  AND assc.target_object_type_id = P_OBJECT_TYPE_ID
            AND assc.source_object_type_id = SM_ENV_OBJECT_TYPE_ID
            AND  (1=P_MASTER_ACCESS OR sce.sce_id IN (SELECT OBJECT_ID FROM ADS_OBJECT_TO_OBJECT_SCOPE WHERE OBJECT_TYPE_ID = (SELECT OBJECT_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE = 'SM_ENVIRONMENT')
            AND ((SCOPE_OBJECT_TYPE_ID = USER_OBJ_TYPE_ID AND SCOPE_OBJECT_ID = P_USER_ID) OR (SCOPE_OBJECT_TYPE_ID = ROLE_OBJ_TYPE_ID AND SCOPE_OBJECT_ID  IN (SELECT ROLE_ID FROM USER_ASSIGNED_ROLES WHERE USER_ID = P_USER_ID))))));
        END IF;


	-- SM Table Reverse
    select count(1) into OBJ_EXISTANCE_COUNT from TABLE(SM_TBL_MINDMAP_FW) where OBJECT_TYPE_ID = SM_TABLE_OBJECT_TYPE_ID;

    IF OBJ_EXISTANCE_COUNT = 0 or P_OBJECT_TYPE_ID = SM_TABLE_OBJECT_TYPE_ID THEN
            SELECT MINDMAP_OBJECT(ROOT_CAT_GROUP,CAT_ID,0, OBJECT_ID,OBJECT_TYPE_ID,ASSOCIATION_ID,OBJECT_NAME, FORWARD_TITLE, REVERSE_TITLE, RM_ID, OBJECT_PATH, OBJECT_DEFINITION,OBJECT_DESCRIPTION,ENTITY_COLOR,DISPLAY_COLOR,DISPLAY_TYPE,OBJECT_TITLE,
            SDI_ENABLED,SDI_FLAG,SDI_DESCRIPTION,SDI_CLASS_ID,SDI_CLASS_NAME,OBJECT_LOGICAL_NAME,OBJECT_EXPANDED_LOGICAL_NAME) BULK COLLECT
            INTO SM_TBL_MINDMAP_REV
            FROM (SELECT assc.source_object_type_id as root_cat_group, 0 AS CAT_ID,stm.stm_id AS object_id,  assc.source_object_type_id
            AS object_type_id, assc.id AS association_id, stm.table_name object_name,
            RD.REVERSE_TITLE FORWARD_TITLE, RD.FORWARD_TITLE REVERSE_TITLE, RD.RM_ID,cast(sce.system_name || '->' || sce.system_environment_name as
            varchar2(4000))  OBJECT_PATH, NVL(TABLE_DEF, ' ') OBJECT_DEFINITION, ' '
            OBJECT_DESCRIPTION,  (SELECT COLUMN_VALUE FROM TABLE(split_string((SELECT PREFERENCE_VALUE FROM APP_PREFERENCES WHERE PREFERENCE_NAME = 'SM_TABLE_PREFERENCE'),'`')) WHERE ROWNUM = 1) as ENTITY_COLOR,  DISPLAY_COLOR,DISPLAY_TYPE,(SELECT COLUMN_VALUE FROM (SELECT ROWNUM as SLNO,COLUMN_VALUE FROM TABLE(split_string((SELECT PREFERENCE_VALUE FROM APP_PREFERENCES WHERE PREFERENCE_NAME = 'SM_TABLE_PREFERENCE'),'`')))  WHERE SLNO =2) OBJECT_TITLE,
            1 as SDI_ENABLED, nvl(stm.SDI_FLAG, 'N') SDI_FLAG, nvl(stm.SDI_DESCRIPTION, ' ') SDI_DESCRIPTION, stm.SDI_CLASS_ID, nvl(SDI.SDI_CLASS_NAME, ' ') SDI_CLASS_NAME,
            nvl(stm.LOGICAL_TABLE_NAME, ' ') OBJECT_LOGICAL_NAME,nvl(stm.EXPANDED_LOGICAL_NAME, ' ') OBJECT_EXPANDED_LOGICAL_NAME
            FROM VALID_SYSTEM_TABLE_METADATA stm    JOIN ads_associations assc ON stm.stm_id = assc.source_object_id
            JOIN ACTIVE_SYS_CON_ENVIRONMENTS sce ON sce.sce_id = stm.sce_id    LEFT JOIN relationship_details rd
            on assc.RELATIONSHIP_DETAIL_ID =  rd.rd_id LEFT JOIN ADS_KEY_VALUE_OBJECTS KVB
            ON KVB.object_type_id = assc.source_object_type_id
            LEFT JOIN SM_CLASSIFICATION_SDI SDI ON SDI.SDI_CLASS_ID=stm.SDI_CLASS_ID
            WHERE assc.target_object_id = P_OBJECT_ID
            AND assc.target_object_type_id = P_OBJECT_TYPE_ID
            AND assc.source_object_type_id = SM_TABLE_OBJECT_TYPE_ID
            AND  (1=P_MASTER_ACCESS OR sce.sce_id IN (SELECT OBJECT_ID FROM ADS_OBJECT_TO_OBJECT_SCOPE WHERE OBJECT_TYPE_ID = (SELECT OBJECT_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE = 'SM_ENVIRONMENT')
            AND ((SCOPE_OBJECT_TYPE_ID = USER_OBJ_TYPE_ID AND SCOPE_OBJECT_ID = P_USER_ID) OR (SCOPE_OBJECT_TYPE_ID = ROLE_OBJ_TYPE_ID AND SCOPE_OBJECT_ID  IN (SELECT ROLE_ID FROM USER_ASSIGNED_ROLES WHERE USER_ID = P_USER_ID))))));
        END IF;


    --SM Column Reverse
    select count(1) into OBJ_EXISTANCE_COUNT from TABLE(SM_COL_MINDMAP_FW) where OBJECT_TYPE_ID = SM_COLUMN_OBJECT_TYPE_ID;

    IF OBJ_EXISTANCE_COUNT = 0 or P_OBJECT_TYPE_ID = SM_COLUMN_OBJECT_TYPE_ID THEN
            SELECT MINDMAP_OBJECT(ROOT_CAT_GROUP,CAT_ID,0,OBJECT_ID,OBJECT_TYPE_ID,ASSOCIATION_ID,OBJECT_NAME, FORWARD_TITLE, REVERSE_TITLE, RM_ID,OBJECT_PATH, OBJECT_DEFINITION,OBJECT_DESCRIPTION,ENTITY_COLOR,DISPLAY_COLOR,DISPLAY_TYPE,OBJECT_TITLE,
            SDI_ENABLED,SDI_FLAG,SDI_DESCRIPTION,SDI_CLASS_ID,SDI_CLASS_NAME,OBJECT_LOGICAL_NAME,OBJECT_EXPANDED_LOGICAL_NAME) BULK COLLECT
            INTO SM_COL_MINDMAP_REV
            FROM (SELECT assc.source_object_type_id as root_cat_group, 0 AS CAT_ID,stcm.STCM_ID AS object_id,
            assc.source_object_type_id AS object_type_id, assc.id AS
            association_id, stcm.column_name object_name,
            RD.REVERSE_TITLE FORWARD_TITLE, RD.FORWARD_TITLE REVERSE_TITLE, RD.RM_ID,CAST(sce.system_name || '->' || sce.system_environment_name || '->' ||
            stcm.table_name as varchar2(4000)) as OBJECT_PATH, NVL(COL_DEF, ' ') OBJECT_DEFINITION, ' '
            OBJECT_DESCRIPTION,(SELECT COLUMN_VALUE FROM TABLE(split_string((SELECT PREFERENCE_VALUE FROM APP_PREFERENCES WHERE PREFERENCE_NAME = 'SM_COLUMN_PREFERENCE'),'`')) WHERE ROWNUM = 1) as ENTITY_COLOR,  DISPLAY_COLOR, DISPLAY_TYPE,(SELECT COLUMN_VALUE FROM (SELECT ROWNUM as SLNO,COLUMN_VALUE FROM TABLE(split_string((SELECT PREFERENCE_VALUE FROM APP_PREFERENCES WHERE PREFERENCE_NAME = 'SM_COLUMN_PREFERENCE'),'`')))  WHERE SLNO =2) OBJECT_TITLE,
            1 as SDI_ENABLED, nvl(stcm.SDI_FLAG, 'N') SDI_FLAG, nvl(stcm.SDI_DESCRIPTION, ' ') SDI_DESCRIPTION, stcm.SDI_CLASS_ID, nvl(SDI.SDI_CLASS_NAME, ' ') SDI_CLASS_NAME,
            nvl(stcm.LOGICAL_COLUMN_NAME, ' ') OBJECT_LOGICAL_NAME,nvl(stcm.EXPANDED_LOGICAL_NAME, ' ') OBJECT_EXPANDED_LOGICAL_NAME
            FROM VALID_SYS_TBL_COL_METADATA stcm    JOIN ads_associations assc
            ON stcm.stcm_id = assc.source_object_id    JOIN ACTIVE_SYS_CON_ENVIRONMENTS sce
            ON sce.sce_id = stcm.sce_id  LEFT JOIN relationship_details rd on assc.RELATIONSHIP_DETAIL_ID =  rd.rd_id
            LEFT JOIN ADS_KEY_VALUE_OBJECTS KVB ON KVB.object_type_id = assc.source_object_type_id
            LEFT JOIN SM_CLASSIFICATION_SDI SDI ON SDI.SDI_CLASS_ID=stcm.SDI_CLASS_ID
            WHERE assc.target_object_id = P_OBJECT_ID   AND assc.target_object_type_id = P_OBJECT_TYPE_ID
            AND assc.source_object_type_id = SM_COLUMN_OBJECT_TYPE_ID
            AND  (1=P_MASTER_ACCESS OR sce.sce_id IN (SELECT OBJECT_ID FROM ADS_OBJECT_TO_OBJECT_SCOPE WHERE OBJECT_TYPE_ID = (SELECT OBJECT_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE = 'SM_ENVIRONMENT')
            AND ((SCOPE_OBJECT_TYPE_ID = USER_OBJ_TYPE_ID AND SCOPE_OBJECT_ID = P_USER_ID) OR (SCOPE_OBJECT_TYPE_ID = ROLE_OBJ_TYPE_ID AND SCOPE_OBJECT_ID  IN (SELECT ROLE_ID FROM USER_ASSIGNED_ROLES WHERE USER_ID = P_USER_ID))))));
        END IF;

        -- BT Forward -->
    SELECT MINDMAP_OBJECT(ROOT_CAT_GROUP,CAT_ID,0,OBJECT_ID,OBJECT_TYPE_ID,ASSOCIATION_ID,OBJECT_NAME,FORWARD_TITLE, REVERSE_TITLE, RM_ID, OBJECT_PATH, OBJECT_DEFINITION,OBJECT_DESCRIPTION ,ENTITY_COLOR,DISPLAY_COLOR,DISPLAY_TYPE,OBJECT_TITLE,
        SDI_ENABLED,SDI_FLAG,SDI_DESCRIPTION,SDI_CLASS_ID,SDI_CLASS_NAME,OBJECT_LOGICAL_NAME,OBJECT_EXPANDED_LOGICAL_NAME) BULK COLLECT
        INTO BT_OBJ_TABL_RELATIONSHIPS_FW FROM (
    SELECT ROOT_CAT_GROUP,CAT_ID, BGT.BUS_TERM_ID OBJECT_ID, BGA.TARGET_OBJECT_TYPE_ID OBJECT_TYPE_ID, BGA.ID AS ASSOCIATION_ID,
    BUS_TERM_NAME OBJECT_NAME, RD.FORWARD_TITLE FORWARD_TITLE, RD.REVERSE_TITLE REVERSE_TITLE,RD.RM_ID, OBJECT_PATH, NVL(DEFINITION, ' ') OBJECT_DEFINITION, NVL(BGT.DESCRIPTION, ' ')
    OBJECT_DESCRIPTION, BCT.ENTITY_COLOR,RD.DISPLAY_COLOR,RD.DISPLAY_TYPE,BCT.ENTITY_TITLE AS OBJECT_TITLE,
    nvl(BCT.SDI_ENABLED,0) as SDI_ENABLED, nvl(BGT.SDI_FLAG, 'N') SDI_FLAG, nvl(BGT.SDI_DESCRIPTION, ' ') SDI_DESCRIPTION, BGT.SDI_CLASS_ID, nvl(SDI.SDI_CLASS_NAME, ' ') SDI_CLASS_NAME,
     ' ' as OBJECT_LOGICAL_NAME, ' ' as OBJECT_EXPANDED_LOGICAL_NAME
    FROM TABLE(MINDMAP_BGM_OBJECTS_TABLE) tbl_mindmap_bt
    JOIN business_terms BGT ON tbl_mindmap_bt.CAT_ID = BGT.category_id
    JOIN ads_associations BGA ON BGT.bus_term_id = BGA.target_object_id JOIN BG_CUSTOM_TYPES BCT ON
    BCT.OBJECT_TYPE_ID = BG_TERM_OBJECT_TYPE_ID LEFT JOIN relationship_details rd on BGA.RELATIONSHIP_DETAIL_ID =
    rd.rd_id LEFT JOIN SM_CLASSIFICATION_SDI SDI ON SDI.SDI_CLASS_ID=BGT.SDI_CLASS_ID
    WHERE source_object_id = P_OBJECT_ID   AND source_object_type_id = P_OBJECT_TYPE_ID   AND target_object_type_id = BG_TERM_OBJECT_TYPE_ID);
    -- BT Forward <--

         -- BT Reverse -->
    select count(1) into OBJ_EXISTANCE_COUNT from TABLE(BT_OBJ_TABL_RELATIONSHIPS_FW) where OBJECT_TYPE_ID = BG_TERM_OBJECT_TYPE_ID;

   IF OBJ_EXISTANCE_COUNT = 0 or P_OBJECT_TYPE_ID = BG_TERM_OBJECT_TYPE_ID THEN
            SELECT MINDMAP_OBJECT(ROOT_CAT_GROUP,CAT_ID,0,OBJECT_ID,OBJECT_TYPE_ID,ASSOCIATION_ID,OBJECT_NAME, FORWARD_TITLE, REVERSE_TITLE, RM_ID,OBJECT_PATH, OBJECT_DEFINITION,OBJECT_DESCRIPTION ,ENTITY_COLOR,DISPLAY_COLOR,DISPLAY_TYPE,OBJECT_TITLE,
            SDI_ENABLED,SDI_FLAG,SDI_DESCRIPTION,SDI_CLASS_ID,SDI_CLASS_NAME,OBJECT_LOGICAL_NAME,OBJECT_EXPANDED_LOGICAL_NAME) BULK COLLECT
            INTO BT_OBJ_TABL_RELATIONSHIPS_REV FROM (
            SELECT ROOT_CAT_GROUP,CAT_ID, BGT.BUS_TERM_ID OBJECT_ID, BGA.source_object_type_id  OBJECT_TYPE_ID,
            BGA.ID AS ASSOCIATION_ID, BUS_TERM_NAME OBJECT_NAME, RD.REVERSE_TITLE FORWARD_TITLE, RD.FORWARD_TITLE REVERSE_TITLE,RD.RM_ID, OBJECT_PATH, NVL(DEFINITION, ' ') OBJECT_DEFINITION,
            NVL(BGT.DESCRIPTION, ' ') OBJECT_DESCRIPTION ,BCT.ENTITY_COLOR,RD.DISPLAY_COLOR,RD.DISPLAY_TYPE,BCT.ENTITY_TITLE AS OBJECT_TITLE,
            nvl(BCT.SDI_ENABLED,0) as SDI_ENABLED, nvl(BGT.SDI_FLAG, 'N') SDI_FLAG, nvl(BGT.SDI_DESCRIPTION, ' ') SDI_DESCRIPTION, BGT.SDI_CLASS_ID, nvl(SDI.SDI_CLASS_NAME, ' ') SDI_CLASS_NAME,
             ' ' as OBJECT_LOGICAL_NAME, ' ' as OBJECT_EXPANDED_LOGICAL_NAME
            FROM TABLE(MINDMAP_BGM_OBJECTS_TABLE) tbl_mindmap_bt
            JOIN business_terms BGT ON tbl_mindmap_bt.CAT_ID = BGT.category_id
            JOIN ads_associations BGA ON BGT.bus_term_id = BGA.source_object_id
            JOIN BG_CUSTOM_TYPES BCT ON BCT.OBJECT_TYPE_ID = BG_TERM_OBJECT_TYPE_ID
            LEFT JOIN relationship_details rd on BGA.RELATIONSHIP_DETAIL_ID =  rd.rd_id
            LEFT JOIN SM_CLASSIFICATION_SDI SDI ON SDI.SDI_CLASS_ID=BGT.SDI_CLASS_ID
            WHERE target_object_id = P_OBJECT_ID   AND target_object_type_id = P_OBJECT_TYPE_ID
            AND source_object_type_id  = BG_TERM_OBJECT_TYPE_ID);
    END IF;
    -- BT Reverse <--

        -- BP Forward -->
    SELECT MINDMAP_OBJECT(ROOT_CAT_GROUP,CAT_ID,0,OBJECT_ID,OBJECT_TYPE_ID,ASSOCIATION_ID,OBJECT_NAME, FORWARD_TITLE, REVERSE_TITLE, RM_ID, OBJECT_PATH, OBJECT_DEFINITION,OBJECT_DESCRIPTION ,ENTITY_COLOR,DISPLAY_COLOR,DISPLAY_TYPE,OBJECT_TITLE,
        SDI_ENABLED,SDI_FLAG,SDI_DESCRIPTION,SDI_CLASS_ID,SDI_CLASS_NAME,OBJECT_LOGICAL_NAME,OBJECT_EXPANDED_LOGICAL_NAME) BULK COLLECT
        INTO BP_OBJ_TABL_RELATIONSHIPS_FW FROM (
    SELECT ROOT_CAT_GROUP,CAT_ID,BP.ID OBJECT_ID,
    BGA.TARGET_OBJECT_TYPE_ID OBJECT_TYPE_ID,
    BGA.ID AS ASSOCIATION_ID,
    BP.NAME OBJECT_NAME,
    RD.FORWARD_TITLE FORWARD_TITLE, RD.REVERSE_TITLE REVERSE_TITLE,RD.RM_ID,
        OBJECT_PATH,
    NVL(DEFINITION, ' ') OBJECT_DEFINITION,
    NVL(BP.DESCRIPTION, ' ') OBJECT_DESCRIPTION ,BCT.ENTITY_COLOR,RD.DISPLAY_COLOR,RD.DISPLAY_TYPE,BCT.ENTITY_TITLE AS OBJECT_TITLE,
    nvl(BCT.SDI_ENABLED,0) as SDI_ENABLED, nvl(BP.SDI_FLAG, 'N') SDI_FLAG, nvl(BP.SDI_DESCRIPTION, ' ') SDI_DESCRIPTION, BP.SDI_CLASS_ID, nvl(SDI.SDI_CLASS_NAME, ' ') SDI_CLASS_NAME,
     ' ' as OBJECT_LOGICAL_NAME, ' ' as OBJECT_EXPANDED_LOGICAL_NAME
    FROM TABLE(MINDMAP_BGM_OBJECTS_TABLE) TBL_MINDMAP_BP
        JOIN BG_POLICIES        BP ON TBL_MINDMAP_BP.CAT_ID = BP.CATALOG_ID
        JOIN ADS_ASSOCIATIONS   BGA ON BP.ID = BGA.TARGET_OBJECT_ID
        JOIN BG_CUSTOM_TYPES BCT ON BCT.OBJECT_TYPE_ID = BGM_POLICY_OBJECT_TYPE_ID
    LEFT JOIN RELATIONSHIP_DETAILS RD ON BGA.RELATIONSHIP_DETAIL_ID =  RD.RD_ID
    LEFT JOIN SM_CLASSIFICATION_SDI SDI ON SDI.SDI_CLASS_ID=BP.SDI_CLASS_ID
    WHERE SOURCE_OBJECT_ID = P_OBJECT_ID
        AND SOURCE_OBJECT_TYPE_ID = P_OBJECT_TYPE_ID
        AND TARGET_OBJECT_TYPE_ID = BGM_POLICY_OBJECT_TYPE_ID);
    -- BP Forward <--

        -- BP Reverse -->
    select count(1) into OBJ_EXISTANCE_COUNT from TABLE(BP_OBJ_TABL_RELATIONSHIPS_FW) where OBJECT_TYPE_ID = BGM_POLICY_OBJECT_TYPE_ID;

   IF OBJ_EXISTANCE_COUNT = 0 or P_OBJECT_TYPE_ID = BGM_POLICY_OBJECT_TYPE_ID THEN
            SELECT MINDMAP_OBJECT(ROOT_CAT_GROUP,CAT_ID, 0,OBJECT_ID,OBJECT_TYPE_ID,ASSOCIATION_ID,OBJECT_NAME,FORWARD_TITLE, REVERSE_TITLE, RM_ID, OBJECT_PATH, OBJECT_DEFINITION,OBJECT_DESCRIPTION ,ENTITY_COLOR,DISPLAY_COLOR,DISPLAY_TYPE,OBJECT_TITLE,
            SDI_ENABLED,SDI_FLAG,SDI_DESCRIPTION,SDI_CLASS_ID,SDI_CLASS_NAME,OBJECT_LOGICAL_NAME,OBJECT_EXPANDED_LOGICAL_NAME) BULK COLLECT
            INTO BP_OBJ_TABL_RELATIONSHIPS_REV FROM (
            SELECT ROOT_CAT_GROUP,CAT_ID, BP.ID OBJECT_ID,
            BGA.SOURCE_OBJECT_TYPE_ID OBJECT_TYPE_ID,
            BGA.ID AS ASSOCIATION_ID,
            BP.NAME OBJECT_NAME,
            RD.REVERSE_TITLE FORWARD_TITLE, RD.FORWARD_TITLE REVERSE_TITLE,RD.RM_ID,
            OBJECT_PATH,
            NVL(DEFINITION,' ') OBJECT_DEFINITION,
            NVL(BP.DESCRIPTION, ' ') OBJECT_DESCRIPTION ,BCT.ENTITY_COLOR,RD.DISPLAY_COLOR,RD.DISPLAY_TYPE,BCT.ENTITY_TITLE AS OBJECT_TITLE,
            nvl(BCT.SDI_ENABLED,0) as SDI_ENABLED, nvl(BP.SDI_FLAG, 'N') SDI_FLAG, nvl(BP.SDI_DESCRIPTION, ' ') SDI_DESCRIPTION, BP.SDI_CLASS_ID, nvl(SDI.SDI_CLASS_NAME, ' ') SDI_CLASS_NAME,
             ' ' as OBJECT_LOGICAL_NAME, ' ' as OBJECT_EXPANDED_LOGICAL_NAME
            FROM TABLE(MINDMAP_BGM_OBJECTS_TABLE) TBL_MINDMAP_BP
            JOIN BG_POLICIES        BP ON TBL_MINDMAP_BP.CAT_ID = BP.CATALOG_ID
            JOIN ADS_ASSOCIATIONS   BGA ON BP.ID = BGA.SOURCE_OBJECT_ID
            JOIN BG_CUSTOM_TYPES BCT ON BCT.OBJECT_TYPE_ID = BGM_POLICY_OBJECT_TYPE_ID
            LEFT JOIN RELATIONSHIP_DETAILS RD ON BGA.RELATIONSHIP_DETAIL_ID =  RD.RD_ID
            LEFT JOIN SM_CLASSIFICATION_SDI SDI ON SDI.SDI_CLASS_ID=BP.SDI_CLASS_ID
            WHERE TARGET_OBJECT_ID = P_OBJECT_ID
            AND TARGET_OBJECT_TYPE_ID = P_OBJECT_TYPE_ID
            AND SOURCE_OBJECT_TYPE_ID = BGM_POLICY_OBJECT_TYPE_ID);
    END IF;
    --BP Reverse <--

    --BR Forward -->
    SELECT MINDMAP_OBJECT(ROOT_CAT_GROUP,CAT_ID,0,OBJECT_ID,OBJECT_TYPE_ID,ASSOCIATION_ID,OBJECT_NAME,FORWARD_TITLE, REVERSE_TITLE, RM_ID, OBJECT_PATH, OBJECT_DEFINITION,OBJECT_DESCRIPTION ,ENTITY_COLOR,DISPLAY_COLOR,DISPLAY_TYPE,OBJECT_TITLE,
        SDI_ENABLED,SDI_FLAG,SDI_DESCRIPTION,SDI_CLASS_ID,SDI_CLASS_NAME,OBJECT_LOGICAL_NAME,OBJECT_EXPANDED_LOGICAL_NAME) BULK COLLECT
        INTO BR_OBJ_TABL_RELATIONSHIPS_FW FROM (
    SELECT ROOT_CAT_GROUP,CAT_ID,bbr.id object_id,
        BGA.TARGET_OBJECT_TYPE_ID OBJECT_TYPE_ID,
        BGA.ID AS ASSOCIATION_ID,
        bbr.name object_name,
        RD.FORWARD_TITLE FORWARD_TITLE, RD.REVERSE_TITLE REVERSE_TITLE, RD.RM_ID,
        OBJECT_PATH,
    NVL(DEFINITION, ' ') OBJECT_DEFINITION,
    NVL(bbr.DESCRIPTION, ' ') OBJECT_DESCRIPTION ,BCT.ENTITY_COLOR,RD.DISPLAY_COLOR,RD.DISPLAY_TYPE,BCT.ENTITY_TITLE AS OBJECT_TITLE,
    nvl(BCT.SDI_ENABLED,0) as SDI_ENABLED, nvl(bbr.SDI_FLAG, 'N') SDI_FLAG, nvl(bbr.SDI_DESCRIPTION, ' ') SDI_DESCRIPTION, bbr.SDI_CLASS_ID, nvl(SDI.SDI_CLASS_NAME, ' ') SDI_CLASS_NAME,
     ' ' as OBJECT_LOGICAL_NAME, ' ' as OBJECT_EXPANDED_LOGICAL_NAME
    FROM TABLE(MINDMAP_BGM_OBJECTS_TABLE) tbl_mindmap_br
    JOIN bg_business_rules bbr ON tbl_mindmap_br.CAT_ID = bbr.catalog_id
    JOIN ads_associations BGA ON bbr.id = BGA.target_object_id
    JOIN BG_CUSTOM_TYPES BCT ON BCT.OBJECT_TYPE_ID = BGM_RULE_OBJECT_TYPE_ID
    LEFT JOIN relationship_details rd on BGA.RELATIONSHIP_DETAIL_ID =  rd.rd_id
    LEFT JOIN SM_CLASSIFICATION_SDI SDI ON SDI.SDI_CLASS_ID=bbr.SDI_CLASS_ID
    WHERE source_object_id = P_OBJECT_ID
        AND source_object_type_id = P_OBJECT_TYPE_ID
        AND target_object_type_id = BGM_RULE_OBJECT_TYPE_ID);
    --BR Forward <--

        --BR Reverse -->
    select count(1) into OBJ_EXISTANCE_COUNT from TABLE(BR_OBJ_TABL_RELATIONSHIPS_FW) where OBJECT_TYPE_ID = BGM_RULE_OBJECT_TYPE_ID;

    IF OBJ_EXISTANCE_COUNT = 0 or P_OBJECT_TYPE_ID = BGM_RULE_OBJECT_TYPE_ID THEN
        SELECT MINDMAP_OBJECT(ROOT_CAT_GROUP,CAT_ID,0,OBJECT_ID,OBJECT_TYPE_ID,ASSOCIATION_ID,OBJECT_NAME,FORWARD_TITLE, REVERSE_TITLE, RM_ID, OBJECT_PATH, OBJECT_DEFINITION,OBJECT_DESCRIPTION,ENTITY_COLOR,DISPLAY_COLOR,DISPLAY_TYPE,OBJECT_TITLE,
        SDI_ENABLED,SDI_FLAG,SDI_DESCRIPTION,SDI_CLASS_ID,SDI_CLASS_NAME,OBJECT_LOGICAL_NAME,OBJECT_EXPANDED_LOGICAL_NAME) BULK COLLECT
        INTO BR_OBJ_TABL_RELATIONSHIPS_REV FROM (
        SELECT ROOT_CAT_GROUP,CAT_ID,BBR.ID OBJECT_ID,
        BGA.SOURCE_OBJECT_TYPE_ID OBJECT_TYPE_ID,
        BGA.ID AS ASSOCIATION_ID,
        BBR.NAME OBJECT_NAME,
        RD.REVERSE_TITLE FORWARD_TITLE, RD.FORWARD_TITLE REVERSE_TITLE, RD.RM_ID,
        OBJECT_PATH,
        NVL(DEFINITION, ' ') OBJECT_DEFINITION,
        NVL(BBR.DESCRIPTION, ' ') OBJECT_DESCRIPTION ,BCT.ENTITY_COLOR,RD.DISPLAY_COLOR,RD.DISPLAY_TYPE,BCT.ENTITY_TITLE AS OBJECT_TITLE,
        nvl(BCT.SDI_ENABLED,0) as SDI_ENABLED, nvl(bbr.SDI_FLAG, 'N') SDI_FLAG, nvl(bbr.SDI_DESCRIPTION, ' ') SDI_DESCRIPTION, bbr.SDI_CLASS_ID, nvl(SDI.SDI_CLASS_NAME, ' ') SDI_CLASS_NAME,
         ' ' as OBJECT_LOGICAL_NAME, ' ' as OBJECT_EXPANDED_LOGICAL_NAME
        FROM TABLE(MINDMAP_BGM_OBJECTS_TABLE) TBL_MINDMAP_BR
        JOIN BG_BUSINESS_RULES BBR ON TBL_MINDMAP_BR.CAT_ID = BBR.CATALOG_ID
        JOIN ADS_ASSOCIATIONS BGA ON BBR.ID = BGA.SOURCE_OBJECT_ID
        JOIN BG_CUSTOM_TYPES BCT ON BCT.OBJECT_TYPE_ID = BGM_RULE_OBJECT_TYPE_ID
        LEFT JOIN RELATIONSHIP_DETAILS RD ON BGA.RELATIONSHIP_DETAIL_ID =  RD.RD_ID
        LEFT JOIN SM_CLASSIFICATION_SDI SDI ON SDI.SDI_CLASS_ID=BBR.SDI_CLASS_ID
        WHERE TARGET_OBJECT_ID = P_OBJECT_ID
        AND TARGET_OBJECT_TYPE_ID = P_OBJECT_TYPE_ID
        AND SOURCE_OBJECT_TYPE_ID = BGM_RULE_OBJECT_TYPE_ID);
    END IF;
    --BR Reverse <--

    --CO Forward -->
    SELECT MINDMAP_OBJECT(ROOT_CAT_GROUP,CAT_ID,0,OBJECT_ID,OBJECT_TYPE_ID,ASSOCIATION_ID,OBJECT_NAME,FORWARD_TITLE, REVERSE_TITLE, RM_ID, OBJECT_PATH, OBJECT_DEFINITION,OBJECT_DESCRIPTION ,ENTITY_COLOR,DISPLAY_COLOR,DISPLAY_TYPE,OBJECT_TITLE,
    SDI_ENABLED,SDI_FLAG,SDI_DESCRIPTION,SDI_CLASS_ID,SDI_CLASS_NAME,OBJECT_LOGICAL_NAME,OBJECT_EXPANDED_LOGICAL_NAME) BULK COLLECT
            INTO CO_OBJ_TABL_RELATIONSHIPS_FW FROM (
                    SELECT ROOT_CAT_GROUP,bco.category_id cat_id, bco.id object_id,
                    target_object_type_id object_type_id,
                    BGA.ID AS ASSOCIATION_ID,
                    bco.name object_name,
                    RD.FORWARD_TITLE FORWARD_TITLE, RD.REVERSE_TITLE REVERSE_TITLE,RD.RM_ID,
                    OBJECT_PATH,
                    NVL(bco.DEFINITION, ' ') OBJECT_DEFINITION,
                    NVL(bco.DESCRIPTION, ' ') OBJECT_DESCRIPTION ,BCT.ENTITY_COLOR,RD.DISPLAY_COLOR,RD.DISPLAY_TYPE,BCT.ENTITY_TITLE AS OBJECT_TITLE,
                    nvl(BCT.SDI_ENABLED,0) as SDI_ENABLED, nvl(bco.SDI_FLAG, 'N') SDI_FLAG, nvl(bco.SDI_DESCRIPTION, ' ') SDI_DESCRIPTION, bco.SDI_CLASS_ID, nvl(SDI.SDI_CLASS_NAME, ' ') SDI_CLASS_NAME,
                     ' ' as OBJECT_LOGICAL_NAME, ' ' as OBJECT_EXPANDED_LOGICAL_NAME
                    FROM bg_custom_objects bco
                    JOIN TABLE(MINDMAP_BGM_OBJECTS_TABLE) cte ON (bco.category_id = cte.cat_id)
                    JOIN ads_associations   bga ON bco.id = bga.target_object_id
                    JOIN BG_CUSTOM_TYPES BCT ON BCT.OBJECT_TYPE_ID = bga.target_object_type_id
                    LEFT JOIN relationship_details rd on BGA.RELATIONSHIP_DETAIL_ID =  rd.rd_id
                    LEFT JOIN SM_CLASSIFICATION_SDI SDI ON SDI.SDI_CLASS_ID=bco.SDI_CLASS_ID
                    WHERE source_object_id = P_OBJECT_ID
                    AND source_object_type_id = P_OBJECT_TYPE_ID
                    AND target_object_type_id in (SELECT OBJECT_TYPE_ID FROM BG_CUSTOM_TYPES WHERE CUSTOM_TYPE = 1));
    --CO Forward <--

    --CO Reverse -->
    select count(1) into OBJ_EXISTANCE_COUNT from TABLE(CO_OBJ_TABL_RELATIONSHIPS_FW) where OBJECT_TYPE_ID in (SELECT OBJECT_TYPE_ID FROM BG_CUSTOM_TYPES WHERE CUSTOM_TYPE = 1);
    IF OBJ_EXISTANCE_COUNT = 0 or P_OBJECT_TYPE_ID = CO_OBJECT_TYPE_ID THEN
        SELECT MINDMAP_OBJECT(ROOT_CAT_GROUP,CAT_ID,0,OBJECT_ID,OBJECT_TYPE_ID,ASSOCIATION_ID,OBJECT_NAME,FORWARD_TITLE, REVERSE_TITLE, RM_ID,OBJECT_PATH, OBJECT_DEFINITION,OBJECT_DESCRIPTION ,ENTITY_COLOR,DISPLAY_COLOR,DISPLAY_TYPE,OBJECT_TITLE,
            SDI_ENABLED,SDI_FLAG,SDI_DESCRIPTION,SDI_CLASS_ID,SDI_CLASS_NAME,OBJECT_LOGICAL_NAME,OBJECT_EXPANDED_LOGICAL_NAME) BULK COLLECT
        INTO CO_OBJ_TABL_RELATIONSHIPS_REV FROM (SELECT ROOT_CAT_GROUP,bco.category_id cat_id, bco.id object_id,
                source_object_type_id OBJECT_TYPE_ID,
                BGA.ID AS ASSOCIATION_ID,
                bco.name object_name,
                RD.REVERSE_TITLE FORWARD_TITLE, RD.FORWARD_TITLE REVERSE_TITLE,RD.RM_ID,
                OBJECT_PATH,
                NVL(bco.DEFINITION, ' ') OBJECT_DEFINITION,
                nvl(bco.DESCRIPTION, ' ') OBJECT_DESCRIPTION ,BCT.ENTITY_COLOR,RD.DISPLAY_COLOR,RD.DISPLAY_TYPE,BCT.ENTITY_TITLE AS OBJECT_TITLE,
                nvl(BCT.SDI_ENABLED,0) as SDI_ENABLED, nvl(bco.SDI_FLAG, 'N') SDI_FLAG, nvl(bco.SDI_DESCRIPTION, ' ') SDI_DESCRIPTION, bco.SDI_CLASS_ID, nvl(SDI.SDI_CLASS_NAME, ' ') SDI_CLASS_NAME,
                 ' ' as OBJECT_LOGICAL_NAME, ' ' as OBJECT_EXPANDED_LOGICAL_NAME
                FROM bg_custom_objects bco
                JOIN TABLE(MINDMAP_BGM_OBJECTS_TABLE) cte ON (bco.category_id = cte.cat_id)
                JOIN ads_associations bga ON bco.id = bga.source_object_id
                    JOIN BG_CUSTOM_TYPES BCT ON BCT.OBJECT_TYPE_ID  = bga.source_object_type_id
                LEFT JOIN relationship_details rd on BGA.RELATIONSHIP_DETAIL_ID =  rd.rd_id
                LEFT JOIN SM_CLASSIFICATION_SDI SDI ON SDI.SDI_CLASS_ID=bco.SDI_CLASS_ID
                WHERE target_object_id = P_OBJECT_ID
                AND target_object_type_id = P_OBJECT_TYPE_ID
                AND source_object_type_id in (SELECT OBJECT_TYPE_ID FROM BG_CUSTOM_TYPES WHERE CUSTOM_TYPE = 1));
    END IF;
    --CO Reverse <--
     -- Collecting all object results -->
    SELECT MINDMAP_OBJECT(ROOT_CAT_GROUP, CAT_ID,0,OBJECT_ID,OBJECT_TYPE_ID,ASSOCIATION_ID,OBJECT_NAME,FORWARD_TITLE, REVERSE_TITLE, RM_ID, OBJECT_PATH, OBJECT_DEFINITION,OBJECT_DESCRIPTION ,ENTITY_COLOR,DISPLAY_COLOR,DISPLAY_TYPE,OBJECT_TITLE,SDI_ENABLED,SDI_FLAG,SDI_DESCRIPTION,SDI_CLASS_ID,SDI_CLASS_NAME,OBJECT_LOGICAL_NAME,OBJECT_EXPANDED_LOGICAL_NAME) BULK COLLECT
        INTO ALL_MMAP_OBJ_TABL_RELS FROM (
        SELECT * FROM TABLE(SM_SYS_MINDMAP_FW)
        UNION ALL
        SELECT * FROM TABLE(SM_SYS_MINDMAP_REV)
        UNION ALL
        SELECT * FROM TABLE(SM_ENV_MINDMAP_FW)
        UNION ALL
        SELECT * FROM TABLE(SM_ENV_MINDMAP_REV)
        UNION ALL
        SELECT * FROM TABLE(SM_TBL_MINDMAP_FW)
        UNION ALL
        SELECT * FROM TABLE(SM_TBL_MINDMAP_REV)
        UNION ALL
        SELECT * FROM TABLE(SM_COL_MINDMAP_FW)
        UNION ALL
        SELECT * FROM TABLE(SM_COL_MINDMAP_REV)
        UNION ALL
        SELECT * FROM TABLE(BT_OBJ_TABL_RELATIONSHIPS_FW)
        UNION ALL
        SELECT * FROM TABLE(BT_OBJ_TABL_RELATIONSHIPS_REV)
        UNION ALL
        SELECT * FROM TABLE(BR_OBJ_TABL_RELATIONSHIPS_FW)
        UNION ALL
        SELECT * FROM TABLE(BR_OBJ_TABL_RELATIONSHIPS_REV)
        UNION ALL
        SELECT * FROM TABLE(BP_OBJ_TABL_RELATIONSHIPS_FW)
        UNION ALL
        SELECT * FROM TABLE(BP_OBJ_TABL_RELATIONSHIPS_REV)
        UNION ALL
        SELECT * FROM TABLE(CO_OBJ_TABL_RELATIONSHIPS_FW)
        UNION ALL
        SELECT * FROM TABLE(CO_OBJ_TABL_RELATIONSHIPS_REV));

IF P_WITH_COUNT = 1 THEN
    FOR RES_RECORD IN (SELECT * FROM TABLE(ALL_MMAP_OBJ_TABL_RELS))
      LOOP
        BEGIN
            PIPE ROW(MINDMAP_OBJECT(
            RES_RECORD.ROOT_CAT_GROUP,
            RES_RECORD.CAT_ID,
            FN_MINDMAP_OBJ_COUNT(RES_RECORD.OBJECT_ID,RES_RECORD.OBJECT_TYPE_ID,P_MASTER_ACCESS,P_USER_ID),
            RES_RECORD.OBJECT_ID,
            RES_RECORD.OBJECT_TYPE_ID,
            RES_RECORD.ASSOCIATION_ID,
            RES_RECORD.OBJECT_NAME,
            RES_RECORD.FORWARD_TITLE,
            RES_RECORD.REVERSE_TITLE,
            RES_RECORD.RM_ID,
            RES_RECORD.OBJECT_PATH,
            RES_RECORD.OBJECT_DEFINITION,
            RES_RECORD.OBJECT_DESCRIPTION,
            RES_RECORD.ENTITY_COLOR,
            RES_RECORD.DISPLAY_COLOR,
            RES_RECORD.DISPLAY_TYPE,
            RES_RECORD.OBJECT_TITLE,
            RES_RECORD.SDI_ENABLED,
            RES_RECORD.SDI_FLAG,
            RES_RECORD.SDI_DESCRIPTION,
            RES_RECORD.SDI_CLASS_ID,
            RES_RECORD.SDI_CLASS_NAME,
            RES_RECORD.OBJECT_LOGICAL_NAME,
            RES_RECORD.OBJECT_EXPANDED_LOGICAL_NAME));
        END;
    END LOOP RES_RECORD;
ELSE 
  FOR RES_RECORD IN (SELECT * FROM TABLE(ALL_MMAP_OBJ_TABL_RELS))
      LOOP
        BEGIN
            PIPE ROW(MINDMAP_OBJECT(
            RES_RECORD.ROOT_CAT_GROUP,
            RES_RECORD.CAT_ID,
            0,
            RES_RECORD.OBJECT_ID,
            RES_RECORD.OBJECT_TYPE_ID,
            RES_RECORD.ASSOCIATION_ID,
            RES_RECORD.OBJECT_NAME,
            RES_RECORD.FORWARD_TITLE,
            RES_RECORD.REVERSE_TITLE,
            RES_RECORD.RM_ID,
            RES_RECORD.OBJECT_PATH,
            RES_RECORD.OBJECT_DEFINITION,
            RES_RECORD.OBJECT_DESCRIPTION,
            RES_RECORD.ENTITY_COLOR,
            RES_RECORD.DISPLAY_COLOR,
            RES_RECORD.DISPLAY_TYPE,
            RES_RECORD.OBJECT_TITLE,
            RES_RECORD.SDI_ENABLED,
            RES_RECORD.SDI_FLAG,
            RES_RECORD.SDI_DESCRIPTION,
            RES_RECORD.SDI_CLASS_ID,
            RES_RECORD.SDI_CLASS_NAME,
            RES_RECORD.OBJECT_LOGICAL_NAME,
            RES_RECORD.OBJECT_EXPANDED_LOGICAL_NAME));
        END;
    END LOOP RES_RECORD;
    END IF;
     -- Collecting all object results <--
    RETURN;
END FN_GET_RELSHIP_MINDMAP;
/
DECLARE
   COLUMNCHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO COLUMNCHECKERFLAG FROM ALL_TAB_COLUMNS WHERE  OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME = UPPER('SYSTEM_TABLE_METADATA') AND COLUMN_NAME=UPPER('SCHEMA_NAME');
   IF COLUMNCHECKERFLAG = 0 THEN
    EXECUTE IMMEDIATE 'ALTER TABLE SYSTEM_TABLE_METADATA ADD SCHEMA_NAME VARCHAR2(250) NULL';
    EXECUTE IMMEDIATE 'MERGE INTO SYSTEM_TABLE_METADATA T USING
                        (SELECT STM_ID, TABLE_NAME,
                            CASE
                                WHEN TABLE_NAME LIKE ''.%'' THEN ''[No Schema]''
                                WHEN TABLE_NAME LIKE ''%.%'' THEN SUBSTR(TABLE_NAME, 1, INSTR(TABLE_NAME, ''.'', 1) - 1)
                                ELSE ''[No Schema]''
                            END
                            AS SCHEMA_NAME, 
                            E.DATABASE_TYPE FROM SYSTEM_TABLE_METADATA STM JOIN SYS_CON_ENVIRONMENTS E ON E.SCE_ID = STM.SCE_ID
                            AND (E.DATABASE_TYPE IN (''SqlServer'', ''Oracle'', ''MapR'', ''Hortonworks'', ''Cloudera'', ''DB2'', ''Greenplum'', ''SqlServerWindows'', ''Teradata'', ''Vertica'', ''Sybase'', ''Netezza'', ''AmazonRedshift''))) 
                            S ON (T.STM_ID = S.STM_ID) 
                        WHEN MATCHED THEN UPDATE SET T.SCHEMA_NAME = S.SCHEMA_NAME';
    EXECUTE IMMEDIATE 'MERGE INTO SYSTEM_TABLE_METADATA T USING
                        (SELECT STM_ID, TABLE_NAME,
                            CASE
                                WHEN LENGTH(TABLE_NAME) - LENGTH(replace(TABLE_NAME, ''.'', '''')) = 2 THEN SUBSTR(TABLE_NAME, 0, INSTR(TABLE_NAME, ''.'', 1, 2)-1)
                                ELSE ''[No Schema]''
                            END AS SCHEMA_NAME, 
                        E.DATABASE_TYPE
                        FROM SYSTEM_TABLE_METADATA STM JOIN SYS_CON_ENVIRONMENTS E ON E.SCE_ID = STM.SCE_ID AND E.DATABASE_TYPE= ''Snowflake'') S ON (T.STM_ID = S.STM_ID)
                        WHEN MATCHED THEN UPDATE SET T.SCHEMA_NAME = S.SCHEMA_NAME';
   END IF;
END;
/
CREATE OR REPLACE FORCE VIEW "VALID_SYSTEM_TABLE_METADATA" AS
SELECT STM.* FROM SYSTEM_TABLE_METADATA STM JOIN ACTIVE_SYS_CON_ENVIRONMENTS SCS ON STM.SCE_ID = SCS.SCE_ID WHERE STM.VALID = 1 OR STM.VALID IS NULL
/
DECLARE
   TABLECHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO TABLECHECKERFLAG FROM ALL_OBJECTS WHERE OWNER = sys_context('userenv', 'current_schema') AND OBJECT_TYPE = 'FUNCTION' AND OBJECT_NAME = UPPER('FN_HAS_BGM_OBJECT_ACCESS');
   IF TABLECHECKERFLAG = 1 THEN
      EXECUTE IMMEDIATE 'DROP FUNCTION FN_HAS_BGM_OBJECT_ACCESS';
   END IF;
END;
/

create or replace FUNCTION FN_HAS_BGM_OBJECT_ACCESS(
    F_OBJECT_ID      IN NUMBER,
    F_OBJECT_TYPE_ID IN NUMBER,
	F_USER_ID 		 IN VARCHAR2)
  RETURN NUMBER
AS
	F_OBJECT_ACCESS NUMBER(1) := 0;
	F_ASSIGNED_OBJECT_ID NUMBER;
	F_ASSIGNED_OBJECT_TYPE_ID NUMBER;
	F_SCOPE_OBJECT_TYPE_ID NUMBER;
    F_CATEGORY_CNT NUMBER := 0;
    F_ASSIGNMENTS_CNT NUMBER := 0;
BEGIN
	SELECT OBJECT_TYPE_ID INTO F_SCOPE_OBJECT_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE = 'ADS_USER';

    BEGIN
        SELECT OBJECT_ID, OBJECT_TYPE_ID INTO F_ASSIGNED_OBJECT_ID, F_ASSIGNED_OBJECT_TYPE_ID FROM TABLE(FN_GET_OBJECT_HIR(F_OBJECT_ID, F_OBJECT_TYPE_ID, null)) where OBJECT_ID <> -1 ORDER BY OBJECT_ORDER DESC FETCH FIRST 1 ROW ONLY;
    EXCEPTION WHEN NO_DATA_FOUND THEN
        F_OBJECT_ACCESS := 0;
    END;

    IF F_ASSIGNED_OBJECT_ID IS NULL THEN
		BEGIN

            SELECT COUNT(*) INTO F_CATEGORY_CNT FROM BG_CATEGORIES WHERE CATEGORY_ID = F_OBJECT_ID AND OBJECT_TYPE_ID = F_OBJECT_TYPE_ID AND PARENT_CATEGORY_ID = -1;

			IF F_CATEGORY_CNT = 1 THEN
				BEGIN
					F_ASSIGNED_OBJECT_ID := F_OBJECT_ID;
					F_ASSIGNED_OBJECT_TYPE_ID := F_OBJECT_TYPE_ID;
				END;
            END IF;
		END;
    END IF;

    IF F_ASSIGNED_OBJECT_ID IS NOT NULL THEN
		BEGIN
            SELECT COUNT(*) INTO F_ASSIGNMENTS_CNT FROM ADS_OBJECT_TO_OBJECT_SCOPE WHERE OBJECT_ID = F_ASSIGNED_OBJECT_ID AND OBJECT_TYPE_ID = F_ASSIGNED_OBJECT_TYPE_ID AND SCOPE_OBJECT_ID = F_USER_ID AND SCOPE_OBJECT_TYPE_ID = F_SCOPE_OBJECT_TYPE_ID;
			IF F_ASSIGNMENTS_CNT > 0 THEN
				BEGIN
					F_OBJECT_ACCESS := 1;
				END;
            END IF;
		END;
    END IF;

	RETURN CASE WHEN F_OBJECT_ACCESS IS NULL THEN 0 ELSE F_OBJECT_ACCESS END;
END FN_HAS_BGM_OBJECT_ACCESS;
/
DECLARE
TABLECHECKERFLAG INT;
BEGIN
    SELECT COUNT(*) INTO TABLECHECKERFLAG FROM ADS_KEY_VALUE_OBJECTS WHERE  OBJECT_TYPE = 'ADS_SECURITY_ROLE';
    IF TABLECHECKERFLAG = 0 THEN
        EXECUTE IMMEDIATE 'INSERT INTO ADS_KEY_VALUE_OBJECTS (OBJECT_TYPE,OBJECT_TABLE,OBJECT_TABLE_COLUMN,OBJECT_PARENT_TYPE,OBJECT_PARENT_COLUMN_ID,OBJECT_LEVEL,MODULE_KEY,SYSTEM_BASED,OBJECT_TITLE) VALUES (''ADS_SECURITY_ROLE'',''SECURITY_ROLES'','''','''','''',''1'',''com.ads.mm.permission.generic'',''1'',''Security Roles'')';
    END IF;
END;
/
DECLARE
TABLECHECKERFLAG INT;
BEGIN
    SELECT COUNT(*) INTO TABLECHECKERFLAG FROM ADS_KEY_VALUE_OBJECTS WHERE  OBJECT_TYPE = 'BGM_CUSTOM';
    IF TABLECHECKERFLAG = 0 THEN
        EXECUTE IMMEDIATE 'INSERT INTO ADS_KEY_VALUE_OBJECTS (OBJECT_TYPE,OBJECT_TABLE,OBJECT_TABLE_COLUMN,OBJECT_PARENT_TYPE,OBJECT_PARENT_COLUMN_ID,OBJECT_LEVEL,MODULE_KEY,SYSTEM_BASED,OBJECT_TITLE) VALUES (''BGM_CUSTOM_CATALOGS'','''','''','''','''',''0'',''com.ads.mm.permission.bgm'',''1'',''Custom Objects'')';
        EXECUTE IMMEDIATE 'INSERT INTO ADS_KEY_VALUE_OBJECTS (OBJECT_TYPE,OBJECT_TABLE,OBJECT_TABLE_COLUMN,OBJECT_PARENT_TYPE,OBJECT_PARENT_COLUMN_ID,OBJECT_LEVEL,MODULE_KEY,SYSTEM_BASED,OBJECT_TITLE) VALUES (''BGM_CUSTOM_CATALOG'',''BG_CATEGORIES'',''OBJECT_TYPE_ID'',''BGM_CUSTOM_CATALOGS'','''',''1'',''com.ads.mm.permission.bgm'',''1'',''Catalog'')';
        EXECUTE IMMEDIATE 'INSERT INTO ADS_KEY_VALUE_OBJECTS (OBJECT_TYPE,OBJECT_TABLE,OBJECT_TABLE_COLUMN,OBJECT_PARENT_TYPE,OBJECT_PARENT_COLUMN_ID,OBJECT_LEVEL,MODULE_KEY,SYSTEM_BASED,OBJECT_TITLE) VALUES (''BGM_CUSTOM'',''BG_CUSTOM_OBJECTS'',''ID'',''BGM_CUSTOM_CATALOG'','''',''2'',''com.ads.mm.permission.bgm'',''1'',''Custom Object'')';
    END IF;
END;
/
CREATE OR REPLACE FUNCTION "FN_GET_OBJECT_ROLES_BY_USER" (
    IN_OBJECT_ID      IN NUMBER,
    IN_OBJECT_TYPE_ID IN NUMBER,
	F_USER_ID 		 IN VARCHAR2)
  RETURN SYS.ODCIVARCHAR2LIST DETERMINISTIC
AS
	TT_OBJECT_ROLES_BY_USER       SYS.ODCIVARCHAR2LIST := SYS.ODCIVARCHAR2LIST();
    F_OBJECT_ID      NUMBER := IN_OBJECT_ID;
    F_OBJECT_TYPE_ID NUMBER := IN_OBJECT_TYPE_ID;
	F_ASSIGNED_OBJECT_ID NUMBER;
	F_ASSIGNED_OBJECT_TYPE_ID NUMBER;
	F_ASSIGNED_OBJECT_TYPE_MODULE VARCHAR(128);
	F_OBJECT_TYPE VARCHAR(500);
	F_USER_SCOPE_OBJECT_TYPE_ID NUMBER;
	F_ROLE_SCOPE_OBJECT_TYPE_ID NUMBER;
    F_OBJECT_CNT NUMBER := 0;
	F_USERS_CNT NUMBER := 0;
	F_ROLES_CNT NUMBER := 0;
    F_ASSIGNMENTS_CNT NUMBER := 0;
BEGIN
	SELECT MODULE_KEY INTO F_ASSIGNED_OBJECT_TYPE_MODULE FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE_ID = F_OBJECT_TYPE_ID;
	SELECT OBJECT_TYPE_ID INTO F_USER_SCOPE_OBJECT_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE = 'ADS_USER';
	SELECT OBJECT_TYPE_ID INTO F_ROLE_SCOPE_OBJECT_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE = 'ADS_SECURITY_ROLE';
	SELECT OBJECT_TYPE INTO F_OBJECT_TYPE FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE_ID = F_OBJECT_TYPE_ID;

        IF F_ASSIGNED_OBJECT_TYPE_MODULE = 'com.ads.mm.permission.tm' THEN
        BEGIN
                SELECT OBJECT_ID, OBJECT_TYPE_ID INTO F_OBJECT_ID, F_OBJECT_TYPE_ID FROM TCM_OBJECT_TESTCASE where TESTCASE_ID = F_OBJECT_ID;
                SELECT MODULE_KEY INTO F_ASSIGNED_OBJECT_TYPE_MODULE FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE_ID = F_OBJECT_TYPE_ID;
                SELECT OBJECT_TYPE INTO F_OBJECT_TYPE FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE_ID = F_OBJECT_TYPE_ID;
           
        END;
        END IF;
	IF F_ASSIGNED_OBJECT_TYPE_MODULE = 'com.ads.mm.permission.bgm' THEN
		BEGIN

			BEGIN
				SELECT OBJECT_ID, OBJECT_TYPE_ID INTO F_ASSIGNED_OBJECT_ID, F_ASSIGNED_OBJECT_TYPE_ID FROM TABLE(FN_GET_OBJECT_HIR(F_OBJECT_ID, F_OBJECT_TYPE_ID, null)) where OBJECT_ID <> -1 ORDER BY OBJECT_ORDER DESC FETCH FIRST 1 ROW ONLY;
			EXCEPTION WHEN NO_DATA_FOUND THEN
				F_ASSIGNED_OBJECT_ID := NULL;
			END;

			IF F_ASSIGNED_OBJECT_ID IS NULL THEN
				BEGIN

					SELECT COUNT(*) INTO F_OBJECT_CNT FROM BG_CATEGORIES WHERE CATEGORY_ID = F_OBJECT_ID AND OBJECT_TYPE_ID = F_OBJECT_TYPE_ID AND PARENT_CATEGORY_ID = -1;

					IF F_OBJECT_CNT = 1 THEN
						BEGIN
							F_ASSIGNED_OBJECT_ID := F_OBJECT_ID;
							F_ASSIGNED_OBJECT_TYPE_ID := F_OBJECT_TYPE_ID;
						END;
					END IF;
				END;
			END IF;
		END;
	ELSIF F_ASSIGNED_OBJECT_TYPE_MODULE = 'com.ads.mm.permission.sm' THEN
            BEGIN

                IF F_OBJECT_TYPE = 'SM_ENVIRONMENT' THEN
                        BEGIN
                                F_ASSIGNED_OBJECT_ID := F_OBJECT_ID;
                        EXCEPTION WHEN NO_DATA_FOUND THEN
                                F_ASSIGNED_OBJECT_ID := NULL;
                        END;
                ELSIF F_OBJECT_TYPE = 'SM_TABLE' THEN
                        BEGIN
                                SELECT SCE_ID INTO F_ASSIGNED_OBJECT_ID FROM SYSTEM_TABLE_METADATA WHERE STM_ID = F_OBJECT_ID;
                        EXCEPTION WHEN NO_DATA_FOUND THEN
                                F_ASSIGNED_OBJECT_ID := NULL;
                        END;
                ELSIF F_OBJECT_TYPE = 'SM_COLUMN' THEN
                        BEGIN
                                SELECT SCE_ID INTO F_ASSIGNED_OBJECT_ID FROM SYSTEM_TABLE_COLUMNS_METADATA WHERE STCM_ID = F_OBJECT_ID;
                        EXCEPTION WHEN NO_DATA_FOUND THEN
                                F_ASSIGNED_OBJECT_ID := NULL;
                        END;
            END IF;

                BEGIN
                        SELECT OBJECT_TYPE_ID INTO F_ASSIGNED_OBJECT_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE = 'SM_ENVIRONMENT'; 
                EXCEPTION WHEN NO_DATA_FOUND THEN
                        F_ASSIGNED_OBJECT_TYPE_ID := NULL;
                END;
            END;
	ELSIF F_ASSIGNED_OBJECT_TYPE_MODULE = 'com.ads.mm.permission.mm' THEN
		BEGIN

			BEGIN
				SELECT OBJECT_ID, OBJECT_TYPE_ID INTO F_ASSIGNED_OBJECT_ID, F_ASSIGNED_OBJECT_TYPE_ID FROM TABLE(FN_GET_OBJECT_HIR(F_OBJECT_ID, F_OBJECT_TYPE_ID, null)) where OBJECT_ID <> -1 ORDER BY OBJECT_ORDER DESC FETCH FIRST 1 ROW ONLY;
			EXCEPTION WHEN NO_DATA_FOUND THEN
				F_ASSIGNED_OBJECT_ID := NULL;
			END;

			IF F_ASSIGNED_OBJECT_ID IS NULL THEN
				BEGIN

					SELECT COUNT(*) INTO F_OBJECT_CNT FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE_ID = F_OBJECT_TYPE_ID AND OBJECT_TYPE = 'MM_PROJECT';

					IF F_OBJECT_CNT = 1 THEN
						BEGIN
							F_ASSIGNED_OBJECT_ID := F_OBJECT_ID;
							F_ASSIGNED_OBJECT_TYPE_ID := F_OBJECT_TYPE_ID;
						END;
					END IF;
				END;
			END IF;
		END;
	END IF;

	IF F_ASSIGNED_OBJECT_ID IS NOT NULL THEN
		BEGIN
			IF F_ASSIGNED_OBJECT_TYPE_MODULE = 'com.ads.mm.permission.bgm' OR F_ASSIGNED_OBJECT_TYPE_MODULE = 'com.ads.mm.permission.sm' THEN
				BEGIN

					SELECT COUNT(*) INTO F_USERS_CNT FROM ADS_OBJECT_TO_OBJECT_SCOPE WHERE OBJECT_ID = F_ASSIGNED_OBJECT_ID AND OBJECT_TYPE_ID = F_ASSIGNED_OBJECT_TYPE_ID AND SCOPE_OBJECT_ID = F_USER_ID AND SCOPE_OBJECT_TYPE_ID = F_USER_SCOPE_OBJECT_TYPE_ID;

					IF F_USERS_CNT = 0 THEN
						BEGIN
							SELECT COUNT(*) INTO F_ROLES_CNT FROM ADS_OBJECT_TO_OBJECT_SCOPE WHERE OBJECT_ID = F_ASSIGNED_OBJECT_ID AND OBJECT_TYPE_ID = F_ASSIGNED_OBJECT_TYPE_ID AND SCOPE_OBJECT_ID IN (SELECT ROLE_ID FROM USER_ASSIGNED_ROLES WHERE USER_ID = F_USER_ID) AND SCOPE_OBJECT_TYPE_ID = F_ROLE_SCOPE_OBJECT_TYPE_ID;
						END;
					END IF;


					IF F_USERS_CNT = 1 THEN
						BEGIN
							SELECT ROLE_ID bulk collect into TT_OBJECT_ROLES_BY_USER FROM USER_ASSIGNED_ROLES WHERE USER_ID = F_USER_ID;
						END;
					ELSIF F_ROLES_CNT <> 0 THEN
						BEGIN
							SELECT SCOPE_OBJECT_ID bulk collect into TT_OBJECT_ROLES_BY_USER FROM ADS_OBJECT_TO_OBJECT_SCOPE WHERE OBJECT_ID = F_ASSIGNED_OBJECT_ID AND OBJECT_TYPE_ID = F_ASSIGNED_OBJECT_TYPE_ID AND SCOPE_OBJECT_ID IN (SELECT ROLE_ID FROM USER_ASSIGNED_ROLES WHERE USER_ID = F_USER_ID) AND SCOPE_OBJECT_TYPE_ID = F_ROLE_SCOPE_OBJECT_TYPE_ID;
						END;
					END IF;
				END;
			ELSIF F_ASSIGNED_OBJECT_TYPE_MODULE = 'com.ads.mm.permission.mm' THEN
                BEGIN
    
                    SELECT COUNT(*) INTO F_USERS_CNT FROM PROJECT_RESOURCES WHERE PROJ_ID = F_ASSIGNED_OBJECT_ID AND USER_ID = F_USER_ID;
    
                    IF F_USERS_CNT = 0 THEN
                        BEGIN
                            SELECT COUNT(*) INTO F_ROLES_CNT FROM ADS_OBJECT_TO_OBJECT_SCOPE WHERE OBJECT_ID = F_ASSIGNED_OBJECT_ID AND OBJECT_TYPE_ID = F_ASSIGNED_OBJECT_TYPE_ID AND SCOPE_OBJECT_ID IN (SELECT ROLE_ID FROM USER_ASSIGNED_ROLES WHERE USER_ID = F_USER_ID) AND SCOPE_OBJECT_TYPE_ID = F_ROLE_SCOPE_OBJECT_TYPE_ID;
                        END;
                    END IF;
    
    
                    IF F_USERS_CNT = 1 THEN
                        BEGIN
                            SELECT ROLE_ID bulk collect into TT_OBJECT_ROLES_BY_USER FROM USER_ASSIGNED_ROLES WHERE USER_ID = F_USER_ID;
                        END;
                    ELSIF F_ROLES_CNT <> 0 THEN
                        BEGIN
                            SELECT SCOPE_OBJECT_ID bulk collect into TT_OBJECT_ROLES_BY_USER FROM ADS_OBJECT_TO_OBJECT_SCOPE WHERE OBJECT_ID = F_ASSIGNED_OBJECT_ID AND OBJECT_TYPE_ID = F_ASSIGNED_OBJECT_TYPE_ID AND SCOPE_OBJECT_ID IN (SELECT ROLE_ID FROM USER_ASSIGNED_ROLES WHERE USER_ID = F_USER_ID) AND SCOPE_OBJECT_TYPE_ID = F_ROLE_SCOPE_OBJECT_TYPE_ID;
                        END;
                    END IF;
    
                END;
            END IF;
		END;
	END IF;

    RETURN TT_OBJECT_ROLES_BY_USER;
END FN_GET_OBJECT_ROLES_BY_USER;
/

DECLARE
   TABLECHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO TABLECHECKERFLAG FROM all_VIEWS WHERE OWNER = sys_context('userenv', 'current_schema') AND VIEW_NAME = UPPER('PROJECT_ASSIGNMENTS_V');
   IF TABLECHECKERFLAG = 1 THEN
      EXECUTE IMMEDIATE 'DROP VIEW PROJECT_ASSIGNMENTS_V';
   END IF;
END;
/

CREATE OR REPLACE FORCE VIEW PROJECT_ASSIGNMENTS_V AS
SELECT OBJECT_ID, P.PROJ_NAME OBJECT_NAME, ASSIGNMENT_ID
FROM PROJECT P
JOIN (
SELECT PROJ_ID OBJECT_ID, USER_ID ASSIGNMENT_ID
FROM PROJECT_RESOURCES 
UNION
SELECT CAST(OBJECT_ID AS number), UAR.USER_ID ASSIGNMENT_ID
FROM ADS_OBJECT_TO_OBJECT_SCOPE AOTOS
JOIN USER_ASSIGNED_ROLES UAR
ON UAR.ROLE_ID = AOTOS.SCOPE_OBJECT_ID
WHERE AOTOS.OBJECT_TYPE_ID = (SELECT OBJECT_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE = 'MM_PROJECT')
AND AOTOS.SCOPE_OBJECT_TYPE_ID = (SELECT OBJECT_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE = 'ADS_SECURITY_ROLE')) PROJS
ON PROJS.OBJECT_ID = P.PROJ_ID;
/

DECLARE
   TABLECHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO TABLECHECKERFLAG FROM "APP_PREFERENCES" WHERE PREFERENCE_NAME ='SEND_EMAIL_ON_SDI_BULK_UPDATE_MESSAGE';
   IF TABLECHECKERFLAG = 0 THEN
    INSERT INTO APP_PREFERENCES(PREFERENCE_NAME,PREFERENCE_VALUE) VALUES ('SEND_EMAIL_ON_SDI_BULK_UPDATE_SUBJECT','Sensitive Data Indicator Email Subject - DO NOT REPLY');
    INSERT INTO APP_PREFERENCES(PREFERENCE_NAME,PREFERENCE_VALUE) VALUES ('SEND_EMAIL_ON_SDI_BULK_UPDATE_MESSAGE','Hi,<br><br>This is a system generated email notification.<br><br><b>@executionMessage@</b></br>');
    INSERT INTO APP_PREFERENCES(PREFERENCE_NAME,PREFERENCE_VALUE) VALUES ('SEND_EMAIL_ON_SDI_BULK_UPDATE','true');
    END IF;
END;
/
DECLARE
   TABLECHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO TABLECHECKERFLAG FROM "APP_PREFERENCES" WHERE PREFERENCE_NAME ='SEND_EMAIL_ON_IMPORT_BUSINESS_OBJECTS_MESSAGE';
   IF TABLECHECKERFLAG = 0 THEN
    INSERT INTO APP_PREFERENCES(PREFERENCE_NAME,PREFERENCE_VALUE) VALUES ('SEND_EMAIL_ON_IMPORT_BUSINESS_OBJECTS_SUBJECT','IMPORTING BUSINESS OBJECTS Email Subject - DO NOT REPLY');
    INSERT INTO APP_PREFERENCES(PREFERENCE_NAME,PREFERENCE_VALUE) VALUES ('SEND_EMAIL_ON_IMPORT_BUSINESS_OBJECTS_MESSAGE','Hi,<br><br>This is a system generated email notification.<br><br><b>@executionMessage@</b></br>');
    INSERT INTO APP_PREFERENCES(PREFERENCE_NAME,PREFERENCE_VALUE) VALUES ('SEND_EMAIL_ON_IMPORT_BUSINESS_OBJECTS','true');
    END IF;
END;
/
DECLARE
  TYPECHECKERFLAG INT;
BEGIN
  SELECT COUNT(*)
  INTO TYPECHECKERFLAG
  FROM ALL_OBJECTS
  WHERE OWNER            = sys_context('userenv', 'current_schema')
  AND UPPER(OBJECT_NAME) = 'SDI_BULK_UPDATE_LINEAGE_OBJECT'
  AND UPPER(OBJECT_TYPE) ='TYPE';
  IF TYPECHECKERFLAG     = 0 THEN
    EXECUTE IMMEDIATE 'CREATE TYPE SDI_BULK_UPDATE_LINEAGE_OBJECT AS OBJECT (SYSTEM_ID NUMBER, SCE_ID NUMBER, STM_ID NUMBER, STCM_ID NUMBER,   SYSTEM_NAME VARCHAR2(100), SYSTEM_ENVIRONMENT_NAME VARCHAR2(250),   TABLE_NAME VARCHAR2(255),COLUMN_NAME VARCHAR2(255),   SDI_FLAG CHAR(1),SDI_DESCRIPTION VARCHAR2(4000),SDI_CLASS_NAME VARCHAR2(255),OBJECT_LOGICAL_NAME VARCHAR2(300),OBJECT_EXPANDED_LOGICAL_NAME VARCHAR2(4000),MD_OBJECT_COMMENTS VARCHAR2(4000),MD_OBJECT_DEFINITION VARCHAR2(4000))';
  END IF;
END;
/
DECLARE
  TYPECHECKERFLAG INT;
BEGIN
  SELECT COUNT(*)
  INTO TYPECHECKERFLAG
  FROM ALL_OBJECTS
  WHERE OWNER            = sys_context('userenv', 'current_schema')
  AND UPPER(OBJECT_NAME) = 'SDI_BULK_UPDATE_LING_OBJ_TBL'
  AND UPPER(OBJECT_TYPE) ='TYPE';
  IF TYPECHECKERFLAG     = 0 THEN
    EXECUTE IMMEDIATE 'CREATE OR REPLACE TYPE "SDI_BULK_UPDATE_LING_OBJ_TBL" AS TABLE OF "SDI_BULK_UPDATE_LINEAGE_OBJECT"';
  END IF;
END;
/
DECLARE
   PROCEDURECHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO PROCEDURECHECKERFLAG FROM ALL_OBJECTS WHERE OWNER = sys_context('userenv', 'current_schema') AND OBJECT_TYPE = 'PROCEDURE' AND OBJECT_NAME = UPPER('PROC_SDI_LINEAGE_BULK_UPDATE');
   IF PROCEDURECHECKERFLAG = 1 THEN
      EXECUTE IMMEDIATE 'DROP PROCEDURE PROC_SDI_LINEAGE_BULK_UPDATE';
   END IF;
END;
/
create or replace PROCEDURE PROC_SDI_LINEAGE_BULK_UPDATE(
    P_LINEAGE_KEY             IN VARCHAR2,
    P_SDI_CLASS_ID            IN NUMBER,
    P_SDI_FLAG                IN VARCHAR2,
    P_SDI_DESCRIPTION         IN VARCHAR2,
    P_LAST_MODIFIED_BY        IN VARCHAR2,
    P_LAST_MODIFIED_DATE_TIME IN TIMESTAMP,
    P_IS_SYSTEM               IN CHAR,
    P_IS_ENVIRONMENT          IN CHAR,
    P_IS_TABLE                IN CHAR,
    P_DYNAMIC_WHERE           IN VARCHAR2,
    P_MASTER_ACCESS           IN NUMBER)
AS
  DYNAMIC_SQL  VARCHAR2(4000);
  USER_OBJ_TYPE_ID VARCHAR2(20);
  ROLE_OBJ_TYPE_ID VARCHAR2(20);
  LINEAGE_RESULTS SDI_BULK_UPDATE_LING_OBJ_TBL := SDI_BULK_UPDATE_LING_OBJ_TBL();
  SDI_BULK_UPDATE_OBJECT_TBL SDI_BULK_UPDATE_LING_OBJ_TBL := SDI_BULK_UPDATE_LING_OBJ_TBL();
BEGIN
SELECT OBJECT_TYPE_ID INTO USER_OBJ_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE = 'ADS_USER';
SELECT OBJECT_TYPE_ID INTO ROLE_OBJ_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE = 'ADS_SECURITY_ROLE';
WITH results AS
  ( SELECT DISTINCT f.src_system_name,
    f.src_system_environment_name,
    f.src_table_name,
    f.src_column_name,
    f.tgt_system_name,
    f.tgt_system_environment_name,
    f.tgt_table_name,
    f.tgt_column_name
  FROM TABLE ( Fn_get_gen_forward_lineage(P_LINEAGE_KEY, NULL, NULL) ) f
  INNER JOIN appended_map_spec_records a
  ON f.map_seq_id      = a.map_seq_id
  AND Upper(f.src_key) = Upper(a.src_system_name
    || ':'
    || a.src_system_environment_name
    || ':'
    || FN_GET_DECLPATH_FROM_XPATH(a.src_xpath, a.src_table_name, a.src_column_name,  'COLUMN'))
  AND Upper(f.tgt_key) = Upper(a.tgt_system_name
    || ':'
    || a.tgt_system_environment_name
    || ':'
    ||  FN_GET_DECLPATH_FROM_XPATH(a.tgt_xpath, a.tgt_table_name, a.tgt_column_name,  'COLUMN'))
  INNER JOIN mapping_specification ms
  ON a.map_seq_id = ms.map_seq_id
  INNER JOIN mapping_details md
  ON ms.map_id      = md.map_id
  AND ( md.status   = 'Active'
  OR md.ispublished = 'Y' )
  UNION
  SELECT DISTINCT f.src_system_name,
    f.src_system_environment_name,
    f.src_table_name,
    f.src_column_name,
    f.tgt_system_name,
    f.tgt_system_environment_name,
    f.tgt_table_name,
    f.tgt_column_name
  FROM TABLE ( Fn_get_gen_reverse_lineage(P_LINEAGE_KEY, NULL, NULL) ) f
  INNER JOIN appended_map_spec_records a
  ON f.map_seq_id      = a.map_seq_id
  AND Upper(f.src_key) = Upper(a.src_system_name
    || ':'
    || a.src_system_environment_name
    || ':'
    || FN_GET_DECLPATH_FROM_XPATH(a.src_xpath, a.src_table_name, a.src_column_name,  'COLUMN'))
  AND Upper(f.tgt_key) = Upper(a.tgt_system_name
    || ':'
    || a.tgt_system_environment_name
    || ':'
    ||  FN_GET_DECLPATH_FROM_XPATH(a.tgt_xpath, a.tgt_table_name, a.tgt_column_name,  'COLUMN'))
  INNER JOIN mapping_specification ms
  ON a.map_seq_id = ms.map_seq_id
  INNER JOIN mapping_details md
  ON ms.map_id      = md.map_id
  AND ( md.status   = 'Active'
  OR md.ispublished = 'Y' )
  ),
  lineage AS
  (SELECT src_system_name,
    src_system_environment_name,
    src_table_name,
    src_column_name
  FROM results
  UNION
  SELECT tgt_system_name,
    tgt_system_environment_name,
    tgt_table_name,
    tgt_column_name
  FROM results
  ) ,
  stcmcte AS
  (SELECT SCE.SYSTEM_ID,
    STCM.SCE_ID,
    STCM.STM_ID,
    STCM.STCM_ID,
    SRC_SYSTEM_NAME SYSTEM_NAME,
    SRC_SYSTEM_ENVIRONMENT_NAME SYSTEM_ENVIRONMENT_NAME,
    SRC_TABLE_NAME TABLE_NAME,
    SRC_COLUMN_NAME COLUMN_NAME,
    stcm.SDI_FLAG,
    stcm.SDI_DESCRIPTION,
    sdi.SDI_CLASS_NAME,
    stcm.logical_column_name OBJECT_LOGICAL_NAME,
    stcm.expanded_logical_name OBJECT_EXPANDED_LOGICAL_NAME,
    stcm.column_comments MD_OBJECT_COMMENTS,
    stcm.col_def MD_OBJECT_DEFINITION
  FROM lineage li
  JOIN valid_sys_tbl_col_metadata STCM
  ON ( Upper(stcm.system_env_name) = Upper(li.src_system_environment_name)
  AND Upper(stcm.table_name)       = Upper(li.src_table_name)
  AND Upper(stcm.column_name)      = Upper(li.src_column_name))
  JOIN active_sys_con_environments SCE
  ON Upper(li.src_system_name) = Upper(sce.system_name)
  AND stcm.sce_id       = sce.sce_id
  LEFT JOIN sm_classification_sdi sdi
  ON stcm.sdi_class_id = sdi.sdi_class_id
  WHERE (1=P_MASTER_ACCESS OR sce.sce_id IN (SELECT OBJECT_ID FROM ADS_OBJECT_TO_OBJECT_SCOPE WHERE OBJECT_TYPE_ID = (SELECT OBJECT_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE = 'SM_ENVIRONMENT')
    AND ((SCOPE_OBJECT_TYPE_ID = USER_OBJ_TYPE_ID AND SCOPE_OBJECT_ID = P_LAST_MODIFIED_BY) OR (SCOPE_OBJECT_TYPE_ID = ROLE_OBJ_TYPE_ID AND SCOPE_OBJECT_ID IN (SELECT ROLE_ID FROM USER_ASSIGNED_ROLES WHERE USER_ID = P_LAST_MODIFIED_BY))))))
SELECT SDI_BULK_UPDATE_LINEAGE_OBJECT(SYSTEM_ID,SCE_ID,STM_ID,STCM_ID,SYSTEM_NAME,SYSTEM_ENVIRONMENT_NAME,TABLE_NAME,COLUMN_NAME,SDI_FLAG,SDI_DESCRIPTION,SDI_CLASS_NAME,OBJECT_LOGICAL_NAME,OBJECT_EXPANDED_LOGICAL_NAME,MD_OBJECT_COMMENTS,MD_OBJECT_DEFINITION) BULK COLLECT INTO LINEAGE_RESULTS FROM stcmcte;
DYNAMIC_SQL := 'SELECT SDI_BULK_UPDATE_LINEAGE_OBJECT(SYSTEM_ID,SCE_ID,STM_ID,STCM_ID,SYSTEM_NAME,SYSTEM_ENVIRONMENT_NAME,TABLE_NAME,COLUMN_NAME,SDI_FLAG,SDI_DESCRIPTION,SDI_CLASS_NAME,OBJECT_LOGICAL_NAME,OBJECT_EXPANDED_LOGICAL_NAME,MD_OBJECT_COMMENTS,MD_OBJECT_DEFINITION) FROM TABLE(:1)'||P_DYNAMIC_WHERE;
EXECUTE IMMEDIATE DYNAMIC_SQL BULK COLLECT INTO SDI_BULK_UPDATE_OBJECT_TBL USING LINEAGE_RESULTS;
UPDATE SYSTEM_TABLE_COLUMNS_METADATA
    SET SDI_FLAG            = P_SDI_FLAG,
    SDI_DESCRIPTION         = P_SDI_DESCRIPTION,
    SDI_CLASS_ID            = P_SDI_CLASS_ID,
    LAST_MODIFIED_BY        = P_LAST_MODIFIED_BY,
    LAST_MODIFIED_DATE_TIME = P_LAST_MODIFIED_DATE_TIME
    WHERE STCM_ID IN (SELECT STCM_ID FROM TABLE(SDI_BULK_UPDATE_OBJECT_TBL));
IF (P_IS_SYSTEM = 'Y') THEN
  BEGIN
    UPDATE SYSTEM_DEFINITION_DETAILS
    SET SDI_FLAG            = P_SDI_FLAG,
    SDI_DESCRIPTION         = P_SDI_DESCRIPTION,
    SDI_CLASS_ID            = P_SDI_CLASS_ID,
    LAST_MODIFIED_BY        = P_LAST_MODIFIED_BY,
    LAST_MODIFIED_DATE_TIME = P_LAST_MODIFIED_DATE_TIME
    WHERE SYSTEM_ID IN (SELECT SYSTEM_ID FROM TABLE(SDI_BULK_UPDATE_OBJECT_TBL));
  END;
END IF;
IF(P_IS_ENVIRONMENT = 'Y') THEN
  BEGIN
    UPDATE SYS_CON_ENVIRONMENTS
    SET SDI_FLAG            = P_SDI_FLAG,
    SDI_DESCRIPTION         = P_SDI_DESCRIPTION,
    SDI_CLASS_ID            = P_SDI_CLASS_ID,
    LAST_MODIFIED_BY        = P_LAST_MODIFIED_BY,
    LAST_MODIFIED_DATE_TIME = P_LAST_MODIFIED_DATE_TIME
    WHERE SCE_ID IN (SELECT SCE_ID FROM TABLE(SDI_BULK_UPDATE_OBJECT_TBL));
  END;
END IF;
IF (P_IS_TABLE = 'Y') THEN
  BEGIN
    UPDATE SYSTEM_TABLE_METADATA
    SET SDI_FLAG            = P_SDI_FLAG,
    SDI_DESCRIPTION         = P_SDI_DESCRIPTION,
    SDI_CLASS_ID            = P_SDI_CLASS_ID,
    LAST_MODIFIED_BY        = P_LAST_MODIFIED_BY,
    LAST_MODIFIED_DATE_TIME = P_LAST_MODIFIED_DATE_TIME
    WHERE STM_ID IN(SELECT STM_ID FROM TABLE(SDI_BULK_UPDATE_OBJECT_TBL));
  END;
END IF;
END PROC_SDI_LINEAGE_BULK_UPDATE;
/
DECLARE
   TABLECHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO TABLECHECKERFLAG FROM ALL_TABLES WHERE OWNER = sys_context( 'userenv', 'current_schema' ) AND TABLE_NAME = UPPER('GBL_LOOP_TABLE');
   IF TABLECHECKERFLAG = 0 THEN
   EXECUTE IMMEDIATE 'CREATE GLOBAL TEMPORARY TABLE GBL_LOOP_TABLE (TID NUMBER,OBJ_ID NUMBER,OBJ_TYPE_ID NUMBER ) ON COMMIT DELETE ROWS';
   END IF;
END;
/
DECLARE
  TYPECHECKERFLAG INT;
BEGIN
  SELECT COUNT(*)
  INTO TYPECHECKERFLAG
  FROM ALL_OBJECTS
  WHERE OWNER            = sys_context('userenv', 'current_schema')
  AND UPPER(OBJECT_NAME) = 'OBJ_ID_TYPE_ID_OBJECT'
  AND UPPER(OBJECT_TYPE) ='TYPE';
  IF TYPECHECKERFLAG     = 0 THEN
    EXECUTE IMMEDIATE 'CREATE TYPE OBJ_ID_TYPE_ID_OBJECT AS OBJECT (OBJECT_ID NUMBER, OBJECT_TYPE_ID NUMBER)';
  END IF;
END;
/
DECLARE
  TYPECHECKERFLAG INT;
BEGIN
  SELECT COUNT(*)
  INTO TYPECHECKERFLAG
  FROM ALL_OBJECTS
  WHERE OWNER            = sys_context('userenv', 'current_schema')
  AND UPPER(OBJECT_NAME) = 'OBJ_ID_TYPE_ID_OBJECT_TBL'
  AND UPPER(OBJECT_TYPE) ='TYPE';
  IF TYPECHECKERFLAG     = 0 THEN
    EXECUTE IMMEDIATE 'CREATE OR REPLACE TYPE "OBJ_ID_TYPE_ID_OBJECT_TBL" AS TABLE OF "OBJ_ID_TYPE_ID_OBJECT"';
  END IF;
END;
/
DECLARE
  TYPECHECKERFLAG INT;
BEGIN
  SELECT COUNT(*)
  INTO TYPECHECKERFLAG
  FROM ALL_OBJECTS
  WHERE OWNER            = sys_context('userenv', 'current_schema')
  AND UPPER(OBJECT_NAME) = 'OBJ_ID_PATH_OBJECT'
  AND UPPER(OBJECT_TYPE) ='TYPE';
  IF TYPECHECKERFLAG     = 0 THEN
    EXECUTE IMMEDIATE 'CREATE TYPE OBJ_ID_PATH_OBJECT AS OBJECT (OBJECT_ID NUMBER, OBJECT_PATH VARCHAR2(4000))';
  END IF;
END;
/
DECLARE
  TYPECHECKERFLAG INT;
BEGIN
  SELECT COUNT(*)
  INTO TYPECHECKERFLAG
  FROM ALL_OBJECTS
  WHERE OWNER            = sys_context('userenv', 'current_schema')
  AND UPPER(OBJECT_NAME) = 'OBJ_ID_PATH_OBJECT_TBL'
  AND UPPER(OBJECT_TYPE) ='TYPE';
  IF TYPECHECKERFLAG     = 0 THEN
    EXECUTE IMMEDIATE 'CREATE OR REPLACE TYPE "OBJ_ID_PATH_OBJECT_TBL" AS TABLE OF "OBJ_ID_PATH_OBJECT"';
  END IF;
END;
/
DECLARE
  TYPECHECKERFLAG INT;
BEGIN
  SELECT COUNT(*)
  INTO TYPECHECKERFLAG
  FROM ALL_OBJECTS
  WHERE OWNER            = sys_context('userenv', 'current_schema')
  AND UPPER(OBJECT_NAME) = 'MINDMAP_DATA_OBJECT'
  AND UPPER(OBJECT_TYPE) ='TYPE';
  IF TYPECHECKERFLAG     = 0 THEN
    EXECUTE IMMEDIATE 'CREATE OR REPLACE TYPE MINDMAP_DATA_OBJECT AS OBJECT (OBJECT_NAME VARCHAR2(4000), OBJECT_ID NUMBER, OBJECT_TYPE_ID NUMBER, OBJECT_TYPE VARCHAR2(500), OBJECT_TITLE VARCHAR2(500), OBJECT_COLOR VARCHAR2(100), OBJECT_PATH VARCHAR2(4000), SDI_FLAG CHAR(1),SDI_DESCRIPTION VARCHAR2(4000),SDI_CLASS_ID NUMBER,SDI_CLASS_NAME VARCHAR2(255),SDI_ENABLED CHAR(1),OBJECT_LOGICAL_NAME VARCHAR2(300),OBJECT_EXPANDED_LOGICAL_NAME VARCHAR2(4000),MD_OBJECT_COMMENTS VARCHAR2(4000),MD_OBJECT_DEFINITION VARCHAR2(4000))';
  END IF;
END;
/
DECLARE
  TYPECHECKERFLAG INT;
BEGIN
  SELECT COUNT(*)
  INTO TYPECHECKERFLAG
  FROM ALL_OBJECTS
  WHERE OWNER            = sys_context('userenv', 'current_schema')
  AND UPPER(OBJECT_NAME) = 'MINDMAP_DATA_OBJECT_TABLE'
  AND UPPER(OBJECT_TYPE) ='TYPE';
  IF TYPECHECKERFLAG     = 0 THEN
    EXECUTE IMMEDIATE 'CREATE OR REPLACE TYPE "MINDMAP_DATA_OBJECT_TABLE" AS TABLE OF "MINDMAP_DATA_OBJECT"';
  END IF;
END;
/
DECLARE
  TYPECHECKERFLAG INT;
BEGIN
  SELECT COUNT(*)
  INTO TYPECHECKERFLAG
  FROM ALL_OBJECTS
  WHERE OWNER            = sys_context('userenv', 'current_schema')
  AND UPPER(OBJECT_NAME) = 'OBJ_ID_TYPE_ID_OBJECT'
  AND UPPER(OBJECT_TYPE) ='TYPE';
  IF TYPECHECKERFLAG     = 0 THEN
    EXECUTE IMMEDIATE 'CREATE TYPE OBJ_ID_TYPE_ID_OBJECT AS OBJECT (OBJECT_ID NUMBER, OBJECT_TYPE_ID NUMBER)';
  END IF;
END;
/
DECLARE
  TYPECHECKERFLAG INT;
BEGIN
  SELECT COUNT(*)
  INTO TYPECHECKERFLAG
  FROM ALL_OBJECTS
  WHERE OWNER            = sys_context('userenv', 'current_schema')
  AND UPPER(OBJECT_NAME) = 'OBJ_ID_TYPE_ID_OBJECT_TBL'
  AND UPPER(OBJECT_TYPE) ='TYPE';
  IF TYPECHECKERFLAG     = 0 THEN
    EXECUTE IMMEDIATE 'CREATE OR REPLACE TYPE "OBJ_ID_TYPE_ID_OBJECT_TBL" AS TABLE OF "OBJ_ID_TYPE_ID_OBJECT"';
  END IF;
END;
/
DECLARE
  TYPECHECKERFLAG INT;
BEGIN
  SELECT COUNT(*)
  INTO TYPECHECKERFLAG
  FROM ALL_OBJECTS
  WHERE OWNER            = sys_context('userenv', 'current_schema')
  AND UPPER(OBJECT_NAME) = 'OBJ_ID_PATH_OBJECT'
  AND UPPER(OBJECT_TYPE) ='TYPE';
  IF TYPECHECKERFLAG     = 0 THEN
    EXECUTE IMMEDIATE 'CREATE TYPE OBJ_ID_PATH_OBJECT AS OBJECT (OBJECT_ID NUMBER, OBJECT_PATH VARCHAR2(4000))';
  END IF;
END;
/
DECLARE
  TYPECHECKERFLAG INT;
BEGIN
  SELECT COUNT(*)
  INTO TYPECHECKERFLAG
  FROM ALL_OBJECTS
  WHERE OWNER            = sys_context('userenv', 'current_schema')
  AND UPPER(OBJECT_NAME) = 'OBJ_ID_PATH_OBJECT_TBL'
  AND UPPER(OBJECT_TYPE) ='TYPE';
  IF TYPECHECKERFLAG     = 0 THEN
    EXECUTE IMMEDIATE 'CREATE OR REPLACE TYPE "OBJ_ID_PATH_OBJECT_TBL" AS TABLE OF "OBJ_ID_PATH_OBJECT"';
  END IF;
END;
/
DECLARE
  TYPECHECKERFLAG INT;
BEGIN
  SELECT COUNT(*)
  INTO TYPECHECKERFLAG
  FROM ALL_OBJECTS
  WHERE OWNER            = sys_context('userenv', 'current_schema')
  AND UPPER(OBJECT_NAME) = 'OBJ_ID_TYPE_ID_OBJECT'
  AND UPPER(OBJECT_TYPE) ='TYPE';
  IF TYPECHECKERFLAG     = 0 THEN
    EXECUTE IMMEDIATE 'CREATE TYPE OBJ_ID_TYPE_ID_OBJECT AS OBJECT (OBJECT_ID NUMBER, OBJECT_TYPE_ID NUMBER)';
  END IF;
END;
/
DECLARE
  TYPECHECKERFLAG INT;
BEGIN
  SELECT COUNT(*)
  INTO TYPECHECKERFLAG
  FROM ALL_OBJECTS
  WHERE OWNER            = sys_context('userenv', 'current_schema')
  AND UPPER(OBJECT_NAME) = 'OBJ_ID_TYPE_ID_OBJECT_TBL'
  AND UPPER(OBJECT_TYPE) ='TYPE';
  IF TYPECHECKERFLAG     = 0 THEN
    EXECUTE IMMEDIATE 'CREATE OR REPLACE TYPE "OBJ_ID_TYPE_ID_OBJECT_TBL" AS TABLE OF "OBJ_ID_TYPE_ID_OBJECT"';
  END IF;
END;
/
DECLARE
  TYPECHECKERFLAG INT;
BEGIN
  SELECT COUNT(*)
  INTO TYPECHECKERFLAG
  FROM ALL_OBJECTS
  WHERE OWNER            = sys_context('userenv', 'current_schema')
  AND UPPER(OBJECT_NAME) = 'OBJ_ID_PATH_OBJECT'
  AND UPPER(OBJECT_TYPE) ='TYPE';
  IF TYPECHECKERFLAG     = 0 THEN
    EXECUTE IMMEDIATE 'CREATE TYPE OBJ_ID_PATH_OBJECT AS OBJECT (OBJECT_ID NUMBER, OBJECT_PATH VARCHAR2(4000))';
  END IF;
END;
/
DECLARE
  TYPECHECKERFLAG INT;
BEGIN
  SELECT COUNT(*)
  INTO TYPECHECKERFLAG
  FROM ALL_OBJECTS
  WHERE OWNER            = sys_context('userenv', 'current_schema')
  AND UPPER(OBJECT_NAME) = 'OBJ_ID_PATH_OBJECT_TBL'
  AND UPPER(OBJECT_TYPE) ='TYPE';
  IF TYPECHECKERFLAG     = 0 THEN
    EXECUTE IMMEDIATE 'CREATE OR REPLACE TYPE "OBJ_ID_PATH_OBJECT_TBL" AS TABLE OF "OBJ_ID_PATH_OBJECT"';
  END IF;
END;
/
DECLARE
   FUNCTIONCHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO FUNCTIONCHECKERFLAG FROM ALL_OBJECTS WHERE OWNER = sys_context('userenv', 'current_schema') AND OBJECT_TYPE = 'FUNCTION' AND OBJECT_NAME = UPPER('FN_GET_MINDMAP_ASSOCIATIONS');
   IF FUNCTIONCHECKERFLAG = 1 THEN
      EXECUTE IMMEDIATE 'DROP FUNCTION FN_GET_MINDMAP_ASSOCIATIONS';
   END IF;
END;
/
create or replace FUNCTION FN_GET_MINDMAP_ASSOCIATIONS(
    P_OBJECT_ID IN NUMBER,
    P_OBJECT_TYPE_ID IN  NUMBER,
    P_MASTER_ACCESS IN NUMBER,
    P_USER_ID IN VARCHAR2
) RETURN MINDMAP_DATA_OBJECT_TABLE AS
PRAGMA AUTONOMOUS_TRANSACTION;
MINDMAP_RESULTS   MINDMAP_DATA_OBJECT_TABLE := MINDMAP_DATA_OBJECT_TABLE();
LOOP_TABLE   OBJ_ID_TYPE_ID_OBJECT_TBL := OBJ_ID_TYPE_ID_OBJECT_TBL();
SCEID_TABLE   OBJ_ID_TYPE_ID_OBJECT_TBL := OBJ_ID_TYPE_ID_OBJECT_TBL();
PERMITTED_OBJECTS   OBJ_ID_TYPE_ID_OBJECT_TBL := OBJ_ID_TYPE_ID_OBJECT_TBL();
HIERARCHY_TBL  OBJ_ID_PATH_OBJECT_TBL := OBJ_ID_PATH_OBJECT_TBL();
ROW_COUNT INT;
TOBJ_ID INT;
TOBJ_TYPE_ID INT;
COUNTER NUMBER;
COUNTER2 NUMBER;
USER_OBJ_TYPE_ID VARCHAR2(20);
ROLE_OBJ_TYPE_ID VARCHAR2(20);
SM_SYSTEM_OBJ_TYPE_ID number;
SM_ENVIRONMENT_OBJ_TYPE_ID number;
SM_TABLE_OBJ_TYPE_ID number;
SM_COLUMN_OBJ_TYPE_ID number;
BGM_TERM_OBJ_TYPE_ID number;
BGM_POLICY_OBJ_TYPE_ID number;
BGM_RULE_OBJ_TYPE_ID number;
BEGIN
SELECT OBJECT_TYPE_ID INTO USER_OBJ_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE = 'ADS_USER';
SELECT OBJECT_TYPE_ID INTO ROLE_OBJ_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE = 'ADS_SECURITY_ROLE';
SELECT OBJECT_TYPE_ID INTO SM_SYSTEM_OBJ_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE = 'SM_SYSTEM';
SELECT OBJECT_TYPE_ID INTO SM_ENVIRONMENT_OBJ_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE = 'SM_ENVIRONMENT';
SELECT OBJECT_TYPE_ID INTO SM_TABLE_OBJ_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE = 'SM_TABLE';
SELECT OBJECT_TYPE_ID INTO SM_COLUMN_OBJ_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE = 'SM_COLUMN';
SELECT OBJECT_TYPE_ID INTO BGM_TERM_OBJ_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE = 'BGM_TERM';
SELECT OBJECT_TYPE_ID INTO BGM_POLICY_OBJ_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE = 'BGM_POLICY';
SELECT OBJECT_TYPE_ID INTO BGM_RULE_OBJ_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE = 'BGM_RULE';
SELECT OBJ_ID_PATH_OBJECT(OBJECT_ID, OBJECT_PATH) Bulk Collect 
    INTO HIERARCHY_TBL FROM (SELECT CONNECT_BY_ROOT 
            category_id AS root_cat_group,category_id as OBJECT_ID,ltrim(sys_connect_by_path(category_name, '/'), '/') OBJECT_PATH
            FROM bg_categories bc START WITH parent_category_id = -1 
               AND
               ( 1=P_MASTER_ACCESS OR EXISTS(SELECT 1 FROM ADS_OBJECT_TO_OBJECT_SCOPE aotos where 
                aotos.OBJECT_ID = bc.CATEGORY_ID   and aotos.OBJECT_TYPE_ID = bc.OBJECT_TYPE_ID
            and ((aotos.SCOPE_OBJECT_TYPE_ID = USER_OBJ_TYPE_ID and aotos.SCOPE_OBJECT_ID = P_USER_ID) OR (aotos.SCOPE_OBJECT_TYPE_ID = ROLE_OBJ_TYPE_ID and aotos.SCOPE_OBJECT_ID  IN (SELECT ROLE_ID FROM USER_ASSIGNED_ROLES WHERE USER_ID = P_USER_ID)))))
               CONNECT BY NOCYCLE PRIOR category_id = parent_category_id);

    SELECT OBJ_ID_TYPE_ID_OBJECT(OBJECT_ID, OBJECT_TYPE_ID) Bulk Collect 
    INTO SCEID_TABLE FROM (select SOURCE_OBJECT_ID OBJECT_ID, SM_ENVIRONMENT_OBJ_TYPE_ID OBJECT_TYPE_ID from 
                        ADS_ASSOCIATIONS where SOURCE_OBJECT_TYPE_ID = SM_ENVIRONMENT_OBJ_TYPE_ID  UNION ALL
                        SELECT TARGET_OBJECT_ID OBJECT_ID, SM_ENVIRONMENT_OBJ_TYPE_ID OBJECT_TYPE_ID FROM 
                        ADS_ASSOCIATIONS WHERE TARGET_OBJECT_TYPE_ID = SM_ENVIRONMENT_OBJ_TYPE_ID
                        UNION ALL
                        SELECT SCE_ID OBJECT_ID, SM_ENVIRONMENT_OBJ_TYPE_ID OBJECT_TYPE_ID FROM 
                        system_table_metadata WHERE STM_ID IN(
                        select SOURCE_OBJECT_ID from 
                        ADS_ASSOCIATIONS where SOURCE_OBJECT_TYPE_ID = SM_TABLE_OBJ_TYPE_ID  UNION ALL
                        SELECT TARGET_OBJECT_ID OBJECT_ID FROM 
                        ADS_ASSOCIATIONS WHERE TARGET_OBJECT_TYPE_ID = SM_TABLE_OBJ_TYPE_ID)
                        UNION ALL
                        SELECT SCE_ID OBJECT_ID, SM_ENVIRONMENT_OBJ_TYPE_ID OBJECT_TYPE_ID FROM 
                        system_table_columns_metadata WHERE STCM_ID IN(
                        select SOURCE_OBJECT_ID from 
                        ADS_ASSOCIATIONS where SOURCE_OBJECT_TYPE_ID = SM_COLUMN_OBJ_TYPE_ID  UNION ALL
                        SELECT TARGET_OBJECT_ID OBJECT_ID FROM 
                        ADS_ASSOCIATIONS WHERE TARGET_OBJECT_TYPE_ID = SM_COLUMN_OBJ_TYPE_ID)
                        );

    SELECT OBJ_ID_TYPE_ID_OBJECT(OBJECT_ID, OBJECT_TYPE_ID) Bulk Collect 
    INTO PERMITTED_OBJECTS from(SELECT SCE.SCE_ID OBJECT_ID, SM_ENVIRONMENT_OBJ_TYPE_ID OBJECT_TYPE_ID 
                        FROM (SELECT SCE_ID FROM SYS_CON_ENVIRONMENTS SCE where SCE.SCE_ID IN (select OBJECT_ID FROM TABLE(SCEID_TABLE))) SCE
      where exists (select 1 from ADS_OBJECT_TO_OBJECT_SCOPE AOTS where AOTS.OBJECT_ID = SCE.SCE_ID
			AND AOTS.OBJECT_TYPE_ID = SM_ENVIRONMENT_OBJ_TYPE_ID
			AND ((AOTS.SCOPE_OBJECT_TYPE_ID = USER_OBJ_TYPE_ID AND AOTS.SCOPE_OBJECT_ID = P_USER_ID) OR (AOTS.SCOPE_OBJECT_TYPE_ID = ROLE_OBJ_TYPE_ID AND AOTS.SCOPE_OBJECT_ID IN (SELECT ROLE_ID FROM USER_ASSIGNED_ROLES WHERE USER_ID = P_USER_ID))))
			UNION ALL
			SELECT STM_ID, SM_TABLE_OBJ_TYPE_ID FROM SYSTEM_TABLE_METADATA STM  
			WHERE SCE_ID IN (SELECT SCE_ID FROM ADS_OBJECT_TO_OBJECT_SCOPE AOTS JOIN SYS_CON_ENVIRONMENTS SCE ON AOTS.OBJECT_ID = SCE.SCE_ID
			AND AOTS.OBJECT_TYPE_ID = SM_ENVIRONMENT_OBJ_TYPE_ID
			AND ((AOTS.SCOPE_OBJECT_TYPE_ID = USER_OBJ_TYPE_ID AND AOTS.SCOPE_OBJECT_ID = P_USER_ID) OR (AOTS.SCOPE_OBJECT_TYPE_ID = ROLE_OBJ_TYPE_ID AND AOTS.SCOPE_OBJECT_ID IN (SELECT ROLE_ID FROM USER_ASSIGNED_ROLES WHERE USER_ID = P_USER_ID))))

                         AND SCE_ID IN (select OBJECT_ID FROM TABLE(SCEID_TABLE))

			UNION ALL
			SELECT STCM_ID OBJECT_ID, SM_COLUMN_OBJ_TYPE_ID OBJECT_TYPE_ID FROM SYSTEM_TABLE_COLUMNS_METADATA STCM  
			WHERE SCE_ID IN (SELECT SCE_ID FROM ADS_OBJECT_TO_OBJECT_SCOPE AOTS JOIN SYS_CON_ENVIRONMENTS SCE ON AOTS.OBJECT_ID = SCE.SCE_ID
			AND AOTS.OBJECT_TYPE_ID = SM_ENVIRONMENT_OBJ_TYPE_ID
			AND ((AOTS.SCOPE_OBJECT_TYPE_ID = USER_OBJ_TYPE_ID AND AOTS.SCOPE_OBJECT_ID = P_USER_ID) OR (AOTS.SCOPE_OBJECT_TYPE_ID = ROLE_OBJ_TYPE_ID AND AOTS.SCOPE_OBJECT_ID IN (SELECT ROLE_ID FROM USER_ASSIGNED_ROLES WHERE USER_ID = P_USER_ID))))

                         AND SCE_ID IN (select OBJECT_ID FROM TABLE(SCEID_TABLE))

			UNION ALL
			SELECT BUS_TERM_ID OBJECT_ID, BGM_TERM_OBJ_TYPE_ID OBJECT_TYPE_ID FROM BUSINESS_TERMS BT 
				WHERE	CATEGORY_ID IN (SELECT OBJECT_ID FROM TABLE(HIERARCHY_TBL)) 

                         AND BUS_TERM_ID IN (SELECT SOURCE_OBJECT_ID FROM 
                        ADS_ASSOCIATIONS WHERE SOURCE_OBJECT_TYPE_ID = BGM_TERM_OBJ_TYPE_ID UNION ALL
                       SELECT TARGET_OBJECT_ID FROM 
                        ADS_ASSOCIATIONS WHERE TARGET_OBJECT_TYPE_ID = BGM_TERM_OBJ_TYPE_ID)

			UNION ALL
			SELECT ID OBJECT_ID, BGM_POLICY_OBJ_TYPE_ID OBJECT_TYPE_ID FROM BG_POLICIES BP
			WHERE CATALOG_ID IN (SELECT OBJECT_ID FROM TABLE(HIERARCHY_TBL))

                        AND ID IN (SELECT SOURCE_OBJECT_ID FROM 
                        ADS_ASSOCIATIONS WHERE SOURCE_OBJECT_TYPE_ID = BGM_POLICY_OBJ_TYPE_ID UNION ALL
                        SELECT TARGET_OBJECT_ID FROM 
                        ADS_ASSOCIATIONS WHERE TARGET_OBJECT_TYPE_ID = BGM_POLICY_OBJ_TYPE_ID)

			UNION ALL
			SELECT ID OBJECT_ID, BGM_RULE_OBJ_TYPE_ID OBJECT_TYPE_ID FROM BG_BUSINESS_RULES BR
			WHERE CATALOG_ID IN (SELECT OBJECT_ID FROM TABLE(HIERARCHY_TBL)) 

                        AND ID IN (SELECT SOURCE_OBJECT_ID FROM 
                        ADS_ASSOCIATIONS WHERE SOURCE_OBJECT_TYPE_ID = BGM_RULE_OBJ_TYPE_ID UNION ALL
                        SELECT TARGET_OBJECT_ID FROM 
                        ADS_ASSOCIATIONS WHERE TARGET_OBJECT_TYPE_ID = BGM_RULE_OBJ_TYPE_ID)

			UNION ALL
			SELECT ID OBJECT_ID, OBJECT_TYPE_ID FROM BG_CUSTOM_OBJECTS BCO
			WHERE CATEGORY_ID IN (SELECT OBJECT_ID FROM TABLE(HIERARCHY_TBL))

                        AND ID IN (SELECT SOURCE_OBJECT_ID FROM 
                        ADS_ASSOCIATIONS WHERE SOURCE_OBJECT_TYPE_ID = BCO.OBJECT_TYPE_ID UNION ALL
                        SELECT TARGET_OBJECT_ID FROM 
                        ADS_ASSOCIATIONS WHERE TARGET_OBJECT_TYPE_ID = BCO.OBJECT_TYPE_ID)

			UNION ALL
			SELECT SYSTEM_ID OBJECT_ID, SM_SYSTEM_OBJ_TYPE_ID OBJECT_TYPE_ID FROM SYSTEM_DEFINITION_DETAILS);

    SELECT OBJ_ID_TYPE_ID_OBJECT(OBJECT_ID, OBJECT_TYPE_ID) Bulk Collect 
    INTO LOOP_TABLE FROM (SELECT ASS.TARGET_OBJECT_ID OBJECT_ID, ASS.TARGET_OBJECT_TYPE_ID OBJECT_TYPE_ID FROM ADS_ASSOCIATIONS ASS 
            WHERE ASS.SOURCE_OBJECT_ID = P_OBJECT_ID AND ASS.SOURCE_OBJECT_TYPE_ID = P_OBJECT_TYPE_ID
            UNION
            SELECT ASS.SOURCE_OBJECT_ID OBJECT_ID, ASS.SOURCE_OBJECT_TYPE_ID OBJECT_TYPE_ID FROM ADS_ASSOCIATIONS ASS 
            WHERE ASS.TARGET_OBJECT_ID = P_OBJECT_ID AND ASS.TARGET_OBJECT_TYPE_ID = P_OBJECT_TYPE_ID);

        INSERT INTO GBL_LOOP_TABLE (TID, OBJ_ID, OBJ_TYPE_ID) values(1,P_OBJECT_ID,P_OBJECT_TYPE_ID);
        COUNTER := 1;
        FOR RECORD IN (SELECT OBJECT_ID, OBJECT_TYPE_ID FROM TABLE(LOOP_TABLE) LT
            WHERE (1=P_MASTER_ACCESS OR EXISTS(SELECT OBJECT_ID, OBJECT_TYPE_ID FROM TABLE(PERMITTED_OBJECTS) PO
                   WHERE LT.OBJECT_ID = PO.OBJECT_ID AND LT.OBJECT_TYPE_ID = PO.OBJECT_TYPE_ID))) LOOP
                 COUNTER := COUNTER + 1;
                INSERT INTO GBL_LOOP_TABLE (TID, OBJ_ID, OBJ_TYPE_ID)
                SELECT COUNTER, RECORD.OBJECT_ID, RECORD.OBJECT_TYPE_ID FROM DUAL;
        END LOOP;
        ROW_COUNT := COUNTER; 
        COUNTER2 := 1; 
	WHILE (COUNTER2 <= ROW_COUNT) LOOP
		BEGIN 
                    SELECT OBJ_ID, OBJ_TYPE_ID INTO TOBJ_ID,TOBJ_TYPE_ID FROM GBL_LOOP_TABLE WHERE TID = COUNTER2;
                    FOR RECORD IN( SELECT OBJECT_ID, OBJECT_TYPE_ID FROM (
                        SELECT ASS.TARGET_OBJECT_ID OBJECT_ID, ASS.TARGET_OBJECT_TYPE_ID OBJECT_TYPE_ID FROM ADS_ASSOCIATIONS ASS 
                        WHERE ASS.SOURCE_OBJECT_ID = TOBJ_ID AND ASS.SOURCE_OBJECT_TYPE_ID = TOBJ_TYPE_ID
                        UNION
                        SELECT ASS.SOURCE_OBJECT_ID OBJECT_ID, ASS.SOURCE_OBJECT_TYPE_ID OBJECT_TYPE_ID FROM ADS_ASSOCIATIONS ASS 
                        WHERE ASS.TARGET_OBJECT_ID = TOBJ_ID AND ASS.TARGET_OBJECT_TYPE_ID = TOBJ_TYPE_ID) ASSOC
                        WHERE NOT EXISTS (SELECT 1 FROM GBL_LOOP_TABLE RT WHERE RT.OBJ_ID = ASSOC.OBJECT_ID AND 
                        RT.OBJ_TYPE_ID = ASSOC.OBJECT_TYPE_ID)
                        AND (1=P_MASTER_ACCESS OR EXISTS(SELECT OBJECT_ID, OBJECT_TYPE_ID FROM TABLE(PERMITTED_OBJECTS) PO
                        WHERE ASSOC.OBJECT_ID = PO.OBJECT_ID AND ASSOC.OBJECT_TYPE_ID = PO.OBJECT_TYPE_ID))) LOOP
                        COUNTER := COUNTER + 1;
                        INSERT INTO GBL_LOOP_TABLE (TID, OBJ_ID, OBJ_TYPE_ID)
                        SELECT COUNTER, RECORD.OBJECT_ID, RECORD.OBJECT_TYPE_ID FROM DUAL;
                    END LOOP;
                    SELECT MAX(TID) INTO ROW_COUNT FROM GBL_LOOP_TABLE;
                    COUNTER2 := COUNTER2 + 1;
		END;
        END LOOP;

    SELECT MINDMAP_DATA_OBJECT(OBJECT_NAME, OBJECT_ID,OBJECT_TYPE_ID,OBJECT_TYPE,OBJECT_TITLE,OBJECT_COLOR,OBJECT_PATH,SDI_FLAG,SDI_DESCRIPTION,SDI_CLASS_ID,SDI_CLASS_NAME,SDI_ENABLED,OBJECT_LOGICAL_NAME,OBJECT_EXPANDED_LOGICAL_NAME,MD_OBJECT_COMMENTS,MD_OBJECT_DEFINITION) Bulk Collect 
    INTO MINDMAP_RESULTS FROM (
    select  SD.SYSTEM_NAME OBJECT_NAME, AST.OBJ_ID OBJECT_ID,AST.OBJ_TYPE_ID OBJECT_TYPE_ID, AKV.OBJECT_TYPE, 
            (SELECT COLUMN_VALUE FROM (SELECT ROWNUM as SLNO,COLUMN_VALUE FROM TABLE(split_string((SELECT PREFERENCE_VALUE FROM APP_PREFERENCES WHERE PREFERENCE_NAME = 'SM_SYSTEM_PREFERENCE'),'`')))  WHERE SLNO =2) OBJECT_TITLE,
            (SELECT COLUMN_VALUE FROM TABLE(split_string((SELECT PREFERENCE_VALUE FROM APP_PREFERENCES WHERE PREFERENCE_NAME = 'SM_SYSTEM_PREFERENCE'),'`')) WHERE ROWNUM = 1) OBJECT_COLOR,
            SD.SYSTEM_NAME OBJECT_PATH ,SD.SDI_FLAG, SD.SDI_DESCRIPTION, SD.SDI_CLASS_ID,SDI.SDI_CLASS_NAME, '1' as SDI_ENABLED,
            ' ' OBJECT_LOGICAL_NAME,' ' OBJECT_EXPANDED_LOGICAL_NAME,' ' MD_OBJECT_COMMENTS,' ' MD_OBJECT_DEFINITION from GBL_LOOP_TABLE AST JOIN SYSTEM_DEFINITION_DETAILS SD 
            ON AST.OBJ_ID = SD.SYSTEM_ID LEFT JOIN SM_CLASSIFICATION_SDI SDI ON SDI.SDI_CLASS_ID = SD.SDI_CLASS_ID JOIN ADS_KEY_VALUE_OBJECTS AKV
            ON  AST.OBJ_TYPE_ID = AKV.OBJECT_TYPE_ID AND AKV.OBJECT_TYPE ='SM_SYSTEM'
            UNION ALL
            select  SCE.SYSTEM_ENVIRONMENT_NAME OBJECT_NAME, AST.OBJ_ID OBJECT_ID,AST.OBJ_TYPE_ID OBJECT_TYPE_ID, AKV.OBJECT_TYPE,
            (SELECT COLUMN_VALUE FROM (SELECT ROWNUM as SLNO,COLUMN_VALUE FROM TABLE(split_string((SELECT PREFERENCE_VALUE FROM APP_PREFERENCES WHERE PREFERENCE_NAME = 'SM_ENVIRONMENT_PREFERENCE'),'`')))  WHERE SLNO =2) OBJECT_TITLE,
            (SELECT COLUMN_VALUE FROM TABLE(split_string((SELECT PREFERENCE_VALUE FROM APP_PREFERENCES WHERE PREFERENCE_NAME = 'SM_ENVIRONMENT_PREFERENCE'),'`')) WHERE ROWNUM = 1) OBJECT_COLOR,          
            SCE.SYSTEM_NAME||'/'||SCE.SYSTEM_ENVIRONMENT_NAME OBJECT_PATH, SCE.SDI_FLAG, SCE.SDI_DESCRIPTION, SCE.SDI_CLASS_ID,SDI.SDI_CLASS_NAME, '1' as SDI_ENABLED,
			' ' OBJECT_LOGICAL_NAME,' ' OBJECT_EXPANDED_LOGICAL_NAME,' ' MD_OBJECT_COMMENTS,' ' MD_OBJECT_DEFINITION  from GBL_LOOP_TABLE AST JOIN SYS_CON_ENVIRONMENTS SCE 
            ON AST.OBJ_ID = SCE.SCE_ID LEFT JOIN SM_CLASSIFICATION_SDI SDI ON SDI.SDI_CLASS_ID = SCE.SDI_CLASS_ID  JOIN ADS_KEY_VALUE_OBJECTS AKV
            ON  AST.OBJ_TYPE_ID = AKV.OBJECT_TYPE_ID AND AKV.OBJECT_TYPE ='SM_ENVIRONMENT'
            UNION ALL
            SELECT VSTM.TABLE_NAME OBJECT_NAME, AST.OBJ_ID OBJECT_ID,AST.OBJ_TYPE_ID OBJECT_TYPE_ID, AKV.OBJECT_TYPE, 
            (SELECT COLUMN_VALUE FROM (SELECT ROWNUM as SLNO,COLUMN_VALUE FROM TABLE(split_string((SELECT PREFERENCE_VALUE FROM APP_PREFERENCES WHERE PREFERENCE_NAME = 'SM_TABLE_PREFERENCE'),'`')))  WHERE SLNO =2) OBJECT_TITLE,
            (SELECT COLUMN_VALUE FROM TABLE(split_string((SELECT PREFERENCE_VALUE FROM APP_PREFERENCES WHERE PREFERENCE_NAME = 'SM_TABLE_PREFERENCE'),'`')) WHERE ROWNUM = 1) OBJECT_COLOR,
            SD.SYSTEM_NAME||'/'||VSTM.SYSTEM_ENV_NAME||'/'||VSTM.TABLE_NAME OBJECT_PATH ,VSTM.SDI_FLAG, VSTM.SDI_DESCRIPTION, VSTM.SDI_CLASS_ID,SDI.SDI_CLASS_NAME, '1' as SDI_ENABLED  ,nvl(VSTM.LOGICAL_TABLE_NAME, ' ') OBJECT_LOGICAL_NAME,nvl(VSTM.EXPANDED_LOGICAL_NAME, ' ') OBJECT_EXPANDED_LOGICAL_NAME,nvl(VSTM.TABLE_COMMENTS,'') MD_OBJECT_COMMENTS,nvl(VSTM.TABLE_DEF,'') MD_OBJECT_DEFINITION
            FROM  GBL_LOOP_TABLE AST JOIN VALID_SYSTEM_TABLE_METADATA VSTM
            ON AST.OBJ_ID = VSTM.STM_ID LEFT JOIN SM_CLASSIFICATION_SDI SDI ON SDI.SDI_CLASS_ID = VSTM.SDI_CLASS_ID 
            JOIN ADS_KEY_VALUE_OBJECTS AKV
            ON  AST.OBJ_TYPE_ID = AKV.OBJECT_TYPE_ID AND AKV.OBJECT_TYPE ='SM_TABLE'
            JOIN SYSTEM_DEFINITION_DETAILS SD ON VSTM.SYSTEM_ID = SD.SYSTEM_ID
            UNION ALL
            SELECT VSTCM.COLUMN_NAME OBJECT_NAME, AST.OBJ_ID OBJECT_ID,AST.OBJ_TYPE_ID OBJECT_TYPE_ID, AKV.OBJECT_TYPE,
            (SELECT COLUMN_VALUE FROM (SELECT ROWNUM as SLNO,COLUMN_VALUE FROM TABLE(split_string((SELECT PREFERENCE_VALUE FROM APP_PREFERENCES WHERE PREFERENCE_NAME = 'SM_COLUMN_PREFERENCE'),'`')))  WHERE SLNO =2) OBJECT_TITLE,
            (SELECT COLUMN_VALUE FROM TABLE(split_string((SELECT PREFERENCE_VALUE FROM APP_PREFERENCES WHERE PREFERENCE_NAME = 'SM_COLUMN_PREFERENCE'),'`')) WHERE ROWNUM = 1) OBJECT_COLOR,
            SD.SYSTEM_NAME||'/'||VSTCM.SYSTEM_ENV_NAME||'/'||VSTCM.TABLE_NAME OBJECT_PATH,VSTCM.SDI_FLAG, VSTCM.SDI_DESCRIPTION, VSTCM.SDI_CLASS_ID,SDI.SDI_CLASS_NAME, '1' as SDI_ENABLED ,nvl(VSTCM.LOGICAL_COLUMN_NAME, ' ') OBJECT_LOGICAL_NAME,nvl(VSTCM.EXPANDED_LOGICAL_NAME, ' ') OBJECT_EXPANDED_LOGICAL_NAME,nvl(VSTCM.COLUMN_COMMENTS,'') MD_OBJECT_COMMENTS,nvl(VSTCM.COL_DEF,'') MD_OBJECT_DEFINITION
            FROM  GBL_LOOP_TABLE AST JOIN VALID_SYS_TBL_COL_METADATA VSTCM
            ON AST.OBJ_ID = VSTCM.STCM_ID LEFT JOIN SM_CLASSIFICATION_SDI SDI ON SDI.SDI_CLASS_ID = VSTCM.SDI_CLASS_ID 
            JOIN ADS_KEY_VALUE_OBJECTS AKV
            ON  AST.OBJ_TYPE_ID = AKV.OBJECT_TYPE_ID AND AKV.OBJECT_TYPE ='SM_COLUMN'
            JOIN SYSTEM_DEFINITION_DETAILS SD ON VSTCM.SYSTEM_ID = SD.SYSTEM_ID
            UNION ALL
            SELECT BT.BUS_TERM_NAME OBJECT_NAME, AST.OBJ_ID OBJECT_ID,AST.OBJ_TYPE_ID OBJECT_TYPE_ID, 'BGM_TERM' OBJECT_TYPE,
            BCOT.ENTITY_TITLE,BCOT.ENTITY_COLOR, BCT.OBJECT_PATH ,BT.SDI_FLAG, BT.SDI_DESCRIPTION, BT.SDI_CLASS_ID,SDI.SDI_CLASS_NAME,BCOT.SDI_ENABLED ,' ' OBJECT_LOGICAL_NAME,' ' OBJECT_EXPANDED_LOGICAL_NAME,' ' MD_OBJECT_COMMENTS,' ' MD_OBJECT_DEFINITION  
            FROM  GBL_LOOP_TABLE AST JOIN BUSINESS_TERMS BT
            ON AST.OBJ_ID = BT.BUS_TERM_ID LEFT JOIN SM_CLASSIFICATION_SDI SDI ON SDI.SDI_CLASS_ID = BT.SDI_CLASS_ID 
            JOIN BG_CUSTOM_TYPES BCOT
            ON  AST.OBJ_TYPE_ID = BCOT.OBJECT_TYPE_ID AND BCOT.NAME ='Business Terms'
            JOIN TABLE(HIERARCHY_TBL) BCT on BCT.OBJECT_ID = BT.category_id WHERE BCOT.SDI_ENABLED = 1
            UNION ALL
            SELECT BR.NAME OBJECT_NAME, AST.OBJ_ID OBJECT_ID,AST.OBJ_TYPE_ID OBJECT_TYPE_ID, 'BGM_RULE' OBJECT_TYPE,BCOT.ENTITY_TITLE,BCOT.ENTITY_COLOR, BCT.OBJECT_PATH ,BR.SDI_FLAG, BR.SDI_DESCRIPTION, BR.SDI_CLASS_ID,SDI.SDI_CLASS_NAME, BCOT.SDI_ENABLED ,' ' OBJECT_LOGICAL_NAME,' ' OBJECT_EXPANDED_LOGICAL_NAME,' ' MD_OBJECT_COMMENTS,' ' MD_OBJECT_DEFINITION 
            FROM  GBL_LOOP_TABLE AST JOIN BG_BUSINESS_RULES BR
            ON AST.OBJ_ID = BR.ID LEFT JOIN SM_CLASSIFICATION_SDI SDI ON SDI.SDI_CLASS_ID = BR.SDI_CLASS_ID 
            JOIN BG_CUSTOM_TYPES BCOT
            ON  AST.OBJ_TYPE_ID = BCOT.OBJECT_TYPE_ID AND BCOT.NAME ='Business Rules'
            JOIN TABLE(HIERARCHY_TBL) BCT on BCT.OBJECT_ID = BR.CATALOG_ID WHERE BCOT.SDI_ENABLED = 1
            UNION ALL
            SELECT BP.NAME OBJECT_NAME, AST.OBJ_ID OBJECT_ID,AST.OBJ_TYPE_ID OBJECT_TYPE_ID, 'BGM_POLICY' OBJECT_TYPE,BCOT.ENTITY_TITLE,BCOT.ENTITY_COLOR, BCT.OBJECT_PATH,BP.SDI_FLAG, BP.SDI_DESCRIPTION, BP.SDI_CLASS_ID,SDI.SDI_CLASS_NAME, BCOT.SDI_ENABLED,' ' OBJECT_LOGICAL_NAME,' ' OBJECT_EXPANDED_LOGICAL_NAME,' ' MD_OBJECT_COMMENTS,' ' MD_OBJECT_DEFINITION    
            FROM  GBL_LOOP_TABLE AST JOIN BG_POLICIES BP
            ON AST.OBJ_ID = BP.ID LEFT JOIN SM_CLASSIFICATION_SDI SDI ON SDI.SDI_CLASS_ID = BP.SDI_CLASS_ID 
            JOIN BG_CUSTOM_TYPES BCOT
            ON  AST.OBJ_TYPE_ID = BCOT.OBJECT_TYPE_ID AND BCOT.NAME ='Business Policies'
            JOIN TABLE(HIERARCHY_TBL) BCT on BCT.OBJECT_ID = BP.CATALOG_ID WHERE BCOT.SDI_ENABLED = 1
            UNION ALL
            SELECT CO.NAME OBJECT_NAME, AST.OBJ_ID OBJECT_ID,AST.OBJ_TYPE_ID OBJECT_TYPE_ID, 'CUSTOM_OBJECT' OBJECT_TYPE,BCOT.ENTITY_TITLE,BCOT.ENTITY_COLOR, BCT.OBJECT_PATH ,CO.SDI_FLAG, CO.SDI_DESCRIPTION, CO.SDI_CLASS_ID,SDI.SDI_CLASS_NAME, BCOT.SDI_ENABLED,' ' OBJECT_LOGICAL_NAME,' ' OBJECT_EXPANDED_LOGICAL_NAME  ,' ' MD_OBJECT_COMMENTS,' ' MD_OBJECT_DEFINITION 
            FROM  GBL_LOOP_TABLE AST JOIN BG_CUSTOM_OBJECTS CO
            ON AST.OBJ_ID = CO.ID LEFT JOIN SM_CLASSIFICATION_SDI SDI ON SDI.SDI_CLASS_ID = CO.SDI_CLASS_ID 
            JOIN BG_CUSTOM_TYPES BCOT
            ON  AST.OBJ_TYPE_ID = BCOT.OBJECT_TYPE_ID AND BCOT.OBJECT_TYPE_ID NOT IN(SELECT OBJECT_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS WHERE 
            OBJECT_TYPE IN('BGM_TERM','BGM_POLICY','BGM_RULE'))
            JOIN TABLE(HIERARCHY_TBL) BCT on BCT.OBJECT_ID = co.CATEGORY_ID WHERE BCOT.SDI_ENABLED = 1);
DELETE FROM GBL_LOOP_TABLE;
COMMIT;
RETURN MINDMAP_RESULTS;
END FN_GET_MINDMAP_ASSOCIATIONS;
/
DECLARE
  TYPECHECKERFLAG INT;
BEGIN
  SELECT COUNT(*) INTO TYPECHECKERFLAG FROM ALL_OBJECTS  WHERE OWNER = sys_context('userenv', 'current_schema') AND UPPER(OBJECT_NAME) = 'MINDMAP_IDS_OBJECT'
  AND UPPER(OBJECT_TYPE) ='TYPE';
  IF TYPECHECKERFLAG     = 0 THEN
    EXECUTE IMMEDIATE 'CREATE TYPE MINDMAP_IDS_OBJECT AS OBJECT (OBJECT_ID NUMBER, OBJECT_TYPE_ID NUMBER, OBJECT_TYPE varchar2(400), ID_TYPE varchar2(400))';
  END IF;
END;
/
DECLARE
  TYPECHECKERFLAG INT;
BEGIN
  SELECT COUNT(*) INTO TYPECHECKERFLAG FROM ALL_OBJECTS WHERE OWNER = sys_context('userenv', 'current_schema') AND UPPER(OBJECT_NAME) = 'MINDMAP_IDS_OBJECT_TABLE'
  AND UPPER(OBJECT_TYPE) ='TYPE';
  IF TYPECHECKERFLAG     = 0 THEN
    EXECUTE IMMEDIATE 'CREATE OR REPLACE TYPE "MINDMAP_IDS_OBJECT_TABLE" AS TABLE OF "MINDMAP_IDS_OBJECT"';
  END IF;
END;
/
DECLARE
   PROCEDURECHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO PROCEDURECHECKERFLAG FROM ALL_OBJECTS WHERE OWNER = sys_context('userenv', 'current_schema') AND OBJECT_TYPE = 'PROCEDURE' AND OBJECT_NAME = UPPER('PROC_MINDMAP_SDI_BLK_UPDATE');
   IF PROCEDURECHECKERFLAG = 1 THEN
      EXECUTE IMMEDIATE 'DROP PROCEDURE PROC_MINDMAP_SDI_BLK_UPDATE';
   END IF;
END;
/
create or replace PROCEDURE PROC_MINDMAP_SDI_BLK_UPDATE(
    P_OBJECT_ID            IN NUMBER,
    P_OBJECT_TYPE_ID       IN NUMBER,
    P_SDI_CLASS_ID         IN NUMBER,
    P_SDI_FLAG             IN CHAR,
    P_SDI_DESCRIPTION      IN VARCHAR2,
    P_LAST_MODIFIED_BY     IN VARCHAR2,
    P_LAST_MODIFIED_DATE_TIME IN TIMESTAMP,
    P_IS_SYSTEM            IN CHAR,
    P_IS_ENVIRONMENT       IN CHAR,
    P_IS_TABLE             IN CHAR,
    P_SDI_AUDIT_DESC       IN VARCHAR2,
    P_HISTORY_TYPE_ID      IN NUMBER,
    P_NOT_IN_IDS           VARCHAR2,
    P_DYNAMIC_WHERE        VARCHAR2,
    P_OPTION_WHERE         VARCHAR2,
    P_MASTER_ACCESS        IN NUMBER)
AS
  DYNAMIC_SQL  VARCHAR2(4000);
  MINDMAP_DATA_TABLE MINDMAP_DATA_OBJECT_TABLE := MINDMAP_DATA_OBJECT_TABLE();
  MINDMAPIDSTABLE MINDMAP_IDS_OBJECT_TABLE := MINDMAP_IDS_OBJECT_TABLE();
  MINDMAP_NOTIN_IDSTABLE MINDMAP_IDS_OBJECT_TABLE := MINDMAP_IDS_OBJECT_TABLE();
BEGIN
  DYNAMIC_SQL:='SELECT MINDMAP_DATA_OBJECT(OBJECT_NAME,OBJECT_ID,OBJECT_TYPE_ID,OBJECT_TYPE,OBJECT_COLOR,OBJECT_TITLE,OBJECT_PATH,SDI_FLAG,SDI_DESCRIPTION,SDI_CLASS_ID,SDI_CLASS_NAME,SDI_ENABLED,OBJECT_LOGICAL_NAME,OBJECT_EXPANDED_LOGICAL_NAME,MD_OBJECT_COMMENTS,MD_OBJECT_DEFINITION) FROM TABLE(FN_GET_MINDMAP_ASSOCIATIONS(:1,:2,:3,:4)) ' || P_DYNAMIC_WHERE;
  EXECUTE IMMEDIATE DYNAMIC_SQL BULK COLLECT INTO MINDMAP_DATA_TABLE USING P_OBJECT_ID,P_OBJECT_TYPE_ID,P_MASTER_ACCESS,P_LAST_MODIFIED_BY;
  SELECT MINDMAP_IDS_OBJECT(OBJECT_ID,OBJECT_TYPE_ID,OBJECT_TYPE,concat(concat(CAST(OBJECT_ID as varchar2(2000)),':'),cast(OBJECT_TYPE_ID as varchar2(100)))) BULK COLLECT INTO MINDMAPIDSTABLE FROM TABLE(MINDMAP_DATA_TABLE);
  SELECT MINDMAP_IDS_OBJECT(OBJECT_ID, OBJECT_TYPE_ID, OBJECT_TYPE, ID_TYPE) BULK COLLECT INTO MINDMAP_NOTIN_IDSTABLE FROM TABLE(MINDMAPIDSTABLE) WHERE ID_TYPE NOT IN(SELECT COLUMN_VALUE FROM TABLE(SPLIT_STRING(P_NOT_IN_IDS)));
  UPDATE SYSTEM_DEFINITION_DETAILS
    SET SDI_FLAG            = P_SDI_FLAG,
    SDI_DESCRIPTION         = P_SDI_DESCRIPTION,
    SDI_CLASS_ID            = P_SDI_CLASS_ID,
    LAST_MODIFIED_BY        = P_LAST_MODIFIED_BY,
    LAST_MODIFIED_DATE_TIME = P_LAST_MODIFIED_DATE_TIME
    WHERE SYSTEM_ID IN (SELECT OBJECT_ID FROM TABLE(MINDMAP_NOTIN_IDSTABLE) where OBJECT_TYPE = 'SM_SYSTEM');

  UPDATE SYS_CON_ENVIRONMENTS
    SET SDI_FLAG            = P_SDI_FLAG,
    SDI_DESCRIPTION         = P_SDI_DESCRIPTION,
    SDI_CLASS_ID            = P_SDI_CLASS_ID,
    LAST_MODIFIED_BY        = P_LAST_MODIFIED_BY,
    LAST_MODIFIED_DATE_TIME = P_LAST_MODIFIED_DATE_TIME
    WHERE SCE_ID IN (SELECT OBJECT_ID FROM TABLE(MINDMAP_NOTIN_IDSTABLE) where OBJECT_TYPE = 'SM_ENVIRONMENT');

    UPDATE SYSTEM_TABLE_METADATA
    SET SDI_FLAG            = P_SDI_FLAG,
    SDI_DESCRIPTION         = P_SDI_DESCRIPTION,
    SDI_CLASS_ID            = P_SDI_CLASS_ID,
    LAST_MODIFIED_BY        = P_LAST_MODIFIED_BY,
    LAST_MODIFIED_DATE_TIME = P_LAST_MODIFIED_DATE_TIME
    WHERE STM_ID IN (SELECT OBJECT_ID FROM TABLE(MINDMAP_NOTIN_IDSTABLE) where OBJECT_TYPE = 'SM_TABLE');

    UPDATE SYSTEM_TABLE_COLUMNS_METADATA
    SET SDI_FLAG            = P_SDI_FLAG,
    SDI_DESCRIPTION         = P_SDI_DESCRIPTION,
    SDI_CLASS_ID            = P_SDI_CLASS_ID,
    LAST_MODIFIED_BY        = P_LAST_MODIFIED_BY,
    LAST_MODIFIED_DATE_TIME = P_LAST_MODIFIED_DATE_TIME
    WHERE STCM_ID IN (SELECT OBJECT_ID FROM TABLE(MINDMAP_NOTIN_IDSTABLE) where OBJECT_TYPE = 'SM_COLUMN');


    UPDATE BUSINESS_TERMS
    SET SDI_FLAG            = P_SDI_FLAG,
    SDI_DESCRIPTION         = P_SDI_DESCRIPTION,
    SDI_CLASS_ID            = P_SDI_CLASS_ID
    WHERE BUS_TERM_ID IN (SELECT OBJECT_ID FROM TABLE(MINDMAP_NOTIN_IDSTABLE) where OBJECT_TYPE = 'BGM_TERM');

    UPDATE BG_BUSINESS_RULES
    SET SDI_FLAG            = P_SDI_FLAG,
    SDI_DESCRIPTION         = P_SDI_DESCRIPTION,
    SDI_CLASS_ID            = P_SDI_CLASS_ID
    WHERE ID IN (SELECT OBJECT_ID FROM TABLE(MINDMAP_NOTIN_IDSTABLE) where OBJECT_TYPE = 'BGM_RULE');

    UPDATE BG_POLICIES
    SET SDI_FLAG            = P_SDI_FLAG,
    SDI_DESCRIPTION         = P_SDI_DESCRIPTION,
    SDI_CLASS_ID            = P_SDI_CLASS_ID
    WHERE ID IN (SELECT OBJECT_ID FROM TABLE(MINDMAP_NOTIN_IDSTABLE) where OBJECT_TYPE = 'BGM_POLICY');

    UPDATE BG_CUSTOM_OBJECTS
    SET SDI_FLAG            = P_SDI_FLAG,
    SDI_DESCRIPTION         = P_SDI_DESCRIPTION,
    SDI_CLASS_ID            = P_SDI_CLASS_ID
    WHERE ID IN (SELECT OBJECT_ID FROM TABLE(MINDMAP_NOTIN_IDSTABLE) where OBJECT_TYPE = 'CUSTOM_OBJECT');


  -- BGM OBJECTS AUDIT INSERTION
    INSERT INTO rm_history (historytypeid, historydesc, objectid, objecttypeid, user_id, historydatestamp) 
    SELECT P_HISTORY_TYPE_ID,P_SDI_AUDIT_DESC, OBJ.OBJECT_ID,OBJ.OBJECT_TYPE_ID,P_LAST_MODIFIED_BY,SYSDATE FROM TABLE(MINDMAP_NOTIN_IDSTABLE) OBJ WHERE OBJ.OBJECT_TYPE NOT IN('SM_SYSTEM','SM_ENVIRONMENT','SM_TABLE','SM_COLUMN');

   -- Metadata Hierarchy Updation
    IF (P_IS_SYSTEM = 'Y') THEN
    BEGIN
        DYNAMIC_SQL:='UPDATE SYSTEM_DEFINITION_DETAILS SET SDI_FLAG=:1,SDI_DESCRIPTION=:2,SDI_CLASS_ID=:3,
        LAST_MODIFIED_BY=:4,LAST_MODIFIED_DATE_TIME=:5 WHERE SYSTEM_ID IN 
        (SELECT distinct SYSTEM_ID FROM  SYSTEM_TABLE_COLUMNS_METADATA where STCM_ID IN(SELECT OBJECT_ID FROM TABLE(:6) where OBJECT_TYPE = ''SM_COLUMN'')) '|| P_OPTION_WHERE ||'
        or SYSTEM_ID IN (SELECT distinct SYSTEM_ID FROM  SYSTEM_TABLE_METADATA where STM_ID IN(SELECT OBJECT_ID FROM TABLE(:7) where OBJECT_TYPE = ''SM_TABLE''))'|| P_OPTION_WHERE ||'
        or SYSTEM_ID IN (SELECT distinct SYSTEM_ID FROM  SYS_CON_ENVIRONMENTS where SCE_ID IN(SELECT OBJECT_ID FROM TABLE(:8) where OBJECT_TYPE = ''SM_ENVIRONMENT'')) '|| P_OPTION_WHERE ||'
        or SYSTEM_ID IN (SELECT OBJECT_ID FROM TABLE(:9) where OBJECT_TYPE = ''SM_SYSTEM'')' || P_OPTION_WHERE;
        EXECUTE IMMEDIATE DYNAMIC_SQL USING P_SDI_FLAG,P_SDI_DESCRIPTION,P_SDI_CLASS_ID,P_LAST_MODIFIED_BY,P_LAST_MODIFIED_DATE_TIME,MINDMAP_NOTIN_IDSTABLE,MINDMAP_NOTIN_IDSTABLE,MINDMAP_NOTIN_IDSTABLE,MINDMAP_NOTIN_IDSTABLE;
    END;
    END IF;

    IF(P_IS_ENVIRONMENT = 'Y') THEN
        BEGIN
            DYNAMIC_SQL:='UPDATE SYS_CON_ENVIRONMENTS SET SDI_FLAG=:1,SDI_DESCRIPTION=:2,SDI_CLASS_ID=:3,
            LAST_MODIFIED_BY=:4,LAST_MODIFIED_DATE_TIME=:5 WHERE SCE_ID IN (SELECT distinct SCE_ID FROM  SYSTEM_TABLE_COLUMNS_METADATA where STCM_ID IN(SELECT OBJECT_ID FROM TABLE(:6) where OBJECT_TYPE = ''SM_COLUMN'')) '|| P_OPTION_WHERE ||'
            or SCE_ID IN (SELECT distinct SCE_ID FROM  SYSTEM_TABLE_METADATA where STM_ID IN(SELECT OBJECT_ID FROM TABLE(:7) where OBJECT_TYPE = ''SM_TABLE'')) '|| P_OPTION_WHERE ||'
            or SCE_ID IN (SELECT OBJECT_ID FROM TABLE(:8) where OBJECT_TYPE = ''SM_ENVIRONMENT'')' || P_OPTION_WHERE;
            EXECUTE IMMEDIATE DYNAMIC_SQL USING P_SDI_FLAG,P_SDI_DESCRIPTION,P_SDI_CLASS_ID,P_LAST_MODIFIED_BY,P_LAST_MODIFIED_DATE_TIME,MINDMAP_NOTIN_IDSTABLE,MINDMAP_NOTIN_IDSTABLE,MINDMAP_NOTIN_IDSTABLE;
        END;
    END IF;

    IF (P_IS_TABLE = 'Y') THEN
    BEGIN
        DYNAMIC_SQL:='
        UPDATE SYSTEM_TABLE_METADATA
        SET SDI_FLAG            =:1,
        SDI_DESCRIPTION         =:2,
        SDI_CLASS_ID            =:3,
        LAST_MODIFIED_BY        =:4,
        LAST_MODIFIED_DATE_TIME =:5
        WHERE STM_ID IN (SELECT distinct STM_ID FROM  SYSTEM_TABLE_COLUMNS_METADATA where STCM_ID IN(SELECT OBJECT_ID FROM TABLE(:6) where OBJECT_TYPE = ''SM_COLUMN'')) '|| P_OPTION_WHERE ||'
        or STM_ID IN (SELECT OBJECT_ID FROM TABLE(:7) where OBJECT_TYPE = ''SM_TABLE'')' || P_OPTION_WHERE;
        EXECUTE IMMEDIATE DYNAMIC_SQL USING P_SDI_FLAG,P_SDI_DESCRIPTION,P_SDI_CLASS_ID,P_LAST_MODIFIED_BY,P_LAST_MODIFIED_DATE_TIME,MINDMAP_NOTIN_IDSTABLE,MINDMAP_NOTIN_IDSTABLE;
    END;
    END IF;
END PROC_MINDMAP_SDI_BLK_UPDATE;
/
DECLARE
DATACHECKERFLAG INT;
ASSET_TYPE_ID INT;
T_CATALOG_TYPE_ID INT;
T_CATALOGS_TYPE_ID INT;
VERSIONCHECKKERFLAG INT;
BEGIN
    SELECT COUNT(*) INTO VERSIONCHECKKERFLAG FROM ADS_MM_VERSION WHERE VALUE <= '10';
    SELECT COUNT(*) INTO DATACHECKERFLAG FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE = 'erwin DM NSM_CATALOGS';
    IF (DATACHECKERFLAG = 0 AND VERSIONCHECKKERFLAG = 1) THEN
        EXECUTE IMMEDIATE 'INSERT INTO ADS_KEY_VALUE_OBJECTS (OBJECT_TYPE,OBJECT_TABLE,OBJECT_TABLE_COLUMN,OBJECT_PARENT_TYPE,OBJECT_PARENT_COLUMN_ID,OBJECT_LEVEL,MODULE_KEY,OBJECT_TITLE, SYSTEM_BASED) 
        VALUES(''erwin DM NSM_CATALOGS'','''','''','''','''',0,''com.ads.mm.permission.bgm'',''erwin DM NSM'', 0)';
        EXECUTE IMMEDIATE 'INSERT INTO ADS_KEY_VALUE_OBJECTS (OBJECT_TYPE,OBJECT_TABLE,OBJECT_TABLE_COLUMN,OBJECT_PARENT_TYPE,OBJECT_PARENT_COLUMN_ID,OBJECT_LEVEL,MODULE_KEY,OBJECT_TITLE, SYSTEM_BASED) 
        VALUES(''erwin DM NSM_CATALOG'',''BG_CATEGORIES'',''OBJECT_TYPE_ID'',''erwin DM NSM_CATALOGS'',''erwin DM NSM_CATALOGS_ID'',1,''com.ads.mm.permission.bgm'',''Catalog'', 0)';
        EXECUTE IMMEDIATE 'INSERT INTO ADS_KEY_VALUE_OBJECTS (OBJECT_TYPE,OBJECT_TABLE,OBJECT_TABLE_COLUMN,OBJECT_PARENT_TYPE,OBJECT_PARENT_COLUMN_ID,OBJECT_LEVEL,MODULE_KEY,OBJECT_TITLE, SYSTEM_BASED) 
        VALUES(''erwin DM NSM'',''BG_CUSTOM_OBJECTS'',''ID'',''erwin DM NSM_CATALOG'',''CATEGORY_ID'',2,''com.ads.mm.permission.bgm'',''DM NSM Asset'', 0)';
        SELECT OBJECT_TYPE_ID  INTO ASSET_TYPE_ID  FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE='erwin DM NSM';
	SELECT OBJECT_TYPE_ID  INTO T_CATALOG_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE='erwin DM NSM_CATALOG';
	SELECT OBJECT_TYPE_ID  INTO T_CATALOGS_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE='erwin DM NSM_CATALOGS';
        INSERT INTO  BG_CUSTOM_TYPES(OBJECT_TYPE_ID,CATALOG_TYPE_ID,CATALOGS_TYPE_ID,NAME,ENTITY_TITLE, DESCRIPTION,THUMBNAIL_ICON,DOCS_REQUIRED, ENABLE,DISPLAY_ORDER,SYSTEM_BASED,DEFINITION_ENABLED,SDI_ENABLED,CUSTOM_TYPE) 
	values(ASSET_TYPE_ID,T_CATALOG_TYPE_ID,T_CATALOGS_TYPE_ID,'erwin DM NSM','DM NSM Asset','To Share and reuse model objects within an organization, erwin DM uses Naming Standards for logical and physical objects in the model so that everyone in your organization uses the names consistently and correctly.  The entries in this list are used to expand the abbreviated (cryptic) table/column names to Expanded Logical Name in Metadata Manager.',null,0,0,3.5,0,1,0,1);
        INSERT INTO ADS_WORKFLOW_TRIGGER_ACTION  (NAME,TITLE,DESCRIPTION,STATUS_TITLE,OBJECT_TYPE_ID,FILENAME,METHOD,NODE_TYPE) VALUES('ON_CREATE',(SELECT TITLE FROM ADS_WORKFLOW_TRIGGER_ACTION WHERE METHOD = 'onTermCreate' AND NODE_TYPE='T'),'erwin DM NSM On Create',(SELECT STATUS_TITLE FROM ADS_WORKFLOW_TRIGGER_ACTION WHERE METHOD = 'onTermCreate' AND NODE_TYPE='T'), ASSET_TYPE_ID, 'BGM_Triggers.js','onCustomTypeCreate','T');
        INSERT INTO ADS_WORKFLOW_TRIGGER_ACTION  (NAME,TITLE,DESCRIPTION,STATUS_TITLE,OBJECT_TYPE_ID,FILENAME,METHOD,NODE_TYPE) VALUES('PUBLISH','Publish','Publish','Published',ASSET_TYPE_ID, 'BGM_Actions.js','onCustomTypePublish','A');
        EXECUTE IMMEDIATE 'MERGE INTO BG_CUSTOM_TYPES M USING (SELECT DISTINCT ID,  NAME,   ROW_NUMBER() OVER( ORDER BY CASE DISPLAY_ORDER WHEN NULL THEN 0 WHEN 0 THEN 999999999 ELSE DISPLAY_ORDER END )AS  DISPLAY_ORDER        FROM   BG_CUSTOM_TYPES ) U ON ( M.ID = U.ID      AND M.NAME = U.NAME ) WHEN MATCHED THEN   UPDATE SET M.DISPLAY_ORDER = U.DISPLAY_ORDER';
    END IF;
End;
/
DECLARE
   CHARCOLLENGTHFLAG INT;
BEGIN
SELECT CHAR_LENGTH INTO CHARCOLLENGTHFLAG FROM ALL_TAB_COLUMNS WHERE  OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME = 'CSM_MAP_SYSTEM_ENVIRONMENTS'  AND COLUMN_NAME = 'CSM_MAP_SYS_ENV_NAME';
    IF (CHARCOLLENGTHFLAG < 200) THEN
        EXECUTE IMMEDIATE 'ALTER TABLE CSM_MAP_SYSTEM_ENVIRONMENTS MODIFY(CSM_MAP_SYS_ENV_NAME VARCHAR2(200))';
    END IF;
END;
/
DECLARE
   INDEXCHECKERFLAG INT;
BEGIN
    SELECT COUNT(*) INTO INDEXCHECKERFLAG FROM ALL_INDEXES WHERE OWNER = sys_context('userenv', 'current_schema') AND INDEX_NAME = UPPER('INDX_SM_DATA_PROFL_STCMID');
   IF INDEXCHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'CREATE INDEX INDX_SM_DATA_PROFL_STCMID ON SM_COLUMN_DATA_PROFILE (STCM_ID ASC)';
    END IF;
END;
/

DECLARE
TEMP_OBJECT_TYPE_ID INT;
TEMP_OBJECT_ID INT;
TABLECHECKERFLAG1 INT;
TABLECHECKERFLAG2 INT;
TABLECHECKERFLAG3 INT;
TEMP_KV_ID INT;
TEMP_KV_TYPE_ID INT;
BEGIN
    SELECT  OBJECT_TYPE_ID INTO TEMP_OBJECT_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE='SM_DATABASE_OPTIONS';
    SELECT  MTD_ID INTO TEMP_OBJECT_ID FROM MT_DEFINITION WHERE  MTD_NAME = 'SM_DATABASE_OPTIONS' AND ADS_MODULE = 'SM';
    SELECT COUNT(*) INTO TABLECHECKERFLAG1 FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE='SM_DATABASE_OPTIONS';
    SELECT COUNT(*) INTO TABLECHECKERFLAG2 FROM MT_DEFINITION WHERE MTD_NAME = 'SM_DATABASE_OPTIONS' AND ADS_MODULE = 'SM';
    SELECT COUNT(*) INTO TABLECHECKERFLAG3 FROM ADS_KEY_VALUE WHERE OBJECT_TYPE_ID  = TEMP_OBJECT_TYPE_ID AND OBJECT_ID = TEMP_OBJECT_ID AND KEY_NAME = 'HasAccessToDBA';

    IF TABLECHECKERFLAG1 = 1 AND TABLECHECKERFLAG2 = 1 AND TABLECHECKERFLAG3 = 0 THEN
        INSERT INTO ADS_KEY_VALUE(KEY_NAME,KEY_VALUE,OBJECT_TYPE_ID,OBJECT_ID,DATATYPE_ID,KV_TYPE,LABEL_WIDTH,CONTROL_WIDTH,KV_ORDER,COMPONENT,DEFAULTVALUE,ISSYSTEMBASED) VALUES('HasAccessToDBA',' Has Access To DBA',TEMP_OBJECT_TYPE_ID,TEMP_OBJECT_ID,'1','Combo Box','','','10','','false',0);
        SELECT KV_ID INTO TEMP_KV_ID FROM ADS_KEY_VALUE WHERE OBJECT_TYPE_ID  = TEMP_OBJECT_TYPE_ID AND OBJECT_ID = TEMP_OBJECT_ID AND KEY_NAME = 'HasAccessToDBA' AND KV_TYPE= 'Combo Box';
        SELECT OBJECT_TYPE_ID INTO TEMP_KV_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE='ADS_KEY_VALUE';
        INSERT INTO ADS_KEY_VALUE(KEY_NAME,KEY_VALUE,OBJECT_TYPE_ID,OBJECT_ID,DATATYPE_ID,KV_TYPE,LABEL_WIDTH,CONTROL_WIDTH,KV_ORDER,COMPONENT,DEFAULTVALUE)      VALUES('true','true',TEMP_KV_TYPE_ID,TEMP_KV_ID,'1','combovalues','','','0','','');
        INSERT INTO ADS_KEY_VALUE(KEY_NAME,KEY_VALUE,OBJECT_TYPE_ID,OBJECT_ID,DATATYPE_ID,KV_TYPE,LABEL_WIDTH,CONTROL_WIDTH,KV_ORDER,COMPONENT,DEFAULTVALUE)      VALUES('false','false',TEMP_KV_TYPE_ID,TEMP_KV_ID,'1','combovalues','','','1','','');
    END IF;
END;
/
DECLARE
   FUNCTIONCHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO FUNCTIONCHECKERFLAG FROM ALL_OBJECTS WHERE OWNER = sys_context('userenv', 'current_schema') AND OBJECT_TYPE = 'FUNCTION' AND OBJECT_NAME = UPPER('PIPE_CLOB');
   IF FUNCTIONCHECKERFLAG = 1 THEN
      EXECUTE IMMEDIATE 'DROP FUNCTION PIPE_CLOB';
   END IF;
END;
/
CREATE OR REPLACE FUNCTION PIPE_CLOB (
    p_clob          IN              CLOB,
    p_max_lengthb   IN              INTEGER DEFAULT 4000,
    p_rec_delim     IN              VARCHAR2 DEFAULT '
'
) RETURN sys.odcivarchar2list
    PIPELINED
AS

    l_amount             INTEGER;
    l_offset             INTEGER;
    l_buffer             VARCHAR2(32767 BYTE);
    l_out                VARCHAR2(32767 BYTE);
    l_buff_lengthb       INTEGER;
    l_occurence          INTEGER;
    l_rec_delim_length   INTEGER := length(p_rec_delim);
BEGIN
    IF p_max_lengthb > 4000 THEN
        raise_application_error(-20001, 'Maximum record length (p_max_lengthb) cannot be greater than 4000.');
    ELSIF p_max_lengthb < 10 THEN
        raise_application_error(-20002, 'Maximum record length (p_max_lengthb) cannot be less than 10.');
    END IF;

    IF p_rec_delim IS NULL THEN
        raise_application_error(-20003, 'Record delimiter (p_rec_delim) cannot be null.');
    END IF;
    l_amount := p_max_lengthb + l_rec_delim_length;
    l_offset := 1;
    WHILE l_amount = p_max_lengthb + l_rec_delim_length LOOP
        BEGIN
            dbms_lob.read(p_clob, l_amount, l_offset, l_buffer);
        EXCEPTION
            WHEN no_data_found THEN
                l_amount := 0;
        END;

        IF l_amount = 0 THEN
            EXIT;
        ELSIF lengthb(l_buffer) <= p_max_lengthb THEN
            PIPE ROW ( rtrim(l_buffer, p_rec_delim) );
            EXIT;
        END IF;

        l_buff_lengthb := p_max_lengthb + l_rec_delim_length;
        l_occurence := 0;
        WHILE l_buff_lengthb > p_max_lengthb LOOP
            l_occurence := l_occurence + 1;
            l_buff_lengthb := instrb(l_buffer, p_rec_delim, -1, l_occurence) - 1;
        END LOOP;

        IF l_buff_lengthb < 0 THEN
            IF l_amount = p_max_lengthb + l_rec_delim_length THEN
                raise_application_error(-20004, 'Input clob at offset '
                                                || l_offset
                                                || ' for lengthb '
                                                || p_max_lengthb
                                                || ' has no record delimiter');

            END IF;
        END IF;

        l_out := substrb(l_buffer, 1, l_buff_lengthb);
        PIPE ROW ( l_out );
        l_offset := l_offset + nvl(length(l_out), 0) + l_rec_delim_length;
        l_amount := p_max_lengthb + l_rec_delim_length;
    END LOOP;

    return;
END;
/
DECLARE
   INDEXCHECKERFLAG INT;
BEGIN
    SELECT COUNT(*) INTO INDEXCHECKERFLAG FROM ALL_INDEXES WHERE OWNER = sys_context('userenv', 'current_schema') AND INDEX_NAME = UPPER('STCM_COL_TAB_NAME_SCEID_INDX');
   IF INDEXCHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'CREATE INDEX STCM_COL_TAB_NAME_SCEID_INDX ON SYSTEM_TABLE_COLUMNS_METADATA (SCE_ID, TABLE_NAME, COLUMN_NAME)';
    END IF;
END;
/
DECLARE
   INDEXCHECKERFLAG INT;
BEGIN
    SELECT COUNT(*) INTO INDEXCHECKERFLAG FROM ALL_INDEXES WHERE OWNER = sys_context('userenv', 'current_schema') AND INDEX_NAME = UPPER('ADS_KV_OBJECTS_OBJ_TYPE_INDX');
   IF INDEXCHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'CREATE INDEX ADS_KV_OBJECTS_OBJ_TYPE_INDX ON ADS_KEY_VALUE_OBJECTS (OBJECT_TYPE)';
    END IF;
END;
/

DECLARE
   INDEXCHECKERFLAG INT;
BEGIN
    SELECT COUNT(*) INTO INDEXCHECKERFLAG FROM ALL_INDEXES WHERE OWNER = sys_context('userenv', 'current_schema') AND INDEX_NAME = UPPER('SYS_DEF_DET_SDI_CLS_ID_INDX');
   IF INDEXCHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'CREATE INDEX SYS_DEF_DET_SDI_CLS_ID_INDX ON SYSTEM_DEFINITION_DETAILS (SDI_CLASS_ID)';
    END IF;
END;
/
DECLARE
   INDEXCHECKERFLAG INT;
BEGIN
    SELECT COUNT(*) INTO INDEXCHECKERFLAG FROM ALL_INDEXES WHERE OWNER = sys_context('userenv', 'current_schema') AND INDEX_NAME = UPPER('SYS_CON_EN_SDI_CLASS_ID_INDX');
   IF INDEXCHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'CREATE INDEX SYS_CON_EN_SDI_CLASS_ID_INDX ON SYS_CON_ENVIRONMENTS (SDI_CLASS_ID)';
    END IF;
END;
/
DECLARE
   INDEXCHECKERFLAG INT;
BEGIN
    SELECT COUNT(*) INTO INDEXCHECKERFLAG FROM ALL_INDEXES WHERE OWNER = sys_context('userenv', 'current_schema') AND INDEX_NAME = UPPER('SYS_TAB_MTDT_SDI_CLS_ID_INDX');
   IF INDEXCHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'CREATE INDEX SYS_TAB_MTDT_SDI_CLS_ID_INDX ON SYSTEM_TABLE_METADATA (SDI_CLASS_ID)';
    END IF;
END;
/

DECLARE
   INDEXCHECKERFLAG INT;
BEGIN
    SELECT COUNT(*) INTO INDEXCHECKERFLAG FROM ALL_INDEXES WHERE OWNER = sys_context('userenv', 'current_schema') AND INDEX_NAME = UPPER('SYS_TAB_COL_MTDT_CLS_ID_INDX');
   IF INDEXCHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'CREATE INDEX SYS_TAB_COL_MTDT_CLS_ID_INDX ON SYSTEM_TABLE_COLUMNS_METADATA (SDI_CLASS_ID)';
    END IF;
END;
/
DECLARE
   INDEXCHECKERFLAG INT;
BEGIN
    SELECT COUNT(*) INTO INDEXCHECKERFLAG FROM ALL_INDEXES WHERE OWNER = sys_context('userenv', 'current_schema') AND INDEX_NAME = UPPER('BUS_TERMS_SDI_CLASS_ID_INDX');
   IF INDEXCHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'CREATE INDEX BUS_TERMS_SDI_CLASS_ID_INDX ON BUSINESS_TERMS (SDI_CLASS_ID)';
    END IF;
END;
/
DECLARE
   INDEXCHECKERFLAG INT;
BEGIN
    SELECT COUNT(*) INTO INDEXCHECKERFLAG FROM ALL_INDEXES WHERE OWNER = sys_context('userenv', 'current_schema') AND INDEX_NAME = UPPER('BG_POLICIES_SDI_CLASS_ID_INDX');
   IF INDEXCHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'CREATE INDEX BG_POLICIES_SDI_CLASS_ID_INDX ON BG_POLICIES (SDI_CLASS_ID)';
    END IF;
END;
/
DECLARE
   INDEXCHECKERFLAG INT;
BEGIN
    SELECT COUNT(*) INTO INDEXCHECKERFLAG FROM ALL_INDEXES WHERE OWNER = sys_context('userenv', 'current_schema') AND INDEX_NAME = UPPER('BG_BUS_RULES_SDI_CLS_ID_INDX');
   IF INDEXCHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'CREATE INDEX BG_BUS_RULES_SDI_CLS_ID_INDX ON BG_BUSINESS_RULES (SDI_CLASS_ID)';
    END IF;
END;
/
DECLARE
   INDEXCHECKERFLAG INT;
BEGIN
    SELECT COUNT(*) INTO INDEXCHECKERFLAG FROM ALL_INDEXES WHERE OWNER = sys_context('userenv', 'current_schema') AND INDEX_NAME = UPPER('BG_CUST_OBJS_SDI_CLS_ID_INDX');
   IF INDEXCHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'CREATE INDEX BG_CUST_OBJS_SDI_CLS_ID_INDX ON BG_CUSTOM_OBJECTS (SDI_CLASS_ID)';
    END IF;
END;
/
DECLARE
   VERSIONCHECKKERFLAG INT;
   LENCHECKERFLAG INT;
BEGIN
    SELECT COUNT(*) INTO VERSIONCHECKKERFLAG FROM ADS_MM_VERSION WHERE VALUE <= '10';
    SELECT COUNT(*) INTO LENCHECKERFLAG FROM ADS_KEY_VALUE WHERE LENGTH(KEY_NAME) > 200;
    IF VERSIONCHECKKERFLAG = 1 THEN
            IF LENCHECKERFLAG > 0 THEN
                EXECUTE IMMEDIATE 'UPDATE ADS_KEY_VALUE SET KEY_NAME = SUBSTR(KEY_NAME, 1, 200) WHERE LENGTH(KEY_NAME) > 200';
            END IF;
    END IF;
END;
/
DECLARE
   CHARCOLLENGTHFLAG INT;
BEGIN
SELECT CHAR_LENGTH INTO CHARCOLLENGTHFLAG FROM ALL_TAB_COLUMNS WHERE  OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME = 'ADS_KEY_VALUE'  AND COLUMN_NAME = 'KEY_NAME';
    IF (CHARCOLLENGTHFLAG = 4000) THEN
        EXECUTE IMMEDIATE 'ALTER TABLE ADS_KEY_VALUE MODIFY(KEY_NAME VARCHAR2(200))';
    END IF;
END;
/
DECLARE
   INDEXCHECKERFLAG INT;
BEGIN
    SELECT COUNT(*) INTO INDEXCHECKERFLAG FROM ALL_INDEXES WHERE OWNER = sys_context('userenv', 'current_schema') AND INDEX_NAME = UPPER('ADS_KEY_VAL_KEYNAME_INDX');
   IF INDEXCHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'CREATE INDEX ADS_KEY_VAL_KEYNAME_INDX ON ADS_KEY_VALUE (KEY_NAME)';
    END IF;
END;
/
DECLARE
   INDEXCHECKERFLAG INT;
BEGIN
    SELECT COUNT(*) INTO INDEXCHECKERFLAG FROM ALL_INDEXES WHERE OWNER = sys_context('userenv', 'current_schema') AND INDEX_NAME = UPPER('ADS_KEY_VAL_KNAME_OBTID_INDX');
   IF INDEXCHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'CREATE INDEX ADS_KEY_VAL_KNAME_OBTID_INDX ON ADS_KEY_VALUE (KEY_NAME, OBJECT_ID, OBJECT_TYPE_ID)';
    END IF;
END;
/
DECLARE
   COLUMNCHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO COLUMNCHECKERFLAG FROM ADS_WORKFLOW_STAGE WHERE SYSTEMBASED = '1';
   IF COLUMNCHECKERFLAG <> 0 THEN
      EXECUTE IMMEDIATE 'UPDATE ADS_WORKFLOW_STAGE SET SYSTEMBASED = ''0'' WHERE SYSTEMBASED = ''1''';
      EXECUTE IMMEDIATE 'UPDATE ADS_WORKFLOW_TRIGGER_ACTION SET TITLE = ''Draft'' WHERE NAME=''ON_CREATE'' AND NODE_TYPE=''T''';
   END IF;
END;
/
DECLARE
   TABLECHECKERFLAG INT;
BEGIN
    SELECT COUNT(*) INTO TABLECHECKERFLAG FROM ALL_CONS_COLUMNS WHERE OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME = UPPER('RM_HISTORY') AND CONSTRAINT_NAME = UPPER('FK_RM_USER_ID');
    IF TABLECHECKERFLAG > 0 THEN
       EXECUTE IMMEDIATE 'ALTER TABLE RM_HISTORY DROP CONSTRAINT FK_RM_USER_ID';
    END IF;
END;
/
DECLARE
   VERSIONCHECKKERFLAG INT;
BEGIN
    SELECT COUNT(*) INTO VERSIONCHECKKERFLAG FROM ADS_MM_VERSION WHERE VALUE <= 10;
	IF VERSIONCHECKKERFLAG = 1 THEN
		EXECUTE IMMEDIATE 'INSERT INTO MMROLE_PERMISSIONS(MMROLE_ID, PERMISSION_ID, ENABLED)
		select MMROLE_ID, ''com.ads.mm.permission.sm.tabs.sysenv.columns.tabs.colprops.view'' PERMISSION_ID, ENABLED 
		from MMROLE_PERMISSIONS where permission_id = ''com.ads.mm.permission.sm.tabs.sysenv.columns.tabs.colprops''
		union
		select MMROLE_ID, ''com.ads.mm.permission.sm.tabs.sysenv.columns.tabs.colprops.edit'', ENABLED 
		from MMROLE_PERMISSIONS where permission_id = ''com.ads.mm.permission.sm.tabs.sysenv.columns.tabs.colprops''
		union
		select MMROLE_ID, ''com.ads.mm.permission.sm.tabs.sysenv.tables.tabs.tabprops.view'', ENABLED 
		from MMROLE_PERMISSIONS where permission_id = ''com.ads.mm.permission.sm.tabs.sysenv.tables.tabs.tabprops''
		union
		select MMROLE_ID, ''com.ads.mm.permission.sm.tabs.sysenv.tables.tabs.tabprops.edit'', ENABLED 
		from MMROLE_PERMISSIONS where permission_id = ''com.ads.mm.permission.sm.tabs.sysenv.tables.tabs.tabprops''';
    END IF;
END;
/
DECLARE
   TABLECHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO TABLECHECKERFLAG FROM "APP_PREFERENCES" WHERE PREFERENCE_NAME ='DATA_LINEAGE_EXECUTION_WAIT_TIME';
   IF TABLECHECKERFLAG = 0 THEN
    INSERT INTO APP_PREFERENCES( PREFERENCE_NAME, PREFERENCE_VALUE) VALUES('DATA_LINEAGE_EXECUTION_WAIT_TIME','60');
    END IF;
END;
/
DECLARE
   COLUMNCHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO COLUMNCHECKERFLAG FROM ALL_TAB_COLUMNS WHERE  OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME = UPPER('BGM_METADATA_AI_MATCH_RESULT') AND COLUMN_NAME=UPPER('AI_STATISTICS');
    IF COLUMNCHECKERFLAG = 0 THEN
        EXECUTE IMMEDIATE 'ALTER TABLE BGM_METADATA_AI_MATCH_RESULT ADD AI_STATISTICS VARCHAR2(500) DEFAULT ''{"calculatedRanking":100,"levinsteinDistance":0,"calculatedEditDistance":1}'' ';
        EXECUTE IMMEDIATE 'UPDATE BGM_METADATA_AI_MATCH_RESULT SET AI_STATISTICS = ''{"calculatedRanking":100,"levinsteinDistance":0,"calculatedEditDistance":1}'' WHERE AI_STATISTICS IS NULL';
    END IF;
END;
/
DECLARE
   VERSIONCHECKKERFLAG INT;
BEGIN
    SELECT COUNT(*) INTO VERSIONCHECKKERFLAG FROM ADS_MM_VERSION WHERE VALUE <= 10.1;
    IF VERSIONCHECKKERFLAG = 1 THEN
        EXECUTE IMMEDIATE 'UPDATE ADS_KEY_VALUE_OBJECTS SET SYSTEM_BASED = 1 WHERE OBJECT_TYPE = ''BGM_TERM_CATALOGS''';
    END IF;
END;
/
DECLARE
   VERSIONCHECKKERFLAG INT;
   RECORDCHECKERFLAG INT;
BEGIN
    SELECT COUNT(*) INTO VERSIONCHECKKERFLAG FROM ADS_MM_VERSION WHERE VALUE <= 10.1;
    SELECT COUNT(*) INTO RECORDCHECKERFLAG FROM MMROLE_PERMISSIONS where PERMISSION_ID like 'com.ads.mm.permission.mm.mapgrid.edit.gridheader%';
   
    IF VERSIONCHECKKERFLAG = 1 AND RECORDCHECKERFLAG >= 1 THEN
        EXECUTE IMMEDIATE 'delete from MMROLE_PERMISSIONS where PERMISSION_ID like ''com.ads.mm.permission.mm.mapgrid.edit.gridheader%''';
    END IF;
END;
/
DECLARE
    VERSIONCHECKKERFLAG INT;
    CURSOR KV_PERMISSION_CUR IS
    SELECT 'com.ads.mm.permission.sm.extendprop' new_permission, 'com.ads.mm.permission.sm.tabs.extendedproperties,com.ads.mm.permission.sm.tabs.sysenv.tables.tabs.extprops,com.ads.mm.permission.sm.tabs.sysenv.columns.tabs.extprops,com.ads.mm.permission.sm.tabs.sysenv.environmenttab.extendprop' old_permissions FROM DUAL
    UNION
    SELECT 'com.ads.mm.permission.sm.extendprop.view', 'com.ads.mm.permission.sm.tabs.extendedproperties.view,com.ads.mm.permission.sm.tabs.sysenv.tables.tabs.extprops.view,com.ads.mm.permission.sm.tabs.sysenv.columns.tabs.extprops.view,com.ads.mm.permission.sm.tabs.sysenv.environmenttab.extendprop.view' old_permissions FROM DUAL
    UNION
    SELECT 'com.ads.mm.permission.sm.extendprop.edit', 'com.ads.mm.permission.sm.tabs.extendedproperties.edit,com.ads.mm.permission.sm.tabs.sysenv.tables.tabs.extprops.edit,com.ads.mm.permission.sm.tabs.sysenv.columns.tabs.extprops.edit,com.ads.mm.permission.sm.tabs.sysenv.environmenttab.extendprop.edit' old_permissions FROM DUAL
    UNION
    SELECT 'com.ads.mm.permission.sm.extendprop.delete', 'com.ads.mm.permission.sm.tabs.extendedproperties.edit,com.ads.mm.permission.sm.tabs.sysenv.tables.tabs.extprops.edit,com.ads.mm.permission.sm.tabs.sysenv.columns.tabs.extprops.edit,com.ads.mm.permission.sm.tabs.sysenv.environmenttab.extendprop.edit' old_permissions FROM DUAL
    UNION
    SELECT 'com.ads.mm.permission.sm.configureextprop', 'com.ads.mm.permission.sm.tabs.sysenv.environmenttab.configureextprop' FROM DUAL
    UNION
    SELECT 'com.ads.mm.permission.sm.configureextprop.view', 'com.ads.mm.permission.sm.tabs.sysenv.environmenttab.configureextprop.view' FROM DUAL
    UNION
    SELECT 'com.ads.mm.permission.sm.configureextprop.edit', 'com.ads.mm.permission.sm.tabs.sysenv.environmenttab.configureextprop.edit' FROM DUAL
    UNION
    SELECT 'com.ads.mm.permission.sm.configureextprop.delete', 'com.ads.mm.permission.sm.tabs.sysenv.environmenttab.configureextprop.edit' FROM DUAL
    UNION
    SELECT 'com.ads.mm.permission.mm.extendprop', 'com.ads.mm.permission.mm.projects.projecttabs.extendedproperties,com.ads.mm.permission.mm.projects.subjectmap.subjectmaptabs.subextendedproperties,com.ads.mm.permission.mm.maptabs.userdefsix,com.ads.mm.permission.mm.mapgrid.extendprops' FROM DUAL
    UNION
    SELECT 'com.ads.mm.permission.mm.extendprop.view', 'com.ads.mm.permission.mm.projects.extendedproperties.view,com.ads.mm.permission.mm.projects.subjectmap.subextendedproperties.view,com.ads.mm.permission.mm.maptabs.userdefsix.view,com.ads.mm.permission.mm.mapgrid.extendprops' FROM DUAL
    UNION
    SELECT 'com.ads.mm.permission.mm.extendprop.edit', 'com.ads.mm.permission.mm.projects.extendedproperties.edit,com.ads.mm.permission.mm.projects.subjectmap.subextendedproperties.edit,com.ads.mm.permission.mm.maptabs.userdefsix.edit,com.ads.mm.permission.mm.mapgrid.extendprops' FROM DUAL
    UNION
    SELECT 'com.ads.mm.permission.mm.extendprop.delete', 'com.ads.mm.permission.mm.projects.extendedproperties.edit,com.ads.mm.permission.mm.projects.subjectmap.subextendedproperties.edit,com.ads.mm.permission.mm.maptabs.userdefsix.edit,com.ads.mm.permission.mm.mapgrid.extendprops' FROM DUAL;
BEGIN
    SELECT COUNT(*) INTO VERSIONCHECKKERFLAG FROM ADS_MM_VERSION WHERE VALUE <= 10.1;
    IF VERSIONCHECKKERFLAG = 1 THEN
    FOR PERM_REC IN KV_PERMISSION_CUR
    LOOP
        EXECUTE IMMEDIATE 'INSERT INTO MMROLE_PERMISSIONS(MMROLE_ID, PERMISSION_ID, ENABLED)
    select DISTINCT(MMROLE_ID), '''||PERM_REC.new_permission||''' PERMISSION_ID, ENABLED 
    from MMROLE_PERMISSIONS where permission_id IN (select * from table(split_string('''||PERM_REC.old_permissions||''')))';
    END LOOP;
    FOR PERM_REC IN KV_PERMISSION_CUR
    LOOP
       EXECUTE IMMEDIATE 'DELETE FROM MMROLE_PERMISSIONS WHERE PERMISSION_ID IN (select * from table(split_string('''||PERM_REC.old_permissions||''')))';
    END LOOP;
    EXECUTE IMMEDIATE 'INSERT INTO MMROLE_PERMISSIONS(MMROLE_ID, PERMISSION_ID, ENABLED) 
    select DISTINCT(MMROLE_ID), ''com.ads.mm.permission.mm.mdprops.extended.delete'' PERMISSION_ID, ENABLED 
    from MMROLE_PERMISSIONS where permission_id = ''com.ads.mm.permission.mm.mdprops.extended.edit''';
    END IF;
END;
/
DECLARE
    VERSIONCHECKKERFLAG INT;
    CURSOR KV_PERMISSION_CUR IS
    SELECT 'com.ads.mm.permission.sm.tabs.sysenv.list.assignusersorroles' new_permission, 'com.ads.mm.permission.sm.tabs.sysenv.list.assignusers,com.ads.mm.permission.sm.tabs.sysenv.list.assignroles' old_permissions FROM DUAL
    UNION
    SELECT 'com.ads.mm.permission.bgm.businessterms.catalog.assignusersorroles', 'com.ads.mm.permission.bgm.businessterms.catalog.assignusers,com.ads.mm.permission.bgm.businessterms.catalog.assignroles' FROM DUAL
    UNION
    SELECT 'com.ads.mm.permission.bgm.businesspolicies.catalog.assignusersorroles', 'com.ads.mm.permission.bgm.businesspolicies.catalog.assignusers,com.ads.mm.permission.bgm.businesspolicies.catalog.assignroles' FROM DUAL
    UNION
    SELECT 'com.ads.mm.permission.bgm.businessrules.catalog.assignusersorroles', 'com.ads.mm.permission.bgm.businessrules.catalog.assignusers,com.ads.mm.permission.bgm.businessrules.catalog.assignroles' FROM DUAL
    UNION
    SELECT 'com.ads.mm.permission.bgm.customobjects.catalog.assignusersorroles', 'com.ads.mm.permission.bgm.customobjects.catalog.assignusers,com.ads.mm.permission.bgm.customobjects.catalog.assignroles' FROM DUAL;
BEGIN
    SELECT COUNT(*) INTO VERSIONCHECKKERFLAG FROM ADS_MM_VERSION WHERE VALUE <= 10.1;
    IF VERSIONCHECKKERFLAG = 1 THEN
    FOR PERM_REC IN KV_PERMISSION_CUR
    LOOP
        EXECUTE IMMEDIATE 'INSERT INTO MMROLE_PERMISSIONS(MMROLE_ID, PERMISSION_ID, ENABLED)
    select DISTINCT(MMROLE_ID), '''||PERM_REC.new_permission||''' PERMISSION_ID, ENABLED 
    from MMROLE_PERMISSIONS where permission_id IN (select * from table(split_string('''||PERM_REC.old_permissions||''')))';
    END LOOP;
    FOR PERM_REC IN KV_PERMISSION_CUR
    LOOP
       EXECUTE IMMEDIATE 'DELETE FROM MMROLE_PERMISSIONS WHERE PERMISSION_ID IN (select * from table(split_string('''||PERM_REC.old_permissions||''')))';
    END LOOP;
    END IF;
END;
/
DECLARE
PREFERENCECHECKER INT;
VERSIONCHECKER INT;
BEGIN
    SELECT COUNT(*) INTO VERSIONCHECKER FROM ADS_MM_VERSION WHERE VALUE <= 10.1;
    IF VERSIONCHECKER > 0 THEN
    BEGIN
        SELECT COUNT(*) INTO PREFERENCECHECKER FROM USER_PREFERENCES WHERE USER_ID LIKE '%MIND%' and USER_ID not like 'MINDMAP_PAN_VIEW_%';
        IF PREFERENCECHECKER > 0 THEN
            DECLARE
                ID        VARCHAR2(4000);
                VALUE     VARCHAR2(4000);
                UPD_VALUE VARCHAR2(4000);
                USER_IDD  VARCHAR2(4000);
            CURSOR UPGRADE_CURSOR
            IS
            SELECT USER_ID, COLUMN_PREFERENCES FROM USER_PREFERENCES WHERE USER_ID LIKE '%MINDMAP_SHOW_RELATIONSHIPS_%';
        BEGIN
        OPEN UPGRADE_CURSOR;
        LOOP
        FETCH UPGRADE_CURSOR INTO ID, VALUE;
        EXIT WHEN UPGRADE_CURSOR%NOTFOUND;
        
        SELECT REPLACE(ID, 'MINDMAP_SHOW_RELATIONSHIPS_', '') INTO USER_IDD from dual;
        SELECT COUNT(*) INTO PREFERENCECHECKER FROM USER_PREFERENCES WHERE USER_ID='MINDMAP_SETTINGS_'||USER_IDD;
        IF PREFERENCECHECKER = 0 THEN
          DECLARE
            SHWREL VARCHAR2(4000);
            CUSREL VARCHAR2(4000);
            SDI varchar2(4000);
            LOGICAL_FIELDS varchar2(4000);
          BEGIN
            SELECT COUNT(*) INTO PREFERENCECHECKER FROM USER_PREFERENCES WHERE USER_ID='MINDMAP_SENSITIVITY_FIELDS_'||USER_IDD; 
            IF PREFERENCECHECKER = 0 THEN
                INSERT INTO USER_PREFERENCES(USER_ID, COLUMN_PREFERENCES) VALUES('MINDMAP_SENSITIVITY_FIELDS_'||USER_IDD,'{"SDI_FLAG":1,"SDI_CLASS":0}');
            END IF;
            SELECT COUNT(*) INTO PREFERENCECHECKER FROM USER_PREFERENCES WHERE USER_ID='MINDMAP_OBJECT_LOGICAL_FIELDS_'||USER_IDD; 
            IF PREFERENCECHECKER = 0 THEN
                INSERT INTO USER_PREFERENCES(USER_ID, COLUMN_PREFERENCES) VALUES('MINDMAP_OBJECT_LOGICAL_FIELDS_'||USER_IDD,'{"EXPANDED_LOGICAL_NAMES":0,"LOGICAL_NAMES":1}');
            END IF;
            SELECT COUNT(*) INTO PREFERENCECHECKER FROM USER_PREFERENCES WHERE USER_ID='MINDMAP_ASSERT_HIERARCHY_'||USER_IDD; 
            IF PREFERENCECHECKER = 0 THEN
                INSERT INTO USER_PREFERENCES(USER_ID, COLUMN_PREFERENCES) VALUES('MINDMAP_ASSERT_HIERARCHY_'||USER_IDD,1);
            END IF;
            SELECT COLUMN_PREFERENCES INTO SHWREL FROM USER_PREFERENCES WHERE USER_ID = 'MINDMAP_SHOW_RELATIONSHIPS_'||USER_IDD;
            SELECT COLUMN_PREFERENCES INTO CUSREL FROM USER_PREFERENCES WHERE USER_ID = 'MINDMAP_CUSTOM_RELATIONS_'||USER_IDD;
            SELECT COLUMN_PREFERENCES INTO SDI FROM USER_PREFERENCES WHERE USER_ID = 'MINDMAP_SENSITIVITY_FIELDS_'||USER_IDD;
            SELECT COLUMN_PREFERENCES INTO LOGICAL_FIELDS FROM USER_PREFERENCES WHERE USER_ID = 'MINDMAP_OBJECT_LOGICAL_FIELDS_'||USER_IDD;
            UPD_VALUE := '{"SHW_CNT":0,"DIAG_TYPE":"TREE","SHW_REL":'||SHWREL||',"SHW_CUS_REL":'||CUSREL||',"SDI":'||SDI||',"LOGICAL":'||LOGICAL_FIELDS||'}';
            INSERT
            INTO USER_PREFERENCES (COLUMN_PREFERENCES, USER_ID) VALUES (UPD_VALUE, 'MINDMAP_SETTINGS_'||USER_IDD );
            SELECT COLUMN_PREFERENCES INTO CUSREL FROM USER_PREFERENCES WHERE USER_ID = 'MINDMAP_ASSERT_HIERARCHY_'||USER_IDD;
            UPD_VALUE := '{"SHW_PNODES":1,"SHW_PNODE_BG":'||CUSREL||'}';
            INSERT INTO USER_PREFERENCES(COLUMN_PREFERENCES, USER_ID) VALUES(UPD_VALUE,'MINDMAP_TV_SETTINGS_'||USER_IDD);
          END;
        END IF;
      END LOOP;
      CLOSE UPGRADE_CURSOR;
      -- DEALLOCATE UPGRADE_CURSOR;
      DELETE FROM USER_PREFERENCES WHERE USER_ID LIKE '%MINDMAP_SHOW_RELATIONSHIPS%';
      DELETE FROM USER_PREFERENCES WHERE USER_ID LIKE '%MINDMAP_CUSTOM_RELATIONS%';
      DELETE FROM USER_PREFERENCES WHERE USER_ID LIKE '%MINDMAP_ASSERT_HIERARCHY%';
      DELETE FROM USER_PREFERENCES WHERE USER_ID LIKE '%MINDMAP_SENSITIVITY_FIELDS%';
      DELETE FROM USER_PREFERENCES WHERE USER_ID LIKE '%MINDMAP_OBJECT_LOGICAL_FIELDS%';
      DELETE FROM USER_PREFERENCES WHERE USER_ID LIKE '%MINDMAP_LAYOUT_TYPE%';
    END;
    END IF;
   END;
  END IF;
END;
/
DECLARE
TABLECHECKERFLAG INT;
BEGIN
    SELECT COUNT(*) INTO TABLECHECKERFLAG FROM ALL_TABLES WHERE OWNER = sys_context( 'userenv', 'current_schema' ) AND TABLE_NAME = UPPER('ROLES_GROUPS');
        IF TABLECHECKERFLAG = 0 THEN
        EXECUTE IMMEDIATE  'CREATE TABLE "ROLES_GROUPS"(
           "RG_ID" NUMBER NOT NULL,
            "RG_NAME" VARCHAR2(255)  NOT NULL,
            "DESCRIPTION" VARCHAR2(4000) NULL,
            "ENABLE" NUMBER(1)  NOT NULL,
            "DISPLAY_ORDER" FLOAT  DEFAULT 0.0 NOT NULL,
            "SYSTEM_BASED" NUMBER(1)  DEFAULT 0 NOT NULL,
            "VALID" NUMBER(1)  DEFAULT 1 NOT NULL,
            CONSTRAINT "PK_RG_ID" PRIMARY KEY(RG_ID)
            )';
    END IF;
END;
/
DECLARE
SEQUENCECHECKERFLAG INT;
BEGIN
    SELECT COUNT(*) INTO SEQUENCECHECKERFLAG FROM ALL_SEQUENCES WHERE SEQUENCE_OWNER = sys_context('userenv', 'current_schema') AND SEQUENCE_NAME = UPPER('ROLES_GROUPS_SEQ');
    IF SEQUENCECHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'CREATE SEQUENCE   "ROLES_GROUPS_SEQ"  MINVALUE 1 MAXVALUE 999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE';
    END IF;
END;
/
DECLARE
TRIGGERCHECKERFLAG INT;
BEGIN
  SELECT COUNT(*)  INTO TRIGGERCHECKERFLAG  FROM all_triggers  WHERE OWNER = sys_context('userenv', 'current_schema') AND trigger_name = UPPER('ROLES_GROUPS_SEQ_INSERT');
  IF TRIGGERCHECKERFLAG = 0 THEN
    EXECUTE IMMEDIATE 'CREATE OR REPLACE TRIGGER  "ROLES_GROUPS_SEQ_INSERT" BEFORE INSERT ON ROLES_GROUPS FOR EACH ROW BEGIN SELECT ROLES_GROUPS_SEQ.NEXTVAL INTO :new.RG_ID FROM DUAL; END;';
    EXECUTE IMMEDIATE 'ALTER TRIGGER  "ROLES_GROUPS_SEQ_INSERT" ENABLE';
  END IF;
END;
/
DECLARE
ROWCHECKKERFLAG INT;
BEGIN
        SELECT COUNT(*) INTO ROWCHECKKERFLAG FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE='ROLES_GROUPS';
        IF ROWCHECKKERFLAG = 0 THEN
            EXECUTE IMMEDIATE 'INSERT INTO ADS_KEY_VALUE_OBJECTS (OBJECT_TYPE,OBJECT_TABLE,OBJECT_TABLE_COLUMN,OBJECT_PARENT_TYPE,OBJECT_PARENT_COLUMN_ID,OBJECT_LEVEL,MODULE_KEY,SYSTEM_BASED,OBJECT_TITLE) SELECT ''ROLES_GROUPS'',''ROLES_GROUPS'',''RG_ID'','''','''',''1'',''com.ads.mm.permission.rsm'',1,''Roles groups'' FROM DUAL';
        END IF;
END;
/
DECLARE
TABLECHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO TABLECHECKERFLAG FROM all_VIEWS WHERE OWNER = sys_context('userenv', 'current_schema') AND VIEW_NAME = UPPER('ROLES_GROUPS_V');
   IF TABLECHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'CREATE VIEW ROLES_GROUPS_V AS SELECT * FROM ROLES_GROUPS WHERE ENABLE = 1 AND VALID = 1';
   END IF;
END;
/
DECLARE
TABLECHECKERFLAG INT;
BEGIN
    SELECT COUNT(*) INTO TABLECHECKERFLAG FROM ALL_CONS_COLUMNS WHERE OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME = UPPER('DQ_VALUE_VOTE') AND CONSTRAINT_NAME = UPPER('FK_DQ_VALUE_VOTE_ROLE_ID');
    IF TABLECHECKERFLAG > 0 THEN
       EXECUTE IMMEDIATE 'ALTER TABLE DQ_VALUE_VOTE DROP CONSTRAINT FK_DQ_VALUE_VOTE_ROLE_ID';
    END IF;
    SELECT COUNT(*) INTO TABLECHECKERFLAG FROM ALL_CONS_COLUMNS WHERE OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME = UPPER('DQ_COLUMN_RESOURCE') AND CONSTRAINT_NAME = UPPER('FK_DQ_VAL_VOTE_ROLE_ID');
    IF TABLECHECKERFLAG > 0 THEN
       EXECUTE IMMEDIATE 'ALTER TABLE DQ_COLUMN_RESOURCE DROP CONSTRAINT FK_DQ_VAL_VOTE_ROLE_ID';
    END IF;
    SELECT COUNT(*) INTO TABLECHECKERFLAG FROM ALL_CONS_COLUMNS WHERE OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME = UPPER('DQ_ATTRIBUTE_VOTE') AND CONSTRAINT_NAME = UPPER('FK_DQ_ATTR_VOTE_ROLE_ID');
    IF TABLECHECKERFLAG > 0 THEN
       EXECUTE IMMEDIATE 'ALTER TABLE DQ_ATTRIBUTE_VOTE DROP CONSTRAINT FK_DQ_ATTR_VOTE_ROLE_ID';
    END IF; 
END;
/
DECLARE
COLUMNCHECKERFLAG INT;
SEQUENCECHECKERFLAG INT;
TRIGGERCHECKERFLAG INT;
BEGIN
    SELECT COUNT(*) INTO COLUMNCHECKERFLAG FROM ALL_TAB_COLUMNS WHERE  OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME = UPPER('SECURITY_ROLES') AND COLUMN_NAME=UPPER('RO_ID');
    IF COLUMNCHECKERFLAG = 0 THEN
        EXECUTE IMMEDIATE 'CREATE TABLE TEMP_SECURITY_ROLES AS ( SELECT * FROM SECURITY_ROLES)';
        EXECUTE IMMEDIATE 'ALTER TABLE ADS_WORKFLOW_STAGE_ROLE DISABLE CONSTRAINT FK_ADS_WRKFLW_ROLE_ID';
        EXECUTE IMMEDIATE 'ALTER TABLE ADS_WORKFLOW_NODE_ROLE DISABLE CONSTRAINT FK_ADS_WF_NODE_ROLE_ID';
        EXECUTE IMMEDIATE 'ALTER TABLE USER_ASSIGNED_ROLES DISABLE CONSTRAINT R_5';
        EXECUTE IMMEDIATE 'ALTER TABLE SECURITY_ROLES DISABLE CONSTRAINT XPKSECURITY_ROLES';
        EXECUTE IMMEDIATE 'DELETE FROM SECURITY_ROLES';
        EXECUTE IMMEDIATE 'ALTER TABLE SECURITY_ROLES ADD RO_ID NUMBER NOT NULL';
        EXECUTE IMMEDIATE 'ALTER TABLE SECURITY_ROLES ADD UNIQUE(RO_ID)';
        EXECUTE IMMEDIATE 'ALTER TABLE SECURITY_ROLES ADD BUSINESS_NAME VARCHAR2(50) ';
        SELECT COUNT(*) INTO SEQUENCECHECKERFLAG FROM ALL_SEQUENCES WHERE SEQUENCE_OWNER = sys_context('userenv', 'current_schema') AND SEQUENCE_NAME = UPPER('SECURITY_ROLES_SEQ');
        IF SEQUENCECHECKERFLAG = 0 THEN
          EXECUTE IMMEDIATE 'CREATE SEQUENCE   "SECURITY_ROLES_SEQ"  MINVALUE 1 MAXVALUE 999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE';
        END IF;
        SELECT COUNT(*)  INTO TRIGGERCHECKERFLAG  FROM all_triggers  WHERE OWNER = sys_context('userenv', 'current_schema') AND trigger_name = UPPER('SECURITY_ROLES_SEQ_INSERT');
        IF TRIGGERCHECKERFLAG = 0 THEN
          EXECUTE IMMEDIATE 'CREATE OR REPLACE TRIGGER  "SECURITY_ROLES_SEQ_INSERT" BEFORE INSERT ON SECURITY_ROLES FOR EACH ROW BEGIN SELECT SECURITY_ROLES_SEQ.NEXTVAL INTO :new.RO_ID FROM DUAL; END;';
          EXECUTE IMMEDIATE 'ALTER TRIGGER  "SECURITY_ROLES_SEQ_INSERT" ENABLE';
        END IF;
        EXECUTE IMMEDIATE 'INSERT INTO SECURITY_ROLES(ROLE_NAME,ROLE_DESCR,CREATED_BY,CREATED_DATETIME,LAST_MODIFIED_DATE_TIME,LAST_MODIFIED_BY,ROLE_ID)
        SELECT ROLE_NAME,ROLE_DESCR,CREATED_BY,CREATED_DATETIME,LAST_MODIFIED_DATE_TIME,LAST_MODIFIED_BY,ROLE_ID FROM TEMP_SECURITY_ROLES';
        EXECUTE IMMEDIATE 'ALTER TABLE SECURITY_ROLES ENABLE CONSTRAINT XPKSECURITY_ROLES';
        EXECUTE IMMEDIATE 'ALTER TABLE ADS_WORKFLOW_STAGE_ROLE ENABLE CONSTRAINT FK_ADS_WRKFLW_ROLE_ID';
        EXECUTE IMMEDIATE 'ALTER TABLE ADS_WORKFLOW_NODE_ROLE ENABLE CONSTRAINT FK_ADS_WF_NODE_ROLE_ID';
        EXECUTE IMMEDIATE 'ALTER TABLE USER_ASSIGNED_ROLES ENABLE CONSTRAINT R_5';
        EXECUTE IMMEDIATE 'DROP TABLE TEMP_SECURITY_ROLES';
        EXECUTE IMMEDIATE 'UPDATE SECURITY_ROLES SET BUSINESS_NAME = ROLE_NAME ' ;
    END IF;
END;
/
DECLARE
TABLECHECKERFLAG INT;
BEGIN
    SELECT COUNT(*) INTO TABLECHECKERFLAG FROM ALL_TABLES WHERE OWNER = sys_context( 'userenv', 'current_schema' ) AND TABLE_NAME = UPPER('GROUP_ASSIGNED_ROLES');
        IF TABLECHECKERFLAG = 0 THEN
        EXECUTE IMMEDIATE  'CREATE TABLE "GROUP_ASSIGNED_ROLES"(
      "GAR_ID" NUMBER NOT NULL,
      "RG_ID" NUMBER NOT NULL,
      "RO_ID" NUMBER NOT NULL,
      CONSTRAINT "PK_GAR_ID" PRIMARY KEY(GAR_ID),
      FOREIGN KEY (RO_ID) REFERENCES SECURITY_ROLES(RO_ID),
      FOREIGN KEY (RG_ID) REFERENCES ROLES_GROUPS(RG_ID)
)';
    END IF;
END;
/
DECLARE
SEQUENCECHECKERFLAG INT;
BEGIN
    SELECT COUNT(*) INTO SEQUENCECHECKERFLAG FROM ALL_SEQUENCES WHERE SEQUENCE_OWNER = sys_context('userenv', 'current_schema') AND SEQUENCE_NAME = UPPER('GROUP_ASSIGNED_ROLES_SEQ');
    IF SEQUENCECHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'CREATE SEQUENCE   "GROUP_ASSIGNED_ROLES_SEQ"  MINVALUE 1 MAXVALUE 999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE';
    END IF;
END;
/
DECLARE
TRIGGERCHECKERFLAG INT;
BEGIN
  SELECT COUNT(*)  INTO TRIGGERCHECKERFLAG  FROM all_triggers  WHERE OWNER = sys_context('userenv', 'current_schema') AND trigger_name = UPPER('GROUP_ASSIGN_ROLES_SEQ_INSERT');
  IF TRIGGERCHECKERFLAG = 0 THEN
    EXECUTE IMMEDIATE 'CREATE OR REPLACE TRIGGER  "GROUP_ASSIGN_ROLES_SEQ_INSERT" BEFORE INSERT ON GROUP_ASSIGNED_ROLES FOR EACH ROW BEGIN SELECT GROUP_ASSIGNED_ROLES_SEQ.NEXTVAL INTO :new.GAR_ID FROM DUAL; END;';
    EXECUTE IMMEDIATE 'ALTER TRIGGER  "GROUP_ASSIGN_ROLES_SEQ_INSERT" ENABLE';
  END IF;
END;
/
DECLARE
TABLECHECKERFLAG INT;
BEGIN
    SELECT COUNT(*) INTO TABLECHECKERFLAG FROM ALL_TABLES WHERE OWNER = sys_context( 'userenv', 'current_schema' ) AND TABLE_NAME = UPPER('OBJECT_ROLE_GROUP_USERS');
        IF TABLECHECKERFLAG = 0 THEN
        EXECUTE IMMEDIATE  'CREATE TABLE "OBJECT_ROLE_GROUP_USERS"(
      "ID" NUMBER NOT NULL,
      "OBJECT_TYPE_ID" NUMBER NOT NULL,
      "OBJECT_ID" NUMBER NOT NULL,
      "RG_ID" NUMBER NOT NULL,
      "USER_ID" NUMBER NOT NULL,
      CONSTRAINT "PK_ID" PRIMARY KEY(ID),
      FOREIGN KEY (RG_ID) REFERENCES ROLES_GROUPS(RG_ID)
)';
    END IF;
END;
/
DECLARE
SEQUENCECHECKERFLAG INT;
BEGIN
    SELECT COUNT(*) INTO SEQUENCECHECKERFLAG FROM ALL_SEQUENCES WHERE SEQUENCE_OWNER = sys_context('userenv', 'current_schema') AND SEQUENCE_NAME = UPPER('OBJECT_ROLE_GROUP_USERS_SEQ');
    IF SEQUENCECHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'CREATE SEQUENCE   "OBJECT_ROLE_GROUP_USERS_SEQ"  MINVALUE 1 MAXVALUE 999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE';
    END IF;
END;
/
DECLARE
TRIGGERCHECKERFLAG INT;
BEGIN
  SELECT COUNT(*)  INTO TRIGGERCHECKERFLAG  FROM all_triggers  WHERE OWNER = sys_context('userenv', 'current_schema') AND trigger_name = UPPER('OBJ_ROL_GROUP_USERS_SEQ_INSERT');
  IF TRIGGERCHECKERFLAG = 0 THEN
    EXECUTE IMMEDIATE 'CREATE OR REPLACE TRIGGER  "OBJ_ROL_GROUP_USERS_SEQ_INSERT" BEFORE INSERT ON OBJECT_ROLE_GROUP_USERS FOR EACH ROW BEGIN SELECT OBJECT_ROLE_GROUP_USERS_SEQ.NEXTVAL INTO :new.ID FROM DUAL; END;';
    EXECUTE IMMEDIATE 'ALTER TRIGGER  "OBJ_ROL_GROUP_USERS_SEQ_INSERT" ENABLE';
  END IF;
END;
/
DECLARE
ROWCHECKKERFLAG INT;
BEGIN
    SELECT COUNT(*) INTO ROWCHECKKERFLAG FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE='RDM_REFERENCE_TABLE';
    IF ROWCHECKKERFLAG = 0 THEN
        EXECUTE IMMEDIATE 'INSERT INTO ADS_KEY_VALUE_OBJECTS (OBJECT_TYPE,OBJECT_TABLE,OBJECT_TABLE_COLUMN,OBJECT_PARENT_TYPE,OBJECT_PARENT_COLUMN_ID,OBJECT_LEVEL,MODULE_KEY,SYSTEM_BASED,OBJECT_TITLE) VALUES(''RDM_REFERENCE_TABLE'',''RDM_REFERENCE_TABLE'',''RDM_REF_TABLE_ID'','''','''',''1'',''com.ads.mm.permission.rdm'',1,''RDM TABLE'')';
    END IF;
END;
/
DECLARE
LENCHECKERFLAG INT;
BEGIN
    SELECT COUNT(*) INTO LENCHECKERFLAG FROM USERS WHERE LENGTH(USER_ID) <50;
    IF LENCHECKERFLAG > 0 THEN
        EXECUTE IMMEDIATE 'ALTER TABLE ADS_KEY_VALUE MODIFY CREATED_BY VARCHAR2(50)';
        EXECUTE IMMEDIATE 'ALTER TABLE ADS_KEY_VALUE MODIFY LAST_MODIFIED_BY VARCHAR2(50)';
        EXECUTE IMMEDIATE 'ALTER TABLE ADS_PROFILES MODIFY OWNER_USER_ID VARCHAR2(50)';
        EXECUTE IMMEDIATE 'ALTER TABLE USERS MODIFY USER_ID VARCHAR2(50)';
        EXECUTE IMMEDIATE 'ALTER TABLE USERS MODIFY CREATED_BY VARCHAR2(50)';
        EXECUTE IMMEDIATE 'ALTER TABLE USERS MODIFY LAST_MODIFIED_BY VARCHAR2(50)';
        EXECUTE IMMEDIATE 'ALTER TABLE OBJECT_USER MODIFY USER_ID VARCHAR2(50)';
        EXECUTE IMMEDIATE 'ALTER TABLE CSM_MAP_CAT_USERS MODIFY USER_ID VARCHAR2(50)';
        EXECUTE IMMEDIATE 'ALTER TABLE CSM_CODESET_CAT_USERS MODIFY USER_ID VARCHAR2(50)';
        EXECUTE IMMEDIATE 'ALTER TABLE CHAT_USER_MESSAGES MODIFY USER_ID VARCHAR2(50)';
        EXECUTE IMMEDIATE 'ALTER TABLE CHAT_THREAD_USER MODIFY USER_ID VARCHAR2(50)';
        EXECUTE IMMEDIATE 'ALTER TABLE PROJECT_RESOURCES MODIFY USER_ID VARCHAR2(50)';
        EXECUTE IMMEDIATE 'ALTER TABLE RDM_REF_TABLE_USERS MODIFY USER_ID VARCHAR2(50)';
        EXECUTE IMMEDIATE 'ALTER TABLE OBJECT_CONFIGURATIONS MODIFY CONFIGURATION_USER VARCHAR2(50)';
        EXECUTE IMMEDIATE 'ALTER TABLE CHAT_MESSAGES MODIFY CREATED_BY VARCHAR2(50)';
        EXECUTE IMMEDIATE 'ALTER TABLE CHAT_THREAD MODIFY CREATED_BY VARCHAR2(50)';
        EXECUTE IMMEDIATE 'ALTER TABLE CHAT_THREAD MODIFY MODIFIED_BY VARCHAR2(50)';
        EXECUTE IMMEDIATE 'ALTER TABLE SYS_CON_ENVIRONMENTS MODIFY LAST_MODIFIED_BY VARCHAR2(50)';
        EXECUTE IMMEDIATE 'ALTER TABLE SYS_CON_ENVIRONMENTS MODIFY CREATED_BY VARCHAR2(50)';
        EXECUTE IMMEDIATE 'ALTER TABLE SYS_CON_ENVIRONMENTS MODIFY USER_ID VARCHAR2(50)';
        EXECUTE IMMEDIATE 'ALTER TABLE SPECIFICATION_LOCK MODIFY USER_ID VARCHAR2(50)';
        EXECUTE IMMEDIATE 'ALTER TABLE RM_HISTORY MODIFY USER_ID VARCHAR2(50)';
        EXECUTE IMMEDIATE 'ALTER TABLE RDM_REF_FOLDER_USERS MODIFY USER_ID VARCHAR2(50)';
        EXECUTE IMMEDIATE 'ALTER TABLE USER_ASSIGNED_ROLES MODIFY USER_ID VARCHAR2(50)';
        EXECUTE IMMEDIATE 'ALTER TABLE CATFX_DIALOG_COMPONENT MODIFY CREATED_BY VARCHAR2(50)';
        EXECUTE IMMEDIATE 'ALTER TABLE CATFX_DIALOG_COMPONENT MODIFY LAST_MODIFIED_BY VARCHAR2(50)';
        EXECUTE IMMEDIATE 'ALTER TABLE CATFX_PROFILE_COMPONENT MODIFY CREATED_BY VARCHAR2(50)';
        EXECUTE IMMEDIATE 'ALTER TABLE CATFX_PROFILE_COMPONENT MODIFY LAST_MODIFIED_BY VARCHAR2(50)';
        EXECUTE IMMEDIATE 'ALTER TABLE CATFX_SCRIPT MODIFY CREATED_BY VARCHAR2(50)';
        EXECUTE IMMEDIATE 'ALTER TABLE CATFX_WORKFLOW MODIFY CREATED_BY VARCHAR2(50)';
        EXECUTE IMMEDIATE 'ALTER TABLE CATFX_WORKFLOW MODIFY LAST_MODIFIED_BY VARCHAR2(50)';
        EXECUTE IMMEDIATE 'ALTER TABLE CATFX_WORKFLOW_COMPONENT MODIFY CREATED_BY VARCHAR2(50)';
        EXECUTE IMMEDIATE 'ALTER TABLE CATFX_WORKFLOW_COMPONENT MODIFY LAST_MODIFIED_BY VARCHAR2(50)';
        EXECUTE IMMEDIATE 'ALTER TABLE CATFX_WORKFLOW_CONNECTION MODIFY CREATED_BY VARCHAR2(50)';
        EXECUTE IMMEDIATE 'ALTER TABLE CATFX_WORKFLOW_CONNECTION MODIFY LAST_MODIFIED_BY VARCHAR2(50)';
        EXECUTE IMMEDIATE 'ALTER TABLE CSM_CODE_VALUE MODIFY CREATED_BY VARCHAR2(50)';
        EXECUTE IMMEDIATE 'ALTER TABLE CSM_CODE_VALUE MODIFY LAST_MODIFIED_BY VARCHAR2(50)';
        EXECUTE IMMEDIATE 'ALTER TABLE CSM_CODESET MODIFY CREATED_BY VARCHAR2(50)';
        EXECUTE IMMEDIATE 'ALTER TABLE CSM_CODESET MODIFY LAST_MODIFIED_BY VARCHAR2(50)';
        EXECUTE IMMEDIATE 'ALTER TABLE CSM_CODESET MODIFY CODESET_LOCKED_BY VARCHAR2(50)';
        EXECUTE IMMEDIATE 'ALTER TABLE CSM_MAPPING_DETAILS MODIFY CSM_MAP_LOCKED_BY VARCHAR2(50)';
        EXECUTE IMMEDIATE 'ALTER TABLE FORM_FIELD_DATA MODIFY CREATED_BY VARCHAR2(50)';
        EXECUTE IMMEDIATE 'ALTER TABLE FORM_FIELD_DATA MODIFY LAST_MODIFIED_BY VARCHAR2(50)';
        EXECUTE IMMEDIATE 'ALTER TABLE MAPPING_DOCUMENTS MODIFY LAST_MODIFIED_BY VARCHAR2(50)';
        EXECUTE IMMEDIATE 'ALTER TABLE MAPPING_DOCUMENTS MODIFY CREATED_BY VARCHAR2(50)';
        EXECUTE IMMEDIATE 'ALTER TABLE MAPPING_DOCUMENTS MODIFY APPROVED_BY VARCHAR2(50)';
        EXECUTE IMMEDIATE 'ALTER TABLE OBJECT_DOCUMENT MODIFY CREATED_BY VARCHAR2(50)';
        EXECUTE IMMEDIATE 'ALTER TABLE OBJECT_DOCUMENT MODIFY LAST_MODIFIED_BY VARCHAR2(50)';
        EXECUTE IMMEDIATE 'ALTER TABLE OBJECT_DOCUMENT MODIFY APPROVED_BY VARCHAR2(50)';
        EXECUTE IMMEDIATE 'ALTER TABLE PLUGINS MODIFY CREATED_BY VARCHAR2(50)';
        EXECUTE IMMEDIATE 'ALTER TABLE PLUGINS MODIFY LAST_MODIFIED_BY VARCHAR2(50)';
        EXECUTE IMMEDIATE 'ALTER TABLE PROJECT MODIFY CREATED_BY VARCHAR2(50)';
        EXECUTE IMMEDIATE 'ALTER TABLE PROJECT MODIFY LAST_MODIFIED_BY VARCHAR2(50)';
        EXECUTE IMMEDIATE 'ALTER TABLE PROJECT_DOCUMENT_TEMPLATES MODIFY LAST_MODIFIED_BY VARCHAR2(50)';
        EXECUTE IMMEDIATE 'ALTER TABLE PROJECT_DOCUMENT_TEMPLATES MODIFY CREATED_BY VARCHAR2(50)';
        EXECUTE IMMEDIATE 'ALTER TABLE PROJECT_DOCUMENTS MODIFY CREATED_BY VARCHAR2(50)';
        EXECUTE IMMEDIATE 'ALTER TABLE PROJECT_DOCUMENTS MODIFY LAST_MODIFIED_BY VARCHAR2(50)';
        EXECUTE IMMEDIATE 'ALTER TABLE PROJECT_RESOURCES MODIFY CREATED_BY VARCHAR2(50)';
        EXECUTE IMMEDIATE 'ALTER TABLE PROJECT_RESOURCES MODIFY LAST_MODIFIED_BY VARCHAR2(50)';
        EXECUTE IMMEDIATE 'ALTER TABLE SECURITY_ROLES MODIFY CREATED_BY VARCHAR2(50)';
        EXECUTE IMMEDIATE 'ALTER TABLE SECURITY_ROLES MODIFY LAST_MODIFIED_BY VARCHAR2(50)';
        EXECUTE IMMEDIATE 'ALTER TABLE SYSTEM_TABLE_METADATA MODIFY LAST_MODIFIED_BY VARCHAR2(50)';
        EXECUTE IMMEDIATE 'ALTER TABLE SYSTEM_TABLE_METADATA MODIFY CREATED_BY VARCHAR2(50)';
        EXECUTE IMMEDIATE 'ALTER TABLE SYSTEM_TABLE_COLUMNS_METADATA MODIFY LAST_MODIFIED_BY VARCHAR2(50)';
        EXECUTE IMMEDIATE 'ALTER TABLE SYSTEM_TABLE_COLUMNS_METADATA MODIFY CREATED_BY VARCHAR2(50)';
        EXECUTE IMMEDIATE 'ALTER TABLE SYSTEM_DOCUMENTS MODIFY LAST_MODIFIED_BY VARCHAR2(50)';
        EXECUTE IMMEDIATE 'ALTER TABLE SYSTEM_DOCUMENTS MODIFY CREATED_BY VARCHAR2(50)';
        EXECUTE IMMEDIATE 'ALTER TABLE SYSTEM_DOCUMENTS MODIFY APPROVED_BY VARCHAR2(50)';
        EXECUTE IMMEDIATE 'ALTER TABLE SYSTEM_DEFINITION_DETAILS MODIFY CREATED_BY VARCHAR2(50)';
        EXECUTE IMMEDIATE 'ALTER TABLE SYSTEM_DEFINITION_DETAILS MODIFY LAST_MODIFIED_BY VARCHAR2(50)';
        EXECUTE IMMEDIATE 'ALTER TABLE SM_CLASSIFICATION_TABLE MODIFY CREATED_BY VARCHAR2(50)';
        EXECUTE IMMEDIATE 'ALTER TABLE SM_CLASSIFICATION_TABLE MODIFY LAST_MODIFIED_BY VARCHAR2(50)';
        EXECUTE IMMEDIATE 'ALTER TABLE SM_CLASSIFICATION_COLUMN MODIFY CREATED_BY VARCHAR2(50)';
        EXECUTE IMMEDIATE 'ALTER TABLE SM_CLASSIFICATION_COLUMN MODIFY LAST_MODIFIED_BY VARCHAR2(50)';
        EXECUTE IMMEDIATE 'ALTER TABLE TCM_TESTCASE_TYPE MODIFY MODIFIED_BY VARCHAR2(50)';
        EXECUTE IMMEDIATE 'ALTER TABLE TCM_TESTCASE_TYPE MODIFY CREATED_BY VARCHAR2(50)';
        EXECUTE IMMEDIATE 'ALTER TABLE TCM_TESTCASE_DOCS MODIFY LAST_MODIFIED_BY VARCHAR2(50)';
        EXECUTE IMMEDIATE 'ALTER TABLE TCM_TESTCASE_DOCS MODIFY CREATED_BY VARCHAR2(50)';
        EXECUTE IMMEDIATE 'ALTER TABLE TCM_TESTCASE_DOCS MODIFY APPROVED_BY VARCHAR2(50)';
        EXECUTE IMMEDIATE 'ALTER TABLE TRANSFORMATIONS_HISTORY MODIFY LAST_MODIFIED_BY VARCHAR2(50)';
        EXECUTE IMMEDIATE 'ALTER TABLE TRANSFORMATIONS_HISTORY MODIFY CREATED_BY VARCHAR2(50)';
        EXECUTE IMMEDIATE 'ALTER TABLE TRANSFORMATIONS MODIFY LAST_MODIFIED_BY VARCHAR2(50)';
        EXECUTE IMMEDIATE 'ALTER TABLE TRANSFORMATIONS MODIFY CREATED_BY VARCHAR2(50)';
    END IF;
END;
/
DECLARE
TABLECHECKERFLAG INT;
ROWCHECKKERFLAG INT;
VERSIONCHECKER NUMBER;
BEGIN
    SELECT COUNT(*) INTO VERSIONCHECKER FROM ADS_MM_VERSION WHERE VALUE <= 10.1;
    IF VERSIONCHECKER > 0 THEN
        SELECT COUNT(*) INTO TABLECHECKERFLAG FROM ALL_TABLES WHERE OWNER = sys_context( 'userenv', 'current_schema' ) AND TABLE_NAME = UPPER('TEMP_FORM_FIELD_DATA');
        IF TABLECHECKERFLAG = 0 THEN
            EXECUTE IMMEDIATE  'CREATE TABLE TEMP_FORM_FIELD_DATA AS WITH CTE1 AS (SELECT FIELD_DATA_ID, FIELD_ID, FIELD_DATA, SUBSTR(FIELD_DATA, 1, 50) "FIELD_DATA_NEW", FIELD_DESCRIPTION, IS_PUBLISHED, IS_SYSTEM_BASED, CREATED_BY, CREATED_DATE, LAST_MODIFIED_BY, LAST_MODIFIED_DATE FROM FORM_FIELD_DATA FFD) SELECT * FROM CTE1';
        END IF;
    SELECT COUNT(*) INTO ROWCHECKKERFLAG FROM ROLES_GROUPS WHERE RG_NAME='Data Steward';
    IF ROWCHECKKERFLAG = 0 THEN
        EXECUTE IMMEDIATE 'INSERT INTO ROLES_GROUPS(RG_NAME,DESCRIPTION,ENABLE,DISPLAY_ORDER,SYSTEM_BASED) VALUES (''Data Steward'','''',1,1.0,1)';
        EXECUTE IMMEDIATE 'INSERT INTO ROLES_GROUPS(RG_NAME,DESCRIPTION,ENABLE,DISPLAY_ORDER,SYSTEM_BASED) VALUES (''Data Owner'','''',1,2.0,1)';
        EXECUTE IMMEDIATE 'INSERT INTO ROLES_GROUPS(RG_NAME,DESCRIPTION,ENABLE,DISPLAY_ORDER,SYSTEM_BASED) VALUES (''Technical Data Steward'','''',1,3.0,1)';
        SELECT COUNT(*) INTO ROWCHECKKERFLAG FROM SECURITY_ROLES WHERE ROLE_ID ='com.ads.roles.LegacyDataSteward';
        IF ROWCHECKKERFLAG = 0 THEN
            EXECUTE IMMEDIATE 'INSERT INTO SECURITY_ROLES(ROLE_NAME,ROLE_DESCR,CREATED_BY,CREATED_DATETIME,ROLE_ID,BUSINESS_NAME) VALUES(''Legacy Data Steward'',''This is the older data steward role that was supported till version 10.1. This is a default role that is being used to migrate the old data steward users to the new structure with version 10.2.'',''System'',(SELECT SYSDATE FROM DUAL),''com.ads.roles.LegacyDataSteward'',''Legacy Data Steward'')';
        END IF;
        SELECT COUNT(*) INTO ROWCHECKKERFLAG FROM GROUP_ASSIGNED_ROLES WHERE RG_ID = (SELECT RG_ID FROM ROLES_GROUPS WHERE RG_NAME='Data Steward');
        IF ROWCHECKKERFLAG = 0 THEN
            EXECUTE IMMEDIATE 'INSERT INTO USERS ( USER_ID, USER_FULL_NAME, DEFAULT_ROLE, USER_PASSWORD, CREATED_BY, CREATED_DATETIME, LAST_MODIFIED_BY, LAST_MODIFIED_DATE_TIME, USER_LANGUAGE, LANDED_MODULE, EXTERNAL_USER, ACCOUNT_STATUS, FAILED_LOGIN_ATTEMPTS ) WITH CTE1 AS ( SELECT field_data_new, field_data_new "USERNAME", ''admin'' "DEFAULT_ROLE", '' '' "USER_PASSWORD", created_by, created_date, last_modified_by, last_modified_date, ''english_en_us'' "USER_LANGUAGE", ''com.ads.mm.permission.mm'' "LANDED_MODULE", ''N'' "EXTERNAL_USER", ''E'' "ACCOUNT_STATUS", 0 "FAILED_LOGIN_ATTEMPTS" FROM temp_form_field_data WHERE field_id = ( SELECT field_id FROM form_field WHERE field_name = ''DATASTEWARD'') AND NOT EXISTS ( SELECT 1 FROM USERS WHERE USER_ID = field_data_new OR USER_FULL_NAME=field_data_new) ) , CTE2 AS ( SELECT FFD.field_data_new, FFD.field_data_new "USERNAME", ''admin'' "DEFAULT_ROLE", '' '' "USER_PASSWORD", FFD.created_by, FFD.created_date, FFD.last_modified_by, FFD.last_modified_date, ''english_en_us'' "USER_LANGUAGE", ''com.ads.mm.permission.mm'' "LANDED_MODULE", ''N'' "EXTERNAL_USER", ''E'' "ACCOUNT_STATUS", 0 "FAILED_LOGIN_ATTEMPTS" FROM TEMP_FORM_FIELD_DATA FFD JOIN USERS U ON U.USER_FULL_NAME = FFD.FIELD_DATA_NEW WHERE FIELD_ID = ( SELECT FIELD_ID FROM FORM_FIELD WHERE FIELD_NAME = ''DATASTEWARD'') AND NOT EXISTS ( SELECT 1 FROM USERS WHERE USER_ID = field_data_new) GROUP BY FFD.FIELD_DATA_NEW, FFD.CREATED_BY, FFD.CREATED_DATE, FFD.LAST_MODIFIED_BY, FFD.LAST_MODIFIED_DATE HAVING COUNT(ID) > 1 )SELECT * FROM CTE1 UNION SELECT * FROM CTE2';
            EXECUTE IMMEDIATE 'INSERT INTO GROUP_ASSIGNED_ROLES(RG_ID,RO_ID) VALUES((SELECT RG_ID FROM ROLES_GROUPS WHERE RG_NAME = ''Data Steward''),(SELECT RO_ID FROM SECURITY_ROLES SR WHERE ROLE_ID = ''com.ads.roles.LegacyDataSteward'')) ';
            EXECUTE IMMEDIATE 'INSERT INTO USER_ASSIGNED_ROLES ( USER_ID, ROLE_ID ) WITH ASSIGN_ROLE_CTE1 AS ( SELECT U.USER_ID "USER_ID", ''com.ads.roles.LegacyDataSteward'' "ROLE_ID", FFD.FIELD_DATA_NEW FROM TEMP_FORM_FIELD_DATA FFD JOIN USERS U ON U.USER_ID = FFD.FIELD_DATA_NEW WHERE FFD.FIELD_ID = ( SELECT FIELD_ID FROM FORM_FIELD WHERE FIELD_NAME = ''DATASTEWARD'' ) GROUP BY U.USER_ID, FFD.FIELD_DATA_NEW ) , ASSIGN_ROLE_CTE2 AS ( SELECT U.USER_ID "USER_ID", ''com.ads.roles.LegacyDataSteward'' "ROLE_ID", FFD.FIELD_DATA_NEW FROM TEMP_FORM_FIELD_DATA FFD JOIN USERS U ON U.USER_FULL_NAME = FFD.FIELD_DATA_NEW WHERE FFD.FIELD_ID = ( SELECT FIELD_ID FROM FORM_FIELD WHERE FIELD_NAME = ''DATASTEWARD'' ) AND FFD.FIELD_DATA_NEW NOT IN ( SELECT FIELD_DATA_NEW FROM ASSIGN_ROLE_CTE1) GROUP BY U.USER_ID, FFD.FIELD_DATA_NEW ) , ASSIGN_ROLE_CTE AS ( SELECT USER_ID, ROLE_ID FROM ASSIGN_ROLE_CTE1 UNION SELECT USER_ID, ROLE_ID FROM ASSIGN_ROLE_CTE2 )SELECT USER_ID, ROLE_ID FROM ASSIGN_ROLE_CTE CTE WHERE NOT EXISTS ( SELECT 1 FROM USER_ASSIGNED_ROLES T WHERE T.USER_ID = CTE.USER_ID AND T.ROLE_ID = CTE.ROLE_ID )';
            EXECUTE IMMEDIATE 'INSERT INTO ADS_OBJECT_TO_OBJECT_SCOPE(OBJECT_TYPE_ID,OBJECT_ID,SCOPE_OBJECT_TYPE_ID,SCOPE_OBJECT_ID) WITH ROOT_CAT_CTE AS( SELECT CATEGORY_ID, PARENT_CATEGORY_ID, connect_by_root CATEGORY_ID "ROOT_CAT_ID" FROM BG_CATEGORIES BC START WITH BC.PARENT_CATEGORY_ID = -1 CONNECT BY PRIOR BC.CATEGORY_ID = BC.PARENT_CATEGORY_ID ), DS_CTE AS( SELECT FFD.* FROM FORM_FIELD_DATA FFD JOIN FORM_FIELD FF ON FFD.FIELD_ID = FF.FIELD_ID WHERE FF.FIELD_NAME =''DATASTEWARD'' ), BT_CTE AS (SELECT (SELECT OBJECT_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE = ''BGM_TERM_CATALOG'') "OBJECT_TYPE_ID", BT.CATEGORY_ID "OBJECT_ID",(SELECT OBJECT_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE = ''ADS_SECURITY_ROLE'') "SCOPE_OBJECT_TYPE_ID",''com.ads.roles.LegacyDataSteward'' "SCOPE_OBJECT_ID" FROM BUSINESS_TERMS BT JOIN DS_CTE DS ON DS.FIELD_DATA_ID = BT.DATA_STEWARD_NAME GROUP BY CATEGORY_ID), BP_CTE AS (SELECT (SELECT OBJECT_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE = ''BGM_POLICY_CATALOG'') "OBJECT_TYPE_ID",BP.CATALOG_ID "OBJECT_ID",(SELECT OBJECT_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE = ''ADS_SECURITY_ROLE'') "SCOPE_OBJECT_TYPE_ID",''com.ads.roles.LegacyDataSteward'' "SCOPE_OBJECT_ID" FROM BG_POLICIES BP JOIN DS_CTE DS ON DS.FIELD_DATA_ID = BP.DATA_STEWARD_ID GROUP BY CATALOG_ID), BR_CTE AS (SELECT (SELECT OBJECT_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE = ''BGM_RULE_CATALOG'') "OBJECT_TYPE_ID",BR.CATALOG_ID "OBJECT_ID",(SELECT OBJECT_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE = ''ADS_SECURITY_ROLE'') "SCOPE_OBJECT_TYPE_ID",''com.ads.roles.LegacyDataSteward'' "SCOPE_OBJECT_ID" FROM BG_BUSINESS_RULES BR JOIN DS_CTE DS ON DS.FIELD_DATA_ID = BR.DATA_STEWARD_ID GROUP BY CATALOG_ID), RESULT_CTE AS (SELECT * FROM BT_CTE "BT" WHERE NOT EXISTS (SELECT 1 FROM ADS_OBJECT_TO_OBJECT_SCOPE T WHERE T.OBJECT_ID = BT.OBJECT_ID AND T.OBJECT_TYPE_ID = BT.OBJECT_TYPE_ID AND T.SCOPE_OBJECT_ID = BT.SCOPE_OBJECT_ID) UNION ALL SELECT * FROM BP_CTE BP WHERE NOT EXISTS (SELECT 1 FROM ADS_OBJECT_TO_OBJECT_SCOPE T WHERE T.OBJECT_ID = BP.OBJECT_ID AND T.OBJECT_TYPE_ID = BP.OBJECT_TYPE_ID AND T.SCOPE_OBJECT_ID = BP.SCOPE_OBJECT_ID) UNION ALL SELECT * FROM BR_CTE BR WHERE NOT EXISTS (SELECT 1 FROM ADS_OBJECT_TO_OBJECT_SCOPE T WHERE T.OBJECT_ID = BR.OBJECT_ID AND T.OBJECT_TYPE_ID = BR.OBJECT_TYPE_ID AND T.SCOPE_OBJECT_ID = BR.SCOPE_OBJECT_ID)) SELECT DISTINCT OBJECT_TYPE_ID, RT.ROOT_CAT_ID,SCOPE_OBJECT_TYPE_ID,SCOPE_OBJECT_ID FROM RESULT_CTE RC JOIN ROOT_CAT_CTE RT ON RC.OBJECT_ID = RT.CATEGORY_ID';
            EXECUTE IMMEDIATE 'INSERT INTO OBJECT_ROLE_GROUP_USERS (OBJECT_TYPE_ID, OBJECT_ID, RG_ID, USER_ID) WITH TYPE_IDS_CTE AS (SELECT (SELECT RG_ID FROM ROLES_GROUPS WHERE RG_NAME = ''Data Steward'') "RG_ID", (SELECT OBJECT_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE = ''BGM_TERM'') "TERM_ID", (SELECT OBJECT_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE = ''BGM_POLICY'') "POLICY_ID", (SELECT OBJECT_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE = ''BGM_RULE'') "RULE_ID" FROM DUAL), CTE1 AS (SELECT FIELD_DATA_ID, FIELD_ID, FIELD_DATA, TRIM(SUBSTR(FIELD_DATA, 1, 50)) "FIELD_DATA_NEW" FROM FORM_FIELD_DATA FFD), USERnAMES AS (SELECT user_full_name, Max(id) as id FROM users GROUP BY user_full_name), CTE2 AS (SELECT CT1.*, U.USER_ID, U.USER_FULL_NAME, U.ID FROM CTE1 CT1 LEFT JOIN USERS U ON U.USER_ID = CT1.FIELD_DATA_NEW), CTE3 AS (SELECT CT1.*, us.USER_ID, U.USER_FULL_NAME, U.ID FROM CTE1 CT1 LEFT JOIN USERnAMES U ON U.user_full_name = CT1.FIELD_DATA_NEW join users us on us.id = u.id WHERE CT1.FIELD_DATA_ID IN (SELECT C2.FIELD_DATA_ID FROM CTE2 C2 WHERE USER_ID IS NULL)), CT4 AS (select * from cte2 WHERE USER_ID IS NOT NULL UNION select * from cte3 WHERE USER_ID IS NOT NULL) SELECT IDS.TERM_ID OBJECT_TYPE_ID, BT.BUS_TERM_ID OBJECT_ID, IDS.RG_ID, C4.ID FROM BUSINESS_TERMS BT JOIN CT4 C4 ON BT.DATA_STEWARD_NAME = C4.FIELD_DATA_ID CROSS JOIN TYPE_IDS_CTE IDS UNION SELECT IDS.POLICY_ID OBJECT_TYPE_ID, BP.ID OBJECT_ID, IDS.RG_ID, C4.ID FROM BG_POLICIES BP JOIN CT4 C4 ON BP.DATA_STEWARD_ID = C4.FIELD_DATA_ID CROSS JOIN TYPE_IDS_CTE IDS UNION SELECT IDS.RULE_ID OBJECT_TYPE_ID, BR.ID OBJECT_ID, IDS.RG_ID, C4.ID FROM BG_BUSINESS_RULES BR JOIN CT4 C4 ON BR.DATA_STEWARD_ID = C4.FIELD_DATA_ID CROSS JOIN TYPE_IDS_CTE IDS';
                
            EXECUTE IMMEDIATE 'CREATE TABLE SM_DS_UPDATE AS WITH CTE1 AS (SELECT FIELD_DATA_ID, FIELD_ID, FIELD_DATA, TRIM(SUBSTR(FIELD_DATA, 1, 50)) "FIELD_DATA_NEW" FROM FORM_FIELD_DATA FFD),USERnAMES AS (SELECT user_full_name, Max(id) as id FROM users GROUP BY user_full_name), CTE2 AS (SELECT CT1.*, U.USER_ID, U.USER_FULL_NAME, U.ID FROM CTE1 CT1 LEFT JOIN USERS U ON U.USER_ID = CT1.FIELD_DATA_NEW),CTE3 AS (SELECT CT1.*, us.USER_ID, U.USER_FULL_NAME, U.ID FROM CTE1 CT1 LEFT JOIN USERnAMES U ON U.user_full_name = CT1.FIELD_DATA_NEW join users us on us.id = u.id WHERE CT1.FIELD_DATA_ID IN (SELECT C2.FIELD_DATA_ID FROM CTE2 C2 WHERE USER_ID IS NULL)),CT4 AS (select * from cte2 WHERE USER_ID IS NOT NULL UNION select * from cte3 WHERE USER_ID IS NOT NULL), CT5 AS (SELECT * FROM CT4 C4 WHERE C4.FIELD_DATA_ID IN (SELECT Max(FIELD_DATA_ID) FROM CT4 GROUP BY FIELD_DATA_NEW)) SELECT * FROM CT5 ';
            EXECUTE IMMEDIATE 'UPDATE SYSTEM_DEFINITION_DETAILS T1 SET (DATA_STEWARD_NAME) = (SELECT USER_FULL_NAME FROM SM_DS_UPDATE T2                             WHERE T1.DATA_STEWARD_NAME = T2.FIELD_DATA) WHERE EXISTS ( SELECT 1 FROM SM_DS_UPDATE T2 WHERE T1.DATA_STEWARD_NAME = T2.FIELD_DATA )';            
            EXECUTE IMMEDIATE 'UPDATE SYS_CON_ENVIRONMENTS T1 SET (DATA_STEWARD_NAME) = (SELECT USER_FULL_NAME FROM SM_DS_UPDATE T2                           WHERE T1.DATA_STEWARD_NAME = T2.FIELD_DATA) WHERE EXISTS ( SELECT 1 FROM SM_DS_UPDATE T2 WHERE T1.DATA_STEWARD_NAME = T2.FIELD_DATA )';            
            EXECUTE IMMEDIATE 'UPDATE SYSTEM_TABLE_METADATA T1 SET (DATA_STEWARD_NAME) = (SELECT USER_FULL_NAME FROM SM_DS_UPDATE T2                           WHERE T1.DATA_STEWARD_NAME = T2.FIELD_DATA) WHERE EXISTS ( SELECT 1 FROM SM_DS_UPDATE T2 WHERE T1.DATA_STEWARD_NAME = T2.FIELD_DATA )';            
            EXECUTE IMMEDIATE 'UPDATE SYSTEM_TABLE_METADATA T1 SET (DATA_STEWARD_NAME) = (SELECT USER_FULL_NAME FROM SM_DS_UPDATE T2                           WHERE T1.DATA_STEWARD_NAME = T2.FIELD_DATA) WHERE EXISTS ( SELECT 1 FROM SM_DS_UPDATE T2 WHERE T1.DATA_STEWARD_NAME = T2.FIELD_DATA )';            
            EXECUTE IMMEDIATE 'UPDATE SYSTEM_TABLE_COLUMNS_METADATA T1 SET (DATA_STEWARD_NAME) = (SELECT USER_FULL_NAME FROM SM_DS_UPDATE T2                             WHERE T1.DATA_STEWARD_NAME = T2.FIELD_DATA) WHERE EXISTS ( SELECT 1 FROM SM_DS_UPDATE T2 WHERE T1.DATA_STEWARD_NAME = T2.FIELD_DATA )';            
            EXECUTE IMMEDIATE 'UPDATE RDM_REFERENCE_TABLE T1 SET (RDM_REF_TAB_DATA_STEWARD) = (SELECT USER_FULL_NAME FROM SM_DS_UPDATE T2                                   WHERE T1.RDM_REF_TAB_DATA_STEWARD = T2.FIELD_DATA) WHERE EXISTS ( SELECT 1 FROM SM_DS_UPDATE T2 WHERE T1.RDM_REF_TAB_DATA_STEWARD = T2.FIELD_DATA )';            
            END IF;
        END IF;
    END IF;
END;
/
DECLARE
TABLECHECKERFLAG INT;
BEGIN
    SELECT COUNT(*) INTO TABLECHECKERFLAG FROM ALL_TABLES WHERE OWNER = sys_context( 'userenv', 'current_schema' ) AND TABLE_NAME = UPPER('TEMP_FORM_FIELD_DATA');
        IF TABLECHECKERFLAG = 1 THEN
     EXECUTE IMMEDIATE  'DROP TABLE TEMP_FORM_FIELD_DATA';
    END IF;
END;
/
DECLARE
TABLECHECKERFLAG INT;
BEGIN
    SELECT COUNT(*) INTO TABLECHECKERFLAG FROM ALL_TABLES WHERE OWNER = sys_context( 'userenv', 'current_schema' ) AND TABLE_NAME = UPPER('SM_DS_UPDATE');
        IF TABLECHECKERFLAG = 1 THEN
     EXECUTE IMMEDIATE  'DROP TABLE SM_DS_UPDATE';
    END IF;
END;
/
DECLARE
   VIEWCHECKERFLAG INT;
   VERSIONCHECKER NUMBER;
BEGIN
   SELECT COUNT(*) INTO VIEWCHECKERFLAG FROM ALL_VIEWS WHERE OWNER = sys_context('userenv', 'current_schema') AND VIEW_NAME = UPPER('ADS_WORKFLOW_NODE_ROLE_V');
    SELECT COUNT(*) INTO VERSIONCHECKER FROM ADS_MM_VERSION WHERE VALUE <= 10.1;
    IF VERSIONCHECKER > 0 AND VIEWCHECKERFLAG = 1 THEN
       EXECUTE IMMEDIATE 'DROP VIEW ADS_WORKFLOW_NODE_ROLE_V';
	END IF;
END;
/
DECLARE
   COLUMNCHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO COLUMNCHECKERFLAG FROM ALL_TAB_COLUMNS WHERE OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME = UPPER('ADS_WORKFLOW_STAGE_ROLE') AND COLUMN_NAME=UPPER('OBJECT_ID');
   IF COLUMNCHECKERFLAG = 0 THEN
		EXECUTE IMMEDIATE 'DELETE FROM ADS_WORKFLOW_STAGE_ROLE WHERE ROLE_ID IS NULL';
		EXECUTE IMMEDIATE 'ALTER TABLE ADS_WORKFLOW_STAGE_ROLE DROP CONSTRAINT FK_ADS_WRKFLW_ROLE_ID';
		EXECUTE IMMEDIATE 'ALTER TABLE ADS_WORKFLOW_STAGE_ROLE DROP CONSTRAINT UK_ADS_WF_STAGE_ROLE_ID';
		EXECUTE IMMEDIATE 'ALTER TABLE ADS_WORKFLOW_STAGE_ROLE ADD OBJECT_TYPE_ID NUMBER';
		EXECUTE IMMEDIATE 'ALTER TABLE ADS_WORKFLOW_STAGE_ROLE ADD OBJECT_ID NUMBER';
		EXECUTE IMMEDIATE 'UPDATE ADS_WORKFLOW_STAGE_ROLE SET OBJECT_ID = (select SECURITY_ROLES.RO_ID FROM SECURITY_ROLES WHERE SECURITY_ROLES.ROLE_ID = ADS_WORKFLOW_STAGE_ROLE.ROLE_ID)';
		EXECUTE IMMEDIATE 'UPDATE ADS_WORKFLOW_STAGE_ROLE SET OBJECT_TYPE_ID = (SELECT OBJECT_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE = ''ADS_SECURITY_ROLE'')';
		EXECUTE IMMEDIATE 'ALTER TABLE ADS_WORKFLOW_STAGE_ROLE MODIFY OBJECT_TYPE_ID NUMBER NOT NULL';
		EXECUTE IMMEDIATE 'ALTER TABLE ADS_WORKFLOW_STAGE_ROLE MODIFY OBJECT_ID NUMBER NOT NULL';
		EXECUTE IMMEDIATE 'ALTER TABLE ADS_WORKFLOW_STAGE_ROLE DROP COLUMN ROLE_ID';
		EXECUTE IMMEDIATE 'ALTER TABLE ADS_WORKFLOW_STAGE_ROLE ADD CONSTRAINT FK_ADS_WRKFLW_ROLE_ID FOREIGN KEY(OBJECT_ID) REFERENCES SECURITY_ROLES(RO_ID) ON DELETE CASCADE';
		EXECUTE IMMEDIATE 'ALTER TABLE ADS_WORKFLOW_STAGE_ROLE ADD CONSTRAINT UK_ADS_WF_STAGE_ROLE_ID UNIQUE(WFS_ID,OBJECT_ID,OBJECT_TYPE_ID)';
   END IF;
END;
/
DECLARE
   COLUMNCHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO COLUMNCHECKERFLAG FROM ALL_TAB_COLUMNS WHERE OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME = UPPER('ADS_WORKFLOW_NODE_ROLE') AND COLUMN_NAME=UPPER('OBJECT_ID');
   IF COLUMNCHECKERFLAG = 0 THEN
		EXECUTE IMMEDIATE 'DELETE FROM ADS_WORKFLOW_NODE_ROLE WHERE ROLE_ID IS NULL';
		EXECUTE IMMEDIATE 'ALTER TABLE ADS_WORKFLOW_NODE_ROLE DROP CONSTRAINT FK_ADS_WF_NODE_ROLE_ID';
		EXECUTE IMMEDIATE 'ALTER TABLE ADS_WORKFLOW_NODE_ROLE ADD OBJECT_TYPE_ID NUMBER';
		EXECUTE IMMEDIATE 'ALTER TABLE ADS_WORKFLOW_NODE_ROLE ADD OBJECT_ID NUMBER';
		EXECUTE IMMEDIATE 'UPDATE ADS_WORKFLOW_NODE_ROLE SET OBJECT_ID = (select SECURITY_ROLES.RO_ID FROM SECURITY_ROLES WHERE SECURITY_ROLES.ROLE_ID = ADS_WORKFLOW_NODE_ROLE.ROLE_ID)';
		EXECUTE IMMEDIATE 'UPDATE ADS_WORKFLOW_NODE_ROLE SET OBJECT_TYPE_ID = (SELECT OBJECT_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE = ''ADS_SECURITY_ROLE'')';
		EXECUTE IMMEDIATE 'ALTER TABLE ADS_WORKFLOW_NODE_ROLE MODIFY OBJECT_TYPE_ID NUMBER NOT NULL';
		EXECUTE IMMEDIATE 'ALTER TABLE ADS_WORKFLOW_NODE_ROLE MODIFY OBJECT_ID NUMBER NOT NULL';
		EXECUTE IMMEDIATE 'ALTER TABLE ADS_WORKFLOW_NODE_ROLE DROP COLUMN ROLE_ID';
		EXECUTE IMMEDIATE 'ALTER TABLE ADS_WORKFLOW_NODE_ROLE ADD CONSTRAINT FK_ADS_WF_NODE_ROLE_ID FOREIGN KEY(OBJECT_ID) REFERENCES SECURITY_ROLES(RO_ID) ON DELETE CASCADE';
   END IF;
END;
/
DECLARE
    VERSIONCHECKER INT;
	VIEWCHECKERFLAG INT;
BEGIN
    SELECT COUNT(*) INTO VERSIONCHECKER FROM ADS_MM_VERSION WHERE VALUE <= 10.1;
	SELECT COUNT(*) INTO VIEWCHECKERFLAG FROM ALL_VIEWS WHERE OWNER = sys_context('userenv', 'current_schema') AND VIEW_NAME = UPPER('ROLES_AND_ROLE_GROUP_V');
    IF VERSIONCHECKER > 0 AND VIEWCHECKERFLAG = 0 THEN
    BEGIN
        EXECUTE IMMEDIATE 'UPDATE ADS_WORKFLOW_ASGN_NODE_CONFIG SET CONFIG_VALUE = (select SECURITY_ROLES.RO_ID FROM SECURITY_ROLES WHERE SECURITY_ROLES.ROLE_ID = ADS_WORKFLOW_ASGN_NODE_CONFIG.CONFIG_VALUE) WHERE CONFIG_TYPE = ''ROLE''';
    END;
    END IF;
END;
/
DECLARE
   VIEWCHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO VIEWCHECKERFLAG FROM ALL_VIEWS WHERE OWNER = sys_context('userenv', 'current_schema') AND VIEW_NAME = UPPER('ROLES_AND_ROLE_GROUP_V');
   IF VIEWCHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'CREATE VIEW ROLES_AND_ROLE_GROUP_V AS SELECT SR.RO_ID AS OBJECT_ID, SR.ROLE_NAME AS OBJECT_NAME, (SELECT OBJECT_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE=''ADS_SECURITY_ROLE'') AS OBJECT_TYPE_ID, ''ROLE'' OBJECT_TYPE from SECURITY_ROLES SR UNION ALL SELECT RG.RG_ID, RG.RG_NAME, (SELECT OBJECT_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE=''ROLES_GROUPS'') AS OBJECT_TYPE_ID, ''ROLE_GROUP'' OBJECT_TYPE FROM ROLES_GROUPS_V RG';
   END IF;
END;
/
DECLARE
   VIEWCHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO VIEWCHECKERFLAG FROM ALL_VIEWS WHERE OWNER = sys_context('userenv', 'current_schema') AND VIEW_NAME = UPPER('ADS_WORKFLOW_NODE_ROLE_V');
   IF VIEWCHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'CREATE VIEW ADS_WORKFLOW_NODE_ROLE_V AS WITH WF_OBJECTS_WITH_NODES AS (SELECT AWN.WF_ID, AWN.WFN_ID, awn.NODE_TYPE, AWA.WFG_ID, AWA.OBJECT_ID, AWA.OBJECT_TYPE_ID, AWta.OBJECT_TYPE_ID DEPENDENT_OBJECT_TYPE_ID FROM ADS_WORKFLOW_NODE_V AWN JOIN ADS_WORKFLOW_ASSIGNMENT AWA ON AWA.WF_ID = AWN.WF_ID JOIN ADS_WORKFLOW AW ON AW.WF_ID = AWA.WF_ID JOIN ADS_WORKFLOW_TRIGGER_ACTION AWta ON AWta.WFTA_ID = AW.WFTA_ID), ASGN_OBJECTS_WITH_NODE_CONF AS (SELECT WFON.*, AWANC.R_RG_ID, AWANC.R_TYPE FROM WF_OBJECTS_WITH_NODES WFON LEFT JOIN (SELECT RRGV.OBJECT_ID R_RG_ID, RRGV.OBJECT_TYPE_ID R_TYPE, AWANCI.WFN_ID, AWANCI.WFG_ID FROM ADS_WORKFLOW_ASGN_NODE_CONFIG AWANCI JOIN ROLES_AND_ROLE_GROUP_V RRGV ON RRGV.OBJECT_ID = AWANCI.CONFIG_VALUE AND RRGV.OBJECT_TYPE = AWANCI.CONFIG_TYPE WHERE (AWANCI.CONFIG_TYPE = ''ROLE'' OR AWANCI.CONFIG_TYPE = ''ROLE_GROUP'')) AWANC ON AWANC.WFN_ID = WFON.WFN_ID AND AWANC.WFG_ID = WFON.WFG_ID), WF_NODE_ROLE AS (SELECT ASNR.WFN_ID, ASNR.OBJECT_ID, ASNR.OBJECT_TYPE_ID FROM ADS_WORKFLOW_NODE_ROLE ASNR JOIN ROLES_AND_ROLE_GROUP_V RRGV ON ASNR.OBJECT_ID = RRGV.OBJECT_ID AND ASNR.OBJECT_TYPE_ID = RRGV.OBJECT_TYPE_ID), WF_NODE_ROLE_CONF AS (SELECT AWN.WFN_ID, ASR.OBJECT_ID, ASR.OBJECT_TYPE_ID FROM ADS_WORKFLOW_STAGE_ROLE ASR JOIN ADS_WORKFLOW_NODE AWN ON ASR.WFS_ID = AWN.NODE_ID AND AWN.NODE_TYPE = ''S'' JOIN ROLES_AND_ROLE_GROUP_V RRGV ON ASR.OBJECT_ID = RRGV.OBJECT_ID AND ASR.OBJECT_TYPE_ID = RRGV.OBJECT_TYPE_ID WHERE AWN.WFN_ID NOT IN (SELECT WFN_ID FROM WF_NODE_ROLE) UNION SELECT WNR.WFN_ID, WNR.OBJECT_ID, WNR.OBJECT_TYPE_ID FROM WF_NODE_ROLE WNR) SELECT WFON.*, ASNR.OBJECT_ID R_RG_ID, ASNR.OBJECT_TYPE_ID R_TYPE FROM WF_OBJECTS_WITH_NODES WFON JOIN WF_NODE_ROLE_CONF ASNR ON ASNR.WFN_ID = WFON.WFN_ID JOIN ASGN_OBJECTS_WITH_NODE_CONF AONF ON AONF.WFG_ID = WFON.WFG_ID AND AONF.WFN_ID = WFON.WFN_ID AND AONF.OBJECT_ID = WFON.OBJECT_ID AND AONF.OBJECT_TYPE_ID = WFON.OBJECT_TYPE_ID AND AONF.DEPENDENT_OBJECT_TYPE_ID = WFON.DEPENDENT_OBJECT_TYPE_ID AND AONF.R_RG_ID IS NULL UNION SELECT * FROM ASGN_OBJECTS_WITH_NODE_CONF WHERE R_RG_ID IS NOT NULL';
   END IF;
END;
/
DECLARE
   PREFERENCECHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO PREFERENCECHECKERFLAG FROM "APP_PREFERENCES" WHERE PREFERENCE_NAME ='RM_MAPPING_PROMOTION';
   IF PREFERENCECHECKERFLAG = 0 THEN
        INSERT INTO APP_PREFERENCES(PREFERENCE_NAME, PREFERENCE_VALUE) VALUES('RM_MAPPING_PROMOTION','true');
    END IF;
END;
/
DECLARE
   PREFERENCECHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO PREFERENCECHECKERFLAG FROM "APP_PREFERENCES" WHERE PREFERENCE_NAME LIKE 'SETTINGS_TABLE_USER_DEFINED%';
   IF PREFERENCECHECKERFLAG = 0 THEN
        INSERT INTO APP_PREFERENCES(PREFERENCE_NAME, PREFERENCE_VALUE) VALUES('SETTINGS_TABLE_USER_DEFINED1','true');
        INSERT INTO APP_PREFERENCES(PREFERENCE_NAME, PREFERENCE_VALUE) VALUES('SETTINGS_TABLE_USER_DEFINED2','true');
        INSERT INTO APP_PREFERENCES(PREFERENCE_NAME, PREFERENCE_VALUE) VALUES('SETTINGS_TABLE_USER_DEFINED3','true');
        INSERT INTO APP_PREFERENCES(PREFERENCE_NAME, PREFERENCE_VALUE) VALUES('SETTINGS_TABLE_USER_DEFINED4','true');
        INSERT INTO APP_PREFERENCES(PREFERENCE_NAME, PREFERENCE_VALUE) VALUES('SETTINGS_TABLE_USER_DEFINED5','true');
        INSERT INTO APP_PREFERENCES(PREFERENCE_NAME, PREFERENCE_VALUE) VALUES('SETTINGS_TABLE_USER_DEFINED6','true');
        INSERT INTO APP_PREFERENCES(PREFERENCE_NAME, PREFERENCE_VALUE) VALUES('SETTINGS_TABLE_USER_DEFINED7','true');
        INSERT INTO APP_PREFERENCES(PREFERENCE_NAME, PREFERENCE_VALUE) VALUES('SETTINGS_TABLE_USER_DEFINED8','true');
        INSERT INTO APP_PREFERENCES(PREFERENCE_NAME, PREFERENCE_VALUE) VALUES('SETTINGS_TABLE_USER_DEFINED9','true');
        INSERT INTO APP_PREFERENCES(PREFERENCE_NAME, PREFERENCE_VALUE) VALUES('SETTINGS_TABLE_USER_DEFINED10','true');
    END IF;
   SELECT COUNT(*) INTO PREFERENCECHECKERFLAG FROM "APP_PREFERENCES" WHERE PREFERENCE_NAME LIKE 'SETTINGS_COLUMN_USER_DEFINED%';
   IF PREFERENCECHECKERFLAG = 0 THEN
        INSERT INTO APP_PREFERENCES(PREFERENCE_NAME, PREFERENCE_VALUE) VALUES('SETTINGS_COLUMN_USER_DEFINED1','true');
        INSERT INTO APP_PREFERENCES(PREFERENCE_NAME, PREFERENCE_VALUE) VALUES('SETTINGS_COLUMN_USER_DEFINED2','true');
        INSERT INTO APP_PREFERENCES(PREFERENCE_NAME, PREFERENCE_VALUE) VALUES('SETTINGS_COLUMN_USER_DEFINED3','true');
        INSERT INTO APP_PREFERENCES(PREFERENCE_NAME, PREFERENCE_VALUE) VALUES('SETTINGS_COLUMN_USER_DEFINED4','true');
        INSERT INTO APP_PREFERENCES(PREFERENCE_NAME, PREFERENCE_VALUE) VALUES('SETTINGS_COLUMN_USER_DEFINED5','true');
        INSERT INTO APP_PREFERENCES(PREFERENCE_NAME, PREFERENCE_VALUE) VALUES('SETTINGS_COLUMN_USER_DEFINED6','true');
        INSERT INTO APP_PREFERENCES(PREFERENCE_NAME, PREFERENCE_VALUE) VALUES('SETTINGS_COLUMN_USER_DEFINED7','true');
        INSERT INTO APP_PREFERENCES(PREFERENCE_NAME, PREFERENCE_VALUE) VALUES('SETTINGS_COLUMN_USER_DEFINED8','true');
        INSERT INTO APP_PREFERENCES(PREFERENCE_NAME, PREFERENCE_VALUE) VALUES('SETTINGS_COLUMN_USER_DEFINED9','true');
        INSERT INTO APP_PREFERENCES(PREFERENCE_NAME, PREFERENCE_VALUE) VALUES('SETTINGS_COLUMN_USER_DEFINED10','true');
    END IF;
    SELECT COUNT(*) INTO PREFERENCECHECKERFLAG FROM APP_PREFERENCES WHERE PREFERENCE_NAME = 'SETTINGS_ADDITIONAL_FIELDS';
    IF PREFERENCECHECKERFLAG = 0 THEN
         INSERT INTO APP_PREFERENCES(PREFERENCE_NAME, PREFERENCE_VALUE) VALUES('SETTINGS_ADDITIONAL_FIELDS','true');
    END IF;
    SELECT COUNT(*) INTO PREFERENCECHECKERFLAG FROM APP_PREFERENCES WHERE PREFERENCE_NAME = 'SETTINGS_SUBJECT_USER_DEFINED_FIELDS';
    IF PREFERENCECHECKERFLAG = 0 THEN
         INSERT INTO APP_PREFERENCES(PREFERENCE_NAME, PREFERENCE_VALUE) VALUES('SETTINGS_SUBJECT_USER_DEFINED_FIELDS','true');
    END IF;
END;
/
DECLARE
   VERSIONCHECKKERFLAG INT;
BEGIN
    SELECT COUNT(*) INTO VERSIONCHECKKERFLAG FROM ADS_MM_VERSION WHERE VALUE <= 10.1;
    IF VERSIONCHECKKERFLAG = 1 THEN
        EXECUTE IMMEDIATE 'INSERT INTO MMROLE_PERMISSIONS(MMROLE_ID, PERMISSION_ID, ENABLED) 
        select DISTINCT(MMROLE_ID), ''com.ads.mm.permission.bgm.businessterms.catalog.businessterms.associations.edit'' PERMISSION_ID, ENABLED 
        from MMROLE_PERMISSIONS where permission_id = ''com.ads.mm.permission.bgm.businessterms.catalog.businessterms.associations.view''
        union
        select DISTINCT(MMROLE_ID), ''com.ads.mm.permission.bgm.businesspolicies.catalog.businesspolicies.associations.edit'' PERMISSION_ID, ENABLED 
        from MMROLE_PERMISSIONS where permission_id = ''com.ads.mm.permission.bgm.businesspolicies.catalog.businesspolicies.associations.view''
        union
        select DISTINCT(MMROLE_ID), ''com.ads.mm.permission.bgm.businessrules.catalog.businessrules.associations.edit'' PERMISSION_ID, ENABLED 
        from MMROLE_PERMISSIONS where permission_id = ''com.ads.mm.permission.bgm.businessrules.catalog.businessrules.associations.view''
        union
        select DISTINCT(MMROLE_ID), ''com.ads.mm.permission.bgm.customobjects.catalog.customobjects.associations.edit'' PERMISSION_ID, ENABLED 
        from MMROLE_PERMISSIONS where permission_id = ''com.ads.mm.permission.bgm.customobjects.catalog.customobjects.associations.view''';
    END IF;
END;
/
DECLARE
   INDEXCHECKERFLAG INT;
BEGIN
    SELECT COUNT(*) INTO INDEXCHECKERFLAG FROM ALL_INDEXES WHERE OWNER = sys_context('userenv', 'current_schema') AND INDEX_NAME = UPPER('R_16_MAP_ID_INDX');
   IF INDEXCHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'CREATE INDEX "R_16_MAP_ID_INDX" ON "MAPPING_DOCUMENTS"("MAP_ID")';
    END IF;
END;
/
DECLARE
   INDEXCHECKERFLAG INT;
BEGIN
    SELECT COUNT(*) INTO INDEXCHECKERFLAG FROM ALL_INDEXES WHERE OWNER = sys_context('userenv', 'current_schema') AND INDEX_NAME = UPPER('R_17_MAP_ID_INDX');
   IF INDEXCHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'CREATE INDEX "R_17_MAP_ID_INDX" ON "MAPPING_SPECIFICATION"("MAP_ID")';
   END IF;
END;
/
DECLARE
   INDEXCHECKERFLAG INT;
BEGIN
    SELECT COUNT(*) INTO INDEXCHECKERFLAG FROM ALL_INDEXES WHERE  OWNER = sys_context('userenv', 'current_schema') AND INDEX_NAME = UPPER('R_10_PROJ_ID_INDX');
   IF INDEXCHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'CREATE INDEX "R_10_PROJ_ID_INDX" ON "PROJECT_DOCUMENTS"("PROJ_ID")';
   END IF;
END;
/
DECLARE
   INDEXCHECKERFLAG INT;
BEGIN
    SELECT COUNT(*) INTO INDEXCHECKERFLAG FROM ALL_INDEXES WHERE OWNER = sys_context('userenv', 'current_schema') AND INDEX_NAME = UPPER('R_5_ROLE_ID_INDX');
   IF INDEXCHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'CREATE INDEX "R_5_ROLE_ID_INDX" ON "USER_ASSIGNED_ROLES"("ROLE_ID")';
   END IF;
END;
/
DECLARE
   INDEXCHECKERFLAG INT;
BEGIN
    SELECT COUNT(*) INTO INDEXCHECKERFLAG FROM ALL_INDEXES WHERE OWNER = sys_context('userenv', 'current_schema') AND INDEX_NAME = UPPER('R_6_USER_ID_INDX');
   IF INDEXCHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'CREATE INDEX "R_6_USER_ID_INDX" ON "USER_ASSIGNED_ROLES"("USER_ID")';
   END IF;
END;
/
DECLARE
   INDEXCHECKERFLAG INT;
BEGIN
    SELECT COUNT(*) INTO INDEXCHECKERFLAG FROM ALL_INDEXES WHERE OWNER = sys_context('userenv', 'current_schema') AND INDEX_NAME = UPPER('R_7_PROJ_ID_INDX');
   IF INDEXCHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'CREATE INDEX "R_7_PROJ_ID_INDX" ON "PROJECT_RESOURCES"("PROJ_ID")';
   END IF;
END;
/
DECLARE
   INDEXCHECKERFLAG INT;
BEGIN
    SELECT COUNT(*) INTO INDEXCHECKERFLAG FROM ALL_INDEXES WHERE OWNER = sys_context('userenv', 'current_schema') AND INDEX_NAME = UPPER('R_9_USER_ID_INDX');
   IF INDEXCHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'CREATE INDEX "R_9_USER_ID_INDX" ON "PROJECT_RESOURCES"("USER_ID")';
   END IF;
END;
/
DECLARE
   INDEXCHECKERFLAG INT;
BEGIN
    SELECT COUNT(*) INTO INDEXCHECKERFLAG FROM ALL_INDEXES WHERE OWNER = sys_context('userenv', 'current_schema') AND INDEX_NAME = UPPER('R_9_ROLE_ID_INDX');
   IF INDEXCHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'CREATE INDEX "R_9_ROLE_ID_INDX" ON "PROJECT_RESOURCES"("ROLE_ID")';
   END IF;
END;
/
DECLARE
   INDEXCHECKERFLAG INT;
BEGIN
    SELECT COUNT(*) INTO INDEXCHECKERFLAG FROM ALL_INDEXES WHERE OWNER = sys_context('userenv', 'current_schema') AND INDEX_NAME = UPPER('R_15_SYSTEM_ID_INDX');
   IF INDEXCHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'CREATE INDEX "R_15_SYSTEM_ID_INDX" ON "SYSTEM_DOCUMENTS"("SYSTEM_ID")';
   END IF;
END;
/
DECLARE
   INDEXCHECKERFLAG INT;
BEGIN
    SELECT COUNT(*) INTO INDEXCHECKERFLAG FROM ALL_INDEXES WHERE OWNER = sys_context('userenv', 'current_schema') AND INDEX_NAME = UPPER('R_11_SYSTEM_ID_INDX');
   IF INDEXCHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'CREATE INDEX "R_11_SYSTEM_ID_INDX" ON "SYS_CON_ENVIRONMENTS"("SYSTEM_ID")';
   END IF;
END;
/
DECLARE
   INDEXCHECKERFLAG INT;
BEGIN
    SELECT COUNT(*) INTO INDEXCHECKERFLAG FROM ALL_INDEXES WHERE OWNER = sys_context('userenv', 'current_schema') AND INDEX_NAME = UPPER('R_13_SYSTEM_ID_INDX');
   IF INDEXCHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'CREATE INDEX "R_13_SYSTEM_ID_INDX" ON "SYSTEM_TABLE_METADATA"("SYSTEM_ID")';
   END IF;
END;
/
DECLARE
   INDEXCHECKERFLAG INT;
BEGIN
    SELECT COUNT(*) INTO INDEXCHECKERFLAG FROM ALL_INDEXES WHERE OWNER = sys_context('userenv', 'current_schema') AND INDEX_NAME = UPPER('R_13_SYS_ENV_NAME_INDX');
   IF INDEXCHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'CREATE INDEX "R_13_SYS_ENV_NAME_INDX" ON "SYSTEM_TABLE_METADATA"("SYSTEM_ENV_NAME")';
   END IF;
END;
/
DECLARE
   INDEXCHECKERFLAG INT;
BEGIN
    SELECT COUNT(*) INTO INDEXCHECKERFLAG FROM ALL_INDEXES WHERE OWNER = sys_context('userenv', 'current_schema') AND INDEX_NAME = UPPER('R_14_TABLE_NAME_INDX');
   IF INDEXCHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'CREATE INDEX "R_14_TABLE_NAME_INDX" ON "SYSTEM_TABLE_COLUMNS_METADATA"("TABLE_NAME")';
   END IF;
END;
/
DECLARE
   INDEXCHECKERFLAG INT;
BEGIN
    SELECT COUNT(*) INTO INDEXCHECKERFLAG FROM ALL_INDEXES WHERE OWNER = sys_context('userenv', 'current_schema') AND INDEX_NAME = UPPER('R_14_SYSTEM_ID_INDX');
   IF INDEXCHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'CREATE INDEX "R_14_SYSTEM_ID_INDX" ON "SYSTEM_TABLE_COLUMNS_METADATA"("SYSTEM_ID")';
   END IF;
END;
/
DECLARE
   INDEXCHECKERFLAG INT;
BEGIN
    SELECT COUNT(*) INTO INDEXCHECKERFLAG FROM ALL_INDEXES WHERE OWNER = sys_context('userenv', 'current_schema') AND INDEX_NAME = UPPER('R_14_SYS_ENV_NAME_INDX');
   IF INDEXCHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'CREATE INDEX "R_14_SYS_ENV_NAME_INDX" ON "SYSTEM_TABLE_COLUMNS_METADATA"("SYSTEM_ENV_NAME")';
   END IF;
END;
/
DECLARE
   INDEXCHECKERFLAG INT;
BEGIN
    SELECT COUNT(*) INTO INDEXCHECKERFLAG FROM ALL_INDEXES WHERE OWNER = sys_context('userenv', 'current_schema') AND INDEX_NAME = UPPER('FK_CATEGORY_ID_INDX');
   IF INDEXCHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'CREATE INDEX "FK_CATEGORY_ID_INDX" ON "CSM_CODESET"("CATEGORY_ID")';
   END IF;
END;
/
DECLARE
   INDEXCHECKERFLAG INT;
BEGIN
    SELECT COUNT(*) INTO INDEXCHECKERFLAG FROM ALL_INDEXES WHERE OWNER = sys_context('userenv', 'current_schema') AND INDEX_NAME = UPPER('FK_CODESET_ID_INDX');
   IF INDEXCHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'CREATE INDEX "FK_CODESET_ID_INDX" ON "CSM_CODE_VALUE"("CODESET_ID")';
   END IF;
END;
/
DECLARE
   INDEXCHECKERFLAG INT;
BEGIN
    SELECT COUNT(*) INTO INDEXCHECKERFLAG FROM ALL_INDEXES WHERE OWNER = sys_context('userenv', 'current_schema') AND INDEX_NAME = UPPER('FK_SPEC_CSM_MAP_ID_INDX');
   IF INDEXCHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'CREATE INDEX "FK_SPEC_CSM_MAP_ID_INDX" ON "CSM_MAPPING_SPEC"("CSM_MAP_ID")';
   END IF;
END;
/
DECLARE
   INDEXCHECKERFLAG INT;
BEGIN
    SELECT COUNT(*) INTO INDEXCHECKERFLAG FROM ALL_INDEXES WHERE OWNER = sys_context('userenv', 'current_schema') AND INDEX_NAME = UPPER('FK_DETLS_ENVS_MAP_ID_INDX');
   IF INDEXCHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'CREATE INDEX "FK_DETLS_ENVS_MAP_ID_INDX" ON "CSM_MAP_SYSTEM_ENVIRONMENTS"("CSM_MAP_ID")';
   END IF;
END;
/
DECLARE
   INDEXCHECKERFLAG INT;
BEGIN
    SELECT COUNT(*) INTO INDEXCHECKERFLAG FROM ALL_INDEXES WHERE OWNER = sys_context('userenv', 'current_schema') AND INDEX_NAME = UPPER('FK_CDSET_CDSET_ID_INDX');
   IF INDEXCHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'CREATE INDEX "FK_CDSET_CDSET_ID_INDX" ON "CSM_MAP_CODESETS"("CSM_MAP_CODESET_ID")';
   END IF;
END;
/
DECLARE
   INDEXCHECKERFLAG INT;
BEGIN
    SELECT COUNT(*) INTO INDEXCHECKERFLAG FROM ALL_INDEXES WHERE OWNER = sys_context('userenv', 'current_schema') AND INDEX_NAME = UPPER('FK_DETLS_CDSETS_MAPID_INDX');
   IF INDEXCHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'CREATE INDEX "FK_DETLS_CDSETS_MAPID_INDX" ON "CSM_MAP_CODESETS"("CSM_MAP_ID")';
   END IF;
END;
/
DECLARE
   INDEXCHECKERFLAG INT;
BEGIN
    SELECT COUNT(*) INTO INDEXCHECKERFLAG FROM ALL_INDEXES WHERE OWNER = sys_context('userenv', 'current_schema') AND INDEX_NAME = UPPER('FK_RM_USER_ID_INDX');
   IF INDEXCHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'CREATE INDEX "FK_RM_USER_ID_INDX" ON "RM_HISTORY"("USER_ID")';
   END IF;
END;
/
DECLARE
   INDEXCHECKERFLAG INT;
BEGIN
    SELECT COUNT(*) INTO INDEXCHECKERFLAG FROM ALL_INDEXES WHERE OWNER = sys_context('userenv', 'current_schema') AND INDEX_NAME = UPPER('FK_RM_HIST_TYPE_ID_INDX');
   IF INDEXCHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'CREATE INDEX "FK_RM_HIST_TYPE_ID_INDX" ON "RM_HISTORY"("HISTORYTYPEID")';
   END IF;
END;
/
DECLARE
   INDEXCHECKERFLAG INT;
BEGIN
    SELECT COUNT(*) INTO INDEXCHECKERFLAG FROM ALL_INDEXES WHERE OWNER = sys_context('userenv', 'current_schema') AND INDEX_NAME = UPPER('FK_RM_RES_ID_INDX');
   IF INDEXCHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'CREATE INDEX "FK_RM_RES_ID_INDX" ON "RM_PROJECT"("RESOURCEID")';
   END IF;
END;
/
DECLARE
   INDEXCHECKERFLAG INT;
BEGIN
    SELECT COUNT(*) INTO INDEXCHECKERFLAG FROM ALL_INDEXES WHERE OWNER = sys_context('userenv', 'current_schema') AND INDEX_NAME = UPPER('FK_RM_REL_STAT_ID_INDX');
   IF INDEXCHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'CREATE INDEX "FK_RM_REL_STAT_ID_INDX" ON "RM_RELEASE"("RELEASESTATUSID")';
   END IF;
END;
/
DECLARE
   INDEXCHECKERFLAG INT;
BEGIN
    SELECT COUNT(*) INTO INDEXCHECKERFLAG FROM ALL_INDEXES WHERE OWNER = sys_context('userenv', 'current_schema') AND INDEX_NAME = UPPER('FK_RM_PROJ_ID_INDX');
   IF INDEXCHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'CREATE INDEX "FK_RM_PROJ_ID_INDX" ON "RM_RELEASE"("PROJECTID")';
   END IF;
END;
/
DECLARE
   INDEXCHECKERFLAG INT;
BEGIN
    SELECT COUNT(*) INTO INDEXCHECKERFLAG FROM ALL_INDEXES WHERE OWNER = sys_context('userenv', 'current_schema') AND INDEX_NAME = UPPER('FK_RM_MIG_STAT_ID_INDX');
   IF INDEXCHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'CREATE INDEX "FK_RM_MIG_STAT_ID_INDX" ON "RM_MIGRATIONOBJECT"("MIGRATIONSTATUSID")';
   END IF;
END;
/
DECLARE
   INDEXCHECKERFLAG INT;
BEGIN
    SELECT COUNT(*) INTO INDEXCHECKERFLAG FROM ALL_INDEXES WHERE OWNER = sys_context('userenv', 'current_schema') AND INDEX_NAME = UPPER('FK_RM_REL_ID_INDX');
   IF INDEXCHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'CREATE INDEX "FK_RM_REL_ID_INDX" ON "RM_MIGRATIONOBJECT"("RELEASEID")';
   END IF;
END;
/
DECLARE
   INDEXCHECKERFLAG INT;
BEGIN
    SELECT COUNT(*) INTO INDEXCHECKERFLAG FROM ALL_INDEXES WHERE OWNER = sys_context('userenv', 'current_schema') AND INDEX_NAME = UPPER('FK_RM_MIG_FROM_ENV_INDX');
   IF INDEXCHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'CREATE INDEX "FK_RM_MIG_FROM_ENV_INDX" ON "RM_MIGRATIONOBJECT"("MIGRATIONFROMENV")';
   END IF;
END;
/
DECLARE
   INDEXCHECKERFLAG INT;
BEGIN
    SELECT COUNT(*) INTO INDEXCHECKERFLAG FROM ALL_INDEXES WHERE OWNER = sys_context('userenv', 'current_schema') AND INDEX_NAME = UPPER('FK_RM_MIG_TO_ENV_INDX');
   IF INDEXCHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'CREATE INDEX "FK_RM_MIG_TO_ENV_INDX" ON "RM_MIGRATIONOBJECT"("MIGRATIONTOENV")';
   END IF;
END;
/
DECLARE
   INDEXCHECKERFLAG INT;
BEGIN
    SELECT COUNT(*) INTO INDEXCHECKERFLAG FROM ALL_INDEXES WHERE OWNER = sys_context('userenv', 'current_schema') AND INDEX_NAME = UPPER('FK_RM_MIG_OBJ_TYPE_ID_INDX');
   IF INDEXCHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'CREATE INDEX "FK_RM_MIG_OBJ_TYPE_ID_INDX" ON "RM_MIGRATIONOBJECT"("MIGRATIONOBJECTTYPEID")';
   END IF;
END;
/
DECLARE
   INDEXCHECKERFLAG INT;
BEGIN
    SELECT COUNT(*) INTO INDEXCHECKERFLAG FROM ALL_INDEXES WHERE OWNER = sys_context('userenv', 'current_schema') AND INDEX_NAME = UPPER('FK_MM_HIST_PROJID_INDX');
   IF INDEXCHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'CREATE INDEX "FK_MM_HIST_PROJID_INDX" ON "MM_HISTORY"("PROJECT_ID")';
   END IF;
END;
/
DECLARE
   INDEXCHECKERFLAG INT;
BEGIN
    SELECT COUNT(*) INTO INDEXCHECKERFLAG FROM ALL_INDEXES WHERE OWNER = sys_context('userenv', 'current_schema') AND INDEX_NAME = UPPER('FK_MM_HIST_MAPID_INDX');
   IF INDEXCHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'CREATE INDEX "FK_MM_HIST_MAPID_INDX" ON "MM_HISTORY"("MAP_ID")';
   END IF;
END;
/
DECLARE
   INDEXCHECKERFLAG INT;
BEGIN
    SELECT COUNT(*) INTO INDEXCHECKERFLAG FROM ALL_INDEXES WHERE OWNER = sys_context('userenv', 'current_schema') AND INDEX_NAME = UPPER('FK_RDM_TBL_CAT_ID_INDX');
   IF INDEXCHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'CREATE INDEX "FK_RDM_TBL_CAT_ID_INDX" ON "RDM_REFERENCE_TABLE"("RDM_REF_TABLE_CAT_ID")';
   END IF;
END;
/
DECLARE
   INDEXCHECKERFLAG INT;
BEGIN
    SELECT COUNT(*) INTO INDEXCHECKERFLAG FROM ALL_INDEXES WHERE OWNER = sys_context('userenv', 'current_schema') AND INDEX_NAME = UPPER('FK_RDM_REF_COL_TAB_ID_INDX');
   IF INDEXCHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'CREATE INDEX "FK_RDM_REF_COL_TAB_ID_INDX" ON "RDM_REF_TAB_COLUMNS"("RDM_REF_TAB_ID")';
   END IF;
END;
/
DECLARE
   INDEXCHECKERFLAG INT;
BEGIN
    SELECT COUNT(*) INTO INDEXCHECKERFLAG FROM ALL_INDEXES WHERE OWNER = sys_context('userenv', 'current_schema') AND INDEX_NAME = UPPER('FK_RDM_TAB_VAL_COL_ID_INDX');
   IF INDEXCHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'CREATE INDEX "FK_RDM_TAB_VAL_COL_ID_INDX" ON "RDM_REF_TAB_COL_VALUES"("RDM_REF_TAB_COL_ID")';
   END IF;
END;
/
DECLARE
   INDEXCHECKERFLAG INT;
BEGIN
    SELECT COUNT(*) INTO INDEXCHECKERFLAG FROM ALL_INDEXES WHERE OWNER = sys_context('userenv', 'current_schema') AND INDEX_NAME = UPPER('FK_RDM_REF_TAB_ID_INDX');
   IF INDEXCHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'CREATE INDEX "FK_RDM_REF_TAB_ID_INDX" ON "RDM_REF_TAB_COL_VAL_ERRORS"("RDM_REF_TAB_ID")';
   END IF;
END;
/
DECLARE
   INDEXCHECKERFLAG INT;
BEGIN
    SELECT COUNT(*) INTO INDEXCHECKERFLAG FROM ALL_INDEXES WHERE OWNER = sys_context('userenv', 'current_schema') AND INDEX_NAME = UPPER('FK_TAB_PUB_RDM_ENV_ID_INDX');
   IF INDEXCHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'CREATE INDEX "FK_TAB_PUB_RDM_ENV_ID_INDX" ON "RDM_REF_TAB_PUBLISH_HISTORY"("RDM_ENVIRONMENT_ID")';
   END IF;
END;
/
DECLARE
   INDEXCHECKERFLAG INT;
BEGIN
    SELECT COUNT(*) INTO INDEXCHECKERFLAG FROM ALL_INDEXES WHERE OWNER = sys_context('userenv', 'current_schema') AND INDEX_NAME = UPPER('FK_RDM_REF_TAB_PUB_ID_INDX');
   IF INDEXCHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'CREATE INDEX "FK_RDM_REF_TAB_PUB_ID_INDX" ON "RDM_REF_TAB_PUBLISH_HISTORY"("RDM_REF_TAB_ID")';
   END IF;
END;
/
DECLARE
   INDEXCHECKERFLAG INT;
BEGIN
    SELECT COUNT(*) INTO INDEXCHECKERFLAG FROM ALL_INDEXES WHERE OWNER = sys_context('userenv', 'current_schema') AND INDEX_NAME = UPPER('FK_RDM_VALDTN_CAT_ID_INDX');
   IF INDEXCHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'CREATE INDEX "FK_RDM_VALDTN_CAT_ID_INDX" ON "RDM_TABLE_VALIDATIONS"("RDM_REF_CAT_ID")';
   END IF;
END;
/
DECLARE
   INDEXCHECKERFLAG INT;
BEGIN
    SELECT COUNT(*) INTO INDEXCHECKERFLAG FROM ALL_INDEXES WHERE OWNER = sys_context('userenv', 'current_schema') AND INDEX_NAME = UPPER('FK_RDM_VALDTN_TAB_ID_INDX');
   IF INDEXCHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'CREATE INDEX "FK_RDM_VALDTN_TAB_ID_INDX" ON "RDM_TABLE_VALIDATIONS"("RDM_REF_TAB_ID")';
   END IF;
END;
/
DECLARE
   INDEXCHECKERFLAG INT;
BEGIN
    SELECT COUNT(*) INTO INDEXCHECKERFLAG FROM ALL_INDEXES WHERE OWNER = sys_context('userenv', 'current_schema') AND INDEX_NAME = UPPER('FK_RDM_VALDTN_RULE_ID_INDX');
   IF INDEXCHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'CREATE INDEX "FK_RDM_VALDTN_RULE_ID_INDX" ON "RDM_TABLE_VALIDATIONS"("RDM_VAL_RULE_ID")';
   END IF;
END;
/
DECLARE
   INDEXCHECKERFLAG INT;
BEGIN
    SELECT COUNT(*) INTO INDEXCHECKERFLAG FROM ALL_INDEXES WHERE OWNER = sys_context('userenv', 'current_schema') AND INDEX_NAME = UPPER('FK_RDM_TBL_USER_ID_INDX');
   IF INDEXCHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'CREATE INDEX "FK_RDM_TBL_USER_ID_INDX" ON "RDM_REF_TABLE_USERS"("USER_ID")';
   END IF;
END;
/
DECLARE
   INDEXCHECKERFLAG INT;
BEGIN
    SELECT COUNT(*) INTO INDEXCHECKERFLAG FROM ALL_INDEXES WHERE OWNER = sys_context('userenv', 'current_schema') AND INDEX_NAME = UPPER('FK_RDM_USER_CAT_ID_INDX');
   IF INDEXCHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'CREATE INDEX "FK_RDM_USER_CAT_ID_INDX" ON "RDM_REF_TABLE_USERS"("RDM_REF_CAT_ID")';
   END IF;
END;
/
DECLARE
   INDEXCHECKERFLAG INT;
BEGIN
    SELECT COUNT(*) INTO INDEXCHECKERFLAG FROM ALL_INDEXES WHERE OWNER = sys_context('userenv', 'current_schema') AND INDEX_NAME = UPPER('FK_RDM_USER_TAB_ID_INDX');
   IF INDEXCHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'CREATE INDEX "FK_RDM_USER_TAB_ID_INDX" ON "RDM_REF_TABLE_USERS"("RDM_REF_TAB_ID")';
   END IF;
END;
/
DECLARE
   INDEXCHECKERFLAG INT;
BEGIN
    SELECT COUNT(*) INTO INDEXCHECKERFLAG FROM ALL_INDEXES WHERE OWNER = sys_context('userenv', 'current_schema') AND INDEX_NAME = UPPER('FK_MAPPING_DTLS_ST_ID_INDX');
   IF INDEXCHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'CREATE INDEX "FK_MAPPING_DTLS_ST_ID_INDX" ON "MAPPING_DETAILS"("STATE_ID")';
   END IF;
END;
/
DECLARE
   INDEXCHECKERFLAG INT;
BEGIN
    SELECT COUNT(*) INTO INDEXCHECKERFLAG FROM ALL_INDEXES WHERE OWNER = sys_context('userenv', 'current_schema') AND INDEX_NAME = UPPER('FK_MAP_DTLS_SBST_ID_INDX');
   IF INDEXCHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'CREATE INDEX "FK_MAP_DTLS_SBST_ID_INDX" ON "MAPPING_DETAILS"("SUBSTATE_ID")';
   END IF;
END;
/
DECLARE
   INDEXCHECKERFLAG INT;
BEGIN
    SELECT COUNT(*) INTO INDEXCHECKERFLAG FROM ALL_INDEXES WHERE OWNER = sys_context('userenv', 'current_schema') AND INDEX_NAME = UPPER('FK_RDM_COLUMN_ID_INDX');
   IF INDEXCHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'CREATE INDEX "FK_RDM_COLUMN_ID_INDX" ON "RDM_COLUMN_CODESETS"("RDM_REF_TAB_COL_ID")';
   END IF;
END;
/
DECLARE
   INDEXCHECKERFLAG INT;
BEGIN
    SELECT COUNT(*) INTO INDEXCHECKERFLAG FROM ALL_INDEXES WHERE OWNER = sys_context('userenv', 'current_schema') AND INDEX_NAME = UPPER('FK_RDM_COLUMN_CS_INDX');
   IF INDEXCHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'CREATE INDEX "FK_RDM_COLUMN_CS_INDX" ON "RDM_COLUMN_CODESETS"("RDM_CODESET_ID")';
   END IF;
END;
/
DECLARE
   INDEXCHECKERFLAG INT;
BEGIN
    SELECT COUNT(*) INTO INDEXCHECKERFLAG FROM ALL_INDEXES WHERE OWNER = sys_context('userenv', 'current_schema') AND INDEX_NAME = UPPER('FK_RDM_REF_TAB_USERDEF_INDX');
   IF INDEXCHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'CREATE INDEX "FK_RDM_REF_TAB_USERDEF_INDX" ON "RDM_REF_TAB_USERDEFINED"("RDM_REF_TABLE_ID")';
   END IF;
END;
/
DECLARE
   INDEXCHECKERFLAG INT;
BEGIN
    SELECT COUNT(*) INTO INDEXCHECKERFLAG FROM ALL_INDEXES WHERE OWNER = sys_context('userenv', 'current_schema') AND INDEX_NAME = UPPER('FK_CSM_MAPDTLS_CAT_ID_INDX');
   IF INDEXCHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'CREATE INDEX "FK_CSM_MAPDTLS_CAT_ID_INDX" ON "CSM_MAPPING_DETAILS"("CSM_MAP_CAT_ID")';
   END IF;
END;
/
DECLARE
   INDEXCHECKERFLAG INT;
BEGIN
    SELECT COUNT(*) INTO INDEXCHECKERFLAG FROM ALL_INDEXES WHERE OWNER = sys_context('userenv', 'current_schema') AND INDEX_NAME = UPPER('FK_CSM_CODESET_ENV_ID_INDX');
   IF INDEXCHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'CREATE INDEX "FK_CSM_CODESET_ENV_ID_INDX" ON "CSM_CODESET_PUBLISH_HISTORY"("CSM_ENVIRONMENT_ID")';
   END IF;
END;
/
DECLARE
INDEXCHECKERFLAG INT;
BEGIN
    SELECT COUNT(*) INTO INDEXCHECKERFLAG FROM ALL_INDEXES WHERE OWNER = sys_context('userenv', 'current_schema') AND INDEX_NAME = UPPER('FK_CSM_PUB_CODESET_ID_INDX');
   IF INDEXCHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'CREATE INDEX "FK_CSM_PUB_CODESET_ID_INDX" ON "CSM_CODESET_PUBLISH_HISTORY"("CSM_CODESET_ID")';
   END IF;
END;
/
DECLARE
   INDEXCHECKERFLAG INT;
BEGIN
    SELECT COUNT(*) INTO INDEXCHECKERFLAG FROM ALL_INDEXES WHERE OWNER = sys_context('userenv', 'current_schema') AND INDEX_NAME = UPPER('FK_CSM_MAP_ENV_ID_INDX');
   IF INDEXCHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'CREATE INDEX "FK_CSM_MAP_ENV_ID_INDX" ON "CSM_MAP_PUBLISH_HISTORY"("CSM_ENVIRONMENT_ID")';
   END IF;
END;
/
DECLARE
   INDEXCHECKERFLAG INT;
BEGIN
    SELECT COUNT(*) INTO INDEXCHECKERFLAG FROM ALL_INDEXES WHERE OWNER = sys_context('userenv', 'current_schema') AND INDEX_NAME = UPPER('FK_CSM_PUB_MAP_ID_INDX');
   IF INDEXCHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'CREATE INDEX "FK_CSM_PUB_MAP_ID_INDX" ON "CSM_MAP_PUBLISH_HISTORY"("CSM_MAP_ID")';
   END IF;
END;
/
DECLARE
   INDEXCHECKERFLAG INT;
BEGIN
    SELECT COUNT(*) INTO INDEXCHECKERFLAG FROM ALL_INDEXES WHERE OWNER = sys_context('userenv', 'current_schema') AND INDEX_NAME = UPPER('FK_MIGOBJ_CODESET_ID_INDX');
   IF INDEXCHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'CREATE INDEX "FK_MIGOBJ_CODESET_ID_INDX" ON "RM_MIGRATIONOBJECT"("CODESET_ID")';
   END IF;
END;
/
DECLARE
   INDEXCHECKERFLAG INT;
BEGIN
    SELECT COUNT(*) INTO INDEXCHECKERFLAG FROM ALL_INDEXES WHERE OWNER = sys_context('userenv', 'current_schema') AND INDEX_NAME = UPPER('FK_MIGOBJ_MAP_ID_INDX');
   IF INDEXCHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'CREATE INDEX "FK_MIGOBJ_MAP_ID_INDX" ON "RM_MIGRATIONOBJECT"("MAP_ID")';
   END IF;
END;
/
DECLARE
   INDEXCHECKERFLAG INT;
BEGIN
    SELECT COUNT(*) INTO INDEXCHECKERFLAG FROM ALL_INDEXES WHERE OWNER = sys_context('userenv', 'current_schema') AND INDEX_NAME = UPPER('FK_MIGOBJ_CSM_MAP_ID_INDX');
   IF INDEXCHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'CREATE INDEX "FK_MIGOBJ_CSM_MAP_ID_INDX" ON "RM_MIGRATIONOBJECT"("CSM_MAP_ID")';
   END IF;
END;
/
DECLARE
   INDEXCHECKERFLAG INT;
BEGIN
    SELECT COUNT(*) INTO INDEXCHECKERFLAG FROM ALL_INDEXES WHERE OWNER = sys_context('userenv', 'current_schema') AND INDEX_NAME = UPPER('RM_SYSCON_FK1_SYSID_INDX');
   IF INDEXCHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'CREATE INDEX "RM_SYSCON_FK1_SYSID_INDX" ON "RM_PROMOTE_SYS_CON_ENVS"("SYSTEM_ID")';
   END IF;
END;
/
DECLARE
   INDEXCHECKERFLAG INT;
BEGIN
    SELECT COUNT(*) INTO INDEXCHECKERFLAG FROM ALL_INDEXES WHERE OWNER = sys_context('userenv', 'current_schema') AND INDEX_NAME = UPPER('RM_SYSCON_FK1_ENVID_INDX');
   IF INDEXCHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'CREATE INDEX "RM_SYSCON_FK1_ENVID_INDX" ON "RM_PROMOTE_SYS_CON_ENVS"("SYSTEM_ENVIRONMENT_NAME")';
   END IF;
END;
/
DECLARE
   INDEXCHECKERFLAG INT;
BEGIN
    SELECT COUNT(*) INTO INDEXCHECKERFLAG FROM ALL_INDEXES WHERE OWNER = sys_context('userenv', 'current_schema') AND INDEX_NAME = UPPER('RM_ENV_R_FK1_INDX');
   IF INDEXCHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'CREATE INDEX "RM_ENV_R_FK1_INDX" ON "RM_PROMOTE_SYS_CON_ENVS"("RM_ENVIRONMENT_ID")';
   END IF;
END;
/
DECLARE
   INDEXCHECKERFLAG INT;
BEGIN
    SELECT COUNT(*) INTO INDEXCHECKERFLAG FROM ALL_INDEXES WHERE OWNER = sys_context('userenv', 'current_schema') AND INDEX_NAME = UPPER('FK_RDM_USR_CAT_ID_INDX');
   IF INDEXCHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'CREATE INDEX "FK_RDM_USR_CAT_ID_INDX" ON "RDM_REF_FOLDER_USERS"("RDM_REF_CAT_ID")';
   END IF;
END;
/
DECLARE
   INDEXCHECKERFLAG INT;
BEGIN
    SELECT COUNT(*) INTO INDEXCHECKERFLAG FROM ALL_INDEXES WHERE OWNER = sys_context('userenv', 'current_schema') AND INDEX_NAME = UPPER('FK_CSM_MAP_USER_ID_INDX');
   IF INDEXCHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'CREATE INDEX "FK_CSM_MAP_USER_ID_INDX" ON "CSM_MAP_CAT_USERS"("USER_ID")';
   END IF;
END;
/
DECLARE
   INDEXCHECKERFLAG INT;
BEGIN
    SELECT COUNT(*) INTO INDEXCHECKERFLAG FROM ALL_INDEXES WHERE OWNER = sys_context('userenv', 'current_schema') AND INDEX_NAME = UPPER('FK_CSM_MAP_USR_CAT_ID_INDX');
   IF INDEXCHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'CREATE INDEX "FK_CSM_MAP_USR_CAT_ID_INDX" ON "CSM_MAP_CAT_USERS"("CSM_MAP_CAT_ID")';
   END IF;
END;
/
DECLARE
   INDEXCHECKERFLAG INT;
BEGIN
    SELECT COUNT(*) INTO INDEXCHECKERFLAG FROM ALL_INDEXES WHERE OWNER = sys_context('userenv', 'current_schema') AND INDEX_NAME = UPPER('FK_CSM_CDST_USR_ID_INDX');
   IF INDEXCHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'CREATE INDEX "FK_CSM_CDST_USR_ID_INDX" ON "CSM_CODESET_CAT_USERS"("USER_ID")';
   END IF;
END;
/
DECLARE
   INDEXCHECKERFLAG INT;
BEGIN
    SELECT COUNT(*) INTO INDEXCHECKERFLAG FROM ALL_INDEXES WHERE OWNER = sys_context('userenv', 'current_schema') AND INDEX_NAME = UPPER('FK_CSM_CDST_USR_CAT_ID_INDX');
   IF INDEXCHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'CREATE INDEX "FK_CSM_CDST_USR_CAT_ID_INDX" ON "CSM_CODESET_CAT_USERS"("CATEGORY_ID")';
   END IF;
END;
/
DECLARE
   INDEXCHECKERFLAG INT;
BEGIN
    SELECT COUNT(*) INTO INDEXCHECKERFLAG FROM ALL_INDEXES WHERE OWNER = sys_context('userenv', 'current_schema') AND INDEX_NAME = UPPER('FK_RM_ENV_ENVRMENT_ID_INDX');
   IF INDEXCHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'CREATE INDEX "FK_RM_ENV_ENVRMENT_ID_INDX" ON "MAPPING_DETAILS"("RM_ENVIRONMENT_ID")';
   END IF;
END;
/
DECLARE
   INDEXCHECKERFLAG INT;
BEGIN
    SELECT COUNT(*) INTO INDEXCHECKERFLAG FROM ALL_INDEXES WHERE OWNER = sys_context('userenv', 'current_schema') AND INDEX_NAME = UPPER('CSM_MAP_SPEC_RO_FK_INDX');
   IF INDEXCHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'CREATE INDEX "CSM_MAP_SPEC_RO_FK_INDX" ON "CSM_MAPPING_SPEC_READONLY"("CSM_MAP_ID")';
   END IF;
END;
/
DECLARE
INDEXCHECKERFLAG INT;
BEGIN
SELECT COUNT(*) INTO INDEXCHECKERFLAG FROM ALL_INDEXES WHERE OWNER = SYS_CONTEXT('USERENV', 'CURRENT_SCHEMA') AND INDEX_NAME = UPPER('STCM_STM_ID_STCM_ID_IDX');
IF INDEXCHECKERFLAG = 0 THEN
EXECUTE IMMEDIATE 'CREATE INDEX "STCM_STM_ID_STCM_ID_IDX" ON "SYSTEM_TABLE_COLUMNS_METADATA"(STM_ID, STCM_ID)';
END IF;
END;
/
DECLARE
INDEXCHECKERFLAG INT;
BEGIN
SELECT COUNT(*) INTO INDEXCHECKERFLAG FROM ALL_INDEXES WHERE OWNER = SYS_CONTEXT('USERENV', 'CURRENT_SCHEMA') AND INDEX_NAME = UPPER('ADS_WF_OTID_OID_WFG_ID_IDX');
IF INDEXCHECKERFLAG = 0 THEN
EXECUTE IMMEDIATE 'CREATE INDEX "ADS_WF_OTID_OID_WFG_ID_IDX" ON "ADS_WORKFLOW_STATUS"(OBJECT_TYPE_ID, OBJECT_ID, WFN_ID, WFG_ID)';
END IF;
END;
/
DECLARE
INDEXCHECKERFLAG INT;
BEGIN
SELECT COUNT(*) INTO INDEXCHECKERFLAG FROM ALL_INDEXES WHERE OWNER = SYS_CONTEXT('USERENV', 'CURRENT_SCHEMA') AND INDEX_NAME = UPPER('MAPPING_DETAILS_MID_PID_INDX');
IF INDEXCHECKERFLAG = 0 THEN
EXECUTE IMMEDIATE 'CREATE INDEX "MAPPING_DETAILS_MID_PID_INDX" ON "MAPPING_DETAILS"(PROJECT_ID, STATUS)';
END IF;
END;
/
DECLARE
    COLUMNCHECKERFLAG INT;
BEGIN
    SELECT COUNT(*) INTO COLUMNCHECKERFLAG FROM ALL_TAB_COLUMNS WHERE OWNER = sys_context('userenv', 'current_schema') AND COLUMN_NAME = UPPER('MATCH_TYPE') AND TABLE_NAME = UPPER('BGM_METADATA_AI_MATCH_CONFIG');
    IF COLUMNCHECKERFLAG = 0 THEN
        EXECUTE IMMEDIATE 'ALTER TABLE BGM_METADATA_AI_MATCH_CONFIG ADD MATCH_TYPE INT DEFAULT 1';
        EXECUTE IMMEDIATE 'UPDATE BGM_METADATA_AI_MATCH_CONFIG SET MATCH_TYPE = 1 WHERE MATCH_TYPE IS NULL';
    END IF;
END;
/
DECLARE
    COLUMNCHECKERFLAG INT;
BEGIN
    SELECT COUNT(*) INTO COLUMNCHECKERFLAG FROM ALL_TAB_COLUMNS WHERE  OWNER = sys_context('userenv', 'current_schema') AND COLUMN_NAME = 'MATCH_TYPE' AND TABLE_NAME = UPPER('BGM_METADATA_AI_MATCH_RESULT');
    IF COLUMNCHECKERFLAG = 0 THEN
        EXECUTE IMMEDIATE 'ALTER TABLE BGM_METADATA_AI_MATCH_RESULT ADD MATCH_TYPE INT DEFAULT 1';
        EXECUTE IMMEDIATE 'UPDATE BGM_METADATA_AI_MATCH_RESULT SET MATCH_TYPE = 1 WHERE MATCH_TYPE IS NULL';
    END IF;
END;
/
DECLARE
  TYPECHECKERFLAG INT;
BEGIN
  SELECT COUNT(*)
  INTO TYPECHECKERFLAG
  FROM ALL_OBJECTS
  WHERE OWNER            = sys_context('userenv', 'current_schema')
  AND UPPER(OBJECT_NAME) = 'T_ID_VALUE_OBJ'
  AND UPPER(OBJECT_TYPE) ='TYPE';
  IF TYPECHECKERFLAG     = 0 THEN
    EXECUTE IMMEDIATE 'CREATE TYPE T_ID_VALUE_OBJ AS OBJECT (OBJECT_ID NUMBER, OBJECT_NAME VARCHAR2(4000))';
  END IF;
END;
/

DECLARE
  TYPECHECKERFLAG INT;
BEGIN
  SELECT COUNT(*)
  INTO TYPECHECKERFLAG
  FROM ALL_OBJECTS
  WHERE OWNER            = sys_context('userenv', 'current_schema')
  AND UPPER(OBJECT_NAME) = 'T_ID_VALUE_OBJ_TAB'
  AND UPPER(OBJECT_TYPE) ='TYPE';
  IF TYPECHECKERFLAG     = 0 THEN
    EXECUTE IMMEDIATE 'CREATE TYPE T_ID_VALUE_OBJ_TAB AS TABLE OF T_ID_VALUE_OBJ';
  END IF;
END;
/

DECLARE
  TYPECHECKERFLAG INT;
BEGIN
  SELECT COUNT(*)
  INTO TYPECHECKERFLAG
  FROM ALL_OBJECTS
  WHERE OWNER            = sys_context('userenv', 'current_schema')
  AND UPPER(OBJECT_NAME) = 'T_NAME_PATH_OBJ'
  AND UPPER(OBJECT_TYPE) ='TYPE';
  IF TYPECHECKERFLAG     = 0 THEN
    EXECUTE IMMEDIATE 'CREATE TYPE T_NAME_PATH_OBJ AS OBJECT (OBJECT_NAME VARCHAR2(4000), OBJECT_PATH VARCHAR2(4000))';
  END IF;
END;
/
DECLARE
  TYPECHECKERFLAG INT;
BEGIN
  SELECT COUNT(*)
  INTO TYPECHECKERFLAG
  FROM ALL_OBJECTS
  WHERE OWNER            = sys_context('userenv', 'current_schema')
  AND UPPER(OBJECT_NAME) = 'T_NAME_PATH_OBJ_TAB'
  AND UPPER(OBJECT_TYPE) ='TYPE';
  IF TYPECHECKERFLAG     = 0 THEN
    EXECUTE IMMEDIATE 'CREATE TYPE T_NAME_PATH_OBJ_TAB AS TABLE OF T_NAME_PATH_OBJ';
  END IF;
END;
/
DECLARE
   TABLECHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO TABLECHECKERFLAG FROM ALL_OBJECTS WHERE OWNER = sys_context('userenv', 'current_schema') AND OBJECT_TYPE = 'FUNCTION' AND OBJECT_NAME = UPPER('FN_MS_COLUMN_ID_ATTRIB_CHECK');
   IF TABLECHECKERFLAG = 1 THEN
      EXECUTE IMMEDIATE 'DROP FUNCTION FN_MS_COLUMN_ID_ATTRIB_CHECK';
   END IF;
END;
/
CREATE OR REPLACE FUNCTION fn_ms_column_id_attrib_check (
    i_system_name            VARCHAR2,
    i_environment_name       VARCHAR2,
    i_table_name             VARCHAR2,
    i_column_name            VARCHAR2,
    i_column_type            VARCHAR2,
    i_xpath                  VARCHAR2,
    i_old_system_name        VARCHAR2,
    i_old_environment_name   VARCHAR2,
    i_old_table_name         VARCHAR2,
    i_old_column_name        VARCHAR2,
    i_old_column_type        VARCHAR2,
    i_old_xpath              VARCHAR2,
    i_check_xpath            NUMBER
) RETURN NUMBER IS

    v_sys_space_count           NUMBER;
    v_environment_space_count   NUMBER;
    v_table_space_count         NUMBER;
    v_column_space_count        NUMBER;
    v_column_type_count         NUMBER;
    v_xpath_count               NUMBER;
    v_existedcnt                NUMBER := 0;
    v_current_system_name       VARCHAR2(4000);
    v_current_env_name          VARCHAR2(4000);
    v_current_table_name        VARCHAR2(4000);
    v_current_column_name       VARCHAR2(4000);
    v_current_column_type       VARCHAR2(4000);
    v_current_xpath             VARCHAR2(4000);
    v_cnt                       number;
    v_sys_names_tbl             t_id_value_obj_tab := t_id_value_obj_tab();
    v_env_names_tbl             t_id_value_obj_tab := t_id_value_obj_tab();
    v_tbl_names_tbl             t_id_value_obj_tab := t_id_value_obj_tab();
    v_col_names_tbl             t_id_value_obj_tab := t_id_value_obj_tab();
    v_col_types_tbl             t_id_value_obj_tab := t_id_value_obj_tab();
    v_xpaths_tbl                t_id_value_obj_tab := t_id_value_obj_tab();
BEGIN
    SELECT
        length(i_system_name) - length(replace(i_system_name, CHR(10))),
        length(i_environment_name) - length(replace(i_environment_name, CHR(10))),
        length(i_table_name) - length(replace(i_table_name, CHR(10))),
        length(i_column_name) - length(replace(i_column_name, CHR(10))),
        length(i_column_type) - length(replace(i_column_type, CHR(10))),
        length(i_xpath) - length(replace(i_xpath, CHR(10)))
    INTO
        v_sys_space_count,
        v_environment_space_count,
        v_table_space_count,
        v_column_space_count,
        v_column_type_count,
        v_xpath_count
    FROM
        dual;

    IF ( v_sys_space_count = 0 AND v_environment_space_count = 0 AND v_table_space_count = 0 AND v_column_space_count = 0 AND v_column_type_count

    = 0 AND v_xpath_count = 0 ) THEN
		BEGIN
			IF ( upper(i_system_name) = upper(i_old_system_name) AND upper(i_environment_name) = upper(i_old_environment_name) AND upper
			(i_table_name) = upper(i_old_table_name) AND upper(i_column_name) = upper(i_old_column_name) AND upper(i_column_type) = upper
			(i_old_column_type) AND ( ( i_check_xpath = 1 AND upper(i_xpath) = upper(i_old_xpath) ) OR i_check_xpath = 0 ) ) THEN
				BEGIN
					v_existedcnt := v_existedcnt + 1;
				END;
			END IF;
		END;
    ELSE
        BEGIN
            v_existedcnt := 0;
            SELECT
                t_id_value_obj(ROWNUM, column_value)
            BULK COLLECT
            INTO v_sys_names_tbl
            FROM
                TABLE ( split_string(i_system_name, CHR(10)) );

            SELECT
                t_id_value_obj(ROWNUM, column_value)
            BULK COLLECT
            INTO v_env_names_tbl
            FROM
                TABLE ( split_string(i_environment_name, CHR(10)) );

            SELECT
                t_id_value_obj(ROWNUM, column_value)
            BULK COLLECT
            INTO v_tbl_names_tbl
            FROM
                TABLE ( split_string(i_table_name, CHR(10)) );

            SELECT
                t_id_value_obj(ROWNUM, column_value)
            BULK COLLECT
            INTO v_col_names_tbl
            FROM
                TABLE ( split_string(i_column_name, CHR(10)) );

            SELECT
                t_id_value_obj(ROWNUM, column_value)
            BULK COLLECT
            INTO v_col_types_tbl
            FROM
                TABLE ( split_string(i_column_type, CHR(10)) );

            SELECT
                t_id_value_obj(ROWNUM, column_value)
            BULK COLLECT
            INTO v_xpaths_tbl
            FROM
                TABLE ( split_string(i_xpath, CHR(10)) );
       
            v_cnt := 0;
			
			WHILE v_cnt <= v_column_space_count LOOP
				BEGIN
					v_cnt := v_cnt + 1;
                    BEGIN
                        SELECT (SELECT OBJECT_NAME FROM TABLE(v_SYS_NAMES_TBL) WHERE OBJECT_ID = v_cnt),
                        (SELECT OBJECT_NAME FROM TABLE(v_ENV_NAMES_TBL) WHERE OBJECT_ID = v_cnt),
                        (SELECT OBJECT_NAME FROM TABLE(v_TBL_NAMES_TBL) WHERE OBJECT_ID = v_cnt),
                        (SELECT OBJECT_NAME FROM TABLE(v_COL_NAMES_TBL) WHERE OBJECT_ID = v_cnt),
                        NVL((SELECT OBJECT_NAME FROM TABLE(v_COL_TYPES_TBL) WHERE OBJECT_ID = v_cnt), ' '),
                        NVL((SELECT OBJECT_NAME FROM TABLE(v_XPATHS_TBL) WHERE OBJECT_ID = v_cnt), ' ')
                        INTO v_current_system_name,
                        v_current_env_name,
                        v_current_table_name,
                        v_current_column_name,
                        v_current_column_type,
                        v_current_xpath
                        FROM DUAL;
                    EXCEPTION
                    WHEN NO_DATA_FOUND THEN
                        v_current_system_name := NULL;
                        v_current_env_name := NULL;
                        v_current_table_name := NULL;
                        v_current_column_name := NULL;
                        v_current_column_type := NULL;
                        v_current_xpath := NULL;
                    END;
					IF UPPER(v_current_column_name) = UPPER(i_old_column_name) AND ((i_check_xpath = 1 AND UPPER(v_current_xpath) = UPPER(i_old_xpath)) OR i_check_xpath = 0) AND UPPER(v_current_column_type) = UPPER(i_old_column_type) AND UPPER(v_current_table_name) = UPPER(i_old_table_name) AND UPPER(v_current_env_name) = UPPER(i_old_environment_name) AND UPPER(v_current_system_name) = UPPER(i_old_system_name) then
						BEGIN
							v_existedCnt := v_existedCnt + 1;
						END;
                    end if;
				END;
            end loop;
        END;
    END IF;

    RETURN v_existedcnt;
END fn_ms_column_id_attrib_check;
/

DECLARE
   TABLECHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO TABLECHECKERFLAG FROM ALL_OBJECTS WHERE OWNER = sys_context('userenv', 'current_schema') AND OBJECT_TYPE = 'FUNCTION' AND OBJECT_NAME = UPPER('FN_REPLACE_MS_COLUMN_ID_ATRIB');
   IF TABLECHECKERFLAG = 1 THEN
      EXECUTE IMMEDIATE 'DROP FUNCTION FN_REPLACE_MS_COLUMN_ID_ATRIB';
   END IF;
END;
/

CREATE OR REPLACE FUNCTION FN_REPLACE_MS_COLUMN_ID_ATRIB (
    i_system_name            VARCHAR2,
    i_environment_name       VARCHAR2,
    i_table_name             VARCHAR2,
    i_column_name            VARCHAR2,
    i_column_type            VARCHAR2,
    i_xpath                  VARCHAR2,
    i_old_system_name        VARCHAR2,
    i_old_environment_name   VARCHAR2,
    i_old_table_name         VARCHAR2,
    i_old_column_name        VARCHAR2,
    i_old_column_type        VARCHAR2,
    i_old_xpath              VARCHAR2,
    i_check_xpath            NUMBER,
    i_new_column_name        VARCHAR2,
    i_new_xpath              VARCHAR2
) RETURN T_NAME_PATH_OBJ_TAB PIPELINED IS
    v_sys_space_count           NUMBER;
    v_environment_space_count   NUMBER;
    v_table_space_count         NUMBER;
    v_column_space_count        NUMBER;
    v_column_type_count         NUMBER;
    v_xpath_count               NUMBER;
    v_existedcnt                NUMBER := 0;
    v_current_system_name       VARCHAR2(4000);
    v_current_env_name          VARCHAR2(4000);
    v_current_table_name        VARCHAR2(4000);
    v_current_column_name       VARCHAR2(4000);
    v_current_column_type       VARCHAR2(4000);
    v_current_xpath             VARCHAR2(4000);
    v_transformed_xpath         VARCHAR2(4000);
    V_TEMP_COLUMN_NAME          VARCHAR2(4000);
    V_TEMP_XPATH                VARCHAR2(4000);
    v_cnt                       number;
    v_sys_names_tbl             t_id_value_obj_tab := t_id_value_obj_tab();
    v_env_names_tbl             t_id_value_obj_tab := t_id_value_obj_tab();
    v_tbl_names_tbl             t_id_value_obj_tab := t_id_value_obj_tab();
    v_col_names_tbl             t_id_value_obj_tab := t_id_value_obj_tab();
    v_col_types_tbl             t_id_value_obj_tab := t_id_value_obj_tab();
    v_xpaths_tbl                t_id_value_obj_tab := t_id_value_obj_tab();
BEGIN
    SELECT
        length(i_system_name) - length(replace(i_system_name, CHR(10))),
        length(i_environment_name) - length(replace(i_environment_name, CHR(10))),
        length(i_table_name) - length(replace(i_table_name, CHR(10))),
        length(i_column_name) - length(replace(i_column_name, CHR(10))),
        length(i_column_type) - length(replace(i_column_type, CHR(10))),
        length(i_xpath) - length(replace(i_xpath, CHR(10)))
    INTO
        v_sys_space_count,
        v_environment_space_count,
        v_table_space_count,
        v_column_space_count,
        v_column_type_count,
        v_xpath_count
    FROM
        dual;

    IF ( v_sys_space_count = 0 AND v_environment_space_count = 0 AND v_table_space_count = 0 AND v_column_space_count = 0 AND v_column_type_count

    = 0 AND v_xpath_count = 0 ) THEN
		BEGIN
			IF ( upper(i_system_name) = upper(i_old_system_name) AND upper(i_environment_name) = upper(i_old_environment_name) AND upper
			(i_table_name) = upper(i_old_table_name) AND upper(i_column_name) = upper(i_old_column_name) AND upper(i_column_type) = upper
			(i_old_column_type) AND ( ( i_check_xpath = 1 AND upper(i_xpath) = upper(i_old_xpath) ) OR i_check_xpath = 0 ) ) THEN
				BEGIN
                    v_temp_column_name := i_new_column_name;
					v_temp_xpath := i_xpath;
					
					IF i_check_xpath = 1 AND NVL(i_xpath, ' ') <> ' ' THEN
						BEGIN
							v_temp_xpath := I_new_xpath;
						END;
                    END IF;
				END;
			END IF;
		END;
    ELSE
        BEGIN

            SELECT
                t_id_value_obj(ROWNUM, column_value)
            BULK COLLECT
            INTO v_sys_names_tbl
            FROM
                TABLE ( split_string(i_system_name, CHR(10)) );

            SELECT
                t_id_value_obj(ROWNUM, column_value)
            BULK COLLECT
            INTO v_env_names_tbl
            FROM
                TABLE ( split_string(i_environment_name, CHR(10)) );

            SELECT
                t_id_value_obj(ROWNUM, column_value)
            BULK COLLECT
            INTO v_tbl_names_tbl
            FROM
                TABLE ( split_string(i_table_name, CHR(10)) );

            SELECT
                t_id_value_obj(ROWNUM, column_value)
            BULK COLLECT
            INTO v_col_names_tbl
            FROM
                TABLE ( split_string(i_column_name, CHR(10)) );

            SELECT
                t_id_value_obj(ROWNUM, column_value)
            BULK COLLECT
            INTO v_col_types_tbl
            FROM
                TABLE ( split_string(i_column_type, CHR(10)) );

            SELECT
                t_id_value_obj(ROWNUM, column_value)
            BULK COLLECT
            INTO v_xpaths_tbl
            FROM
                TABLE ( split_string(i_xpath, CHR(10)) );
       
            v_cnt := 0;
			
			WHILE v_cnt <= v_column_space_count AND v_cnt <= v_xpath_count LOOP
				BEGIN
					v_cnt := v_cnt + 1;
                    BEGIN
                        SELECT (SELECT OBJECT_NAME FROM TABLE(v_SYS_NAMES_TBL) WHERE OBJECT_ID = v_cnt),
                        (SELECT OBJECT_NAME FROM TABLE(v_ENV_NAMES_TBL) WHERE OBJECT_ID = v_cnt),
                        (SELECT OBJECT_NAME FROM TABLE(v_TBL_NAMES_TBL) WHERE OBJECT_ID = v_cnt),
                        (SELECT OBJECT_NAME FROM TABLE(v_COL_NAMES_TBL) WHERE OBJECT_ID = v_cnt),
                        NVL((SELECT OBJECT_NAME FROM TABLE(v_COL_TYPES_TBL) WHERE OBJECT_ID = v_cnt), ' '),
                        NVL((SELECT OBJECT_NAME FROM TABLE(v_XPATHS_TBL) WHERE OBJECT_ID = v_cnt), ' ')
                        INTO v_current_system_name,
                        v_current_env_name,
                        v_current_table_name,
                        v_current_column_name,
                        v_current_column_type,
                        v_current_xpath
                        FROM DUAL;
                    EXCEPTION
                    WHEN NO_DATA_FOUND THEN
                        v_current_system_name := NULL;
                        v_current_env_name := NULL;
                        v_current_table_name := NULL;
                        v_current_column_name := NULL;
                        v_current_column_type := NULL;
                        v_current_xpath := NULL;
                    END;
					IF UPPER(v_current_column_name) = UPPER(i_old_column_name) AND ((i_check_xpath = 1 AND UPPER(v_current_xpath) = UPPER(i_old_xpath)) OR i_check_xpath = 0) AND UPPER(v_current_column_type) = UPPER(i_old_column_type) AND UPPER(v_current_table_name) = UPPER(i_old_table_name) AND UPPER(v_current_env_name) = UPPER(i_old_environment_name) AND UPPER(v_current_system_name) = UPPER(i_old_system_name) then
						BEGIN
                            v_temp_column_name := case when v_cnt = 1 then i_new_column_name else v_temp_column_name || chr(10) || i_new_column_name end;
                            v_transformed_xpath := v_current_xpath;
                            IF i_check_xpath = 1  AND NVL(v_current_xpath, ' ') <> ' ' THEN
                                BEGIN
                                    v_transformed_xpath := i_new_xpath;
                                END;
                            END IF;
                            v_temp_xpath := case when v_cnt = 1 then v_transformed_xpath else v_temp_xpath || chr(10) || i_new_xpath end;
						END;
                    ELSE
                        BEGIN
                            v_temp_column_name := case when v_cnt = 1 then v_current_column_name else v_temp_column_name || chr(10) || v_current_column_name end;
							v_temp_xpath := case when v_cnt = 1 then v_current_xpath else v_temp_xpath || chr(10) || v_current_xpath end;
                        END;
                    end if;
				END;
            end loop;
        END;
    END IF;

    PIPE ROW(T_NAME_PATH_OBJ(v_temp_column_name, v_temp_xpath));

    RETURN;
END FN_REPLACE_MS_COLUMN_ID_ATRIB;
/

DECLARE
   TABLECHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO TABLECHECKERFLAG FROM ALL_OBJECTS WHERE OWNER = sys_context('userenv', 'current_schema') AND OBJECT_TYPE = 'FUNCTION' AND OBJECT_NAME = UPPER('FN_MS_TABLE_ID_ATTRIB_CHECK');
   IF TABLECHECKERFLAG = 1 THEN
      EXECUTE IMMEDIATE 'DROP FUNCTION FN_MS_TABLE_ID_ATTRIB_CHECK';
   END IF;
END;
/

CREATE OR REPLACE FUNCTION FN_MS_TABLE_ID_ATTRIB_CHECK (
    i_system_name            VARCHAR2,
    i_environment_name       VARCHAR2,
    i_table_name             VARCHAR2,
    i_table_type            VARCHAR2,
    i_xpath                  VARCHAR2,
    i_old_system_name        VARCHAR2,
    i_old_environment_name   VARCHAR2,
    i_old_table_name         VARCHAR2,
    i_old_table_type        VARCHAR2,
    i_old_xpath              VARCHAR2,
    i_check_xpath            NUMBER
) RETURN NUMBER IS

    v_sys_space_count           NUMBER;
    v_environment_space_count   NUMBER;
    v_table_space_count         NUMBER;
    v_table_type_count         NUMBER;
    v_xpath_count               NUMBER;
    v_existedcnt                NUMBER := 0;
    v_current_system_name       VARCHAR2(4000);
    v_current_env_name          VARCHAR2(4000);
    v_current_table_name        VARCHAR2(4000);
    v_current_table_type       VARCHAR2(4000);
    v_current_xpath             VARCHAR2(4000);
    v_cnt                       number;
    v_sys_names_tbl             t_id_value_obj_tab := t_id_value_obj_tab();
    v_env_names_tbl             t_id_value_obj_tab := t_id_value_obj_tab();
    v_tbl_names_tbl             t_id_value_obj_tab := t_id_value_obj_tab();
    v_col_types_tbl             t_id_value_obj_tab := t_id_value_obj_tab();
    v_xpaths_tbl                t_id_value_obj_tab := t_id_value_obj_tab();
BEGIN
    SELECT
        length(i_system_name) - length(replace(i_system_name, CHR(10))),
        length(i_environment_name) - length(replace(i_environment_name, CHR(10))),
        length(i_table_name) - length(replace(i_table_name, CHR(10))),
        length(i_table_type) - length(replace(i_table_type, CHR(10))),
        length(i_xpath) - length(replace(i_xpath, CHR(10)))
    INTO
        v_sys_space_count,
        v_environment_space_count,
        v_table_space_count,
        v_table_type_count,
        v_xpath_count
    FROM
        dual;

    IF ( v_sys_space_count = 0 AND v_environment_space_count = 0 AND v_table_space_count = 0 AND v_table_type_count

    = 0 AND v_xpath_count = 0 ) THEN
		BEGIN
			IF ( upper(i_system_name) = upper(i_old_system_name) AND upper(i_environment_name) = upper(i_old_environment_name) AND upper
			(i_table_name) = upper(i_old_table_name) AND upper(i_table_type) = upper
			(i_old_table_type) AND ( ( i_check_xpath = 1 AND INSTR(UPPER(i_xpath), UPPER(i_old_xpath)) = 1) OR i_check_xpath = 0 ) ) THEN
				BEGIN
					v_existedcnt := v_existedcnt + 1;
				END;
			END IF;
		END;
    ELSE
        BEGIN
            v_existedcnt := 0;
            SELECT
                t_id_value_obj(ROWNUM, column_value)
            BULK COLLECT
            INTO v_sys_names_tbl
            FROM
                TABLE ( split_string(i_system_name, CHR(10)) );

            SELECT
                t_id_value_obj(ROWNUM, column_value)
            BULK COLLECT
            INTO v_env_names_tbl
            FROM
                TABLE ( split_string(i_environment_name, CHR(10)) );

            SELECT
                t_id_value_obj(ROWNUM, column_value)
            BULK COLLECT
            INTO v_tbl_names_tbl
            FROM
                TABLE ( split_string(i_table_name, CHR(10)) );

            SELECT
                t_id_value_obj(ROWNUM, column_value)
            BULK COLLECT
            INTO v_col_types_tbl
            FROM
                TABLE ( split_string(i_table_type, CHR(10)) );

            SELECT
                t_id_value_obj(ROWNUM, column_value)
            BULK COLLECT
            INTO v_xpaths_tbl
            FROM
                TABLE ( split_string(i_xpath, CHR(10)) );
       
            v_cnt := 0;
			
			WHILE v_cnt <= v_table_space_count LOOP
				BEGIN
					v_cnt := v_cnt + 1;
                    BEGIN
                        SELECT (SELECT OBJECT_NAME FROM TABLE(v_SYS_NAMES_TBL) WHERE OBJECT_ID = v_cnt),
                        (SELECT OBJECT_NAME FROM TABLE(v_ENV_NAMES_TBL) WHERE OBJECT_ID = v_cnt),
                        (SELECT OBJECT_NAME FROM TABLE(v_TBL_NAMES_TBL) WHERE OBJECT_ID = v_cnt),
                        NVL((SELECT OBJECT_NAME FROM TABLE(v_COL_TYPES_TBL) WHERE OBJECT_ID = v_cnt), ' '),
                        NVL((SELECT OBJECT_NAME FROM TABLE(v_XPATHS_TBL) WHERE OBJECT_ID = v_cnt), ' ')
                        INTO v_current_system_name,
                        v_current_env_name,
                        v_current_table_name,
                        v_current_table_type,
                        v_current_xpath
                        FROM DUAL;
                    EXCEPTION
                    WHEN NO_DATA_FOUND THEN
                        v_current_system_name := NULL;
                        v_current_env_name := NULL;
                        v_current_table_name := NULL;
                        v_current_table_type := NULL;
                        v_current_xpath := NULL;
                    END;
					IF ((i_check_xpath = 1 AND INSTR(UPPER(v_current_xpath), UPPER(i_old_xpath)) = 1) OR i_check_xpath = 0) AND UPPER(v_current_table_type) = UPPER(i_old_table_type) AND UPPER(v_current_table_name) = UPPER(i_old_table_name) AND UPPER(v_current_env_name) = UPPER(i_old_environment_name) AND UPPER(v_current_system_name) = UPPER(i_old_system_name) then
						BEGIN
							v_existedCnt := v_existedCnt + 1;
						END;
                    end if;
				END;
            end loop;
        END;
    END IF;

    RETURN v_existedcnt;
END FN_MS_TABLE_ID_ATTRIB_CHECK;
/


DECLARE
   TABLECHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO TABLECHECKERFLAG FROM ALL_OBJECTS WHERE OWNER = sys_context('userenv', 'current_schema') AND OBJECT_TYPE = 'FUNCTION' AND OBJECT_NAME = UPPER('FN_REPLACE_MS_TABLE_ID_ATRIB');
   IF TABLECHECKERFLAG = 1 THEN
      EXECUTE IMMEDIATE 'DROP FUNCTION FN_REPLACE_MS_TABLE_ID_ATRIB';
   END IF;
END;
/
CREATE OR REPLACE FUNCTION fn_replace_ms_table_id_atrib (
    i_system_name            VARCHAR2,
    i_environment_name       VARCHAR2,
    i_table_name             VARCHAR2,
    i_table_type             VARCHAR2,
    i_xpath                  VARCHAR2,
    i_old_system_name        VARCHAR2,
    i_old_environment_name   VARCHAR2,
    i_old_table_name         VARCHAR2,
    i_old_table_type         VARCHAR2,
    i_old_xpath              VARCHAR2,
    i_check_xpath            NUMBER,
    i_new_table_name         VARCHAR2,
    i_new_xpath              VARCHAR2
) RETURN t_name_path_obj_tab
    PIPELINED
IS

    v_sys_space_count           NUMBER;
    v_environment_space_count   NUMBER;
    v_table_space_count         NUMBER;
    v_table_type_count          NUMBER;
    v_xpath_count               NUMBER;
    v_existedcnt                NUMBER := 0;
    v_current_system_name       VARCHAR2(4000);
    v_current_env_name          VARCHAR2(4000);
    v_current_table_name        VARCHAR2(4000);
    v_current_table_type        VARCHAR2(4000);
    v_current_xpath             VARCHAR2(4000);
    v_transformed_xpath         VARCHAR2(4000);
    v_temp_table_name           VARCHAR2(4000);
    v_temp_xpath                VARCHAR2(4000);
    v_cnt                       NUMBER;
    v_sys_names_tbl             t_id_value_obj_tab := t_id_value_obj_tab();
    v_env_names_tbl             t_id_value_obj_tab := t_id_value_obj_tab();
    v_tbl_names_tbl             t_id_value_obj_tab := t_id_value_obj_tab();
    v_col_types_tbl             t_id_value_obj_tab := t_id_value_obj_tab();
    v_xpaths_tbl                t_id_value_obj_tab := t_id_value_obj_tab();
BEGIN
    SELECT
        length(i_system_name) - length(replace(i_system_name, CHR(10))),
        length(i_environment_name) - length(replace(i_environment_name, CHR(10))),
        length(i_table_name) - length(replace(i_table_name, CHR(10))),
        length(i_table_type) - length(replace(i_table_type, CHR(10))),
        length(i_xpath) - length(replace(i_xpath, CHR(10)))
    INTO
        v_sys_space_count,
        v_environment_space_count,
        v_table_space_count,
        v_table_type_count,
        v_xpath_count
    FROM
        dual;

    IF ( v_sys_space_count = 0 AND v_environment_space_count = 0 AND v_table_space_count = 0 AND v_table_type_count = 0 AND v_xpath_count

    = 0 ) THEN
        BEGIN
            IF ( upper(i_system_name) = upper(i_old_system_name) AND upper(i_environment_name) = upper(i_old_environment_name) AND
            upper(i_table_name) = upper(i_old_table_name) AND upper(i_table_type) = upper(i_old_table_type) AND ( ( i_check_xpath
            = 1 AND instr(upper(i_xpath), upper(i_old_xpath)) = 1 ) OR i_check_xpath = 0 ) ) THEN
                BEGIN
                    v_temp_table_name := i_new_table_name;
                    v_temp_xpath := i_xpath;
                    IF i_check_xpath = 1 AND nvl(i_xpath, ' ') <> ' ' THEN
                        BEGIN
                            v_temp_xpath := i_new_xpath || SUBSTR(i_xpath, LENGTH(i_old_xpath) + 1, LENGTH(i_xpath));
                        END;
                    END IF;

                END;

            END IF;

        END;

    ELSE
        BEGIN
            SELECT
                t_id_value_obj(ROWNUM, column_value)
            BULK COLLECT
            INTO v_sys_names_tbl
            FROM
                TABLE ( split_string(i_system_name, CHR(10)) );

            SELECT
                t_id_value_obj(ROWNUM, column_value)
            BULK COLLECT
            INTO v_env_names_tbl
            FROM
                TABLE ( split_string(i_environment_name, CHR(10)) );

            SELECT
                t_id_value_obj(ROWNUM, column_value)
            BULK COLLECT
            INTO v_tbl_names_tbl
            FROM
                TABLE ( split_string(i_table_name, CHR(10)) );

            SELECT
                t_id_value_obj(ROWNUM, column_value)
            BULK COLLECT
            INTO v_col_types_tbl
            FROM
                TABLE ( split_string(i_table_type, CHR(10)) );

            SELECT
                t_id_value_obj(ROWNUM, column_value)
            BULK COLLECT
            INTO v_xpaths_tbl
            FROM
                TABLE ( split_string(i_xpath, CHR(10)) );

            v_cnt := 0;
            WHILE v_cnt <= v_table_space_count OR v_cnt <= v_xpath_count LOOP BEGIN
                v_cnt := v_cnt + 1;
                BEGIN
                    SELECT
                        (
                            SELECT
                                object_name
                            FROM
                                TABLE ( v_sys_names_tbl )
                            WHERE
                                object_id = v_cnt
                        ),
                        (
                            SELECT
                                object_name
                            FROM
                                TABLE ( v_env_names_tbl )
                            WHERE
                                object_id = v_cnt
                        ),
                        (
                            SELECT
                                object_name
                            FROM
                                TABLE ( v_tbl_names_tbl )
                            WHERE
                                object_id = v_cnt
                        ),
                        nvl((
                            SELECT
                                object_name
                            FROM
                                TABLE(v_col_types_tbl)
                            WHERE
                                object_id = v_cnt
                        ), ' '),
                        nvl((
                            SELECT
                                object_name
                            FROM
                                TABLE(v_xpaths_tbl)
                            WHERE
                                object_id = v_cnt
                        ), ' ')
                    INTO
                        v_current_system_name,
                        v_current_env_name,
                        v_current_table_name,
                        v_current_table_type,
                        v_current_xpath
                    FROM
                        dual;

                EXCEPTION
                    WHEN no_data_found THEN
                        v_current_system_name := NULL;
                        v_current_env_name := NULL;
                        v_current_table_name := NULL;
                        v_current_table_type := NULL;
                        v_current_xpath := NULL;
                END;

                IF ( ( i_check_xpath = 1 AND instr(upper(v_current_xpath), upper(i_old_xpath)) = 1 ) OR i_check_xpath = 0 ) AND upper

                (v_current_table_type) = upper(i_old_table_type) AND upper(v_current_table_name) = upper(i_old_table_name) AND upper

                (v_current_env_name) = upper(i_old_environment_name) AND upper(v_current_system_name) = upper(i_old_system_name)

                THEN
                    BEGIN
                        v_temp_table_name :=
                            CASE
                                WHEN v_cnt = 1 THEN
                                    i_new_table_name
                                ELSE v_temp_table_name
                                     || chr(10)
                                     || i_new_table_name
                            END;

                        v_transformed_xpath := i_xpath;
                        IF i_check_xpath = 1 AND nvl(v_current_xpath, ' ') <> ' ' THEN
                            BEGIN
                                v_transformed_xpath := i_new_xpath || SUBSTR(v_current_xpath, LENGTH(i_old_xpath) + 1, LENGTH(v_current_xpath));
                            END;
                        END IF;

                        v_temp_xpath :=
                            CASE
                                WHEN v_cnt = 1 THEN
                                    v_transformed_xpath
                                ELSE v_temp_xpath
                                     || chr(10)
                                     || v_transformed_xpath
                            END;

                    END;
                ELSE
                    BEGIN
                        v_temp_table_name :=
                            CASE
                                WHEN v_cnt = 1 THEN
                                    v_current_table_name
                                ELSE v_temp_table_name
                                     || chr(10)
                                     || v_current_table_name
                            END;

                        v_temp_xpath :=
                            CASE
                                WHEN v_cnt = 1 THEN
                                    v_current_xpath
                                ELSE v_temp_xpath
                                     || chr(10)
                                     || v_current_xpath
                            END;

                    END;
                END IF;

            END;
            END LOOP;

        END;
    END IF;

    PIPE ROW ( t_name_path_obj(v_temp_table_name, v_temp_xpath) );
    return;
END fn_replace_ms_table_id_atrib;
/
DECLARE
   TABLECHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO TABLECHECKERFLAG FROM ALL_OBJECTS WHERE OWNER = sys_context('userenv', 'current_schema') AND OBJECT_TYPE = 'FUNCTION' AND OBJECT_NAME = UPPER('FN_MS_XPATH_PRFX_ATTRIB_CHECK');
   IF TABLECHECKERFLAG = 1 THEN
      EXECUTE IMMEDIATE 'DROP FUNCTION FN_MS_XPATH_PRFX_ATTRIB_CHECK';
   END IF;
END;
/
CREATE OR REPLACE FUNCTION FN_MS_XPATH_PRFX_ATTRIB_CHECK (
    i_system_name            VARCHAR2,
    i_environment_name       VARCHAR2,
    i_table_type            VARCHAR2,
    i_xpath                  VARCHAR2,
    i_old_system_name        VARCHAR2,
    i_old_environment_name   VARCHAR2,
    i_old_table_type        VARCHAR2,
    i_old_xpath              VARCHAR2,
    i_check_xpath            NUMBER
) RETURN NUMBER IS

    v_sys_space_count           NUMBER;
    v_environment_space_count   NUMBER;
    v_table_type_count         NUMBER;
    v_xpath_count               NUMBER;
    v_existedcnt                NUMBER := 0;
    v_current_system_name       VARCHAR2(4000);
    v_current_env_name          VARCHAR2(4000);
    v_current_table_type       VARCHAR2(4000);
    v_current_xpath             VARCHAR2(4000);
    v_cnt                       number;
    v_sys_names_tbl             t_id_value_obj_tab := t_id_value_obj_tab();
    v_env_names_tbl             t_id_value_obj_tab := t_id_value_obj_tab();
    v_col_types_tbl             t_id_value_obj_tab := t_id_value_obj_tab();
    v_xpaths_tbl                t_id_value_obj_tab := t_id_value_obj_tab();
BEGIN
    SELECT
        length(i_system_name) - length(replace(i_system_name, CHR(10))),
        length(i_environment_name) - length(replace(i_environment_name, CHR(10))),
        length(i_table_type) - length(replace(i_table_type, CHR(10))),
        length(i_xpath) - length(replace(i_xpath, CHR(10)))
    INTO
        v_sys_space_count,
        v_environment_space_count,
        v_table_type_count,
        v_xpath_count
    FROM
        dual;

    IF ( v_sys_space_count = 0 AND v_environment_space_count = 0 AND v_table_type_count

    = 0 AND v_xpath_count = 0 ) THEN
		BEGIN
			IF ( upper(i_system_name) = upper(i_old_system_name) AND upper(i_environment_name) = upper(i_old_environment_name) AND upper(i_table_type) = upper
			(i_old_table_type) AND ( ( i_check_xpath = 1 AND INSTR(UPPER(i_xpath), UPPER(i_old_xpath)) = 1) OR i_check_xpath = 0 ) ) THEN
				BEGIN
					v_existedcnt := v_existedcnt + 1;
				END;
			END IF;
		END;
    ELSE
        BEGIN
            v_existedcnt := 0;
            SELECT
                t_id_value_obj(ROWNUM, column_value)
            BULK COLLECT
            INTO v_sys_names_tbl
            FROM
                TABLE ( split_string(i_system_name, CHR(10)) );

            SELECT
                t_id_value_obj(ROWNUM, column_value)
            BULK COLLECT
            INTO v_env_names_tbl
            FROM
                TABLE ( split_string(i_environment_name, CHR(10)) );

            SELECT
                t_id_value_obj(ROWNUM, column_value)
            BULK COLLECT
            INTO v_col_types_tbl
            FROM
                TABLE ( split_string(i_table_type, CHR(10)) );

            SELECT
                t_id_value_obj(ROWNUM, column_value)
            BULK COLLECT
            INTO v_xpaths_tbl
            FROM
                TABLE ( split_string(i_xpath, CHR(10)) );
       
            v_cnt := 0;
			
			WHILE v_cnt <= v_xpath_count LOOP
				BEGIN
					v_cnt := v_cnt + 1;
                    BEGIN
                        SELECT (SELECT OBJECT_NAME FROM TABLE(v_SYS_NAMES_TBL) WHERE OBJECT_ID = v_cnt),
                        (SELECT OBJECT_NAME FROM TABLE(v_ENV_NAMES_TBL) WHERE OBJECT_ID = v_cnt),
                        NVL((SELECT OBJECT_NAME FROM TABLE(v_COL_TYPES_TBL) WHERE OBJECT_ID = v_cnt), ' '),
                        NVL((SELECT OBJECT_NAME FROM TABLE(v_XPATHS_TBL) WHERE OBJECT_ID = v_cnt), ' ')
                        INTO v_current_system_name,
                        v_current_env_name,
                        v_current_table_type,
                        v_current_xpath
                        FROM DUAL;
                    EXCEPTION
                    WHEN NO_DATA_FOUND THEN
                        v_current_system_name := NULL;
                        v_current_env_name := NULL;
                        v_current_table_type := NULL;
                        v_current_xpath := NULL;
                    END;
					IF ((i_check_xpath = 1 AND INSTR(UPPER(v_current_xpath), UPPER(i_old_xpath)) = 1) OR i_check_xpath = 0) AND UPPER(v_current_table_type) = UPPER(i_old_table_type) AND UPPER(v_current_env_name) = UPPER(i_old_environment_name) AND UPPER(v_current_system_name) = UPPER(i_old_system_name) then
						BEGIN
							v_existedCnt := v_existedCnt + 1;
						END;
                    end if;
				END;
            end loop;
        END;
    END IF;

    RETURN v_existedcnt;
END FN_MS_XPATH_PRFX_ATTRIB_CHECK;
/
DECLARE
   TABLECHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO TABLECHECKERFLAG FROM ALL_OBJECTS WHERE OWNER = sys_context('userenv', 'current_schema') AND OBJECT_TYPE = 'FUNCTION' AND OBJECT_NAME = UPPER('FN_REPLACE_MS_XPATH_PRFX');
   IF TABLECHECKERFLAG = 1 THEN
      EXECUTE IMMEDIATE 'DROP FUNCTION FN_REPLACE_MS_XPATH_PRFX';
   END IF;
END;
/
CREATE OR REPLACE FUNCTION FN_REPLACE_MS_XPATH_PRFX (
    i_system_name            VARCHAR2,
    i_environment_name       VARCHAR2,
    i_table_type             VARCHAR2,
    i_xpath                  VARCHAR2,
    i_old_system_name        VARCHAR2,
    i_old_environment_name   VARCHAR2,
    i_old_table_type         VARCHAR2,
    i_old_xpath              VARCHAR2,
    i_check_xpath            NUMBER,
    i_new_xpath              VARCHAR2
) RETURN varchar2
    IS

    v_sys_space_count           NUMBER;
    v_environment_space_count   NUMBER;
    v_table_type_count          NUMBER;
    v_xpath_count               NUMBER;
    v_existedcnt                NUMBER := 0;
    v_current_system_name       VARCHAR2(4000);
    v_current_env_name          VARCHAR2(4000);
    v_current_table_type        VARCHAR2(4000);
    v_current_xpath             VARCHAR2(4000);
    v_transformed_xpath         VARCHAR2(4000);
    v_temp_xpath                VARCHAR2(4000);
    v_cnt                       NUMBER;
    v_sys_names_tbl             t_id_value_obj_tab := t_id_value_obj_tab();
    v_env_names_tbl             t_id_value_obj_tab := t_id_value_obj_tab();
    v_col_types_tbl             t_id_value_obj_tab := t_id_value_obj_tab();
    v_xpaths_tbl                t_id_value_obj_tab := t_id_value_obj_tab();
BEGIN
    SELECT
        length(i_system_name) - length(replace(i_system_name, CHR(10))),
        length(i_environment_name) - length(replace(i_environment_name, CHR(10))),
        length(i_table_type) - length(replace(i_table_type, CHR(10))),
        length(i_xpath) - length(replace(i_xpath, CHR(10)))
    INTO
        v_sys_space_count,
        v_environment_space_count,
        v_table_type_count,
        v_xpath_count
    FROM
        dual;

    IF ( v_sys_space_count = 0 AND v_environment_space_count = 0 AND v_table_type_count = 0 AND v_xpath_count

    = 0 ) THEN
        BEGIN
            IF ( upper(i_system_name) = upper(i_old_system_name) AND upper(i_environment_name) = upper(i_old_environment_name) AND
            upper(i_table_type) = upper(i_old_table_type) AND ( ( i_check_xpath
            = 1 AND instr(upper(i_xpath), upper(i_old_xpath)) = 1 ) OR i_check_xpath = 0 ) ) THEN
                BEGIN
                    v_temp_xpath := i_xpath;
                    IF i_check_xpath = 1 AND nvl(i_xpath, ' ') <> ' ' THEN
                        BEGIN
                            v_temp_xpath := i_new_xpath || SUBSTR(i_xpath, LENGTH(i_old_xpath) + 1, LENGTH(i_xpath));
                        END;
                    END IF;

                END;

            END IF;

        END;

    ELSE
        BEGIN
            SELECT
                t_id_value_obj(ROWNUM, column_value)
            BULK COLLECT
            INTO v_sys_names_tbl
            FROM
                TABLE ( split_string(i_system_name, CHR(10)) );

            SELECT
                t_id_value_obj(ROWNUM, column_value)
            BULK COLLECT
            INTO v_env_names_tbl
            FROM
                TABLE ( split_string(i_environment_name, CHR(10)) );

            SELECT
                t_id_value_obj(ROWNUM, column_value)
            BULK COLLECT
            INTO v_col_types_tbl
            FROM
                TABLE ( split_string(i_table_type, CHR(10)) );

            SELECT
                t_id_value_obj(ROWNUM, column_value)
            BULK COLLECT
            INTO v_xpaths_tbl
            FROM
                TABLE ( split_string(i_xpath, CHR(10)) );

            v_cnt := 0;
            WHILE v_cnt <= v_xpath_count LOOP BEGIN
                v_cnt := v_cnt + 1;
                BEGIN
                    SELECT
                        (
                            SELECT
                                object_name
                            FROM
                                TABLE ( v_sys_names_tbl )
                            WHERE
                                object_id = v_cnt
                        ),
                        (
                            SELECT
                                object_name
                            FROM
                                TABLE ( v_env_names_tbl )
                            WHERE
                                object_id = v_cnt
                        ),
                        nvl((
                            SELECT
                                object_name
                            FROM
                                TABLE(v_col_types_tbl)
                            WHERE
                                object_id = v_cnt
                        ), ' '),
                        nvl((
                            SELECT
                                object_name
                            FROM
                                TABLE(v_xpaths_tbl)
                            WHERE
                                object_id = v_cnt
                        ), ' ')
                    INTO
                        v_current_system_name,
                        v_current_env_name,
                        v_current_table_type,
                        v_current_xpath
                    FROM
                        dual;

                EXCEPTION
                    WHEN no_data_found THEN
                        v_current_system_name := NULL;
                        v_current_env_name := NULL;
                        v_current_table_type := NULL;
                        v_current_xpath := NULL;
                END;

                IF ( ( i_check_xpath = 1 AND instr(upper(v_current_xpath), upper(i_old_xpath)) = 1 ) OR i_check_xpath = 0 ) AND upper

                (v_current_table_type) = upper(i_old_table_type) AND upper

                (v_current_env_name) = upper(i_old_environment_name) AND upper(v_current_system_name) = upper(i_old_system_name)

                THEN
                    BEGIN
                        v_transformed_xpath := i_xpath;
                        IF i_check_xpath = 1 AND nvl(v_current_xpath, ' ') <> ' ' THEN
                            BEGIN
                                v_transformed_xpath := i_new_xpath || SUBSTR(v_current_xpath, LENGTH(i_old_xpath) + 1, LENGTH(v_current_xpath));
                            END;
                        END IF;

                        v_temp_xpath :=
                            CASE
                                WHEN v_cnt = 1 THEN
                                    v_transformed_xpath
                                ELSE v_temp_xpath
                                     || chr(10)
                                     || v_transformed_xpath
                            END;

                    END;
                ELSE
                    BEGIN
                        v_temp_xpath :=
                            CASE
                                WHEN v_cnt = 1 THEN
                                    v_current_xpath
                                ELSE v_temp_xpath
                                     || chr(10)
                                     || v_current_xpath
                            END;

                    END;
                END IF;

            END;
            END LOOP;

        END;
    END IF;

    return v_temp_xpath;
END FN_REPLACE_MS_XPATH_PRFX;
/
DECLARE
   TABLECHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO TABLECHECKERFLAG FROM ALL_OBJECTS WHERE OWNER = sys_context('userenv', 'current_schema') AND OBJECT_TYPE = 'PROCEDURE' AND OBJECT_NAME = UPPER('UPDATE_DECLARATION_PATH_PROC');
   IF TABLECHECKERFLAG = 1 THEN
      EXECUTE IMMEDIATE 'DROP PROCEDURE UPDATE_DECLARATION_PATH_PROC';
   END IF;
END;
/
CREATE OR REPLACE PROCEDURE "UPDATE_DECLARATION_PATH_PROC"
(STMID IN NUMBER,NEWTABLE_NAME IN VARCHAR2,OLD_TBL_PATH IN VARCHAR2,NEW_TBL_PATH IN VARCHAR2)
IS
STCMID NUMBER ;
EXISTING_PATH VARCHAR(4000);
UPDATED_PATH VARCHAR(4000);
CURSOR STCM_CURSOR IS
(SELECT DECLARATION_PATH,STCM_ID FROM SYSTEM_TABLE_COLUMNS_METADATA WHERE STM_ID = STMID);
BEGIN
UPDATE SYSTEM_TABLE_COLUMNS_METADATA SET TABLE_NAME = NEWTABLE_NAME WHERE STM_ID = STMID;
OPEN STCM_CURSOR;
LOOP
FETCH STCM_CURSOR INTO EXISTING_PATH,STCMID;
EXIT WHEN STCM_CURSOR%NOTFOUND;
IF EXISTING_PATH LIKE CONCAT(OLD_TBL_PATH, '%' ) THEN
UPDATED_PATH := CONCAT(NEW_TBL_PATH,SUBSTR(EXISTING_PATH,LENGTH(OLD_TBL_PATH)+1,LENGTH(EXISTING_PATH)));
UPDATE SYSTEM_TABLE_COLUMNS_METADATA SET DECLARATION_PATH = UPDATED_PATH WHERE STCM_ID = STCMID;
UPDATE SYSTEM_TABLE_COLUMNS_METADATA SET COLUMN_NAME = NEWTABLE_NAME WHERE REF_ID = STMID;
UPDATE SYSTEM_TABLE_METADATA SET DECLARATION_PATH = CASE WHEN SUBSTR(DECLARATION_PATH, LENGTH(OLD_TBL_PATH||'/')) = OLD_TBL_PATH||'/' THEN NEW_TBL_PATH||'/' || SUBSTR(DECLARATION_PATH, LENGTH(OLD_TBL_PATH||'/')+1, LENGTH(DECLARATION_PATH)) ELSE DECLARATION_PATH END WHERE SCE_ID = (SELECT SCE_ID FROM SYSTEM_TABLE_METADATA WHERE STM_ID = STMID);
UPDATE SYSTEM_TABLE_COLUMNS_METADATA SET DECLARATION_PATH = CASE WHEN SUBSTR(DECLARATION_PATH, LENGTH(OLD_TBL_PATH||'/')) = OLD_TBL_PATH||'/' THEN NEW_TBL_PATH||'/' ||SUBSTR(DECLARATION_PATH, LENGTH(OLD_TBL_PATH||'/')+1, LENGTH(DECLARATION_PATH)) ELSE DECLARATION_PATH END WHERE SCE_ID = (SELECT SCE_ID FROM SYSTEM_TABLE_METADATA WHERE STM_ID = STMID);
UPDATED_PATH := '';
END IF;
END LOOP;
CLOSE STCM_CURSOR;
END;
/
DECLARE
VERSIONCHECKER INT;
BEGIN
    SELECT COUNT(*) INTO VERSIONCHECKER FROM ADS_MM_VERSION WHERE VALUE <= 10.1;
    IF VERSIONCHECKER > 0 THEN
	EXECUTE IMMEDIATE 'UPDATE SYSTEM_TABLE_COLUMNS_METADATA SET DECLARATION_PATH = SUBSTR(DECLARATION_PATH, 0, INSTR(DECLARATION_PATH, ''/'', -1)-1)
	WHERE COLUMN_NAME = SUBSTR(DECLARATION_PATH, INSTR(DECLARATION_PATH, ''/'', -1)+1)
	AND TYPE <> ''ENTITY''
	AND TABLE_NAME <> COLUMN_NAME';
	EXECUTE IMMEDIATE 'UPDATE SYSTEM_TABLE_METADATA STM SET DECLARATION_PATH = SUBSTR(DECLARATION_PATH, INSTR(DECLARATION_PATH, ''/'')+1) 
	WHERE INSTR(DECLARATION_PATH, ''/'') > 0 AND 
	DECLARATION_PATH IS NOT NULL AND SUBSTR(DECLARATION_PATH, 0, INSTR(DECLARATION_PATH, ''/'')-1) NOT IN (SELECT TABLE_NAME FROM SYSTEM_TABLE_METADATA STTM WHERE STTM.SCE_ID = STM.SCE_ID)
	AND EXISTS (SELECT * FROM SYS_CON_ENVIRONMENTS SCE WHERE STM.SCE_ID = SCE.SCE_ID AND SCE.DATABASE_TYPE = ''JSON'')';
	EXECUTE IMMEDIATE 'UPDATE SYSTEM_TABLE_COLUMNS_METADATA STM SET DECLARATION_PATH = SUBSTR(DECLARATION_PATH, INSTR(DECLARATION_PATH, ''/'')+1) 
	WHERE INSTR(DECLARATION_PATH, ''/'') > 0 AND 
	DECLARATION_PATH IS NOT NULL AND SUBSTR(DECLARATION_PATH, 0, INSTR(DECLARATION_PATH, ''/'')-1) NOT IN (SELECT TABLE_NAME FROM SYSTEM_TABLE_COLUMNS_METADATA STTM WHERE STTM.SCE_ID = STM.SCE_ID)
	AND EXISTS (SELECT * FROM SYS_CON_ENVIRONMENTS SCE WHERE STM.SCE_ID = SCE.SCE_ID AND SCE.DATABASE_TYPE = ''JSON'')';
    END IF;
END;
/
UPDATE SYSTEM_TABLE_METADATA SET DECLARATION_PATH = '/' || TABLE_NAME WHERE DECLARATION_PATH IS NULL
/
UPDATE SYSTEM_TABLE_COLUMNS_METADATA SET DECLARATION_PATH = '/' || TABLE_NAME WHERE DECLARATION_PATH IS NULL
/
UPDATE SYSTEM_TABLE_METADATA SET DECLARATION_PATH = '/' ||  TABLE_NAME WHERE DECLARATION_PATH = ' '
/
UPDATE SYSTEM_TABLE_COLUMNS_METADATA SET DECLARATION_PATH = '/' || TABLE_NAME WHERE DECLARATION_PATH = ' '
/
DECLARE
   INDEXCHECKERFLAG INT;
BEGIN
    SELECT COUNT(*) INTO INDEXCHECKERFLAG FROM ALL_INDEXES WHERE OWNER = sys_context('userenv', 'current_schema') AND INDEX_NAME = UPPER('STM_SID_SCEID_ENAME_TNAME_INDX');
   IF INDEXCHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'CREATE INDEX "STM_SID_SCEID_ENAME_TNAME_INDX" ON SYSTEM_TABLE_METADATA(SYSTEM_ID, SCE_ID, SYSTEM_ENV_NAME, TABLE_NAME)';
    END IF;
END;
/
DECLARE
   INDEXCHECKERFLAG INT;
BEGIN
    SELECT COUNT(*) INTO INDEXCHECKERFLAG FROM ALL_INDEXES WHERE OWNER = sys_context('userenv', 'current_schema') AND INDEX_NAME = UPPER('STCM_REFID_TYPE_VALID_INDX');
   IF INDEXCHECKERFLAG = 0 THEN
      EXECUTE IMMEDIATE 'CREATE INDEX "STCM_REFID_TYPE_VALID_INDX" ON SYSTEM_TABLE_COLUMNS_METADATA(REF_ID, TYPE, VALID)';
    END IF;
END;
/
DECLARE
   VERSIONCHECKKERFLAG INT;
BEGIN
    SELECT COUNT(*) INTO VERSIONCHECKKERFLAG FROM ADS_MM_VERSION WHERE VALUE <= 10.1;
    IF VERSIONCHECKKERFLAG = 1 THEN
        EXECUTE IMMEDIATE 'DELETE FROM MMROLE_PERMISSIONS WHERE PERMISSION_ID IN (''com.ads.mm.permission.mm.transformations.search'', ''com.ads.mm.permission.mm.transformations.search.transname'', ''com.ads.mm.permission.mm.transformations.search.createdby'', ''com.ads.mm.permission.mm.transformations.search.psuedocode'', ''com.ads.mm.permission.mm.transformations.search.intendedesc'', ''com.ads.mm.permission.mm.mapgrid.edit.extwindow.busrule'', ''com.ads.mm.permission.mm.mapgrid.edit.extwindow.extbusrule'', ''com.ads.mm.permission.mm.mapgrid.edit.extwindow.translookup'', ''com.ads.mm.permission.mm.mapgrid.edit.extwindow.userdefinitionfields'', ''com.ads.mm.permission.mm.mappings.search.mapname'', ''com.ads.mm.permission.mm.mappings.search.busrule'', ''com.ads.mm.permission.mm.mappings.search.srctable'', ''com.ads.mm.permission.mm.mappings.search.tgttable'')';
    END IF;
END;
/
DECLARE
   VERSIONCHECKKERFLAG INT;
BEGIN
    SELECT COUNT(*) INTO VERSIONCHECKKERFLAG FROM ADS_MM_VERSION WHERE VALUE <= 10.1;
    IF VERSIONCHECKKERFLAG = 1 THEN
        EXECUTE IMMEDIATE 'INSERT INTO MMROLE_PERMISSIONS(MMROLE_ID, PERMISSION_ID, ENABLED)
        select MMROLE_ID, ''com.ads.mm.permission.autom.scheduledjobs'' PERMISSION_ID, ENABLED 
        from MMROLE_PERMISSIONS where permission_id = ''com.ads.mm.permission.autom''
        union
        select MMROLE_ID, ''com.ads.mm.permission.autom.scheduledjobs.editjob'', ENABLED 
        from MMROLE_PERMISSIONS where permission_id = ''com.ads.mm.permission.autom''
        union
        select MMROLE_ID, ''com.ads.mm.permission.autom.scheduledjobs.deletejob'', ENABLED 
        from MMROLE_PERMISSIONS where permission_id = ''com.ads.mm.permission.autom''';
    END IF;
END;
/
DECLARE
   COLUMNCHECKERFLAG INT;
BEGIN
   SELECT COUNT(*) INTO COLUMNCHECKERFLAG FROM ALL_TAB_COLUMNS WHERE  OWNER = sys_context('userenv', 'current_schema') AND  TABLE_NAME = UPPER('SYSTEM_TABLE_COLUMNS_METADATA') AND COLUMN_NAME=UPPER('COL_DATATYPE');
   IF COLUMNCHECKERFLAG = 1 THEN
      EXECUTE IMMEDIATE 'ALTER TABLE SYSTEM_TABLE_COLUMNS_METADATA MODIFY(COL_DATATYPE VARCHAR2(255))';
   END IF;
END;
/
DECLARE
    VERSIONCHECKKERFLAG INT;
    TABLECHECKERFLAG INT;
BEGIN
    SELECT COUNT(*) INTO VERSIONCHECKKERFLAG FROM ADS_MM_VERSION WHERE VALUE <= 10.1;
    IF VERSIONCHECKKERFLAG = 1 THEN
        SELECT COUNT(*) INTO TABLECHECKERFLAG FROM ALL_OBJECTS WHERE OWNER = sys_context('userenv', 'current_schema') AND OBJECT_TYPE = 'FUNCTION' AND OBJECT_NAME = UPPER('FN_APND_SYS_ENV_TAB_CHECK');
        IF TABLECHECKERFLAG = 1 THEN
            EXECUTE IMMEDIATE 'DROP FUNCTION FN_APND_SYS_ENV_TAB_CHECK';
            EXECUTE IMMEDIATE 'DROP FUNCTION FN_APND_SYS_ENV_TAB_COL_CHECK';
            EXECUTE IMMEDIATE 'DROP FUNCTION FN_REPLACE_TABLE_NAME';
            EXECUTE IMMEDIATE 'DROP FUNCTION FN_REPLACE_COLUMN_NAME';
        END IF;
    END IF;
END;
/
DECLARE
    VERSIONCHECKKERFLAG INT;
    COLUMNCHECKERFLAG INT;
BEGIN
    SELECT COUNT(*) INTO VERSIONCHECKKERFLAG FROM ADS_MM_VERSION WHERE VALUE <= 10.1;
    IF VERSIONCHECKKERFLAG = 1 THEN
        SELECT COUNT(*) INTO COLUMNCHECKERFLAG FROM APP_PREFERENCES WHERE PREFERENCE_NAME = 'LAST_MAPPING_LINEAGE_SYNC_TIME';
        IF COLUMNCHECKERFLAG = 1 THEN
            EXECUTE IMMEDIATE 'UPDATE APP_PREFERENCES SET PREFERENCE_VALUE = ''1990-01-01 00:00:00.001'' WHERE PREFERENCE_NAME = ''LAST_MAPPING_LINEAGE_SYNC_TIME''';
            EXECUTE IMMEDIATE 'TRUNCATE TABLE APPENDED_MAP_SPEC_RECORDS';
            EXECUTE IMMEDIATE 'TRUNCATE TABLE MASTER_LINEAGE_GRAPH';
        END IF;
    END IF;
END;
/
DECLARE
VERSIONCHECKER NUMBER;
BEGIN
    SELECT COUNT(*) INTO VERSIONCHECKER FROM ADS_MM_VERSION WHERE VALUE <= 10.1;
    IF VERSIONCHECKER > 0 THEN
        EXECUTE IMMEDIATE 'UPDATE USERS SET USER_FULL_NAME = USER_ID WHERE USER_FULL_NAME IS NULL';
        EXECUTE IMMEDIATE 'UPDATE system_table_columns_metadata SET PHYSICAL_COLUMN_NAME = COLUMN_NAME WHERE PHYSICAL_COLUMN_NAME IS NULL AND SCE_ID IN (SELECT SCE_ID FROM SYS_CON_ENVIRONMENTS WHERE DATABASE_TYPE = ''JSON'')';
        EXECUTE IMMEDIATE 'UPDATE system_table_metadata SET PHYSICAL_TABLE_NAME = TABLE_NAME WHERE PHYSICAL_TABLE_NAME IS NULL AND SCE_ID IN (SELECT SCE_ID FROM SYS_CON_ENVIRONMENTS WHERE DATABASE_TYPE = ''JSON'')';
    END IF;
END;
/
DECLARE
   COLUMNCHECKERFLAG INT;
   EDITIONCHECKERFLAG INT;
   VIEWCHECKERFLAG INT;
BEGIN
    SELECT COUNT(*)  INTO EDITIONCHECKERFLAG FROM PRODUCT_COMPONENT_VERSION WHERE  PRODUCT LIKE '%Express Edition%';
    IF EDITIONCHECKERFLAG = 0 THEN
        SELECT COUNT(*) INTO COLUMNCHECKERFLAG FROM ALL_MVIEW_LOGS WHERE  LOG_OWNER = sys_context('userenv', 'current_schema') AND  "MASTER" = UPPER('SYSTEM_DEFINITION_DETAILS');
		SELECT COUNT(*) INTO VIEWCHECKERFLAG FROM ALL_MVIEWS WHERE  OWNER = sys_context('userenv', 'current_schema') AND  MVIEW_NAME = UPPER('MD_SYSTEM_OBJS');
            IF COLUMNCHECKERFLAG = 1 AND VIEWCHECKERFLAG = 1 THEN
                EXECUTE IMMEDIATE 'DROP MATERIALIZED VIEW MD_SYSTEM_OBJS';
                EXECUTE IMMEDIATE 'DROP MATERIALIZED VIEW LOG ON SYSTEM_DEFINITION_DETAILS';
            END IF;
    ELSE
        SELECT COUNT(*) INTO VIEWCHECKERFLAG FROM ALL_VIEWS WHERE  OWNER = sys_context('userenv', 'current_schema') AND  VIEW_NAME = UPPER('MD_SYSTEM_OBJS');
            IF VIEWCHECKERFLAG = 1 THEN
                EXECUTE IMMEDIATE 'DROP VIEW MD_SYSTEM_OBJS';
            END IF;
    END IF;
END;
/
DECLARE
   COLUMNCHECKERFLAG INT;
   EDITIONCHECKERFLAG INT;
BEGIN
    SELECT COUNT(*)  INTO EDITIONCHECKERFLAG FROM PRODUCT_COMPONENT_VERSION WHERE  PRODUCT LIKE '%Express Edition%';
    IF EDITIONCHECKERFLAG = 0 THEN
        SELECT COUNT(*) INTO COLUMNCHECKERFLAG FROM ALL_MVIEW_LOGS WHERE  LOG_OWNER = sys_context('userenv', 'current_schema') AND  "MASTER" = UPPER('SYS_CON_ENVIRONMENTS');
            IF COLUMNCHECKERFLAG = 0 THEN
                EXECUTE IMMEDIATE 'Create Materialized view log on SYS_CON_ENVIRONMENTS with PRIMARY KEY, ROWID';
            END IF;
    ELSE
        DBMS_OUTPUT.PUT_LINE ('Creating Materialized view log on SYS_CON_ENVIRONMENTS is not created due to express edition');
    END IF;
END;
/
DECLARE
    COLUMNCHECKERFLAG INT;
    EDITIONCHECKERFLAG INT;
BEGIN
    SELECT COUNT(*)  INTO EDITIONCHECKERFLAG FROM PRODUCT_COMPONENT_VERSION WHERE  PRODUCT LIKE '%Express Edition%';
    IF EDITIONCHECKERFLAG = 0 THEN
        SELECT COUNT(*) INTO COLUMNCHECKERFLAG FROM ALL_MVIEW_LOGS WHERE  LOG_OWNER = sys_context('userenv', 'current_schema') AND  "MASTER" = UPPER('SYSTEM_TABLE_METADATA');
        IF COLUMNCHECKERFLAG = 0 THEN
           EXECUTE IMMEDIATE 'Create Materialized view log on SYSTEM_TABLE_METADATA with PRIMARY KEY, ROWID';
        END IF;
    ELSE
        DBMS_OUTPUT.PUT_LINE ('Creating Materialized view log on SYSTEM_TABLE_METADATA  is not created due to express edition');
    END IF;
END;
/

DECLARE
    COLUMNCHECKERFLAG INT;
    EDITIONCHECKERFLAG INT;
BEGIN
    SELECT COUNT(*)  INTO EDITIONCHECKERFLAG FROM PRODUCT_COMPONENT_VERSION WHERE  PRODUCT LIKE '%Express Edition%';
    IF EDITIONCHECKERFLAG = 0 THEN
        SELECT COUNT(*) INTO COLUMNCHECKERFLAG FROM ALL_MVIEW_LOGS WHERE  LOG_OWNER = sys_context('userenv', 'current_schema') AND  "MASTER" = UPPER('SYSTEM_TABLE_COLUMNS_METADATA');
        IF COLUMNCHECKERFLAG = 0 THEN
           EXECUTE IMMEDIATE 'Create Materialized view log on SYSTEM_TABLE_COLUMNS_METADATA with PRIMARY KEY,ROWID';
        END IF;
    ELSE
        DBMS_OUTPUT.PUT_LINE ('Creating Materialized view log on SYSTEM_TABLE_COLUMNS_METADATA  is not created due to express edition');
    END IF;
END;
/

DECLARE
    COLUMNCHECKERFLAG INT;
    VIEWCHECKERFLAG INT;
    TABLE_OBJECT_TYPE_ID NUMBER;
    COLUMN_OBJECT_TYPE_ID NUMBER;
    EDITIONCHECKERFLAG INT;
BEGIN
    SELECT COUNT(*)  INTO EDITIONCHECKERFLAG FROM PRODUCT_COMPONENT_VERSION WHERE  PRODUCT LIKE '%Express Edition%';
    IF EDITIONCHECKERFLAG = 0 THEN
        SELECT COUNT(*) INTO COLUMNCHECKERFLAG FROM ALL_MVIEWS WHERE  OWNER = sys_context('userenv', 'current_schema') AND  MVIEW_NAME = UPPER('MD_SYSTEM_OBJS');
        SELECT COUNT(*) INTO VIEWCHECKERFLAG FROM all_VIEWS WHERE  OWNER = sys_context('userenv', 'current_schema') AND  VIEW_NAME = UPPER('MD_SYSTEM_OBJS');
        IF (COLUMNCHECKERFLAG = 0  AND VIEWCHECKERFLAG = 0) THEN
           SELECT OBJECT_TYPE_ID INTO TABLE_OBJECT_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE = 'SM_TABLE';
           SELECT OBJECT_TYPE_ID INTO COLUMN_OBJECT_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE = 'SM_COLUMN';
           EXECUTE IMMEDIATE 'CREATE Materialized view MD_SYSTEM_OBJS
           REFRESH FAST
           ON COMMIT
           AS
             (SELECT stcm.stcm_id            OBJECT_ID,
                    stcm.column_name        OBJECT_NAME,
                    stcm.col_def            DESCRIPTION,
                    SCE.system_name
                    || ''/''
                    || stcm.system_env_name
                    || ''/''
                    || stcm.table_name      OBJECT_PATH,'
                    || COLUMN_OBJECT_TYPE_ID || ' OBJECT_TYPE_ID,
                    stcm.sce_id             PARENT_OBJECT_ID,
                    stcm.created_by         CREATED_BY,
                    stcm.valid              VALID,
                    stcm.type                TYPE,
                    SCE.system_id            SYSTEM_ID,
                    stcm.rowid               ROWID_SO,
                    SCE.rowid                ROWID_SCE
              FROM  SYSTEM_TABLE_COLUMNS_METADATA  stcm, SYS_CON_ENVIRONMENTS SCE
              Where stcm.sce_id = SCE.sce_id and UPPER(SCE.status) = ''ACTIVE''

              UNION ALL

             SELECT stm.stm_id             OBJECT_ID,
                    stm.table_name         OBJECT_NAME,
                    stm.table_def          DESCRIPTION,
                    SCE.system_name
                    || ''/''
                    || stm.system_env_name OBJECT_PATH,'
                    || TABLE_OBJECT_TYPE_ID || ' OBJECT_TYPE_ID,
                    stm.sce_id              PARENT_OBJECT_ID,
                    stm.created_by          CREATED_BY,
                    stm.valid               VALID,
                    stm.type                TYPE,
                    SCE.system_id           SYSTEM_ID,
                    stm.rowid               ROWID_SO,
                    SCE.rowid               ROWID_SCE
              FROM  SYSTEM_TABLE_METADATA  stm, SYS_CON_ENVIRONMENTS SCE
              Where stm.sce_id = SCE.sce_id and UPPER(SCE.status) = ''ACTIVE'') order by object_id';
              EXECUTE IMMEDIATE 'ALTER MATERIALIZED VIEW MD_SYSTEM_OBJS MODIFY (OBJECT_PATH VARCHAR2(4000))';
        END IF;
    ELSE
        SELECT COUNT(*) INTO COLUMNCHECKERFLAG FROM ALL_MVIEWS WHERE  OWNER = sys_context('userenv', 'current_schema') AND  MVIEW_NAME = UPPER('MD_SYSTEM_OBJS');
        SELECT COUNT(*) INTO VIEWCHECKERFLAG FROM all_VIEWS WHERE  OWNER = sys_context('userenv', 'current_schema') AND  VIEW_NAME = UPPER('MD_SYSTEM_OBJS');
        IF (COLUMNCHECKERFLAG = 0  AND VIEWCHECKERFLAG = 0) THEN
           SELECT OBJECT_TYPE_ID INTO TABLE_OBJECT_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE = 'SM_TABLE';
           SELECT OBJECT_TYPE_ID INTO COLUMN_OBJECT_TYPE_ID FROM ADS_KEY_VALUE_OBJECTS WHERE OBJECT_TYPE = 'SM_COLUMN';
           EXECUTE IMMEDIATE 'CREATE view MD_SYSTEM_OBJS
           AS
             (SELECT stcm.stcm_id            OBJECT_ID,
                    stcm.column_name        OBJECT_NAME,
                    stcm.col_def            DESCRIPTION,
                    SCE.system_name
                    || ''/''
                    || stcm.system_env_name
                    || ''/''
                    || stcm.table_name      OBJECT_PATH,'
                    || COLUMN_OBJECT_TYPE_ID || ' OBJECT_TYPE_ID,
                    stcm.sce_id             PARENT_OBJECT_ID,
                    stcm.created_by         CREATED_BY,
                    stcm.valid              VALID,
                    stcm.type                TYPE,
                    SCE.system_id            SYSTEM_ID,
                    stcm.rowid               ROWID_SO,
                    SCE.rowid                ROWID_SCE
              FROM  SYSTEM_TABLE_COLUMNS_METADATA  stcm, SYS_CON_ENVIRONMENTS SCE
              Where stcm.sce_id = SCE.sce_id and UPPER(SCE.status) = ''ACTIVE''

              UNION ALL

             SELECT stm.stm_id             OBJECT_ID,
                    stm.table_name         OBJECT_NAME,
                    stm.table_def          DESCRIPTION,
                    SCE.system_name
                    || ''/''
                    || stm.system_env_name OBJECT_PATH,'
                    || TABLE_OBJECT_TYPE_ID || ' OBJECT_TYPE_ID,
                    stm.sce_id              PARENT_OBJECT_ID,
                    stm.created_by          CREATED_BY,
                    stm.valid               VALID,
                    stm.type                TYPE,
                    SCE.system_id           SYSTEM_ID,
                    stm.rowid               ROWID_SO,
                    SCE.rowid               ROWID_SCE
              FROM  SYSTEM_TABLE_METADATA  stm, SYS_CON_ENVIRONMENTS SCE
              Where stm.sce_id = SCE.sce_id and UPPER(SCE.status) = ''ACTIVE'') order by object_id';
        END IF;
    END IF;
END;
/
UPDATE ADS_MM_VERSION SET VALUE = 10.2;
/
COMMIT;
/
